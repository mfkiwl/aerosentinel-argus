
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011878  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08011b48  08011b48  00012b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080122fc  080122fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012304  08012304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012308  08012308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  24000000  0801230c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bc0  240001e8  080124f0  000141e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000da8  080124f0  00014da8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a029  00000000  00000000  00014212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042f0  00000000  00000000  0003e23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002458  00000000  00000000  00042530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d03  00000000  00000000  00044988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00008a32  00000000  00000000  0004668b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002dbea  00000000  00000000  0004f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177e77  00000000  00000000  0007cca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f4b1e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b41c  00000000  00000000  001f4b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  001fff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011b30 	.word	0x08011b30

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	08011b30 	.word	0x08011b30

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000748:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000aa0:	23ff      	movs	r3, #255	@ 0xff
 8000aa2:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000aac:	2300      	movs	r3, #0
 8000aae:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000ab0:	4a58      	ldr	r2, [pc, #352]	@ (8000c14 <bno055_init+0x17c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000ab6:	4b57      	ldr	r3, [pc, #348]	@ (8000c14 <bno055_init+0x17c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68dc      	ldr	r4, [r3, #12]
 8000abc:	4b55      	ldr	r3, [pc, #340]	@ (8000c14 <bno055_init+0x17c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	7a58      	ldrb	r0, [r3, #9]
 8000ac2:	f107 020d 	add.w	r2, r7, #13
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	2107      	movs	r1, #7
 8000aca:	47a0      	blx	r4
 8000acc:	4603      	mov	r3, r0
 8000ace:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ad0:	4b50      	ldr	r3, [pc, #320]	@ (8000c14 <bno055_init+0x17c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	691c      	ldr	r4, [r3, #16]
 8000ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c14 <bno055_init+0x17c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	7a58      	ldrb	r0, [r3, #9]
 8000adc:	f107 020e 	add.w	r2, r7, #14
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	47a0      	blx	r4
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	4413      	add	r3, r2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000af2:	4b48      	ldr	r3, [pc, #288]	@ (8000c14 <bno055_init+0x17c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	7bba      	ldrb	r2, [r7, #14]
 8000af8:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000afa:	4b46      	ldr	r3, [pc, #280]	@ (8000c14 <bno055_init+0x17c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	691c      	ldr	r4, [r3, #16]
 8000b00:	4b44      	ldr	r3, [pc, #272]	@ (8000c14 <bno055_init+0x17c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	7a58      	ldrb	r0, [r3, #9]
 8000b06:	f107 020e 	add.w	r2, r7, #14
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	47a0      	blx	r4
 8000b10:	4603      	mov	r3, r0
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	4413      	add	r3, r2
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c14 <bno055_init+0x17c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	7bba      	ldrb	r2, [r7, #14]
 8000b22:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b24:	4b3b      	ldr	r3, [pc, #236]	@ (8000c14 <bno055_init+0x17c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	691c      	ldr	r4, [r3, #16]
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c14 <bno055_init+0x17c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	7a58      	ldrb	r0, [r3, #9]
 8000b30:	f107 020e 	add.w	r2, r7, #14
 8000b34:	2301      	movs	r3, #1
 8000b36:	2102      	movs	r1, #2
 8000b38:	47a0      	blx	r4
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	4413      	add	r3, r2
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000b46:	4b33      	ldr	r3, [pc, #204]	@ (8000c14 <bno055_init+0x17c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	7bba      	ldrb	r2, [r7, #14]
 8000b4c:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b4e:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <bno055_init+0x17c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	691c      	ldr	r4, [r3, #16]
 8000b54:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <bno055_init+0x17c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	7a58      	ldrb	r0, [r3, #9]
 8000b5a:	f107 020e 	add.w	r2, r7, #14
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2103      	movs	r1, #3
 8000b62:	47a0      	blx	r4
 8000b64:	4603      	mov	r3, r0
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000b70:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <bno055_init+0x17c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	7bba      	ldrb	r2, [r7, #14]
 8000b76:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <bno055_init+0x17c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	691c      	ldr	r4, [r3, #16]
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <bno055_init+0x17c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	7a58      	ldrb	r0, [r3, #9]
 8000b84:	f107 020e 	add.w	r2, r7, #14
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2106      	movs	r1, #6
 8000b8c:	47a0      	blx	r4
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	4413      	add	r3, r2
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <bno055_init+0x17c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	7bba      	ldrb	r2, [r7, #14]
 8000ba0:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <bno055_init+0x17c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	691c      	ldr	r4, [r3, #16]
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <bno055_init+0x17c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	7a58      	ldrb	r0, [r3, #9]
 8000bae:	f107 0208 	add.w	r2, r7, #8
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	47a0      	blx	r4
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000bc4:	7a3b      	ldrb	r3, [r7, #8]
 8000bc6:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000bc8:	7a7b      	ldrb	r3, [r7, #9]
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	7a3b      	ldrb	r3, [r7, #8]
 8000bd0:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <bno055_init+0x17c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000bda:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <bno055_init+0x17c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	691c      	ldr	r4, [r3, #16]
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <bno055_init+0x17c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	7a58      	ldrb	r0, [r3, #9]
 8000be8:	f107 020e 	add.w	r2, r7, #14
 8000bec:	2301      	movs	r3, #1
 8000bee:	2107      	movs	r1, #7
 8000bf0:	47a0      	blx	r4
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000bfe:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <bno055_init+0x17c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	7bba      	ldrb	r2, [r7, #14]
 8000c04:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	24000204 	.word	0x24000204

08000c18 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	4613      	mov	r3, r2
 8000c26:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c28:	23ff      	movs	r3, #255	@ 0xff
 8000c2a:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <bno055_write_register+0x48>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000c34:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000c38:	e00d      	b.n	8000c56 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <bno055_write_register+0x48>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68dc      	ldr	r4, [r3, #12]
 8000c40:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <bno055_write_register+0x48>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	7a58      	ldrb	r0, [r3, #9]
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	79f9      	ldrb	r1, [r7, #7]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	47a0      	blx	r4
 8000c4e:	4603      	mov	r3, r0
 8000c50:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24000204 	.word	0x24000204

08000c64 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c6e:	23ff      	movs	r3, #255	@ 0xff
 8000c70:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000c7e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000c82:	e030      	b.n	8000ce6 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	691c      	ldr	r4, [r3, #16]
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	7a58      	ldrb	r0, [r3, #9]
 8000c90:	f107 020e 	add.w	r2, r7, #14
 8000c94:	2301      	movs	r3, #1
 8000c96:	2107      	movs	r1, #7
 8000c98:	47a0      	blx	r4
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d11b      	bne.n	8000cde <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68dc      	ldr	r4, [r3, #12]
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	7a58      	ldrb	r0, [r3, #9]
 8000cb6:	f107 020e 	add.w	r2, r7, #14
 8000cba:	2301      	movs	r3, #1
 8000cbc:	2107      	movs	r1, #7
 8000cbe:	47a0      	blx	r4
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d106      	bne.n	8000ce2 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	711a      	strb	r2, [r3, #4]
 8000cdc:	e001      	b.n	8000ce2 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000cde:	23ff      	movs	r3, #255	@ 0xff
 8000ce0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	24000204 	.word	0x24000204

08000cf4 <bno055_read_accel_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_accel_xyz(struct bno055_accel_t *accel)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000cfc:	23ff      	movs	r3, #255	@ 0xff
 8000cfe:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 8000d00:	4a31      	ldr	r2, [pc, #196]	@ (8000dc8 <bno055_read_accel_xyz+0xd4>)
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d0a:	6018      	str	r0, [r3, #0]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000d10:	23ff      	movs	r3, #255	@ 0xff
 8000d12:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d14:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <bno055_read_accel_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8000d1c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000d20:	e04e      	b.n	8000dc0 <bno055_read_accel_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000d22:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d004      	beq.n	8000d36 <bno055_read_accel_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff ff99 	bl	8000c64 <bno055_write_page_id>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000d36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <bno055_read_accel_xyz+0x54>
 8000d3e:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d137      	bne.n	8000db8 <bno055_read_accel_xyz+0xc4>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d48:	4b20      	ldr	r3, [pc, #128]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	691c      	ldr	r4, [r3, #16]
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	7a58      	ldrb	r0, [r3, #9]
 8000d54:	f107 0208 	add.w	r2, r7, #8
 8000d58:	2306      	movs	r3, #6
 8000d5a:	2108      	movs	r1, #8
 8000d5c:	47a0      	blx	r4
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_ACCEL_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000d62:	7a3b      	ldrb	r3, [r7, #8]
 8000d64:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000d66:	7a7b      	ldrb	r3, [r7, #9]
 8000d68:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_ACCEL_DATA_X_MSB_VALUEX);
            accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000d6a:	7a7b      	ldrb	r3, [r7, #9]
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000d72:	7a3b      	ldrb	r3, [r7, #8]
 8000d74:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b21a      	sxth	r2, r3
            accel->x =
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000d7e:	7abb      	ldrb	r3, [r7, #10]
 8000d80:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_ACCEL_DATA_Y_MSB_VALUEY);
            accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000d8e:	7abb      	ldrb	r3, [r7, #10]
 8000d90:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21a      	sxth	r2, r3
            accel->y =
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000d9e:	7b7b      	ldrb	r3, [r7, #13]
 8000da0:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_ACCEL_DATA_Z_MSB_VALUEZ);
            accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000da2:	7b7b      	ldrb	r3, [r7, #13]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b21a      	sxth	r2, r3
            accel->z =
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	809a      	strh	r2, [r3, #4]
 8000db6:	e001      	b.n	8000dbc <bno055_read_accel_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000db8:	23ff      	movs	r3, #255	@ 0xff
 8000dba:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	08011b48 	.word	0x08011b48
 8000dcc:	24000204 	.word	0x24000204

08000dd0 <bno055_read_mag_x>:
 *
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_x(s16 *mag_x_s16)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000dd8:	23ff      	movs	r3, #255	@ 0xff
 8000dda:	73fb      	strb	r3, [r7, #15]

    /* Array holding the mag x value
     * data_u8[BNO055_SENSOR_DATA_LSB] - x->LSB
     * data_u8[BNO055_SENSOR_DATA_MSB] - x->MSB
     */
    u8 data_u8[BNO055_MAG_DATA_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000ddc:	2300      	movs	r3, #0
 8000dde:	81bb      	strh	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000de0:	23ff      	movs	r3, #255	@ 0xff
 8000de2:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <bno055_read_mag_x+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000dec:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000df0:	e032      	b.n	8000e58 <bno055_read_mag_x+0x88>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000df2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <bno055_read_mag_x+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff31 	bl	8000c64 <bno055_write_page_id>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d004      	beq.n	8000e18 <bno055_read_mag_x+0x48>
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	791b      	ldrb	r3, [r3, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d11b      	bne.n	8000e50 <bno055_read_mag_x+0x80>
        {
            /*Read the mag x two bytes of data */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	691c      	ldr	r4, [r3, #16]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	7a58      	ldrb	r0, [r3, #9]
 8000e24:	f107 020c 	add.w	r2, r7, #12
 8000e28:	2302      	movs	r3, #2
 8000e2a:	210e      	movs	r1, #14
 8000e2c:	47a0      	blx	r4
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_MAG_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_LSB_MSB_READ_LENGTH);
            data_u8[BNO055_SENSOR_DATA_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_LSB],
 8000e32:	7b3b      	ldrb	r3, [r7, #12]
 8000e34:	733b      	strb	r3, [r7, #12]
                                                                  BNO055_MAG_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_MSB],
 8000e36:	7b7b      	ldrb	r3, [r7, #13]
 8000e38:	737b      	strb	r3, [r7, #13]
                                                                  BNO055_MAG_DATA_X_MSB_VALUEX);
            *mag_x_s16 =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e3a:	7b7b      	ldrb	r3, [r7, #13]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_LSB]));
 8000e42:	7b3b      	ldrb	r3, [r7, #12]
 8000e44:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b21a      	sxth	r2, r3
            *mag_x_s16 =
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	801a      	strh	r2, [r3, #0]
 8000e4e:	e001      	b.n	8000e54 <bno055_read_mag_x+0x84>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000e50:	23ff      	movs	r3, #255	@ 0xff
 8000e52:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	24000204 	.word	0x24000204

08000e64 <bno055_read_mag_y>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_y(s16 *mag_y_s16)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e6c:	23ff      	movs	r3, #255	@ 0xff
 8000e6e:	73fb      	strb	r3, [r7, #15]

    /* Array holding the mag y value
     * data_u8[BNO055_SENSOR_DATA_LSB] - y->LSB
     * data_u8[BNO055_SENSOR_DATA_MSB] - y->MSB
     */
    u8 data_u8[BNO055_MAG_DATA_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000e70:	2300      	movs	r3, #0
 8000e72:	81bb      	strh	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000e74:	23ff      	movs	r3, #255	@ 0xff
 8000e76:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000e78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <bno055_read_mag_y+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000e80:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000e84:	e032      	b.n	8000eec <bno055_read_mag_y+0x88>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <bno055_read_mag_y+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fee7 	bl	8000c64 <bno055_write_page_id>
 8000e96:	4603      	mov	r3, r0
 8000e98:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000e9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <bno055_read_mag_y+0x48>
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	791b      	ldrb	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d11b      	bne.n	8000ee4 <bno055_read_mag_y+0x80>
        {
            /*Read the mag y two bytes of data */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691c      	ldr	r4, [r3, #16]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	7a58      	ldrb	r0, [r3, #9]
 8000eb8:	f107 020c 	add.w	r2, r7, #12
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	47a0      	blx	r4
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_MAG_DATA_Y_LSB_VALUEY_REG,
                                                      data_u8,
                                                      BNO055_LSB_MSB_READ_LENGTH);
            data_u8[BNO055_SENSOR_DATA_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_LSB],
 8000ec6:	7b3b      	ldrb	r3, [r7, #12]
 8000ec8:	733b      	strb	r3, [r7, #12]
                                                                  BNO055_MAG_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_MSB],
 8000eca:	7b7b      	ldrb	r3, [r7, #13]
 8000ecc:	737b      	strb	r3, [r7, #13]
                                                                  BNO055_MAG_DATA_Y_MSB_VALUEY);
            *mag_y_s16 =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_LSB]));
 8000ed6:	7b3b      	ldrb	r3, [r7, #12]
 8000ed8:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21a      	sxth	r2, r3
            *mag_y_s16 =
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	801a      	strh	r2, [r3, #0]
 8000ee2:	e001      	b.n	8000ee8 <bno055_read_mag_y+0x84>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000ee4:	23ff      	movs	r3, #255	@ 0xff
 8000ee6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	24000204 	.word	0x24000204

08000ef8 <bno055_read_mag_z>:
 *
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_z(s16 *mag_z_s16)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000f00:	23ff      	movs	r3, #255	@ 0xff
 8000f02:	73fb      	strb	r3, [r7, #15]

    /* Array holding the mag z value
     * data_u8[BNO055_SENSOR_DATA_LSB] - z->LSB
     * data_u8[BNO055_SENSOR_DATA_MSB] - z->MSB
     */
    u8 data_u8[BNO055_MAG_DATA_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000f04:	2300      	movs	r3, #0
 8000f06:	81bb      	strh	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000f08:	23ff      	movs	r3, #255	@ 0xff
 8000f0a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <bno055_read_mag_z+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000f14:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000f18:	e032      	b.n	8000f80 <bno055_read_mag_z+0x88>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	791b      	ldrb	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <bno055_read_mag_z+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fe9d 	bl	8000c64 <bno055_write_page_id>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d004      	beq.n	8000f40 <bno055_read_mag_z+0x48>
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	791b      	ldrb	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d11b      	bne.n	8000f78 <bno055_read_mag_z+0x80>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691c      	ldr	r4, [r3, #16]
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	7a58      	ldrb	r0, [r3, #9]
 8000f4c:	f107 020c 	add.w	r2, r7, #12
 8000f50:	2302      	movs	r3, #2
 8000f52:	2112      	movs	r1, #18
 8000f54:	47a0      	blx	r4
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_MAG_DATA_Z_LSB_VALUEZ_REG,
                                                      data_u8,
                                                      BNO055_LSB_MSB_READ_LENGTH);

            /*Read the mag z two bytes of data */
            data_u8[BNO055_SENSOR_DATA_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_LSB],
 8000f5a:	7b3b      	ldrb	r3, [r7, #12]
 8000f5c:	733b      	strb	r3, [r7, #12]
                                                                  BNO055_MAG_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_MSB],
 8000f5e:	7b7b      	ldrb	r3, [r7, #13]
 8000f60:	737b      	strb	r3, [r7, #13]
                                                                  BNO055_MAG_DATA_Z_MSB_VALUEZ);
            *mag_z_s16 =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_LSB]));
 8000f6a:	7b3b      	ldrb	r3, [r7, #12]
 8000f6c:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21a      	sxth	r2, r3
            *mag_z_s16 =
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	801a      	strh	r2, [r3, #0]
 8000f76:	e001      	b.n	8000f7c <bno055_read_mag_z+0x84>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000f78:	23ff      	movs	r3, #255	@ 0xff
 8000f7a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	24000204 	.word	0x24000204

08000f8c <bno055_read_gyro_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gyro_xyz(struct bno055_gyro_t *gyro)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000f94:	23ff      	movs	r3, #255	@ 0xff
 8000f96:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GYRO_XYZ_DATA_SIZE] = {
 8000f98:	4a31      	ldr	r2, [pc, #196]	@ (8001060 <bno055_read_gyro_xyz+0xd4>)
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa2:	6018      	str	r0, [r3, #0]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000fa8:	23ff      	movs	r3, #255	@ 0xff
 8000faa:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000fac:	4b2d      	ldr	r3, [pc, #180]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <bno055_read_gyro_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8000fb4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000fb8:	e04e      	b.n	8001058 <bno055_read_gyro_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000fba:	4b2a      	ldr	r3, [pc, #168]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	791b      	ldrb	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <bno055_read_gyro_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fe4d 	bl	8000c64 <bno055_write_page_id>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <bno055_read_gyro_xyz+0x54>
 8000fd6:	4b23      	ldr	r3, [pc, #140]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d137      	bne.n	8001050 <bno055_read_gyro_xyz+0xc4>
        {
            /* Read the six bytes data of gyro xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	691c      	ldr	r4, [r3, #16]
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	7a58      	ldrb	r0, [r3, #9]
 8000fec:	f107 0208 	add.w	r2, r7, #8
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	2114      	movs	r1, #20
 8000ff4:	47a0      	blx	r4
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_GYRO_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_GYRO_XYZ_DATA_SIZE);

            /* Data x*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000ffa:	7a3b      	ldrb	r3, [r7, #8]
 8000ffc:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_GYRO_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000ffe:	7a7b      	ldrb	r3, [r7, #9]
 8001000:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_GYRO_DATA_X_MSB_VALUEX);
            gyro->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001002:	7a7b      	ldrb	r3, [r7, #9]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 800100a:	7a3b      	ldrb	r3, [r7, #8]
 800100c:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
            gyro->x =
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	801a      	strh	r2, [r3, #0]

            /* Data y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_GYRO_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_GYRO_DATA_Y_MSB_VALUEY);
            gyro->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	b25b      	sxtb	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8001026:	7abb      	ldrb	r3, [r7, #10]
 8001028:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
            gyro->y =
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	805a      	strh	r2, [r3, #2]

            /* Data z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_GYRO_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_GYRO_DATA_Z_MSB_VALUEZ);
            gyro->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	b25b      	sxtb	r3, r3
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001046:	4313      	orrs	r3, r2
 8001048:	b21a      	sxth	r2, r3
            gyro->z =
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	809a      	strh	r2, [r3, #4]
 800104e:	e001      	b.n	8001054 <bno055_read_gyro_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001050:	23ff      	movs	r3, #255	@ 0xff
 8001052:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	08011b48 	.word	0x08011b48
 8001064:	24000204 	.word	0x24000204

08001068 <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001070:	23ff      	movs	r3, #255	@ 0xff
 8001072:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 8001074:	4a31      	ldr	r2, [pc, #196]	@ (800113c <bno055_read_euler_hrp+0xd4>)
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107e:	6018      	str	r0, [r3, #0]
 8001080:	3304      	adds	r3, #4
 8001082:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8001084:	23ff      	movs	r3, #255	@ 0xff
 8001086:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <bno055_read_euler_hrp+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8001090:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001094:	e04e      	b.n	8001134 <bno055_read_euler_hrp+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001096:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <bno055_read_euler_hrp+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fddf 	bl	8000c64 <bno055_write_page_id>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80010aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <bno055_read_euler_hrp+0x54>
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	791b      	ldrb	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d137      	bne.n	800112c <bno055_read_euler_hrp+0xc4>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010bc:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	691c      	ldr	r4, [r3, #16]
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	7a58      	ldrb	r0, [r3, #9]
 80010c8:	f107 0208 	add.w	r2, r7, #8
 80010cc:	2306      	movs	r3, #6
 80010ce:	211a      	movs	r1, #26
 80010d0:	47a0      	blx	r4
 80010d2:	4603      	mov	r3, r0
 80010d4:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 80010d6:	7a3b      	ldrb	r3, [r7, #8]
 80010d8:	723b      	strb	r3, [r7, #8]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 80010da:	7a7b      	ldrb	r3, [r7, #9]
 80010dc:	727b      	strb	r3, [r7, #9]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80010de:	7a7b      	ldrb	r3, [r7, #9]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 80010e6:	7a3b      	ldrb	r3, [r7, #8]
 80010e8:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21a      	sxth	r2, r3
            euler->h =
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 80010f2:	7abb      	ldrb	r3, [r7, #10]
 80010f4:	72bb      	strb	r3, [r7, #10]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	72fb      	strb	r3, [r7, #11]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 8001102:	7abb      	ldrb	r3, [r7, #10]
 8001104:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
            euler->r =
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 800110e:	7b3b      	ldrb	r3, [r7, #12]
 8001110:	733b      	strb	r3, [r7, #12]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 8001112:	7b7b      	ldrb	r3, [r7, #13]
 8001114:	737b      	strb	r3, [r7, #13]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001116:	7b7b      	ldrb	r3, [r7, #13]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
            euler->p =
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	809a      	strh	r2, [r3, #4]
 800112a:	e001      	b.n	8001130 <bno055_read_euler_hrp+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001130:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	08011b48 	.word	0x08011b48
 8001140:	24000204 	.word	0x24000204

08001144 <bno055_read_quaternion_wxyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_quaternion_wxyz(struct bno055_quaternion_t *quaternion)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800114c:	23ff      	movs	r3, #255	@ 0xff
 800114e:	75fb      	strb	r3, [r7, #23]
     * data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_QUATERNION_WXYZ_DATA_SIZE] = {
 8001150:	4a38      	ldr	r2, [pc, #224]	@ (8001234 <bno055_read_quaternion_wxyz+0xf0>)
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115a:	e883 0003 	stmia.w	r3, {r0, r1}
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE,
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 800115e:	23ff      	movs	r3, #255	@ 0xff
 8001160:	75bb      	strb	r3, [r7, #22]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001162:	4b35      	ldr	r3, [pc, #212]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <bno055_read_quaternion_wxyz+0x2c>
    {
        return BNO055_E_NULL_PTR;
 800116a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800116e:	e05c      	b.n	800122a <bno055_read_quaternion_wxyz+0xe6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001170:	4b31      	ldr	r3, [pc, #196]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <bno055_read_quaternion_wxyz+0x40>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff fd72 	bl	8000c64 <bno055_write_page_id>
 8001180:	4603      	mov	r3, r0
 8001182:	75bb      	strb	r3, [r7, #22]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001184:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <bno055_read_quaternion_wxyz+0x52>
 800118c:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	791b      	ldrb	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d145      	bne.n	8001222 <bno055_read_quaternion_wxyz+0xde>
        {
            /* Read the eight byte value
             * of quaternion wxyz data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	691c      	ldr	r4, [r3, #16]
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	7a58      	ldrb	r0, [r3, #9]
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	2308      	movs	r3, #8
 80011a8:	2120      	movs	r1, #32
 80011aa:	47a0      	blx	r4
 80011ac:	4603      	mov	r3, r0
 80011ae:	75fb      	strb	r3, [r7, #23]
                                                      data_u8,
                                                      BNO055_QUATERNION_WXYZ_DATA_SIZE);

            /* Data W*/
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_LSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_LSB],
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_LSB] =
 80011b2:	733b      	strb	r3, [r7, #12]
                                    BNO055_QUATERNION_DATA_W_LSB_VALUEW);
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB],
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB] =
 80011b6:	737b      	strb	r3, [r7, #13]
                                    BNO055_QUATERNION_DATA_W_MSB_VALUEW);
            quaternion->w =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_LSB]));
 80011c0:	7b3b      	ldrb	r3, [r7, #12]
 80011c2:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21a      	sxth	r2, r3
            quaternion->w =
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	801a      	strh	r2, [r3, #0]

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_LSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_LSB],
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_LSB] =
 80011ce:	73bb      	strb	r3, [r7, #14]
                                    BNO055_QUATERNION_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB],
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB] =
 80011d2:	73fb      	strb	r3, [r7, #15]
                                    BNO055_QUATERNION_DATA_X_MSB_VALUEX);
            quaternion->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_LSB]));
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
            quaternion->x =
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	805a      	strh	r2, [r3, #2]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB],
 80011e8:	7c3b      	ldrb	r3, [r7, #16]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB] =
 80011ea:	743b      	strb	r3, [r7, #16]
                                    BNO055_QUATERNION_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB],
 80011ec:	7c7b      	ldrb	r3, [r7, #17]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB] =
 80011ee:	747b      	strb	r3, [r7, #17]
                                    BNO055_QUATERNION_DATA_Y_MSB_VALUEY);
            quaternion->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011f0:	7c7b      	ldrb	r3, [r7, #17]
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB]));
 80011f8:	7c3b      	ldrb	r3, [r7, #16]
 80011fa:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21a      	sxth	r2, r3
            quaternion->y =
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	809a      	strh	r2, [r3, #4]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB],
 8001204:	7cbb      	ldrb	r3, [r7, #18]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB] =
 8001206:	74bb      	strb	r3, [r7, #18]
                                    BNO055_QUATERNION_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB],
 8001208:	7cfb      	ldrb	r3, [r7, #19]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB] =
 800120a:	74fb      	strb	r3, [r7, #19]
                                    BNO055_QUATERNION_DATA_Z_MSB_VALUEZ);
            quaternion->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800120c:	7cfb      	ldrb	r3, [r7, #19]
 800120e:	b25b      	sxtb	r3, r3
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB]));
 8001214:	7cbb      	ldrb	r3, [r7, #18]
 8001216:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001218:	4313      	orrs	r3, r2
 800121a:	b21a      	sxth	r2, r3
            quaternion->z =
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	80da      	strh	r2, [r3, #6]
 8001220:	e001      	b.n	8001226 <bno055_read_quaternion_wxyz+0xe2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001222:	23ff      	movs	r3, #255	@ 0xff
 8001224:	75fb      	strb	r3, [r7, #23]
        }
    }

    return com_rslt;
 8001226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800122a:	4618      	mov	r0, r3
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	08011b50 	.word	0x08011b50
 8001238:	24000204 	.word	0x24000204

0800123c <bno055_read_gravity_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gravity_xyz(struct bno055_gravity_t *gravity)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001244:	23ff      	movs	r3, #255	@ 0xff
 8001246:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GRAVITY_XYZ_DATA_SIZE] = {
 8001248:	4a31      	ldr	r2, [pc, #196]	@ (8001310 <bno055_read_gravity_xyz+0xd4>)
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001252:	6018      	str	r0, [r3, #0]
 8001254:	3304      	adds	r3, #4
 8001256:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <bno055_read_gravity_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8001264:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001268:	e04e      	b.n	8001308 <bno055_read_gravity_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	791b      	ldrb	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <bno055_read_gravity_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fcf5 	bl	8000c64 <bno055_write_page_id>
 800127a:	4603      	mov	r3, r0
 800127c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800127e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <bno055_read_gravity_xyz+0x54>
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	791b      	ldrb	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d137      	bne.n	8001300 <bno055_read_gravity_xyz+0xc4>
        {
            /* Read the six byte value
             * of gravity xyz data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001290:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691c      	ldr	r4, [r3, #16]
 8001296:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7a58      	ldrb	r0, [r3, #9]
 800129c:	f107 0208 	add.w	r2, r7, #8
 80012a0:	2306      	movs	r3, #6
 80012a2:	212e      	movs	r1, #46	@ 0x2e
 80012a4:	47a0      	blx	r4
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_GRAVITY_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_GRAVITY_XYZ_DATA_SIZE);

            /* Data x*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 80012aa:	7a3b      	ldrb	r3, [r7, #8]
 80012ac:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_GRAVITY_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 80012ae:	7a7b      	ldrb	r3, [r7, #9]
 80012b0:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_GRAVITY_DATA_X_MSB_VALUEX);
            gravity->x =
                (s16)(((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB]) << BNO055_SHIFT_EIGHT_BITS) |
 80012b2:	7a7b      	ldrb	r3, [r7, #9]
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 80012ba:	7a3b      	ldrb	r3, [r7, #8]
 80012bc:	b21b      	sxth	r3, r3
                (s16)(((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB]) << BNO055_SHIFT_EIGHT_BITS) |
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
            gravity->x =
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	801a      	strh	r2, [r3, #0]

            /* Data y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_GRAVITY_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_GRAVITY_DATA_Y_MSB_VALUEY);
            gravity->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012ce:	7afb      	ldrb	r3, [r7, #11]
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
            gravity->y =
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	805a      	strh	r2, [r3, #2]

            /* Data z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 80012e2:	7b3b      	ldrb	r3, [r7, #12]
 80012e4:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_GRAVITY_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_GRAVITY_DATA_Z_MSB_VALUEZ);
            gravity->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21a      	sxth	r2, r3
            gravity->z =
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	809a      	strh	r2, [r3, #4]
 80012fe:	e001      	b.n	8001304 <bno055_read_gravity_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001300:	23ff      	movs	r3, #255	@ 0xff
 8001302:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	08011b48 	.word	0x08011b48
 8001314:	24000204 	.word	0x24000204

08001318 <bno055_read_temp_data>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_temp_data(s8 *temp_s8)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001320:	23ff      	movs	r3, #255	@ 0xff
 8001322:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8001324:	2300      	movs	r3, #0
 8001326:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001328:	23ff      	movs	r3, #255	@ 0xff
 800132a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800132c:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <bno055_read_temp_data+0x7c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <bno055_read_temp_data+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001334:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001338:	e028      	b.n	800138c <bno055_read_temp_data+0x74>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <bno055_read_temp_data+0x7c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <bno055_read_temp_data+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fc8d 	bl	8000c64 <bno055_write_page_id>
 800134a:	4603      	mov	r3, r0
 800134c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800134e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <bno055_read_temp_data+0x48>
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <bno055_read_temp_data+0x7c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <bno055_read_temp_data+0x6c>
        {
            /* Read the raw temperature data */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <bno055_read_temp_data+0x7c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691c      	ldr	r4, [r3, #16]
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <bno055_read_temp_data+0x7c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	7a58      	ldrb	r0, [r3, #9]
 800136c:	f107 020d 	add.w	r2, r7, #13
 8001370:	2301      	movs	r3, #1
 8001372:	2134      	movs	r1, #52	@ 0x34
 8001374:	47a0      	blx	r4
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_TEMP_REG,
                                                      &data_u8,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *temp_s8 = data_u8;
 800137a:	7b7b      	ldrb	r3, [r7, #13]
 800137c:	b25a      	sxtb	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e001      	b.n	8001388 <bno055_read_temp_data+0x70>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001384:	23ff      	movs	r3, #255	@ 0xff
 8001386:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001388:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	24000204 	.word	0x24000204

08001398 <bno055_convert_float_euler_hpr_deg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_float_euler_hpr_deg(struct bno055_euler_float_t *euler_hpr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80013a0:	23ff      	movs	r3, #255	@ 0xff
 80013a2:	75fb      	strb	r3, [r7, #23]
    struct bno055_euler_t reg_euler = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80013a4:	2300      	movs	r3, #0
 80013a6:	823b      	strh	r3, [r7, #16]
 80013a8:	2300      	movs	r3, #0
 80013aa:	827b      	strh	r3, [r7, #18]
 80013ac:	2300      	movs	r3, #0
 80013ae:	82bb      	strh	r3, [r7, #20]
    u8 euler_unit_u8 = BNO055_INIT_VALUE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]

    /* Read the current Euler unit and set the
     * unit as degree if the unit is in radians */
    com_rslt = bno055_get_euler_unit(&euler_unit_u8);
 80013b4:	f107 030f 	add.w	r3, r7, #15
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fbd5 	bl	8001b68 <bno055_get_euler_unit>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]
    if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <bno055_convert_float_euler_hpr_deg+0x42>
    {
        com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 fc11 	bl	8001bf0 <bno055_set_euler_unit>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	4413      	add	r3, r2
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 80013da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d13f      	bne.n	8001462 <bno055_convert_float_euler_hpr_deg+0xca>
    {
        /* Read Euler raw hrp data*/
        com_rslt += bno055_read_euler_hrp(&reg_euler);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe3e 	bl	8001068 <bno055_read_euler_hrp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 80013f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d12d      	bne.n	800145c <bno055_convert_float_euler_hpr_deg+0xc4>
        {
            /* Convert raw Euler hrp to degree*/
            euler_hpr->h = (float)(reg_euler.h / BNO055_EULER_DIV_DEG);
 8001400:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800140c:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001410:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001414:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edc3 7a00 	vstr	s15, [r3]
            euler_hpr->p = (float)(reg_euler.p / BNO055_EULER_DIV_DEG);
 800141e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800142a:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800142e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001432:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edc3 7a02 	vstr	s15, [r3, #8]
            euler_hpr->r = (float)(reg_euler.r / BNO055_EULER_DIV_DEG);
 800143c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001448:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800144c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001450:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edc3 7a01 	vstr	s15, [r3, #4]
 800145a:	e004      	b.n	8001466 <bno055_convert_float_euler_hpr_deg+0xce>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800145c:	23ff      	movs	r3, #255	@ 0xff
 800145e:	75fb      	strb	r3, [r7, #23]
 8001460:	e001      	b.n	8001466 <bno055_convert_float_euler_hpr_deg+0xce>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001462:	23ff      	movs	r3, #255	@ 0xff
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8001466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	0000      	movs	r0, r0
 8001474:	0000      	movs	r0, r0
	...

08001478 <bno055_convert_float_gravity_xyz_msq>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_float_gravity_xyz_msq(struct bno055_gravity_float_t *gravity_xyz)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001480:	23ff      	movs	r3, #255	@ 0xff
 8001482:	73fb      	strb	r3, [r7, #15]
    struct bno055_gravity_t reg_gravity_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001484:	2300      	movs	r3, #0
 8001486:	813b      	strh	r3, [r7, #8]
 8001488:	2300      	movs	r3, #0
 800148a:	817b      	strh	r3, [r7, #10]
 800148c:	2300      	movs	r3, #0
 800148e:	81bb      	strh	r3, [r7, #12]

    /* Read raw gravity of xyz */
    com_rslt = bno055_read_gravity_xyz(&reg_gravity_xyz);
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fed1 	bl	800123c <bno055_read_gravity_xyz>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]
    if (com_rslt == BNO055_SUCCESS)
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d12d      	bne.n	8001502 <bno055_convert_float_gravity_xyz_msq+0x8a>
    {
        /* Convert raw gravity xyz to meterpersecseq */
        gravity_xyz->x = (float)(reg_gravity_xyz.x / BNO055_GRAVITY_DIV_MSQ);
 80014a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014b2:	ed9f 5b19 	vldr	d5, [pc, #100]	@ 8001518 <bno055_convert_float_gravity_xyz_msq+0xa0>
 80014b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edc3 7a00 	vstr	s15, [r3]
        gravity_xyz->y = (float)(reg_gravity_xyz.y / BNO055_GRAVITY_DIV_MSQ);
 80014c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014d0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001518 <bno055_convert_float_gravity_xyz_msq+0xa0>
 80014d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edc3 7a01 	vstr	s15, [r3, #4]
        gravity_xyz->z = (float)(reg_gravity_xyz.z / BNO055_GRAVITY_DIV_MSQ);
 80014e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014ee:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8001518 <bno055_convert_float_gravity_xyz_msq+0xa0>
 80014f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edc3 7a02 	vstr	s15, [r3, #8]
 8001500:	e001      	b.n	8001506 <bno055_convert_float_gravity_xyz_msq+0x8e>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001502:	23ff      	movs	r3, #255	@ 0xff
 8001504:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	00000000 	.word	0x00000000
 800151c:	40590000 	.word	0x40590000

08001520 <bno055_convert_float_temp_celsius>:
 *
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_float_temp_celsius(float *temp_f)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001528:	23ff      	movs	r3, #255	@ 0xff
 800152a:	75fb      	strb	r3, [r7, #23]
    s8 reg_temp_s8 = BNO055_INIT_VALUE;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
    float data_f = BNO055_INIT_VALUE;
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
    u8 temp_unit_u8 = BNO055_INIT_VALUE;
 8001536:	2300      	movs	r3, #0
 8001538:	73bb      	strb	r3, [r7, #14]

    /* Read the current temperature unit and set the
     * unit as Fahrenheit if the unit is in Celsius */
    com_rslt = bno055_get_temp_unit(&temp_unit_u8);
 800153a:	f107 030e 	add.w	r3, r7, #14
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fbd2 	bl	8001ce8 <bno055_get_temp_unit>
 8001544:	4603      	mov	r3, r0
 8001546:	75fb      	strb	r3, [r7, #23]
    if (temp_unit_u8 != BNO055_TEMP_UNIT_CELSIUS)
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <bno055_convert_float_temp_celsius+0x40>
    {
        com_rslt += bno055_set_temp_unit(BNO055_TEMP_UNIT_CELSIUS);
 800154e:	2000      	movs	r0, #0
 8001550:	f000 fc0e 	bl	8001d70 <bno055_set_temp_unit>
 8001554:	4603      	mov	r3, r0
 8001556:	b2da      	uxtb	r2, r3
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	4413      	add	r3, r2
 800155c:	b2db      	uxtb	r3, r3
 800155e:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 8001560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11f      	bne.n	80015a8 <bno055_convert_float_temp_celsius+0x88>
    {
        /* Read the raw temperature data */
        com_rslt += bno055_read_temp_data(&reg_temp_s8);
 8001568:	f107 030f 	add.w	r3, r7, #15
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fed3 	bl	8001318 <bno055_read_temp_data>
 8001572:	4603      	mov	r3, r0
 8001574:	b2da      	uxtb	r2, r3
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	4413      	add	r3, r2
 800157a:	b2db      	uxtb	r3, r3
 800157c:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 800157e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <bno055_convert_float_temp_celsius+0x82>
        {
            /* Convert raw temperature data to Fahrenheit*/
            data_f = (float)(reg_temp_s8 / BNO055_TEMP_DIV_CELSIUS);
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001592:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001596:	edc7 7a04 	vstr	s15, [r7, #16]
            *temp_f = data_f;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e004      	b.n	80015ac <bno055_convert_float_temp_celsius+0x8c>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80015a2:	23ff      	movs	r3, #255	@ 0xff
 80015a4:	75fb      	strb	r3, [r7, #23]
 80015a6:	e001      	b.n	80015ac <bno055_convert_float_temp_celsius+0x8c>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 80015a8:	23ff      	movs	r3, #255	@ 0xff
 80015aa:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 80015ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <bno055_convert_double_accel_xyz_mg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_accel_xyz_mg(struct bno055_accel_double_t *accel_xyz)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80015c0:	23ff      	movs	r3, #255	@ 0xff
 80015c2:	75fb      	strb	r3, [r7, #23]
    struct bno055_accel_t reg_accel_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80015c4:	2300      	movs	r3, #0
 80015c6:	823b      	strh	r3, [r7, #16]
 80015c8:	2300      	movs	r3, #0
 80015ca:	827b      	strh	r3, [r7, #18]
 80015cc:	2300      	movs	r3, #0
 80015ce:	82bb      	strh	r3, [r7, #20]
    u8 accel_unit_u8 = BNO055_INIT_VALUE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]

    /* Read the current accel unit and set the
     * unit as m/s2 if the unit is in mg*/
    com_rslt = bno055_get_accel_unit(&accel_unit_u8);
 80015d4:	f107 030f 	add.w	r3, r7, #15
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f949 	bl	8001870 <bno055_get_accel_unit>
 80015de:	4603      	mov	r3, r0
 80015e0:	75fb      	strb	r3, [r7, #23]
    if (accel_unit_u8 != BNO055_ACCEL_UNIT_MG)
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d008      	beq.n	80015fa <bno055_convert_double_accel_xyz_mg+0x42>
    {
        com_rslt += bno055_set_accel_unit(BNO055_ACCEL_UNIT_MG);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f000 f983 	bl	80018f4 <bno055_set_accel_unit>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	4413      	add	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 80015fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d12d      	bne.n	800165e <bno055_convert_double_accel_xyz_mg+0xa6>
    {
        /* Read the accel raw xyz data*/
        com_rslt += bno055_read_accel_xyz(&reg_accel_xyz);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fb74 	bl	8000cf4 <bno055_read_accel_xyz>
 800160c:	4603      	mov	r3, r0
 800160e:	b2da      	uxtb	r2, r3
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	4413      	add	r3, r2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 8001618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d11b      	bne.n	8001658 <bno055_convert_double_accel_xyz_mg+0xa0>
        {
            /* Convert raw xyz to mg*/
            accel_xyz->x = (double)(reg_accel_xyz.x / BNO055_ACCEL_DIV_MG);
 8001620:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	ed83 7b00 	vstr	d7, [r3]
            accel_xyz->y = (double)(reg_accel_xyz.y / BNO055_ACCEL_DIV_MG);
 8001632:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	ed83 7b02 	vstr	d7, [r3, #8]
            accel_xyz->z = (double)(reg_accel_xyz.z / BNO055_ACCEL_DIV_MG);
 8001644:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	ed83 7b04 	vstr	d7, [r3, #16]
 8001656:	e004      	b.n	8001662 <bno055_convert_double_accel_xyz_mg+0xaa>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001658:	23ff      	movs	r3, #255	@ 0xff
 800165a:	75fb      	strb	r3, [r7, #23]
 800165c:	e001      	b.n	8001662 <bno055_convert_double_accel_xyz_mg+0xaa>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 800165e:	23ff      	movs	r3, #255	@ 0xff
 8001660:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8001662:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <bno055_convert_double_mag_x_uT>:
 *
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_mag_x_uT(double *mag_x_d)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b088      	sub	sp, #32
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001676:	23ff      	movs	r3, #255	@ 0xff
 8001678:	77fb      	strb	r3, [r7, #31]
    s16 reg_mag_x_s16 = BNO055_INIT_VALUE;
 800167a:	2300      	movs	r3, #0
 800167c:	81fb      	strh	r3, [r7, #14]
    double data_d = BNO055_INIT_VALUE;
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Read raw mag x data */
    com_rslt = bno055_read_mag_x(&reg_mag_x_s16);
 800168a:	f107 030e 	add.w	r3, r7, #14
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fb9e 	bl	8000dd0 <bno055_read_mag_x>
 8001694:	4603      	mov	r3, r0
 8001696:	77fb      	strb	r3, [r7, #31]
    if (com_rslt == BNO055_SUCCESS)
 8001698:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d111      	bne.n	80016c4 <bno055_convert_double_mag_x_uT+0x56>
    {
        /* Convert raw mag x to microTesla */
        data_d = (double)(reg_mag_x_s16 / BNO055_MAG_DIV_UT);
 80016a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016ac:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016b4:	ed87 7b04 	vstr	d7, [r7, #16]
        *mag_x_d = data_d;
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016be:	e9c1 2300 	strd	r2, r3, [r1]
 80016c2:	e001      	b.n	80016c8 <bno055_convert_double_mag_x_uT+0x5a>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 80016c4:	23ff      	movs	r3, #255	@ 0xff
 80016c6:	77fb      	strb	r3, [r7, #31]
    }

    return com_rslt;
 80016c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <bno055_convert_double_mag_y_uT>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_mag_y_uT(double *mag_y_d)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	77fb      	strb	r3, [r7, #31]
    s16 reg_mag_y_s16 = BNO055_INIT_VALUE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	81fb      	strh	r3, [r7, #14]
    double data_d = BNO055_INIT_VALUE;
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Read raw mag y data */
    com_rslt = bno055_read_mag_y(&reg_mag_y_s16);
 80016f0:	f107 030e 	add.w	r3, r7, #14
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fbb5 	bl	8000e64 <bno055_read_mag_y>
 80016fa:	4603      	mov	r3, r0
 80016fc:	77fb      	strb	r3, [r7, #31]
    if (com_rslt == BNO055_SUCCESS)
 80016fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d111      	bne.n	800172a <bno055_convert_double_mag_y_uT+0x56>
    {
        /* Convert raw mag y to microTesla */
        data_d = (double)(reg_mag_y_s16 / BNO055_MAG_DIV_UT);
 8001706:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001712:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001716:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800171a:	ed87 7b04 	vstr	d7, [r7, #16]
        *mag_y_d = data_d;
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001724:	e9c1 2300 	strd	r2, r3, [r1]
 8001728:	e001      	b.n	800172e <bno055_convert_double_mag_y_uT+0x5a>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 800172a:	23ff      	movs	r3, #255	@ 0xff
 800172c:	77fb      	strb	r3, [r7, #31]
    }

    return com_rslt;
 800172e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <bno055_convert_double_mag_z_uT>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_mag_z_uT(double *mag_z_d)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b088      	sub	sp, #32
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001742:	23ff      	movs	r3, #255	@ 0xff
 8001744:	77fb      	strb	r3, [r7, #31]
    s16 reg_mag_z_s16 = BNO055_INIT_VALUE;
 8001746:	2300      	movs	r3, #0
 8001748:	81fb      	strh	r3, [r7, #14]
    double data_d = BNO055_INIT_VALUE;
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Read raw mag x */
    com_rslt = bno055_read_mag_z(&reg_mag_z_s16);
 8001756:	f107 030e 	add.w	r3, r7, #14
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fbcc 	bl	8000ef8 <bno055_read_mag_z>
 8001760:	4603      	mov	r3, r0
 8001762:	77fb      	strb	r3, [r7, #31]
    if (com_rslt == BNO055_SUCCESS)
 8001764:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <bno055_convert_double_mag_z_uT+0x56>
    {
        /* Convert raw mag x to microTesla */
        data_d = (double)(reg_mag_z_s16 / BNO055_MAG_DIV_UT);
 800176c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001778:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800177c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001780:	ed87 7b04 	vstr	d7, [r7, #16]
        *mag_z_d = data_d;
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800178a:	e9c1 2300 	strd	r2, r3, [r1]
 800178e:	e001      	b.n	8001794 <bno055_convert_double_mag_z_uT+0x5a>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001790:	23ff      	movs	r3, #255	@ 0xff
 8001792:	77fb      	strb	r3, [r7, #31]
    }

    return com_rslt;
 8001794:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <bno055_convert_double_gyro_xyz_dps>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_gyro_xyz_dps(struct bno055_gyro_double_t *gyro_xyz)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80017a8:	23ff      	movs	r3, #255	@ 0xff
 80017aa:	75fb      	strb	r3, [r7, #23]
    struct bno055_gyro_t reg_gyro_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80017ac:	2300      	movs	r3, #0
 80017ae:	823b      	strh	r3, [r7, #16]
 80017b0:	2300      	movs	r3, #0
 80017b2:	827b      	strh	r3, [r7, #18]
 80017b4:	2300      	movs	r3, #0
 80017b6:	82bb      	strh	r3, [r7, #20]
    u8 gyro_unit_u8 = BNO055_INIT_VALUE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]

    /* Read the current gyro unit and set the
     * unit as dps if the unit is in rps */
    com_rslt = bno055_get_gyro_unit(&gyro_unit_u8);
 80017bc:	f107 030f 	add.w	r3, r7, #15
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f911 	bl	80019e8 <bno055_get_gyro_unit>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]
    if (gyro_unit_u8 != BNO055_GYRO_UNIT_DPS)
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <bno055_convert_double_gyro_xyz_dps+0x42>
    {
        com_rslt += bno055_set_gyro_unit(BNO055_GYRO_UNIT_DPS);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 f94d 	bl	8001a70 <bno055_set_gyro_unit>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	4413      	add	r3, r2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 80017e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d139      	bne.n	800185e <bno055_convert_double_gyro_xyz_dps+0xbe>
    {
        /* Read gyro raw xyz data */
        com_rslt += bno055_read_gyro_xyz(&reg_gyro_xyz);
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fbcc 	bl	8000f8c <bno055_read_gyro_xyz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	4413      	add	r3, r2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 8001800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d127      	bne.n	8001858 <bno055_convert_double_gyro_xyz_dps+0xb8>
        {
            /* Convert gyro raw xyz to dps*/
            gyro_xyz->x = (double)(reg_gyro_xyz.x / BNO055_GYRO_DIV_DPS);
 8001808:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001814:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001818:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	ed83 7b00 	vstr	d7, [r3]
            gyro_xyz->y = (double)(reg_gyro_xyz.y / BNO055_GYRO_DIV_DPS);
 8001822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800182e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001832:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	ed83 7b02 	vstr	d7, [r3, #8]
            gyro_xyz->z = (double)(reg_gyro_xyz.z / BNO055_GYRO_DIV_DPS);
 800183c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001848:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800184c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	ed83 7b04 	vstr	d7, [r3, #16]
 8001856:	e004      	b.n	8001862 <bno055_convert_double_gyro_xyz_dps+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001858:	23ff      	movs	r3, #255	@ 0xff
 800185a:	75fb      	strb	r3, [r7, #23]
 800185c:	e001      	b.n	8001862 <bno055_convert_double_gyro_xyz_dps+0xc2>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 800185e:	23ff      	movs	r3, #255	@ 0xff
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8001862:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <bno055_get_accel_unit>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_accel_unit(u8 *accel_unit_u8)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001878:	23ff      	movs	r3, #255	@ 0xff
 800187a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800187c:	2300      	movs	r3, #0
 800187e:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001880:	23ff      	movs	r3, #255	@ 0xff
 8001882:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <bno055_get_accel_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 800188c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001890:	e02a      	b.n	80018e8 <bno055_get_accel_unit+0x78>
    }
    else
    {
        /*condition check for page, accel unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	791b      	ldrb	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <bno055_get_accel_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff f9e1 	bl	8000c64 <bno055_write_page_id>
 80018a2:	4603      	mov	r3, r0
 80018a4:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80018a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <bno055_get_accel_unit+0x48>
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	791b      	ldrb	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d113      	bne.n	80018e0 <bno055_get_accel_unit+0x70>
        {
            /* Read the accel unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80018b8:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691c      	ldr	r4, [r3, #16]
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	7a58      	ldrb	r0, [r3, #9]
 80018c4:	f107 020d 	add.w	r2, r7, #13
 80018c8:	2301      	movs	r3, #1
 80018ca:	213b      	movs	r1, #59	@ 0x3b
 80018cc:	47a0      	blx	r4
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *accel_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT);
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	e001      	b.n	80018e4 <bno055_get_accel_unit+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80018e0:	23ff      	movs	r3, #255	@ 0xff
 80018e2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80018e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	24000204 	.word	0x24000204

080018f4 <bno055_set_accel_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_unit(u8 accel_unit_u8)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80018fe:	23ff      	movs	r3, #255	@ 0xff
 8001900:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001902:	2300      	movs	r3, #0
 8001904:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001906:	2300      	movs	r3, #0
 8001908:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 800190a:	23ff      	movs	r3, #255	@ 0xff
 800190c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800190e:	4b35      	ldr	r3, [pc, #212]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <bno055_set_accel_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001916:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800191a:	e05f      	b.n	80019dc <bno055_set_accel_unit+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4618      	mov	r0, r3
 8001922:	f000 faa1 	bl	8001e68 <bno055_get_operation_mode>
 8001926:	4603      	mov	r3, r0
 8001928:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800192a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d143      	bne.n	80019ba <bno055_set_accel_unit+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001932:	7b3b      	ldrb	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <bno055_set_accel_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001938:	2000      	movs	r0, #0
 800193a:	f000 fad7 	bl	8001eec <bno055_set_operation_mode>
 800193e:	4603      	mov	r3, r0
 8001940:	b2da      	uxtb	r2, r3
 8001942:	7bbb      	ldrb	r3, [r7, #14]
 8001944:	4413      	add	r3, r2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800194a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d130      	bne.n	80019b4 <bno055_set_accel_unit+0xc0>
            {
                /* Write the accel unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691c      	ldr	r4, [r3, #16]
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	7a58      	ldrb	r0, [r3, #9]
 800195e:	f107 020d 	add.w	r2, r7, #13
 8001962:	2301      	movs	r3, #1
 8001964:	213b      	movs	r1, #59	@ 0x3b
 8001966:	47a0      	blx	r4
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_ACCEL_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 800196c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d124      	bne.n	80019be <bno055_set_accel_unit+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT, accel_unit_u8);
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	b25b      	sxtb	r3, r3
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	b25a      	sxtb	r2, r3
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	b25b      	sxtb	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b25b      	sxtb	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001990:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68dc      	ldr	r4, [r3, #12]
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	7a58      	ldrb	r0, [r3, #9]
 800199c:	f107 020d 	add.w	r2, r7, #13
 80019a0:	2301      	movs	r3, #1
 80019a2:	213b      	movs	r1, #59	@ 0x3b
 80019a4:	47a0      	blx	r4
 80019a6:	4603      	mov	r3, r0
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	4413      	add	r3, r2
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e004      	b.n	80019be <bno055_set_accel_unit+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 80019b4:	23ff      	movs	r3, #255	@ 0xff
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	e001      	b.n	80019be <bno055_set_accel_unit+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80019ba:	23ff      	movs	r3, #255	@ 0xff
 80019bc:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80019be:	7b3b      	ldrb	r3, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <bno055_set_accel_unit+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fa90 	bl	8001eec <bno055_set_operation_mode>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	4413      	add	r3, r2
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	24000204 	.word	0x24000204

080019e8 <bno055_get_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_gyro_unit(u8 *gyro_unit_u8)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80019f0:	23ff      	movs	r3, #255	@ 0xff
 80019f2:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80019f8:	23ff      	movs	r3, #255	@ 0xff
 80019fa:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80019fc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <bno055_get_gyro_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001a04:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001a08:	e02c      	b.n	8001a64 <bno055_get_gyro_unit+0x7c>
    }
    else
    {
        /*condition check for page, gyro unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	791b      	ldrb	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <bno055_get_gyro_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff f925 	bl	8000c64 <bno055_write_page_id>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001a1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <bno055_get_gyro_unit+0x48>
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	791b      	ldrb	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d115      	bne.n	8001a5c <bno055_get_gyro_unit+0x74>
        {
            /* Read the gyro unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691c      	ldr	r4, [r3, #16]
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	7a58      	ldrb	r0, [r3, #9]
 8001a3c:	f107 020d 	add.w	r2, r7, #13
 8001a40:	2301      	movs	r3, #1
 8001a42:	213b      	movs	r1, #59	@ 0x3b
 8001a44:	47a0      	blx	r4
 8001a46:	4603      	mov	r3, r0
 8001a48:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_GYRO_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *gyro_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_GYRO_UNIT);
 8001a4a:	7b7b      	ldrb	r3, [r7, #13]
 8001a4c:	105b      	asrs	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e001      	b.n	8001a60 <bno055_get_gyro_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001a5c:	23ff      	movs	r3, #255	@ 0xff
 8001a5e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	24000204 	.word	0x24000204

08001a70 <bno055_set_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_gyro_unit(u8 gyro_unit_u8)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001a7a:	23ff      	movs	r3, #255	@ 0xff
 8001a7c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001a82:	2300      	movs	r3, #0
 8001a84:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001a86:	23ff      	movs	r3, #255	@ 0xff
 8001a88:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001a8a:	4b36      	ldr	r3, [pc, #216]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <bno055_set_gyro_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001a92:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001a96:	e060      	b.n	8001b5a <bno055_set_gyro_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 f9e3 	bl	8001e68 <bno055_get_operation_mode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d144      	bne.n	8001b38 <bno055_set_gyro_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001aae:	7b3b      	ldrb	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <bno055_set_gyro_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f000 fa19 	bl	8001eec <bno055_set_operation_mode>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d131      	bne.n	8001b32 <bno055_set_gyro_unit+0xc2>
            {
                /* Write the gyro unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001ace:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691c      	ldr	r4, [r3, #16]
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	7a58      	ldrb	r0, [r3, #9]
 8001ada:	f107 020d 	add.w	r2, r7, #13
 8001ade:	2301      	movs	r3, #1
 8001ae0:	213b      	movs	r1, #59	@ 0x3b
 8001ae2:	47a0      	blx	r4
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_GYRO_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d125      	bne.n	8001b3c <bno055_set_gyro_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_GYRO_UNIT, gyro_unit_u8);
 8001af0:	7b7b      	ldrb	r3, [r7, #13]
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	f023 0302 	bic.w	r3, r3, #2
 8001af8:	b25a      	sxtb	r2, r3
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b25b      	sxtb	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68dc      	ldr	r4, [r3, #12]
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	7a58      	ldrb	r0, [r3, #9]
 8001b1a:	f107 020d 	add.w	r2, r7, #13
 8001b1e:	2301      	movs	r3, #1
 8001b20:	213b      	movs	r1, #59	@ 0x3b
 8001b22:	47a0      	blx	r4
 8001b24:	4603      	mov	r3, r0
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e004      	b.n	8001b3c <bno055_set_gyro_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001b32:	23ff      	movs	r3, #255	@ 0xff
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e001      	b.n	8001b3c <bno055_set_gyro_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001b38:	23ff      	movs	r3, #255	@ 0xff
 8001b3a:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001b3c:	7b3b      	ldrb	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <bno055_set_gyro_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001b42:	7b3b      	ldrb	r3, [r7, #12]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f9d1 	bl	8001eec <bno055_set_operation_mode>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	4413      	add	r3, r2
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	24000204 	.word	0x24000204

08001b68 <bno055_get_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_euler_unit(u8 *euler_unit_u8)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001b70:	23ff      	movs	r3, #255	@ 0xff
 8001b72:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001b78:	23ff      	movs	r3, #255	@ 0xff
 8001b7a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <bno055_get_euler_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001b84:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001b88:	e02c      	b.n	8001be4 <bno055_get_euler_unit+0x7c>
    }
    else
    {
        /*condition check for page, Euler unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	791b      	ldrb	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <bno055_get_euler_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff f865 	bl	8000c64 <bno055_write_page_id>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001b9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <bno055_get_euler_unit+0x48>
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	791b      	ldrb	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <bno055_get_euler_unit+0x74>
        {
            /* Read the Euler unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691c      	ldr	r4, [r3, #16]
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	7a58      	ldrb	r0, [r3, #9]
 8001bbc:	f107 020d 	add.w	r2, r7, #13
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	213b      	movs	r1, #59	@ 0x3b
 8001bc4:	47a0      	blx	r4
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *euler_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_EULER_UNIT);
 8001bca:	7b7b      	ldrb	r3, [r7, #13]
 8001bcc:	109b      	asrs	r3, r3, #2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e001      	b.n	8001be0 <bno055_get_euler_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001bdc:	23ff      	movs	r3, #255	@ 0xff
 8001bde:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	24000204 	.word	0x24000204

08001bf0 <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001bfa:	23ff      	movs	r3, #255	@ 0xff
 8001bfc:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001c02:	2300      	movs	r3, #0
 8001c04:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001c06:	23ff      	movs	r3, #255	@ 0xff
 8001c08:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001c0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <bno055_set_euler_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001c12:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001c16:	e060      	b.n	8001cda <bno055_set_euler_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f923 	bl	8001e68 <bno055_get_operation_mode>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d144      	bne.n	8001cb8 <bno055_set_euler_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001c2e:	7b3b      	ldrb	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <bno055_set_euler_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001c34:	2000      	movs	r0, #0
 8001c36:	f000 f959 	bl	8001eec <bno055_set_operation_mode>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	4413      	add	r3, r2
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d131      	bne.n	8001cb2 <bno055_set_euler_unit+0xc2>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691c      	ldr	r4, [r3, #16]
 8001c54:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	7a58      	ldrb	r0, [r3, #9]
 8001c5a:	f107 020d 	add.w	r2, r7, #13
 8001c5e:	2301      	movs	r3, #1
 8001c60:	213b      	movs	r1, #59	@ 0x3b
 8001c62:	47a0      	blx	r4
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d125      	bne.n	8001cbc <bno055_set_euler_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 8001c70:	7b7b      	ldrb	r3, [r7, #13]
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	b25a      	sxtb	r2, r3
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	b25b      	sxtb	r3, r3
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	4313      	orrs	r3, r2
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68dc      	ldr	r4, [r3, #12]
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	7a58      	ldrb	r0, [r3, #9]
 8001c9a:	f107 020d 	add.w	r2, r7, #13
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	213b      	movs	r1, #59	@ 0x3b
 8001ca2:	47a0      	blx	r4
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e004      	b.n	8001cbc <bno055_set_euler_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001cb2:	23ff      	movs	r3, #255	@ 0xff
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e001      	b.n	8001cbc <bno055_set_euler_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001cb8:	23ff      	movs	r3, #255	@ 0xff
 8001cba:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <bno055_set_euler_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001cc2:	7b3b      	ldrb	r3, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f911 	bl	8001eec <bno055_set_operation_mode>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd90      	pop	{r4, r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	24000204 	.word	0x24000204

08001ce8 <bno055_get_temp_unit>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_temp_unit(u8 *temp_unit_u8)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001cf0:	23ff      	movs	r3, #255	@ 0xff
 8001cf2:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001cf8:	23ff      	movs	r3, #255	@ 0xff
 8001cfa:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <bno055_get_temp_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001d04:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001d08:	e02c      	b.n	8001d64 <bno055_get_temp_unit+0x7c>
    }
    else
    {
        /*condition check for page, temperature unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	791b      	ldrb	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <bno055_get_temp_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7fe ffa5 	bl	8000c64 <bno055_write_page_id>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001d1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <bno055_get_temp_unit+0x48>
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	791b      	ldrb	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d115      	bne.n	8001d5c <bno055_get_temp_unit+0x74>
        {
            /* Read the temperature unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001d30:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691c      	ldr	r4, [r3, #16]
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	7a58      	ldrb	r0, [r3, #9]
 8001d3c:	f107 020d 	add.w	r2, r7, #13
 8001d40:	2301      	movs	r3, #1
 8001d42:	213b      	movs	r1, #59	@ 0x3b
 8001d44:	47a0      	blx	r4
 8001d46:	4603      	mov	r3, r0
 8001d48:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_TEMP_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *temp_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_TEMP_UNIT);
 8001d4a:	7b7b      	ldrb	r3, [r7, #13]
 8001d4c:	111b      	asrs	r3, r3, #4
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e001      	b.n	8001d60 <bno055_get_temp_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001d5c:	23ff      	movs	r3, #255	@ 0xff
 8001d5e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	24000204 	.word	0x24000204

08001d70 <bno055_set_temp_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_temp_unit(u8 temp_unit_u8)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001d7a:	23ff      	movs	r3, #255	@ 0xff
 8001d7c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001d82:	2300      	movs	r3, #0
 8001d84:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001d86:	23ff      	movs	r3, #255	@ 0xff
 8001d88:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001d8a:	4b36      	ldr	r3, [pc, #216]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <bno055_set_temp_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001d92:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001d96:	e060      	b.n	8001e5a <bno055_set_temp_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f863 	bl	8001e68 <bno055_get_operation_mode>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d144      	bne.n	8001e38 <bno055_set_temp_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001dae:	7b3b      	ldrb	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <bno055_set_temp_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 f899 	bl	8001eec <bno055_set_operation_mode>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001dc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d131      	bne.n	8001e32 <bno055_set_temp_unit+0xc2>
            {
                /* Write the temperature unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001dce:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691c      	ldr	r4, [r3, #16]
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	7a58      	ldrb	r0, [r3, #9]
 8001dda:	f107 020d 	add.w	r2, r7, #13
 8001dde:	2301      	movs	r3, #1
 8001de0:	213b      	movs	r1, #59	@ 0x3b
 8001de2:	47a0      	blx	r4
 8001de4:	4603      	mov	r3, r0
 8001de6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_TEMP_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d125      	bne.n	8001e3c <bno055_set_temp_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_TEMP_UNIT, temp_unit_u8);
 8001df0:	7b7b      	ldrb	r3, [r7, #13]
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	f023 0310 	bic.w	r3, r3, #16
 8001df8:	b25a      	sxtb	r2, r3
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68dc      	ldr	r4, [r3, #12]
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	7a58      	ldrb	r0, [r3, #9]
 8001e1a:	f107 020d 	add.w	r2, r7, #13
 8001e1e:	2301      	movs	r3, #1
 8001e20:	213b      	movs	r1, #59	@ 0x3b
 8001e22:	47a0      	blx	r4
 8001e24:	4603      	mov	r3, r0
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e004      	b.n	8001e3c <bno055_set_temp_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001e32:	23ff      	movs	r3, #255	@ 0xff
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e001      	b.n	8001e3c <bno055_set_temp_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001e38:	23ff      	movs	r3, #255	@ 0xff
 8001e3a:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001e3c:	7b3b      	ldrb	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <bno055_set_temp_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001e42:	7b3b      	ldrb	r3, [r7, #12]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f851 	bl	8001eec <bno055_set_operation_mode>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	4413      	add	r3, r2
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	24000204 	.word	0x24000204

08001e68 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001e70:	23ff      	movs	r3, #255	@ 0xff
 8001e72:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001e78:	23ff      	movs	r3, #255	@ 0xff
 8001e7a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001e84:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001e88:	e02a      	b.n	8001ee0 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001e8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7fe fee5 	bl	8000c64 <bno055_write_page_id>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <bno055_get_operation_mode+0x48>
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d113      	bne.n	8001ed8 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691c      	ldr	r4, [r3, #16]
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	7a58      	ldrb	r0, [r3, #9]
 8001ebc:	f107 020d 	add.w	r2, r7, #13
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	213d      	movs	r1, #61	@ 0x3d
 8001ec4:	47a0      	blx	r4
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8001eca:	7b7b      	ldrb	r3, [r7, #13]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e001      	b.n	8001edc <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001ed8:	23ff      	movs	r3, #255	@ 0xff
 8001eda:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}
 8001ee8:	24000204 	.word	0x24000204

08001eec <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001ef6:	23ff      	movs	r3, #255	@ 0xff
 8001ef8:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001efe:	2300      	movs	r3, #0
 8001f00:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001f02:	23ff      	movs	r3, #255	@ 0xff
 8001f04:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001f06:	4b5c      	ldr	r3, [pc, #368]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001f0e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001f12:	e0ac      	b.n	800206e <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ffa5 	bl	8001e68 <bno055_get_operation_mode>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 809d 	bne.w	8002066 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001f2c:	7b3b      	ldrb	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d137      	bne.n	8001fa2 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001f32:	4b51      	ldr	r3, [pc, #324]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691c      	ldr	r4, [r3, #16]
 8001f38:	4b4f      	ldr	r3, [pc, #316]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	7a58      	ldrb	r0, [r3, #9]
 8001f3e:	f107 020d 	add.w	r2, r7, #13
 8001f42:	2301      	movs	r3, #1
 8001f44:	213d      	movs	r1, #61	@ 0x3d
 8001f46:	47a0      	blx	r4
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f040 808a 	bne.w	800206a <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001f56:	7b7b      	ldrb	r3, [r7, #13]
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	f023 030f 	bic.w	r3, r3, #15
 8001f5e:	b25a      	sxtb	r2, r3
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001f72:	4b41      	ldr	r3, [pc, #260]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68dc      	ldr	r4, [r3, #12]
 8001f78:	4b3f      	ldr	r3, [pc, #252]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	7a58      	ldrb	r0, [r3, #9]
 8001f7e:	f107 020d 	add.w	r2, r7, #13
 8001f82:	2301      	movs	r3, #1
 8001f84:	213d      	movs	r1, #61	@ 0x3d
 8001f86:	47a0      	blx	r4
 8001f88:	4603      	mov	r3, r0
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001f94:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001f9e:	4798      	blx	r3
 8001fa0:	e063      	b.n	800206a <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001fa2:	4b35      	ldr	r3, [pc, #212]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691c      	ldr	r4, [r3, #16]
 8001fa8:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	7a58      	ldrb	r0, [r3, #9]
 8001fae:	f107 020d 	add.w	r2, r7, #13
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	213d      	movs	r1, #61	@ 0x3d
 8001fb6:	47a0      	blx	r4
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d116      	bne.n	8001ff2 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8001fc4:	7b7b      	ldrb	r3, [r7, #13]
 8001fc6:	f023 030f 	bic.w	r3, r3, #15
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8001fce:	f107 030d 	add.w	r3, r7, #13
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	203d      	movs	r0, #61	@ 0x3d
 8001fd8:	f7fe fe1e 	bl	8000c18 <bno055_write_register>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8001fe8:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2014      	movs	r0, #20
 8001ff0:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d038      	beq.n	800206a <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691c      	ldr	r4, [r3, #16]
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	7a58      	ldrb	r0, [r3, #9]
 8002004:	f107 020d 	add.w	r2, r7, #13
 8002008:	2301      	movs	r3, #1
 800200a:	213d      	movs	r1, #61	@ 0x3d
 800200c:	47a0      	blx	r4
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d127      	bne.n	800206a <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	b25b      	sxtb	r3, r3
 800201e:	f023 030f 	bic.w	r3, r3, #15
 8002022:	b25a      	sxtb	r2, r3
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	b25b      	sxtb	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b25b      	sxtb	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68dc      	ldr	r4, [r3, #12]
 800203c:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	7a58      	ldrb	r0, [r3, #9]
 8002042:	f107 020d 	add.w	r2, r7, #13
 8002046:	2301      	movs	r3, #1
 8002048:	213d      	movs	r1, #61	@ 0x3d
 800204a:	47a0      	blx	r4
 800204c:	4603      	mov	r3, r0
 800204e:	b2da      	uxtb	r2, r3
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	4413      	add	r3, r2
 8002054:	b2db      	uxtb	r3, r3
 8002056:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8002058:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002062:	4798      	blx	r3
 8002064:	e001      	b.n	800206a <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8002066:	23ff      	movs	r3, #255	@ 0xff
 8002068:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bd90      	pop	{r4, r7, pc}
 8002076:	bf00      	nop
 8002078:	24000204 	.word	0x24000204

0800207c <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8002086:	23ff      	movs	r3, #255	@ 0xff
 8002088:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800208a:	2300      	movs	r3, #0
 800208c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800208e:	2300      	movs	r3, #0
 8002090:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8002092:	23ff      	movs	r3, #255	@ 0xff
 8002094:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8002096:	4b35      	ldr	r3, [pc, #212]	@ (800216c <bno055_set_power_mode+0xf0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 800209e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80020a2:	e05f      	b.n	8002164 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fedd 	bl	8001e68 <bno055_get_operation_mode>
 80020ae:	4603      	mov	r3, r0
 80020b0:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80020b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d143      	bne.n	8002142 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80020ba:	7b3b      	ldrb	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f7ff ff13 	bl	8001eec <bno055_set_operation_mode>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	4413      	add	r3, r2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80020d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d130      	bne.n	800213c <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <bno055_set_power_mode+0xf0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691c      	ldr	r4, [r3, #16]
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <bno055_set_power_mode+0xf0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	7a58      	ldrb	r0, [r3, #9]
 80020e6:	f107 020d 	add.w	r2, r7, #13
 80020ea:	2301      	movs	r3, #1
 80020ec:	213e      	movs	r1, #62	@ 0x3e
 80020ee:	47a0      	blx	r4
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80020f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d124      	bne.n	8002146 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	f023 0303 	bic.w	r3, r3, #3
 8002104:	b25a      	sxtb	r2, r3
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	b25b      	sxtb	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b25b      	sxtb	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <bno055_set_power_mode+0xf0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68dc      	ldr	r4, [r3, #12]
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <bno055_set_power_mode+0xf0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	7a58      	ldrb	r0, [r3, #9]
 8002124:	f107 020d 	add.w	r2, r7, #13
 8002128:	2301      	movs	r3, #1
 800212a:	213e      	movs	r1, #62	@ 0x3e
 800212c:	47a0      	blx	r4
 800212e:	4603      	mov	r3, r0
 8002130:	b2da      	uxtb	r2, r3
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4413      	add	r3, r2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e004      	b.n	8002146 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 800213c:	23ff      	movs	r3, #255	@ 0xff
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e001      	b.n	8002146 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8002142:	23ff      	movs	r3, #255	@ 0xff
 8002144:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8002146:	7b3b      	ldrb	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d009      	beq.n	8002160 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800214c:	7b3b      	ldrb	r3, [r7, #12]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fecc 	bl	8001eec <bno055_set_operation_mode>
 8002154:	4603      	mov	r3, r0
 8002156:	b2da      	uxtb	r2, r3
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	4413      	add	r3, r2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8002160:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}
 800216c:	24000204 	.word	0x24000204

08002170 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af02      	add	r7, sp, #8
 8002176:	603a      	str	r2, [r7, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
 800217e:	460b      	mov	r3, r1
 8002180:	71bb      	strb	r3, [r7, #6]
 8002182:	4613      	mov	r3, r2
 8002184:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	b29b      	uxth	r3, r3
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 800218e:	1dba      	adds	r2, r7, #6
 8002190:	89f9      	ldrh	r1, [r7, #14]
 8002192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	4809      	ldr	r0, [pc, #36]	@ (80021c0 <bno055_platform_read+0x50>)
 800219c:	f002 fb96 	bl	80048cc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 80021a0:	797b      	ldrb	r3, [r7, #5]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	89f9      	ldrh	r1, [r7, #14]
 80021a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021aa:	9200      	str	r2, [sp, #0]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4804      	ldr	r0, [pc, #16]	@ (80021c0 <bno055_platform_read+0x50>)
 80021b0:	f002 fca4 	bl	8004afc <HAL_I2C_Master_Receive>
    return 0;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2400048c 	.word	0x2400048c

080021c4 <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	603a      	str	r2, [r7, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	460b      	mov	r3, r1
 80021d4:	71bb      	strb	r3, [r7, #6]
 80021d6:	4613      	mov	r3, r2
 80021d8:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 80021e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <bno055_platform_write+0x54>)
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 80021e8:	797b      	ldrb	r3, [r7, #5]
 80021ea:	461a      	mov	r2, r3
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	480b      	ldr	r0, [pc, #44]	@ (800221c <bno055_platform_write+0x58>)
 80021f0:	f00d f849 	bl	800f286 <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 80021f4:	797b      	ldrb	r3, [r7, #5]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	89f9      	ldrh	r1, [r7, #14]
 80021fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <bno055_platform_write+0x54>)
 8002206:	4806      	ldr	r0, [pc, #24]	@ (8002220 <bno055_platform_write+0x5c>)
 8002208:	f002 fb60 	bl	80048cc <HAL_I2C_Master_Transmit>
    return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	24000220 	.word	0x24000220
 800221c:	24000221 	.word	0x24000221
 8002220:	2400048c 	.word	0x2400048c

08002224 <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(Delay--)
 800222c:	e008      	b.n	8002240 <DelayUs+0x1c>
	{
		for(i = 0; i < 84; i++)
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e002      	b.n	800223a <DelayUs+0x16>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b53      	cmp	r3, #83	@ 0x53
 800223e:	d9f9      	bls.n	8002234 <DelayUs+0x10>
	while(Delay--)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f1      	bne.n	800222e <DelayUs+0xa>
			;
		}
	}

	//HAL_Delay(Delay);
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
int8_t BNO055_Init(){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 800225e:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <BNO055_Init+0x94>)
 8002260:	4a23      	ldr	r2, [pc, #140]	@ (80022f0 <BNO055_Init+0x98>)
 8002262:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8002264:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <BNO055_Init+0x94>)
 8002266:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <BNO055_Init+0x9c>)
 8002268:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <BNO055_Init+0x94>)
 800226c:	4a22      	ldr	r2, [pc, #136]	@ (80022f8 <BNO055_Init+0xa0>)
 800226e:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 8002270:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <BNO055_Init+0x94>)
 8002272:	2228      	movs	r2, #40	@ 0x28
 8002274:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 8002276:	1dfa      	adds	r2, r7, #7
 8002278:	2301      	movs	r3, #1
 800227a:	2100      	movs	r1, #0
 800227c:	2028      	movs	r0, #40	@ 0x28
 800227e:	f7ff ff77 	bl	8002170 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 8002282:	481a      	ldr	r0, [pc, #104]	@ (80022ec <BNO055_Init+0x94>)
 8002284:	f7fe fc08 	bl	8000a98 <bno055_init>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <BNO055_Init+0xa4>)
 800228e:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <BNO055_Init+0xa8>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 8002296:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <BNO055_Init+0xa8>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff feee 	bl	800207c <bno055_set_power_mode>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <BNO055_Init+0xa4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a14      	ldr	r2, [pc, #80]	@ (80022fc <BNO055_Init+0xa4>)
 80022ac:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
	    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 80022ae:	200c      	movs	r0, #12
 80022b0:	f7ff fe1c 	bl	8001eec <bno055_set_operation_mode>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <BNO055_Init+0xa4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	4a0f      	ldr	r2, [pc, #60]	@ (80022fc <BNO055_Init+0xa4>)
 80022c0:	6013      	str	r3, [r2, #0]
	    comres += bno055_get_operation_mode(&op_mode_current);
 80022c2:	4810      	ldr	r0, [pc, #64]	@ (8002304 <BNO055_Init+0xac>)
 80022c4:	f7ff fdd0 	bl	8001e68 <bno055_get_operation_mode>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <BNO055_Init+0xa4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <BNO055_Init+0xa4>)
 80022d4:	6013      	str	r3, [r2, #0]
//		}
//		else
//		{
//			printf("bno055_init failed, comres=%d\r\n", comres);
//		}
	    DelayUs(1000000); // 1 second
 80022d6:	480c      	ldr	r0, [pc, #48]	@ (8002308 <BNO055_Init+0xb0>)
 80022d8:	f7ff ffa4 	bl	8002224 <DelayUs>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 80022dc:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <BNO055_Init+0xa4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b25b      	sxtb	r3, r3
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	24000208 	.word	0x24000208
 80022f0:	080021c5 	.word	0x080021c5
 80022f4:	08002171 	.word	0x08002171
 80022f8:	08002225 	.word	0x08002225
 80022fc:	24000000 	.word	0x24000000
 8002300:	24000435 	.word	0x24000435
 8002304:	24000434 	.word	0x24000434
 8002308:	000f4240 	.word	0x000f4240
 800230c:	00000000 	.word	0x00000000

08002310 <bno_read_fusion_data>:

AHRS_9_Axis_Data bno_read_fusion_data(){
 8002310:	b580      	push	{r7, lr}
 8002312:	b0aa      	sub	sp, #168	@ 0xa8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

    int8_t comres = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Initialize the return structure
    AHRS_9_Axis_Data data = {0};
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	2298      	movs	r2, #152	@ 0x98
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f00c ff2e 	bl	800f188 <memset>

    // Read Euler angles (Orientation)
    comres += bno055_convert_float_euler_hpr_deg(euler_temp_data);
 800232c:	4b86      	ldr	r3, [pc, #536]	@ (8002548 <bno_read_fusion_data+0x238>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f831 	bl	8001398 <bno055_convert_float_euler_hpr_deg>
 8002336:	4603      	mov	r3, r0
 8002338:	b2da      	uxtb	r2, r3
 800233a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800233e:	4413      	add	r3, r2
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.orientation[0] = euler_temp_data->p;
 8002346:	4b80      	ldr	r3, [pc, #512]	@ (8002548 <bno_read_fusion_data+0x238>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	60bb      	str	r3, [r7, #8]
    data.orientation[1] = euler_temp_data->r;
 800234e:	4b7e      	ldr	r3, [pc, #504]	@ (8002548 <bno_read_fusion_data+0x238>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60fb      	str	r3, [r7, #12]
    data.orientation[2] = euler_temp_data->h;
 8002356:	4b7c      	ldr	r3, [pc, #496]	@ (8002548 <bno_read_fusion_data+0x238>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	613b      	str	r3, [r7, #16]

    // Read Quaternion data -> Added scaling factor division for quaternion normalization (-1 ; +1)
    comres += bno055_read_quaternion_wxyz(quaternion_temp_data);
 800235e:	4b7b      	ldr	r3, [pc, #492]	@ (800254c <bno_read_fusion_data+0x23c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe feee 	bl	8001144 <bno055_read_quaternion_wxyz>
 8002368:	4603      	mov	r3, r0
 800236a:	b2da      	uxtb	r2, r3
 800236c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002370:	4413      	add	r3, r2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.quaternion.w = quaternion_temp_data->w / QUAT_SCALING_FACT;
 8002378:	4b74      	ldr	r3, [pc, #464]	@ (800254c <bno_read_fusion_data+0x23c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002388:	ed9f 5b6b 	vldr	d5, [pc, #428]	@ 8002538 <bno_read_fusion_data+0x228>
 800238c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002390:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    data.quaternion.x = quaternion_temp_data->x / QUAT_SCALING_FACT;
 8002394:	4b6d      	ldr	r3, [pc, #436]	@ (800254c <bno_read_fusion_data+0x23c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023a4:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 8002538 <bno_read_fusion_data+0x228>
 80023a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023ac:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    data.quaternion.y = quaternion_temp_data->y / QUAT_SCALING_FACT;
 80023b0:	4b66      	ldr	r3, [pc, #408]	@ (800254c <bno_read_fusion_data+0x23c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023c0:	ed9f 5b5d 	vldr	d5, [pc, #372]	@ 8002538 <bno_read_fusion_data+0x228>
 80023c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023c8:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    data.quaternion.z = quaternion_temp_data->z / QUAT_SCALING_FACT;
 80023cc:	4b5f      	ldr	r3, [pc, #380]	@ (800254c <bno_read_fusion_data+0x23c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023dc:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8002538 <bno_read_fusion_data+0x228>
 80023e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023e4:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98

    // Read Linear acceleration
    comres += bno055_convert_double_accel_xyz_mg(accel_temp_data);
 80023e8:	4b59      	ldr	r3, [pc, #356]	@ (8002550 <bno_read_fusion_data+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff f8e3 	bl	80015b8 <bno055_convert_double_accel_xyz_mg>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80023fa:	4413      	add	r3, r2
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.acceleration[0] = accel_temp_data->x / 1000; // Division by 1000 -> Converts millig to g
 8002402:	4b53      	ldr	r3, [pc, #332]	@ (8002550 <bno_read_fusion_data+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	ed93 6b00 	vldr	d6, [r3]
 800240a:	ed9f 5b4d 	vldr	d5, [pc, #308]	@ 8002540 <bno_read_fusion_data+0x230>
 800240e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002412:	ed87 7b08 	vstr	d7, [r7, #32]
    data.acceleration[1] = accel_temp_data->y / 1000; // Division by 1000 -> Converts millig to g
 8002416:	4b4e      	ldr	r3, [pc, #312]	@ (8002550 <bno_read_fusion_data+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	ed93 6b02 	vldr	d6, [r3, #8]
 800241e:	ed9f 5b48 	vldr	d5, [pc, #288]	@ 8002540 <bno_read_fusion_data+0x230>
 8002422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002426:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    data.acceleration[2] = accel_temp_data->z / 1000; // Division by 1000 -> Converts millig to g
 800242a:	4b49      	ldr	r3, [pc, #292]	@ (8002550 <bno_read_fusion_data+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	ed93 6b04 	vldr	d6, [r3, #16]
 8002432:	ed9f 5b43 	vldr	d5, [pc, #268]	@ 8002540 <bno_read_fusion_data+0x230>
 8002436:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800243a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

    comres += bno055_convert_double_gyro_xyz_dps(gyro_temp_xyz);
 800243e:	4b45      	ldr	r3, [pc, #276]	@ (8002554 <bno_read_fusion_data+0x244>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f9ac 	bl	80017a0 <bno055_convert_double_gyro_xyz_dps>
 8002448:	4603      	mov	r3, r0
 800244a:	b2da      	uxtb	r2, r3
 800244c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002450:	4413      	add	r3, r2
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.gyroscope[0] = gyro_temp_xyz->x;
 8002458:	4b3e      	ldr	r3, [pc, #248]	@ (8002554 <bno_read_fusion_data+0x244>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    data.gyroscope[1] = gyro_temp_xyz->y;
 8002464:	4b3b      	ldr	r3, [pc, #236]	@ (8002554 <bno_read_fusion_data+0x244>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800246c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    data.gyroscope[2] = gyro_temp_xyz->z;
 8002470:	4b38      	ldr	r3, [pc, #224]	@ (8002554 <bno_read_fusion_data+0x244>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002478:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    // Read Gravity data
    comres += bno055_convert_float_gravity_xyz_msq(gravity_temp_data);
 800247c:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <bno_read_fusion_data+0x248>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fff9 	bl	8001478 <bno055_convert_float_gravity_xyz_msq>
 8002486:	4603      	mov	r3, r0
 8002488:	b2da      	uxtb	r2, r3
 800248a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800248e:	4413      	add	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.gravity[0] = gravity_temp_data->x;
 8002496:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <bno_read_fusion_data+0x248>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	653b      	str	r3, [r7, #80]	@ 0x50
    data.gravity[1] = gravity_temp_data->y;
 800249e:	4b2e      	ldr	r3, [pc, #184]	@ (8002558 <bno_read_fusion_data+0x248>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	657b      	str	r3, [r7, #84]	@ 0x54
    data.gravity[2] = gravity_temp_data->z;
 80024a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002558 <bno_read_fusion_data+0x248>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	65bb      	str	r3, [r7, #88]	@ 0x58

    // Read Magnetometer data
    comres += bno055_convert_double_mag_x_uT(&data.magnetometer[0]);
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	3358      	adds	r3, #88	@ 0x58
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f8da 	bl	800166e <bno055_convert_double_mag_x_uT>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80024c2:	4413      	add	r3, r2
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    comres += bno055_convert_double_mag_y_uT(&data.magnetometer[1]);
 80024ca:	f107 0308 	add.w	r3, r7, #8
 80024ce:	3360      	adds	r3, #96	@ 0x60
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f8ff 	bl	80016d4 <bno055_convert_double_mag_y_uT>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80024de:	4413      	add	r3, r2
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    comres += bno055_convert_double_mag_z_uT(&data.magnetometer[2]);
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	3368      	adds	r3, #104	@ 0x68
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f924 	bl	800173a <bno055_convert_double_mag_z_uT>
 80024f2:	4603      	mov	r3, r0
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80024fa:	4413      	add	r3, r2
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    comres += bno055_convert_float_temp_celsius(&data.temperature);
 8002502:	f107 0308 	add.w	r3, r7, #8
 8002506:	3370      	adds	r3, #112	@ 0x70
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f809 	bl	8001520 <bno055_convert_float_temp_celsius>
 800250e:	4603      	mov	r3, r0
 8002510:	b2da      	uxtb	r2, r3
 8002512:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002516:	4413      	add	r3, r2
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    // Check communication results (Optional, for debugging)
    if (comres != 0) {
        //printf("Communication error: %d\n", comres);
    }

    return data;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	2298      	movs	r2, #152	@ 0x98
 8002528:	4619      	mov	r1, r3
 800252a:	f00c feac 	bl	800f286 <memcpy>
}
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	37a8      	adds	r7, #168	@ 0xa8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	00000000 	.word	0x00000000
 800253c:	40d00000 	.word	0x40d00000
 8002540:	00000000 	.word	0x00000000
 8002544:	408f4000 	.word	0x408f4000
 8002548:	24000420 	.word	0x24000420
 800254c:	24000424 	.word	0x24000424
 8002550:	24000428 	.word	0x24000428
 8002554:	2400042c 	.word	0x2400042c
 8002558:	24000430 	.word	0x24000430

0800255c <Send_Quat_To_IMU_Visualizer>:

void Send_Quat_To_IMU_Visualizer(quaternion_vect q)
{
 800255c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002560:	b0ab      	sub	sp, #172	@ 0xac
 8002562:	af08      	add	r7, sp, #32
 8002564:	eeb0 4b40 	vmov.f64	d4, d0
 8002568:	eeb0 5b41 	vmov.f64	d5, d1
 800256c:	eeb0 6b42 	vmov.f64	d6, d2
 8002570:	eeb0 7b43 	vmov.f64	d7, d3
 8002574:	ed87 4b00 	vstr	d4, [r7]
 8002578:	ed87 5b02 	vstr	d5, [r7, #8]
 800257c:	ed87 6b04 	vstr	d6, [r7, #16]
 8002580:	ed87 7b06 	vstr	d7, [r7, #24]
char quaternionStr[100];
float lama = 0.1;
 8002584:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <Send_Quat_To_IMU_Visualizer+0x8c>)
 8002586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
// Format quaternion (W, X, Y, Z vectors) as a comma-separated string
sprintf(quaternionStr, "%.6f,%.6f,%.6f,%.6f,%.6f\r\n", q.w, q.x, q.y, q.z, lama);
 800258a:	e9d7 8900 	ldrd	r8, r9, [r7]
 800258e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002596:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800259a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800259e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025a2:	f107 0620 	add.w	r6, r7, #32
 80025a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80025aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80025ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80025b2:	e9cd 2300 	strd	r2, r3, [sp]
 80025b6:	4642      	mov	r2, r8
 80025b8:	464b      	mov	r3, r9
 80025ba:	490c      	ldr	r1, [pc, #48]	@ (80025ec <Send_Quat_To_IMU_Visualizer+0x90>)
 80025bc:	4630      	mov	r0, r6
 80025be:	f00b fe07 	bl	800e1d0 <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)quaternionStr, strlen(quaternionStr), HAL_MAX_DELAY);
 80025c2:	f107 0320 	add.w	r3, r7, #32
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd fef2 	bl	80003b0 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f107 0120 	add.w	r1, r7, #32
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025d8:	4805      	ldr	r0, [pc, #20]	@ (80025f0 <Send_Quat_To_IMU_Visualizer+0x94>)
 80025da:	f008 fd9f 	bl	800b11c <HAL_UART_Transmit>
}
 80025de:	bf00      	nop
 80025e0:	378c      	adds	r7, #140	@ 0x8c
 80025e2:	46bd      	mov	sp, r7
 80025e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025e8:	3dcccccd 	.word	0x3dcccccd
 80025ec:	08011b6c 	.word	0x08011b6c
 80025f0:	2400084c 	.word	0x2400084c

080025f4 <bno055_print_fusion_data>:

void bno055_print_fusion_data(AHRS_9_Axis_Data *data) {
 80025f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025f8:	b088      	sub	sp, #32
 80025fa:	af06      	add	r7, sp, #24
 80025fc:	6078      	str	r0, [r7, #4]
printf("BNO055 AHRS: \n");
 80025fe:	485d      	ldr	r0, [pc, #372]	@ (8002774 <bno055_print_fusion_data+0x180>)
 8002600:	f00c fda8 	bl	800f154 <puts>
// Print orientation (Pitch, Roll, Yaw)
printf("Orientation -> ");
 8002604:	485c      	ldr	r0, [pc, #368]	@ (8002778 <bno055_print_fusion_data+0x184>)
 8002606:	f00c fd3d 	bl	800f084 <iprintf>
printf("Pitch: %.2f deg, Roll: %.2f deg, Yaw: %.2f deg \n", data->orientation[0], data->orientation[1], data->orientation[2]);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	edd3 7a01 	vldr	s15, [r3, #4]
 800261a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	edd3 6a02 	vldr	s13, [r3, #8]
 8002624:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002628:	ed8d 6b02 	vstr	d6, [sp, #8]
 800262c:	ed8d 7b00 	vstr	d7, [sp]
 8002630:	ec53 2b15 	vmov	r2, r3, d5
 8002634:	4851      	ldr	r0, [pc, #324]	@ (800277c <bno055_print_fusion_data+0x188>)
 8002636:	f00c fd25 	bl	800f084 <iprintf>

//printf("Orientation from Quaternions -> ");
//printf("Pitch: %.2f deg, Roll: %.2f deg, Yaw: %.2f deg \n", data->orientation_q[0], data->orientation_q[1], data->orientation_q[2]);

// Print quaternion (W, X, Y, Z vectors)
printf("Quaternion -> ");
 800263a:	4851      	ldr	r0, [pc, #324]	@ (8002780 <bno055_print_fusion_data+0x18c>)
 800263c:	f00c fd22 	bl	800f084 <iprintf>
printf("W: %.2f , X: %.2f , Y: %.2f , Z: %.2f \n", data->quaternion.w, data->quaternion.x, data->quaternion.y, data->quaternion.z);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	@ 0x78
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	e9d1 0122 	ldrd	r0, r1, [r1, #136]	@ 0x88
 8002652:	687c      	ldr	r4, [r7, #4]
 8002654:	e9d4 4524 	ldrd	r4, r5, [r4, #144]	@ 0x90
 8002658:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800265c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002660:	e9cd 2300 	strd	r2, r3, [sp]
 8002664:	4642      	mov	r2, r8
 8002666:	464b      	mov	r3, r9
 8002668:	4846      	ldr	r0, [pc, #280]	@ (8002784 <bno055_print_fusion_data+0x190>)
 800266a:	f00c fd0b 	bl	800f084 <iprintf>

Send_Quat_To_IMU_Visualizer(data->quaternion);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	ed93 4b1e 	vldr	d4, [r3, #120]	@ 0x78
 8002674:	ed93 5b20 	vldr	d5, [r3, #128]	@ 0x80
 8002678:	ed93 6b22 	vldr	d6, [r3, #136]	@ 0x88
 800267c:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 8002680:	eeb0 0b44 	vmov.f64	d0, d4
 8002684:	eeb0 1b45 	vmov.f64	d1, d5
 8002688:	eeb0 2b46 	vmov.f64	d2, d6
 800268c:	eeb0 3b47 	vmov.f64	d3, d7
 8002690:	f7ff ff64 	bl	800255c <Send_Quat_To_IMU_Visualizer>

// Print acceleration (X, Y, Z)
printf("Acceleration -> ");
 8002694:	483c      	ldr	r0, [pc, #240]	@ (8002788 <bno055_print_fusion_data+0x194>)
 8002696:	f00c fcf5 	bl	800f084 <iprintf>
printf("X: %.2f g, Y: %.2f g, Z: %.2f g \n", data->acceleration[0], data->acceleration[1], data->acceleration[2]);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	@ 0x28
 80026ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026b0:	e9cd 2300 	strd	r2, r3, [sp]
 80026b4:	4622      	mov	r2, r4
 80026b6:	462b      	mov	r3, r5
 80026b8:	4834      	ldr	r0, [pc, #208]	@ (800278c <bno055_print_fusion_data+0x198>)
 80026ba:	f00c fce3 	bl	800f084 <iprintf>

// Print gyroscope data (X, Y, Z)
printf("Angular Rate -> ");
 80026be:	4834      	ldr	r0, [pc, #208]	@ (8002790 <bno055_print_fusion_data+0x19c>)
 80026c0:	f00c fce0 	bl	800f084 <iprintf>
printf("X: %.2f dps, Y: %.2f dps, Z: %.2f dps \n", data->gyroscope[0], data->gyroscope[1], data->gyroscope[2]);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	@ 0x40
 80026d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026da:	e9cd 2300 	strd	r2, r3, [sp]
 80026de:	4622      	mov	r2, r4
 80026e0:	462b      	mov	r3, r5
 80026e2:	482c      	ldr	r0, [pc, #176]	@ (8002794 <bno055_print_fusion_data+0x1a0>)
 80026e4:	f00c fcce 	bl	800f084 <iprintf>

// Print gravity data (X, Y, Z)
printf("Gravity -> ");
 80026e8:	482b      	ldr	r0, [pc, #172]	@ (8002798 <bno055_print_fusion_data+0x1a4>)
 80026ea:	f00c fccb 	bl	800f084 <iprintf>
printf("X: %.2f m/s^2, Y: %.2f m/s^2, Z: %.2f m/s^2\n", data->gravity[0], data->gravity[1], data->gravity[2]);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80026f4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80026fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8002708:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800270c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002710:	ed8d 7b00 	vstr	d7, [sp]
 8002714:	ec53 2b15 	vmov	r2, r3, d5
 8002718:	4820      	ldr	r0, [pc, #128]	@ (800279c <bno055_print_fusion_data+0x1a8>)
 800271a:	f00c fcb3 	bl	800f084 <iprintf>

// Print magnetometer data (X, Y, Z)
printf("Magnetometer -> ");
 800271e:	4820      	ldr	r0, [pc, #128]	@ (80027a0 <bno055_print_fusion_data+0x1ac>)
 8002720:	f00c fcb0 	bl	800f084 <iprintf>
printf("X: %.2f µT, Y: %.2f µT, Z: %.2f µT \n", data->magnetometer[0], data->magnetometer[1], data->magnetometer[2]);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	e9d1 011a 	ldrd	r0, r1, [r1, #104]	@ 0x68
 8002736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800273a:	e9cd 2300 	strd	r2, r3, [sp]
 800273e:	4622      	mov	r2, r4
 8002740:	462b      	mov	r3, r5
 8002742:	4818      	ldr	r0, [pc, #96]	@ (80027a4 <bno055_print_fusion_data+0x1b0>)
 8002744:	f00c fc9e 	bl	800f084 <iprintf>

// Print magnetometer data (X, Y, Z)
printf("Temperature -> ");
 8002748:	4817      	ldr	r0, [pc, #92]	@ (80027a8 <bno055_print_fusion_data+0x1b4>)
 800274a:	f00c fc9b 	bl	800f084 <iprintf>
printf("Temperature: %.2f degC \n", data->temperature);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002754:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002758:	ec53 2b17 	vmov	r2, r3, d7
 800275c:	4813      	ldr	r0, [pc, #76]	@ (80027ac <bno055_print_fusion_data+0x1b8>)
 800275e:	f00c fc91 	bl	800f084 <iprintf>

printf("----- \n");
 8002762:	4813      	ldr	r0, [pc, #76]	@ (80027b0 <bno055_print_fusion_data+0x1bc>)
 8002764:	f00c fcf6 	bl	800f154 <puts>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002772:	bf00      	nop
 8002774:	08011b88 	.word	0x08011b88
 8002778:	08011b98 	.word	0x08011b98
 800277c:	08011ba8 	.word	0x08011ba8
 8002780:	08011bdc 	.word	0x08011bdc
 8002784:	08011bec 	.word	0x08011bec
 8002788:	08011c14 	.word	0x08011c14
 800278c:	08011c28 	.word	0x08011c28
 8002790:	08011c4c 	.word	0x08011c4c
 8002794:	08011c60 	.word	0x08011c60
 8002798:	08011c88 	.word	0x08011c88
 800279c:	08011c94 	.word	0x08011c94
 80027a0:	08011cc4 	.word	0x08011cc4
 80027a4:	08011cd8 	.word	0x08011cd8
 80027a8:	08011d00 	.word	0x08011d00
 80027ac:	08011d10 	.word	0x08011d10
 80027b0:	08011d2c 	.word	0x08011d2c

080027b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80027bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80027c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80027cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80027d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80027d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80027dc:	e000      	b.n	80027e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80027de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80027e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f9      	beq.n	80027de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80027ea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
	int i=0;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e009      	b.n	800282c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ffc7 	bl	80027b4 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbf1      	blt.n	8002818 <_write+0x16>
	}
	return len;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002842:	f000 fcb1 	bl	80031a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002846:	f001 fb8d 	bl	8003f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800284a:	f000 f821 	bl	8002890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800284e:	f000 fb99 	bl	8002f84 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8002852:	f000 f9a9 	bl	8002ba8 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8002856:	f000 f88b 	bl	8002970 <MX_I2C1_Init>
  MX_I2C2_Init();
 800285a:	f000 f8c9 	bl	80029f0 <MX_I2C2_Init>
  MX_I2C4_Init();
 800285e:	f000 f907 	bl	8002a70 <MX_I2C4_Init>
  MX_SPI1_Init();
 8002862:	f000 f9bf 	bl	8002be4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002866:	f000 fa13 	bl	8002c90 <MX_SPI2_Init>
  MX_UART8_Init();
 800286a:	f000 faf3 	bl	8002e54 <MX_UART8_Init>
  MX_USART1_UART_Init();
 800286e:	f000 fb3d 	bl	8002eec <MX_USART1_UART_Init>
  MX_SPI4_Init();
 8002872:	f000 fa63 	bl	8002d3c <MX_SPI4_Init>
  MX_FATFS_Init();
 8002876:	f00a fc39 	bl	800d0ec <MX_FATFS_Init>
  MX_TIM6_Init();
 800287a:	f000 fab5 	bl	8002de8 <MX_TIM6_Init>
  MX_RTC_Init();
 800287e:	f000 f937 	bl	8002af0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 8002882:	f001 fa39 	bl	8003cf8 <SensorManager_Init>
  TestTelemetry();
 8002886:	f001 fb0f 	bl	8003ea8 <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800288a:	bf00      	nop
 800288c:	e7fd      	b.n	800288a <main+0x4c>
	...

08002890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b09c      	sub	sp, #112	@ 0x70
 8002894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800289a:	224c      	movs	r2, #76	@ 0x4c
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f00c fc72 	bl	800f188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	2220      	movs	r2, #32
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f00c fc6c 	bl	800f188 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80028b0:	2002      	movs	r0, #2
 80028b2:	f002 fd57 	bl	8005364 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <SystemClock_Config+0xdc>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4a2b      	ldr	r2, [pc, #172]	@ (800296c <SystemClock_Config+0xdc>)
 80028c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80028c4:	6193      	str	r3, [r2, #24]
 80028c6:	4b29      	ldr	r3, [pc, #164]	@ (800296c <SystemClock_Config+0xdc>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028d2:	bf00      	nop
 80028d4:	4b25      	ldr	r3, [pc, #148]	@ (800296c <SystemClock_Config+0xdc>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e0:	d1f8      	bne.n	80028d4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80028e2:	2309      	movs	r3, #9
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028ec:	2301      	movs	r3, #1
 80028ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f0:	2302      	movs	r3, #2
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028f4:	2302      	movs	r3, #2
 80028f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80028f8:	2303      	movs	r3, #3
 80028fa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80028fc:	231f      	movs	r3, #31
 80028fe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002900:	2301      	movs	r3, #1
 8002902:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002904:	2302      	movs	r3, #2
 8002906:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002908:	2302      	movs	r3, #2
 800290a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800290c:	230c      	movs	r3, #12
 800290e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002910:	2300      	movs	r3, #0
 8002912:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8002914:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002918:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800291a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fd5a 	bl	80053d8 <HAL_RCC_OscConfig>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800292a:	f000 fc69 	bl	8003200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800292e:	233f      	movs	r3, #63	@ 0x3f
 8002930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002932:	2303      	movs	r3, #3
 8002934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800293a:	2308      	movs	r3, #8
 800293c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800293e:	2340      	movs	r3, #64	@ 0x40
 8002940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002942:	2340      	movs	r3, #64	@ 0x40
 8002944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800294a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800294c:	2340      	movs	r3, #64	@ 0x40
 800294e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	2103      	movs	r1, #3
 8002954:	4618      	mov	r0, r3
 8002956:	f003 f919 	bl	8005b8c <HAL_RCC_ClockConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002960:	f000 fc4e 	bl	8003200 <Error_Handler>
  }
}
 8002964:	bf00      	nop
 8002966:	3770      	adds	r7, #112	@ 0x70
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	58024800 	.word	0x58024800

08002970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002974:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <MX_I2C1_Init+0x74>)
 8002976:	4a1c      	ldr	r2, [pc, #112]	@ (80029e8 <MX_I2C1_Init+0x78>)
 8002978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <MX_I2C1_Init+0x74>)
 800297c:	4a1b      	ldr	r2, [pc, #108]	@ (80029ec <MX_I2C1_Init+0x7c>)
 800297e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002980:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <MX_I2C1_Init+0x74>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002986:	4b17      	ldr	r3, [pc, #92]	@ (80029e4 <MX_I2C1_Init+0x74>)
 8002988:	2201      	movs	r2, #1
 800298a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800298c:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <MX_I2C1_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002992:	4b14      	ldr	r3, [pc, #80]	@ (80029e4 <MX_I2C1_Init+0x74>)
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002998:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <MX_I2C1_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800299e:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <MX_I2C1_Init+0x74>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <MX_I2C1_Init+0x74>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029aa:	480e      	ldr	r0, [pc, #56]	@ (80029e4 <MX_I2C1_Init+0x74>)
 80029ac:	f001 fef2 	bl	8004794 <HAL_I2C_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029b6:	f000 fc23 	bl	8003200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029ba:	2100      	movs	r1, #0
 80029bc:	4809      	ldr	r0, [pc, #36]	@ (80029e4 <MX_I2C1_Init+0x74>)
 80029be:	f002 fc39 	bl	8005234 <HAL_I2CEx_ConfigAnalogFilter>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029c8:	f000 fc1a 	bl	8003200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029cc:	2100      	movs	r1, #0
 80029ce:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <MX_I2C1_Init+0x74>)
 80029d0:	f002 fc7b 	bl	80052ca <HAL_I2CEx_ConfigDigitalFilter>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029da:	f000 fc11 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	24000438 	.word	0x24000438
 80029e8:	40005400 	.word	0x40005400
 80029ec:	20a0a3f6 	.word	0x20a0a3f6

080029f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <MX_I2C2_Init+0x74>)
 80029f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <MX_I2C2_Init+0x78>)
 80029f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <MX_I2C2_Init+0x74>)
 80029fc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a6c <MX_I2C2_Init+0x7c>)
 80029fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002a00:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a06:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a0c:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a12:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a18:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a1e:	4b11      	ldr	r3, [pc, #68]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a2a:	480e      	ldr	r0, [pc, #56]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a2c:	f001 feb2 	bl	8004794 <HAL_I2C_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002a36:	f000 fbe3 	bl	8003200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4809      	ldr	r0, [pc, #36]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a3e:	f002 fbf9 	bl	8005234 <HAL_I2CEx_ConfigAnalogFilter>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002a48:	f000 fbda 	bl	8003200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4805      	ldr	r0, [pc, #20]	@ (8002a64 <MX_I2C2_Init+0x74>)
 8002a50:	f002 fc3b 	bl	80052ca <HAL_I2CEx_ConfigDigitalFilter>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002a5a:	f000 fbd1 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	2400048c 	.word	0x2400048c
 8002a68:	40005800 	.word	0x40005800
 8002a6c:	20a0a3f6 	.word	0x20a0a3f6

08002a70 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002a76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae8 <MX_I2C4_Init+0x78>)
 8002a78:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002aec <MX_I2C4_Init+0x7c>)
 8002a7e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002a80:	4b18      	ldr	r3, [pc, #96]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a86:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002a92:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a98:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002aaa:	480e      	ldr	r0, [pc, #56]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002aac:	f001 fe72 	bl	8004794 <HAL_I2C_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002ab6:	f000 fba3 	bl	8003200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002aba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002abe:	4809      	ldr	r0, [pc, #36]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002ac0:	f002 fbb8 	bl	8005234 <HAL_I2CEx_ConfigAnalogFilter>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8002aca:	f000 fb99 	bl	8003200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4804      	ldr	r0, [pc, #16]	@ (8002ae4 <MX_I2C4_Init+0x74>)
 8002ad2:	f002 fbfa 	bl	80052ca <HAL_I2CEx_ConfigDigitalFilter>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8002adc:	f000 fb90 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	240004e0 	.word	0x240004e0
 8002ae8:	58001c00 	.word	0x58001c00
 8002aec:	60405858 	.word	0x60405858

08002af0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002b04:	2300      	movs	r3, #0
 8002b06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b08:	4b25      	ldr	r3, [pc, #148]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b0a:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <MX_RTC_Init+0xb4>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b14:	4b22      	ldr	r3, [pc, #136]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b16:	227f      	movs	r2, #127	@ 0x7f
 8002b18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b1c:	22ff      	movs	r2, #255	@ 0xff
 8002b1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b38:	4819      	ldr	r0, [pc, #100]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b3a:	f005 ff99 	bl	8008a70 <HAL_RTC_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002b44:	f000 fb5c 	bl	8003200 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4619      	mov	r1, r3
 8002b62:	480f      	ldr	r0, [pc, #60]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b64:	f006 f806 	bl	8008b74 <HAL_RTC_SetTime>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002b6e:	f000 fb47 	bl	8003200 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b72:	2301      	movs	r3, #1
 8002b74:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b76:	2301      	movs	r3, #1
 8002b78:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b82:	463b      	mov	r3, r7
 8002b84:	2201      	movs	r2, #1
 8002b86:	4619      	mov	r1, r3
 8002b88:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <MX_RTC_Init+0xb0>)
 8002b8a:	f006 f8ed 	bl	8008d68 <HAL_RTC_SetDate>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002b94:	f000 fb34 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b98:	bf00      	nop
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	24000534 	.word	0x24000534
 8002ba4:	58004000 	.word	0x58004000

08002ba8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <MX_SDMMC1_SD_Init+0x34>)
 8002bae:	4a0c      	ldr	r2, [pc, #48]	@ (8002be0 <MX_SDMMC1_SD_Init+0x38>)
 8002bb0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <MX_SDMMC1_SD_Init+0x34>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002bb8:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <MX_SDMMC1_SD_Init+0x34>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002bbe:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <MX_SDMMC1_SD_Init+0x34>)
 8002bc0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bc4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002bc6:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <MX_SDMMC1_SD_Init+0x34>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	@ (8002bdc <MX_SDMMC1_SD_Init+0x34>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	24000558 	.word	0x24000558
 8002be0:	52007000 	.word	0x52007000

08002be4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002be8:	4b27      	ldr	r3, [pc, #156]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002bea:	4a28      	ldr	r2, [pc, #160]	@ (8002c8c <MX_SPI1_Init+0xa8>)
 8002bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bee:	4b26      	ldr	r3, [pc, #152]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002bf0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002bf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bf6:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bfc:	4b22      	ldr	r3, [pc, #136]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002bfe:	2207      	movs	r2, #7
 8002c00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c02:	4b21      	ldr	r3, [pc, #132]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c08:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c16:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c18:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002c1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c24:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2a:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002c30:	4b15      	ldr	r3, [pc, #84]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c36:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002c3e:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002c44:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c50:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c68:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c74:	4804      	ldr	r0, [pc, #16]	@ (8002c88 <MX_SPI1_Init+0xa4>)
 8002c76:	f007 fdcf 	bl	800a818 <HAL_SPI_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002c80:	f000 fabe 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	240005d4 	.word	0x240005d4
 8002c8c:	40013000 	.word	0x40013000

08002c90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c94:	4b27      	ldr	r3, [pc, #156]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002c96:	4a28      	ldr	r2, [pc, #160]	@ (8002d38 <MX_SPI2_Init+0xa8>)
 8002c98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c9a:	4b26      	ldr	r3, [pc, #152]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002c9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ca0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ca2:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002caa:	2207      	movs	r2, #7
 8002cac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cae:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cba:	4b1e      	ldr	r3, [pc, #120]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002cc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cc4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002cc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cca:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cd0:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd6:	4b17      	ldr	r3, [pc, #92]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002cdc:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ce2:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002ce4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ce8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002cea:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002cf0:	4b10      	ldr	r3, [pc, #64]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d02:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002d08:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002d14:	4b07      	ldr	r3, [pc, #28]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d1a:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d20:	4804      	ldr	r0, [pc, #16]	@ (8002d34 <MX_SPI2_Init+0xa4>)
 8002d22:	f007 fd79 	bl	800a818 <HAL_SPI_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002d2c:	f000 fa68 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	2400065c 	.word	0x2400065c
 8002d38:	40003800 	.word	0x40003800

08002d3c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002d40:	4b27      	ldr	r3, [pc, #156]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d42:	4a28      	ldr	r2, [pc, #160]	@ (8002de4 <MX_SPI4_Init+0xa8>)
 8002d44:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002d46:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d4c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002d4e:	4b24      	ldr	r3, [pc, #144]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d54:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d56:	2207      	movs	r2, #7
 8002d58:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d5a:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d60:	4b1f      	ldr	r3, [pc, #124]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002d66:	4b1e      	ldr	r3, [pc, #120]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d68:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d6c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d70:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002d74:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d7c:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d82:	4b17      	ldr	r3, [pc, #92]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002d88:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d8e:	4b14      	ldr	r3, [pc, #80]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d96:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002d9c:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002da2:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002da8:	4b0d      	ldr	r3, [pc, #52]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002dae:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002dba:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002dc0:	4b07      	ldr	r3, [pc, #28]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002dcc:	4804      	ldr	r0, [pc, #16]	@ (8002de0 <MX_SPI4_Init+0xa4>)
 8002dce:	f007 fd23 	bl	800a818 <HAL_SPI_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8002dd8:	f000 fa12 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	240006e4 	.word	0x240006e4
 8002de4:	40013400 	.word	0x40013400

08002de8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002df8:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <MX_TIM6_Init+0x64>)
 8002dfa:	4a15      	ldr	r2, [pc, #84]	@ (8002e50 <MX_TIM6_Init+0x68>)
 8002dfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 49999;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <MX_TIM6_Init+0x64>)
 8002e00:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002e04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e06:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <MX_TIM6_Init+0x64>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <MX_TIM6_Init+0x64>)
 8002e0e:	2209      	movs	r2, #9
 8002e10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <MX_TIM6_Init+0x64>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e18:	480c      	ldr	r0, [pc, #48]	@ (8002e4c <MX_TIM6_Init+0x64>)
 8002e1a:	f007 fe3c 	bl	800aa96 <HAL_TIM_Base_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002e24:	f000 f9ec 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e28:	2320      	movs	r3, #32
 8002e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	4619      	mov	r1, r3
 8002e34:	4805      	ldr	r0, [pc, #20]	@ (8002e4c <MX_TIM6_Init+0x64>)
 8002e36:	f008 f867 	bl	800af08 <HAL_TIMEx_MasterConfigSynchronization>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002e40:	f000 f9de 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	2400076c 	.word	0x2400076c
 8002e50:	40001000 	.word	0x40001000

08002e54 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002e58:	4b22      	ldr	r3, [pc, #136]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e5a:	4a23      	ldr	r2, [pc, #140]	@ (8002ee8 <MX_UART8_Init+0x94>)
 8002e5c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8002e5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e60:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002e64:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002e66:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002e72:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002e78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e84:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e90:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e96:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002e9c:	4811      	ldr	r0, [pc, #68]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002e9e:	f008 f8ed 	bl	800b07c <HAL_UART_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002ea8:	f000 f9aa 	bl	8003200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eac:	2100      	movs	r1, #0
 8002eae:	480d      	ldr	r0, [pc, #52]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002eb0:	f009 fa87 	bl	800c3c2 <HAL_UARTEx_SetTxFifoThreshold>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002eba:	f000 f9a1 	bl	8003200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4808      	ldr	r0, [pc, #32]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002ec2:	f009 fabc 	bl	800c43e <HAL_UARTEx_SetRxFifoThreshold>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002ecc:	f000 f998 	bl	8003200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002ed0:	4804      	ldr	r0, [pc, #16]	@ (8002ee4 <MX_UART8_Init+0x90>)
 8002ed2:	f009 fa3d 	bl	800c350 <HAL_UARTEx_DisableFifoMode>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002edc:	f000 f990 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	240007b8 	.word	0x240007b8
 8002ee8:	40007c00 	.word	0x40007c00

08002eec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ef0:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002ef2:	4a23      	ldr	r2, [pc, #140]	@ (8002f80 <MX_USART1_UART_Init+0x94>)
 8002ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ef6:	4b21      	ldr	r3, [pc, #132]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002ef8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f04:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f10:	4b1a      	ldr	r3, [pc, #104]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f12:	220c      	movs	r2, #12
 8002f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f16:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f22:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f28:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f2e:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f34:	4811      	ldr	r0, [pc, #68]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f36:	f008 f8a1 	bl	800b07c <HAL_UART_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f40:	f000 f95e 	bl	8003200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f44:	2100      	movs	r1, #0
 8002f46:	480d      	ldr	r0, [pc, #52]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f48:	f009 fa3b 	bl	800c3c2 <HAL_UARTEx_SetTxFifoThreshold>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f52:	f000 f955 	bl	8003200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f56:	2100      	movs	r1, #0
 8002f58:	4808      	ldr	r0, [pc, #32]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f5a:	f009 fa70 	bl	800c43e <HAL_UARTEx_SetRxFifoThreshold>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f64:	f000 f94c 	bl	8003200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f68:	4804      	ldr	r0, [pc, #16]	@ (8002f7c <MX_USART1_UART_Init+0x90>)
 8002f6a:	f009 f9f1 	bl	800c350 <HAL_UARTEx_DisableFifoMode>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f74:	f000 f944 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2400084c 	.word	0x2400084c
 8002f80:	40011000 	.word	0x40011000

08002f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	@ 0x30
 8002f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8a:	f107 031c 	add.w	r3, r7, #28
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
 8002f98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fa0:	4a7b      	ldr	r2, [pc, #492]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002faa:	4b79      	ldr	r3, [pc, #484]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fb8:	4b75      	ldr	r3, [pc, #468]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fbe:	4a74      	ldr	r2, [pc, #464]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002fc0:	f043 0310 	orr.w	r3, r3, #16
 8002fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fc8:	4b71      	ldr	r3, [pc, #452]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fdc:	4a6c      	ldr	r2, [pc, #432]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ffa:	4a65      	ldr	r2, [pc, #404]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003004:	4b62      	ldr	r3, [pc, #392]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8003006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003012:	4b5f      	ldr	r3, [pc, #380]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8003014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003018:	4a5d      	ldr	r2, [pc, #372]	@ (8003190 <MX_GPIO_Init+0x20c>)
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003022:	4b5b      	ldr	r3, [pc, #364]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8003024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003030:	4b57      	ldr	r3, [pc, #348]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8003032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003036:	4a56      	ldr	r2, [pc, #344]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8003038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800303c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003040:	4b53      	ldr	r3, [pc, #332]	@ (8003190 <MX_GPIO_Init+0x20c>)
 8003042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800304e:	2200      	movs	r2, #0
 8003050:	2110      	movs	r1, #16
 8003052:	4850      	ldr	r0, [pc, #320]	@ (8003194 <MX_GPIO_Init+0x210>)
 8003054:	f001 fb84 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8003058:	2200      	movs	r2, #0
 800305a:	2110      	movs	r1, #16
 800305c:	484e      	ldr	r0, [pc, #312]	@ (8003198 <MX_GPIO_Init+0x214>)
 800305e:	f001 fb7f 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8003068:	484c      	ldr	r0, [pc, #304]	@ (800319c <MX_GPIO_Init+0x218>)
 800306a:	f001 fb79 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 800306e:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8003072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003074:	2300      	movs	r3, #0
 8003076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4619      	mov	r1, r3
 8003082:	4847      	ldr	r0, [pc, #284]	@ (80031a0 <MX_GPIO_Init+0x21c>)
 8003084:	f001 f9ac 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8003088:	2310      	movs	r3, #16
 800308a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	2301      	movs	r3, #1
 800308e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003094:	2302      	movs	r3, #2
 8003096:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	483d      	ldr	r0, [pc, #244]	@ (8003194 <MX_GPIO_Init+0x210>)
 80030a0:	f001 f99e 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030a4:	2302      	movs	r3, #2
 80030a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030a8:	2303      	movs	r3, #3
 80030aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b0:	f107 031c 	add.w	r3, r7, #28
 80030b4:	4619      	mov	r1, r3
 80030b6:	483b      	ldr	r0, [pc, #236]	@ (80031a4 <MX_GPIO_Init+0x220>)
 80030b8:	f001 f992 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030bc:	2308      	movs	r3, #8
 80030be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c0:	2303      	movs	r3, #3
 80030c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	4619      	mov	r1, r3
 80030ce:	4834      	ldr	r0, [pc, #208]	@ (80031a0 <MX_GPIO_Init+0x21c>)
 80030d0:	f001 f986 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 80030d4:	2310      	movs	r3, #16
 80030d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d8:	2301      	movs	r3, #1
 80030da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 80030e4:	f107 031c 	add.w	r3, r7, #28
 80030e8:	4619      	mov	r1, r3
 80030ea:	482b      	ldr	r0, [pc, #172]	@ (8003198 <MX_GPIO_Init+0x214>)
 80030ec:	f001 f978 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030f0:	2304      	movs	r3, #4
 80030f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030f4:	2303      	movs	r3, #3
 80030f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fc:	f107 031c 	add.w	r3, r7, #28
 8003100:	4619      	mov	r1, r3
 8003102:	4826      	ldr	r0, [pc, #152]	@ (800319c <MX_GPIO_Init+0x218>)
 8003104:	f001 f96c 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8003108:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800310c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	4619      	mov	r1, r3
 800311c:	481d      	ldr	r0, [pc, #116]	@ (8003194 <MX_GPIO_Init+0x210>)
 800311e:	f001 f95f 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 8003122:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8003126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003128:	2301      	movs	r3, #1
 800312a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	2300      	movs	r3, #0
 8003132:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003134:	f107 031c 	add.w	r3, r7, #28
 8003138:	4619      	mov	r1, r3
 800313a:	4818      	ldr	r0, [pc, #96]	@ (800319c <MX_GPIO_Init+0x218>)
 800313c:	f001 f950 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003140:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003146:	2303      	movs	r3, #3
 8003148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800314e:	f107 031c 	add.w	r3, r7, #28
 8003152:	4619      	mov	r1, r3
 8003154:	480f      	ldr	r0, [pc, #60]	@ (8003194 <MX_GPIO_Init+0x210>)
 8003156:	f001 f943 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800315a:	2308      	movs	r3, #8
 800315c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800315e:	2303      	movs	r3, #3
 8003160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003166:	f107 031c 	add.w	r3, r7, #28
 800316a:	4619      	mov	r1, r3
 800316c:	480a      	ldr	r0, [pc, #40]	@ (8003198 <MX_GPIO_Init+0x214>)
 800316e:	f001 f937 	bl	80043e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 8003172:	2200      	movs	r2, #0
 8003174:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003178:	4808      	ldr	r0, [pc, #32]	@ (800319c <MX_GPIO_Init+0x218>)
 800317a:	f001 faf1 	bl	8004760 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 800317e:	2200      	movs	r2, #0
 8003180:	2110      	movs	r1, #16
 8003182:	4805      	ldr	r0, [pc, #20]	@ (8003198 <MX_GPIO_Init+0x214>)
 8003184:	f001 faec 	bl	8004760 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8003188:	bf00      	nop
 800318a:	3730      	adds	r7, #48	@ 0x30
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58024400 	.word	0x58024400
 8003194:	58021000 	.word	0x58021000
 8003198:	58020000 	.word	0x58020000
 800319c:	58020400 	.word	0x58020400
 80031a0:	58020800 	.word	0x58020800
 80031a4:	58020c00 	.word	0x58020c00

080031a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80031ae:	463b      	mov	r3, r7
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80031ba:	f001 f899 	bl	80042f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80031be:	2301      	movs	r3, #1
 80031c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80031ca:	231f      	movs	r3, #31
 80031cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80031ce:	2387      	movs	r3, #135	@ 0x87
 80031d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80031d6:	2300      	movs	r3, #0
 80031d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80031da:	2301      	movs	r3, #1
 80031dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80031de:	2301      	movs	r3, #1
 80031e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80031ea:	463b      	mov	r3, r7
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 f8b7 	bl	8004360 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80031f2:	2004      	movs	r0, #4
 80031f4:	f001 f894 	bl	8004320 <HAL_MPU_Enable>

}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003204:	b672      	cpsid	i
}
 8003206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <Error_Handler+0x8>

0800320c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <HAL_MspInit+0x30>)
 8003214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003218:	4a08      	ldr	r2, [pc, #32]	@ (800323c <HAL_MspInit+0x30>)
 800321a:	f043 0302 	orr.w	r3, r3, #2
 800321e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003222:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_MspInit+0x30>)
 8003224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	58024400 	.word	0x58024400

08003240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0bc      	sub	sp, #240	@ 0xf0
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003258:	f107 0320 	add.w	r3, r7, #32
 800325c:	22b8      	movs	r2, #184	@ 0xb8
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f00b ff91 	bl	800f188 <memset>
  if(hi2c->Instance==I2C1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a74      	ldr	r2, [pc, #464]	@ (800343c <HAL_I2C_MspInit+0x1fc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d147      	bne.n	8003300 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003270:	f04f 0208 	mov.w	r2, #8
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003282:	f107 0320 	add.w	r3, r7, #32
 8003286:	4618      	mov	r0, r3
 8003288:	f003 f80c 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003292:	f7ff ffb5 	bl	8003200 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003296:	4b6a      	ldr	r3, [pc, #424]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 8003298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800329c:	4a68      	ldr	r2, [pc, #416]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 800329e:	f043 0302 	orr.w	r3, r3, #2
 80032a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032a6:	4b66      	ldr	r3, [pc, #408]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 80032a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80032b4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80032b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032bc:	2312      	movs	r3, #18
 80032be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032ce:	2304      	movs	r3, #4
 80032d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80032d8:	4619      	mov	r1, r3
 80032da:	485a      	ldr	r0, [pc, #360]	@ (8003444 <HAL_I2C_MspInit+0x204>)
 80032dc:	f001 f880 	bl	80043e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032e0:	4b57      	ldr	r3, [pc, #348]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 80032e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032e6:	4a56      	ldr	r2, [pc, #344]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 80032e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80032f0:	4b53      	ldr	r3, [pc, #332]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 80032f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80032fe:	e098      	b.n	8003432 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a50      	ldr	r2, [pc, #320]	@ (8003448 <HAL_I2C_MspInit+0x208>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d147      	bne.n	800339a <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800330a:	f04f 0208 	mov.w	r2, #8
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003316:	2300      	movs	r3, #0
 8003318:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800331c:	f107 0320 	add.w	r3, r7, #32
 8003320:	4618      	mov	r0, r3
 8003322:	f002 ffbf 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 800332c:	f7ff ff68 	bl	8003200 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003330:	4b43      	ldr	r3, [pc, #268]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 8003332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003336:	4a42      	ldr	r2, [pc, #264]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003340:	4b3f      	ldr	r3, [pc, #252]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 8003342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800334e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003356:	2312      	movs	r3, #18
 8003358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003368:	2304      	movs	r3, #4
 800336a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003372:	4619      	mov	r1, r3
 8003374:	4833      	ldr	r0, [pc, #204]	@ (8003444 <HAL_I2C_MspInit+0x204>)
 8003376:	f001 f833 	bl	80043e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800337a:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 800337c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003380:	4a2f      	ldr	r2, [pc, #188]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 8003382:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003386:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800338a:	4b2d      	ldr	r3, [pc, #180]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 800338c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]
}
 8003398:	e04b      	b.n	8003432 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a2b      	ldr	r2, [pc, #172]	@ (800344c <HAL_I2C_MspInit+0x20c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d146      	bne.n	8003432 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80033a4:	f04f 0210 	mov.w	r2, #16
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b6:	f107 0320 	add.w	r3, r7, #32
 80033ba:	4618      	mov	r0, r3
 80033bc:	f002 ff72 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80033c6:	f7ff ff1b 	bl	8003200 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 80033cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 80033d2:	f043 0308 	orr.w	r3, r3, #8
 80033d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033da:	4b19      	ldr	r3, [pc, #100]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 80033dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80033e8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80033ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033f0:	2312      	movs	r3, #18
 80033f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fc:	2303      	movs	r3, #3
 80033fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003402:	2304      	movs	r3, #4
 8003404:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003408:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800340c:	4619      	mov	r1, r3
 800340e:	4810      	ldr	r0, [pc, #64]	@ (8003450 <HAL_I2C_MspInit+0x210>)
 8003410:	f000 ffe6 	bl	80043e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003414:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 8003416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800341a:	4a09      	ldr	r2, [pc, #36]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 800341c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003420:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003424:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <HAL_I2C_MspInit+0x200>)
 8003426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800342a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
}
 8003432:	bf00      	nop
 8003434:	37f0      	adds	r7, #240	@ 0xf0
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40005400 	.word	0x40005400
 8003440:	58024400 	.word	0x58024400
 8003444:	58020400 	.word	0x58020400
 8003448:	40005800 	.word	0x40005800
 800344c:	58001c00 	.word	0x58001c00
 8003450:	58020c00 	.word	0x58020c00

08003454 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b0b0      	sub	sp, #192	@ 0xc0
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	22b8      	movs	r2, #184	@ 0xb8
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f00b fe8f 	bl	800f188 <memset>
  if(hrtc->Instance==RTC)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <HAL_RTC_MspInit+0x5c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d119      	bne.n	80034a8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003474:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003488:	f107 0308 	add.w	r3, r7, #8
 800348c:	4618      	mov	r0, r3
 800348e:	f002 ff09 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003498:	f7ff feb2 	bl	8003200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_RTC_MspInit+0x60>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a0:	4a04      	ldr	r2, [pc, #16]	@ (80034b4 <HAL_RTC_MspInit+0x60>)
 80034a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a6:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80034a8:	bf00      	nop
 80034aa:	37c0      	adds	r7, #192	@ 0xc0
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	58004000 	.word	0x58004000
 80034b4:	58024400 	.word	0x58024400

080034b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b0ba      	sub	sp, #232	@ 0xe8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034d0:	f107 0318 	add.w	r3, r7, #24
 80034d4:	22b8      	movs	r2, #184	@ 0xb8
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f00b fe55 	bl	800f188 <memset>
  if(hsd->Instance==SDMMC1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a38      	ldr	r2, [pc, #224]	@ (80035c4 <HAL_SD_MspInit+0x10c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d169      	bne.n	80035bc <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80034e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034f8:	f107 0318 	add.w	r3, r7, #24
 80034fc:	4618      	mov	r0, r3
 80034fe:	f002 fed1 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003508:	f7ff fe7a 	bl	8003200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800350c:	4b2e      	ldr	r3, [pc, #184]	@ (80035c8 <HAL_SD_MspInit+0x110>)
 800350e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003512:	4a2d      	ldr	r2, [pc, #180]	@ (80035c8 <HAL_SD_MspInit+0x110>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003518:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800351c:	4b2a      	ldr	r3, [pc, #168]	@ (80035c8 <HAL_SD_MspInit+0x110>)
 800351e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800352a:	4b27      	ldr	r3, [pc, #156]	@ (80035c8 <HAL_SD_MspInit+0x110>)
 800352c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003530:	4a25      	ldr	r2, [pc, #148]	@ (80035c8 <HAL_SD_MspInit+0x110>)
 8003532:	f043 0308 	orr.w	r3, r3, #8
 8003536:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800353a:	4b23      	ldr	r3, [pc, #140]	@ (80035c8 <HAL_SD_MspInit+0x110>)
 800353c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003548:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <HAL_SD_MspInit+0x110>)
 800354a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800354e:	4a1e      	ldr	r2, [pc, #120]	@ (80035c8 <HAL_SD_MspInit+0x110>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <HAL_SD_MspInit+0x110>)
 800355a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003566:	2304      	movs	r3, #4
 8003568:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356c:	2302      	movs	r3, #2
 800356e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003578:	2303      	movs	r3, #3
 800357a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800357e:	230c      	movs	r3, #12
 8003580:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003584:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003588:	4619      	mov	r1, r3
 800358a:	4810      	ldr	r0, [pc, #64]	@ (80035cc <HAL_SD_MspInit+0x114>)
 800358c:	f000 ff28 	bl	80043e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8003590:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003594:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a4:	2303      	movs	r3, #3
 80035a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80035aa:	230c      	movs	r3, #12
 80035ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4806      	ldr	r0, [pc, #24]	@ (80035d0 <HAL_SD_MspInit+0x118>)
 80035b8:	f000 ff12 	bl	80043e0 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80035bc:	bf00      	nop
 80035be:	37e8      	adds	r7, #232	@ 0xe8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	52007000 	.word	0x52007000
 80035c8:	58024400 	.word	0x58024400
 80035cc:	58020c00 	.word	0x58020c00
 80035d0:	58020800 	.word	0x58020800

080035d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b0be      	sub	sp, #248	@ 0xf8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035f0:	22b8      	movs	r2, #184	@ 0xb8
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f00b fdc7 	bl	800f188 <memset>
  if(hspi->Instance==SPI1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a97      	ldr	r2, [pc, #604]	@ (800385c <HAL_SPI_MspInit+0x288>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d16a      	bne.n	80036da <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003604:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003616:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800361a:	4618      	mov	r0, r3
 800361c:	f002 fe42 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8003626:	f7ff fdeb 	bl	8003200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800362a:	4b8d      	ldr	r3, [pc, #564]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800362c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003630:	4a8b      	ldr	r2, [pc, #556]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 8003632:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003636:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800363a:	4b89      	ldr	r3, [pc, #548]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800363c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003648:	4b85      	ldr	r3, [pc, #532]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800364a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800364e:	4a84      	ldr	r2, [pc, #528]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003658:	4b81      	ldr	r3, [pc, #516]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800365a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003666:	4b7e      	ldr	r3, [pc, #504]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 8003668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800366c:	4a7c      	ldr	r2, [pc, #496]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003676:	4b7a      	ldr	r3, [pc, #488]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 8003678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003684:	2310      	movs	r3, #16
 8003686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800369c:	2305      	movs	r3, #5
 800369e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80036a6:	4619      	mov	r1, r3
 80036a8:	486e      	ldr	r0, [pc, #440]	@ (8003864 <HAL_SPI_MspInit+0x290>)
 80036aa:	f000 fe99 	bl	80043e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80036ae:	23a0      	movs	r3, #160	@ 0xa0
 80036b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036c6:	2305      	movs	r3, #5
 80036c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4865      	ldr	r0, [pc, #404]	@ (8003868 <HAL_SPI_MspInit+0x294>)
 80036d4:	f000 fe84 	bl	80043e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80036d8:	e0bb      	b.n	8003852 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a63      	ldr	r2, [pc, #396]	@ (800386c <HAL_SPI_MspInit+0x298>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d16b      	bne.n	80037bc <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80036e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036fa:	4618      	mov	r0, r3
 80036fc:	f002 fdd2 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8003706:	f7ff fd7b 	bl	8003200 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800370a:	4b55      	ldr	r3, [pc, #340]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800370c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003710:	4a53      	ldr	r2, [pc, #332]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 8003712:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003716:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800371a:	4b51      	ldr	r3, [pc, #324]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800371c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003728:	4b4d      	ldr	r3, [pc, #308]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800372a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800372e:	4a4c      	ldr	r2, [pc, #304]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003738:	4b49      	ldr	r3, [pc, #292]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800373a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003746:	4b46      	ldr	r3, [pc, #280]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 8003748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800374c:	4a44      	ldr	r2, [pc, #272]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003756:	4b42      	ldr	r3, [pc, #264]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 8003758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003768:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800377e:	2305      	movs	r3, #5
 8003780:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003784:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003788:	4619      	mov	r1, r3
 800378a:	4837      	ldr	r0, [pc, #220]	@ (8003868 <HAL_SPI_MspInit+0x294>)
 800378c:	f000 fe28 	bl	80043e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8003790:	2306      	movs	r3, #6
 8003792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037a8:	2305      	movs	r3, #5
 80037aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ae:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80037b2:	4619      	mov	r1, r3
 80037b4:	482e      	ldr	r0, [pc, #184]	@ (8003870 <HAL_SPI_MspInit+0x29c>)
 80037b6:	f000 fe13 	bl	80043e0 <HAL_GPIO_Init>
}
 80037ba:	e04a      	b.n	8003852 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003874 <HAL_SPI_MspInit+0x2a0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d145      	bne.n	8003852 <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80037c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 fd61 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_SPI_MspInit+0x218>
      Error_Handler();
 80037e8:	f7ff fd0a 	bl	8003200 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80037ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 80037ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 80037f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80037f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037fc:	4b18      	ldr	r3, [pc, #96]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 80037fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003802:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800380a:	4b15      	ldr	r3, [pc, #84]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800380c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003810:	4a13      	ldr	r2, [pc, #76]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 8003812:	f043 0310 	orr.w	r3, r3, #16
 8003816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800381a:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <HAL_SPI_MspInit+0x28c>)
 800381c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003828:	2364      	movs	r3, #100	@ 0x64
 800382a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003840:	2305      	movs	r3, #5
 8003842:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003846:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800384a:	4619      	mov	r1, r3
 800384c:	480a      	ldr	r0, [pc, #40]	@ (8003878 <HAL_SPI_MspInit+0x2a4>)
 800384e:	f000 fdc7 	bl	80043e0 <HAL_GPIO_Init>
}
 8003852:	bf00      	nop
 8003854:	37f8      	adds	r7, #248	@ 0xf8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40013000 	.word	0x40013000
 8003860:	58024400 	.word	0x58024400
 8003864:	58020400 	.word	0x58020400
 8003868:	58020000 	.word	0x58020000
 800386c:	40003800 	.word	0x40003800
 8003870:	58020800 	.word	0x58020800
 8003874:	40013400 	.word	0x40013400
 8003878:	58021000 	.word	0x58021000

0800387c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0e      	ldr	r2, [pc, #56]	@ (80038c4 <HAL_TIM_Base_MspInit+0x48>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d116      	bne.n	80038bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800388e:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <HAL_TIM_Base_MspInit+0x4c>)
 8003890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003894:	4a0c      	ldr	r2, [pc, #48]	@ (80038c8 <HAL_TIM_Base_MspInit+0x4c>)
 8003896:	f043 0310 	orr.w	r3, r3, #16
 800389a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_TIM_Base_MspInit+0x4c>)
 80038a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038ac:	2200      	movs	r2, #0
 80038ae:	2100      	movs	r1, #0
 80038b0:	2036      	movs	r0, #54	@ 0x36
 80038b2:	f000 fce8 	bl	8004286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038b6:	2036      	movs	r0, #54	@ 0x36
 80038b8:	f000 fcff 	bl	80042ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40001000 	.word	0x40001000
 80038c8:	58024400 	.word	0x58024400

080038cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b0ba      	sub	sp, #232	@ 0xe8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038e4:	f107 0318 	add.w	r3, r7, #24
 80038e8:	22b8      	movs	r2, #184	@ 0xb8
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f00b fc4b 	bl	800f188 <memset>
  if(huart->Instance==UART8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a4d      	ldr	r2, [pc, #308]	@ (8003a2c <HAL_UART_MspInit+0x160>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d146      	bne.n	800398a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80038fc:	f04f 0202 	mov.w	r2, #2
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003908:	2300      	movs	r3, #0
 800390a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800390e:	f107 0318 	add.w	r3, r7, #24
 8003912:	4618      	mov	r0, r3
 8003914:	f002 fcc6 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800391e:	f7ff fc6f 	bl	8003200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003922:	4b43      	ldr	r3, [pc, #268]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 8003924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003928:	4a41      	ldr	r2, [pc, #260]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 800392a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800392e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003932:	4b3f      	ldr	r3, [pc, #252]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 8003934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003938:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003940:	4b3b      	ldr	r3, [pc, #236]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 8003942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003946:	4a3a      	ldr	r2, [pc, #232]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 8003948:	f043 0310 	orr.w	r3, r3, #16
 800394c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003950:	4b37      	ldr	r3, [pc, #220]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 8003952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800395e:	2303      	movs	r3, #3
 8003960:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	2302      	movs	r3, #2
 8003966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003976:	2308      	movs	r3, #8
 8003978:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800397c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003980:	4619      	mov	r1, r3
 8003982:	482c      	ldr	r0, [pc, #176]	@ (8003a34 <HAL_UART_MspInit+0x168>)
 8003984:	f000 fd2c 	bl	80043e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003988:	e04b      	b.n	8003a22 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a38 <HAL_UART_MspInit+0x16c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d146      	bne.n	8003a22 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003994:	f04f 0201 	mov.w	r2, #1
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039a6:	f107 0318 	add.w	r3, r7, #24
 80039aa:	4618      	mov	r0, r3
 80039ac:	f002 fc7a 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_UART_MspInit+0xee>
      Error_Handler();
 80039b6:	f7ff fc23 	bl	8003200 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80039ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 80039bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 80039c2:	f043 0310 	orr.w	r3, r3, #16
 80039c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039ca:	4b19      	ldr	r3, [pc, #100]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 80039cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d8:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 80039da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039de:	4a14      	ldr	r2, [pc, #80]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039e8:	4b11      	ldr	r3, [pc, #68]	@ (8003a30 <HAL_UART_MspInit+0x164>)
 80039ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80039fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	2302      	movs	r3, #2
 8003a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a10:	2307      	movs	r3, #7
 8003a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4807      	ldr	r0, [pc, #28]	@ (8003a3c <HAL_UART_MspInit+0x170>)
 8003a1e:	f000 fcdf 	bl	80043e0 <HAL_GPIO_Init>
}
 8003a22:	bf00      	nop
 8003a24:	37e8      	adds	r7, #232	@ 0xe8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40007c00 	.word	0x40007c00
 8003a30:	58024400 	.word	0x58024400
 8003a34:	58021000 	.word	0x58021000
 8003a38:	40011000 	.word	0x40011000
 8003a3c:	58020000 	.word	0x58020000

08003a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <NMI_Handler+0x4>

08003a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <HardFault_Handler+0x4>

08003a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <MemManage_Handler+0x4>

08003a58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a5c:	bf00      	nop
 8003a5e:	e7fd      	b.n	8003a5c <BusFault_Handler+0x4>

08003a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a64:	bf00      	nop
 8003a66:	e7fd      	b.n	8003a64 <UsageFault_Handler+0x4>

08003a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a76:	b480      	push	{r7}
 8003a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a96:	f000 fad7 	bl	8004048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003aa4:	4802      	ldr	r0, [pc, #8]	@ (8003ab0 <TIM6_DAC_IRQHandler+0x10>)
 8003aa6:	f007 f84d 	bl	800ab44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2400076c 	.word	0x2400076c

08003ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return 1;
 8003ab8:	2301      	movs	r3, #1
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_kill>:

int _kill(int pid, int sig)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ace:	f00b fbad 	bl	800f22c <__errno>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2216      	movs	r2, #22
 8003ad6:	601a      	str	r2, [r3, #0]
  return -1;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <_exit>:

void _exit (int status)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ffe7 	bl	8003ac4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003af6:	bf00      	nop
 8003af8:	e7fd      	b.n	8003af6 <_exit+0x12>

08003afa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e00a      	b.n	8003b22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b0c:	f3af 8000 	nop.w
 8003b10:	4601      	mov	r1, r0
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	60ba      	str	r2, [r7, #8]
 8003b18:	b2ca      	uxtb	r2, r1
 8003b1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	dbf0      	blt.n	8003b0c <_read+0x12>
  }

  return len;
 8003b2a:	687b      	ldr	r3, [r7, #4]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b5c:	605a      	str	r2, [r3, #4]
  return 0;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <_isatty>:

int _isatty(int file)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b74:	2301      	movs	r3, #1
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ba4:	4a14      	ldr	r2, [pc, #80]	@ (8003bf8 <_sbrk+0x5c>)
 8003ba6:	4b15      	ldr	r3, [pc, #84]	@ (8003bfc <_sbrk+0x60>)
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bb0:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <_sbrk+0x64>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bb8:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <_sbrk+0x64>)
 8003bba:	4a12      	ldr	r2, [pc, #72]	@ (8003c04 <_sbrk+0x68>)
 8003bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bbe:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <_sbrk+0x64>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d207      	bcs.n	8003bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bcc:	f00b fb2e 	bl	800f22c <__errno>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	220c      	movs	r2, #12
 8003bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bda:	e009      	b.n	8003bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bdc:	4b08      	ldr	r3, [pc, #32]	@ (8003c00 <_sbrk+0x64>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003be2:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <_sbrk+0x64>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	4a05      	ldr	r2, [pc, #20]	@ (8003c00 <_sbrk+0x64>)
 8003bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	24050000 	.word	0x24050000
 8003bfc:	00000400 	.word	0x00000400
 8003c00:	240008e0 	.word	0x240008e0
 8003c04:	24000da8 	.word	0x24000da8

08003c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c0c:	4b32      	ldr	r3, [pc, #200]	@ (8003cd8 <SystemInit+0xd0>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c12:	4a31      	ldr	r2, [pc, #196]	@ (8003cd8 <SystemInit+0xd0>)
 8003c14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003cdc <SystemInit+0xd4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d807      	bhi.n	8003c38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c28:	4b2c      	ldr	r3, [pc, #176]	@ (8003cdc <SystemInit+0xd4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 030f 	bic.w	r3, r3, #15
 8003c30:	4a2a      	ldr	r2, [pc, #168]	@ (8003cdc <SystemInit+0xd4>)
 8003c32:	f043 0307 	orr.w	r3, r3, #7
 8003c36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c38:	4b29      	ldr	r3, [pc, #164]	@ (8003ce0 <SystemInit+0xd8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a28      	ldr	r2, [pc, #160]	@ (8003ce0 <SystemInit+0xd8>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c44:	4b26      	ldr	r3, [pc, #152]	@ (8003ce0 <SystemInit+0xd8>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003c4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ce0 <SystemInit+0xd8>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4924      	ldr	r1, [pc, #144]	@ (8003ce0 <SystemInit+0xd8>)
 8003c50:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <SystemInit+0xdc>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c56:	4b21      	ldr	r3, [pc, #132]	@ (8003cdc <SystemInit+0xd4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c62:	4b1e      	ldr	r3, [pc, #120]	@ (8003cdc <SystemInit+0xd4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 030f 	bic.w	r3, r3, #15
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <SystemInit+0xd4>)
 8003c6c:	f043 0307 	orr.w	r3, r3, #7
 8003c70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003c72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <SystemInit+0xd8>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003c78:	4b19      	ldr	r3, [pc, #100]	@ (8003ce0 <SystemInit+0xd8>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003c7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ce0 <SystemInit+0xd8>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003c84:	4b16      	ldr	r3, [pc, #88]	@ (8003ce0 <SystemInit+0xd8>)
 8003c86:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <SystemInit+0xe0>)
 8003c88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <SystemInit+0xd8>)
 8003c8c:	4a17      	ldr	r2, [pc, #92]	@ (8003cec <SystemInit+0xe4>)
 8003c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003c90:	4b13      	ldr	r3, [pc, #76]	@ (8003ce0 <SystemInit+0xd8>)
 8003c92:	4a17      	ldr	r2, [pc, #92]	@ (8003cf0 <SystemInit+0xe8>)
 8003c94:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003c96:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <SystemInit+0xd8>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003c9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <SystemInit+0xd8>)
 8003c9e:	4a14      	ldr	r2, [pc, #80]	@ (8003cf0 <SystemInit+0xe8>)
 8003ca0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce0 <SystemInit+0xd8>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <SystemInit+0xd8>)
 8003caa:	4a11      	ldr	r2, [pc, #68]	@ (8003cf0 <SystemInit+0xe8>)
 8003cac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003cae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce0 <SystemInit+0xd8>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce0 <SystemInit+0xd8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a09      	ldr	r2, [pc, #36]	@ (8003ce0 <SystemInit+0xd8>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003cc0:	4b07      	ldr	r3, [pc, #28]	@ (8003ce0 <SystemInit+0xd8>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <SystemInit+0xec>)
 8003cc8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003ccc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00
 8003cdc:	52002000 	.word	0x52002000
 8003ce0:	58024400 	.word	0x58024400
 8003ce4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ce8:	02020200 	.word	0x02020200
 8003cec:	01ff0000 	.word	0x01ff0000
 8003cf0:	01010280 	.word	0x01010280
 8003cf4:	52004000 	.word	0x52004000

08003cf8 <SensorManager_Init>:
//    {MS5607_Init, "MS5607"},
//    {GPS_Init, "ATGM336H"}
};


telemetry_init_status SensorManager_Init(void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
    printf("Sensors Initialization routine started.\n");
 8003cfe:	4826      	ldr	r0, [pc, #152]	@ (8003d98 <SensorManager_Init+0xa0>)
 8003d00:	f00b fa28 	bl	800f154 <puts>

    size_t num_sensors = sizeof(sensors) / sizeof(sensors[0]);
 8003d04:	2301      	movs	r3, #1
 8003d06:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	e024      	b.n	8003d60 <SensorManager_Init+0x68>
        int8_t status = sensors[i].init_function();
 8003d16:	4a21      	ldr	r2, [pc, #132]	@ (8003d9c <SensorManager_Init+0xa4>)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d1e:	4798      	blx	r3
 8003d20:	4603      	mov	r3, r0
 8003d22:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 8003d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <SensorManager_Init+0x4c>
            printf("%s initialization failed.\n", sensors[i].sensor_name);
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d9c <SensorManager_Init+0xa4>)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4619      	mov	r1, r3
 8003d38:	4819      	ldr	r0, [pc, #100]	@ (8003da0 <SensorManager_Init+0xa8>)
 8003d3a:	f00b f9a3 	bl	800f084 <iprintf>
            all_success = false;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]
 8003d42:	e00a      	b.n	8003d5a <SensorManager_Init+0x62>
        } else {
            printf("[%s] device found! Initialization succeeded.\n", sensors[i].sensor_name);
 8003d44:	4a15      	ldr	r2, [pc, #84]	@ (8003d9c <SensorManager_Init+0xa4>)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4814      	ldr	r0, [pc, #80]	@ (8003da4 <SensorManager_Init+0xac>)
 8003d52:	f00b f997 	bl	800f084 <iprintf>
            any_success = true;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3d6      	bcc.n	8003d16 <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d004      	beq.n	8003d78 <SensorManager_Init+0x80>
        printf("All sensors initialized successfully.\n");
 8003d6e:	480e      	ldr	r0, [pc, #56]	@ (8003da8 <SensorManager_Init+0xb0>)
 8003d70:	f00b f9f0 	bl	800f154 <puts>
        return TELEMETRY_INIT_SUCCESS;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e00b      	b.n	8003d90 <SensorManager_Init+0x98>
    } else if (any_success) {
 8003d78:	7bbb      	ldrb	r3, [r7, #14]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d004      	beq.n	8003d88 <SensorManager_Init+0x90>
        printf("Partial initialization success.\n");
 8003d7e:	480b      	ldr	r0, [pc, #44]	@ (8003dac <SensorManager_Init+0xb4>)
 8003d80:	f00b f9e8 	bl	800f154 <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e003      	b.n	8003d90 <SensorManager_Init+0x98>
    } else {
        printf("All sensors initialization failed.\n");
 8003d88:	4809      	ldr	r0, [pc, #36]	@ (8003db0 <SensorManager_Init+0xb8>)
 8003d8a:	f00b f9e3 	bl	800f154 <puts>
        return TELEMETRY_INIT_FAILURE;
 8003d8e:	2302      	movs	r3, #2
    }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	08011d3c 	.word	0x08011d3c
 8003d9c:	2400000c 	.word	0x2400000c
 8003da0:	08011d64 	.word	0x08011d64
 8003da4:	08011d80 	.word	0x08011d80
 8003da8:	08011db0 	.word	0x08011db0
 8003dac:	08011dd8 	.word	0x08011dd8
 8003db0:	08011df8 	.word	0x08011df8

08003db4 <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b0a9      	sub	sp, #164	@ 0xa4
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    // Update data from each sensor
//	telemetry.bmi323_data = bmi323_data_poll();
	telemetry.bno055_data = bno_read_fusion_data();
 8003dbe:	4c08      	ldr	r4, [pc, #32]	@ (8003de0 <SensorManager_UpdateData+0x2c>)
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe faa4 	bl	8002310 <bno_read_fusion_data>
 8003dc8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8003dcc:	4639      	mov	r1, r7
 8003dce:	2298      	movs	r2, #152	@ 0x98
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f00b fa58 	bl	800f286 <memcpy>

    //FOR VERSION 2 OF ARGUS
//    ASM330LHH_ReadData(&data->asm330lhh_data);
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);

}
 8003dd6:	bf00      	nop
 8003dd8:	37a4      	adds	r7, #164	@ 0xa4
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd90      	pop	{r4, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	240008e8 	.word	0x240008e8

08003de4 <delay_us_func>:

void delay_us_func(uint32_t period)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8003dec:	e008      	b.n	8003e00 <delay_us_func+0x1c>
	{
		for(i = 0; i < 96; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e002      	b.n	8003dfa <delay_us_func+0x16>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b5f      	cmp	r3, #95	@ 0x5f
 8003dfe:	d9f9      	bls.n	8003df4 <delay_us_func+0x10>
	while(period--)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	1e5a      	subs	r2, r3, #1
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f1      	bne.n	8003dee <delay_us_func+0xa>
		{
			;
		}
	}
}
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a06      	ldr	r2, [pc, #24]	@ (8003e40 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d104      	bne.n	8003e34 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        msTicks++; // Increment millisecond counter
 8003e2a:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	4a04      	ldr	r2, [pc, #16]	@ (8003e44 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003e32:	6013      	str	r3, [r2, #0]
    }
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40001000 	.word	0x40001000
 8003e44:	24000c40 	.word	0x24000c40

08003e48 <Get_Current_Time>:
uint32_t Get_Timestamp(void)
{
    return msTicks;
}

void Get_Current_Time(char* buffer) {
 8003e48:	b5b0      	push	{r4, r5, r7, lr}
 8003e4a:	b08e      	sub	sp, #56	@ 0x38
 8003e4c:	af06      	add	r7, sp, #24
 8003e4e:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	2200      	movs	r2, #0
 8003e56:	4619      	mov	r1, r3
 8003e58:	4811      	ldr	r0, [pc, #68]	@ (8003ea0 <Get_Current_Time+0x58>)
 8003e5a:	f004 ff29 	bl	8008cb0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003e5e:	f107 0308 	add.w	r3, r7, #8
 8003e62:	2200      	movs	r2, #0
 8003e64:	4619      	mov	r1, r3
 8003e66:	480e      	ldr	r0, [pc, #56]	@ (8003ea0 <Get_Current_Time+0x58>)
 8003e68:	f005 f806 	bl	8008e78 <HAL_RTC_GetDate>

    snprintf(buffer, 30, "%02d-%02d-%02d %02d:%02d:%02d",
             sDate.Date, sDate.Month, 2000 + sDate.Year,
 8003e6c:	7abb      	ldrb	r3, [r7, #10]
    snprintf(buffer, 30, "%02d-%02d-%02d %02d:%02d:%02d",
 8003e6e:	461d      	mov	r5, r3
             sDate.Date, sDate.Month, 2000 + sDate.Year,
 8003e70:	7a7b      	ldrb	r3, [r7, #9]
    snprintf(buffer, 30, "%02d-%02d-%02d %02d:%02d:%02d",
 8003e72:	461a      	mov	r2, r3
             sDate.Date, sDate.Month, 2000 + sDate.Year,
 8003e74:	7afb      	ldrb	r3, [r7, #11]
    snprintf(buffer, 30, "%02d-%02d-%02d %02d:%02d:%02d",
 8003e76:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
             sTime.Hours, sTime.Minutes, sTime.Seconds);
 8003e7a:	7b39      	ldrb	r1, [r7, #12]
 8003e7c:	7b78      	ldrb	r0, [r7, #13]
 8003e7e:	7bbc      	ldrb	r4, [r7, #14]
    snprintf(buffer, 30, "%02d-%02d-%02d %02d:%02d:%02d",
 8003e80:	9404      	str	r4, [sp, #16]
 8003e82:	9003      	str	r0, [sp, #12]
 8003e84:	9102      	str	r1, [sp, #8]
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	9200      	str	r2, [sp, #0]
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	4a05      	ldr	r2, [pc, #20]	@ (8003ea4 <Get_Current_Time+0x5c>)
 8003e8e:	211e      	movs	r1, #30
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f00a f969 	bl	800e168 <sniprintf>
}
 8003e96:	bf00      	nop
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	24000534 	.word	0x24000534
 8003ea4:	08011e1c 	.word	0x08011e1c

08003ea8 <TestTelemetry>:


void TestTelemetry(){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	@ 0x28
 8003eac:	af00      	add	r7, sp, #0
    char timeBuffer[30];

	//HAL_TIM_Base_Start_IT(&htim6);
	for(int i = 0; i < 10000 ; i++){
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb2:	e01b      	b.n	8003eec <TestTelemetry+0x44>
        // Print timestamp
        //printf("Timestamp: %lu ms\n", Get_Timestamp());


        Get_Current_Time(timeBuffer);
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ffc6 	bl	8003e48 <Get_Current_Time>
        printf("Current Time: %s\n", timeBuffer);
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	480f      	ldr	r0, [pc, #60]	@ (8003f00 <TestTelemetry+0x58>)
 8003ec2:	f00b f8df 	bl	800f084 <iprintf>

        printf("// --------------------------------------------- // \n");
 8003ec6:	480f      	ldr	r0, [pc, #60]	@ (8003f04 <TestTelemetry+0x5c>)
 8003ec8:	f00b f944 	bl	800f154 <puts>

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 8003ecc:	480e      	ldr	r0, [pc, #56]	@ (8003f08 <TestTelemetry+0x60>)
 8003ece:	f7ff ff71 	bl	8003db4 <SensorManager_UpdateData>

	// Sensor Data Print
//	bmi323_print_sensor_data(&telemetry.bmi323_data);
	bno055_print_fusion_data(&telemetry.bno055_data);
 8003ed2:	480e      	ldr	r0, [pc, #56]	@ (8003f0c <TestTelemetry+0x64>)
 8003ed4:	f7fe fb8e 	bl	80025f4 <bno055_print_fusion_data>
//	ms5607_print_barometer_data(&telemetry.ms5607_data);
//	bme680_print_barometer_data(&telemetry.bme680_data);
//	gps_print_positionning_data(&telemetry.gps_data);

	printf("// --------------------------------------------- // \n");
 8003ed8:	480a      	ldr	r0, [pc, #40]	@ (8003f04 <TestTelemetry+0x5c>)
 8003eda:	f00b f93b 	bl	800f154 <puts>

	//DELAY BETWEEN READINGS TO DESIGN CORRECTLY
//    HAL_Delay(150);
    delay_us_func(50000);  //50 ms
 8003ede:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ee2:	f7ff ff7f 	bl	8003de4 <delay_us_func>
	for(int i = 0; i < 10000 ; i++){
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	3301      	adds	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	ddde      	ble.n	8003eb4 <TestTelemetry+0xc>
//    delay_us_func(100000); //100 ms
//    delay_us_func(200000); //200 ms
//      delay_us_func(1000000); //1 s
    	}
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	3728      	adds	r7, #40	@ 0x28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	08011e3c 	.word	0x08011e3c
 8003f04:	08011e50 	.word	0x08011e50
 8003f08:	240008e8 	.word	0x240008e8
 8003f0c:	24000928 	.word	0x24000928

08003f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f14:	f7ff fe78 	bl	8003c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f18:	480c      	ldr	r0, [pc, #48]	@ (8003f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f1a:	490d      	ldr	r1, [pc, #52]	@ (8003f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f20:	e002      	b.n	8003f28 <LoopCopyDataInit>

08003f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f26:	3304      	adds	r3, #4

08003f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f2c:	d3f9      	bcc.n	8003f22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f30:	4c0a      	ldr	r4, [pc, #40]	@ (8003f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f34:	e001      	b.n	8003f3a <LoopFillZerobss>

08003f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f38:	3204      	adds	r2, #4

08003f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f3c:	d3fb      	bcc.n	8003f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f3e:	f00b f97b 	bl	800f238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f42:	f7fe fc7c 	bl	800283e <main>
  bx  lr
 8003f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f48:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003f4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f50:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8003f54:	0801230c 	.word	0x0801230c
  ldr r2, =_sbss
 8003f58:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003f5c:	24000da8 	.word	0x24000da8

08003f60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f60:	e7fe      	b.n	8003f60 <ADC3_IRQHandler>
	...

08003f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f6a:	2003      	movs	r0, #3
 8003f6c:	f000 f980 	bl	8004270 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f70:	f001 ffc2 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b15      	ldr	r3, [pc, #84]	@ (8003fcc <HAL_Init+0x68>)
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	4913      	ldr	r1, [pc, #76]	@ (8003fd0 <HAL_Init+0x6c>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	f003 031f 	and.w	r3, r3, #31
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <HAL_Init+0x68>)
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd0 <HAL_Init+0x6c>)
 8003f98:	5cd3      	ldrb	r3, [r2, r3]
 8003f9a:	f003 031f 	and.w	r3, r3, #31
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd4 <HAL_Init+0x70>)
 8003fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd8 <HAL_Init+0x74>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f000 f814 	bl	8003fdc <HAL_InitTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e002      	b.n	8003fc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fbe:	f7ff f925 	bl	800320c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	08011e88 	.word	0x08011e88
 8003fd4:	24000008 	.word	0x24000008
 8003fd8:	24000004 	.word	0x24000004

08003fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003fe4:	4b15      	ldr	r3, [pc, #84]	@ (800403c <HAL_InitTick+0x60>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e021      	b.n	8004034 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ff0:	4b13      	ldr	r3, [pc, #76]	@ (8004040 <HAL_InitTick+0x64>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b11      	ldr	r3, [pc, #68]	@ (800403c <HAL_InitTick+0x60>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004002:	fbb2 f3f3 	udiv	r3, r2, r3
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f965 	bl	80042d6 <HAL_SYSTICK_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e00e      	b.n	8004034 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b0f      	cmp	r3, #15
 800401a:	d80a      	bhi.n	8004032 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800401c:	2200      	movs	r2, #0
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004024:	f000 f92f 	bl	8004286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004028:	4a06      	ldr	r2, [pc, #24]	@ (8004044 <HAL_InitTick+0x68>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e000      	b.n	8004034 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	24000018 	.word	0x24000018
 8004040:	24000004 	.word	0x24000004
 8004044:	24000014 	.word	0x24000014

08004048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800404c:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <HAL_IncTick+0x20>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	4b06      	ldr	r3, [pc, #24]	@ (800406c <HAL_IncTick+0x24>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4413      	add	r3, r2
 8004058:	4a04      	ldr	r2, [pc, #16]	@ (800406c <HAL_IncTick+0x24>)
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	24000018 	.word	0x24000018
 800406c:	24000c44 	.word	0x24000c44

08004070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return uwTick;
 8004074:	4b03      	ldr	r3, [pc, #12]	@ (8004084 <HAL_GetTick+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	24000c44 	.word	0x24000c44

08004088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004090:	f7ff ffee 	bl	8004070 <HAL_GetTick>
 8004094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040a0:	d005      	beq.n	80040ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040a2:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <HAL_Delay+0x44>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040ae:	bf00      	nop
 80040b0:	f7ff ffde 	bl	8004070 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d8f7      	bhi.n	80040b0 <HAL_Delay+0x28>
  {
  }
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	24000018 	.word	0x24000018

080040d0 <__NVIC_SetPriorityGrouping>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <__NVIC_SetPriorityGrouping+0x40>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040ec:	4013      	ands	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040f8:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <__NVIC_SetPriorityGrouping+0x44>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fe:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <__NVIC_SetPriorityGrouping+0x40>)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	60d3      	str	r3, [r2, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	e000ed00 	.word	0xe000ed00
 8004114:	05fa0000 	.word	0x05fa0000

08004118 <__NVIC_GetPriorityGrouping>:
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800411c:	4b04      	ldr	r3, [pc, #16]	@ (8004130 <__NVIC_GetPriorityGrouping+0x18>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0a1b      	lsrs	r3, r3, #8
 8004122:	f003 0307 	and.w	r3, r3, #7
}
 8004126:	4618      	mov	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <__NVIC_EnableIRQ>:
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800413e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004142:	2b00      	cmp	r3, #0
 8004144:	db0b      	blt.n	800415e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	4907      	ldr	r1, [pc, #28]	@ (800416c <__NVIC_EnableIRQ+0x38>)
 800414e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2001      	movs	r0, #1
 8004156:	fa00 f202 	lsl.w	r2, r0, r2
 800415a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e000e100 	.word	0xe000e100

08004170 <__NVIC_SetPriority>:
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800417c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004180:	2b00      	cmp	r3, #0
 8004182:	db0a      	blt.n	800419a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	490c      	ldr	r1, [pc, #48]	@ (80041bc <__NVIC_SetPriority+0x4c>)
 800418a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	440b      	add	r3, r1
 8004194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004198:	e00a      	b.n	80041b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4908      	ldr	r1, [pc, #32]	@ (80041c0 <__NVIC_SetPriority+0x50>)
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	3b04      	subs	r3, #4
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	440b      	add	r3, r1
 80041ae:	761a      	strb	r2, [r3, #24]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <NVIC_EncodePriority>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	b089      	sub	sp, #36	@ 0x24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f1c3 0307 	rsb	r3, r3, #7
 80041de:	2b04      	cmp	r3, #4
 80041e0:	bf28      	it	cs
 80041e2:	2304      	movcs	r3, #4
 80041e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d902      	bls.n	80041f4 <NVIC_EncodePriority+0x30>
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3b03      	subs	r3, #3
 80041f2:	e000      	b.n	80041f6 <NVIC_EncodePriority+0x32>
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43da      	mvns	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	401a      	ands	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800420c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43d9      	mvns	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800421c:	4313      	orrs	r3, r2
}
 800421e:	4618      	mov	r0, r3
 8004220:	3724      	adds	r7, #36	@ 0x24
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <SysTick_Config>:
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800423c:	d301      	bcc.n	8004242 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800423e:	2301      	movs	r3, #1
 8004240:	e00f      	b.n	8004262 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004242:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <SysTick_Config+0x40>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3b01      	subs	r3, #1
 8004248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800424a:	210f      	movs	r1, #15
 800424c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004250:	f7ff ff8e 	bl	8004170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <SysTick_Config+0x40>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800425a:	4b04      	ldr	r3, [pc, #16]	@ (800426c <SysTick_Config+0x40>)
 800425c:	2207      	movs	r2, #7
 800425e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	e000e010 	.word	0xe000e010

08004270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff29 	bl	80040d0 <__NVIC_SetPriorityGrouping>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	4603      	mov	r3, r0
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004294:	f7ff ff40 	bl	8004118 <__NVIC_GetPriorityGrouping>
 8004298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f7ff ff90 	bl	80041c4 <NVIC_EncodePriority>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff5f 	bl	8004170 <__NVIC_SetPriority>
}
 80042b2:	bf00      	nop
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff33 	bl	8004134 <__NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ffa4 	bl	800422c <SysTick_Config>
 80042e4:	4603      	mov	r3, r0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80042f4:	f3bf 8f5f 	dmb	sy
}
 80042f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80042fa:	4b07      	ldr	r3, [pc, #28]	@ (8004318 <HAL_MPU_Disable+0x28>)
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	4a06      	ldr	r2, [pc, #24]	@ (8004318 <HAL_MPU_Disable+0x28>)
 8004300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004304:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004306:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_MPU_Disable+0x2c>)
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000ed00 	.word	0xe000ed00
 800431c:	e000ed90 	.word	0xe000ed90

08004320 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004328:	4a0b      	ldr	r2, [pc, #44]	@ (8004358 <HAL_MPU_Enable+0x38>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <HAL_MPU_Enable+0x3c>)
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	4a09      	ldr	r2, [pc, #36]	@ (800435c <HAL_MPU_Enable+0x3c>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800433e:	f3bf 8f4f 	dsb	sy
}
 8004342:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004344:	f3bf 8f6f 	isb	sy
}
 8004348:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	e000ed90 	.word	0xe000ed90
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	785a      	ldrb	r2, [r3, #1]
 800436c:	4b1b      	ldr	r3, [pc, #108]	@ (80043dc <HAL_MPU_ConfigRegion+0x7c>)
 800436e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004370:	4b1a      	ldr	r3, [pc, #104]	@ (80043dc <HAL_MPU_ConfigRegion+0x7c>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	4a19      	ldr	r2, [pc, #100]	@ (80043dc <HAL_MPU_ConfigRegion+0x7c>)
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800437c:	4a17      	ldr	r2, [pc, #92]	@ (80043dc <HAL_MPU_ConfigRegion+0x7c>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7b1b      	ldrb	r3, [r3, #12]
 8004388:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	7adb      	ldrb	r3, [r3, #11]
 800438e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004390:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	7a9b      	ldrb	r3, [r3, #10]
 8004396:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004398:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7b5b      	ldrb	r3, [r3, #13]
 800439e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80043a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	7b9b      	ldrb	r3, [r3, #14]
 80043a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80043a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7bdb      	ldrb	r3, [r3, #15]
 80043ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80043b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	7a5b      	ldrb	r3, [r3, #9]
 80043b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80043b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	7a1b      	ldrb	r3, [r3, #8]
 80043be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80043c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80043c8:	4a04      	ldr	r2, [pc, #16]	@ (80043dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80043ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80043cc:	6113      	str	r3, [r2, #16]
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000ed90 	.word	0xe000ed90

080043e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b089      	sub	sp, #36	@ 0x24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80043ee:	4b86      	ldr	r3, [pc, #536]	@ (8004608 <HAL_GPIO_Init+0x228>)
 80043f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043f2:	e18c      	b.n	800470e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 817e 	beq.w	8004708 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d005      	beq.n	8004424 <HAL_GPIO_Init+0x44>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d130      	bne.n	8004486 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800445a:	2201      	movs	r2, #1
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0201 	and.w	r2, r3, #1
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b03      	cmp	r3, #3
 8004490:	d017      	beq.n	80044c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	2203      	movs	r2, #3
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d123      	bne.n	8004516 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	08da      	lsrs	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3208      	adds	r2, #8
 80044d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	220f      	movs	r2, #15
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	08da      	lsrs	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3208      	adds	r2, #8
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	2203      	movs	r2, #3
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 0203 	and.w	r2, r3, #3
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80d8 	beq.w	8004708 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004558:	4b2c      	ldr	r3, [pc, #176]	@ (800460c <HAL_GPIO_Init+0x22c>)
 800455a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800455e:	4a2b      	ldr	r2, [pc, #172]	@ (800460c <HAL_GPIO_Init+0x22c>)
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004568:	4b28      	ldr	r3, [pc, #160]	@ (800460c <HAL_GPIO_Init+0x22c>)
 800456a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004576:	4a26      	ldr	r2, [pc, #152]	@ (8004610 <HAL_GPIO_Init+0x230>)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	3302      	adds	r3, #2
 800457e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	220f      	movs	r2, #15
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <HAL_GPIO_Init+0x234>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d04a      	beq.n	8004638 <HAL_GPIO_Init+0x258>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <HAL_GPIO_Init+0x238>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d02b      	beq.n	8004602 <HAL_GPIO_Init+0x222>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1b      	ldr	r2, [pc, #108]	@ (800461c <HAL_GPIO_Init+0x23c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d025      	beq.n	80045fe <HAL_GPIO_Init+0x21e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004620 <HAL_GPIO_Init+0x240>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01f      	beq.n	80045fa <HAL_GPIO_Init+0x21a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a19      	ldr	r2, [pc, #100]	@ (8004624 <HAL_GPIO_Init+0x244>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d019      	beq.n	80045f6 <HAL_GPIO_Init+0x216>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <HAL_GPIO_Init+0x248>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <HAL_GPIO_Init+0x212>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a17      	ldr	r2, [pc, #92]	@ (800462c <HAL_GPIO_Init+0x24c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00d      	beq.n	80045ee <HAL_GPIO_Init+0x20e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a16      	ldr	r2, [pc, #88]	@ (8004630 <HAL_GPIO_Init+0x250>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <HAL_GPIO_Init+0x20a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a15      	ldr	r2, [pc, #84]	@ (8004634 <HAL_GPIO_Init+0x254>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_GPIO_Init+0x206>
 80045e2:	2309      	movs	r3, #9
 80045e4:	e029      	b.n	800463a <HAL_GPIO_Init+0x25a>
 80045e6:	230a      	movs	r3, #10
 80045e8:	e027      	b.n	800463a <HAL_GPIO_Init+0x25a>
 80045ea:	2307      	movs	r3, #7
 80045ec:	e025      	b.n	800463a <HAL_GPIO_Init+0x25a>
 80045ee:	2306      	movs	r3, #6
 80045f0:	e023      	b.n	800463a <HAL_GPIO_Init+0x25a>
 80045f2:	2305      	movs	r3, #5
 80045f4:	e021      	b.n	800463a <HAL_GPIO_Init+0x25a>
 80045f6:	2304      	movs	r3, #4
 80045f8:	e01f      	b.n	800463a <HAL_GPIO_Init+0x25a>
 80045fa:	2303      	movs	r3, #3
 80045fc:	e01d      	b.n	800463a <HAL_GPIO_Init+0x25a>
 80045fe:	2302      	movs	r3, #2
 8004600:	e01b      	b.n	800463a <HAL_GPIO_Init+0x25a>
 8004602:	2301      	movs	r3, #1
 8004604:	e019      	b.n	800463a <HAL_GPIO_Init+0x25a>
 8004606:	bf00      	nop
 8004608:	58000080 	.word	0x58000080
 800460c:	58024400 	.word	0x58024400
 8004610:	58000400 	.word	0x58000400
 8004614:	58020000 	.word	0x58020000
 8004618:	58020400 	.word	0x58020400
 800461c:	58020800 	.word	0x58020800
 8004620:	58020c00 	.word	0x58020c00
 8004624:	58021000 	.word	0x58021000
 8004628:	58021400 	.word	0x58021400
 800462c:	58021800 	.word	0x58021800
 8004630:	58021c00 	.word	0x58021c00
 8004634:	58022400 	.word	0x58022400
 8004638:	2300      	movs	r3, #0
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	f002 0203 	and.w	r2, r2, #3
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	4093      	lsls	r3, r2
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800464a:	4938      	ldr	r1, [pc, #224]	@ (800472c <HAL_GPIO_Init+0x34c>)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	3302      	adds	r3, #2
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800467e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	3301      	adds	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	f47f ae6b 	bne.w	80043f4 <HAL_GPIO_Init+0x14>
  }
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	3724      	adds	r7, #36	@ 0x24
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	58000400 	.word	0x58000400

08004730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
 800474c:	e001      	b.n	8004752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
 800476c:	4613      	mov	r3, r2
 800476e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004770:	787b      	ldrb	r3, [r7, #1]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004776:	887a      	ldrh	r2, [r7, #2]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800477c:	e003      	b.n	8004786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800477e:	887b      	ldrh	r3, [r7, #2]
 8004780:	041a      	lsls	r2, r3, #16
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	619a      	str	r2, [r3, #24]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e08b      	b.n	80048be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fe fd40 	bl	8003240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2224      	movs	r2, #36	@ 0x24
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d107      	bne.n	800480e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	e006      	b.n	800481c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800481a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d108      	bne.n	8004836 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	e007      	b.n	8004846 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004844:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <HAL_I2C_Init+0x134>)
 8004852:	430b      	orrs	r3, r1
 8004854:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004864:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	02008000 	.word	0x02008000

080048cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	461a      	mov	r2, r3
 80048d8:	460b      	mov	r3, r1
 80048da:	817b      	strh	r3, [r7, #10]
 80048dc:	4613      	mov	r3, r2
 80048de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	f040 80fd 	bne.w	8004ae8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_I2C_Master_Transmit+0x30>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e0f6      	b.n	8004aea <HAL_I2C_Master_Transmit+0x21e>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004904:	f7ff fbb4 	bl	8004070 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	2319      	movs	r3, #25
 8004910:	2201      	movs	r2, #1
 8004912:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fa0a 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0e1      	b.n	8004aea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2221      	movs	r2, #33	@ 0x21
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2210      	movs	r2, #16
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	893a      	ldrh	r2, [r7, #8]
 8004946:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	2bff      	cmp	r3, #255	@ 0xff
 8004956:	d906      	bls.n	8004966 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	22ff      	movs	r2, #255	@ 0xff
 800495c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800495e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e007      	b.n	8004976 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004970:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004974:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	d024      	beq.n	80049c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	8979      	ldrh	r1, [r7, #10]
 80049ba:	4b4e      	ldr	r3, [pc, #312]	@ (8004af4 <HAL_I2C_Master_Transmit+0x228>)
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fc05 	bl	80051d0 <I2C_TransferConfig>
 80049c6:	e066      	b.n	8004a96 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	8979      	ldrh	r1, [r7, #10]
 80049d0:	4b48      	ldr	r3, [pc, #288]	@ (8004af4 <HAL_I2C_Master_Transmit+0x228>)
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fbfa 	bl	80051d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80049dc:	e05b      	b.n	8004a96 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	6a39      	ldr	r1, [r7, #32]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f9fd 	bl	8004de2 <I2C_WaitOnTXISFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e07b      	b.n	8004aea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d034      	beq.n	8004a96 <HAL_I2C_Master_Transmit+0x1ca>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d130      	bne.n	8004a96 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2180      	movs	r1, #128	@ 0x80
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f976 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e04d      	b.n	8004aea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2bff      	cmp	r3, #255	@ 0xff
 8004a56:	d90e      	bls.n	8004a76 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	22ff      	movs	r2, #255	@ 0xff
 8004a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	8979      	ldrh	r1, [r7, #10]
 8004a66:	2300      	movs	r3, #0
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fbae 	bl	80051d0 <I2C_TransferConfig>
 8004a74:	e00f      	b.n	8004a96 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	8979      	ldrh	r1, [r7, #10]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fb9d 	bl	80051d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d19e      	bne.n	80049de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	6a39      	ldr	r1, [r7, #32]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f9e3 	bl	8004e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e01a      	b.n	8004aea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6859      	ldr	r1, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <HAL_I2C_Master_Transmit+0x22c>)
 8004ac8:	400b      	ands	r3, r1
 8004aca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e000      	b.n	8004aea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
  }
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	80002000 	.word	0x80002000
 8004af8:	fe00e800 	.word	0xfe00e800

08004afc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	461a      	mov	r2, r3
 8004b08:	460b      	mov	r3, r1
 8004b0a:	817b      	strh	r3, [r7, #10]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	f040 80db 	bne.w	8004cd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_I2C_Master_Receive+0x30>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0d4      	b.n	8004cd6 <HAL_I2C_Master_Receive+0x1da>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b34:	f7ff fa9c 	bl	8004070 <HAL_GetTick>
 8004b38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	2319      	movs	r3, #25
 8004b40:	2201      	movs	r2, #1
 8004b42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f8f2 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e0bf      	b.n	8004cd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2222      	movs	r2, #34	@ 0x22
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2210      	movs	r2, #16
 8004b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	893a      	ldrh	r2, [r7, #8]
 8004b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2bff      	cmp	r3, #255	@ 0xff
 8004b86:	d90e      	bls.n	8004ba6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	22ff      	movs	r2, #255	@ 0xff
 8004b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	8979      	ldrh	r1, [r7, #10]
 8004b96:	4b52      	ldr	r3, [pc, #328]	@ (8004ce0 <HAL_I2C_Master_Receive+0x1e4>)
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fb16 	bl	80051d0 <I2C_TransferConfig>
 8004ba4:	e06d      	b.n	8004c82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	8979      	ldrh	r1, [r7, #10]
 8004bb8:	4b49      	ldr	r3, [pc, #292]	@ (8004ce0 <HAL_I2C_Master_Receive+0x1e4>)
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fb05 	bl	80051d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004bc6:	e05c      	b.n	8004c82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	6a39      	ldr	r1, [r7, #32]
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 f993 	bl	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e07c      	b.n	8004cd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d034      	beq.n	8004c82 <HAL_I2C_Master_Receive+0x186>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d130      	bne.n	8004c82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	2200      	movs	r2, #0
 8004c28:	2180      	movs	r1, #128	@ 0x80
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f880 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e04d      	b.n	8004cd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2bff      	cmp	r3, #255	@ 0xff
 8004c42:	d90e      	bls.n	8004c62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	22ff      	movs	r2, #255	@ 0xff
 8004c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	8979      	ldrh	r1, [r7, #10]
 8004c52:	2300      	movs	r3, #0
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fab8 	bl	80051d0 <I2C_TransferConfig>
 8004c60:	e00f      	b.n	8004c82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	8979      	ldrh	r1, [r7, #10]
 8004c74:	2300      	movs	r3, #0
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 faa7 	bl	80051d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d19d      	bne.n	8004bc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	6a39      	ldr	r1, [r7, #32]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f8ed 	bl	8004e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e01a      	b.n	8004cd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <HAL_I2C_Master_Receive+0x1e8>)
 8004cb4:	400b      	ands	r3, r1
 8004cb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	80002400 	.word	0x80002400
 8004ce4:	fe00e800 	.word	0xfe00e800

08004ce8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d103      	bne.n	8004d06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d007      	beq.n	8004d24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	619a      	str	r2, [r3, #24]
  }
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d40:	e03b      	b.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f962 	bl	8005010 <I2C_IsErrorOccurred>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e041      	b.n	8004dda <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d5c:	d02d      	beq.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5e:	f7ff f987 	bl	8004070 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d302      	bcc.n	8004d74 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d122      	bne.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d113      	bne.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	f043 0220 	orr.w	r2, r3, #32
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e00f      	b.n	8004dda <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d0b4      	beq.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dee:	e033      	b.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f90b 	bl	8005010 <I2C_IsErrorOccurred>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e031      	b.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e0a:	d025      	beq.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7ff f930 	bl	8004070 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11a      	bne.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d013      	beq.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e007      	b.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d1c4      	bne.n	8004df0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e7c:	e02f      	b.n	8004ede <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f8c4 	bl	8005010 <I2C_IsErrorOccurred>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e02d      	b.n	8004eee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7ff f8ed 	bl	8004070 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d11a      	bne.n	8004ede <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d013      	beq.n	8004ede <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e007      	b.n	8004eee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d1c8      	bne.n	8004e7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004f08:	e071      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f87e 	bl	8005010 <I2C_IsErrorOccurred>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d13b      	bne.n	8004fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d138      	bne.n	8004fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d105      	bne.n	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d121      	bne.n	8004f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2210      	movs	r2, #16
 8004f60:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2204      	movs	r2, #4
 8004f66:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6859      	ldr	r1, [r3, #4]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b24      	ldr	r3, [pc, #144]	@ (800500c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004f7c:	400b      	ands	r3, r1
 8004f7e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	75fb      	strb	r3, [r7, #23]
 8004f9c:	e002      	b.n	8004fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004fa4:	f7ff f864 	bl	8004070 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d302      	bcc.n	8004fba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d119      	bne.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d116      	bne.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d00f      	beq.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f043 0220 	orr.w	r2, r3, #32
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d002      	beq.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d083      	beq.n	8004f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005002:	7dfb      	ldrb	r3, [r7, #23]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	fe00e800 	.word	0xfe00e800

08005010 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	@ 0x28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b00      	cmp	r3, #0
 800503a:	d068      	beq.n	800510e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2210      	movs	r2, #16
 8005042:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005044:	e049      	b.n	80050da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800504c:	d045      	beq.n	80050da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7ff f80f 	bl	8004070 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <I2C_IsErrorOccurred+0x54>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d13a      	bne.n	80050da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800506e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005076:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005086:	d121      	bne.n	80050cc <I2C_IsErrorOccurred+0xbc>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800508e:	d01d      	beq.n	80050cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	2b20      	cmp	r3, #32
 8005094:	d01a      	beq.n	80050cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80050a6:	f7fe ffe3 	bl	8004070 <HAL_GetTick>
 80050aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ac:	e00e      	b.n	80050cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80050ae:	f7fe ffdf 	bl	8004070 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b19      	cmp	r3, #25
 80050ba:	d907      	bls.n	80050cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	f043 0320 	orr.w	r3, r3, #32
 80050c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80050ca:	e006      	b.n	80050da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d1e9      	bne.n	80050ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d003      	beq.n	80050f0 <I2C_IsErrorOccurred+0xe0>
 80050e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0aa      	beq.n	8005046 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d103      	bne.n	8005100 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2220      	movs	r2, #32
 80050fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005130:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f043 0308 	orr.w	r3, r3, #8
 8005148:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005152:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	f043 0302 	orr.w	r3, r3, #2
 800516a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005174:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800517c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01c      	beq.n	80051be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff fdaf 	bl	8004ce8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b0d      	ldr	r3, [pc, #52]	@ (80051cc <I2C_IsErrorOccurred+0x1bc>)
 8005196:	400b      	ands	r3, r1
 8005198:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80051be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3728      	adds	r7, #40	@ 0x28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	fe00e800 	.word	0xfe00e800

080051d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	817b      	strh	r3, [r7, #10]
 80051de:	4613      	mov	r3, r2
 80051e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051e2:	897b      	ldrh	r3, [r7, #10]
 80051e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051e8:	7a7b      	ldrb	r3, [r7, #9]
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	0d5b      	lsrs	r3, r3, #21
 800520a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800520e:	4b08      	ldr	r3, [pc, #32]	@ (8005230 <I2C_TransferConfig+0x60>)
 8005210:	430b      	orrs	r3, r1
 8005212:	43db      	mvns	r3, r3
 8005214:	ea02 0103 	and.w	r1, r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	03ff63ff 	.word	0x03ff63ff

08005234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b20      	cmp	r3, #32
 8005248:	d138      	bne.n	80052bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005254:	2302      	movs	r3, #2
 8005256:	e032      	b.n	80052be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	@ 0x24
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d139      	bne.n	8005354 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e033      	b.n	8005356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2224      	movs	r2, #36	@ 0x24
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800531c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	e000      	b.n	8005356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005354:	2302      	movs	r3, #2
  }
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800536c:	4b19      	ldr	r3, [pc, #100]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b04      	cmp	r3, #4
 8005376:	d00a      	beq.n	800538e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005378:	4b16      	ldr	r3, [pc, #88]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d001      	beq.n	800538a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e01f      	b.n	80053ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e01d      	b.n	80053ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800538e:	4b11      	ldr	r3, [pc, #68]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 0207 	bic.w	r2, r3, #7
 8005396:	490f      	ldr	r1, [pc, #60]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4313      	orrs	r3, r2
 800539c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800539e:	f7fe fe67 	bl	8004070 <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053a4:	e009      	b.n	80053ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053a6:	f7fe fe63 	bl	8004070 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053b4:	d901      	bls.n	80053ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e007      	b.n	80053ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053ba:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053c6:	d1ee      	bne.n	80053a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	58024800 	.word	0x58024800

080053d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08c      	sub	sp, #48	@ 0x30
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e3c8      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 8087 	beq.w	8005506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f8:	4b88      	ldr	r3, [pc, #544]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005402:	4b86      	ldr	r3, [pc, #536]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540a:	2b10      	cmp	r3, #16
 800540c:	d007      	beq.n	800541e <HAL_RCC_OscConfig+0x46>
 800540e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005410:	2b18      	cmp	r3, #24
 8005412:	d110      	bne.n	8005436 <HAL_RCC_OscConfig+0x5e>
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d10b      	bne.n	8005436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541e:	4b7f      	ldr	r3, [pc, #508]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d06c      	beq.n	8005504 <HAL_RCC_OscConfig+0x12c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d168      	bne.n	8005504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e3a2      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800543e:	d106      	bne.n	800544e <HAL_RCC_OscConfig+0x76>
 8005440:	4b76      	ldr	r3, [pc, #472]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a75      	ldr	r2, [pc, #468]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	e02e      	b.n	80054ac <HAL_RCC_OscConfig+0xd4>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10c      	bne.n	8005470 <HAL_RCC_OscConfig+0x98>
 8005456:	4b71      	ldr	r3, [pc, #452]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a70      	ldr	r2, [pc, #448]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800545c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b6e      	ldr	r3, [pc, #440]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a6d      	ldr	r2, [pc, #436]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005468:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e01d      	b.n	80054ac <HAL_RCC_OscConfig+0xd4>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005478:	d10c      	bne.n	8005494 <HAL_RCC_OscConfig+0xbc>
 800547a:	4b68      	ldr	r3, [pc, #416]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a67      	ldr	r2, [pc, #412]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	4b65      	ldr	r3, [pc, #404]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a64      	ldr	r2, [pc, #400]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e00b      	b.n	80054ac <HAL_RCC_OscConfig+0xd4>
 8005494:	4b61      	ldr	r3, [pc, #388]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a60      	ldr	r2, [pc, #384]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800549a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4b5e      	ldr	r3, [pc, #376]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a5d      	ldr	r2, [pc, #372]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80054a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fe fddc 	bl	8004070 <HAL_GetTick>
 80054b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054bc:	f7fe fdd8 	bl	8004070 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	@ 0x64
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e356      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ce:	4b53      	ldr	r3, [pc, #332]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0xe4>
 80054da:	e014      	b.n	8005506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fe fdc8 	bl	8004070 <HAL_GetTick>
 80054e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fe fdc4 	bl	8004070 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	@ 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e342      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054f6:	4b49      	ldr	r3, [pc, #292]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x10c>
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 808c 	beq.w	800562c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005514:	4b41      	ldr	r3, [pc, #260]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800551c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800551e:	4b3f      	ldr	r3, [pc, #252]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005522:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_RCC_OscConfig+0x162>
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2b18      	cmp	r3, #24
 800552e:	d137      	bne.n	80055a0 <HAL_RCC_OscConfig+0x1c8>
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d132      	bne.n	80055a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800553a:	4b38      	ldr	r3, [pc, #224]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_RCC_OscConfig+0x17a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e314      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005552:	4b32      	ldr	r3, [pc, #200]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 0219 	bic.w	r2, r3, #25
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	492f      	ldr	r1, [pc, #188]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fe fd84 	bl	8004070 <HAL_GetTick>
 8005568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556c:	f7fe fd80 	bl	8004070 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e2fe      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800557e:	4b27      	ldr	r3, [pc, #156]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558a:	4b24      	ldr	r3, [pc, #144]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	061b      	lsls	r3, r3, #24
 8005598:	4920      	ldr	r1, [pc, #128]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800559a:	4313      	orrs	r3, r2
 800559c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800559e:	e045      	b.n	800562c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d026      	beq.n	80055f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055a8:	4b1c      	ldr	r3, [pc, #112]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 0219 	bic.w	r2, r3, #25
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4919      	ldr	r1, [pc, #100]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fe fd59 	bl	8004070 <HAL_GetTick>
 80055be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055c2:	f7fe fd55 	bl	8004070 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e2d3      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055d4:	4b11      	ldr	r3, [pc, #68]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e0:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	490b      	ldr	r1, [pc, #44]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
 80055f4:	e01a      	b.n	800562c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f6:	4b09      	ldr	r3, [pc, #36]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a08      	ldr	r2, [pc, #32]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fe fd35 	bl	8004070 <HAL_GetTick>
 8005606:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005608:	e00a      	b.n	8005620 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800560a:	f7fe fd31 	bl	8004070 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d903      	bls.n	8005620 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e2af      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
 800561c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005620:	4b96      	ldr	r3, [pc, #600]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ee      	bne.n	800560a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d06a      	beq.n	800570e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005638:	4b90      	ldr	r3, [pc, #576]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005640:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005642:	4b8e      	ldr	r3, [pc, #568]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d007      	beq.n	800565e <HAL_RCC_OscConfig+0x286>
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b18      	cmp	r3, #24
 8005652:	d11b      	bne.n	800568c <HAL_RCC_OscConfig+0x2b4>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d116      	bne.n	800568c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800565e:	4b87      	ldr	r3, [pc, #540]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <HAL_RCC_OscConfig+0x29e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	2b80      	cmp	r3, #128	@ 0x80
 8005670:	d001      	beq.n	8005676 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e282      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005676:	4b81      	ldr	r3, [pc, #516]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	061b      	lsls	r3, r3, #24
 8005684:	497d      	ldr	r1, [pc, #500]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800568a:	e040      	b.n	800570e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d023      	beq.n	80056dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005694:	4b79      	ldr	r3, [pc, #484]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a78      	ldr	r2, [pc, #480]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800569a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fe fce6 	bl	8004070 <HAL_GetTick>
 80056a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056a8:	f7fe fce2 	bl	8004070 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e260      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056ba:	4b70      	ldr	r3, [pc, #448]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056c6:	4b6d      	ldr	r3, [pc, #436]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	061b      	lsls	r3, r3, #24
 80056d4:	4969      	ldr	r1, [pc, #420]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60cb      	str	r3, [r1, #12]
 80056da:	e018      	b.n	800570e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056dc:	4b67      	ldr	r3, [pc, #412]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a66      	ldr	r2, [pc, #408]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fe fcc2 	bl	8004070 <HAL_GetTick>
 80056ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056f0:	f7fe fcbe 	bl	8004070 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e23c      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005702:	4b5e      	ldr	r3, [pc, #376]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d036      	beq.n	8005788 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d019      	beq.n	8005756 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005722:	4b56      	ldr	r3, [pc, #344]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005726:	4a55      	ldr	r2, [pc, #340]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572e:	f7fe fc9f 	bl	8004070 <HAL_GetTick>
 8005732:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005736:	f7fe fc9b 	bl	8004070 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e219      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005748:	4b4c      	ldr	r3, [pc, #304]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800574a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x35e>
 8005754:	e018      	b.n	8005788 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005756:	4b49      	ldr	r3, [pc, #292]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800575a:	4a48      	ldr	r2, [pc, #288]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005762:	f7fe fc85 	bl	8004070 <HAL_GetTick>
 8005766:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576a:	f7fe fc81 	bl	8004070 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e1ff      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800577c:	4b3f      	ldr	r3, [pc, #252]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800577e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d036      	beq.n	8005802 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d019      	beq.n	80057d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800579c:	4b37      	ldr	r3, [pc, #220]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a36      	ldr	r2, [pc, #216]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057a8:	f7fe fc62 	bl	8004070 <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057b0:	f7fe fc5e 	bl	8004070 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e1dc      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057c2:	4b2e      	ldr	r3, [pc, #184]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0x3d8>
 80057ce:	e018      	b.n	8005802 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057d0:	4b2a      	ldr	r3, [pc, #168]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a29      	ldr	r2, [pc, #164]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057dc:	f7fe fc48 	bl	8004070 <HAL_GetTick>
 80057e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e4:	f7fe fc44 	bl	8004070 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e1c2      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057f6:	4b21      	ldr	r3, [pc, #132]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8086 	beq.w	800591c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005810:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <HAL_RCC_OscConfig+0x4a8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <HAL_RCC_OscConfig+0x4a8>)
 8005816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800581a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800581c:	f7fe fc28 	bl	8004070 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005824:	f7fe fc24 	bl	8004070 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	@ 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e1a2      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005836:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <HAL_RCC_OscConfig+0x4a8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d106      	bne.n	8005858 <HAL_RCC_OscConfig+0x480>
 800584a:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584e:	4a0b      	ldr	r2, [pc, #44]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	6713      	str	r3, [r2, #112]	@ 0x70
 8005856:	e032      	b.n	80058be <HAL_RCC_OscConfig+0x4e6>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d111      	bne.n	8005884 <HAL_RCC_OscConfig+0x4ac>
 8005860:	4b06      	ldr	r3, [pc, #24]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005864:	4a05      	ldr	r2, [pc, #20]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	6713      	str	r3, [r2, #112]	@ 0x70
 800586c:	4b03      	ldr	r3, [pc, #12]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005870:	4a02      	ldr	r2, [pc, #8]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005872:	f023 0304 	bic.w	r3, r3, #4
 8005876:	6713      	str	r3, [r2, #112]	@ 0x70
 8005878:	e021      	b.n	80058be <HAL_RCC_OscConfig+0x4e6>
 800587a:	bf00      	nop
 800587c:	58024400 	.word	0x58024400
 8005880:	58024800 	.word	0x58024800
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b05      	cmp	r3, #5
 800588a:	d10c      	bne.n	80058a6 <HAL_RCC_OscConfig+0x4ce>
 800588c:	4b83      	ldr	r3, [pc, #524]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005890:	4a82      	ldr	r2, [pc, #520]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6713      	str	r3, [r2, #112]	@ 0x70
 8005898:	4b80      	ldr	r3, [pc, #512]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	4a7f      	ldr	r2, [pc, #508]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a4:	e00b      	b.n	80058be <HAL_RCC_OscConfig+0x4e6>
 80058a6:	4b7d      	ldr	r3, [pc, #500]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058aa:	4a7c      	ldr	r2, [pc, #496]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b2:	4b7a      	ldr	r3, [pc, #488]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b6:	4a79      	ldr	r2, [pc, #484]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058b8:	f023 0304 	bic.w	r3, r3, #4
 80058bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d015      	beq.n	80058f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c6:	f7fe fbd3 	bl	8004070 <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058cc:	e00a      	b.n	80058e4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fe fbcf 	bl	8004070 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e14b      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058e4:	4b6d      	ldr	r3, [pc, #436]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ee      	beq.n	80058ce <HAL_RCC_OscConfig+0x4f6>
 80058f0:	e014      	b.n	800591c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f2:	f7fe fbbd 	bl	8004070 <HAL_GetTick>
 80058f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fe fbb9 	bl	8004070 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e135      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005910:	4b62      	ldr	r3, [pc, #392]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ee      	bne.n	80058fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 812a 	beq.w	8005b7a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005926:	4b5d      	ldr	r3, [pc, #372]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800592e:	2b18      	cmp	r3, #24
 8005930:	f000 80ba 	beq.w	8005aa8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	2b02      	cmp	r3, #2
 800593a:	f040 8095 	bne.w	8005a68 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593e:	4b57      	ldr	r3, [pc, #348]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a56      	ldr	r2, [pc, #344]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7fe fb91 	bl	8004070 <HAL_GetTick>
 800594e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005952:	f7fe fb8d 	bl	8004070 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e10b      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005964:	4b4d      	ldr	r3, [pc, #308]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f0      	bne.n	8005952 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005970:	4b4a      	ldr	r3, [pc, #296]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005974:	4b4a      	ldr	r3, [pc, #296]	@ (8005aa0 <HAL_RCC_OscConfig+0x6c8>)
 8005976:	4013      	ands	r3, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	430a      	orrs	r2, r1
 8005984:	4945      	ldr	r1, [pc, #276]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005986:	4313      	orrs	r3, r2
 8005988:	628b      	str	r3, [r1, #40]	@ 0x28
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	3b01      	subs	r3, #1
 8005990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005998:	3b01      	subs	r3, #1
 800599a:	025b      	lsls	r3, r3, #9
 800599c:	b29b      	uxth	r3, r3
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	3b01      	subs	r3, #1
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b2:	3b01      	subs	r3, #1
 80059b4:	061b      	lsls	r3, r3, #24
 80059b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059ba:	4938      	ldr	r1, [pc, #224]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80059c0:	4b36      	ldr	r3, [pc, #216]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c4:	4a35      	ldr	r2, [pc, #212]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059cc:	4b33      	ldr	r3, [pc, #204]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059d0:	4b34      	ldr	r3, [pc, #208]	@ (8005aa4 <HAL_RCC_OscConfig+0x6cc>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059d8:	00d2      	lsls	r2, r2, #3
 80059da:	4930      	ldr	r1, [pc, #192]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059e0:	4b2e      	ldr	r3, [pc, #184]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	f023 020c 	bic.w	r2, r3, #12
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ec:	492b      	ldr	r1, [pc, #172]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059f2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f6:	f023 0202 	bic.w	r2, r3, #2
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fe:	4927      	ldr	r1, [pc, #156]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a04:	4b25      	ldr	r3, [pc, #148]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	4a24      	ldr	r2, [pc, #144]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a10:	4b22      	ldr	r3, [pc, #136]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	4a21      	ldr	r2, [pc, #132]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	4a1e      	ldr	r2, [pc, #120]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005a28:	4b1c      	ldr	r3, [pc, #112]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a34:	4b19      	ldr	r3, [pc, #100]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a18      	ldr	r2, [pc, #96]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fe fb16 	bl	8004070 <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fe fb12 	bl	8004070 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e090      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a5a:	4b10      	ldr	r3, [pc, #64]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCC_OscConfig+0x670>
 8005a66:	e088      	b.n	8005b7a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a68:	4b0c      	ldr	r3, [pc, #48]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fe fafc 	bl	8004070 <HAL_GetTick>
 8005a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fe faf8 	bl	8004070 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e076      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a8e:	4b03      	ldr	r3, [pc, #12]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x6a4>
 8005a9a:	e06e      	b.n	8005b7a <HAL_RCC_OscConfig+0x7a2>
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	fffffc0c 	.word	0xfffffc0c
 8005aa4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005aa8:	4b36      	ldr	r3, [pc, #216]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005aae:	4b35      	ldr	r3, [pc, #212]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d031      	beq.n	8005b20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f003 0203 	and.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d12a      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d122      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d11a      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d111      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	0c1b      	lsrs	r3, r3, #16
 8005b00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d108      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	0e1b      	lsrs	r3, r3, #24
 8005b12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e02b      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005b24:	4b17      	ldr	r3, [pc, #92]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b28:	08db      	lsrs	r3, r3, #3
 8005b2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d01f      	beq.n	8005b7a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005b3a:	4b12      	ldr	r3, [pc, #72]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3e:	4a11      	ldr	r2, [pc, #68]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b46:	f7fe fa93 	bl	8004070 <HAL_GetTick>
 8005b4a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005b4c:	bf00      	nop
 8005b4e:	f7fe fa8f 	bl	8004070 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d0f9      	beq.n	8005b4e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b88 <HAL_RCC_OscConfig+0x7b0>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b66:	00d2      	lsls	r2, r2, #3
 8005b68:	4906      	ldr	r1, [pc, #24]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b6e:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	4a04      	ldr	r2, [pc, #16]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3730      	adds	r7, #48	@ 0x30
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	58024400 	.word	0x58024400
 8005b88:	ffff0007 	.word	0xffff0007

08005b8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e19c      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba0:	4b8a      	ldr	r3, [pc, #552]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d910      	bls.n	8005bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bae:	4b87      	ldr	r3, [pc, #540]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f023 020f 	bic.w	r2, r3, #15
 8005bb6:	4985      	ldr	r1, [pc, #532]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bbe:	4b83      	ldr	r3, [pc, #524]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d001      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e184      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d010      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	4b7b      	ldr	r3, [pc, #492]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d908      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bec:	4b78      	ldr	r3, [pc, #480]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	4975      	ldr	r1, [pc, #468]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d010      	beq.n	8005c2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	4b70      	ldr	r3, [pc, #448]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d908      	bls.n	8005c2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c1a:	4b6d      	ldr	r3, [pc, #436]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	496a      	ldr	r1, [pc, #424]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d010      	beq.n	8005c5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	4b64      	ldr	r3, [pc, #400]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d908      	bls.n	8005c5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c48:	4b61      	ldr	r3, [pc, #388]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	495e      	ldr	r1, [pc, #376]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	4b59      	ldr	r3, [pc, #356]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d908      	bls.n	8005c88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c76:	4b56      	ldr	r3, [pc, #344]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	4953      	ldr	r1, [pc, #332]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d010      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	4b4d      	ldr	r3, [pc, #308]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d908      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f023 020f 	bic.w	r2, r3, #15
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	4947      	ldr	r1, [pc, #284]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d055      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cc2:	4b43      	ldr	r3, [pc, #268]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	4940      	ldr	r1, [pc, #256]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d107      	bne.n	8005cec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d121      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0f6      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cf4:	4b36      	ldr	r3, [pc, #216]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d115      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0ea      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d0c:	4b30      	ldr	r3, [pc, #192]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0de      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0d6      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d2c:	4b28      	ldr	r3, [pc, #160]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f023 0207 	bic.w	r2, r3, #7
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	4925      	ldr	r1, [pc, #148]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3e:	f7fe f997 	bl	8004070 <HAL_GetTick>
 8005d42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d44:	e00a      	b.n	8005d5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d46:	f7fe f993 	bl	8004070 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0be      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d1eb      	bne.n	8005d46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d010      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	4b14      	ldr	r3, [pc, #80]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d208      	bcs.n	8005d9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d8a:	4b11      	ldr	r3, [pc, #68]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f023 020f 	bic.w	r2, r3, #15
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	490e      	ldr	r1, [pc, #56]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d214      	bcs.n	8005dd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	4b08      	ldr	r3, [pc, #32]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 020f 	bic.w	r2, r3, #15
 8005db2:	4906      	ldr	r1, [pc, #24]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b04      	ldr	r3, [pc, #16]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d005      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e086      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
 8005dcc:	52002000 	.word	0x52002000
 8005dd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d010      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d208      	bcs.n	8005e02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005df0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	4939      	ldr	r1, [pc, #228]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d010      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695a      	ldr	r2, [r3, #20]
 8005e12:	4b34      	ldr	r3, [pc, #208]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d208      	bcs.n	8005e30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e1e:	4b31      	ldr	r3, [pc, #196]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	492e      	ldr	r1, [pc, #184]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d010      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	4b28      	ldr	r3, [pc, #160]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d208      	bcs.n	8005e5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	4922      	ldr	r1, [pc, #136]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d010      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d208      	bcs.n	8005e8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	4917      	ldr	r1, [pc, #92]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e8c:	f000 f834 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	4912      	ldr	r1, [pc, #72]	@ (8005ee8 <HAL_RCC_ClockConfig+0x35c>)
 8005e9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee8 <HAL_RCC_ClockConfig+0x35c>)
 8005eb4:	5cd3      	ldrb	r3, [r2, r3]
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8005eec <HAL_RCC_ClockConfig+0x360>)
 8005ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ef0 <HAL_RCC_ClockConfig+0x364>)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005eca:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef4 <HAL_RCC_ClockConfig+0x368>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe f884 	bl	8003fdc <HAL_InitTick>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	08011e88 	.word	0x08011e88
 8005eec:	24000008 	.word	0x24000008
 8005ef0:	24000004 	.word	0x24000004
 8005ef4:	24000014 	.word	0x24000014

08005ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b089      	sub	sp, #36	@ 0x24
 8005efc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005efe:	4bb3      	ldr	r3, [pc, #716]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f06:	2b18      	cmp	r3, #24
 8005f08:	f200 8155 	bhi.w	80061b6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f79 	.word	0x08005f79
 8005f18:	080061b7 	.word	0x080061b7
 8005f1c:	080061b7 	.word	0x080061b7
 8005f20:	080061b7 	.word	0x080061b7
 8005f24:	080061b7 	.word	0x080061b7
 8005f28:	080061b7 	.word	0x080061b7
 8005f2c:	080061b7 	.word	0x080061b7
 8005f30:	080061b7 	.word	0x080061b7
 8005f34:	08005f9f 	.word	0x08005f9f
 8005f38:	080061b7 	.word	0x080061b7
 8005f3c:	080061b7 	.word	0x080061b7
 8005f40:	080061b7 	.word	0x080061b7
 8005f44:	080061b7 	.word	0x080061b7
 8005f48:	080061b7 	.word	0x080061b7
 8005f4c:	080061b7 	.word	0x080061b7
 8005f50:	080061b7 	.word	0x080061b7
 8005f54:	08005fa5 	.word	0x08005fa5
 8005f58:	080061b7 	.word	0x080061b7
 8005f5c:	080061b7 	.word	0x080061b7
 8005f60:	080061b7 	.word	0x080061b7
 8005f64:	080061b7 	.word	0x080061b7
 8005f68:	080061b7 	.word	0x080061b7
 8005f6c:	080061b7 	.word	0x080061b7
 8005f70:	080061b7 	.word	0x080061b7
 8005f74:	08005fab 	.word	0x08005fab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f78:	4b94      	ldr	r3, [pc, #592]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d009      	beq.n	8005f98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f84:	4b91      	ldr	r3, [pc, #580]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	08db      	lsrs	r3, r3, #3
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	4a90      	ldr	r2, [pc, #576]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
 8005f94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005f96:	e111      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f98:	4b8d      	ldr	r3, [pc, #564]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f9a:	61bb      	str	r3, [r7, #24]
      break;
 8005f9c:	e10e      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005f9e:	4b8d      	ldr	r3, [pc, #564]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fa0:	61bb      	str	r3, [r7, #24]
      break;
 8005fa2:	e10b      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005fa6:	61bb      	str	r3, [r7, #24]
      break;
 8005fa8:	e108      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005faa:	4b88      	ldr	r3, [pc, #544]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005fb4:	4b85      	ldr	r3, [pc, #532]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	091b      	lsrs	r3, r3, #4
 8005fba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fc0:	4b82      	ldr	r3, [pc, #520]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005fca:	4b80      	ldr	r3, [pc, #512]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fce:	08db      	lsrs	r3, r3, #3
 8005fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80e1 	beq.w	80061b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	f000 8083 	beq.w	80060fc <HAL_RCC_GetSysClockFreq+0x204>
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	f200 80a1 	bhi.w	8006140 <HAL_RCC_GetSysClockFreq+0x248>
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_RCC_GetSysClockFreq+0x114>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d056      	beq.n	80060b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800600a:	e099      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800600c:	4b6f      	ldr	r3, [pc, #444]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d02d      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006018:	4b6c      	ldr	r3, [pc, #432]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	08db      	lsrs	r3, r3, #3
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	4a6b      	ldr	r2, [pc, #428]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006024:	fa22 f303 	lsr.w	r3, r2, r3
 8006028:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006042:	4b62      	ldr	r3, [pc, #392]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006052:	ed97 6a02 	vldr	s12, [r7, #8]
 8006056:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006072:	e087      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80061e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006086:	4b51      	ldr	r3, [pc, #324]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006096:	ed97 6a02 	vldr	s12, [r7, #8]
 800609a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800609e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060b6:	e065      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80061e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ca:	4b40      	ldr	r3, [pc, #256]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060da:	ed97 6a02 	vldr	s12, [r7, #8]
 80060de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80060e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060fa:	e043      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006106:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80061e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800610a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610e:	4b2f      	ldr	r3, [pc, #188]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006122:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800613e:	e021      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80061e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800614e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006152:	4b1e      	ldr	r3, [pc, #120]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006162:	ed97 6a02 	vldr	s12, [r7, #8]
 8006166:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800616a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800617a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006182:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006184:	4b11      	ldr	r3, [pc, #68]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006188:	0a5b      	lsrs	r3, r3, #9
 800618a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800618e:	3301      	adds	r3, #1
 8006190:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800619c:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a8:	ee17 3a90 	vmov	r3, s15
 80061ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80061ae:	e005      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61bb      	str	r3, [r7, #24]
      break;
 80061b4:	e002      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80061b6:	4b07      	ldr	r3, [pc, #28]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061b8:	61bb      	str	r3, [r7, #24]
      break;
 80061ba:	bf00      	nop
  }

  return sysclockfreq;
 80061bc:	69bb      	ldr	r3, [r7, #24]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3724      	adds	r7, #36	@ 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	58024400 	.word	0x58024400
 80061d0:	03d09000 	.word	0x03d09000
 80061d4:	003d0900 	.word	0x003d0900
 80061d8:	02dc6c00 	.word	0x02dc6c00
 80061dc:	46000000 	.word	0x46000000
 80061e0:	4c742400 	.word	0x4c742400
 80061e4:	4a742400 	.word	0x4a742400
 80061e8:	4c371b00 	.word	0x4c371b00

080061ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061f2:	f7ff fe81 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 80061f6:	4602      	mov	r2, r0
 80061f8:	4b10      	ldr	r3, [pc, #64]	@ (800623c <HAL_RCC_GetHCLKFreq+0x50>)
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	0a1b      	lsrs	r3, r3, #8
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	490f      	ldr	r1, [pc, #60]	@ (8006240 <HAL_RCC_GetHCLKFreq+0x54>)
 8006204:	5ccb      	ldrb	r3, [r1, r3]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	fa22 f303 	lsr.w	r3, r2, r3
 800620e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006210:	4b0a      	ldr	r3, [pc, #40]	@ (800623c <HAL_RCC_GetHCLKFreq+0x50>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	4a09      	ldr	r2, [pc, #36]	@ (8006240 <HAL_RCC_GetHCLKFreq+0x54>)
 800621a:	5cd3      	ldrb	r3, [r2, r3]
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	4a07      	ldr	r2, [pc, #28]	@ (8006244 <HAL_RCC_GetHCLKFreq+0x58>)
 8006228:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800622a:	4a07      	ldr	r2, [pc, #28]	@ (8006248 <HAL_RCC_GetHCLKFreq+0x5c>)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006230:	4b04      	ldr	r3, [pc, #16]	@ (8006244 <HAL_RCC_GetHCLKFreq+0x58>)
 8006232:	681b      	ldr	r3, [r3, #0]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	58024400 	.word	0x58024400
 8006240:	08011e88 	.word	0x08011e88
 8006244:	24000008 	.word	0x24000008
 8006248:	24000004 	.word	0x24000004

0800624c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006250:	f7ff ffcc 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8006254:	4602      	mov	r2, r0
 8006256:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	091b      	lsrs	r3, r3, #4
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	4904      	ldr	r1, [pc, #16]	@ (8006274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006262:	5ccb      	ldrb	r3, [r1, r3]
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800626c:	4618      	mov	r0, r3
 800626e:	bd80      	pop	{r7, pc}
 8006270:	58024400 	.word	0x58024400
 8006274:	08011e88 	.word	0x08011e88

08006278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800627c:	f7ff ffb6 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8006280:	4602      	mov	r2, r0
 8006282:	4b06      	ldr	r3, [pc, #24]	@ (800629c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	4904      	ldr	r1, [pc, #16]	@ (80062a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800628e:	5ccb      	ldrb	r3, [r1, r3]
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}
 800629c:	58024400 	.word	0x58024400
 80062a0:	08011e88 	.word	0x08011e88

080062a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a8:	b0c6      	sub	sp, #280	@ 0x118
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062b0:	2300      	movs	r3, #0
 80062b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062b6:	2300      	movs	r3, #0
 80062b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80062c8:	2500      	movs	r5, #0
 80062ca:	ea54 0305 	orrs.w	r3, r4, r5
 80062ce:	d049      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062da:	d02f      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80062dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062e0:	d828      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062e6:	d01a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062ec:	d822      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80062f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062f6:	d007      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062f8:	e01c      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fa:	4bab      	ldr	r3, [pc, #684]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	4aaa      	ldr	r2, [pc, #680]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006306:	e01a      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630c:	3308      	adds	r3, #8
 800630e:	2102      	movs	r1, #2
 8006310:	4618      	mov	r0, r3
 8006312:	f002 fa49 	bl	80087a8 <RCCEx_PLL2_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800631c:	e00f      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800631e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006322:	3328      	adds	r3, #40	@ 0x28
 8006324:	2102      	movs	r1, #2
 8006326:	4618      	mov	r0, r3
 8006328:	f002 faf0 	bl	800890c <RCCEx_PLL3_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006332:	e004      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800633c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006346:	4b98      	ldr	r3, [pc, #608]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006354:	4a94      	ldr	r2, [pc, #592]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006356:	430b      	orrs	r3, r1
 8006358:	6513      	str	r3, [r2, #80]	@ 0x50
 800635a:	e003      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006360:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006370:	f04f 0900 	mov.w	r9, #0
 8006374:	ea58 0309 	orrs.w	r3, r8, r9
 8006378:	d047      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006380:	2b04      	cmp	r3, #4
 8006382:	d82a      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006384:	a201      	add	r2, pc, #4	@ (adr r2, 800638c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	080063a1 	.word	0x080063a1
 8006390:	080063af 	.word	0x080063af
 8006394:	080063c5 	.word	0x080063c5
 8006398:	080063e3 	.word	0x080063e3
 800639c:	080063e3 	.word	0x080063e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a0:	4b81      	ldr	r3, [pc, #516]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	4a80      	ldr	r2, [pc, #512]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063ac:	e01a      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b2:	3308      	adds	r3, #8
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f002 f9f6 	bl	80087a8 <RCCEx_PLL2_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063c2:	e00f      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	3328      	adds	r3, #40	@ 0x28
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f002 fa9d 	bl	800890c <RCCEx_PLL3_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063d8:	e004      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063e0:	e000      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80063e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063ec:	4b6e      	ldr	r3, [pc, #440]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f0:	f023 0107 	bic.w	r1, r3, #7
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fa:	4a6b      	ldr	r2, [pc, #428]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006406:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006416:	f04f 0b00 	mov.w	fp, #0
 800641a:	ea5a 030b 	orrs.w	r3, sl, fp
 800641e:	d05b      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006428:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800642c:	d03b      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800642e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006432:	d834      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006434:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006438:	d037      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800643a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800643e:	d82e      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006440:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006444:	d033      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006446:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800644a:	d828      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800644c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006450:	d01a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006456:	d822      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800645c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006460:	d007      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006462:	e01c      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006464:	4b50      	ldr	r3, [pc, #320]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a4f      	ldr	r2, [pc, #316]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800646e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006470:	e01e      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	3308      	adds	r3, #8
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f002 f994 	bl	80087a8 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006486:	e013      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648c:	3328      	adds	r3, #40	@ 0x28
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f002 fa3b 	bl	800890c <RCCEx_PLL3_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800649c:	e008      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064a4:	e004      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80064a6:	bf00      	nop
 80064a8:	e002      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80064ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064b8:	4b3b      	ldr	r3, [pc, #236]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064bc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064c8:	4a37      	ldr	r2, [pc, #220]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ca:	430b      	orrs	r3, r1
 80064cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ce:	e003      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80064e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064e8:	2300      	movs	r3, #0
 80064ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80064ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d05d      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006500:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006504:	d03b      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006506:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800650a:	d834      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800650c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006510:	d037      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006512:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006516:	d82e      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006518:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800651c:	d033      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800651e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006522:	d828      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006524:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006528:	d01a      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800652a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800652e:	d822      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006538:	d007      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800653a:	e01c      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800653c:	4b1a      	ldr	r3, [pc, #104]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800653e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006540:	4a19      	ldr	r2, [pc, #100]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006548:	e01e      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654e:	3308      	adds	r3, #8
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f002 f928 	bl	80087a8 <RCCEx_PLL2_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800655e:	e013      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006564:	3328      	adds	r3, #40	@ 0x28
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f002 f9cf 	bl	800890c <RCCEx_PLL3_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006574:	e008      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800657c:	e004      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800657e:	bf00      	nop
 8006580:	e002      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006582:	bf00      	nop
 8006584:	e000      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006590:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006594:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80065a0:	4a01      	ldr	r2, [pc, #4]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065a2:	430b      	orrs	r3, r1
 80065a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a6:	e005      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80065a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80065c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065c4:	2300      	movs	r3, #0
 80065c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065ca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4313      	orrs	r3, r2
 80065d2:	d03a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065da:	2b30      	cmp	r3, #48	@ 0x30
 80065dc:	d01f      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80065de:	2b30      	cmp	r3, #48	@ 0x30
 80065e0:	d819      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d00c      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d815      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d019      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80065ee:	2b10      	cmp	r3, #16
 80065f0:	d111      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f2:	4baa      	ldr	r3, [pc, #680]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	4aa9      	ldr	r2, [pc, #676]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80065fe:	e011      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006604:	3308      	adds	r3, #8
 8006606:	2102      	movs	r1, #2
 8006608:	4618      	mov	r0, r3
 800660a:	f002 f8cd 	bl	80087a8 <RCCEx_PLL2_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006614:	e006      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800661c:	e002      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800662c:	4b9b      	ldr	r3, [pc, #620]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800662e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006630:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800663a:	4a98      	ldr	r2, [pc, #608]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800663c:	430b      	orrs	r3, r1
 800663e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006640:	e003      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006646:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006656:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800665a:	2300      	movs	r3, #0
 800665c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006660:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006664:	460b      	mov	r3, r1
 8006666:	4313      	orrs	r3, r2
 8006668:	d051      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006674:	d035      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800667a:	d82e      	bhi.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x436>
 800667c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006680:	d031      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006682:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006686:	d828      	bhi.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800668c:	d01a      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800668e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006692:	d822      	bhi.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669c:	d007      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800669e:	e01c      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a0:	4b7e      	ldr	r3, [pc, #504]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a4:	4a7d      	ldr	r2, [pc, #500]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066ac:	e01c      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	3308      	adds	r3, #8
 80066b4:	2100      	movs	r1, #0
 80066b6:	4618      	mov	r0, r3
 80066b8:	f002 f876 	bl	80087a8 <RCCEx_PLL2_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066c2:	e011      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	3328      	adds	r3, #40	@ 0x28
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f002 f91d 	bl	800890c <RCCEx_PLL3_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066d8:	e006      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066e0:	e002      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80066e2:	bf00      	nop
 80066e4:	e000      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80066e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066f0:	4b6a      	ldr	r3, [pc, #424]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066fe:	4a67      	ldr	r2, [pc, #412]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006700:	430b      	orrs	r3, r1
 8006702:	6513      	str	r3, [r2, #80]	@ 0x50
 8006704:	e003      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006706:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800670a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800671a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800671e:	2300      	movs	r3, #0
 8006720:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006724:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006728:	460b      	mov	r3, r1
 800672a:	4313      	orrs	r3, r2
 800672c:	d053      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800672e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006738:	d033      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800673a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800673e:	d82c      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006740:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006744:	d02f      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006746:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800674a:	d826      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800674c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006750:	d02b      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006752:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006756:	d820      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800675c:	d012      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800675e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006762:	d81a      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d022      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676c:	d115      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800676e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006772:	3308      	adds	r3, #8
 8006774:	2101      	movs	r1, #1
 8006776:	4618      	mov	r0, r3
 8006778:	f002 f816 	bl	80087a8 <RCCEx_PLL2_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006782:	e015      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	3328      	adds	r3, #40	@ 0x28
 800678a:	2101      	movs	r1, #1
 800678c:	4618      	mov	r0, r3
 800678e:	f002 f8bd 	bl	800890c <RCCEx_PLL3_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006798:	e00a      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067a0:	e006      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80067a2:	bf00      	nop
 80067a4:	e004      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80067a6:	bf00      	nop
 80067a8:	e002      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80067aa:	bf00      	nop
 80067ac:	e000      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80067ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80067b8:	4b38      	ldr	r3, [pc, #224]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c6:	4a35      	ldr	r2, [pc, #212]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80067cc:	e003      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80067e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067e6:	2300      	movs	r3, #0
 80067e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067f0:	460b      	mov	r3, r1
 80067f2:	4313      	orrs	r3, r2
 80067f4:	d058      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006802:	d033      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006808:	d82c      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800680a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800680e:	d02f      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006814:	d826      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006816:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800681a:	d02b      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800681c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006820:	d820      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006826:	d012      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800682c:	d81a      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d022      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006836:	d115      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683c:	3308      	adds	r3, #8
 800683e:	2101      	movs	r1, #1
 8006840:	4618      	mov	r0, r3
 8006842:	f001 ffb1 	bl	80087a8 <RCCEx_PLL2_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800684c:	e015      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	3328      	adds	r3, #40	@ 0x28
 8006854:	2101      	movs	r1, #1
 8006856:	4618      	mov	r0, r3
 8006858:	f002 f858 	bl	800890c <RCCEx_PLL3_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006862:	e00a      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800686a:	e006      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800686c:	bf00      	nop
 800686e:	e004      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006870:	bf00      	nop
 8006872:	e002      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10e      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006882:	4b06      	ldr	r3, [pc, #24]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006886:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006892:	4a02      	ldr	r2, [pc, #8]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006894:	430b      	orrs	r3, r1
 8006896:	6593      	str	r3, [r2, #88]	@ 0x58
 8006898:	e006      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800689a:	bf00      	nop
 800689c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068b8:	2300      	movs	r3, #0
 80068ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80068be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4313      	orrs	r3, r2
 80068c6:	d037      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d2:	d00e      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80068d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d8:	d816      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d018      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80068de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e2:	d111      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e4:	4bc4      	ldr	r3, [pc, #784]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e8:	4ac3      	ldr	r2, [pc, #780]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068f0:	e00f      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f6:	3308      	adds	r3, #8
 80068f8:	2101      	movs	r1, #1
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 ff54 	bl	80087a8 <RCCEx_PLL2_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006906:	e004      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800690e:	e000      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800691a:	4bb7      	ldr	r3, [pc, #732]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800691c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800691e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006928:	4ab3      	ldr	r2, [pc, #716]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800692a:	430b      	orrs	r3, r1
 800692c:	6513      	str	r3, [r2, #80]	@ 0x50
 800692e:	e003      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006934:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800694e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006952:	460b      	mov	r3, r1
 8006954:	4313      	orrs	r3, r2
 8006956:	d039      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800695e:	2b03      	cmp	r3, #3
 8006960:	d81c      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006962:	a201      	add	r2, pc, #4	@ (adr r2, 8006968 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006968:	080069a5 	.word	0x080069a5
 800696c:	08006979 	.word	0x08006979
 8006970:	08006987 	.word	0x08006987
 8006974:	080069a5 	.word	0x080069a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006978:	4b9f      	ldr	r3, [pc, #636]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	4a9e      	ldr	r2, [pc, #632]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800697e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006984:	e00f      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	3308      	adds	r3, #8
 800698c:	2102      	movs	r1, #2
 800698e:	4618      	mov	r0, r3
 8006990:	f001 ff0a 	bl	80087a8 <RCCEx_PLL2_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800699a:	e004      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069a2:	e000      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80069a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069ae:	4b92      	ldr	r3, [pc, #584]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b2:	f023 0103 	bic.w	r1, r3, #3
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069bc:	4a8e      	ldr	r2, [pc, #568]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069be:	430b      	orrs	r3, r1
 80069c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069c2:	e003      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80069d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069dc:	2300      	movs	r3, #0
 80069de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f000 8099 	beq.w	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069ee:	4b83      	ldr	r3, [pc, #524]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a82      	ldr	r2, [pc, #520]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069fa:	f7fd fb39 	bl	8004070 <HAL_GetTick>
 80069fe:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a02:	e00b      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a04:	f7fd fb34 	bl	8004070 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b64      	cmp	r3, #100	@ 0x64
 8006a12:	d903      	bls.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a1a:	e005      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a1c:	4b77      	ldr	r3, [pc, #476]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0ed      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d173      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a30:	4b71      	ldr	r3, [pc, #452]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a3c:	4053      	eors	r3, r2
 8006a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d015      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a46:	4b6c      	ldr	r3, [pc, #432]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a52:	4b69      	ldr	r3, [pc, #420]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a56:	4a68      	ldr	r2, [pc, #416]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a5e:	4b66      	ldr	r3, [pc, #408]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a62:	4a65      	ldr	r2, [pc, #404]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a6a:	4a63      	ldr	r2, [pc, #396]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a7e:	d118      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fd faf6 	bl	8004070 <HAL_GetTick>
 8006a84:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a88:	e00d      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a8a:	f7fd faf1 	bl	8004070 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006a94:	1ad2      	subs	r2, r2, r3
 8006a96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d903      	bls.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006aa4:	e005      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aa6:	4b54      	ldr	r3, [pc, #336]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0eb      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006ab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d129      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aca:	d10e      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006acc:	4b4a      	ldr	r3, [pc, #296]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006adc:	091a      	lsrs	r2, r3, #4
 8006ade:	4b48      	ldr	r3, [pc, #288]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	4a45      	ldr	r2, [pc, #276]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6113      	str	r3, [r2, #16]
 8006ae8:	e005      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006aea:	4b43      	ldr	r3, [pc, #268]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	4a42      	ldr	r2, [pc, #264]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006af0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006af4:	6113      	str	r3, [r2, #16]
 8006af6:	4b40      	ldr	r3, [pc, #256]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006af8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b06:	4a3c      	ldr	r2, [pc, #240]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b0c:	e008      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006b16:	e003      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f002 0301 	and.w	r3, r2, #1
 8006b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006b36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f000 808f 	beq.w	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b48:	2b28      	cmp	r3, #40	@ 0x28
 8006b4a:	d871      	bhi.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006c39 	.word	0x08006c39
 8006b58:	08006c31 	.word	0x08006c31
 8006b5c:	08006c31 	.word	0x08006c31
 8006b60:	08006c31 	.word	0x08006c31
 8006b64:	08006c31 	.word	0x08006c31
 8006b68:	08006c31 	.word	0x08006c31
 8006b6c:	08006c31 	.word	0x08006c31
 8006b70:	08006c31 	.word	0x08006c31
 8006b74:	08006c05 	.word	0x08006c05
 8006b78:	08006c31 	.word	0x08006c31
 8006b7c:	08006c31 	.word	0x08006c31
 8006b80:	08006c31 	.word	0x08006c31
 8006b84:	08006c31 	.word	0x08006c31
 8006b88:	08006c31 	.word	0x08006c31
 8006b8c:	08006c31 	.word	0x08006c31
 8006b90:	08006c31 	.word	0x08006c31
 8006b94:	08006c1b 	.word	0x08006c1b
 8006b98:	08006c31 	.word	0x08006c31
 8006b9c:	08006c31 	.word	0x08006c31
 8006ba0:	08006c31 	.word	0x08006c31
 8006ba4:	08006c31 	.word	0x08006c31
 8006ba8:	08006c31 	.word	0x08006c31
 8006bac:	08006c31 	.word	0x08006c31
 8006bb0:	08006c31 	.word	0x08006c31
 8006bb4:	08006c39 	.word	0x08006c39
 8006bb8:	08006c31 	.word	0x08006c31
 8006bbc:	08006c31 	.word	0x08006c31
 8006bc0:	08006c31 	.word	0x08006c31
 8006bc4:	08006c31 	.word	0x08006c31
 8006bc8:	08006c31 	.word	0x08006c31
 8006bcc:	08006c31 	.word	0x08006c31
 8006bd0:	08006c31 	.word	0x08006c31
 8006bd4:	08006c39 	.word	0x08006c39
 8006bd8:	08006c31 	.word	0x08006c31
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006c31 	.word	0x08006c31
 8006be4:	08006c31 	.word	0x08006c31
 8006be8:	08006c31 	.word	0x08006c31
 8006bec:	08006c31 	.word	0x08006c31
 8006bf0:	08006c31 	.word	0x08006c31
 8006bf4:	08006c39 	.word	0x08006c39
 8006bf8:	58024400 	.word	0x58024400
 8006bfc:	58024800 	.word	0x58024800
 8006c00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	3308      	adds	r3, #8
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 fdcb 	bl	80087a8 <RCCEx_PLL2_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c18:	e00f      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1e:	3328      	adds	r3, #40	@ 0x28
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 fe72 	bl	800890c <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c2e:	e004      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c42:	4bbf      	ldr	r3, [pc, #764]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c50:	4abb      	ldr	r2, [pc, #748]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c52:	430b      	orrs	r3, r1
 8006c54:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c56:	e003      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f002 0302 	and.w	r3, r2, #2
 8006c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c70:	2300      	movs	r3, #0
 8006c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	d041      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d824      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cdd 	.word	0x08006cdd
 8006c94:	08006ca9 	.word	0x08006ca9
 8006c98:	08006cbf 	.word	0x08006cbf
 8006c9c:	08006cdd 	.word	0x08006cdd
 8006ca0:	08006cdd 	.word	0x08006cdd
 8006ca4:	08006cdd 	.word	0x08006cdd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	3308      	adds	r3, #8
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 fd79 	bl	80087a8 <RCCEx_PLL2_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006cbc:	e00f      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc2:	3328      	adds	r3, #40	@ 0x28
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 fe20 	bl	800890c <RCCEx_PLL3_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006cd2:	e004      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cda:	e000      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ce6:	4b96      	ldr	r3, [pc, #600]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cea:	f023 0107 	bic.w	r1, r3, #7
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf4:	4a92      	ldr	r2, [pc, #584]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cf6:	430b      	orrs	r3, r1
 8006cf8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cfa:	e003      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f002 0304 	and.w	r3, r2, #4
 8006d10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d1a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d044      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d825      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006d30:	a201      	add	r2, pc, #4	@ (adr r2, 8006d38 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d85 	.word	0x08006d85
 8006d3c:	08006d51 	.word	0x08006d51
 8006d40:	08006d67 	.word	0x08006d67
 8006d44:	08006d85 	.word	0x08006d85
 8006d48:	08006d85 	.word	0x08006d85
 8006d4c:	08006d85 	.word	0x08006d85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d54:	3308      	adds	r3, #8
 8006d56:	2101      	movs	r1, #1
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 fd25 	bl	80087a8 <RCCEx_PLL2_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d64:	e00f      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6a:	3328      	adds	r3, #40	@ 0x28
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 fdcc 	bl	800890c <RCCEx_PLL3_Config>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d7a:	e004      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d82:	e000      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10b      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d92:	f023 0107 	bic.w	r1, r3, #7
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9e:	4a68      	ldr	r2, [pc, #416]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006da0:	430b      	orrs	r3, r1
 8006da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006da4:	e003      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006daa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f002 0320 	and.w	r3, r2, #32
 8006dba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006dc4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	d055      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dda:	d033      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006de0:	d82c      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de6:	d02f      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dec:	d826      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006dee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006df2:	d02b      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006df4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006df8:	d820      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dfe:	d012      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e04:	d81a      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d022      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e0e:	d115      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	3308      	adds	r3, #8
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 fcc5 	bl	80087a8 <RCCEx_PLL2_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e24:	e015      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	3328      	adds	r3, #40	@ 0x28
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 fd6c 	bl	800890c <RCCEx_PLL3_Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e3a:	e00a      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e42:	e006      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e44:	bf00      	nop
 8006e46:	e004      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e48:	bf00      	nop
 8006e4a:	e002      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10b      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e5a:	4b39      	ldr	r3, [pc, #228]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e6a:	4a35      	ldr	r2, [pc, #212]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e70:	e003      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006e86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e90:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006e94:	460b      	mov	r3, r1
 8006e96:	4313      	orrs	r3, r2
 8006e98:	d058      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ea2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006ea6:	d033      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006ea8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006eac:	d82c      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb2:	d02f      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb8:	d826      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006eba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ebe:	d02b      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006ec0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ec4:	d820      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006ec6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eca:	d012      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ed0:	d81a      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d022      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eda:	d115      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f001 fc5f 	bl	80087a8 <RCCEx_PLL2_Config>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ef0:	e015      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef6:	3328      	adds	r3, #40	@ 0x28
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 fd06 	bl	800890c <RCCEx_PLL3_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f06:	e00a      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f0e:	e006      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006f10:	bf00      	nop
 8006f12:	e004      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006f14:	bf00      	nop
 8006f16:	e002      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10e      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f26:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f36:	4a02      	ldr	r2, [pc, #8]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f3c:	e006      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006f58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006f66:	460b      	mov	r3, r1
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	d055      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f74:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f78:	d033      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006f7a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f7e:	d82c      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f84:	d02f      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f8a:	d826      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f8c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f90:	d02b      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006f92:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f96:	d820      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f9c:	d012      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006f9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fa2:	d81a      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d022      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fac:	d115      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fbf6 	bl	80087a8 <RCCEx_PLL2_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006fc2:	e015      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	3328      	adds	r3, #40	@ 0x28
 8006fca:	2102      	movs	r1, #2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 fc9d 	bl	800890c <RCCEx_PLL3_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006fd8:	e00a      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fe0:	e006      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fe2:	bf00      	nop
 8006fe4:	e004      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fe6:	bf00      	nop
 8006fe8:	e002      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fea:	bf00      	nop
 8006fec:	e000      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10b      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ff8:	4ba0      	ldr	r3, [pc, #640]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007008:	4a9c      	ldr	r2, [pc, #624]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800700a:	430b      	orrs	r3, r1
 800700c:	6593      	str	r3, [r2, #88]	@ 0x58
 800700e:	e003      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f002 0308 	and.w	r3, r2, #8
 8007024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007028:	2300      	movs	r3, #0
 800702a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800702e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007032:	460b      	mov	r3, r1
 8007034:	4313      	orrs	r3, r2
 8007036:	d01e      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007044:	d10c      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704a:	3328      	adds	r3, #40	@ 0x28
 800704c:	2102      	movs	r1, #2
 800704e:	4618      	mov	r0, r3
 8007050:	f001 fc5c 	bl	800890c <RCCEx_PLL3_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007060:	4b86      	ldr	r3, [pc, #536]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007064:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007070:	4a82      	ldr	r2, [pc, #520]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007072:	430b      	orrs	r3, r1
 8007074:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f002 0310 	and.w	r3, r2, #16
 8007082:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007086:	2300      	movs	r3, #0
 8007088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800708c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007090:	460b      	mov	r3, r1
 8007092:	4313      	orrs	r3, r2
 8007094:	d01e      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800709e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a2:	d10c      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a8:	3328      	adds	r3, #40	@ 0x28
 80070aa:	2102      	movs	r1, #2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 fc2d 	bl	800890c <RCCEx_PLL3_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070be:	4b6f      	ldr	r3, [pc, #444]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070ce:	4a6b      	ldr	r2, [pc, #428]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070d0:	430b      	orrs	r3, r1
 80070d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80070e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070e2:	2300      	movs	r3, #0
 80070e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80070ea:	460b      	mov	r3, r1
 80070ec:	4313      	orrs	r3, r2
 80070ee:	d03e      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070fc:	d022      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80070fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007102:	d81b      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800710c:	d00b      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800710e:	e015      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	3308      	adds	r3, #8
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f001 fb45 	bl	80087a8 <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007124:	e00f      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	3328      	adds	r3, #40	@ 0x28
 800712c:	2102      	movs	r1, #2
 800712e:	4618      	mov	r0, r3
 8007130:	f001 fbec 	bl	800890c <RCCEx_PLL3_Config>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800713a:	e004      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007142:	e000      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10b      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800714e:	4b4b      	ldr	r3, [pc, #300]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007152:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800715e:	4a47      	ldr	r2, [pc, #284]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007160:	430b      	orrs	r3, r1
 8007162:	6593      	str	r3, [r2, #88]	@ 0x58
 8007164:	e003      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800716a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800717a:	673b      	str	r3, [r7, #112]	@ 0x70
 800717c:	2300      	movs	r3, #0
 800717e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007180:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d03b      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007192:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007196:	d01f      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007198:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800719c:	d818      	bhi.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800719e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071a2:	d003      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80071a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071a8:	d007      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80071aa:	e011      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ac:	4b33      	ldr	r3, [pc, #204]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b0:	4a32      	ldr	r2, [pc, #200]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80071b8:	e00f      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071be:	3328      	adds	r3, #40	@ 0x28
 80071c0:	2101      	movs	r1, #1
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 fba2 	bl	800890c <RCCEx_PLL3_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80071ce:	e004      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071d6:	e000      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80071d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071e2:	4b26      	ldr	r3, [pc, #152]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f2:	4a22      	ldr	r2, [pc, #136]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80071f8:	e003      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800720e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007210:	2300      	movs	r3, #0
 8007212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007214:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007218:	460b      	mov	r3, r1
 800721a:	4313      	orrs	r3, r2
 800721c:	d034      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800722c:	d007      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800722e:	e011      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007230:	4b12      	ldr	r3, [pc, #72]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007234:	4a11      	ldr	r2, [pc, #68]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800723a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800723c:	e00e      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007242:	3308      	adds	r3, #8
 8007244:	2102      	movs	r1, #2
 8007246:	4618      	mov	r0, r3
 8007248:	f001 faae 	bl	80087a8 <RCCEx_PLL2_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007252:	e003      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800725a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10d      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007264:	4b05      	ldr	r3, [pc, #20]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007268:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007272:	4a02      	ldr	r2, [pc, #8]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007274:	430b      	orrs	r3, r1
 8007276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007278:	e006      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800727a:	bf00      	nop
 800727c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007294:	663b      	str	r3, [r7, #96]	@ 0x60
 8007296:	2300      	movs	r3, #0
 8007298:	667b      	str	r3, [r7, #100]	@ 0x64
 800729a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800729e:	460b      	mov	r3, r1
 80072a0:	4313      	orrs	r3, r2
 80072a2:	d00c      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a8:	3328      	adds	r3, #40	@ 0x28
 80072aa:	2102      	movs	r1, #2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 fb2d 	bl	800890c <RCCEx_PLL3_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80072be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80072ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072cc:	2300      	movs	r3, #0
 80072ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80072d4:	460b      	mov	r3, r1
 80072d6:	4313      	orrs	r3, r2
 80072d8:	d036      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072e4:	d018      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80072e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ea:	d811      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80072ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f0:	d014      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80072f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f6:	d80b      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d011      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80072fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007300:	d106      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007302:	4bb7      	ldr	r3, [pc, #732]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007306:	4ab6      	ldr	r2, [pc, #728]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800730c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800730e:	e008      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007316:	e004      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007318:	bf00      	nop
 800731a:	e002      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800731c:	bf00      	nop
 800731e:	e000      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007322:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800732a:	4bad      	ldr	r3, [pc, #692]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800732c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800732e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007338:	4aa9      	ldr	r2, [pc, #676]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800733a:	430b      	orrs	r3, r1
 800733c:	6553      	str	r3, [r2, #84]	@ 0x54
 800733e:	e003      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007354:	653b      	str	r3, [r7, #80]	@ 0x50
 8007356:	2300      	movs	r3, #0
 8007358:	657b      	str	r3, [r7, #84]	@ 0x54
 800735a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d009      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007364:	4b9e      	ldr	r3, [pc, #632]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007368:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007372:	4a9b      	ldr	r2, [pc, #620]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007374:	430b      	orrs	r3, r1
 8007376:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007386:	2300      	movs	r3, #0
 8007388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800738a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800738e:	460b      	mov	r3, r1
 8007390:	4313      	orrs	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007394:	4b92      	ldr	r3, [pc, #584]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007398:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073a2:	4a8f      	ldr	r2, [pc, #572]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073a4:	430b      	orrs	r3, r1
 80073a6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80073b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80073b6:	2300      	movs	r3, #0
 80073b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80073be:	460b      	mov	r3, r1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	d00e      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073c4:	4b86      	ldr	r3, [pc, #536]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	4a85      	ldr	r2, [pc, #532]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073ce:	6113      	str	r3, [r2, #16]
 80073d0:	4b83      	ldr	r3, [pc, #524]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073d2:	6919      	ldr	r1, [r3, #16]
 80073d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073dc:	4a80      	ldr	r2, [pc, #512]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073de:	430b      	orrs	r3, r1
 80073e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80073ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80073f8:	460b      	mov	r3, r1
 80073fa:	4313      	orrs	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073fe:	4b78      	ldr	r3, [pc, #480]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007402:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740c:	4a74      	ldr	r2, [pc, #464]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800740e:	430b      	orrs	r3, r1
 8007410:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800741e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007420:	2300      	movs	r3, #0
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
 8007424:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007428:	460b      	mov	r3, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	d00a      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800742e:	4b6c      	ldr	r3, [pc, #432]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007432:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743e:	4a68      	ldr	r2, [pc, #416]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007440:	430b      	orrs	r3, r1
 8007442:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	2100      	movs	r1, #0
 800744e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007456:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800745a:	460b      	mov	r3, r1
 800745c:	4313      	orrs	r3, r2
 800745e:	d011      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007464:	3308      	adds	r3, #8
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f001 f99d 	bl	80087a8 <RCCEx_PLL2_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	2100      	movs	r1, #0
 800748e:	6239      	str	r1, [r7, #32]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	627b      	str	r3, [r7, #36]	@ 0x24
 8007496:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800749a:	460b      	mov	r3, r1
 800749c:	4313      	orrs	r3, r2
 800749e:	d011      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	3308      	adds	r3, #8
 80074a6:	2101      	movs	r1, #1
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 f97d 	bl	80087a8 <RCCEx_PLL2_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80074c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	2100      	movs	r1, #0
 80074ce:	61b9      	str	r1, [r7, #24]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	61fb      	str	r3, [r7, #28]
 80074d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80074da:	460b      	mov	r3, r1
 80074dc:	4313      	orrs	r3, r2
 80074de:	d011      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	3308      	adds	r3, #8
 80074e6:	2102      	movs	r1, #2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f001 f95d 	bl	80087a8 <RCCEx_PLL2_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	2100      	movs	r1, #0
 800750e:	6139      	str	r1, [r7, #16]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	d011      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007524:	3328      	adds	r3, #40	@ 0x28
 8007526:	2100      	movs	r1, #0
 8007528:	4618      	mov	r0, r3
 800752a:	f001 f9ef 	bl	800890c <RCCEx_PLL3_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007540:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	2100      	movs	r1, #0
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	f003 0310 	and.w	r3, r3, #16
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800755a:	460b      	mov	r3, r1
 800755c:	4313      	orrs	r3, r2
 800755e:	d011      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	3328      	adds	r3, #40	@ 0x28
 8007566:	2101      	movs	r1, #1
 8007568:	4618      	mov	r0, r3
 800756a:	f001 f9cf 	bl	800890c <RCCEx_PLL3_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007580:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	2100      	movs	r1, #0
 800758e:	6039      	str	r1, [r7, #0]
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	607b      	str	r3, [r7, #4]
 8007596:	e9d7 1200 	ldrd	r1, r2, [r7]
 800759a:	460b      	mov	r3, r1
 800759c:	4313      	orrs	r3, r2
 800759e:	d011      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	3328      	adds	r3, #40	@ 0x28
 80075a6:	2102      	movs	r1, #2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 f9af 	bl	800890c <RCCEx_PLL3_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80075b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80075c4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e000      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80075d8:	46bd      	mov	sp, r7
 80075da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075de:	bf00      	nop
 80075e0:	58024400 	.word	0x58024400

080075e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b090      	sub	sp, #64	@ 0x40
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80075ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075f2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80075f6:	430b      	orrs	r3, r1
 80075f8:	f040 8094 	bne.w	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80075fc:	4b9b      	ldr	r3, [pc, #620]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80075fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	2b04      	cmp	r3, #4
 800760a:	f200 8087 	bhi.w	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800760e:	a201      	add	r2, pc, #4	@ (adr r2, 8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007629 	.word	0x08007629
 8007618:	08007651 	.word	0x08007651
 800761c:	08007679 	.word	0x08007679
 8007620:	08007715 	.word	0x08007715
 8007624:	080076a1 	.word	0x080076a1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007628:	4b90      	ldr	r3, [pc, #576]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007630:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007634:	d108      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800763a:	4618      	mov	r0, r3
 800763c:	f000 ff62 	bl	8008504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007644:	f000 bc93 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800764c:	f000 bc8f 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007650:	4b86      	ldr	r3, [pc, #536]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800765c:	d108      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800765e:	f107 0318 	add.w	r3, r7, #24
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fca6 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800766c:	f000 bc7f 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007674:	f000 bc7b 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007678:	4b7c      	ldr	r3, [pc, #496]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007684:	d108      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007686:	f107 030c 	add.w	r3, r7, #12
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fde6 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007694:	f000 bc6b 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800769c:	f000 bc67 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076a0:	4b72      	ldr	r3, [pc, #456]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80076a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076aa:	4b70      	ldr	r3, [pc, #448]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0304 	and.w	r3, r3, #4
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d10c      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80076b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d109      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076bc:	4b6b      	ldr	r3, [pc, #428]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	08db      	lsrs	r3, r3, #3
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	4a6a      	ldr	r2, [pc, #424]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
 80076cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076ce:	e01f      	b.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076d0:	4b66      	ldr	r3, [pc, #408]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076dc:	d106      	bne.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80076de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076e4:	d102      	bne.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076e6:	4b63      	ldr	r3, [pc, #396]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80076e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076ea:	e011      	b.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076ec:	4b5f      	ldr	r3, [pc, #380]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076f8:	d106      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80076fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007700:	d102      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007702:	4b5d      	ldr	r3, [pc, #372]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007706:	e003      	b.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800770c:	f000 bc2f 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007710:	f000 bc2d 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007714:	4b59      	ldr	r3, [pc, #356]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007718:	f000 bc29 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007720:	f000 bc25 	b.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007728:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800772c:	430b      	orrs	r3, r1
 800772e:	f040 80a7 	bne.w	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007732:	4b4e      	ldr	r3, [pc, #312]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007736:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800773a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007742:	d054      	beq.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800774a:	f200 808b 	bhi.w	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007754:	f000 8083 	beq.w	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800775e:	f200 8081 	bhi.w	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007768:	d02f      	beq.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007770:	d878      	bhi.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800777e:	d012      	beq.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007780:	e070      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007782:	4b3a      	ldr	r3, [pc, #232]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800778e:	d107      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007794:	4618      	mov	r0, r3
 8007796:	f000 feb5 	bl	8008504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800779e:	e3e6      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a4:	e3e3      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077a6:	4b31      	ldr	r3, [pc, #196]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077b2:	d107      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b4:	f107 0318 	add.w	r3, r7, #24
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fbfb 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077c2:	e3d4      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c8:	e3d1      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077ca:	4b28      	ldr	r3, [pc, #160]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d6:	d107      	bne.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077d8:	f107 030c 	add.w	r3, r7, #12
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fd3d 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077e6:	e3c2      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ec:	e3bf      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077ee:	4b1f      	ldr	r3, [pc, #124]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80077f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077f8:	4b1c      	ldr	r3, [pc, #112]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b04      	cmp	r3, #4
 8007802:	d10c      	bne.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800780a:	4b18      	ldr	r3, [pc, #96]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	08db      	lsrs	r3, r3, #3
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	4a16      	ldr	r2, [pc, #88]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007816:	fa22 f303 	lsr.w	r3, r2, r3
 800781a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800781c:	e01e      	b.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800781e:	4b13      	ldr	r3, [pc, #76]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800782a:	d106      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800782c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007832:	d102      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007834:	4b0f      	ldr	r3, [pc, #60]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007838:	e010      	b.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800783a:	4b0c      	ldr	r3, [pc, #48]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007846:	d106      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800784e:	d102      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007850:	4b09      	ldr	r3, [pc, #36]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007854:	e002      	b.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800785a:	e388      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800785c:	e387      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800785e:	4b07      	ldr	r3, [pc, #28]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007862:	e384      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007868:	e381      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800786a:	bf00      	nop
 800786c:	58024400 	.word	0x58024400
 8007870:	03d09000 	.word	0x03d09000
 8007874:	003d0900 	.word	0x003d0900
 8007878:	02dc6c00 	.word	0x02dc6c00
 800787c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007884:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007888:	430b      	orrs	r3, r1
 800788a:	f040 809c 	bne.w	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800788e:	4b9e      	ldr	r3, [pc, #632]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007892:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007896:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800789e:	d054      	beq.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078a6:	f200 808b 	bhi.w	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078b0:	f000 8083 	beq.w	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80078b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078ba:	f200 8081 	bhi.w	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078c4:	d02f      	beq.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078cc:	d878      	bhi.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80078d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078da:	d012      	beq.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80078dc:	e070      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078de:	4b8a      	ldr	r3, [pc, #552]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078ea:	d107      	bne.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fe07 	bl	8008504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078fa:	e338      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007900:	e335      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007902:	4b81      	ldr	r3, [pc, #516]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800790a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800790e:	d107      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007910:	f107 0318 	add.w	r3, r7, #24
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fb4d 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800791e:	e326      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007924:	e323      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007926:	4b78      	ldr	r3, [pc, #480]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800792e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007932:	d107      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fc8f 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007942:	e314      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007948:	e311      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800794a:	4b6f      	ldr	r3, [pc, #444]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800794c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800794e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007954:	4b6c      	ldr	r3, [pc, #432]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b04      	cmp	r3, #4
 800795e:	d10c      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007962:	2b00      	cmp	r3, #0
 8007964:	d109      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007966:	4b68      	ldr	r3, [pc, #416]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	08db      	lsrs	r3, r3, #3
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	4a66      	ldr	r2, [pc, #408]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007972:	fa22 f303 	lsr.w	r3, r2, r3
 8007976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007978:	e01e      	b.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800797a:	4b63      	ldr	r3, [pc, #396]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007986:	d106      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800798e:	d102      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007990:	4b5f      	ldr	r3, [pc, #380]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007994:	e010      	b.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007996:	4b5c      	ldr	r3, [pc, #368]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800799e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079a2:	d106      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80079a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079aa:	d102      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079ac:	4b59      	ldr	r3, [pc, #356]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b0:	e002      	b.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80079b6:	e2da      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80079b8:	e2d9      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079ba:	4b57      	ldr	r3, [pc, #348]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80079bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079be:	e2d6      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c4:	e2d3      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80079c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ca:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80079ce:	430b      	orrs	r3, r1
 80079d0:	f040 80a7 	bne.w	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80079d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80079d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80079dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80079de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079e4:	d055      	beq.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80079e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079ec:	f200 8096 	bhi.w	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80079f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079f6:	f000 8084 	beq.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a00:	f200 808c 	bhi.w	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a0a:	d030      	beq.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a12:	f200 8083 	bhi.w	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a22:	d012      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007a24:	e07a      	b.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a26:	4b38      	ldr	r3, [pc, #224]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a32:	d107      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fd63 	bl	8008504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a42:	e294      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a48:	e291      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a56:	d107      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a58:	f107 0318 	add.w	r3, r7, #24
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 faa9 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a66:	e282      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6c:	e27f      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a6e:	4b26      	ldr	r3, [pc, #152]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a7a:	d107      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a7c:	f107 030c 	add.w	r3, r7, #12
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fbeb 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8a:	e270      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a90:	e26d      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a92:	4b1d      	ldr	r3, [pc, #116]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d10c      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d109      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aae:	4b16      	ldr	r3, [pc, #88]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	08db      	lsrs	r3, r3, #3
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	4a14      	ldr	r2, [pc, #80]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007aba:	fa22 f303 	lsr.w	r3, r2, r3
 8007abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac0:	e01e      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ac2:	4b11      	ldr	r3, [pc, #68]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ace:	d106      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ad6:	d102      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007adc:	e010      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ade:	4b0a      	ldr	r3, [pc, #40]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aea:	d106      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007af2:	d102      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007af4:	4b07      	ldr	r3, [pc, #28]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af8:	e002      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007afe:	e236      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b00:	e235      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b02:	4b05      	ldr	r3, [pc, #20]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b06:	e232      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b08:	58024400 	.word	0x58024400
 8007b0c:	03d09000 	.word	0x03d09000
 8007b10:	003d0900 	.word	0x003d0900
 8007b14:	02dc6c00 	.word	0x02dc6c00
 8007b18:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b20:	e225      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b26:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	f040 8085 	bne.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007b30:	4b9c      	ldr	r3, [pc, #624]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b34:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007b38:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b40:	d06b      	beq.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b48:	d874      	bhi.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b50:	d056      	beq.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b58:	d86c      	bhi.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b60:	d03b      	beq.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b68:	d864      	bhi.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b70:	d021      	beq.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b78:	d85c      	bhi.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b86:	d004      	beq.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007b88:	e054      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b8a:	f7fe fb5f 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8007b8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b90:	e1ed      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b92:	4b84      	ldr	r3, [pc, #528]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b9e:	d107      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba0:	f107 0318 	add.w	r3, r7, #24
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fa05 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bae:	e1de      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb4:	e1db      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bc2:	d107      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bc4:	f107 030c 	add.w	r3, r7, #12
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fb47 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bd2:	e1cc      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd8:	e1c9      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007bda:	4b72      	ldr	r3, [pc, #456]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d109      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007be6:	4b6f      	ldr	r3, [pc, #444]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	08db      	lsrs	r3, r3, #3
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	4a6d      	ldr	r2, [pc, #436]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bf8:	e1b9      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bfe:	e1b6      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c00:	4b68      	ldr	r3, [pc, #416]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c0c:	d102      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007c0e:	4b67      	ldr	r3, [pc, #412]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c12:	e1ac      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c18:	e1a9      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c1a:	4b62      	ldr	r3, [pc, #392]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c26:	d102      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007c28:	4b61      	ldr	r3, [pc, #388]	@ (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c2c:	e19f      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c32:	e19c      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	e199      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c3e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007c42:	430b      	orrs	r3, r1
 8007c44:	d173      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007c46:	4b57      	ldr	r3, [pc, #348]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c4e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c56:	d02f      	beq.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c5e:	d863      	bhi.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c6c:	d012      	beq.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007c6e:	e05b      	b.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c70:	4b4c      	ldr	r3, [pc, #304]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c7c:	d107      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c7e:	f107 0318 	add.w	r3, r7, #24
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 f996 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c8c:	e16f      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c92:	e16c      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c94:	4b43      	ldr	r3, [pc, #268]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ca0:	d107      	bne.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ca2:	f107 030c 	add.w	r3, r7, #12
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fad8 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cb0:	e15d      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb6:	e15a      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007cc0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cc2:	4b38      	ldr	r3, [pc, #224]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0304 	and.w	r3, r3, #4
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d10c      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d109      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cd4:	4b33      	ldr	r3, [pc, #204]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	08db      	lsrs	r3, r3, #3
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	4a32      	ldr	r2, [pc, #200]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce6:	e01e      	b.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cf4:	d106      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cfc:	d102      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d02:	e010      	b.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d04:	4b27      	ldr	r3, [pc, #156]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d10:	d106      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d18:	d102      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d1a:	4b25      	ldr	r3, [pc, #148]	@ (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d1e:	e002      	b.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d24:	e123      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d26:	e122      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d2c:	e11f      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d32:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007d36:	430b      	orrs	r3, r1
 8007d38:	d13c      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d42:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d50:	d012      	beq.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007d52:	e023      	b.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d54:	4b13      	ldr	r3, [pc, #76]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d60:	d107      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fbcc 	bl	8008504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d70:	e0fd      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d76:	e0fa      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d78:	4b0a      	ldr	r3, [pc, #40]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d84:	d107      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d86:	f107 0318 	add.w	r3, r7, #24
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f912 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d94:	e0eb      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d9a:	e0e8      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da0:	e0e5      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007da2:	bf00      	nop
 8007da4:	58024400 	.word	0x58024400
 8007da8:	03d09000 	.word	0x03d09000
 8007dac:	003d0900 	.word	0x003d0900
 8007db0:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	f040 8085 	bne.w	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007dca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dd2:	d06b      	beq.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dda:	d874      	bhi.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de2:	d056      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dea:	d86c      	bhi.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007df2:	d03b      	beq.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007dfa:	d864      	bhi.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e02:	d021      	beq.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8007e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e0a:	d85c      	bhi.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8007e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e18:	d004      	beq.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007e1a:	e054      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e1c:	f000 f8b4 	bl	8007f88 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e20:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e22:	e0a4      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e24:	4b54      	ldr	r3, [pc, #336]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e30:	d107      	bne.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e32:	f107 0318 	add.w	r3, r7, #24
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f8bc 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e40:	e095      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e46:	e092      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e48:	4b4b      	ldr	r3, [pc, #300]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e54:	d107      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e56:	f107 030c 	add.w	r3, r7, #12
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f9fe 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e64:	e083      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e6a:	e080      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e6c:	4b42      	ldr	r3, [pc, #264]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d109      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e78:	4b3f      	ldr	r3, [pc, #252]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	08db      	lsrs	r3, r3, #3
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	4a3e      	ldr	r2, [pc, #248]	@ (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
 8007e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8a:	e070      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e90:	e06d      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e92:	4b39      	ldr	r3, [pc, #228]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e9e:	d102      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8007ea0:	4b37      	ldr	r3, [pc, #220]	@ (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea4:	e063      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eaa:	e060      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007eac:	4b32      	ldr	r3, [pc, #200]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eb8:	d102      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8007eba:	4b32      	ldr	r3, [pc, #200]	@ (8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ebe:	e056      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec4:	e053      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eca:	e050      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	d148      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007ed8:	4b27      	ldr	r3, [pc, #156]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007edc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ee0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ee8:	d02a      	beq.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ef0:	d838      	bhi.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007efe:	d00d      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007f00:	e030      	b.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f02:	4b1d      	ldr	r3, [pc, #116]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f0e:	d102      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8007f10:	4b1c      	ldr	r3, [pc, #112]	@ (8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f14:	e02b      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f1a:	e028      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f1c:	4b16      	ldr	r3, [pc, #88]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f28:	d107      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fae8 	bl	8008504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f38:	e019      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f3e:	e016      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f40:	4b0d      	ldr	r3, [pc, #52]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f4c:	d107      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f4e:	f107 0318 	add.w	r3, r7, #24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f82e 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f5c:	e007      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f62:	e004      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f68:	e001      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3740      	adds	r7, #64	@ 0x40
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	58024400 	.word	0x58024400
 8007f7c:	03d09000 	.word	0x03d09000
 8007f80:	003d0900 	.word	0x003d0900
 8007f84:	02dc6c00 	.word	0x02dc6c00

08007f88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f8c:	f7fe f92e 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8007f90:	4602      	mov	r2, r0
 8007f92:	4b06      	ldr	r3, [pc, #24]	@ (8007fac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	091b      	lsrs	r3, r3, #4
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	4904      	ldr	r1, [pc, #16]	@ (8007fb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f9e:	5ccb      	ldrb	r3, [r1, r3]
 8007fa0:	f003 031f 	and.w	r3, r3, #31
 8007fa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	58024400 	.word	0x58024400
 8007fb0:	08011e88 	.word	0x08011e88

08007fb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b089      	sub	sp, #36	@ 0x24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fbc:	4ba1      	ldr	r3, [pc, #644]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007fc6:	4b9f      	ldr	r3, [pc, #636]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fca:	0b1b      	lsrs	r3, r3, #12
 8007fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fd2:	4b9c      	ldr	r3, [pc, #624]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd6:	091b      	lsrs	r3, r3, #4
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007fde:	4b99      	ldr	r3, [pc, #612]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe2:	08db      	lsrs	r3, r3, #3
 8007fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8111 	beq.w	8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b02      	cmp	r3, #2
 8008006:	f000 8083 	beq.w	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b02      	cmp	r3, #2
 800800e:	f200 80a1 	bhi.w	8008154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d056      	beq.n	80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800801e:	e099      	b.n	8008154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008020:	4b88      	ldr	r3, [pc, #544]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d02d      	beq.n	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800802c:	4b85      	ldr	r3, [pc, #532]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	08db      	lsrs	r3, r3, #3
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	4a84      	ldr	r2, [pc, #528]	@ (8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008038:	fa22 f303 	lsr.w	r3, r2, r3
 800803c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	ee07 3a90 	vmov	s15, r3
 8008044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008056:	4b7b      	ldr	r3, [pc, #492]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008066:	ed97 6a03 	vldr	s12, [r7, #12]
 800806a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800806e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008086:	e087      	b.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809a:	4b6a      	ldr	r3, [pc, #424]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080ca:	e065      	b.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080de:	4b59      	ldr	r3, [pc, #356]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800810e:	e043      	b.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800811e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008122:	4b48      	ldr	r3, [pc, #288]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008132:	ed97 6a03 	vldr	s12, [r7, #12]
 8008136:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800813a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008152:	e021      	b.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008166:	4b37      	ldr	r3, [pc, #220]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008176:	ed97 6a03 	vldr	s12, [r7, #12]
 800817a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800817e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800818a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800818e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008196:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008198:	4b2a      	ldr	r3, [pc, #168]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800819a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819c:	0a5b      	lsrs	r3, r3, #9
 800819e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081be:	ee17 2a90 	vmov	r2, s15
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80081c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80081e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ec:	ee17 2a90 	vmov	r2, s15
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80081f4:	4b13      	ldr	r3, [pc, #76]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f8:	0e1b      	lsrs	r3, r3, #24
 80081fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800820a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800820e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800821a:	ee17 2a90 	vmov	r2, s15
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008222:	e008      	b.n	8008236 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	609a      	str	r2, [r3, #8]
}
 8008236:	bf00      	nop
 8008238:	3724      	adds	r7, #36	@ 0x24
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	58024400 	.word	0x58024400
 8008248:	03d09000 	.word	0x03d09000
 800824c:	46000000 	.word	0x46000000
 8008250:	4c742400 	.word	0x4c742400
 8008254:	4a742400 	.word	0x4a742400
 8008258:	4c371b00 	.word	0x4c371b00

0800825c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800825c:	b480      	push	{r7}
 800825e:	b089      	sub	sp, #36	@ 0x24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008264:	4ba1      	ldr	r3, [pc, #644]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800826e:	4b9f      	ldr	r3, [pc, #636]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008272:	0d1b      	lsrs	r3, r3, #20
 8008274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008278:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800827a:	4b9c      	ldr	r3, [pc, #624]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800827c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008286:	4b99      	ldr	r3, [pc, #612]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800828a:	08db      	lsrs	r3, r3, #3
 800828c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	fb02 f303 	mul.w	r3, r2, r3
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8111 	beq.w	80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	f000 8083 	beq.w	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	f200 80a1 	bhi.w	80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d056      	beq.n	8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80082c6:	e099      	b.n	80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082c8:	4b88      	ldr	r3, [pc, #544]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0320 	and.w	r3, r3, #32
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d02d      	beq.n	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082d4:	4b85      	ldr	r3, [pc, #532]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	08db      	lsrs	r3, r3, #3
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	4a84      	ldr	r2, [pc, #528]	@ (80084f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
 80082e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	ee07 3a90 	vmov	s15, r3
 80082ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fe:	4b7b      	ldr	r3, [pc, #492]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008312:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800832e:	e087      	b.n	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800833e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008342:	4b6a      	ldr	r3, [pc, #424]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008352:	ed97 6a03 	vldr	s12, [r7, #12]
 8008356:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800835a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008372:	e065      	b.n	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b59      	ldr	r3, [pc, #356]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b6:	e043      	b.n	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80083c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ca:	4b48      	ldr	r3, [pc, #288]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	ed97 6a03 	vldr	s12, [r7, #12]
 80083de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fa:	e021      	b.n	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800840a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840e:	4b37      	ldr	r3, [pc, #220]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008422:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800843e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008440:	4b2a      	ldr	r3, [pc, #168]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	0a5b      	lsrs	r3, r3, #9
 8008446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800845a:	edd7 6a07 	vldr	s13, [r7, #28]
 800845e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008466:	ee17 2a90 	vmov	r2, s15
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800846e:	4b1f      	ldr	r3, [pc, #124]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008472:	0c1b      	lsrs	r3, r3, #16
 8008474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008478:	ee07 3a90 	vmov	s15, r3
 800847c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008488:	edd7 6a07 	vldr	s13, [r7, #28]
 800848c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008494:	ee17 2a90 	vmov	r2, s15
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800849c:	4b13      	ldr	r3, [pc, #76]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a0:	0e1b      	lsrs	r3, r3, #24
 80084a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084c2:	ee17 2a90 	vmov	r2, s15
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084ca:	e008      	b.n	80084de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	609a      	str	r2, [r3, #8]
}
 80084de:	bf00      	nop
 80084e0:	3724      	adds	r7, #36	@ 0x24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	58024400 	.word	0x58024400
 80084f0:	03d09000 	.word	0x03d09000
 80084f4:	46000000 	.word	0x46000000
 80084f8:	4c742400 	.word	0x4c742400
 80084fc:	4a742400 	.word	0x4a742400
 8008500:	4c371b00 	.word	0x4c371b00

08008504 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008504:	b480      	push	{r7}
 8008506:	b089      	sub	sp, #36	@ 0x24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800850c:	4ba0      	ldr	r3, [pc, #640]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800850e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008510:	f003 0303 	and.w	r3, r3, #3
 8008514:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008516:	4b9e      	ldr	r3, [pc, #632]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851a:	091b      	lsrs	r3, r3, #4
 800851c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008520:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008522:	4b9b      	ldr	r3, [pc, #620]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800852c:	4b98      	ldr	r3, [pc, #608]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800852e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008530:	08db      	lsrs	r3, r3, #3
 8008532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	fb02 f303 	mul.w	r3, r2, r3
 800853c:	ee07 3a90 	vmov	s15, r3
 8008540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008544:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 8111 	beq.w	8008772 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	2b02      	cmp	r3, #2
 8008554:	f000 8083 	beq.w	800865e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	2b02      	cmp	r3, #2
 800855c:	f200 80a1 	bhi.w	80086a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d056      	beq.n	800861a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800856c:	e099      	b.n	80086a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800856e:	4b88      	ldr	r3, [pc, #544]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b00      	cmp	r3, #0
 8008578:	d02d      	beq.n	80085d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800857a:	4b85      	ldr	r3, [pc, #532]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	08db      	lsrs	r3, r3, #3
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	4a83      	ldr	r2, [pc, #524]	@ (8008794 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008586:	fa22 f303 	lsr.w	r3, r2, r3
 800858a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a4:	4b7a      	ldr	r3, [pc, #488]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	ee07 3a90 	vmov	s15, r3
 80085b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085d4:	e087      	b.n	80086e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800879c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80085e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e8:	4b69      	ldr	r3, [pc, #420]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800860c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008618:	e065      	b.n	80086e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008624:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862c:	4b58      	ldr	r3, [pc, #352]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008640:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800865c:	e043      	b.n	80086e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	ee07 3a90 	vmov	s15, r3
 8008664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008668:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80087a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800866c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008670:	4b47      	ldr	r3, [pc, #284]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008678:	ee07 3a90 	vmov	s15, r3
 800867c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008680:	ed97 6a03 	vldr	s12, [r7, #12]
 8008684:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086a0:	e021      	b.n	80086e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	ee07 3a90 	vmov	s15, r3
 80086a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800879c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80086b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b4:	4b36      	ldr	r3, [pc, #216]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086bc:	ee07 3a90 	vmov	s15, r3
 80086c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80086e6:	4b2a      	ldr	r3, [pc, #168]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ea:	0a5b      	lsrs	r3, r3, #9
 80086ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086f0:	ee07 3a90 	vmov	s15, r3
 80086f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008700:	edd7 6a07 	vldr	s13, [r7, #28]
 8008704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800870c:	ee17 2a90 	vmov	r2, s15
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008714:	4b1e      	ldr	r3, [pc, #120]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008718:	0c1b      	lsrs	r3, r3, #16
 800871a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800872a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800872e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800873a:	ee17 2a90 	vmov	r2, s15
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008742:	4b13      	ldr	r3, [pc, #76]	@ (8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008746:	0e1b      	lsrs	r3, r3, #24
 8008748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800874c:	ee07 3a90 	vmov	s15, r3
 8008750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800875c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008768:	ee17 2a90 	vmov	r2, s15
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008770:	e008      	b.n	8008784 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	609a      	str	r2, [r3, #8]
}
 8008784:	bf00      	nop
 8008786:	3724      	adds	r7, #36	@ 0x24
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	58024400 	.word	0x58024400
 8008794:	03d09000 	.word	0x03d09000
 8008798:	46000000 	.word	0x46000000
 800879c:	4c742400 	.word	0x4c742400
 80087a0:	4a742400 	.word	0x4a742400
 80087a4:	4c371b00 	.word	0x4c371b00

080087a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087b6:	4b53      	ldr	r3, [pc, #332]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d101      	bne.n	80087c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e099      	b.n	80088fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a4e      	ldr	r2, [pc, #312]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80087cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80087d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087d2:	f7fb fc4d 	bl	8004070 <HAL_GetTick>
 80087d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087d8:	e008      	b.n	80087ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80087da:	f7fb fc49 	bl	8004070 <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d901      	bls.n	80087ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e086      	b.n	80088fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087ec:	4b45      	ldr	r3, [pc, #276]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1f0      	bne.n	80087da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087f8:	4b42      	ldr	r3, [pc, #264]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80087fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	031b      	lsls	r3, r3, #12
 8008806:	493f      	ldr	r1, [pc, #252]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 8008808:	4313      	orrs	r3, r2
 800880a:	628b      	str	r3, [r1, #40]	@ 0x28
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	3b01      	subs	r3, #1
 8008812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	3b01      	subs	r3, #1
 800881c:	025b      	lsls	r3, r3, #9
 800881e:	b29b      	uxth	r3, r3
 8008820:	431a      	orrs	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	3b01      	subs	r3, #1
 8008828:	041b      	lsls	r3, r3, #16
 800882a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	3b01      	subs	r3, #1
 8008836:	061b      	lsls	r3, r3, #24
 8008838:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800883c:	4931      	ldr	r1, [pc, #196]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 800883e:	4313      	orrs	r3, r2
 8008840:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008842:	4b30      	ldr	r3, [pc, #192]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 8008844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008846:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	492d      	ldr	r1, [pc, #180]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 8008850:	4313      	orrs	r3, r2
 8008852:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008854:	4b2b      	ldr	r3, [pc, #172]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	f023 0220 	bic.w	r2, r3, #32
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	4928      	ldr	r1, [pc, #160]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 8008862:	4313      	orrs	r3, r2
 8008864:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008866:	4b27      	ldr	r3, [pc, #156]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 8008868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886a:	4a26      	ldr	r2, [pc, #152]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 800886c:	f023 0310 	bic.w	r3, r3, #16
 8008870:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008872:	4b24      	ldr	r3, [pc, #144]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 8008874:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008876:	4b24      	ldr	r3, [pc, #144]	@ (8008908 <RCCEx_PLL2_Config+0x160>)
 8008878:	4013      	ands	r3, r2
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	69d2      	ldr	r2, [r2, #28]
 800887e:	00d2      	lsls	r2, r2, #3
 8008880:	4920      	ldr	r1, [pc, #128]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 8008882:	4313      	orrs	r3, r2
 8008884:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008886:	4b1f      	ldr	r3, [pc, #124]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 8008888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888a:	4a1e      	ldr	r2, [pc, #120]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 800888c:	f043 0310 	orr.w	r3, r3, #16
 8008890:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008898:	4b1a      	ldr	r3, [pc, #104]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889c:	4a19      	ldr	r2, [pc, #100]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 800889e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088a4:	e00f      	b.n	80088c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d106      	bne.n	80088ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80088ac:	4b15      	ldr	r3, [pc, #84]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80088ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b0:	4a14      	ldr	r2, [pc, #80]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80088b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088b8:	e005      	b.n	80088c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088ba:	4b12      	ldr	r3, [pc, #72]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	4a11      	ldr	r2, [pc, #68]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80088c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80088c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088d2:	f7fb fbcd 	bl	8004070 <HAL_GetTick>
 80088d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088d8:	e008      	b.n	80088ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088da:	f7fb fbc9 	bl	8004070 <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d901      	bls.n	80088ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e006      	b.n	80088fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088ec:	4b05      	ldr	r3, [pc, #20]	@ (8008904 <RCCEx_PLL2_Config+0x15c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0f0      	beq.n	80088da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	58024400 	.word	0x58024400
 8008908:	ffff0007 	.word	0xffff0007

0800890c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800891a:	4b53      	ldr	r3, [pc, #332]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 800891c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	2b03      	cmp	r3, #3
 8008924:	d101      	bne.n	800892a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e099      	b.n	8008a5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800892a:	4b4f      	ldr	r3, [pc, #316]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a4e      	ldr	r2, [pc, #312]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008936:	f7fb fb9b 	bl	8004070 <HAL_GetTick>
 800893a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800893c:	e008      	b.n	8008950 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800893e:	f7fb fb97 	bl	8004070 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d901      	bls.n	8008950 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e086      	b.n	8008a5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008950:	4b45      	ldr	r3, [pc, #276]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f0      	bne.n	800893e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800895c:	4b42      	ldr	r3, [pc, #264]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 800895e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008960:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	051b      	lsls	r3, r3, #20
 800896a:	493f      	ldr	r1, [pc, #252]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 800896c:	4313      	orrs	r3, r2
 800896e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	3b01      	subs	r3, #1
 8008976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	3b01      	subs	r3, #1
 8008980:	025b      	lsls	r3, r3, #9
 8008982:	b29b      	uxth	r3, r3
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	3b01      	subs	r3, #1
 800898c:	041b      	lsls	r3, r3, #16
 800898e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	3b01      	subs	r3, #1
 800899a:	061b      	lsls	r3, r3, #24
 800899c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80089a0:	4931      	ldr	r1, [pc, #196]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089a6:	4b30      	ldr	r3, [pc, #192]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	492d      	ldr	r1, [pc, #180]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089b8:	4b2b      	ldr	r3, [pc, #172]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	4928      	ldr	r1, [pc, #160]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089ca:	4b27      	ldr	r3, [pc, #156]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ce:	4a26      	ldr	r2, [pc, #152]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089d6:	4b24      	ldr	r3, [pc, #144]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089da:	4b24      	ldr	r3, [pc, #144]	@ (8008a6c <RCCEx_PLL3_Config+0x160>)
 80089dc:	4013      	ands	r3, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	69d2      	ldr	r2, [r2, #28]
 80089e2:	00d2      	lsls	r2, r2, #3
 80089e4:	4920      	ldr	r1, [pc, #128]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089ea:	4b1f      	ldr	r3, [pc, #124]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d106      	bne.n	8008a0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 80089fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a00:	4a19      	ldr	r2, [pc, #100]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008a02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008a06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a08:	e00f      	b.n	8008a2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d106      	bne.n	8008a1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a10:	4b15      	ldr	r3, [pc, #84]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a14:	4a14      	ldr	r2, [pc, #80]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008a16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a1c:	e005      	b.n	8008a2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a1e:	4b12      	ldr	r3, [pc, #72]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a22:	4a11      	ldr	r2, [pc, #68]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008a24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a36:	f7fb fb1b 	bl	8004070 <HAL_GetTick>
 8008a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a3c:	e008      	b.n	8008a50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a3e:	f7fb fb17 	bl	8004070 <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d901      	bls.n	8008a50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e006      	b.n	8008a5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a50:	4b05      	ldr	r3, [pc, #20]	@ (8008a68 <RCCEx_PLL3_Config+0x15c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0f0      	beq.n	8008a3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	58024400 	.word	0x58024400
 8008a6c:	ffff0007 	.word	0xffff0007

08008a70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d071      	beq.n	8008b66 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7fa fcdc 	bl	8003454 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f003 0310 	and.w	r3, r3, #16
 8008aae:	2b10      	cmp	r3, #16
 8008ab0:	d050      	beq.n	8008b54 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	22ca      	movs	r2, #202	@ 0xca
 8008ab8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2253      	movs	r2, #83	@ 0x53
 8008ac0:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fa4a 	bl	8008f5c <RTC_EnterInitMode>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d124      	bne.n	8008b1c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6899      	ldr	r1, [r3, #8]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	4b24      	ldr	r3, [pc, #144]	@ (8008b70 <HAL_RTC_Init+0x100>)
 8008ade:	400b      	ands	r3, r1
 8008ae0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6899      	ldr	r1, [r3, #8]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	431a      	orrs	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	431a      	orrs	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	0419      	lsls	r1, r3, #16
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fa56 	bl	8008fc4 <RTC_ExitInitMode>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d113      	bne.n	8008b4a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0203 	bic.w	r2, r2, #3
 8008b30:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	22ff      	movs	r2, #255	@ 0xff
 8008b50:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b52:	e001      	b.n	8008b58 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d103      	bne.n	8008b66 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	ff8fffbf 	.word	0xff8fffbf

08008b74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_RTC_SetTime+0x1a>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e089      	b.n	8008ca2 <HAL_RTC_SetTime+0x12e>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	22ca      	movs	r2, #202	@ 0xca
 8008ba4:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2253      	movs	r2, #83	@ 0x53
 8008bac:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 f9d4 	bl	8008f5c <RTC_EnterInitMode>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008bb8:	7cfb      	ldrb	r3, [r7, #19]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d161      	bne.n	8008c82 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d126      	bne.n	8008c12 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d102      	bne.n	8008bd8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fa2f 	bl	8009040 <RTC_ByteToBcd2>
 8008be2:	4603      	mov	r3, r0
 8008be4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fa28 	bl	8009040 <RTC_ByteToBcd2>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bf4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	789b      	ldrb	r3, [r3, #2]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fa20 	bl	8009040 <RTC_ByteToBcd2>
 8008c00:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c02:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	78db      	ldrb	r3, [r3, #3]
 8008c0a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	e018      	b.n	8008c44 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	785b      	ldrb	r3, [r3, #1]
 8008c30:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c32:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c38:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	78db      	ldrb	r3, [r3, #3]
 8008c3e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	6979      	ldr	r1, [r7, #20]
 8008c4a:	4b18      	ldr	r3, [pc, #96]	@ (8008cac <HAL_RTC_SetTime+0x138>)
 8008c4c:	400b      	ands	r3, r1
 8008c4e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008c5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6899      	ldr	r1, [r3, #8]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 f9a3 	bl	8008fc4 <RTC_ExitInitMode>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	22ff      	movs	r2, #255	@ 0xff
 8008c88:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008c8a:	7cfb      	ldrb	r3, [r7, #19]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d103      	bne.n	8008c98 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008ca0:	7cfb      	ldrb	r3, [r7, #19]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd90      	pop	{r4, r7, pc}
 8008caa:	bf00      	nop
 8008cac:	007f7f7f 	.word	0x007f7f7f

08008cb0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	4b22      	ldr	r3, [pc, #136]	@ (8008d64 <HAL_RTC_GetTime+0xb4>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	0c1b      	lsrs	r3, r3, #16
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	0d9b      	lsrs	r3, r3, #22
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d11a      	bne.n	8008d5a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 f9a9 	bl	8009080 <RTC_Bcd2ToByte>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	461a      	mov	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f9a0 	bl	8009080 <RTC_Bcd2ToByte>
 8008d40:	4603      	mov	r3, r0
 8008d42:	461a      	mov	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	789b      	ldrb	r3, [r3, #2]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 f997 	bl	8009080 <RTC_Bcd2ToByte>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	007f7f7f 	.word	0x007f7f7f

08008d68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d68:	b590      	push	{r4, r7, lr}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <HAL_RTC_SetDate+0x1a>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	e073      	b.n	8008e6a <HAL_RTC_SetDate+0x102>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10e      	bne.n	8008db6 <HAL_RTC_SetDate+0x4e>
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	785b      	ldrb	r3, [r3, #1]
 8008d9c:	f003 0310 	and.w	r3, r3, #16
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d008      	beq.n	8008db6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	f023 0310 	bic.w	r3, r3, #16
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	330a      	adds	r3, #10
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d11c      	bne.n	8008df6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	78db      	ldrb	r3, [r3, #3]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 f93d 	bl	8009040 <RTC_ByteToBcd2>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	785b      	ldrb	r3, [r3, #1]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 f936 	bl	8009040 <RTC_ByteToBcd2>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008dd8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	789b      	ldrb	r3, [r3, #2]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 f92e 	bl	8009040 <RTC_ByteToBcd2>
 8008de4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008de6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008df0:	4313      	orrs	r3, r2
 8008df2:	617b      	str	r3, [r7, #20]
 8008df4:	e00e      	b.n	8008e14 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	78db      	ldrb	r3, [r3, #3]
 8008dfa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	785b      	ldrb	r3, [r3, #1]
 8008e00:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e02:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008e08:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	22ca      	movs	r2, #202	@ 0xca
 8008e1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2253      	movs	r2, #83	@ 0x53
 8008e22:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 f899 	bl	8008f5c <RTC_EnterInitMode>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008e2e:	7cfb      	ldrb	r3, [r7, #19]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	6979      	ldr	r1, [r7, #20]
 8008e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e74 <HAL_RTC_SetDate+0x10c>)
 8008e3c:	400b      	ands	r3, r1
 8008e3e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f8bf 	bl	8008fc4 <RTC_ExitInitMode>
 8008e46:	4603      	mov	r3, r0
 8008e48:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	22ff      	movs	r2, #255	@ 0xff
 8008e50:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008e52:	7cfb      	ldrb	r3, [r7, #19]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d103      	bne.n	8008e60 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008e68:	7cfb      	ldrb	r3, [r7, #19]


}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd90      	pop	{r4, r7, pc}
 8008e72:	bf00      	nop
 8008e74:	00ffff3f 	.word	0x00ffff3f

08008e78 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	4b21      	ldr	r3, [pc, #132]	@ (8008f10 <HAL_RTC_GetDate+0x98>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	f003 031f 	and.w	r3, r3, #31
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	0b5b      	lsrs	r3, r3, #13
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d11a      	bne.n	8008f04 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	78db      	ldrb	r3, [r3, #3]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 f8d4 	bl	8009080 <RTC_Bcd2ToByte>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	461a      	mov	r2, r3
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f8cb 	bl	8009080 <RTC_Bcd2ToByte>
 8008eea:	4603      	mov	r3, r0
 8008eec:	461a      	mov	r2, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	789b      	ldrb	r3, [r3, #2]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f8c2 	bl	8009080 <RTC_Bcd2ToByte>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	00ffff3f 	.word	0x00ffff3f

08008f14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a0d      	ldr	r2, [pc, #52]	@ (8008f58 <HAL_RTC_WaitForSynchro+0x44>)
 8008f22:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8008f24:	f7fb f8a4 	bl	8004070 <HAL_GetTick>
 8008f28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f2a:	e009      	b.n	8008f40 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f2c:	f7fb f8a0 	bl	8004070 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f3a:	d901      	bls.n	8008f40 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e007      	b.n	8008f50 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0ee      	beq.n	8008f2c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	0003ff5f 	.word	0x0003ff5f

08008f5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d120      	bne.n	8008fb8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008f80:	f7fb f876 	bl	8004070 <HAL_GetTick>
 8008f84:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008f86:	e00d      	b.n	8008fa4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008f88:	f7fb f872 	bl	8004070 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f96:	d905      	bls.n	8008fa4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d102      	bne.n	8008fb8 <RTC_EnterInitMode+0x5c>
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d1e7      	bne.n	8008f88 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800903c <RTC_ExitInitMode+0x78>)
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	4a19      	ldr	r2, [pc, #100]	@ (800903c <RTC_ExitInitMode+0x78>)
 8008fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fda:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008fdc:	4b17      	ldr	r3, [pc, #92]	@ (800903c <RTC_ExitInitMode+0x78>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f003 0320 	and.w	r3, r3, #32
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10c      	bne.n	8009002 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff ff93 	bl	8008f14 <HAL_RTC_WaitForSynchro>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d01e      	beq.n	8009032 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	73fb      	strb	r3, [r7, #15]
 8009000:	e017      	b.n	8009032 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009002:	4b0e      	ldr	r3, [pc, #56]	@ (800903c <RTC_ExitInitMode+0x78>)
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	4a0d      	ldr	r2, [pc, #52]	@ (800903c <RTC_ExitInitMode+0x78>)
 8009008:	f023 0320 	bic.w	r3, r3, #32
 800900c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff ff80 	bl	8008f14 <HAL_RTC_WaitForSynchro>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2203      	movs	r2, #3
 800901e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009026:	4b05      	ldr	r3, [pc, #20]	@ (800903c <RTC_ExitInitMode+0x78>)
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	4a04      	ldr	r2, [pc, #16]	@ (800903c <RTC_ExitInitMode+0x78>)
 800902c:	f043 0320 	orr.w	r3, r3, #32
 8009030:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009032:	7bfb      	ldrb	r3, [r7, #15]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	58004000 	.word	0x58004000

08009040 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009052:	e005      	b.n	8009060 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3301      	adds	r3, #1
 8009058:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800905a:	7afb      	ldrb	r3, [r7, #11]
 800905c:	3b0a      	subs	r3, #10
 800905e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	2b09      	cmp	r3, #9
 8009064:	d8f6      	bhi.n	8009054 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	b2da      	uxtb	r2, r3
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	4313      	orrs	r3, r2
 8009072:	b2db      	uxtb	r3, r3
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800908a:	79fb      	ldrb	r3, [r7, #7]
 800908c:	091b      	lsrs	r3, r3, #4
 800908e:	b2db      	uxtb	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	0092      	lsls	r2, r2, #2
 8009094:	4413      	add	r3, r2
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	f003 030f 	and.w	r3, r3, #15
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	4413      	add	r3, r2
 80090a6:	b2db      	uxtb	r3, r3
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08a      	sub	sp, #40	@ 0x28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e075      	b.n	80091b2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d105      	bne.n	80090de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7fa f9ed 	bl	80034b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2204      	movs	r2, #4
 80090e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f868 	bl	80091bc <HAL_SD_InitCard>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e05d      	b.n	80091b2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80090f6:	f107 0308 	add.w	r3, r7, #8
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fdb5 	bl	8009c6c <HAL_SD_GetCardStatus>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e052      	b.n	80091b2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800910c:	7e3b      	ldrb	r3, [r7, #24]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009112:	7e7b      	ldrb	r3, [r7, #25]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911c:	2b01      	cmp	r3, #1
 800911e:	d10a      	bne.n	8009136 <HAL_SD_Init+0x82>
 8009120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009122:	2b00      	cmp	r3, #0
 8009124:	d102      	bne.n	800912c <HAL_SD_Init+0x78>
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009132:	659a      	str	r2, [r3, #88]	@ 0x58
 8009134:	e00b      	b.n	800914e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913a:	2b01      	cmp	r3, #1
 800913c:	d104      	bne.n	8009148 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009144:	659a      	str	r2, [r3, #88]	@ 0x58
 8009146:	e002      	b.n	800914e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fe73 	bl	8009e40 <HAL_SD_ConfigWideBusOperation>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e026      	b.n	80091b2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009164:	f7fa ff84 	bl	8004070 <HAL_GetTick>
 8009168:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800916a:	e011      	b.n	8009190 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800916c:	f7fa ff80 	bl	8004070 <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800917a:	d109      	bne.n	8009190 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009182:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e010      	b.n	80091b2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 ff67 	bl	800a064 <HAL_SD_GetCardState>
 8009196:	4603      	mov	r3, r0
 8009198:	2b04      	cmp	r3, #4
 800919a:	d1e7      	bne.n	800916c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3728      	adds	r7, #40	@ 0x28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80091bc:	b590      	push	{r4, r7, lr}
 80091be:	b08d      	sub	sp, #52	@ 0x34
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80091d4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80091d8:	f04f 0100 	mov.w	r1, #0
 80091dc:	f7fe fa02 	bl	80075e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80091e0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d109      	bne.n	80091fc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80091f6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e070      	b.n	80092de <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80091fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	4a39      	ldr	r2, [pc, #228]	@ (80092e8 <HAL_SD_InitCard+0x12c>)
 8009202:	fba2 2303 	umull	r2, r3, r2, r3
 8009206:	091b      	lsrs	r3, r3, #4
 8009208:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681c      	ldr	r4, [r3, #0]
 800920e:	466a      	mov	r2, sp
 8009210:	f107 0318 	add.w	r3, r7, #24
 8009214:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009218:	e882 0003 	stmia.w	r2, {r0, r1}
 800921c:	f107 030c 	add.w	r3, r7, #12
 8009220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009222:	4620      	mov	r0, r4
 8009224:	f003 f998 	bl	800c558 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f003 f9db 	bl	800c5e8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009242:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	d007      	beq.n	800925a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800924a:	4a28      	ldr	r2, [pc, #160]	@ (80092ec <HAL_SD_InitCard+0x130>)
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009252:	3301      	adds	r3, #1
 8009254:	4618      	mov	r0, r3
 8009256:	f7fa ff17 	bl	8004088 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fff0 	bl	800a240 <SD_PowerON>
 8009260:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00b      	beq.n	8009280 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e02e      	b.n	80092de <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 ff0f 	bl	800a0a4 <SD_InitCard>
 8009286:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00b      	beq.n	80092a6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800929a:	6a3b      	ldr	r3, [r7, #32]
 800929c:	431a      	orrs	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e01b      	b.n	80092de <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092ae:	4618      	mov	r0, r3
 80092b0:	f003 fa30 	bl	800c714 <SDMMC_CmdBlockLength>
 80092b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00f      	beq.n	80092dc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0b      	ldr	r2, [pc, #44]	@ (80092f0 <HAL_SD_InitCard+0x134>)
 80092c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e000      	b.n	80092de <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	372c      	adds	r7, #44	@ 0x2c
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd90      	pop	{r4, r7, pc}
 80092e6:	bf00      	nop
 80092e8:	014f8b59 	.word	0x014f8b59
 80092ec:	00012110 	.word	0x00012110
 80092f0:	1fe00fff 	.word	0x1fe00fff

080092f4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b092      	sub	sp, #72	@ 0x48
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009302:	f7fa feb5 	bl	8004070 <HAL_GetTick>
 8009306:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d107      	bne.n	8009326 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800931a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e167      	b.n	80095f6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b01      	cmp	r3, #1
 8009330:	f040 815a 	bne.w	80095e8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800933a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	441a      	add	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009344:	429a      	cmp	r2, r3
 8009346:	d907      	bls.n	8009358 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800934c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e14e      	b.n	80095f6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2203      	movs	r2, #3
 800935c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2200      	movs	r2, #0
 8009366:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936c:	2b01      	cmp	r3, #1
 800936e:	d002      	beq.n	8009376 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	025b      	lsls	r3, r3, #9
 8009374:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800937a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	025b      	lsls	r3, r3, #9
 8009380:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009382:	2390      	movs	r3, #144	@ 0x90
 8009384:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009386:	2302      	movs	r3, #2
 8009388:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800938a:	2300      	movs	r3, #0
 800938c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800938e:	2300      	movs	r3, #0
 8009390:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f107 0214 	add.w	r2, r7, #20
 800939a:	4611      	mov	r1, r2
 800939c:	4618      	mov	r0, r3
 800939e:	f003 f98d 	bl	800c6bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093b0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d90a      	bls.n	80093ce <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2202      	movs	r2, #2
 80093bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80093c4:	4618      	mov	r0, r3
 80093c6:	f003 f9eb 	bl	800c7a0 <SDMMC_CmdReadMultiBlock>
 80093ca:	6478      	str	r0, [r7, #68]	@ 0x44
 80093cc:	e009      	b.n	80093e2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80093da:	4618      	mov	r0, r3
 80093dc:	f003 f9bd 	bl	800c75a <SDMMC_CmdReadSingleBlock>
 80093e0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80093e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d012      	beq.n	800940e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a84      	ldr	r2, [pc, #528]	@ (8009600 <HAL_SD_ReadBlocks+0x30c>)
 80093ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093f6:	431a      	orrs	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e0f3      	b.n	80095f6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009412:	e058      	b.n	80094c6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800941a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d033      	beq.n	800948a <HAL_SD_ReadBlocks+0x196>
 8009422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009424:	2b1f      	cmp	r3, #31
 8009426:	d930      	bls.n	800948a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8009428:	2300      	movs	r3, #0
 800942a:	643b      	str	r3, [r7, #64]	@ 0x40
 800942c:	e027      	b.n	800947e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f003 f8ba 	bl	800c5ac <SDMMC_ReadFIFO>
 8009438:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800943a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943c:	b2da      	uxtb	r2, r3
 800943e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009440:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009444:	3301      	adds	r3, #1
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944a:	0a1b      	lsrs	r3, r3, #8
 800944c:	b2da      	uxtb	r2, r3
 800944e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009450:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009454:	3301      	adds	r3, #1
 8009456:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945a:	0c1b      	lsrs	r3, r3, #16
 800945c:	b2da      	uxtb	r2, r3
 800945e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009460:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009464:	3301      	adds	r3, #1
 8009466:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946a:	0e1b      	lsrs	r3, r3, #24
 800946c:	b2da      	uxtb	r2, r3
 800946e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009470:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009474:	3301      	adds	r3, #1
 8009476:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8009478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800947a:	3301      	adds	r3, #1
 800947c:	643b      	str	r3, [r7, #64]	@ 0x40
 800947e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009480:	2b07      	cmp	r3, #7
 8009482:	d9d4      	bls.n	800942e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009486:	3b20      	subs	r3, #32
 8009488:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800948a:	f7fa fdf1 	bl	8004070 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009496:	429a      	cmp	r2, r3
 8009498:	d902      	bls.n	80094a0 <HAL_SD_ReadBlocks+0x1ac>
 800949a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800949c:	2b00      	cmp	r3, #0
 800949e:	d112      	bne.n	80094c6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a56      	ldr	r2, [pc, #344]	@ (8009600 <HAL_SD_ReadBlocks+0x30c>)
 80094a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e097      	b.n	80095f6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094cc:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d09f      	beq.n	8009414 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094e2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d022      	beq.n	8009538 <HAL_SD_ReadBlocks+0x244>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d91f      	bls.n	8009538 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094fc:	2b03      	cmp	r3, #3
 80094fe:	d01b      	beq.n	8009538 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	f003 f9b5 	bl	800c874 <SDMMC_CmdStopTransfer>
 800950a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800950c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800950e:	2b00      	cmp	r3, #0
 8009510:	d012      	beq.n	8009538 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a3a      	ldr	r2, [pc, #232]	@ (8009600 <HAL_SD_ReadBlocks+0x30c>)
 8009518:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800951e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009520:	431a      	orrs	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e05e      	b.n	80095f6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953e:	f003 0308 	and.w	r3, r3, #8
 8009542:	2b00      	cmp	r3, #0
 8009544:	d012      	beq.n	800956c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a2d      	ldr	r2, [pc, #180]	@ (8009600 <HAL_SD_ReadBlocks+0x30c>)
 800954c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009552:	f043 0208 	orr.w	r2, r3, #8
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e044      	b.n	80095f6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d012      	beq.n	80095a0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a20      	ldr	r2, [pc, #128]	@ (8009600 <HAL_SD_ReadBlocks+0x30c>)
 8009580:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009586:	f043 0202 	orr.w	r2, r3, #2
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e02a      	b.n	80095f6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095a6:	f003 0320 	and.w	r3, r3, #32
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d012      	beq.n	80095d4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a13      	ldr	r2, [pc, #76]	@ (8009600 <HAL_SD_ReadBlocks+0x30c>)
 80095b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ba:	f043 0220 	orr.w	r2, r3, #32
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e010      	b.n	80095f6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a0a      	ldr	r2, [pc, #40]	@ (8009604 <HAL_SD_ReadBlocks+0x310>)
 80095da:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	e006      	b.n	80095f6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
  }
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3748      	adds	r7, #72	@ 0x48
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	1fe00fff 	.word	0x1fe00fff
 8009604:	18000f3a 	.word	0x18000f3a

08009608 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b092      	sub	sp, #72	@ 0x48
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
 8009614:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009616:	f7fa fd2b 	bl	8004070 <HAL_GetTick>
 800961a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d107      	bne.n	800963a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800962e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e16b      	b.n	8009912 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b01      	cmp	r3, #1
 8009644:	f040 815e 	bne.w	8009904 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800964e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	441a      	add	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009658:	429a      	cmp	r2, r3
 800965a:	d907      	bls.n	800966c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009660:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e152      	b.n	8009912 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2203      	movs	r2, #3
 8009670:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2200      	movs	r2, #0
 800967a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009680:	2b01      	cmp	r3, #1
 8009682:	d002      	beq.n	800968a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	025b      	lsls	r3, r3, #9
 8009688:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800968a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800968e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	025b      	lsls	r3, r3, #9
 8009694:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009696:	2390      	movs	r3, #144	@ 0x90
 8009698:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800969a:	2300      	movs	r3, #0
 800969c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800969e:	2300      	movs	r3, #0
 80096a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80096a2:	2300      	movs	r3, #0
 80096a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f107 0218 	add.w	r2, r7, #24
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f003 f803 	bl	800c6bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096c4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d90a      	bls.n	80096e2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2220      	movs	r2, #32
 80096d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80096d8:	4618      	mov	r0, r3
 80096da:	f003 f8a7 	bl	800c82c <SDMMC_CmdWriteMultiBlock>
 80096de:	6478      	str	r0, [r7, #68]	@ 0x44
 80096e0:	e009      	b.n	80096f6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2210      	movs	r2, #16
 80096e6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80096ee:	4618      	mov	r0, r3
 80096f0:	f003 f879 	bl	800c7e6 <SDMMC_CmdWriteSingleBlock>
 80096f4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80096f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d012      	beq.n	8009722 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a86      	ldr	r2, [pc, #536]	@ (800991c <HAL_SD_WriteBlocks+0x314>)
 8009702:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800970a:	431a      	orrs	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e0f7      	b.n	8009912 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009726:	e05c      	b.n	80097e2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800972e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d037      	beq.n	80097a6 <HAL_SD_WriteBlocks+0x19e>
 8009736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009738:	2b1f      	cmp	r3, #31
 800973a:	d934      	bls.n	80097a6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800973c:	2300      	movs	r3, #0
 800973e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009740:	e02b      	b.n	800979a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8009742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974a:	3301      	adds	r3, #1
 800974c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800974e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	021a      	lsls	r2, r3, #8
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	4313      	orrs	r3, r2
 8009758:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800975a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800975c:	3301      	adds	r3, #1
 800975e:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	041a      	lsls	r2, r3, #16
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800976c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976e:	3301      	adds	r3, #1
 8009770:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	061a      	lsls	r2, r3, #24
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	4313      	orrs	r3, r2
 800977c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800977e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009780:	3301      	adds	r3, #1
 8009782:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f107 0214 	add.w	r2, r7, #20
 800978c:	4611      	mov	r1, r2
 800978e:	4618      	mov	r0, r3
 8009790:	f002 ff19 	bl	800c5c6 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009796:	3301      	adds	r3, #1
 8009798:	643b      	str	r3, [r7, #64]	@ 0x40
 800979a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800979c:	2b07      	cmp	r3, #7
 800979e:	d9d0      	bls.n	8009742 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80097a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a2:	3b20      	subs	r3, #32
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80097a6:	f7fa fc63 	bl	8004070 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d902      	bls.n	80097bc <HAL_SD_WriteBlocks+0x1b4>
 80097b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d112      	bne.n	80097e2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a56      	ldr	r2, [pc, #344]	@ (800991c <HAL_SD_WriteBlocks+0x314>)
 80097c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ca:	431a      	orrs	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e097      	b.n	8009912 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e8:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d09b      	beq.n	8009728 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097fe:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800980a:	2b00      	cmp	r3, #0
 800980c:	d022      	beq.n	8009854 <HAL_SD_WriteBlocks+0x24c>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d91f      	bls.n	8009854 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009818:	2b03      	cmp	r3, #3
 800981a:	d01b      	beq.n	8009854 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4618      	mov	r0, r3
 8009822:	f003 f827 	bl	800c874 <SDMMC_CmdStopTransfer>
 8009826:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800982a:	2b00      	cmp	r3, #0
 800982c:	d012      	beq.n	8009854 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a3a      	ldr	r2, [pc, #232]	@ (800991c <HAL_SD_WriteBlocks+0x314>)
 8009834:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800983a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800983c:	431a      	orrs	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e05e      	b.n	8009912 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800985a:	f003 0308 	and.w	r3, r3, #8
 800985e:	2b00      	cmp	r3, #0
 8009860:	d012      	beq.n	8009888 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a2d      	ldr	r2, [pc, #180]	@ (800991c <HAL_SD_WriteBlocks+0x314>)
 8009868:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800986e:	f043 0208 	orr.w	r2, r3, #8
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e044      	b.n	8009912 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d012      	beq.n	80098bc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a20      	ldr	r2, [pc, #128]	@ (800991c <HAL_SD_WriteBlocks+0x314>)
 800989c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a2:	f043 0202 	orr.w	r2, r3, #2
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e02a      	b.n	8009912 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098c2:	f003 0310 	and.w	r3, r3, #16
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d012      	beq.n	80098f0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a13      	ldr	r2, [pc, #76]	@ (800991c <HAL_SD_WriteBlocks+0x314>)
 80098d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098d6:	f043 0210 	orr.w	r2, r3, #16
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e010      	b.n	8009912 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a0a      	ldr	r2, [pc, #40]	@ (8009920 <HAL_SD_WriteBlocks+0x318>)
 80098f6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	e006      	b.n	8009912 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009908:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	3748      	adds	r7, #72	@ 0x48
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	1fe00fff 	.word	0x1fe00fff
 8009920:	18000f3a 	.word	0x18000f3a

08009924 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009932:	0f9b      	lsrs	r3, r3, #30
 8009934:	b2da      	uxtb	r2, r3
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800993e:	0e9b      	lsrs	r3, r3, #26
 8009940:	b2db      	uxtb	r3, r3
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	b2da      	uxtb	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009950:	0e1b      	lsrs	r3, r3, #24
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	b2da      	uxtb	r2, r3
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009962:	0c1b      	lsrs	r3, r3, #16
 8009964:	b2da      	uxtb	r2, r3
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800996e:	0a1b      	lsrs	r3, r3, #8
 8009970:	b2da      	uxtb	r2, r3
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800997a:	b2da      	uxtb	r2, r3
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009984:	0d1b      	lsrs	r3, r3, #20
 8009986:	b29a      	uxth	r2, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009990:	0c1b      	lsrs	r3, r3, #16
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 030f 	and.w	r3, r3, #15
 8009998:	b2da      	uxtb	r2, r3
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099a2:	0bdb      	lsrs	r3, r3, #15
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099b4:	0b9b      	lsrs	r3, r3, #14
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099c6:	0b5b      	lsrs	r3, r3, #13
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099d8:	0b1b      	lsrs	r3, r3, #12
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2200      	movs	r2, #0
 80099ea:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d163      	bne.n	8009abc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099f8:	009a      	lsls	r2, r3, #2
 80099fa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80099fe:	4013      	ands	r3, r2
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009a04:	0f92      	lsrs	r2, r2, #30
 8009a06:	431a      	orrs	r2, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a10:	0edb      	lsrs	r3, r3, #27
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0307 	and.w	r3, r3, #7
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a22:	0e1b      	lsrs	r3, r3, #24
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a34:	0d5b      	lsrs	r3, r3, #21
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a46:	0c9b      	lsrs	r3, r3, #18
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a58:	0bdb      	lsrs	r3, r3, #15
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 0307 	and.w	r3, r3, #7
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	7e1b      	ldrb	r3, [r3, #24]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	3302      	adds	r3, #2
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009a86:	fb03 f202 	mul.w	r2, r3, r2
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	7a1b      	ldrb	r3, [r3, #8]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	2201      	movs	r2, #1
 8009a9a:	409a      	lsls	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009aa8:	0a52      	lsrs	r2, r2, #9
 8009aaa:	fb03 f202 	mul.w	r2, r3, r2
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ab8:	655a      	str	r2, [r3, #84]	@ 0x54
 8009aba:	e031      	b.n	8009b20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d11d      	bne.n	8009b00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ac8:	041b      	lsls	r3, r3, #16
 8009aca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ad2:	0c1b      	lsrs	r3, r3, #16
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	029a      	lsls	r2, r3, #10
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009af4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	655a      	str	r2, [r3, #84]	@ 0x54
 8009afe:	e00f      	b.n	8009b20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a58      	ldr	r2, [pc, #352]	@ (8009c68 <HAL_SD_GetCardCSD+0x344>)
 8009b06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e09d      	b.n	8009c5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b24:	0b9b      	lsrs	r3, r3, #14
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 0301 	and.w	r3, r3, #1
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b36:	09db      	lsrs	r3, r3, #7
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b58:	0fdb      	lsrs	r3, r3, #31
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b64:	0f5b      	lsrs	r3, r3, #29
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 0303 	and.w	r3, r3, #3
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b76:	0e9b      	lsrs	r3, r3, #26
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b88:	0d9b      	lsrs	r3, r3, #22
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b9a:	0d5b      	lsrs	r3, r3, #21
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bb6:	0c1b      	lsrs	r3, r3, #16
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bca:	0bdb      	lsrs	r3, r3, #15
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bde:	0b9b      	lsrs	r3, r3, #14
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bf2:	0b5b      	lsrs	r3, r3, #13
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	b2da      	uxtb	r2, r3
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c06:	0b1b      	lsrs	r3, r3, #12
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	f003 0301 	and.w	r3, r3, #1
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c1a:	0a9b      	lsrs	r3, r3, #10
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 0303 	and.w	r3, r3, #3
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c2e:	0a1b      	lsrs	r3, r3, #8
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	f003 0303 	and.w	r3, r3, #3
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	1fe00fff 	.word	0x1fe00fff

08009c6c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b094      	sub	sp, #80	@ 0x50
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d101      	bne.n	8009c8c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e0a7      	b.n	8009ddc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009c8c:	f107 0308 	add.w	r3, r7, #8
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fb62 	bl	800a35c <SD_SendSDStatus>
 8009c98:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d011      	beq.n	8009cc4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8009de4 <HAL_SD_GetCardStatus+0x178>)
 8009ca6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cae:	431a      	orrs	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009cc2:	e070      	b.n	8009da6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	099b      	lsrs	r3, r3, #6
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	f003 0303 	and.w	r3, r3, #3
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	0a1b      	lsrs	r3, r3, #8
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	0e1b      	lsrs	r3, r3, #24
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	061a      	lsls	r2, r3, #24
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	021b      	lsls	r3, r3, #8
 8009d06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d0a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	0a1b      	lsrs	r3, r3, #8
 8009d10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009d14:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	0e1b      	lsrs	r3, r3, #24
 8009d1a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	0a1b      	lsrs	r3, r3, #8
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	0d1b      	lsrs	r3, r3, #20
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	f003 030f 	and.w	r3, r3, #15
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	0c1b      	lsrs	r3, r3, #16
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	4313      	orrs	r3, r2
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	0a9b      	lsrs	r3, r3, #10
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	0a1b      	lsrs	r3, r3, #8
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	091b      	lsrs	r3, r3, #4
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f003 030f 	and.w	r3, r3, #15
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	f003 030f 	and.w	r3, r3, #15
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	0e1b      	lsrs	r3, r3, #24
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009dae:	4618      	mov	r0, r3
 8009db0:	f002 fcb0 	bl	800c714 <SDMMC_CmdBlockLength>
 8009db4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00d      	beq.n	8009dd8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a08      	ldr	r2, [pc, #32]	@ (8009de4 <HAL_SD_GetCardStatus+0x178>)
 8009dc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dc8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009dd8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3750      	adds	r7, #80	@ 0x50
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	1fe00fff 	.word	0x1fe00fff

08009de8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b08d      	sub	sp, #52	@ 0x34
 8009e44:	af02      	add	r7, sp, #8
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2203      	movs	r2, #3
 8009e54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d02e      	beq.n	8009ebe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e66:	d106      	bne.n	8009e76 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	635a      	str	r2, [r3, #52]	@ 0x34
 8009e74:	e029      	b.n	8009eca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e7c:	d10a      	bne.n	8009e94 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fb64 	bl	800a54c <SD_WideBus_Enable>
 8009e84:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	635a      	str	r2, [r3, #52]	@ 0x34
 8009e92:	e01a      	b.n	8009eca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10a      	bne.n	8009eb0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fba1 	bl	800a5e2 <SD_WideBus_Disable>
 8009ea0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	635a      	str	r2, [r3, #52]	@ 0x34
 8009eae:	e00c      	b.n	8009eca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	635a      	str	r2, [r3, #52]	@ 0x34
 8009ebc:	e005      	b.n	8009eca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ec2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d007      	beq.n	8009ee2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a5f      	ldr	r2, [pc, #380]	@ (800a054 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ee0:	e096      	b.n	800a010 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009ee2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009ee6:	f04f 0100 	mov.w	r1, #0
 8009eea:	f7fd fb7b 	bl	80075e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009eee:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 8083 	beq.w	8009ffe <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	695a      	ldr	r2, [r3, #20]
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	4950      	ldr	r1, [pc, #320]	@ (800a058 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009f16:	fba1 1303 	umull	r1, r3, r1, r3
 8009f1a:	0e1b      	lsrs	r3, r3, #24
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d303      	bcc.n	8009f28 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	61bb      	str	r3, [r7, #24]
 8009f26:	e05a      	b.n	8009fde <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f30:	d103      	bne.n	8009f3a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	61bb      	str	r3, [r7, #24]
 8009f38:	e051      	b.n	8009fde <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f42:	d126      	bne.n	8009f92 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10e      	bne.n	8009f6a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	4a43      	ldr	r2, [pc, #268]	@ (800a05c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d906      	bls.n	8009f62 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	4a40      	ldr	r2, [pc, #256]	@ (800a058 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009f58:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5c:	0e5b      	lsrs	r3, r3, #25
 8009f5e:	61bb      	str	r3, [r7, #24]
 8009f60:	e03d      	b.n	8009fde <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	61bb      	str	r3, [r7, #24]
 8009f68:	e039      	b.n	8009fde <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f76:	4a39      	ldr	r2, [pc, #228]	@ (800a05c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d906      	bls.n	8009f8a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4a36      	ldr	r2, [pc, #216]	@ (800a058 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009f80:	fba2 2303 	umull	r2, r3, r2, r3
 8009f84:	0e5b      	lsrs	r3, r3, #25
 8009f86:	61bb      	str	r3, [r7, #24]
 8009f88:	e029      	b.n	8009fde <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	61bb      	str	r3, [r7, #24]
 8009f90:	e025      	b.n	8009fde <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10e      	bne.n	8009fb8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	4a30      	ldr	r2, [pc, #192]	@ (800a060 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d906      	bls.n	8009fb0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	4a2c      	ldr	r2, [pc, #176]	@ (800a058 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009faa:	0e1b      	lsrs	r3, r3, #24
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	e016      	b.n	8009fde <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	61bb      	str	r3, [r7, #24]
 8009fb6:	e012      	b.n	8009fde <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc4:	4a26      	ldr	r2, [pc, #152]	@ (800a060 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d906      	bls.n	8009fd8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	4a22      	ldr	r2, [pc, #136]	@ (800a058 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009fce:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd2:	0e1b      	lsrs	r3, r3, #24
 8009fd4:	61bb      	str	r3, [r7, #24]
 8009fd6:	e002      	b.n	8009fde <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681c      	ldr	r4, [r3, #0]
 8009fe2:	466a      	mov	r2, sp
 8009fe4:	f107 0314 	add.w	r3, r7, #20
 8009fe8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009fec:	e882 0003 	stmia.w	r2, {r0, r1}
 8009ff0:	f107 0308 	add.w	r3, r7, #8
 8009ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f002 faae 	bl	800c558 <SDMMC_Init>
 8009ffc:	e008      	b.n	800a010 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a002:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a018:	4618      	mov	r0, r3
 800a01a:	f002 fb7b 	bl	800c714 <SDMMC_CmdBlockLength>
 800a01e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00c      	beq.n	800a040 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a0a      	ldr	r2, [pc, #40]	@ (800a054 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a02c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	431a      	orrs	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	372c      	adds	r7, #44	@ 0x2c
 800a050:	46bd      	mov	sp, r7
 800a052:	bd90      	pop	{r4, r7, pc}
 800a054:	1fe00fff 	.word	0x1fe00fff
 800a058:	55e63b89 	.word	0x55e63b89
 800a05c:	02faf080 	.word	0x02faf080
 800a060:	017d7840 	.word	0x017d7840

0800a064 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a070:	f107 030c 	add.w	r3, r7, #12
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fa40 	bl	800a4fc <SD_SendStatus>
 800a07c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d005      	beq.n	800a090 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	431a      	orrs	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	0a5b      	lsrs	r3, r3, #9
 800a094:	f003 030f 	and.w	r3, r3, #15
 800a098:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a09a:	693b      	ldr	r3, [r7, #16]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b090      	sub	sp, #64	@ 0x40
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a0b0:	f7f9 ffde 	bl	8004070 <HAL_GetTick>
 800a0b4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f002 faa5 	bl	800c60a <SDMMC_GetPowerState>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d102      	bne.n	800a0cc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a0ca:	e0b5      	b.n	800a238 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d02e      	beq.n	800a132 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f002 fcf0 	bl	800cabe <SDMMC_CmdSendCID>
 800a0de:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <SD_InitCard+0x46>
    {
      return errorstate;
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e8:	e0a6      	b.n	800a238 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f002 fad0 	bl	800c696 <SDMMC_GetResponse>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2104      	movs	r1, #4
 800a102:	4618      	mov	r0, r3
 800a104:	f002 fac7 	bl	800c696 <SDMMC_GetResponse>
 800a108:	4602      	mov	r2, r0
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2108      	movs	r1, #8
 800a114:	4618      	mov	r0, r3
 800a116:	f002 fabe 	bl	800c696 <SDMMC_GetResponse>
 800a11a:	4602      	mov	r2, r0
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	210c      	movs	r1, #12
 800a126:	4618      	mov	r0, r3
 800a128:	f002 fab5 	bl	800c696 <SDMMC_GetResponse>
 800a12c:	4602      	mov	r2, r0
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a136:	2b03      	cmp	r3, #3
 800a138:	d01d      	beq.n	800a176 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a13a:	e019      	b.n	800a170 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f107 020a 	add.w	r2, r7, #10
 800a144:	4611      	mov	r1, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f002 fcf8 	bl	800cb3c <SDMMC_CmdSetRelAdd>
 800a14c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <SD_InitCard+0xb4>
      {
        return errorstate;
 800a154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a156:	e06f      	b.n	800a238 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a158:	f7f9 ff8a 	bl	8004070 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a166:	4293      	cmp	r3, r2
 800a168:	d902      	bls.n	800a170 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a16a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a16e:	e063      	b.n	800a238 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a170:	897b      	ldrh	r3, [r7, #10]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0e2      	beq.n	800a13c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d036      	beq.n	800a1ec <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a17e:	897b      	ldrh	r3, [r7, #10]
 800a180:	461a      	mov	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a18e:	041b      	lsls	r3, r3, #16
 800a190:	4619      	mov	r1, r3
 800a192:	4610      	mov	r0, r2
 800a194:	f002 fcb2 	bl	800cafc <SDMMC_CmdSendCSD>
 800a198:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <SD_InitCard+0x100>
    {
      return errorstate;
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a2:	e049      	b.n	800a238 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f002 fa73 	bl	800c696 <SDMMC_GetResponse>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2104      	movs	r1, #4
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f002 fa6a 	bl	800c696 <SDMMC_GetResponse>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2108      	movs	r1, #8
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f002 fa61 	bl	800c696 <SDMMC_GetResponse>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	210c      	movs	r1, #12
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f002 fa58 	bl	800c696 <SDMMC_GetResponse>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2104      	movs	r1, #4
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f002 fa4f 	bl	800c696 <SDMMC_GetResponse>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	0d1a      	lsrs	r2, r3, #20
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a200:	f107 030c 	add.w	r3, r7, #12
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7ff fb8c 	bl	8009924 <HAL_SD_GetCardCSD>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a212:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a216:	e00f      	b.n	800a238 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a220:	041b      	lsls	r3, r3, #16
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f002 fb61 	bl	800c8ec <SDMMC_CmdSelDesel>
 800a22a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <SD_InitCard+0x192>
  {
    return errorstate;
 800a232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a234:	e000      	b.n	800a238 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3740      	adds	r7, #64	@ 0x40
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a248:	2300      	movs	r3, #0
 800a24a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4618      	mov	r0, r3
 800a25a:	f002 fb6a 	bl	800c932 <SDMMC_CmdGoIdleState>
 800a25e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	e072      	b.n	800a350 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f002 fb7d 	bl	800c96e <SDMMC_CmdOperCond>
 800a274:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a27c:	d10d      	bne.n	800a29a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	f002 fb52 	bl	800c932 <SDMMC_CmdGoIdleState>
 800a28e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d004      	beq.n	800a2a0 <SD_PowerON+0x60>
    {
      return errorstate;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	e05a      	b.n	800a350 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d137      	bne.n	800a318 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f002 fb7d 	bl	800c9ae <SDMMC_CmdAppCommand>
 800a2b4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d02d      	beq.n	800a318 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2bc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a2c0:	e046      	b.n	800a350 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f002 fb70 	bl	800c9ae <SDMMC_CmdAppCommand>
 800a2ce:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <SD_PowerON+0x9a>
    {
      return errorstate;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	e03a      	b.n	800a350 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	491e      	ldr	r1, [pc, #120]	@ (800a358 <SD_PowerON+0x118>)
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f002 fb87 	bl	800c9f4 <SDMMC_CmdAppOperCommand>
 800a2e6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a2f2:	e02d      	b.n	800a350 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f002 f9cb 	bl	800c696 <SDMMC_GetResponse>
 800a300:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	0fdb      	lsrs	r3, r3, #31
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <SD_PowerON+0xce>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <SD_PowerON+0xd0>
 800a30e:	2300      	movs	r3, #0
 800a310:	613b      	str	r3, [r7, #16]

    count++;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	3301      	adds	r3, #1
 800a316:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a31e:	4293      	cmp	r3, r2
 800a320:	d802      	bhi.n	800a328 <SD_PowerON+0xe8>
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0cc      	beq.n	800a2c2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a32e:	4293      	cmp	r3, r2
 800a330:	d902      	bls.n	800a338 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a332:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a336:	e00b      	b.n	800a350 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	c1100000 	.word	0xc1100000

0800a35c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08c      	sub	sp, #48	@ 0x30
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a366:	f7f9 fe83 	bl	8004070 <HAL_GetTick>
 800a36a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2100      	movs	r1, #0
 800a376:	4618      	mov	r0, r3
 800a378:	f002 f98d 	bl	800c696 <SDMMC_GetResponse>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a382:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a386:	d102      	bne.n	800a38e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a388:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a38c:	e0b0      	b.n	800a4f0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2140      	movs	r1, #64	@ 0x40
 800a394:	4618      	mov	r0, r3
 800a396:	f002 f9bd 	bl	800c714 <SDMMC_CmdBlockLength>
 800a39a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d005      	beq.n	800a3ae <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	e0a0      	b.n	800a4f0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3b6:	041b      	lsls	r3, r3, #16
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	f002 faf7 	bl	800c9ae <SDMMC_CmdAppCommand>
 800a3c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	e08d      	b.n	800a4f0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a3d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a3d8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a3da:	2340      	movs	r3, #64	@ 0x40
 800a3dc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a3de:	2360      	movs	r3, #96	@ 0x60
 800a3e0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f107 0208 	add.w	r2, r7, #8
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f002 f95f 	bl	800c6bc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f002 fbdf 	bl	800cbc6 <SDMMC_CmdStatusRegister>
 800a408:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d02b      	beq.n	800a468 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	e069      	b.n	800a4f0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a426:	2b00      	cmp	r3, #0
 800a428:	d013      	beq.n	800a452 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a42a:	2300      	movs	r3, #0
 800a42c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a42e:	e00d      	b.n	800a44c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4618      	mov	r0, r3
 800a436:	f002 f8b9 	bl	800c5ac <SDMMC_ReadFIFO>
 800a43a:	4602      	mov	r2, r0
 800a43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43e:	601a      	str	r2, [r3, #0]
        pData++;
 800a440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a442:	3304      	adds	r3, #4
 800a444:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800a446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a448:	3301      	adds	r3, #1
 800a44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a44e:	2b07      	cmp	r3, #7
 800a450:	d9ee      	bls.n	800a430 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a452:	f7f9 fe0d 	bl	8004070 <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a460:	d102      	bne.n	800a468 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a462:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a466:	e043      	b.n	800a4f0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a46e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0d2      	beq.n	800a41c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a47c:	f003 0308 	and.w	r3, r3, #8
 800a480:	2b00      	cmp	r3, #0
 800a482:	d001      	beq.n	800a488 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a484:	2308      	movs	r3, #8
 800a486:	e033      	b.n	800a4f0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a48e:	f003 0302 	and.w	r3, r3, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a496:	2302      	movs	r3, #2
 800a498:	e02a      	b.n	800a4f0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a0:	f003 0320 	and.w	r3, r3, #32
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d017      	beq.n	800a4d8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	e021      	b.n	800a4f0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f002 f87b 	bl	800c5ac <SDMMC_ReadFIFO>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	601a      	str	r2, [r3, #0]
    pData++;
 800a4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4be:	3304      	adds	r3, #4
 800a4c0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a4c2:	f7f9 fdd5 	bl	8004070 <HAL_GetTick>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4d0:	d102      	bne.n	800a4d8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a4d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4d6:	e00b      	b.n	800a4f0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e2      	bne.n	800a4ac <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a03      	ldr	r2, [pc, #12]	@ (800a4f8 <SD_SendSDStatus+0x19c>)
 800a4ec:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3730      	adds	r7, #48	@ 0x30
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	18000f3a 	.word	0x18000f3a

0800a4fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d102      	bne.n	800a512 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a50c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a510:	e018      	b.n	800a544 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a51a:	041b      	lsls	r3, r3, #16
 800a51c:	4619      	mov	r1, r3
 800a51e:	4610      	mov	r0, r2
 800a520:	f002 fb2e 	bl	800cb80 <SDMMC_CmdSendStatus>
 800a524:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	e009      	b.n	800a544 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2100      	movs	r1, #0
 800a536:	4618      	mov	r0, r3
 800a538:	f002 f8ad 	bl	800c696 <SDMMC_GetResponse>
 800a53c:	4602      	mov	r2, r0
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	2300      	movs	r3, #0
 800a55a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2100      	movs	r1, #0
 800a562:	4618      	mov	r0, r3
 800a564:	f002 f897 	bl	800c696 <SDMMC_GetResponse>
 800a568:	4603      	mov	r3, r0
 800a56a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a56e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a572:	d102      	bne.n	800a57a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a574:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a578:	e02f      	b.n	800a5da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a57a:	f107 030c 	add.w	r3, r7, #12
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f879 	bl	800a678 <SD_FindSCR>
 800a586:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	e023      	b.n	800a5da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01c      	beq.n	800a5d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5a4:	041b      	lsls	r3, r3, #16
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	f002 fa00 	bl	800c9ae <SDMMC_CmdAppCommand>
 800a5ae:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	e00f      	b.n	800a5da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2102      	movs	r1, #2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f002 fa37 	bl	800ca34 <SDMMC_CmdBusWidth>
 800a5c6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	e003      	b.n	800a5da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e001      	b.n	800a5da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a5d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b086      	sub	sp, #24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f002 f84c 	bl	800c696 <SDMMC_GetResponse>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a604:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a608:	d102      	bne.n	800a610 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a60a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a60e:	e02f      	b.n	800a670 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a610:	f107 030c 	add.w	r3, r7, #12
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f82e 	bl	800a678 <SD_FindSCR>
 800a61c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	e023      	b.n	800a670 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d01c      	beq.n	800a66c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a63a:	041b      	lsls	r3, r3, #16
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f002 f9b5 	bl	800c9ae <SDMMC_CmdAppCommand>
 800a644:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	e00f      	b.n	800a670 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2100      	movs	r1, #0
 800a656:	4618      	mov	r0, r3
 800a658:	f002 f9ec 	bl	800ca34 <SDMMC_CmdBusWidth>
 800a65c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	e003      	b.n	800a670 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a668:	2300      	movs	r3, #0
 800a66a:	e001      	b.n	800a670 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a66c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08e      	sub	sp, #56	@ 0x38
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a682:	f7f9 fcf5 	bl	8004070 <HAL_GetTick>
 800a686:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a688:	2300      	movs	r3, #0
 800a68a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a68c:	2300      	movs	r3, #0
 800a68e:	60bb      	str	r3, [r7, #8]
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2108      	movs	r1, #8
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f002 f838 	bl	800c714 <SDMMC_CmdBlockLength>
 800a6a4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ae:	e0ad      	b.n	800a80c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b8:	041b      	lsls	r3, r3, #16
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4610      	mov	r0, r2
 800a6be:	f002 f976 	bl	800c9ae <SDMMC_CmdAppCommand>
 800a6c2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <SD_FindSCR+0x56>
  {
    return errorstate;
 800a6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6cc:	e09e      	b.n	800a80c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a6d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a6d8:	2330      	movs	r3, #48	@ 0x30
 800a6da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a6dc:	2302      	movs	r3, #2
 800a6de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f107 0210 	add.w	r2, r7, #16
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f001 ffe2 	bl	800c6bc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f002 f9bc 	bl	800ca7a <SDMMC_CmdSendSCR>
 800a702:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	2b00      	cmp	r3, #0
 800a708:	d027      	beq.n	800a75a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70c:	e07e      	b.n	800a80c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a714:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d113      	bne.n	800a744 <SD_FindSCR+0xcc>
 800a71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d110      	bne.n	800a744 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4618      	mov	r0, r3
 800a728:	f001 ff40 	bl	800c5ac <SDMMC_ReadFIFO>
 800a72c:	4603      	mov	r3, r0
 800a72e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4618      	mov	r0, r3
 800a736:	f001 ff39 	bl	800c5ac <SDMMC_ReadFIFO>
 800a73a:	4603      	mov	r3, r0
 800a73c:	60fb      	str	r3, [r7, #12]
      index++;
 800a73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a740:	3301      	adds	r3, #1
 800a742:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a744:	f7f9 fc94 	bl	8004070 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a752:	d102      	bne.n	800a75a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a754:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a758:	e058      	b.n	800a80c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a760:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a764:	4013      	ands	r3, r2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0d1      	beq.n	800a70e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a770:	f003 0308 	and.w	r3, r3, #8
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2208      	movs	r2, #8
 800a77e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a780:	2308      	movs	r3, #8
 800a782:	e043      	b.n	800a80c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2202      	movs	r2, #2
 800a798:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a79a:	2302      	movs	r3, #2
 800a79c:	e036      	b.n	800a80c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7a4:	f003 0320 	and.w	r3, r3, #32
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a7b4:	2320      	movs	r3, #32
 800a7b6:	e029      	b.n	800a80c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a15      	ldr	r2, [pc, #84]	@ (800a814 <SD_FindSCR+0x19c>)
 800a7be:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	061a      	lsls	r2, r3, #24
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	021b      	lsls	r3, r3, #8
 800a7c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a7cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	0a1b      	lsrs	r3, r3, #8
 800a7d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a7d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	0e1b      	lsrs	r3, r3, #24
 800a7dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e0:	601a      	str	r2, [r3, #0]
    scr++;
 800a7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	061a      	lsls	r2, r3, #24
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	021b      	lsls	r3, r3, #8
 800a7f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a7f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a7fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	0e1b      	lsrs	r3, r3, #24
 800a804:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a808:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3738      	adds	r7, #56	@ 0x38
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	18000f3a 	.word	0x18000f3a

0800a818 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d101      	bne.n	800a82a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e10f      	b.n	800aa4a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a87      	ldr	r2, [pc, #540]	@ (800aa54 <HAL_SPI_Init+0x23c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d00f      	beq.n	800a85a <HAL_SPI_Init+0x42>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a86      	ldr	r2, [pc, #536]	@ (800aa58 <HAL_SPI_Init+0x240>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00a      	beq.n	800a85a <HAL_SPI_Init+0x42>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a84      	ldr	r2, [pc, #528]	@ (800aa5c <HAL_SPI_Init+0x244>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d005      	beq.n	800a85a <HAL_SPI_Init+0x42>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	2b0f      	cmp	r3, #15
 800a854:	d901      	bls.n	800a85a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e0f7      	b.n	800aa4a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f900 	bl	800aa60 <SPI_GetPacketSize>
 800a860:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a7b      	ldr	r2, [pc, #492]	@ (800aa54 <HAL_SPI_Init+0x23c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d00c      	beq.n	800a886 <HAL_SPI_Init+0x6e>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a79      	ldr	r2, [pc, #484]	@ (800aa58 <HAL_SPI_Init+0x240>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d007      	beq.n	800a886 <HAL_SPI_Init+0x6e>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a78      	ldr	r2, [pc, #480]	@ (800aa5c <HAL_SPI_Init+0x244>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d002      	beq.n	800a886 <HAL_SPI_Init+0x6e>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b08      	cmp	r3, #8
 800a884:	d811      	bhi.n	800a8aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a88a:	4a72      	ldr	r2, [pc, #456]	@ (800aa54 <HAL_SPI_Init+0x23c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d009      	beq.n	800a8a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a70      	ldr	r2, [pc, #448]	@ (800aa58 <HAL_SPI_Init+0x240>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d004      	beq.n	800a8a4 <HAL_SPI_Init+0x8c>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a6f      	ldr	r2, [pc, #444]	@ (800aa5c <HAL_SPI_Init+0x244>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d104      	bne.n	800a8ae <HAL_SPI_Init+0x96>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b10      	cmp	r3, #16
 800a8a8:	d901      	bls.n	800a8ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e0cd      	b.n	800aa4a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d106      	bne.n	800a8c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7f8 fe86 	bl	80035d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0201 	bic.w	r2, r2, #1
 800a8de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a8ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8f4:	d119      	bne.n	800a92a <HAL_SPI_Init+0x112>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a8fe:	d103      	bne.n	800a908 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a904:	2b00      	cmp	r3, #0
 800a906:	d008      	beq.n	800a91a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10c      	bne.n	800a92a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a918:	d107      	bne.n	800a92a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a928:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00f      	beq.n	800a956 <HAL_SPI_Init+0x13e>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	2b06      	cmp	r3, #6
 800a93c:	d90b      	bls.n	800a956 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	430a      	orrs	r2, r1
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e007      	b.n	800a966 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a964:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	69da      	ldr	r2, [r3, #28]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a96e:	431a      	orrs	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	431a      	orrs	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a978:	ea42 0103 	orr.w	r1, r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	430a      	orrs	r2, r1
 800a986:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a990:	431a      	orrs	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a996:	431a      	orrs	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	431a      	orrs	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	431a      	orrs	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ba:	431a      	orrs	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	431a      	orrs	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9c6:	ea42 0103 	orr.w	r1, r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	430a      	orrs	r2, r1
 800a9d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d113      	bne.n	800aa06 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 0201 	bic.w	r2, r2, #1
 800aa14:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00a      	beq.n	800aa38 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	430a      	orrs	r2, r1
 800aa36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	40013000 	.word	0x40013000
 800aa58:	40003800 	.word	0x40003800
 800aa5c:	40003c00 	.word	0x40003c00

0800aa60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa6c:	095b      	lsrs	r3, r3, #5
 800aa6e:	3301      	adds	r3, #1
 800aa70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	3301      	adds	r3, #1
 800aa78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	3307      	adds	r3, #7
 800aa7e:	08db      	lsrs	r3, r3, #3
 800aa80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	fb02 f303 	mul.w	r3, r2, r3
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e049      	b.n	800ab3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d106      	bne.n	800aac2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7f8 fedd 	bl	800387c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2202      	movs	r2, #2
 800aac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f000 f965 	bl	800ada4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	f003 0302 	and.w	r3, r3, #2
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d020      	beq.n	800aba8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01b      	beq.n	800aba8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f06f 0202 	mvn.w	r2, #2
 800ab78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f8e9 	bl	800ad66 <HAL_TIM_IC_CaptureCallback>
 800ab94:	e005      	b.n	800aba2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f8db 	bl	800ad52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f8ec 	bl	800ad7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f003 0304 	and.w	r3, r3, #4
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d020      	beq.n	800abf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f003 0304 	and.w	r3, r3, #4
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d01b      	beq.n	800abf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f06f 0204 	mvn.w	r2, #4
 800abc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2202      	movs	r2, #2
 800abca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d003      	beq.n	800abe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f8c3 	bl	800ad66 <HAL_TIM_IC_CaptureCallback>
 800abe0:	e005      	b.n	800abee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f8b5 	bl	800ad52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f8c6 	bl	800ad7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f003 0308 	and.w	r3, r3, #8
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d020      	beq.n	800ac40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f003 0308 	and.w	r3, r3, #8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01b      	beq.n	800ac40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f06f 0208 	mvn.w	r2, #8
 800ac10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2204      	movs	r2, #4
 800ac16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	69db      	ldr	r3, [r3, #28]
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f89d 	bl	800ad66 <HAL_TIM_IC_CaptureCallback>
 800ac2c:	e005      	b.n	800ac3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f88f 	bl	800ad52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f8a0 	bl	800ad7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	f003 0310 	and.w	r3, r3, #16
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d020      	beq.n	800ac8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f003 0310 	and.w	r3, r3, #16
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d01b      	beq.n	800ac8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f06f 0210 	mvn.w	r2, #16
 800ac5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2208      	movs	r2, #8
 800ac62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	69db      	ldr	r3, [r3, #28]
 800ac6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f877 	bl	800ad66 <HAL_TIM_IC_CaptureCallback>
 800ac78:	e005      	b.n	800ac86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f869 	bl	800ad52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f87a 	bl	800ad7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00c      	beq.n	800acb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d007      	beq.n	800acb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f06f 0201 	mvn.w	r2, #1
 800aca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7f9 f8b4 	bl	8003e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d104      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00c      	beq.n	800acde <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acca:	2b00      	cmp	r3, #0
 800accc:	d007      	beq.n	800acde <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800acd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f9bb 	bl	800b054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00c      	beq.n	800ad02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d007      	beq.n	800ad02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800acfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f9b3 	bl	800b068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00c      	beq.n	800ad26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d007      	beq.n	800ad26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ad1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f834 	bl	800ad8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	f003 0320 	and.w	r3, r3, #32
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00c      	beq.n	800ad4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f003 0320 	and.w	r3, r3, #32
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f06f 0220 	mvn.w	r2, #32
 800ad42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f97b 	bl	800b040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad6e:	bf00      	nop
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad82:	bf00      	nop
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad96:	bf00      	nop
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
	...

0800ada4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a4a      	ldr	r2, [pc, #296]	@ (800aee0 <TIM_Base_SetConfig+0x13c>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d013      	beq.n	800ade4 <TIM_Base_SetConfig+0x40>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adc2:	d00f      	beq.n	800ade4 <TIM_Base_SetConfig+0x40>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a47      	ldr	r2, [pc, #284]	@ (800aee4 <TIM_Base_SetConfig+0x140>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d00b      	beq.n	800ade4 <TIM_Base_SetConfig+0x40>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a46      	ldr	r2, [pc, #280]	@ (800aee8 <TIM_Base_SetConfig+0x144>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d007      	beq.n	800ade4 <TIM_Base_SetConfig+0x40>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a45      	ldr	r2, [pc, #276]	@ (800aeec <TIM_Base_SetConfig+0x148>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d003      	beq.n	800ade4 <TIM_Base_SetConfig+0x40>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a44      	ldr	r2, [pc, #272]	@ (800aef0 <TIM_Base_SetConfig+0x14c>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d108      	bne.n	800adf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a39      	ldr	r2, [pc, #228]	@ (800aee0 <TIM_Base_SetConfig+0x13c>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d027      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae04:	d023      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a36      	ldr	r2, [pc, #216]	@ (800aee4 <TIM_Base_SetConfig+0x140>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d01f      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a35      	ldr	r2, [pc, #212]	@ (800aee8 <TIM_Base_SetConfig+0x144>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d01b      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a34      	ldr	r2, [pc, #208]	@ (800aeec <TIM_Base_SetConfig+0x148>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d017      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a33      	ldr	r2, [pc, #204]	@ (800aef0 <TIM_Base_SetConfig+0x14c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d013      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a32      	ldr	r2, [pc, #200]	@ (800aef4 <TIM_Base_SetConfig+0x150>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d00f      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a31      	ldr	r2, [pc, #196]	@ (800aef8 <TIM_Base_SetConfig+0x154>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d00b      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a30      	ldr	r2, [pc, #192]	@ (800aefc <TIM_Base_SetConfig+0x158>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d007      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a2f      	ldr	r2, [pc, #188]	@ (800af00 <TIM_Base_SetConfig+0x15c>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d003      	beq.n	800ae4e <TIM_Base_SetConfig+0xaa>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a2e      	ldr	r2, [pc, #184]	@ (800af04 <TIM_Base_SetConfig+0x160>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d108      	bne.n	800ae60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a16      	ldr	r2, [pc, #88]	@ (800aee0 <TIM_Base_SetConfig+0x13c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d00f      	beq.n	800aeac <TIM_Base_SetConfig+0x108>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a18      	ldr	r2, [pc, #96]	@ (800aef0 <TIM_Base_SetConfig+0x14c>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d00b      	beq.n	800aeac <TIM_Base_SetConfig+0x108>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a17      	ldr	r2, [pc, #92]	@ (800aef4 <TIM_Base_SetConfig+0x150>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d007      	beq.n	800aeac <TIM_Base_SetConfig+0x108>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a16      	ldr	r2, [pc, #88]	@ (800aef8 <TIM_Base_SetConfig+0x154>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d003      	beq.n	800aeac <TIM_Base_SetConfig+0x108>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a15      	ldr	r2, [pc, #84]	@ (800aefc <TIM_Base_SetConfig+0x158>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d103      	bne.n	800aeb4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	691a      	ldr	r2, [r3, #16]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	f003 0301 	and.w	r3, r3, #1
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d105      	bne.n	800aed2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	f023 0201 	bic.w	r2, r3, #1
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	611a      	str	r2, [r3, #16]
  }
}
 800aed2:	bf00      	nop
 800aed4:	3714      	adds	r7, #20
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	40010000 	.word	0x40010000
 800aee4:	40000400 	.word	0x40000400
 800aee8:	40000800 	.word	0x40000800
 800aeec:	40000c00 	.word	0x40000c00
 800aef0:	40010400 	.word	0x40010400
 800aef4:	40014000 	.word	0x40014000
 800aef8:	40014400 	.word	0x40014400
 800aefc:	40014800 	.word	0x40014800
 800af00:	4000e000 	.word	0x4000e000
 800af04:	4000e400 	.word	0x4000e400

0800af08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d101      	bne.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af1c:	2302      	movs	r3, #2
 800af1e:	e077      	b.n	800b010 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2202      	movs	r2, #2
 800af2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a35      	ldr	r2, [pc, #212]	@ (800b01c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d004      	beq.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a34      	ldr	r2, [pc, #208]	@ (800b020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d108      	bne.n	800af66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800af5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	4313      	orrs	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	4313      	orrs	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a25      	ldr	r2, [pc, #148]	@ (800b01c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d02c      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af92:	d027      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a22      	ldr	r2, [pc, #136]	@ (800b024 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d022      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a21      	ldr	r2, [pc, #132]	@ (800b028 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d01d      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a1f      	ldr	r2, [pc, #124]	@ (800b02c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d018      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a1a      	ldr	r2, [pc, #104]	@ (800b020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d013      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a1b      	ldr	r2, [pc, #108]	@ (800b030 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d00e      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a1a      	ldr	r2, [pc, #104]	@ (800b034 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d009      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a18      	ldr	r2, [pc, #96]	@ (800b038 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d004      	beq.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a17      	ldr	r2, [pc, #92]	@ (800b03c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d10c      	bne.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	40010000 	.word	0x40010000
 800b020:	40010400 	.word	0x40010400
 800b024:	40000400 	.word	0x40000400
 800b028:	40000800 	.word	0x40000800
 800b02c:	40000c00 	.word	0x40000c00
 800b030:	40001800 	.word	0x40001800
 800b034:	40014000 	.word	0x40014000
 800b038:	4000e000 	.word	0x4000e000
 800b03c:	4000e400 	.word	0x4000e400

0800b040 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e042      	b.n	800b114 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b094:	2b00      	cmp	r3, #0
 800b096:	d106      	bne.n	800b0a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f7f8 fc13 	bl	80038cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2224      	movs	r2, #36	@ 0x24
 800b0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f022 0201 	bic.w	r2, r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d002      	beq.n	800b0cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 ff22 	bl	800bf10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f8b3 	bl	800b238 <UART_SetConfig>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d101      	bne.n	800b0dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e01b      	b.n	800b114 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b0ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689a      	ldr	r2, [r3, #8]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b0fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0201 	orr.w	r2, r2, #1
 800b10a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 ffa1 	bl	800c054 <UART_CheckIdleState>
 800b112:	4603      	mov	r3, r0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08a      	sub	sp, #40	@ 0x28
 800b120:	af02      	add	r7, sp, #8
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	603b      	str	r3, [r7, #0]
 800b128:	4613      	mov	r3, r2
 800b12a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b132:	2b20      	cmp	r3, #32
 800b134:	d17b      	bne.n	800b22e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <HAL_UART_Transmit+0x26>
 800b13c:	88fb      	ldrh	r3, [r7, #6]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e074      	b.n	800b230 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2221      	movs	r2, #33	@ 0x21
 800b152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b156:	f7f8 ff8b 	bl	8004070 <HAL_GetTick>
 800b15a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	88fa      	ldrh	r2, [r7, #6]
 800b160:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	88fa      	ldrh	r2, [r7, #6]
 800b168:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b174:	d108      	bne.n	800b188 <HAL_UART_Transmit+0x6c>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d104      	bne.n	800b188 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b17e:	2300      	movs	r3, #0
 800b180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	e003      	b.n	800b190 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b18c:	2300      	movs	r3, #0
 800b18e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b190:	e030      	b.n	800b1f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2200      	movs	r2, #0
 800b19a:	2180      	movs	r1, #128	@ 0x80
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f001 f803 	bl	800c1a8 <UART_WaitOnFlagUntilTimeout>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d005      	beq.n	800b1b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e03d      	b.n	800b230 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10b      	bne.n	800b1d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	3302      	adds	r3, #2
 800b1ce:	61bb      	str	r3, [r7, #24]
 800b1d0:	e007      	b.n	800b1e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1c8      	bne.n	800b192 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2200      	movs	r2, #0
 800b208:	2140      	movs	r1, #64	@ 0x40
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f000 ffcc 	bl	800c1a8 <UART_WaitOnFlagUntilTimeout>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d005      	beq.n	800b222 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2220      	movs	r2, #32
 800b21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e006      	b.n	800b230 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2220      	movs	r2, #32
 800b226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	e000      	b.n	800b230 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b22e:	2302      	movs	r3, #2
  }
}
 800b230:	4618      	mov	r0, r3
 800b232:	3720      	adds	r7, #32
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b23c:	b092      	sub	sp, #72	@ 0x48
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	689a      	ldr	r2, [r3, #8]
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	431a      	orrs	r2, r3
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	431a      	orrs	r2, r3
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	4bbe      	ldr	r3, [pc, #760]	@ (800b560 <UART_SetConfig+0x328>)
 800b268:	4013      	ands	r3, r2
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b270:	430b      	orrs	r3, r1
 800b272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	68da      	ldr	r2, [r3, #12]
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4ab3      	ldr	r2, [pc, #716]	@ (800b564 <UART_SetConfig+0x32c>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d004      	beq.n	800b2a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	4baf      	ldr	r3, [pc, #700]	@ (800b568 <UART_SetConfig+0x330>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	6812      	ldr	r2, [r2, #0]
 800b2b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b2b4:	430b      	orrs	r3, r1
 800b2b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2be:	f023 010f 	bic.w	r1, r3, #15
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4aa6      	ldr	r2, [pc, #664]	@ (800b56c <UART_SetConfig+0x334>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d177      	bne.n	800b3c8 <UART_SetConfig+0x190>
 800b2d8:	4ba5      	ldr	r3, [pc, #660]	@ (800b570 <UART_SetConfig+0x338>)
 800b2da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b2e0:	2b28      	cmp	r3, #40	@ 0x28
 800b2e2:	d86d      	bhi.n	800b3c0 <UART_SetConfig+0x188>
 800b2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2ec <UART_SetConfig+0xb4>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b391 	.word	0x0800b391
 800b2f0:	0800b3c1 	.word	0x0800b3c1
 800b2f4:	0800b3c1 	.word	0x0800b3c1
 800b2f8:	0800b3c1 	.word	0x0800b3c1
 800b2fc:	0800b3c1 	.word	0x0800b3c1
 800b300:	0800b3c1 	.word	0x0800b3c1
 800b304:	0800b3c1 	.word	0x0800b3c1
 800b308:	0800b3c1 	.word	0x0800b3c1
 800b30c:	0800b399 	.word	0x0800b399
 800b310:	0800b3c1 	.word	0x0800b3c1
 800b314:	0800b3c1 	.word	0x0800b3c1
 800b318:	0800b3c1 	.word	0x0800b3c1
 800b31c:	0800b3c1 	.word	0x0800b3c1
 800b320:	0800b3c1 	.word	0x0800b3c1
 800b324:	0800b3c1 	.word	0x0800b3c1
 800b328:	0800b3c1 	.word	0x0800b3c1
 800b32c:	0800b3a1 	.word	0x0800b3a1
 800b330:	0800b3c1 	.word	0x0800b3c1
 800b334:	0800b3c1 	.word	0x0800b3c1
 800b338:	0800b3c1 	.word	0x0800b3c1
 800b33c:	0800b3c1 	.word	0x0800b3c1
 800b340:	0800b3c1 	.word	0x0800b3c1
 800b344:	0800b3c1 	.word	0x0800b3c1
 800b348:	0800b3c1 	.word	0x0800b3c1
 800b34c:	0800b3a9 	.word	0x0800b3a9
 800b350:	0800b3c1 	.word	0x0800b3c1
 800b354:	0800b3c1 	.word	0x0800b3c1
 800b358:	0800b3c1 	.word	0x0800b3c1
 800b35c:	0800b3c1 	.word	0x0800b3c1
 800b360:	0800b3c1 	.word	0x0800b3c1
 800b364:	0800b3c1 	.word	0x0800b3c1
 800b368:	0800b3c1 	.word	0x0800b3c1
 800b36c:	0800b3b1 	.word	0x0800b3b1
 800b370:	0800b3c1 	.word	0x0800b3c1
 800b374:	0800b3c1 	.word	0x0800b3c1
 800b378:	0800b3c1 	.word	0x0800b3c1
 800b37c:	0800b3c1 	.word	0x0800b3c1
 800b380:	0800b3c1 	.word	0x0800b3c1
 800b384:	0800b3c1 	.word	0x0800b3c1
 800b388:	0800b3c1 	.word	0x0800b3c1
 800b38c:	0800b3b9 	.word	0x0800b3b9
 800b390:	2301      	movs	r3, #1
 800b392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b396:	e326      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b398:	2304      	movs	r3, #4
 800b39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39e:	e322      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b3a0:	2308      	movs	r3, #8
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3a6:	e31e      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b3a8:	2310      	movs	r3, #16
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ae:	e31a      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b3b0:	2320      	movs	r3, #32
 800b3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3b6:	e316      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b3b8:	2340      	movs	r3, #64	@ 0x40
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3be:	e312      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b3c0:	2380      	movs	r3, #128	@ 0x80
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c6:	e30e      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a69      	ldr	r2, [pc, #420]	@ (800b574 <UART_SetConfig+0x33c>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d130      	bne.n	800b434 <UART_SetConfig+0x1fc>
 800b3d2:	4b67      	ldr	r3, [pc, #412]	@ (800b570 <UART_SetConfig+0x338>)
 800b3d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3d6:	f003 0307 	and.w	r3, r3, #7
 800b3da:	2b05      	cmp	r3, #5
 800b3dc:	d826      	bhi.n	800b42c <UART_SetConfig+0x1f4>
 800b3de:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e4 <UART_SetConfig+0x1ac>)
 800b3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e4:	0800b3fd 	.word	0x0800b3fd
 800b3e8:	0800b405 	.word	0x0800b405
 800b3ec:	0800b40d 	.word	0x0800b40d
 800b3f0:	0800b415 	.word	0x0800b415
 800b3f4:	0800b41d 	.word	0x0800b41d
 800b3f8:	0800b425 	.word	0x0800b425
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b402:	e2f0      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b404:	2304      	movs	r3, #4
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40a:	e2ec      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b40c:	2308      	movs	r3, #8
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b412:	e2e8      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b414:	2310      	movs	r3, #16
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41a:	e2e4      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b41c:	2320      	movs	r3, #32
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b422:	e2e0      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b424:	2340      	movs	r3, #64	@ 0x40
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42a:	e2dc      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b42c:	2380      	movs	r3, #128	@ 0x80
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b432:	e2d8      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a4f      	ldr	r2, [pc, #316]	@ (800b578 <UART_SetConfig+0x340>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d130      	bne.n	800b4a0 <UART_SetConfig+0x268>
 800b43e:	4b4c      	ldr	r3, [pc, #304]	@ (800b570 <UART_SetConfig+0x338>)
 800b440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b442:	f003 0307 	and.w	r3, r3, #7
 800b446:	2b05      	cmp	r3, #5
 800b448:	d826      	bhi.n	800b498 <UART_SetConfig+0x260>
 800b44a:	a201      	add	r2, pc, #4	@ (adr r2, 800b450 <UART_SetConfig+0x218>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b469 	.word	0x0800b469
 800b454:	0800b471 	.word	0x0800b471
 800b458:	0800b479 	.word	0x0800b479
 800b45c:	0800b481 	.word	0x0800b481
 800b460:	0800b489 	.word	0x0800b489
 800b464:	0800b491 	.word	0x0800b491
 800b468:	2300      	movs	r3, #0
 800b46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b46e:	e2ba      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b470:	2304      	movs	r3, #4
 800b472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b476:	e2b6      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b478:	2308      	movs	r3, #8
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47e:	e2b2      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b480:	2310      	movs	r3, #16
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b486:	e2ae      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b488:	2320      	movs	r3, #32
 800b48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48e:	e2aa      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b490:	2340      	movs	r3, #64	@ 0x40
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b496:	e2a6      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b498:	2380      	movs	r3, #128	@ 0x80
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49e:	e2a2      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a35      	ldr	r2, [pc, #212]	@ (800b57c <UART_SetConfig+0x344>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d130      	bne.n	800b50c <UART_SetConfig+0x2d4>
 800b4aa:	4b31      	ldr	r3, [pc, #196]	@ (800b570 <UART_SetConfig+0x338>)
 800b4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4ae:	f003 0307 	and.w	r3, r3, #7
 800b4b2:	2b05      	cmp	r3, #5
 800b4b4:	d826      	bhi.n	800b504 <UART_SetConfig+0x2cc>
 800b4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4bc <UART_SetConfig+0x284>)
 800b4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4bc:	0800b4d5 	.word	0x0800b4d5
 800b4c0:	0800b4dd 	.word	0x0800b4dd
 800b4c4:	0800b4e5 	.word	0x0800b4e5
 800b4c8:	0800b4ed 	.word	0x0800b4ed
 800b4cc:	0800b4f5 	.word	0x0800b4f5
 800b4d0:	0800b4fd 	.word	0x0800b4fd
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4da:	e284      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b4dc:	2304      	movs	r3, #4
 800b4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e2:	e280      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b4e4:	2308      	movs	r3, #8
 800b4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ea:	e27c      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b4ec:	2310      	movs	r3, #16
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f2:	e278      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fa:	e274      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b4fc:	2340      	movs	r3, #64	@ 0x40
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b502:	e270      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b504:	2380      	movs	r3, #128	@ 0x80
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50a:	e26c      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a1b      	ldr	r2, [pc, #108]	@ (800b580 <UART_SetConfig+0x348>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d142      	bne.n	800b59c <UART_SetConfig+0x364>
 800b516:	4b16      	ldr	r3, [pc, #88]	@ (800b570 <UART_SetConfig+0x338>)
 800b518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b51a:	f003 0307 	and.w	r3, r3, #7
 800b51e:	2b05      	cmp	r3, #5
 800b520:	d838      	bhi.n	800b594 <UART_SetConfig+0x35c>
 800b522:	a201      	add	r2, pc, #4	@ (adr r2, 800b528 <UART_SetConfig+0x2f0>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b541 	.word	0x0800b541
 800b52c:	0800b549 	.word	0x0800b549
 800b530:	0800b551 	.word	0x0800b551
 800b534:	0800b559 	.word	0x0800b559
 800b538:	0800b585 	.word	0x0800b585
 800b53c:	0800b58d 	.word	0x0800b58d
 800b540:	2300      	movs	r3, #0
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b546:	e24e      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b548:	2304      	movs	r3, #4
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54e:	e24a      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b550:	2308      	movs	r3, #8
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b556:	e246      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b558:	2310      	movs	r3, #16
 800b55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b55e:	e242      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b560:	cfff69f3 	.word	0xcfff69f3
 800b564:	58000c00 	.word	0x58000c00
 800b568:	11fff4ff 	.word	0x11fff4ff
 800b56c:	40011000 	.word	0x40011000
 800b570:	58024400 	.word	0x58024400
 800b574:	40004400 	.word	0x40004400
 800b578:	40004800 	.word	0x40004800
 800b57c:	40004c00 	.word	0x40004c00
 800b580:	40005000 	.word	0x40005000
 800b584:	2320      	movs	r3, #32
 800b586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58a:	e22c      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b58c:	2340      	movs	r3, #64	@ 0x40
 800b58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b592:	e228      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b594:	2380      	movs	r3, #128	@ 0x80
 800b596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59a:	e224      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4ab1      	ldr	r2, [pc, #708]	@ (800b868 <UART_SetConfig+0x630>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d176      	bne.n	800b694 <UART_SetConfig+0x45c>
 800b5a6:	4bb1      	ldr	r3, [pc, #708]	@ (800b86c <UART_SetConfig+0x634>)
 800b5a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b5ae:	2b28      	cmp	r3, #40	@ 0x28
 800b5b0:	d86c      	bhi.n	800b68c <UART_SetConfig+0x454>
 800b5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b8 <UART_SetConfig+0x380>)
 800b5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b8:	0800b65d 	.word	0x0800b65d
 800b5bc:	0800b68d 	.word	0x0800b68d
 800b5c0:	0800b68d 	.word	0x0800b68d
 800b5c4:	0800b68d 	.word	0x0800b68d
 800b5c8:	0800b68d 	.word	0x0800b68d
 800b5cc:	0800b68d 	.word	0x0800b68d
 800b5d0:	0800b68d 	.word	0x0800b68d
 800b5d4:	0800b68d 	.word	0x0800b68d
 800b5d8:	0800b665 	.word	0x0800b665
 800b5dc:	0800b68d 	.word	0x0800b68d
 800b5e0:	0800b68d 	.word	0x0800b68d
 800b5e4:	0800b68d 	.word	0x0800b68d
 800b5e8:	0800b68d 	.word	0x0800b68d
 800b5ec:	0800b68d 	.word	0x0800b68d
 800b5f0:	0800b68d 	.word	0x0800b68d
 800b5f4:	0800b68d 	.word	0x0800b68d
 800b5f8:	0800b66d 	.word	0x0800b66d
 800b5fc:	0800b68d 	.word	0x0800b68d
 800b600:	0800b68d 	.word	0x0800b68d
 800b604:	0800b68d 	.word	0x0800b68d
 800b608:	0800b68d 	.word	0x0800b68d
 800b60c:	0800b68d 	.word	0x0800b68d
 800b610:	0800b68d 	.word	0x0800b68d
 800b614:	0800b68d 	.word	0x0800b68d
 800b618:	0800b675 	.word	0x0800b675
 800b61c:	0800b68d 	.word	0x0800b68d
 800b620:	0800b68d 	.word	0x0800b68d
 800b624:	0800b68d 	.word	0x0800b68d
 800b628:	0800b68d 	.word	0x0800b68d
 800b62c:	0800b68d 	.word	0x0800b68d
 800b630:	0800b68d 	.word	0x0800b68d
 800b634:	0800b68d 	.word	0x0800b68d
 800b638:	0800b67d 	.word	0x0800b67d
 800b63c:	0800b68d 	.word	0x0800b68d
 800b640:	0800b68d 	.word	0x0800b68d
 800b644:	0800b68d 	.word	0x0800b68d
 800b648:	0800b68d 	.word	0x0800b68d
 800b64c:	0800b68d 	.word	0x0800b68d
 800b650:	0800b68d 	.word	0x0800b68d
 800b654:	0800b68d 	.word	0x0800b68d
 800b658:	0800b685 	.word	0x0800b685
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b662:	e1c0      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b664:	2304      	movs	r3, #4
 800b666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b66a:	e1bc      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b66c:	2308      	movs	r3, #8
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b672:	e1b8      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b674:	2310      	movs	r3, #16
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67a:	e1b4      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b67c:	2320      	movs	r3, #32
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b682:	e1b0      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b684:	2340      	movs	r3, #64	@ 0x40
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68a:	e1ac      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b68c:	2380      	movs	r3, #128	@ 0x80
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b692:	e1a8      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a75      	ldr	r2, [pc, #468]	@ (800b870 <UART_SetConfig+0x638>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d130      	bne.n	800b700 <UART_SetConfig+0x4c8>
 800b69e:	4b73      	ldr	r3, [pc, #460]	@ (800b86c <UART_SetConfig+0x634>)
 800b6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6a2:	f003 0307 	and.w	r3, r3, #7
 800b6a6:	2b05      	cmp	r3, #5
 800b6a8:	d826      	bhi.n	800b6f8 <UART_SetConfig+0x4c0>
 800b6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b0 <UART_SetConfig+0x478>)
 800b6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b0:	0800b6c9 	.word	0x0800b6c9
 800b6b4:	0800b6d1 	.word	0x0800b6d1
 800b6b8:	0800b6d9 	.word	0x0800b6d9
 800b6bc:	0800b6e1 	.word	0x0800b6e1
 800b6c0:	0800b6e9 	.word	0x0800b6e9
 800b6c4:	0800b6f1 	.word	0x0800b6f1
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ce:	e18a      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b6d0:	2304      	movs	r3, #4
 800b6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d6:	e186      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b6d8:	2308      	movs	r3, #8
 800b6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6de:	e182      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b6e0:	2310      	movs	r3, #16
 800b6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e6:	e17e      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b6e8:	2320      	movs	r3, #32
 800b6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ee:	e17a      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b6f0:	2340      	movs	r3, #64	@ 0x40
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f6:	e176      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b6f8:	2380      	movs	r3, #128	@ 0x80
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fe:	e172      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a5b      	ldr	r2, [pc, #364]	@ (800b874 <UART_SetConfig+0x63c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d130      	bne.n	800b76c <UART_SetConfig+0x534>
 800b70a:	4b58      	ldr	r3, [pc, #352]	@ (800b86c <UART_SetConfig+0x634>)
 800b70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b70e:	f003 0307 	and.w	r3, r3, #7
 800b712:	2b05      	cmp	r3, #5
 800b714:	d826      	bhi.n	800b764 <UART_SetConfig+0x52c>
 800b716:	a201      	add	r2, pc, #4	@ (adr r2, 800b71c <UART_SetConfig+0x4e4>)
 800b718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71c:	0800b735 	.word	0x0800b735
 800b720:	0800b73d 	.word	0x0800b73d
 800b724:	0800b745 	.word	0x0800b745
 800b728:	0800b74d 	.word	0x0800b74d
 800b72c:	0800b755 	.word	0x0800b755
 800b730:	0800b75d 	.word	0x0800b75d
 800b734:	2300      	movs	r3, #0
 800b736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73a:	e154      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b73c:	2304      	movs	r3, #4
 800b73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b742:	e150      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b744:	2308      	movs	r3, #8
 800b746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74a:	e14c      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b74c:	2310      	movs	r3, #16
 800b74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b752:	e148      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b754:	2320      	movs	r3, #32
 800b756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75a:	e144      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b75c:	2340      	movs	r3, #64	@ 0x40
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b762:	e140      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b764:	2380      	movs	r3, #128	@ 0x80
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76a:	e13c      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a41      	ldr	r2, [pc, #260]	@ (800b878 <UART_SetConfig+0x640>)
 800b772:	4293      	cmp	r3, r2
 800b774:	f040 8082 	bne.w	800b87c <UART_SetConfig+0x644>
 800b778:	4b3c      	ldr	r3, [pc, #240]	@ (800b86c <UART_SetConfig+0x634>)
 800b77a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b77c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b780:	2b28      	cmp	r3, #40	@ 0x28
 800b782:	d86d      	bhi.n	800b860 <UART_SetConfig+0x628>
 800b784:	a201      	add	r2, pc, #4	@ (adr r2, 800b78c <UART_SetConfig+0x554>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b831 	.word	0x0800b831
 800b790:	0800b861 	.word	0x0800b861
 800b794:	0800b861 	.word	0x0800b861
 800b798:	0800b861 	.word	0x0800b861
 800b79c:	0800b861 	.word	0x0800b861
 800b7a0:	0800b861 	.word	0x0800b861
 800b7a4:	0800b861 	.word	0x0800b861
 800b7a8:	0800b861 	.word	0x0800b861
 800b7ac:	0800b839 	.word	0x0800b839
 800b7b0:	0800b861 	.word	0x0800b861
 800b7b4:	0800b861 	.word	0x0800b861
 800b7b8:	0800b861 	.word	0x0800b861
 800b7bc:	0800b861 	.word	0x0800b861
 800b7c0:	0800b861 	.word	0x0800b861
 800b7c4:	0800b861 	.word	0x0800b861
 800b7c8:	0800b861 	.word	0x0800b861
 800b7cc:	0800b841 	.word	0x0800b841
 800b7d0:	0800b861 	.word	0x0800b861
 800b7d4:	0800b861 	.word	0x0800b861
 800b7d8:	0800b861 	.word	0x0800b861
 800b7dc:	0800b861 	.word	0x0800b861
 800b7e0:	0800b861 	.word	0x0800b861
 800b7e4:	0800b861 	.word	0x0800b861
 800b7e8:	0800b861 	.word	0x0800b861
 800b7ec:	0800b849 	.word	0x0800b849
 800b7f0:	0800b861 	.word	0x0800b861
 800b7f4:	0800b861 	.word	0x0800b861
 800b7f8:	0800b861 	.word	0x0800b861
 800b7fc:	0800b861 	.word	0x0800b861
 800b800:	0800b861 	.word	0x0800b861
 800b804:	0800b861 	.word	0x0800b861
 800b808:	0800b861 	.word	0x0800b861
 800b80c:	0800b851 	.word	0x0800b851
 800b810:	0800b861 	.word	0x0800b861
 800b814:	0800b861 	.word	0x0800b861
 800b818:	0800b861 	.word	0x0800b861
 800b81c:	0800b861 	.word	0x0800b861
 800b820:	0800b861 	.word	0x0800b861
 800b824:	0800b861 	.word	0x0800b861
 800b828:	0800b861 	.word	0x0800b861
 800b82c:	0800b859 	.word	0x0800b859
 800b830:	2301      	movs	r3, #1
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b836:	e0d6      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b838:	2304      	movs	r3, #4
 800b83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b83e:	e0d2      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b840:	2308      	movs	r3, #8
 800b842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b846:	e0ce      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b848:	2310      	movs	r3, #16
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84e:	e0ca      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b850:	2320      	movs	r3, #32
 800b852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b856:	e0c6      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b858:	2340      	movs	r3, #64	@ 0x40
 800b85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b85e:	e0c2      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b860:	2380      	movs	r3, #128	@ 0x80
 800b862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b866:	e0be      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b868:	40011400 	.word	0x40011400
 800b86c:	58024400 	.word	0x58024400
 800b870:	40007800 	.word	0x40007800
 800b874:	40007c00 	.word	0x40007c00
 800b878:	40011800 	.word	0x40011800
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4aad      	ldr	r2, [pc, #692]	@ (800bb38 <UART_SetConfig+0x900>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d176      	bne.n	800b974 <UART_SetConfig+0x73c>
 800b886:	4bad      	ldr	r3, [pc, #692]	@ (800bb3c <UART_SetConfig+0x904>)
 800b888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b88a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b88e:	2b28      	cmp	r3, #40	@ 0x28
 800b890:	d86c      	bhi.n	800b96c <UART_SetConfig+0x734>
 800b892:	a201      	add	r2, pc, #4	@ (adr r2, 800b898 <UART_SetConfig+0x660>)
 800b894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b898:	0800b93d 	.word	0x0800b93d
 800b89c:	0800b96d 	.word	0x0800b96d
 800b8a0:	0800b96d 	.word	0x0800b96d
 800b8a4:	0800b96d 	.word	0x0800b96d
 800b8a8:	0800b96d 	.word	0x0800b96d
 800b8ac:	0800b96d 	.word	0x0800b96d
 800b8b0:	0800b96d 	.word	0x0800b96d
 800b8b4:	0800b96d 	.word	0x0800b96d
 800b8b8:	0800b945 	.word	0x0800b945
 800b8bc:	0800b96d 	.word	0x0800b96d
 800b8c0:	0800b96d 	.word	0x0800b96d
 800b8c4:	0800b96d 	.word	0x0800b96d
 800b8c8:	0800b96d 	.word	0x0800b96d
 800b8cc:	0800b96d 	.word	0x0800b96d
 800b8d0:	0800b96d 	.word	0x0800b96d
 800b8d4:	0800b96d 	.word	0x0800b96d
 800b8d8:	0800b94d 	.word	0x0800b94d
 800b8dc:	0800b96d 	.word	0x0800b96d
 800b8e0:	0800b96d 	.word	0x0800b96d
 800b8e4:	0800b96d 	.word	0x0800b96d
 800b8e8:	0800b96d 	.word	0x0800b96d
 800b8ec:	0800b96d 	.word	0x0800b96d
 800b8f0:	0800b96d 	.word	0x0800b96d
 800b8f4:	0800b96d 	.word	0x0800b96d
 800b8f8:	0800b955 	.word	0x0800b955
 800b8fc:	0800b96d 	.word	0x0800b96d
 800b900:	0800b96d 	.word	0x0800b96d
 800b904:	0800b96d 	.word	0x0800b96d
 800b908:	0800b96d 	.word	0x0800b96d
 800b90c:	0800b96d 	.word	0x0800b96d
 800b910:	0800b96d 	.word	0x0800b96d
 800b914:	0800b96d 	.word	0x0800b96d
 800b918:	0800b95d 	.word	0x0800b95d
 800b91c:	0800b96d 	.word	0x0800b96d
 800b920:	0800b96d 	.word	0x0800b96d
 800b924:	0800b96d 	.word	0x0800b96d
 800b928:	0800b96d 	.word	0x0800b96d
 800b92c:	0800b96d 	.word	0x0800b96d
 800b930:	0800b96d 	.word	0x0800b96d
 800b934:	0800b96d 	.word	0x0800b96d
 800b938:	0800b965 	.word	0x0800b965
 800b93c:	2301      	movs	r3, #1
 800b93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b942:	e050      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b944:	2304      	movs	r3, #4
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94a:	e04c      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b94c:	2308      	movs	r3, #8
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b952:	e048      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b954:	2310      	movs	r3, #16
 800b956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95a:	e044      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b95c:	2320      	movs	r3, #32
 800b95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b962:	e040      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b964:	2340      	movs	r3, #64	@ 0x40
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96a:	e03c      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b96c:	2380      	movs	r3, #128	@ 0x80
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b972:	e038      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a71      	ldr	r2, [pc, #452]	@ (800bb40 <UART_SetConfig+0x908>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d130      	bne.n	800b9e0 <UART_SetConfig+0x7a8>
 800b97e:	4b6f      	ldr	r3, [pc, #444]	@ (800bb3c <UART_SetConfig+0x904>)
 800b980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b982:	f003 0307 	and.w	r3, r3, #7
 800b986:	2b05      	cmp	r3, #5
 800b988:	d826      	bhi.n	800b9d8 <UART_SetConfig+0x7a0>
 800b98a:	a201      	add	r2, pc, #4	@ (adr r2, 800b990 <UART_SetConfig+0x758>)
 800b98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b990:	0800b9a9 	.word	0x0800b9a9
 800b994:	0800b9b1 	.word	0x0800b9b1
 800b998:	0800b9b9 	.word	0x0800b9b9
 800b99c:	0800b9c1 	.word	0x0800b9c1
 800b9a0:	0800b9c9 	.word	0x0800b9c9
 800b9a4:	0800b9d1 	.word	0x0800b9d1
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ae:	e01a      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b9b0:	2304      	movs	r3, #4
 800b9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9b6:	e016      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b9b8:	2308      	movs	r3, #8
 800b9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9be:	e012      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b9c0:	2310      	movs	r3, #16
 800b9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9c6:	e00e      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b9c8:	2320      	movs	r3, #32
 800b9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ce:	e00a      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b9d0:	2340      	movs	r3, #64	@ 0x40
 800b9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d6:	e006      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b9d8:	2380      	movs	r3, #128	@ 0x80
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9de:	e002      	b.n	800b9e6 <UART_SetConfig+0x7ae>
 800b9e0:	2380      	movs	r3, #128	@ 0x80
 800b9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a55      	ldr	r2, [pc, #340]	@ (800bb40 <UART_SetConfig+0x908>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	f040 80f8 	bne.w	800bbe2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9f6:	2b20      	cmp	r3, #32
 800b9f8:	dc46      	bgt.n	800ba88 <UART_SetConfig+0x850>
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	db75      	blt.n	800baea <UART_SetConfig+0x8b2>
 800b9fe:	3b02      	subs	r3, #2
 800ba00:	2b1e      	cmp	r3, #30
 800ba02:	d872      	bhi.n	800baea <UART_SetConfig+0x8b2>
 800ba04:	a201      	add	r2, pc, #4	@ (adr r2, 800ba0c <UART_SetConfig+0x7d4>)
 800ba06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0a:	bf00      	nop
 800ba0c:	0800ba8f 	.word	0x0800ba8f
 800ba10:	0800baeb 	.word	0x0800baeb
 800ba14:	0800ba97 	.word	0x0800ba97
 800ba18:	0800baeb 	.word	0x0800baeb
 800ba1c:	0800baeb 	.word	0x0800baeb
 800ba20:	0800baeb 	.word	0x0800baeb
 800ba24:	0800baa7 	.word	0x0800baa7
 800ba28:	0800baeb 	.word	0x0800baeb
 800ba2c:	0800baeb 	.word	0x0800baeb
 800ba30:	0800baeb 	.word	0x0800baeb
 800ba34:	0800baeb 	.word	0x0800baeb
 800ba38:	0800baeb 	.word	0x0800baeb
 800ba3c:	0800baeb 	.word	0x0800baeb
 800ba40:	0800baeb 	.word	0x0800baeb
 800ba44:	0800bab7 	.word	0x0800bab7
 800ba48:	0800baeb 	.word	0x0800baeb
 800ba4c:	0800baeb 	.word	0x0800baeb
 800ba50:	0800baeb 	.word	0x0800baeb
 800ba54:	0800baeb 	.word	0x0800baeb
 800ba58:	0800baeb 	.word	0x0800baeb
 800ba5c:	0800baeb 	.word	0x0800baeb
 800ba60:	0800baeb 	.word	0x0800baeb
 800ba64:	0800baeb 	.word	0x0800baeb
 800ba68:	0800baeb 	.word	0x0800baeb
 800ba6c:	0800baeb 	.word	0x0800baeb
 800ba70:	0800baeb 	.word	0x0800baeb
 800ba74:	0800baeb 	.word	0x0800baeb
 800ba78:	0800baeb 	.word	0x0800baeb
 800ba7c:	0800baeb 	.word	0x0800baeb
 800ba80:	0800baeb 	.word	0x0800baeb
 800ba84:	0800badd 	.word	0x0800badd
 800ba88:	2b40      	cmp	r3, #64	@ 0x40
 800ba8a:	d02a      	beq.n	800bae2 <UART_SetConfig+0x8aa>
 800ba8c:	e02d      	b.n	800baea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ba8e:	f7fc fa7b 	bl	8007f88 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba94:	e02f      	b.n	800baf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fc fa8a 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800baa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa4:	e027      	b.n	800baf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baa6:	f107 0318 	add.w	r3, r7, #24
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fc fbd6 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bab4:	e01f      	b.n	800baf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bab6:	4b21      	ldr	r3, [pc, #132]	@ (800bb3c <UART_SetConfig+0x904>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f003 0320 	and.w	r3, r3, #32
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d009      	beq.n	800bad6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bac2:	4b1e      	ldr	r3, [pc, #120]	@ (800bb3c <UART_SetConfig+0x904>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	08db      	lsrs	r3, r3, #3
 800bac8:	f003 0303 	and.w	r3, r3, #3
 800bacc:	4a1d      	ldr	r2, [pc, #116]	@ (800bb44 <UART_SetConfig+0x90c>)
 800bace:	fa22 f303 	lsr.w	r3, r2, r3
 800bad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bad4:	e00f      	b.n	800baf6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bad6:	4b1b      	ldr	r3, [pc, #108]	@ (800bb44 <UART_SetConfig+0x90c>)
 800bad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bada:	e00c      	b.n	800baf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800badc:	4b1a      	ldr	r3, [pc, #104]	@ (800bb48 <UART_SetConfig+0x910>)
 800bade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae0:	e009      	b.n	800baf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae8:	e005      	b.n	800baf6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800baea:	2300      	movs	r3, #0
 800baec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800baf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800baf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 81ee 	beq.w	800beda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb02:	4a12      	ldr	r2, [pc, #72]	@ (800bb4c <UART_SetConfig+0x914>)
 800bb04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb10:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	4613      	mov	r3, r2
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	4413      	add	r3, r2
 800bb1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d305      	bcc.n	800bb2e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d910      	bls.n	800bb50 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb34:	e1d1      	b.n	800beda <UART_SetConfig+0xca2>
 800bb36:	bf00      	nop
 800bb38:	40011c00 	.word	0x40011c00
 800bb3c:	58024400 	.word	0x58024400
 800bb40:	58000c00 	.word	0x58000c00
 800bb44:	03d09000 	.word	0x03d09000
 800bb48:	003d0900 	.word	0x003d0900
 800bb4c:	08011e98 	.word	0x08011e98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb52:	2200      	movs	r2, #0
 800bb54:	60bb      	str	r3, [r7, #8]
 800bb56:	60fa      	str	r2, [r7, #12]
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5c:	4ac0      	ldr	r2, [pc, #768]	@ (800be60 <UART_SetConfig+0xc28>)
 800bb5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	2200      	movs	r2, #0
 800bb66:	603b      	str	r3, [r7, #0]
 800bb68:	607a      	str	r2, [r7, #4]
 800bb6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb72:	f7f4 fde1 	bl	8000738 <__aeabi_uldivmod>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4610      	mov	r0, r2
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	f04f 0200 	mov.w	r2, #0
 800bb82:	f04f 0300 	mov.w	r3, #0
 800bb86:	020b      	lsls	r3, r1, #8
 800bb88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb8c:	0202      	lsls	r2, r0, #8
 800bb8e:	6979      	ldr	r1, [r7, #20]
 800bb90:	6849      	ldr	r1, [r1, #4]
 800bb92:	0849      	lsrs	r1, r1, #1
 800bb94:	2000      	movs	r0, #0
 800bb96:	460c      	mov	r4, r1
 800bb98:	4605      	mov	r5, r0
 800bb9a:	eb12 0804 	adds.w	r8, r2, r4
 800bb9e:	eb43 0905 	adc.w	r9, r3, r5
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	469a      	mov	sl, r3
 800bbaa:	4693      	mov	fp, r2
 800bbac:	4652      	mov	r2, sl
 800bbae:	465b      	mov	r3, fp
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	f7f4 fdc0 	bl	8000738 <__aeabi_uldivmod>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bbc6:	d308      	bcc.n	800bbda <UART_SetConfig+0x9a2>
 800bbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbce:	d204      	bcs.n	800bbda <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbd6:	60da      	str	r2, [r3, #12]
 800bbd8:	e17f      	b.n	800beda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bbe0:	e17b      	b.n	800beda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbea:	f040 80bd 	bne.w	800bd68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800bbee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bbf2:	2b20      	cmp	r3, #32
 800bbf4:	dc48      	bgt.n	800bc88 <UART_SetConfig+0xa50>
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	db7b      	blt.n	800bcf2 <UART_SetConfig+0xaba>
 800bbfa:	2b20      	cmp	r3, #32
 800bbfc:	d879      	bhi.n	800bcf2 <UART_SetConfig+0xaba>
 800bbfe:	a201      	add	r2, pc, #4	@ (adr r2, 800bc04 <UART_SetConfig+0x9cc>)
 800bc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc04:	0800bc8f 	.word	0x0800bc8f
 800bc08:	0800bc97 	.word	0x0800bc97
 800bc0c:	0800bcf3 	.word	0x0800bcf3
 800bc10:	0800bcf3 	.word	0x0800bcf3
 800bc14:	0800bc9f 	.word	0x0800bc9f
 800bc18:	0800bcf3 	.word	0x0800bcf3
 800bc1c:	0800bcf3 	.word	0x0800bcf3
 800bc20:	0800bcf3 	.word	0x0800bcf3
 800bc24:	0800bcaf 	.word	0x0800bcaf
 800bc28:	0800bcf3 	.word	0x0800bcf3
 800bc2c:	0800bcf3 	.word	0x0800bcf3
 800bc30:	0800bcf3 	.word	0x0800bcf3
 800bc34:	0800bcf3 	.word	0x0800bcf3
 800bc38:	0800bcf3 	.word	0x0800bcf3
 800bc3c:	0800bcf3 	.word	0x0800bcf3
 800bc40:	0800bcf3 	.word	0x0800bcf3
 800bc44:	0800bcbf 	.word	0x0800bcbf
 800bc48:	0800bcf3 	.word	0x0800bcf3
 800bc4c:	0800bcf3 	.word	0x0800bcf3
 800bc50:	0800bcf3 	.word	0x0800bcf3
 800bc54:	0800bcf3 	.word	0x0800bcf3
 800bc58:	0800bcf3 	.word	0x0800bcf3
 800bc5c:	0800bcf3 	.word	0x0800bcf3
 800bc60:	0800bcf3 	.word	0x0800bcf3
 800bc64:	0800bcf3 	.word	0x0800bcf3
 800bc68:	0800bcf3 	.word	0x0800bcf3
 800bc6c:	0800bcf3 	.word	0x0800bcf3
 800bc70:	0800bcf3 	.word	0x0800bcf3
 800bc74:	0800bcf3 	.word	0x0800bcf3
 800bc78:	0800bcf3 	.word	0x0800bcf3
 800bc7c:	0800bcf3 	.word	0x0800bcf3
 800bc80:	0800bcf3 	.word	0x0800bcf3
 800bc84:	0800bce5 	.word	0x0800bce5
 800bc88:	2b40      	cmp	r3, #64	@ 0x40
 800bc8a:	d02e      	beq.n	800bcea <UART_SetConfig+0xab2>
 800bc8c:	e031      	b.n	800bcf2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc8e:	f7fa fadd 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 800bc92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc94:	e033      	b.n	800bcfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc96:	f7fa faef 	bl	8006278 <HAL_RCC_GetPCLK2Freq>
 800bc9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc9c:	e02f      	b.n	800bcfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fc f986 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcac:	e027      	b.n	800bcfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcae:	f107 0318 	add.w	r3, r7, #24
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fc fad2 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcbc:	e01f      	b.n	800bcfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcbe:	4b69      	ldr	r3, [pc, #420]	@ (800be64 <UART_SetConfig+0xc2c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 0320 	and.w	r3, r3, #32
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d009      	beq.n	800bcde <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bcca:	4b66      	ldr	r3, [pc, #408]	@ (800be64 <UART_SetConfig+0xc2c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	08db      	lsrs	r3, r3, #3
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	4a64      	ldr	r2, [pc, #400]	@ (800be68 <UART_SetConfig+0xc30>)
 800bcd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bcdc:	e00f      	b.n	800bcfe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bcde:	4b62      	ldr	r3, [pc, #392]	@ (800be68 <UART_SetConfig+0xc30>)
 800bce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bce2:	e00c      	b.n	800bcfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bce4:	4b61      	ldr	r3, [pc, #388]	@ (800be6c <UART_SetConfig+0xc34>)
 800bce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bce8:	e009      	b.n	800bcfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcf0:	e005      	b.n	800bcfe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bcfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f000 80ea 	beq.w	800beda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd0a:	4a55      	ldr	r2, [pc, #340]	@ (800be60 <UART_SetConfig+0xc28>)
 800bd0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd10:	461a      	mov	r2, r3
 800bd12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd14:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd18:	005a      	lsls	r2, r3, #1
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	085b      	lsrs	r3, r3, #1
 800bd20:	441a      	add	r2, r3
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2e:	2b0f      	cmp	r3, #15
 800bd30:	d916      	bls.n	800bd60 <UART_SetConfig+0xb28>
 800bd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd38:	d212      	bcs.n	800bd60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f023 030f 	bic.w	r3, r3, #15
 800bd42:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd46:	085b      	lsrs	r3, r3, #1
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	f003 0307 	and.w	r3, r3, #7
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bd52:	4313      	orrs	r3, r2
 800bd54:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bd5c:	60da      	str	r2, [r3, #12]
 800bd5e:	e0bc      	b.n	800beda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bd66:	e0b8      	b.n	800beda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bd6c:	2b20      	cmp	r3, #32
 800bd6e:	dc4b      	bgt.n	800be08 <UART_SetConfig+0xbd0>
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f2c0 8087 	blt.w	800be84 <UART_SetConfig+0xc4c>
 800bd76:	2b20      	cmp	r3, #32
 800bd78:	f200 8084 	bhi.w	800be84 <UART_SetConfig+0xc4c>
 800bd7c:	a201      	add	r2, pc, #4	@ (adr r2, 800bd84 <UART_SetConfig+0xb4c>)
 800bd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd82:	bf00      	nop
 800bd84:	0800be0f 	.word	0x0800be0f
 800bd88:	0800be17 	.word	0x0800be17
 800bd8c:	0800be85 	.word	0x0800be85
 800bd90:	0800be85 	.word	0x0800be85
 800bd94:	0800be1f 	.word	0x0800be1f
 800bd98:	0800be85 	.word	0x0800be85
 800bd9c:	0800be85 	.word	0x0800be85
 800bda0:	0800be85 	.word	0x0800be85
 800bda4:	0800be2f 	.word	0x0800be2f
 800bda8:	0800be85 	.word	0x0800be85
 800bdac:	0800be85 	.word	0x0800be85
 800bdb0:	0800be85 	.word	0x0800be85
 800bdb4:	0800be85 	.word	0x0800be85
 800bdb8:	0800be85 	.word	0x0800be85
 800bdbc:	0800be85 	.word	0x0800be85
 800bdc0:	0800be85 	.word	0x0800be85
 800bdc4:	0800be3f 	.word	0x0800be3f
 800bdc8:	0800be85 	.word	0x0800be85
 800bdcc:	0800be85 	.word	0x0800be85
 800bdd0:	0800be85 	.word	0x0800be85
 800bdd4:	0800be85 	.word	0x0800be85
 800bdd8:	0800be85 	.word	0x0800be85
 800bddc:	0800be85 	.word	0x0800be85
 800bde0:	0800be85 	.word	0x0800be85
 800bde4:	0800be85 	.word	0x0800be85
 800bde8:	0800be85 	.word	0x0800be85
 800bdec:	0800be85 	.word	0x0800be85
 800bdf0:	0800be85 	.word	0x0800be85
 800bdf4:	0800be85 	.word	0x0800be85
 800bdf8:	0800be85 	.word	0x0800be85
 800bdfc:	0800be85 	.word	0x0800be85
 800be00:	0800be85 	.word	0x0800be85
 800be04:	0800be77 	.word	0x0800be77
 800be08:	2b40      	cmp	r3, #64	@ 0x40
 800be0a:	d037      	beq.n	800be7c <UART_SetConfig+0xc44>
 800be0c:	e03a      	b.n	800be84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be0e:	f7fa fa1d 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 800be12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be14:	e03c      	b.n	800be90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be16:	f7fa fa2f 	bl	8006278 <HAL_RCC_GetPCLK2Freq>
 800be1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be1c:	e038      	b.n	800be90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be22:	4618      	mov	r0, r3
 800be24:	f7fc f8c6 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be2c:	e030      	b.n	800be90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be2e:	f107 0318 	add.w	r3, r7, #24
 800be32:	4618      	mov	r0, r3
 800be34:	f7fc fa12 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be3c:	e028      	b.n	800be90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be3e:	4b09      	ldr	r3, [pc, #36]	@ (800be64 <UART_SetConfig+0xc2c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 0320 	and.w	r3, r3, #32
 800be46:	2b00      	cmp	r3, #0
 800be48:	d012      	beq.n	800be70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be4a:	4b06      	ldr	r3, [pc, #24]	@ (800be64 <UART_SetConfig+0xc2c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	08db      	lsrs	r3, r3, #3
 800be50:	f003 0303 	and.w	r3, r3, #3
 800be54:	4a04      	ldr	r2, [pc, #16]	@ (800be68 <UART_SetConfig+0xc30>)
 800be56:	fa22 f303 	lsr.w	r3, r2, r3
 800be5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be5c:	e018      	b.n	800be90 <UART_SetConfig+0xc58>
 800be5e:	bf00      	nop
 800be60:	08011e98 	.word	0x08011e98
 800be64:	58024400 	.word	0x58024400
 800be68:	03d09000 	.word	0x03d09000
 800be6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800be70:	4b24      	ldr	r3, [pc, #144]	@ (800bf04 <UART_SetConfig+0xccc>)
 800be72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be74:	e00c      	b.n	800be90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be76:	4b24      	ldr	r3, [pc, #144]	@ (800bf08 <UART_SetConfig+0xcd0>)
 800be78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be7a:	e009      	b.n	800be90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be82:	e005      	b.n	800be90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800be84:	2300      	movs	r3, #0
 800be86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800be8e:	bf00      	nop
    }

    if (pclk != 0U)
 800be90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be92:	2b00      	cmp	r3, #0
 800be94:	d021      	beq.n	800beda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9a:	4a1c      	ldr	r2, [pc, #112]	@ (800bf0c <UART_SetConfig+0xcd4>)
 800be9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bea4:	fbb3 f2f2 	udiv	r2, r3, r2
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	085b      	lsrs	r3, r3, #1
 800beae:	441a      	add	r2, r3
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800beba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebc:	2b0f      	cmp	r3, #15
 800bebe:	d909      	bls.n	800bed4 <UART_SetConfig+0xc9c>
 800bec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bec6:	d205      	bcs.n	800bed4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beca:	b29a      	uxth	r2, r3
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	60da      	str	r2, [r3, #12]
 800bed2:	e002      	b.n	800beda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2201      	movs	r2, #1
 800bede:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2201      	movs	r2, #1
 800bee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	2200      	movs	r2, #0
 800beee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2200      	movs	r2, #0
 800bef4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bef6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800befa:	4618      	mov	r0, r3
 800befc:	3748      	adds	r7, #72	@ 0x48
 800befe:	46bd      	mov	sp, r7
 800bf00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf04:	03d09000 	.word	0x03d09000
 800bf08:	003d0900 	.word	0x003d0900
 800bf0c:	08011e98 	.word	0x08011e98

0800bf10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1c:	f003 0308 	and.w	r3, r3, #8
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00a      	beq.n	800bf3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	430a      	orrs	r2, r1
 800bf38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00a      	beq.n	800bf5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	430a      	orrs	r2, r1
 800bf5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf60:	f003 0302 	and.w	r3, r3, #2
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00a      	beq.n	800bf7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf82:	f003 0304 	and.w	r3, r3, #4
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa4:	f003 0310 	and.w	r3, r3, #16
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00a      	beq.n	800bfc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc6:	f003 0320 	and.w	r3, r3, #32
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00a      	beq.n	800bfe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	430a      	orrs	r2, r1
 800bfe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d01a      	beq.n	800c026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c00a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c00e:	d10a      	bne.n	800c026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	430a      	orrs	r2, r1
 800c024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c02a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00a      	beq.n	800c048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	430a      	orrs	r2, r1
 800c046:	605a      	str	r2, [r3, #4]
  }
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b098      	sub	sp, #96	@ 0x60
 800c058:	af02      	add	r7, sp, #8
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c064:	f7f8 f804 	bl	8004070 <HAL_GetTick>
 800c068:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 0308 	and.w	r3, r3, #8
 800c074:	2b08      	cmp	r3, #8
 800c076:	d12f      	bne.n	800c0d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c080:	2200      	movs	r2, #0
 800c082:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f88e 	bl	800c1a8 <UART_WaitOnFlagUntilTimeout>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d022      	beq.n	800c0d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c09a:	e853 3f00 	ldrex	r3, [r3]
 800c09e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0b8:	e841 2300 	strex	r3, r2, [r1]
 800c0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1e6      	bne.n	800c092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2220      	movs	r2, #32
 800c0c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	e063      	b.n	800c1a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0304 	and.w	r3, r3, #4
 800c0e2:	2b04      	cmp	r3, #4
 800c0e4:	d149      	bne.n	800c17a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f857 	bl	800c1a8 <UART_WaitOnFlagUntilTimeout>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d03c      	beq.n	800c17a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c108:	e853 3f00 	ldrex	r3, [r3]
 800c10c:	623b      	str	r3, [r7, #32]
   return(result);
 800c10e:	6a3b      	ldr	r3, [r7, #32]
 800c110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c11e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c120:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c126:	e841 2300 	strex	r3, r2, [r1]
 800c12a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1e6      	bne.n	800c100 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	3308      	adds	r3, #8
 800c138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	e853 3f00 	ldrex	r3, [r3]
 800c140:	60fb      	str	r3, [r7, #12]
   return(result);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f023 0301 	bic.w	r3, r3, #1
 800c148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3308      	adds	r3, #8
 800c150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c152:	61fa      	str	r2, [r7, #28]
 800c154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c156:	69b9      	ldr	r1, [r7, #24]
 800c158:	69fa      	ldr	r2, [r7, #28]
 800c15a:	e841 2300 	strex	r3, r2, [r1]
 800c15e:	617b      	str	r3, [r7, #20]
   return(result);
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1e5      	bne.n	800c132 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2220      	movs	r2, #32
 800c16a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c176:	2303      	movs	r3, #3
 800c178:	e012      	b.n	800c1a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2220      	movs	r2, #32
 800c186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3758      	adds	r7, #88	@ 0x58
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1b8:	e04f      	b.n	800c25a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1c0:	d04b      	beq.n	800c25a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1c2:	f7f7 ff55 	bl	8004070 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d302      	bcc.n	800c1d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	e04e      	b.n	800c27a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 0304 	and.w	r3, r3, #4
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d037      	beq.n	800c25a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2b80      	cmp	r3, #128	@ 0x80
 800c1ee:	d034      	beq.n	800c25a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2b40      	cmp	r3, #64	@ 0x40
 800c1f4:	d031      	beq.n	800c25a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	f003 0308 	and.w	r3, r3, #8
 800c200:	2b08      	cmp	r3, #8
 800c202:	d110      	bne.n	800c226 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2208      	movs	r2, #8
 800c20a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 f839 	bl	800c284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2208      	movs	r2, #8
 800c216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	e029      	b.n	800c27a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	69db      	ldr	r3, [r3, #28]
 800c22c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c234:	d111      	bne.n	800c25a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c23e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 f81f 	bl	800c284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2220      	movs	r2, #32
 800c24a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c256:	2303      	movs	r3, #3
 800c258:	e00f      	b.n	800c27a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	69da      	ldr	r2, [r3, #28]
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	4013      	ands	r3, r2
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	429a      	cmp	r2, r3
 800c268:	bf0c      	ite	eq
 800c26a:	2301      	moveq	r3, #1
 800c26c:	2300      	movne	r3, #0
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	461a      	mov	r2, r3
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	429a      	cmp	r2, r3
 800c276:	d0a0      	beq.n	800c1ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c284:	b480      	push	{r7}
 800c286:	b095      	sub	sp, #84	@ 0x54
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c294:	e853 3f00 	ldrex	r3, [r3]
 800c298:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2b2:	e841 2300 	strex	r3, r2, [r1]
 800c2b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1e6      	bne.n	800c28c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3308      	adds	r3, #8
 800c2c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	e853 3f00 	ldrex	r3, [r3]
 800c2cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	4b1e      	ldr	r3, [pc, #120]	@ (800c34c <UART_EndRxTransfer+0xc8>)
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	3308      	adds	r3, #8
 800c2dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2e6:	e841 2300 	strex	r3, r2, [r1]
 800c2ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1e5      	bne.n	800c2be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d118      	bne.n	800c32c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	60bb      	str	r3, [r7, #8]
   return(result);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f023 0310 	bic.w	r3, r3, #16
 800c30e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	461a      	mov	r2, r3
 800c316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c318:	61bb      	str	r3, [r7, #24]
 800c31a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31c:	6979      	ldr	r1, [r7, #20]
 800c31e:	69ba      	ldr	r2, [r7, #24]
 800c320:	e841 2300 	strex	r3, r2, [r1]
 800c324:	613b      	str	r3, [r7, #16]
   return(result);
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1e6      	bne.n	800c2fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2220      	movs	r2, #32
 800c330:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c340:	bf00      	nop
 800c342:	3754      	adds	r7, #84	@ 0x54
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	effffffe 	.word	0xeffffffe

0800c350 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d101      	bne.n	800c366 <HAL_UARTEx_DisableFifoMode+0x16>
 800c362:	2302      	movs	r3, #2
 800c364:	e027      	b.n	800c3b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2224      	movs	r2, #36	@ 0x24
 800c372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f022 0201 	bic.w	r2, r2, #1
 800c38c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c394:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2220      	movs	r2, #32
 800c3a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d101      	bne.n	800c3da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3d6:	2302      	movs	r3, #2
 800c3d8:	e02d      	b.n	800c436 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2224      	movs	r2, #36	@ 0x24
 800c3e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f022 0201 	bic.w	r2, r2, #1
 800c400:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f850 	bl	800c4bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2220      	movs	r2, #32
 800c428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b084      	sub	sp, #16
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d101      	bne.n	800c456 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c452:	2302      	movs	r3, #2
 800c454:	e02d      	b.n	800c4b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2224      	movs	r2, #36	@ 0x24
 800c462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f022 0201 	bic.w	r2, r2, #1
 800c47c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f812 	bl	800c4bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2220      	movs	r2, #32
 800c4a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
	...

0800c4bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d108      	bne.n	800c4de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4dc:	e031      	b.n	800c542 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4de:	2310      	movs	r3, #16
 800c4e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c4e2:	2310      	movs	r3, #16
 800c4e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	0e5b      	lsrs	r3, r3, #25
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	f003 0307 	and.w	r3, r3, #7
 800c4f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	0f5b      	lsrs	r3, r3, #29
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	f003 0307 	and.w	r3, r3, #7
 800c504:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c506:	7bbb      	ldrb	r3, [r7, #14]
 800c508:	7b3a      	ldrb	r2, [r7, #12]
 800c50a:	4911      	ldr	r1, [pc, #68]	@ (800c550 <UARTEx_SetNbDataToProcess+0x94>)
 800c50c:	5c8a      	ldrb	r2, [r1, r2]
 800c50e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c512:	7b3a      	ldrb	r2, [r7, #12]
 800c514:	490f      	ldr	r1, [pc, #60]	@ (800c554 <UARTEx_SetNbDataToProcess+0x98>)
 800c516:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c518:	fb93 f3f2 	sdiv	r3, r3, r2
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c524:	7bfb      	ldrb	r3, [r7, #15]
 800c526:	7b7a      	ldrb	r2, [r7, #13]
 800c528:	4909      	ldr	r1, [pc, #36]	@ (800c550 <UARTEx_SetNbDataToProcess+0x94>)
 800c52a:	5c8a      	ldrb	r2, [r1, r2]
 800c52c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c530:	7b7a      	ldrb	r2, [r7, #13]
 800c532:	4908      	ldr	r1, [pc, #32]	@ (800c554 <UARTEx_SetNbDataToProcess+0x98>)
 800c534:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c536:	fb93 f3f2 	sdiv	r3, r3, r2
 800c53a:	b29a      	uxth	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c542:	bf00      	nop
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	08011eb0 	.word	0x08011eb0
 800c554:	08011eb8 	.word	0x08011eb8

0800c558 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c558:	b084      	sub	sp, #16
 800c55a:	b480      	push	{r7}
 800c55c:	b085      	sub	sp, #20
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	f107 001c 	add.w	r0, r7, #28
 800c566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c56a:	2300      	movs	r3, #0
 800c56c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c56e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c570:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c572:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800c576:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800c57a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800c57e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	4313      	orrs	r3, r2
 800c584:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	685a      	ldr	r2, [r3, #4]
 800c58a:	4b07      	ldr	r3, [pc, #28]	@ (800c5a8 <SDMMC_Init+0x50>)
 800c58c:	4013      	ands	r3, r2
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	431a      	orrs	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3714      	adds	r7, #20
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	b004      	add	sp, #16
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	ffc02c00 	.word	0xffc02c00

0800c5ac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f043 0203 	orr.w	r2, r3, #3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 0303 	and.w	r3, r3, #3
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
	...

0800c628 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c646:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c64c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c652:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4313      	orrs	r3, r2
 800c658:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	68da      	ldr	r2, [r3, #12]
 800c65e:	4b06      	ldr	r3, [pc, #24]	@ (800c678 <SDMMC_SendCommand+0x50>)
 800c660:	4013      	ands	r3, r2
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	431a      	orrs	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	fffee0c0 	.word	0xfffee0c0

0800c67c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	b2db      	uxtb	r3, r3
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c696:	b480      	push	{r7}
 800c698:	b085      	sub	sp, #20
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3314      	adds	r3, #20
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c6e2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c6e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c6ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	431a      	orrs	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c706:	2300      	movs	r3, #0

}
 800c708:	4618      	mov	r0, r3
 800c70a:	3714      	adds	r7, #20
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b088      	sub	sp, #32
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c722:	2310      	movs	r3, #16
 800c724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c72a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c72c:	2300      	movs	r3, #0
 800c72e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c734:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c736:	f107 0308 	add.w	r3, r7, #8
 800c73a:	4619      	mov	r1, r3
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f7ff ff73 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c742:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c746:	2110      	movs	r1, #16
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fa5f 	bl	800cc0c <SDMMC_GetCmdResp1>
 800c74e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c750:	69fb      	ldr	r3, [r7, #28]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3720      	adds	r7, #32
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b088      	sub	sp, #32
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c768:	2311      	movs	r3, #17
 800c76a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c76c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c772:	2300      	movs	r3, #0
 800c774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c77a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c77c:	f107 0308 	add.w	r3, r7, #8
 800c780:	4619      	mov	r1, r3
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff ff50 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c78c:	2111      	movs	r1, #17
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fa3c 	bl	800cc0c <SDMMC_GetCmdResp1>
 800c794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c796:	69fb      	ldr	r3, [r7, #28]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3720      	adds	r7, #32
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b088      	sub	sp, #32
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c7ae:	2312      	movs	r3, #18
 800c7b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c7b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c7c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7c2:	f107 0308 	add.w	r3, r7, #8
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7ff ff2d 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c7ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7d2:	2112      	movs	r1, #18
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fa19 	bl	800cc0c <SDMMC_GetCmdResp1>
 800c7da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7dc:	69fb      	ldr	r3, [r7, #28]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3720      	adds	r7, #32
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b088      	sub	sp, #32
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c7f4:	2318      	movs	r3, #24
 800c7f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7fe:	2300      	movs	r3, #0
 800c800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c808:	f107 0308 	add.w	r3, r7, #8
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7ff ff0a 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c814:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c818:	2118      	movs	r1, #24
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f9f6 	bl	800cc0c <SDMMC_GetCmdResp1>
 800c820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c822:	69fb      	ldr	r3, [r7, #28]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3720      	adds	r7, #32
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b088      	sub	sp, #32
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c83a:	2319      	movs	r3, #25
 800c83c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c83e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c844:	2300      	movs	r3, #0
 800c846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c84c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c84e:	f107 0308 	add.w	r3, r7, #8
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff fee7 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c85a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c85e:	2119      	movs	r1, #25
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 f9d3 	bl	800cc0c <SDMMC_GetCmdResp1>
 800c866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c868:	69fb      	ldr	r3, [r7, #28]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3720      	adds	r7, #32
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b088      	sub	sp, #32
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c880:	230c      	movs	r3, #12
 800c882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c88a:	2300      	movs	r3, #0
 800c88c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c88e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c892:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8ac:	f107 0308 	add.w	r3, r7, #8
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f7ff feb8 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c8b8:	4a0b      	ldr	r2, [pc, #44]	@ (800c8e8 <SDMMC_CmdStopTransfer+0x74>)
 800c8ba:	210c      	movs	r1, #12
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f9a5 	bl	800cc0c <SDMMC_GetCmdResp1>
 800c8c2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8d6:	d101      	bne.n	800c8dc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c8dc:	69fb      	ldr	r3, [r7, #28]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3720      	adds	r7, #32
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	05f5e100 	.word	0x05f5e100

0800c8ec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c8fa:	2307      	movs	r3, #7
 800c8fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c904:	2300      	movs	r3, #0
 800c906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c90c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c90e:	f107 0308 	add.w	r3, r7, #8
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff fe87 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c91a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c91e:	2107      	movs	r1, #7
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f973 	bl	800cc0c <SDMMC_GetCmdResp1>
 800c926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c928:	69fb      	ldr	r3, [r7, #28]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3720      	adds	r7, #32
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b088      	sub	sp, #32
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c93a:	2300      	movs	r3, #0
 800c93c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c93e:	2300      	movs	r3, #0
 800c940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c942:	2300      	movs	r3, #0
 800c944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c94a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c94e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c950:	f107 0308 	add.w	r3, r7, #8
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff fe66 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 fb97 	bl	800d090 <SDMMC_GetCmdError>
 800c962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c964:	69fb      	ldr	r3, [r7, #28]
}
 800c966:	4618      	mov	r0, r3
 800c968:	3720      	adds	r7, #32
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b088      	sub	sp, #32
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c976:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c97a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c97c:	2308      	movs	r3, #8
 800c97e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c98a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c98e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c990:	f107 0308 	add.w	r3, r7, #8
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff fe46 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fb29 	bl	800cff4 <SDMMC_GetCmdResp7>
 800c9a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9a4:	69fb      	ldr	r3, [r7, #28]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3720      	adds	r7, #32
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b088      	sub	sp, #32
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c9bc:	2337      	movs	r3, #55	@ 0x37
 800c9be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c9c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9d0:	f107 0308 	add.w	r3, r7, #8
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff fe26 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c9dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9e0:	2137      	movs	r1, #55	@ 0x37
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f912 	bl	800cc0c <SDMMC_GetCmdResp1>
 800c9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ea:	69fb      	ldr	r3, [r7, #28]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ca02:	2329      	movs	r3, #41	@ 0x29
 800ca04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca16:	f107 0308 	add.w	r3, r7, #8
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7ff fe03 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fa2e 	bl	800ce84 <SDMMC_GetCmdResp3>
 800ca28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca2a:	69fb      	ldr	r3, [r7, #28]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3720      	adds	r7, #32
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b088      	sub	sp, #32
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ca42:	2306      	movs	r3, #6
 800ca44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca56:	f107 0308 	add.w	r3, r7, #8
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7ff fde3 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ca62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca66:	2106      	movs	r1, #6
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 f8cf 	bl	800cc0c <SDMMC_GetCmdResp1>
 800ca6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca70:	69fb      	ldr	r3, [r7, #28]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3720      	adds	r7, #32
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b088      	sub	sp, #32
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ca82:	2300      	movs	r3, #0
 800ca84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ca86:	2333      	movs	r3, #51	@ 0x33
 800ca88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca90:	2300      	movs	r3, #0
 800ca92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca9a:	f107 0308 	add.w	r3, r7, #8
 800ca9e:	4619      	mov	r1, r3
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7ff fdc1 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800caa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800caaa:	2133      	movs	r1, #51	@ 0x33
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f8ad 	bl	800cc0c <SDMMC_GetCmdResp1>
 800cab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cab4:	69fb      	ldr	r3, [r7, #28]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3720      	adds	r7, #32
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b088      	sub	sp, #32
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cac6:	2300      	movs	r3, #0
 800cac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800caca:	2302      	movs	r3, #2
 800cacc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cace:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cad4:	2300      	movs	r3, #0
 800cad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cadc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cade:	f107 0308 	add.w	r3, r7, #8
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7ff fd9f 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 f980 	bl	800cdf0 <SDMMC_GetCmdResp2>
 800caf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caf2:	69fb      	ldr	r3, [r7, #28]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3720      	adds	r7, #32
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b088      	sub	sp, #32
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cb0a:	2309      	movs	r3, #9
 800cb0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cb0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cb12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb14:	2300      	movs	r3, #0
 800cb16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb1e:	f107 0308 	add.w	r3, r7, #8
 800cb22:	4619      	mov	r1, r3
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7ff fd7f 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f960 	bl	800cdf0 <SDMMC_GetCmdResp2>
 800cb30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb32:	69fb      	ldr	r3, [r7, #28]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3720      	adds	r7, #32
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b088      	sub	sp, #32
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb46:	2300      	movs	r3, #0
 800cb48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cb4a:	2303      	movs	r3, #3
 800cb4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb54:	2300      	movs	r3, #0
 800cb56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb5e:	f107 0308 	add.w	r3, r7, #8
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7ff fd5f 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	2103      	movs	r1, #3
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f9c8 	bl	800cf04 <SDMMC_GetCmdResp6>
 800cb74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb76:	69fb      	ldr	r3, [r7, #28]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3720      	adds	r7, #32
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b088      	sub	sp, #32
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cb8e:	230d      	movs	r3, #13
 800cb90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cba0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cba2:	f107 0308 	add.w	r3, r7, #8
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff fd3d 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cbae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbb2:	210d      	movs	r1, #13
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f829 	bl	800cc0c <SDMMC_GetCmdResp1>
 800cbba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbbc:	69fb      	ldr	r3, [r7, #28]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3720      	adds	r7, #32
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b088      	sub	sp, #32
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cbd2:	230d      	movs	r3, #13
 800cbd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbe6:	f107 0308 	add.w	r3, r7, #8
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff fd1b 	bl	800c628 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cbf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbf6:	210d      	movs	r1, #13
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 f807 	bl	800cc0c <SDMMC_GetCmdResp1>
 800cbfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc00:	69fb      	ldr	r3, [r7, #28]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3720      	adds	r7, #32
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
	...

0800cc0c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	460b      	mov	r3, r1
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc1a:	4b70      	ldr	r3, [pc, #448]	@ (800cddc <SDMMC_GetCmdResp1+0x1d0>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a70      	ldr	r2, [pc, #448]	@ (800cde0 <SDMMC_GetCmdResp1+0x1d4>)
 800cc20:	fba2 2303 	umull	r2, r3, r2, r3
 800cc24:	0a5a      	lsrs	r2, r3, #9
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	fb02 f303 	mul.w	r3, r2, r3
 800cc2c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	1e5a      	subs	r2, r3, #1
 800cc32:	61fa      	str	r2, [r7, #28]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d102      	bne.n	800cc3e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc3c:	e0c9      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc42:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cc44:	69ba      	ldr	r2, [r7, #24]
 800cc46:	4b67      	ldr	r3, [pc, #412]	@ (800cde4 <SDMMC_GetCmdResp1+0x1d8>)
 800cc48:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0ef      	beq.n	800cc2e <SDMMC_GetCmdResp1+0x22>
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1ea      	bne.n	800cc2e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d004      	beq.n	800cc6e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2204      	movs	r2, #4
 800cc68:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc6a:	2304      	movs	r3, #4
 800cc6c:	e0b1      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d004      	beq.n	800cc84 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e0a6      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	4a58      	ldr	r2, [pc, #352]	@ (800cde8 <SDMMC_GetCmdResp1+0x1dc>)
 800cc88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff fcf6 	bl	800c67c <SDMMC_GetCommandResponse>
 800cc90:	4603      	mov	r3, r0
 800cc92:	461a      	mov	r2, r3
 800cc94:	7afb      	ldrb	r3, [r7, #11]
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d001      	beq.n	800cc9e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e099      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cc9e:	2100      	movs	r1, #0
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f7ff fcf8 	bl	800c696 <SDMMC_GetResponse>
 800cca6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cca8:	697a      	ldr	r2, [r7, #20]
 800ccaa:	4b50      	ldr	r3, [pc, #320]	@ (800cdec <SDMMC_GetCmdResp1+0x1e0>)
 800ccac:	4013      	ands	r3, r2
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	e08d      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	da02      	bge.n	800ccc2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ccbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ccc0:	e087      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cccc:	2340      	movs	r3, #64	@ 0x40
 800ccce:	e080      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ccda:	2380      	movs	r3, #128	@ 0x80
 800ccdc:	e079      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cce8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ccec:	e071      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d002      	beq.n	800ccfe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ccf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ccfc:	e069      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d002      	beq.n	800cd0e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cd08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd0c:	e061      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd1c:	e059      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d002      	beq.n	800cd2e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd2c:	e051      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd3c:	e049      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cd4c:	e041      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d002      	beq.n	800cd5e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd5c:	e039      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d002      	beq.n	800cd6e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cd68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cd6c:	e031      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cd78:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cd7c:	e029      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cd88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cd8c:	e021      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cd98:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cd9c:	e019      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cda8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cdac:	e011      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d002      	beq.n	800cdbe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cdb8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cdbc:	e009      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	f003 0308 	and.w	r3, r3, #8
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cdc8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cdcc:	e001      	b.n	800cdd2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3720      	adds	r7, #32
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	24000004 	.word	0x24000004
 800cde0:	10624dd3 	.word	0x10624dd3
 800cde4:	00200045 	.word	0x00200045
 800cde8:	002000c5 	.word	0x002000c5
 800cdec:	fdffe008 	.word	0xfdffe008

0800cdf0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cdf8:	4b1f      	ldr	r3, [pc, #124]	@ (800ce78 <SDMMC_GetCmdResp2+0x88>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a1f      	ldr	r2, [pc, #124]	@ (800ce7c <SDMMC_GetCmdResp2+0x8c>)
 800cdfe:	fba2 2303 	umull	r2, r3, r2, r3
 800ce02:	0a5b      	lsrs	r3, r3, #9
 800ce04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce08:	fb02 f303 	mul.w	r3, r2, r3
 800ce0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	1e5a      	subs	r2, r3, #1
 800ce12:	60fa      	str	r2, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d102      	bne.n	800ce1e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce1c:	e026      	b.n	800ce6c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce22:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0ef      	beq.n	800ce0e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1ea      	bne.n	800ce0e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce3c:	f003 0304 	and.w	r3, r3, #4
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d004      	beq.n	800ce4e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2204      	movs	r2, #4
 800ce48:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce4a:	2304      	movs	r3, #4
 800ce4c:	e00e      	b.n	800ce6c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce52:	f003 0301 	and.w	r3, r3, #1
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d004      	beq.n	800ce64 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce60:	2301      	movs	r3, #1
 800ce62:	e003      	b.n	800ce6c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a06      	ldr	r2, [pc, #24]	@ (800ce80 <SDMMC_GetCmdResp2+0x90>)
 800ce68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	24000004 	.word	0x24000004
 800ce7c:	10624dd3 	.word	0x10624dd3
 800ce80:	002000c5 	.word	0x002000c5

0800ce84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ce8c:	4b1a      	ldr	r3, [pc, #104]	@ (800cef8 <SDMMC_GetCmdResp3+0x74>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a1a      	ldr	r2, [pc, #104]	@ (800cefc <SDMMC_GetCmdResp3+0x78>)
 800ce92:	fba2 2303 	umull	r2, r3, r2, r3
 800ce96:	0a5b      	lsrs	r3, r3, #9
 800ce98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce9c:	fb02 f303 	mul.w	r3, r2, r3
 800cea0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	1e5a      	subs	r2, r3, #1
 800cea6:	60fa      	str	r2, [r7, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d102      	bne.n	800ceb2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ceac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ceb0:	e01b      	b.n	800ceea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceb6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d0ef      	beq.n	800cea2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1ea      	bne.n	800cea2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ced0:	f003 0304 	and.w	r3, r3, #4
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d004      	beq.n	800cee2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2204      	movs	r2, #4
 800cedc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cede:	2304      	movs	r3, #4
 800cee0:	e003      	b.n	800ceea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	4a06      	ldr	r2, [pc, #24]	@ (800cf00 <SDMMC_GetCmdResp3+0x7c>)
 800cee6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	24000004 	.word	0x24000004
 800cefc:	10624dd3 	.word	0x10624dd3
 800cf00:	002000c5 	.word	0x002000c5

0800cf04 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cf12:	4b35      	ldr	r3, [pc, #212]	@ (800cfe8 <SDMMC_GetCmdResp6+0xe4>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a35      	ldr	r2, [pc, #212]	@ (800cfec <SDMMC_GetCmdResp6+0xe8>)
 800cf18:	fba2 2303 	umull	r2, r3, r2, r3
 800cf1c:	0a5b      	lsrs	r3, r3, #9
 800cf1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf22:	fb02 f303 	mul.w	r3, r2, r3
 800cf26:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	1e5a      	subs	r2, r3, #1
 800cf2c:	61fa      	str	r2, [r7, #28]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d102      	bne.n	800cf38 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf32:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf36:	e052      	b.n	800cfde <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf3c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d0ef      	beq.n	800cf28 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1ea      	bne.n	800cf28 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf56:	f003 0304 	and.w	r3, r3, #4
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d004      	beq.n	800cf68 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2204      	movs	r2, #4
 800cf62:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf64:	2304      	movs	r3, #4
 800cf66:	e03a      	b.n	800cfde <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf6c:	f003 0301 	and.w	r3, r3, #1
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d004      	beq.n	800cf7e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2201      	movs	r2, #1
 800cf78:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e02f      	b.n	800cfde <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f7ff fb7c 	bl	800c67c <SDMMC_GetCommandResponse>
 800cf84:	4603      	mov	r3, r0
 800cf86:	461a      	mov	r2, r3
 800cf88:	7afb      	ldrb	r3, [r7, #11]
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d001      	beq.n	800cf92 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e025      	b.n	800cfde <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4a16      	ldr	r2, [pc, #88]	@ (800cff0 <SDMMC_GetCmdResp6+0xec>)
 800cf96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf98:	2100      	movs	r1, #0
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f7ff fb7b 	bl	800c696 <SDMMC_GetResponse>
 800cfa0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d106      	bne.n	800cfba <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	0c1b      	lsrs	r3, r3, #16
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e011      	b.n	800cfde <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cfc8:	e009      	b.n	800cfde <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d002      	beq.n	800cfda <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfd8:	e001      	b.n	800cfde <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cfda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3720      	adds	r7, #32
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	24000004 	.word	0x24000004
 800cfec:	10624dd3 	.word	0x10624dd3
 800cff0:	002000c5 	.word	0x002000c5

0800cff4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cffc:	4b22      	ldr	r3, [pc, #136]	@ (800d088 <SDMMC_GetCmdResp7+0x94>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a22      	ldr	r2, [pc, #136]	@ (800d08c <SDMMC_GetCmdResp7+0x98>)
 800d002:	fba2 2303 	umull	r2, r3, r2, r3
 800d006:	0a5b      	lsrs	r3, r3, #9
 800d008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d00c:	fb02 f303 	mul.w	r3, r2, r3
 800d010:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	1e5a      	subs	r2, r3, #1
 800d016:	60fa      	str	r2, [r7, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d102      	bne.n	800d022 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d01c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d020:	e02c      	b.n	800d07c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d026:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d0ef      	beq.n	800d012 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1ea      	bne.n	800d012 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	2b00      	cmp	r3, #0
 800d046:	d004      	beq.n	800d052 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2204      	movs	r2, #4
 800d04c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d04e:	2304      	movs	r3, #4
 800d050:	e014      	b.n	800d07c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d004      	beq.n	800d068 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d064:	2301      	movs	r3, #1
 800d066:	e009      	b.n	800d07c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d06c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d070:	2b00      	cmp	r3, #0
 800d072:	d002      	beq.n	800d07a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2240      	movs	r2, #64	@ 0x40
 800d078:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d07a:	2300      	movs	r3, #0

}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	24000004 	.word	0x24000004
 800d08c:	10624dd3 	.word	0x10624dd3

0800d090 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d098:	4b11      	ldr	r3, [pc, #68]	@ (800d0e0 <SDMMC_GetCmdError+0x50>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a11      	ldr	r2, [pc, #68]	@ (800d0e4 <SDMMC_GetCmdError+0x54>)
 800d09e:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a2:	0a5b      	lsrs	r3, r3, #9
 800d0a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0a8:	fb02 f303 	mul.w	r3, r2, r3
 800d0ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	1e5a      	subs	r2, r3, #1
 800d0b2:	60fa      	str	r2, [r7, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d102      	bne.n	800d0be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d0bc:	e009      	b.n	800d0d2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d0f1      	beq.n	800d0ae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4a06      	ldr	r2, [pc, #24]	@ (800d0e8 <SDMMC_GetCmdError+0x58>)
 800d0ce:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	24000004 	.word	0x24000004
 800d0e4:	10624dd3 	.word	0x10624dd3
 800d0e8:	002000c5 	.word	0x002000c5

0800d0ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d0f0:	4904      	ldr	r1, [pc, #16]	@ (800d104 <MX_FATFS_Init+0x18>)
 800d0f2:	4805      	ldr	r0, [pc, #20]	@ (800d108 <MX_FATFS_Init+0x1c>)
 800d0f4:	f000 f9e4 	bl	800d4c0 <FATFS_LinkDriver>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	4b03      	ldr	r3, [pc, #12]	@ (800d10c <MX_FATFS_Init+0x20>)
 800d0fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d100:	bf00      	nop
 800d102:	bd80      	pop	{r7, pc}
 800d104:	24000c4c 	.word	0x24000c4c
 800d108:	08011ec0 	.word	0x08011ec0
 800d10c:	24000c48 	.word	0x24000c48

0800d110 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d11a:	f000 f879 	bl	800d210 <BSP_SD_IsDetected>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b01      	cmp	r3, #1
 800d122:	d001      	beq.n	800d128 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d124:	2302      	movs	r3, #2
 800d126:	e012      	b.n	800d14e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d128:	480b      	ldr	r0, [pc, #44]	@ (800d158 <BSP_SD_Init+0x48>)
 800d12a:	f7fb ffc3 	bl	80090b4 <HAL_SD_Init>
 800d12e:	4603      	mov	r3, r0
 800d130:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d132:	79fb      	ldrb	r3, [r7, #7]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d109      	bne.n	800d14c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d138:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d13c:	4806      	ldr	r0, [pc, #24]	@ (800d158 <BSP_SD_Init+0x48>)
 800d13e:	f7fc fe7f 	bl	8009e40 <HAL_SD_ConfigWideBusOperation>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d14c:	79fb      	ldrb	r3, [r7, #7]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	24000558 	.word	0x24000558

0800d15c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b088      	sub	sp, #32
 800d160:	af02      	add	r7, sp, #8
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	68f9      	ldr	r1, [r7, #12]
 800d178:	4806      	ldr	r0, [pc, #24]	@ (800d194 <BSP_SD_ReadBlocks+0x38>)
 800d17a:	f7fc f8bb 	bl	80092f4 <HAL_SD_ReadBlocks>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d184:	2301      	movs	r3, #1
 800d186:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d188:	7dfb      	ldrb	r3, [r7, #23]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3718      	adds	r7, #24
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	24000558 	.word	0x24000558

0800d198 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af02      	add	r7, sp, #8
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	68ba      	ldr	r2, [r7, #8]
 800d1b2:	68f9      	ldr	r1, [r7, #12]
 800d1b4:	4806      	ldr	r0, [pc, #24]	@ (800d1d0 <BSP_SD_WriteBlocks+0x38>)
 800d1b6:	f7fc fa27 	bl	8009608 <HAL_SD_WriteBlocks>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	24000558 	.word	0x24000558

0800d1d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d1d8:	4805      	ldr	r0, [pc, #20]	@ (800d1f0 <BSP_SD_GetCardState+0x1c>)
 800d1da:	f7fc ff43 	bl	800a064 <HAL_SD_GetCardState>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b04      	cmp	r3, #4
 800d1e2:	bf14      	ite	ne
 800d1e4:	2301      	movne	r3, #1
 800d1e6:	2300      	moveq	r3, #0
 800d1e8:	b2db      	uxtb	r3, r3
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	24000558 	.word	0x24000558

0800d1f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d1fc:	6879      	ldr	r1, [r7, #4]
 800d1fe:	4803      	ldr	r0, [pc, #12]	@ (800d20c <BSP_SD_GetCardInfo+0x18>)
 800d200:	f7fc fdf2 	bl	8009de8 <HAL_SD_GetCardInfo>
}
 800d204:	bf00      	nop
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	24000558 	.word	0x24000558

0800d210 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d216:	2301      	movs	r3, #1
 800d218:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d21a:	f000 f80b 	bl	800d234 <BSP_PlatformIsDetected>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d101      	bne.n	800d228 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d224:	2300      	movs	r3, #0
 800d226:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d228:	79fb      	ldrb	r3, [r7, #7]
 800d22a:	b2db      	uxtb	r3, r3
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d23a:	2301      	movs	r3, #1
 800d23c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d23e:	2180      	movs	r1, #128	@ 0x80
 800d240:	4806      	ldr	r0, [pc, #24]	@ (800d25c <BSP_PlatformIsDetected+0x28>)
 800d242:	f7f7 fa75 	bl	8004730 <HAL_GPIO_ReadPin>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d001      	beq.n	800d250 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d24c:	2300      	movs	r3, #0
 800d24e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d250:	79fb      	ldrb	r3, [r7, #7]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	58020800 	.word	0x58020800

0800d260 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	4603      	mov	r3, r0
 800d268:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d26a:	4b0b      	ldr	r3, [pc, #44]	@ (800d298 <SD_CheckStatus+0x38>)
 800d26c:	2201      	movs	r2, #1
 800d26e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d270:	f7ff ffb0 	bl	800d1d4 <BSP_SD_GetCardState>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d107      	bne.n	800d28a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d27a:	4b07      	ldr	r3, [pc, #28]	@ (800d298 <SD_CheckStatus+0x38>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	f023 0301 	bic.w	r3, r3, #1
 800d284:	b2da      	uxtb	r2, r3
 800d286:	4b04      	ldr	r3, [pc, #16]	@ (800d298 <SD_CheckStatus+0x38>)
 800d288:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d28a:	4b03      	ldr	r3, [pc, #12]	@ (800d298 <SD_CheckStatus+0x38>)
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	b2db      	uxtb	r3, r3
}
 800d290:	4618      	mov	r0, r3
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	24000019 	.word	0x24000019

0800d29c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d2a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d2d4 <SD_initialize+0x38>)
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d2ac:	f7ff ff30 	bl	800d110 <BSP_SD_Init>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d107      	bne.n	800d2c6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7ff ffd1 	bl	800d260 <SD_CheckStatus>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	4b04      	ldr	r3, [pc, #16]	@ (800d2d4 <SD_initialize+0x38>)
 800d2c4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d2c6:	4b03      	ldr	r3, [pc, #12]	@ (800d2d4 <SD_initialize+0x38>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	b2db      	uxtb	r3, r3
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	24000019 	.word	0x24000019

0800d2d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	4603      	mov	r3, r0
 800d2e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d2e2:	79fb      	ldrb	r3, [r7, #7]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7ff ffbb 	bl	800d260 <SD_CheckStatus>
 800d2ea:	4603      	mov	r3, r0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	607a      	str	r2, [r7, #4]
 800d2fe:	603b      	str	r3, [r7, #0]
 800d300:	4603      	mov	r3, r0
 800d302:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d304:	2301      	movs	r3, #1
 800d306:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d308:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d30c:	683a      	ldr	r2, [r7, #0]
 800d30e:	6879      	ldr	r1, [r7, #4]
 800d310:	68b8      	ldr	r0, [r7, #8]
 800d312:	f7ff ff23 	bl	800d15c <BSP_SD_ReadBlocks>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d107      	bne.n	800d32c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d31c:	bf00      	nop
 800d31e:	f7ff ff59 	bl	800d1d4 <BSP_SD_GetCardState>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1fa      	bne.n	800d31e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3718      	adds	r7, #24
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b086      	sub	sp, #24
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
 800d340:	603b      	str	r3, [r7, #0]
 800d342:	4603      	mov	r3, r0
 800d344:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d34a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	68b8      	ldr	r0, [r7, #8]
 800d354:	f7ff ff20 	bl	800d198 <BSP_SD_WriteBlocks>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d107      	bne.n	800d36e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d35e:	bf00      	nop
 800d360:	f7ff ff38 	bl	800d1d4 <BSP_SD_GetCardState>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1fa      	bne.n	800d360 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d36a:	2300      	movs	r3, #0
 800d36c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d370:	4618      	mov	r0, r3
 800d372:	3718      	adds	r7, #24
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08c      	sub	sp, #48	@ 0x30
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	4603      	mov	r3, r0
 800d380:	603a      	str	r2, [r7, #0]
 800d382:	71fb      	strb	r3, [r7, #7]
 800d384:	460b      	mov	r3, r1
 800d386:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d388:	2301      	movs	r3, #1
 800d38a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d38e:	4b25      	ldr	r3, [pc, #148]	@ (800d424 <SD_ioctl+0xac>)
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	b2db      	uxtb	r3, r3
 800d394:	f003 0301 	and.w	r3, r3, #1
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d001      	beq.n	800d3a0 <SD_ioctl+0x28>
 800d39c:	2303      	movs	r3, #3
 800d39e:	e03c      	b.n	800d41a <SD_ioctl+0xa2>

  switch (cmd)
 800d3a0:	79bb      	ldrb	r3, [r7, #6]
 800d3a2:	2b03      	cmp	r3, #3
 800d3a4:	d834      	bhi.n	800d410 <SD_ioctl+0x98>
 800d3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ac <SD_ioctl+0x34>)
 800d3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ac:	0800d3bd 	.word	0x0800d3bd
 800d3b0:	0800d3c5 	.word	0x0800d3c5
 800d3b4:	0800d3dd 	.word	0x0800d3dd
 800d3b8:	0800d3f7 	.word	0x0800d3f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3c2:	e028      	b.n	800d416 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3c4:	f107 0308 	add.w	r3, r7, #8
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff ff13 	bl	800d1f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d3ce:	6a3a      	ldr	r2, [r7, #32]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3da:	e01c      	b.n	800d416 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3dc:	f107 0308 	add.w	r3, r7, #8
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7ff ff07 	bl	800d1f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3f4:	e00f      	b.n	800d416 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3f6:	f107 0308 	add.w	r3, r7, #8
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff fefa 	bl	800d1f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d402:	0a5a      	lsrs	r2, r3, #9
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d40e:	e002      	b.n	800d416 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d410:	2304      	movs	r3, #4
 800d412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3730      	adds	r7, #48	@ 0x30
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	24000019 	.word	0x24000019

0800d428 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d428:	b480      	push	{r7}
 800d42a:	b087      	sub	sp, #28
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	4613      	mov	r3, r2
 800d434:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d436:	2301      	movs	r3, #1
 800d438:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d43e:	4b1f      	ldr	r3, [pc, #124]	@ (800d4bc <FATFS_LinkDriverEx+0x94>)
 800d440:	7a5b      	ldrb	r3, [r3, #9]
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	d131      	bne.n	800d4ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d448:	4b1c      	ldr	r3, [pc, #112]	@ (800d4bc <FATFS_LinkDriverEx+0x94>)
 800d44a:	7a5b      	ldrb	r3, [r3, #9]
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	461a      	mov	r2, r3
 800d450:	4b1a      	ldr	r3, [pc, #104]	@ (800d4bc <FATFS_LinkDriverEx+0x94>)
 800d452:	2100      	movs	r1, #0
 800d454:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d456:	4b19      	ldr	r3, [pc, #100]	@ (800d4bc <FATFS_LinkDriverEx+0x94>)
 800d458:	7a5b      	ldrb	r3, [r3, #9]
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	4a17      	ldr	r2, [pc, #92]	@ (800d4bc <FATFS_LinkDriverEx+0x94>)
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4413      	add	r3, r2
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d466:	4b15      	ldr	r3, [pc, #84]	@ (800d4bc <FATFS_LinkDriverEx+0x94>)
 800d468:	7a5b      	ldrb	r3, [r3, #9]
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	461a      	mov	r2, r3
 800d46e:	4b13      	ldr	r3, [pc, #76]	@ (800d4bc <FATFS_LinkDriverEx+0x94>)
 800d470:	4413      	add	r3, r2
 800d472:	79fa      	ldrb	r2, [r7, #7]
 800d474:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d476:	4b11      	ldr	r3, [pc, #68]	@ (800d4bc <FATFS_LinkDriverEx+0x94>)
 800d478:	7a5b      	ldrb	r3, [r3, #9]
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	1c5a      	adds	r2, r3, #1
 800d47e:	b2d1      	uxtb	r1, r2
 800d480:	4a0e      	ldr	r2, [pc, #56]	@ (800d4bc <FATFS_LinkDriverEx+0x94>)
 800d482:	7251      	strb	r1, [r2, #9]
 800d484:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d486:	7dbb      	ldrb	r3, [r7, #22]
 800d488:	3330      	adds	r3, #48	@ 0x30
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	3301      	adds	r3, #1
 800d494:	223a      	movs	r2, #58	@ 0x3a
 800d496:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	3302      	adds	r3, #2
 800d49c:	222f      	movs	r2, #47	@ 0x2f
 800d49e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	3303      	adds	r3, #3
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	371c      	adds	r7, #28
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	24000c50 	.word	0x24000c50

0800d4c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	6839      	ldr	r1, [r7, #0]
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f7ff ffaa 	bl	800d428 <FATFS_LinkDriverEx>
 800d4d4:	4603      	mov	r3, r0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3708      	adds	r7, #8
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <__cvt>:
 800d4de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e0:	ed2d 8b02 	vpush	{d8}
 800d4e4:	eeb0 8b40 	vmov.f64	d8, d0
 800d4e8:	b085      	sub	sp, #20
 800d4ea:	4617      	mov	r7, r2
 800d4ec:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d4ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d4f0:	ee18 2a90 	vmov	r2, s17
 800d4f4:	f025 0520 	bic.w	r5, r5, #32
 800d4f8:	2a00      	cmp	r2, #0
 800d4fa:	bfb6      	itet	lt
 800d4fc:	222d      	movlt	r2, #45	@ 0x2d
 800d4fe:	2200      	movge	r2, #0
 800d500:	eeb1 8b40 	vneglt.f64	d8, d0
 800d504:	2d46      	cmp	r5, #70	@ 0x46
 800d506:	460c      	mov	r4, r1
 800d508:	701a      	strb	r2, [r3, #0]
 800d50a:	d004      	beq.n	800d516 <__cvt+0x38>
 800d50c:	2d45      	cmp	r5, #69	@ 0x45
 800d50e:	d100      	bne.n	800d512 <__cvt+0x34>
 800d510:	3401      	adds	r4, #1
 800d512:	2102      	movs	r1, #2
 800d514:	e000      	b.n	800d518 <__cvt+0x3a>
 800d516:	2103      	movs	r1, #3
 800d518:	ab03      	add	r3, sp, #12
 800d51a:	9301      	str	r3, [sp, #4]
 800d51c:	ab02      	add	r3, sp, #8
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	4622      	mov	r2, r4
 800d522:	4633      	mov	r3, r6
 800d524:	eeb0 0b48 	vmov.f64	d0, d8
 800d528:	f001 ff56 	bl	800f3d8 <_dtoa_r>
 800d52c:	2d47      	cmp	r5, #71	@ 0x47
 800d52e:	d114      	bne.n	800d55a <__cvt+0x7c>
 800d530:	07fb      	lsls	r3, r7, #31
 800d532:	d50a      	bpl.n	800d54a <__cvt+0x6c>
 800d534:	1902      	adds	r2, r0, r4
 800d536:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53e:	bf08      	it	eq
 800d540:	9203      	streq	r2, [sp, #12]
 800d542:	2130      	movs	r1, #48	@ 0x30
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	4293      	cmp	r3, r2
 800d548:	d319      	bcc.n	800d57e <__cvt+0xa0>
 800d54a:	9b03      	ldr	r3, [sp, #12]
 800d54c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d54e:	1a1b      	subs	r3, r3, r0
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	b005      	add	sp, #20
 800d554:	ecbd 8b02 	vpop	{d8}
 800d558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d55a:	2d46      	cmp	r5, #70	@ 0x46
 800d55c:	eb00 0204 	add.w	r2, r0, r4
 800d560:	d1e9      	bne.n	800d536 <__cvt+0x58>
 800d562:	7803      	ldrb	r3, [r0, #0]
 800d564:	2b30      	cmp	r3, #48	@ 0x30
 800d566:	d107      	bne.n	800d578 <__cvt+0x9a>
 800d568:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d570:	bf1c      	itt	ne
 800d572:	f1c4 0401 	rsbne	r4, r4, #1
 800d576:	6034      	strne	r4, [r6, #0]
 800d578:	6833      	ldr	r3, [r6, #0]
 800d57a:	441a      	add	r2, r3
 800d57c:	e7db      	b.n	800d536 <__cvt+0x58>
 800d57e:	1c5c      	adds	r4, r3, #1
 800d580:	9403      	str	r4, [sp, #12]
 800d582:	7019      	strb	r1, [r3, #0]
 800d584:	e7de      	b.n	800d544 <__cvt+0x66>

0800d586 <__exponent>:
 800d586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d588:	2900      	cmp	r1, #0
 800d58a:	bfba      	itte	lt
 800d58c:	4249      	neglt	r1, r1
 800d58e:	232d      	movlt	r3, #45	@ 0x2d
 800d590:	232b      	movge	r3, #43	@ 0x2b
 800d592:	2909      	cmp	r1, #9
 800d594:	7002      	strb	r2, [r0, #0]
 800d596:	7043      	strb	r3, [r0, #1]
 800d598:	dd29      	ble.n	800d5ee <__exponent+0x68>
 800d59a:	f10d 0307 	add.w	r3, sp, #7
 800d59e:	461d      	mov	r5, r3
 800d5a0:	270a      	movs	r7, #10
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d5a8:	fb07 1416 	mls	r4, r7, r6, r1
 800d5ac:	3430      	adds	r4, #48	@ 0x30
 800d5ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	2c63      	cmp	r4, #99	@ 0x63
 800d5b6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d5ba:	4631      	mov	r1, r6
 800d5bc:	dcf1      	bgt.n	800d5a2 <__exponent+0x1c>
 800d5be:	3130      	adds	r1, #48	@ 0x30
 800d5c0:	1e94      	subs	r4, r2, #2
 800d5c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d5c6:	1c41      	adds	r1, r0, #1
 800d5c8:	4623      	mov	r3, r4
 800d5ca:	42ab      	cmp	r3, r5
 800d5cc:	d30a      	bcc.n	800d5e4 <__exponent+0x5e>
 800d5ce:	f10d 0309 	add.w	r3, sp, #9
 800d5d2:	1a9b      	subs	r3, r3, r2
 800d5d4:	42ac      	cmp	r4, r5
 800d5d6:	bf88      	it	hi
 800d5d8:	2300      	movhi	r3, #0
 800d5da:	3302      	adds	r3, #2
 800d5dc:	4403      	add	r3, r0
 800d5de:	1a18      	subs	r0, r3, r0
 800d5e0:	b003      	add	sp, #12
 800d5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d5e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d5ec:	e7ed      	b.n	800d5ca <__exponent+0x44>
 800d5ee:	2330      	movs	r3, #48	@ 0x30
 800d5f0:	3130      	adds	r1, #48	@ 0x30
 800d5f2:	7083      	strb	r3, [r0, #2]
 800d5f4:	70c1      	strb	r1, [r0, #3]
 800d5f6:	1d03      	adds	r3, r0, #4
 800d5f8:	e7f1      	b.n	800d5de <__exponent+0x58>
 800d5fa:	0000      	movs	r0, r0
 800d5fc:	0000      	movs	r0, r0
	...

0800d600 <_printf_float>:
 800d600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d604:	b08d      	sub	sp, #52	@ 0x34
 800d606:	460c      	mov	r4, r1
 800d608:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d60c:	4616      	mov	r6, r2
 800d60e:	461f      	mov	r7, r3
 800d610:	4605      	mov	r5, r0
 800d612:	f001 fdc1 	bl	800f198 <_localeconv_r>
 800d616:	f8d0 b000 	ldr.w	fp, [r0]
 800d61a:	4658      	mov	r0, fp
 800d61c:	f7f2 fec8 	bl	80003b0 <strlen>
 800d620:	2300      	movs	r3, #0
 800d622:	930a      	str	r3, [sp, #40]	@ 0x28
 800d624:	f8d8 3000 	ldr.w	r3, [r8]
 800d628:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d62c:	6822      	ldr	r2, [r4, #0]
 800d62e:	9005      	str	r0, [sp, #20]
 800d630:	3307      	adds	r3, #7
 800d632:	f023 0307 	bic.w	r3, r3, #7
 800d636:	f103 0108 	add.w	r1, r3, #8
 800d63a:	f8c8 1000 	str.w	r1, [r8]
 800d63e:	ed93 0b00 	vldr	d0, [r3]
 800d642:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800d8a0 <_printf_float+0x2a0>
 800d646:	eeb0 7bc0 	vabs.f64	d7, d0
 800d64a:	eeb4 7b46 	vcmp.f64	d7, d6
 800d64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d652:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800d656:	dd24      	ble.n	800d6a2 <_printf_float+0xa2>
 800d658:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d660:	d502      	bpl.n	800d668 <_printf_float+0x68>
 800d662:	232d      	movs	r3, #45	@ 0x2d
 800d664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d668:	498f      	ldr	r1, [pc, #572]	@ (800d8a8 <_printf_float+0x2a8>)
 800d66a:	4b90      	ldr	r3, [pc, #576]	@ (800d8ac <_printf_float+0x2ac>)
 800d66c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800d670:	bf94      	ite	ls
 800d672:	4688      	movls	r8, r1
 800d674:	4698      	movhi	r8, r3
 800d676:	f022 0204 	bic.w	r2, r2, #4
 800d67a:	2303      	movs	r3, #3
 800d67c:	6123      	str	r3, [r4, #16]
 800d67e:	6022      	str	r2, [r4, #0]
 800d680:	f04f 0a00 	mov.w	sl, #0
 800d684:	9700      	str	r7, [sp, #0]
 800d686:	4633      	mov	r3, r6
 800d688:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d68a:	4621      	mov	r1, r4
 800d68c:	4628      	mov	r0, r5
 800d68e:	f000 f9d1 	bl	800da34 <_printf_common>
 800d692:	3001      	adds	r0, #1
 800d694:	f040 8089 	bne.w	800d7aa <_printf_float+0x1aa>
 800d698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d69c:	b00d      	add	sp, #52	@ 0x34
 800d69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a2:	eeb4 0b40 	vcmp.f64	d0, d0
 800d6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6aa:	d709      	bvc.n	800d6c0 <_printf_float+0xc0>
 800d6ac:	ee10 3a90 	vmov	r3, s1
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	bfbc      	itt	lt
 800d6b4:	232d      	movlt	r3, #45	@ 0x2d
 800d6b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d6ba:	497d      	ldr	r1, [pc, #500]	@ (800d8b0 <_printf_float+0x2b0>)
 800d6bc:	4b7d      	ldr	r3, [pc, #500]	@ (800d8b4 <_printf_float+0x2b4>)
 800d6be:	e7d5      	b.n	800d66c <_printf_float+0x6c>
 800d6c0:	6863      	ldr	r3, [r4, #4]
 800d6c2:	1c59      	adds	r1, r3, #1
 800d6c4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800d6c8:	d139      	bne.n	800d73e <_printf_float+0x13e>
 800d6ca:	2306      	movs	r3, #6
 800d6cc:	6063      	str	r3, [r4, #4]
 800d6ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	6022      	str	r2, [r4, #0]
 800d6d6:	9303      	str	r3, [sp, #12]
 800d6d8:	ab0a      	add	r3, sp, #40	@ 0x28
 800d6da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d6de:	ab09      	add	r3, sp, #36	@ 0x24
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	6861      	ldr	r1, [r4, #4]
 800d6e4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	f7ff fef8 	bl	800d4de <__cvt>
 800d6ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d6f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	d129      	bne.n	800d74c <_printf_float+0x14c>
 800d6f8:	1cc8      	adds	r0, r1, #3
 800d6fa:	db02      	blt.n	800d702 <_printf_float+0x102>
 800d6fc:	6863      	ldr	r3, [r4, #4]
 800d6fe:	4299      	cmp	r1, r3
 800d700:	dd41      	ble.n	800d786 <_printf_float+0x186>
 800d702:	f1a9 0902 	sub.w	r9, r9, #2
 800d706:	fa5f f989 	uxtb.w	r9, r9
 800d70a:	3901      	subs	r1, #1
 800d70c:	464a      	mov	r2, r9
 800d70e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d712:	9109      	str	r1, [sp, #36]	@ 0x24
 800d714:	f7ff ff37 	bl	800d586 <__exponent>
 800d718:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d71a:	1813      	adds	r3, r2, r0
 800d71c:	2a01      	cmp	r2, #1
 800d71e:	4682      	mov	sl, r0
 800d720:	6123      	str	r3, [r4, #16]
 800d722:	dc02      	bgt.n	800d72a <_printf_float+0x12a>
 800d724:	6822      	ldr	r2, [r4, #0]
 800d726:	07d2      	lsls	r2, r2, #31
 800d728:	d501      	bpl.n	800d72e <_printf_float+0x12e>
 800d72a:	3301      	adds	r3, #1
 800d72c:	6123      	str	r3, [r4, #16]
 800d72e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d732:	2b00      	cmp	r3, #0
 800d734:	d0a6      	beq.n	800d684 <_printf_float+0x84>
 800d736:	232d      	movs	r3, #45	@ 0x2d
 800d738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d73c:	e7a2      	b.n	800d684 <_printf_float+0x84>
 800d73e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d742:	d1c4      	bne.n	800d6ce <_printf_float+0xce>
 800d744:	2b00      	cmp	r3, #0
 800d746:	d1c2      	bne.n	800d6ce <_printf_float+0xce>
 800d748:	2301      	movs	r3, #1
 800d74a:	e7bf      	b.n	800d6cc <_printf_float+0xcc>
 800d74c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d750:	d9db      	bls.n	800d70a <_printf_float+0x10a>
 800d752:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800d756:	d118      	bne.n	800d78a <_printf_float+0x18a>
 800d758:	2900      	cmp	r1, #0
 800d75a:	6863      	ldr	r3, [r4, #4]
 800d75c:	dd0b      	ble.n	800d776 <_printf_float+0x176>
 800d75e:	6121      	str	r1, [r4, #16]
 800d760:	b913      	cbnz	r3, 800d768 <_printf_float+0x168>
 800d762:	6822      	ldr	r2, [r4, #0]
 800d764:	07d0      	lsls	r0, r2, #31
 800d766:	d502      	bpl.n	800d76e <_printf_float+0x16e>
 800d768:	3301      	adds	r3, #1
 800d76a:	440b      	add	r3, r1
 800d76c:	6123      	str	r3, [r4, #16]
 800d76e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d770:	f04f 0a00 	mov.w	sl, #0
 800d774:	e7db      	b.n	800d72e <_printf_float+0x12e>
 800d776:	b913      	cbnz	r3, 800d77e <_printf_float+0x17e>
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	07d2      	lsls	r2, r2, #31
 800d77c:	d501      	bpl.n	800d782 <_printf_float+0x182>
 800d77e:	3302      	adds	r3, #2
 800d780:	e7f4      	b.n	800d76c <_printf_float+0x16c>
 800d782:	2301      	movs	r3, #1
 800d784:	e7f2      	b.n	800d76c <_printf_float+0x16c>
 800d786:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800d78a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d78c:	4299      	cmp	r1, r3
 800d78e:	db05      	blt.n	800d79c <_printf_float+0x19c>
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	6121      	str	r1, [r4, #16]
 800d794:	07d8      	lsls	r0, r3, #31
 800d796:	d5ea      	bpl.n	800d76e <_printf_float+0x16e>
 800d798:	1c4b      	adds	r3, r1, #1
 800d79a:	e7e7      	b.n	800d76c <_printf_float+0x16c>
 800d79c:	2900      	cmp	r1, #0
 800d79e:	bfd4      	ite	le
 800d7a0:	f1c1 0202 	rsble	r2, r1, #2
 800d7a4:	2201      	movgt	r2, #1
 800d7a6:	4413      	add	r3, r2
 800d7a8:	e7e0      	b.n	800d76c <_printf_float+0x16c>
 800d7aa:	6823      	ldr	r3, [r4, #0]
 800d7ac:	055a      	lsls	r2, r3, #21
 800d7ae:	d407      	bmi.n	800d7c0 <_printf_float+0x1c0>
 800d7b0:	6923      	ldr	r3, [r4, #16]
 800d7b2:	4642      	mov	r2, r8
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	47b8      	blx	r7
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	d12a      	bne.n	800d814 <_printf_float+0x214>
 800d7be:	e76b      	b.n	800d698 <_printf_float+0x98>
 800d7c0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d7c4:	f240 80e0 	bls.w	800d988 <_printf_float+0x388>
 800d7c8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d7cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d4:	d133      	bne.n	800d83e <_printf_float+0x23e>
 800d7d6:	4a38      	ldr	r2, [pc, #224]	@ (800d8b8 <_printf_float+0x2b8>)
 800d7d8:	2301      	movs	r3, #1
 800d7da:	4631      	mov	r1, r6
 800d7dc:	4628      	mov	r0, r5
 800d7de:	47b8      	blx	r7
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	f43f af59 	beq.w	800d698 <_printf_float+0x98>
 800d7e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d7ea:	4543      	cmp	r3, r8
 800d7ec:	db02      	blt.n	800d7f4 <_printf_float+0x1f4>
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	07d8      	lsls	r0, r3, #31
 800d7f2:	d50f      	bpl.n	800d814 <_printf_float+0x214>
 800d7f4:	9b05      	ldr	r3, [sp, #20]
 800d7f6:	465a      	mov	r2, fp
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	47b8      	blx	r7
 800d7fe:	3001      	adds	r0, #1
 800d800:	f43f af4a 	beq.w	800d698 <_printf_float+0x98>
 800d804:	f04f 0900 	mov.w	r9, #0
 800d808:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d80c:	f104 0a1a 	add.w	sl, r4, #26
 800d810:	45c8      	cmp	r8, r9
 800d812:	dc09      	bgt.n	800d828 <_printf_float+0x228>
 800d814:	6823      	ldr	r3, [r4, #0]
 800d816:	079b      	lsls	r3, r3, #30
 800d818:	f100 8107 	bmi.w	800da2a <_printf_float+0x42a>
 800d81c:	68e0      	ldr	r0, [r4, #12]
 800d81e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d820:	4298      	cmp	r0, r3
 800d822:	bfb8      	it	lt
 800d824:	4618      	movlt	r0, r3
 800d826:	e739      	b.n	800d69c <_printf_float+0x9c>
 800d828:	2301      	movs	r3, #1
 800d82a:	4652      	mov	r2, sl
 800d82c:	4631      	mov	r1, r6
 800d82e:	4628      	mov	r0, r5
 800d830:	47b8      	blx	r7
 800d832:	3001      	adds	r0, #1
 800d834:	f43f af30 	beq.w	800d698 <_printf_float+0x98>
 800d838:	f109 0901 	add.w	r9, r9, #1
 800d83c:	e7e8      	b.n	800d810 <_printf_float+0x210>
 800d83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d840:	2b00      	cmp	r3, #0
 800d842:	dc3b      	bgt.n	800d8bc <_printf_float+0x2bc>
 800d844:	4a1c      	ldr	r2, [pc, #112]	@ (800d8b8 <_printf_float+0x2b8>)
 800d846:	2301      	movs	r3, #1
 800d848:	4631      	mov	r1, r6
 800d84a:	4628      	mov	r0, r5
 800d84c:	47b8      	blx	r7
 800d84e:	3001      	adds	r0, #1
 800d850:	f43f af22 	beq.w	800d698 <_printf_float+0x98>
 800d854:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d858:	ea59 0303 	orrs.w	r3, r9, r3
 800d85c:	d102      	bne.n	800d864 <_printf_float+0x264>
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	07d9      	lsls	r1, r3, #31
 800d862:	d5d7      	bpl.n	800d814 <_printf_float+0x214>
 800d864:	9b05      	ldr	r3, [sp, #20]
 800d866:	465a      	mov	r2, fp
 800d868:	4631      	mov	r1, r6
 800d86a:	4628      	mov	r0, r5
 800d86c:	47b8      	blx	r7
 800d86e:	3001      	adds	r0, #1
 800d870:	f43f af12 	beq.w	800d698 <_printf_float+0x98>
 800d874:	f04f 0a00 	mov.w	sl, #0
 800d878:	f104 0b1a 	add.w	fp, r4, #26
 800d87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d87e:	425b      	negs	r3, r3
 800d880:	4553      	cmp	r3, sl
 800d882:	dc01      	bgt.n	800d888 <_printf_float+0x288>
 800d884:	464b      	mov	r3, r9
 800d886:	e794      	b.n	800d7b2 <_printf_float+0x1b2>
 800d888:	2301      	movs	r3, #1
 800d88a:	465a      	mov	r2, fp
 800d88c:	4631      	mov	r1, r6
 800d88e:	4628      	mov	r0, r5
 800d890:	47b8      	blx	r7
 800d892:	3001      	adds	r0, #1
 800d894:	f43f af00 	beq.w	800d698 <_printf_float+0x98>
 800d898:	f10a 0a01 	add.w	sl, sl, #1
 800d89c:	e7ee      	b.n	800d87c <_printf_float+0x27c>
 800d89e:	bf00      	nop
 800d8a0:	ffffffff 	.word	0xffffffff
 800d8a4:	7fefffff 	.word	0x7fefffff
 800d8a8:	08011ed4 	.word	0x08011ed4
 800d8ac:	08011ed8 	.word	0x08011ed8
 800d8b0:	08011edc 	.word	0x08011edc
 800d8b4:	08011ee0 	.word	0x08011ee0
 800d8b8:	08011ee4 	.word	0x08011ee4
 800d8bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8c2:	4553      	cmp	r3, sl
 800d8c4:	bfa8      	it	ge
 800d8c6:	4653      	movge	r3, sl
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	4699      	mov	r9, r3
 800d8cc:	dc37      	bgt.n	800d93e <_printf_float+0x33e>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9307      	str	r3, [sp, #28]
 800d8d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8d6:	f104 021a 	add.w	r2, r4, #26
 800d8da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8dc:	9907      	ldr	r1, [sp, #28]
 800d8de:	9306      	str	r3, [sp, #24]
 800d8e0:	eba3 0309 	sub.w	r3, r3, r9
 800d8e4:	428b      	cmp	r3, r1
 800d8e6:	dc31      	bgt.n	800d94c <_printf_float+0x34c>
 800d8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ea:	459a      	cmp	sl, r3
 800d8ec:	dc3b      	bgt.n	800d966 <_printf_float+0x366>
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	07da      	lsls	r2, r3, #31
 800d8f2:	d438      	bmi.n	800d966 <_printf_float+0x366>
 800d8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8f6:	ebaa 0903 	sub.w	r9, sl, r3
 800d8fa:	9b06      	ldr	r3, [sp, #24]
 800d8fc:	ebaa 0303 	sub.w	r3, sl, r3
 800d900:	4599      	cmp	r9, r3
 800d902:	bfa8      	it	ge
 800d904:	4699      	movge	r9, r3
 800d906:	f1b9 0f00 	cmp.w	r9, #0
 800d90a:	dc34      	bgt.n	800d976 <_printf_float+0x376>
 800d90c:	f04f 0800 	mov.w	r8, #0
 800d910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d914:	f104 0b1a 	add.w	fp, r4, #26
 800d918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d91a:	ebaa 0303 	sub.w	r3, sl, r3
 800d91e:	eba3 0309 	sub.w	r3, r3, r9
 800d922:	4543      	cmp	r3, r8
 800d924:	f77f af76 	ble.w	800d814 <_printf_float+0x214>
 800d928:	2301      	movs	r3, #1
 800d92a:	465a      	mov	r2, fp
 800d92c:	4631      	mov	r1, r6
 800d92e:	4628      	mov	r0, r5
 800d930:	47b8      	blx	r7
 800d932:	3001      	adds	r0, #1
 800d934:	f43f aeb0 	beq.w	800d698 <_printf_float+0x98>
 800d938:	f108 0801 	add.w	r8, r8, #1
 800d93c:	e7ec      	b.n	800d918 <_printf_float+0x318>
 800d93e:	4642      	mov	r2, r8
 800d940:	4631      	mov	r1, r6
 800d942:	4628      	mov	r0, r5
 800d944:	47b8      	blx	r7
 800d946:	3001      	adds	r0, #1
 800d948:	d1c1      	bne.n	800d8ce <_printf_float+0x2ce>
 800d94a:	e6a5      	b.n	800d698 <_printf_float+0x98>
 800d94c:	2301      	movs	r3, #1
 800d94e:	4631      	mov	r1, r6
 800d950:	4628      	mov	r0, r5
 800d952:	9206      	str	r2, [sp, #24]
 800d954:	47b8      	blx	r7
 800d956:	3001      	adds	r0, #1
 800d958:	f43f ae9e 	beq.w	800d698 <_printf_float+0x98>
 800d95c:	9b07      	ldr	r3, [sp, #28]
 800d95e:	9a06      	ldr	r2, [sp, #24]
 800d960:	3301      	adds	r3, #1
 800d962:	9307      	str	r3, [sp, #28]
 800d964:	e7b9      	b.n	800d8da <_printf_float+0x2da>
 800d966:	9b05      	ldr	r3, [sp, #20]
 800d968:	465a      	mov	r2, fp
 800d96a:	4631      	mov	r1, r6
 800d96c:	4628      	mov	r0, r5
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	d1bf      	bne.n	800d8f4 <_printf_float+0x2f4>
 800d974:	e690      	b.n	800d698 <_printf_float+0x98>
 800d976:	9a06      	ldr	r2, [sp, #24]
 800d978:	464b      	mov	r3, r9
 800d97a:	4442      	add	r2, r8
 800d97c:	4631      	mov	r1, r6
 800d97e:	4628      	mov	r0, r5
 800d980:	47b8      	blx	r7
 800d982:	3001      	adds	r0, #1
 800d984:	d1c2      	bne.n	800d90c <_printf_float+0x30c>
 800d986:	e687      	b.n	800d698 <_printf_float+0x98>
 800d988:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800d98c:	f1b9 0f01 	cmp.w	r9, #1
 800d990:	dc01      	bgt.n	800d996 <_printf_float+0x396>
 800d992:	07db      	lsls	r3, r3, #31
 800d994:	d536      	bpl.n	800da04 <_printf_float+0x404>
 800d996:	2301      	movs	r3, #1
 800d998:	4642      	mov	r2, r8
 800d99a:	4631      	mov	r1, r6
 800d99c:	4628      	mov	r0, r5
 800d99e:	47b8      	blx	r7
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	f43f ae79 	beq.w	800d698 <_printf_float+0x98>
 800d9a6:	9b05      	ldr	r3, [sp, #20]
 800d9a8:	465a      	mov	r2, fp
 800d9aa:	4631      	mov	r1, r6
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	47b8      	blx	r7
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	f43f ae71 	beq.w	800d698 <_printf_float+0x98>
 800d9b6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d9ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800d9c6:	d018      	beq.n	800d9fa <_printf_float+0x3fa>
 800d9c8:	464b      	mov	r3, r9
 800d9ca:	f108 0201 	add.w	r2, r8, #1
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	47b8      	blx	r7
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	d10c      	bne.n	800d9f2 <_printf_float+0x3f2>
 800d9d8:	e65e      	b.n	800d698 <_printf_float+0x98>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	465a      	mov	r2, fp
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	47b8      	blx	r7
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	f43f ae57 	beq.w	800d698 <_printf_float+0x98>
 800d9ea:	f108 0801 	add.w	r8, r8, #1
 800d9ee:	45c8      	cmp	r8, r9
 800d9f0:	dbf3      	blt.n	800d9da <_printf_float+0x3da>
 800d9f2:	4653      	mov	r3, sl
 800d9f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d9f8:	e6dc      	b.n	800d7b4 <_printf_float+0x1b4>
 800d9fa:	f04f 0800 	mov.w	r8, #0
 800d9fe:	f104 0b1a 	add.w	fp, r4, #26
 800da02:	e7f4      	b.n	800d9ee <_printf_float+0x3ee>
 800da04:	2301      	movs	r3, #1
 800da06:	4642      	mov	r2, r8
 800da08:	e7e1      	b.n	800d9ce <_printf_float+0x3ce>
 800da0a:	2301      	movs	r3, #1
 800da0c:	464a      	mov	r2, r9
 800da0e:	4631      	mov	r1, r6
 800da10:	4628      	mov	r0, r5
 800da12:	47b8      	blx	r7
 800da14:	3001      	adds	r0, #1
 800da16:	f43f ae3f 	beq.w	800d698 <_printf_float+0x98>
 800da1a:	f108 0801 	add.w	r8, r8, #1
 800da1e:	68e3      	ldr	r3, [r4, #12]
 800da20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da22:	1a5b      	subs	r3, r3, r1
 800da24:	4543      	cmp	r3, r8
 800da26:	dcf0      	bgt.n	800da0a <_printf_float+0x40a>
 800da28:	e6f8      	b.n	800d81c <_printf_float+0x21c>
 800da2a:	f04f 0800 	mov.w	r8, #0
 800da2e:	f104 0919 	add.w	r9, r4, #25
 800da32:	e7f4      	b.n	800da1e <_printf_float+0x41e>

0800da34 <_printf_common>:
 800da34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da38:	4616      	mov	r6, r2
 800da3a:	4698      	mov	r8, r3
 800da3c:	688a      	ldr	r2, [r1, #8]
 800da3e:	690b      	ldr	r3, [r1, #16]
 800da40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da44:	4293      	cmp	r3, r2
 800da46:	bfb8      	it	lt
 800da48:	4613      	movlt	r3, r2
 800da4a:	6033      	str	r3, [r6, #0]
 800da4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da50:	4607      	mov	r7, r0
 800da52:	460c      	mov	r4, r1
 800da54:	b10a      	cbz	r2, 800da5a <_printf_common+0x26>
 800da56:	3301      	adds	r3, #1
 800da58:	6033      	str	r3, [r6, #0]
 800da5a:	6823      	ldr	r3, [r4, #0]
 800da5c:	0699      	lsls	r1, r3, #26
 800da5e:	bf42      	ittt	mi
 800da60:	6833      	ldrmi	r3, [r6, #0]
 800da62:	3302      	addmi	r3, #2
 800da64:	6033      	strmi	r3, [r6, #0]
 800da66:	6825      	ldr	r5, [r4, #0]
 800da68:	f015 0506 	ands.w	r5, r5, #6
 800da6c:	d106      	bne.n	800da7c <_printf_common+0x48>
 800da6e:	f104 0a19 	add.w	sl, r4, #25
 800da72:	68e3      	ldr	r3, [r4, #12]
 800da74:	6832      	ldr	r2, [r6, #0]
 800da76:	1a9b      	subs	r3, r3, r2
 800da78:	42ab      	cmp	r3, r5
 800da7a:	dc26      	bgt.n	800daca <_printf_common+0x96>
 800da7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da80:	6822      	ldr	r2, [r4, #0]
 800da82:	3b00      	subs	r3, #0
 800da84:	bf18      	it	ne
 800da86:	2301      	movne	r3, #1
 800da88:	0692      	lsls	r2, r2, #26
 800da8a:	d42b      	bmi.n	800dae4 <_printf_common+0xb0>
 800da8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da90:	4641      	mov	r1, r8
 800da92:	4638      	mov	r0, r7
 800da94:	47c8      	blx	r9
 800da96:	3001      	adds	r0, #1
 800da98:	d01e      	beq.n	800dad8 <_printf_common+0xa4>
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	6922      	ldr	r2, [r4, #16]
 800da9e:	f003 0306 	and.w	r3, r3, #6
 800daa2:	2b04      	cmp	r3, #4
 800daa4:	bf02      	ittt	eq
 800daa6:	68e5      	ldreq	r5, [r4, #12]
 800daa8:	6833      	ldreq	r3, [r6, #0]
 800daaa:	1aed      	subeq	r5, r5, r3
 800daac:	68a3      	ldr	r3, [r4, #8]
 800daae:	bf0c      	ite	eq
 800dab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dab4:	2500      	movne	r5, #0
 800dab6:	4293      	cmp	r3, r2
 800dab8:	bfc4      	itt	gt
 800daba:	1a9b      	subgt	r3, r3, r2
 800dabc:	18ed      	addgt	r5, r5, r3
 800dabe:	2600      	movs	r6, #0
 800dac0:	341a      	adds	r4, #26
 800dac2:	42b5      	cmp	r5, r6
 800dac4:	d11a      	bne.n	800dafc <_printf_common+0xc8>
 800dac6:	2000      	movs	r0, #0
 800dac8:	e008      	b.n	800dadc <_printf_common+0xa8>
 800daca:	2301      	movs	r3, #1
 800dacc:	4652      	mov	r2, sl
 800dace:	4641      	mov	r1, r8
 800dad0:	4638      	mov	r0, r7
 800dad2:	47c8      	blx	r9
 800dad4:	3001      	adds	r0, #1
 800dad6:	d103      	bne.n	800dae0 <_printf_common+0xac>
 800dad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae0:	3501      	adds	r5, #1
 800dae2:	e7c6      	b.n	800da72 <_printf_common+0x3e>
 800dae4:	18e1      	adds	r1, r4, r3
 800dae6:	1c5a      	adds	r2, r3, #1
 800dae8:	2030      	movs	r0, #48	@ 0x30
 800daea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800daee:	4422      	add	r2, r4
 800daf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800daf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800daf8:	3302      	adds	r3, #2
 800dafa:	e7c7      	b.n	800da8c <_printf_common+0x58>
 800dafc:	2301      	movs	r3, #1
 800dafe:	4622      	mov	r2, r4
 800db00:	4641      	mov	r1, r8
 800db02:	4638      	mov	r0, r7
 800db04:	47c8      	blx	r9
 800db06:	3001      	adds	r0, #1
 800db08:	d0e6      	beq.n	800dad8 <_printf_common+0xa4>
 800db0a:	3601      	adds	r6, #1
 800db0c:	e7d9      	b.n	800dac2 <_printf_common+0x8e>
	...

0800db10 <_printf_i>:
 800db10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db14:	7e0f      	ldrb	r7, [r1, #24]
 800db16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db18:	2f78      	cmp	r7, #120	@ 0x78
 800db1a:	4691      	mov	r9, r2
 800db1c:	4680      	mov	r8, r0
 800db1e:	460c      	mov	r4, r1
 800db20:	469a      	mov	sl, r3
 800db22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db26:	d807      	bhi.n	800db38 <_printf_i+0x28>
 800db28:	2f62      	cmp	r7, #98	@ 0x62
 800db2a:	d80a      	bhi.n	800db42 <_printf_i+0x32>
 800db2c:	2f00      	cmp	r7, #0
 800db2e:	f000 80d2 	beq.w	800dcd6 <_printf_i+0x1c6>
 800db32:	2f58      	cmp	r7, #88	@ 0x58
 800db34:	f000 80b9 	beq.w	800dcaa <_printf_i+0x19a>
 800db38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db40:	e03a      	b.n	800dbb8 <_printf_i+0xa8>
 800db42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db46:	2b15      	cmp	r3, #21
 800db48:	d8f6      	bhi.n	800db38 <_printf_i+0x28>
 800db4a:	a101      	add	r1, pc, #4	@ (adr r1, 800db50 <_printf_i+0x40>)
 800db4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db50:	0800dba9 	.word	0x0800dba9
 800db54:	0800dbbd 	.word	0x0800dbbd
 800db58:	0800db39 	.word	0x0800db39
 800db5c:	0800db39 	.word	0x0800db39
 800db60:	0800db39 	.word	0x0800db39
 800db64:	0800db39 	.word	0x0800db39
 800db68:	0800dbbd 	.word	0x0800dbbd
 800db6c:	0800db39 	.word	0x0800db39
 800db70:	0800db39 	.word	0x0800db39
 800db74:	0800db39 	.word	0x0800db39
 800db78:	0800db39 	.word	0x0800db39
 800db7c:	0800dcbd 	.word	0x0800dcbd
 800db80:	0800dbe7 	.word	0x0800dbe7
 800db84:	0800dc77 	.word	0x0800dc77
 800db88:	0800db39 	.word	0x0800db39
 800db8c:	0800db39 	.word	0x0800db39
 800db90:	0800dcdf 	.word	0x0800dcdf
 800db94:	0800db39 	.word	0x0800db39
 800db98:	0800dbe7 	.word	0x0800dbe7
 800db9c:	0800db39 	.word	0x0800db39
 800dba0:	0800db39 	.word	0x0800db39
 800dba4:	0800dc7f 	.word	0x0800dc7f
 800dba8:	6833      	ldr	r3, [r6, #0]
 800dbaa:	1d1a      	adds	r2, r3, #4
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6032      	str	r2, [r6, #0]
 800dbb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e09d      	b.n	800dcf8 <_printf_i+0x1e8>
 800dbbc:	6833      	ldr	r3, [r6, #0]
 800dbbe:	6820      	ldr	r0, [r4, #0]
 800dbc0:	1d19      	adds	r1, r3, #4
 800dbc2:	6031      	str	r1, [r6, #0]
 800dbc4:	0606      	lsls	r6, r0, #24
 800dbc6:	d501      	bpl.n	800dbcc <_printf_i+0xbc>
 800dbc8:	681d      	ldr	r5, [r3, #0]
 800dbca:	e003      	b.n	800dbd4 <_printf_i+0xc4>
 800dbcc:	0645      	lsls	r5, r0, #25
 800dbce:	d5fb      	bpl.n	800dbc8 <_printf_i+0xb8>
 800dbd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dbd4:	2d00      	cmp	r5, #0
 800dbd6:	da03      	bge.n	800dbe0 <_printf_i+0xd0>
 800dbd8:	232d      	movs	r3, #45	@ 0x2d
 800dbda:	426d      	negs	r5, r5
 800dbdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbe0:	4859      	ldr	r0, [pc, #356]	@ (800dd48 <_printf_i+0x238>)
 800dbe2:	230a      	movs	r3, #10
 800dbe4:	e011      	b.n	800dc0a <_printf_i+0xfa>
 800dbe6:	6821      	ldr	r1, [r4, #0]
 800dbe8:	6833      	ldr	r3, [r6, #0]
 800dbea:	0608      	lsls	r0, r1, #24
 800dbec:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbf0:	d402      	bmi.n	800dbf8 <_printf_i+0xe8>
 800dbf2:	0649      	lsls	r1, r1, #25
 800dbf4:	bf48      	it	mi
 800dbf6:	b2ad      	uxthmi	r5, r5
 800dbf8:	2f6f      	cmp	r7, #111	@ 0x6f
 800dbfa:	4853      	ldr	r0, [pc, #332]	@ (800dd48 <_printf_i+0x238>)
 800dbfc:	6033      	str	r3, [r6, #0]
 800dbfe:	bf14      	ite	ne
 800dc00:	230a      	movne	r3, #10
 800dc02:	2308      	moveq	r3, #8
 800dc04:	2100      	movs	r1, #0
 800dc06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc0a:	6866      	ldr	r6, [r4, #4]
 800dc0c:	60a6      	str	r6, [r4, #8]
 800dc0e:	2e00      	cmp	r6, #0
 800dc10:	bfa2      	ittt	ge
 800dc12:	6821      	ldrge	r1, [r4, #0]
 800dc14:	f021 0104 	bicge.w	r1, r1, #4
 800dc18:	6021      	strge	r1, [r4, #0]
 800dc1a:	b90d      	cbnz	r5, 800dc20 <_printf_i+0x110>
 800dc1c:	2e00      	cmp	r6, #0
 800dc1e:	d04b      	beq.n	800dcb8 <_printf_i+0x1a8>
 800dc20:	4616      	mov	r6, r2
 800dc22:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc26:	fb03 5711 	mls	r7, r3, r1, r5
 800dc2a:	5dc7      	ldrb	r7, [r0, r7]
 800dc2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc30:	462f      	mov	r7, r5
 800dc32:	42bb      	cmp	r3, r7
 800dc34:	460d      	mov	r5, r1
 800dc36:	d9f4      	bls.n	800dc22 <_printf_i+0x112>
 800dc38:	2b08      	cmp	r3, #8
 800dc3a:	d10b      	bne.n	800dc54 <_printf_i+0x144>
 800dc3c:	6823      	ldr	r3, [r4, #0]
 800dc3e:	07df      	lsls	r7, r3, #31
 800dc40:	d508      	bpl.n	800dc54 <_printf_i+0x144>
 800dc42:	6923      	ldr	r3, [r4, #16]
 800dc44:	6861      	ldr	r1, [r4, #4]
 800dc46:	4299      	cmp	r1, r3
 800dc48:	bfde      	ittt	le
 800dc4a:	2330      	movle	r3, #48	@ 0x30
 800dc4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc50:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800dc54:	1b92      	subs	r2, r2, r6
 800dc56:	6122      	str	r2, [r4, #16]
 800dc58:	f8cd a000 	str.w	sl, [sp]
 800dc5c:	464b      	mov	r3, r9
 800dc5e:	aa03      	add	r2, sp, #12
 800dc60:	4621      	mov	r1, r4
 800dc62:	4640      	mov	r0, r8
 800dc64:	f7ff fee6 	bl	800da34 <_printf_common>
 800dc68:	3001      	adds	r0, #1
 800dc6a:	d14a      	bne.n	800dd02 <_printf_i+0x1f2>
 800dc6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc70:	b004      	add	sp, #16
 800dc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	f043 0320 	orr.w	r3, r3, #32
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	4833      	ldr	r0, [pc, #204]	@ (800dd4c <_printf_i+0x23c>)
 800dc80:	2778      	movs	r7, #120	@ 0x78
 800dc82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	6831      	ldr	r1, [r6, #0]
 800dc8a:	061f      	lsls	r7, r3, #24
 800dc8c:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc90:	d402      	bmi.n	800dc98 <_printf_i+0x188>
 800dc92:	065f      	lsls	r7, r3, #25
 800dc94:	bf48      	it	mi
 800dc96:	b2ad      	uxthmi	r5, r5
 800dc98:	6031      	str	r1, [r6, #0]
 800dc9a:	07d9      	lsls	r1, r3, #31
 800dc9c:	bf44      	itt	mi
 800dc9e:	f043 0320 	orrmi.w	r3, r3, #32
 800dca2:	6023      	strmi	r3, [r4, #0]
 800dca4:	b11d      	cbz	r5, 800dcae <_printf_i+0x19e>
 800dca6:	2310      	movs	r3, #16
 800dca8:	e7ac      	b.n	800dc04 <_printf_i+0xf4>
 800dcaa:	4827      	ldr	r0, [pc, #156]	@ (800dd48 <_printf_i+0x238>)
 800dcac:	e7e9      	b.n	800dc82 <_printf_i+0x172>
 800dcae:	6823      	ldr	r3, [r4, #0]
 800dcb0:	f023 0320 	bic.w	r3, r3, #32
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	e7f6      	b.n	800dca6 <_printf_i+0x196>
 800dcb8:	4616      	mov	r6, r2
 800dcba:	e7bd      	b.n	800dc38 <_printf_i+0x128>
 800dcbc:	6833      	ldr	r3, [r6, #0]
 800dcbe:	6825      	ldr	r5, [r4, #0]
 800dcc0:	6961      	ldr	r1, [r4, #20]
 800dcc2:	1d18      	adds	r0, r3, #4
 800dcc4:	6030      	str	r0, [r6, #0]
 800dcc6:	062e      	lsls	r6, r5, #24
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	d501      	bpl.n	800dcd0 <_printf_i+0x1c0>
 800dccc:	6019      	str	r1, [r3, #0]
 800dcce:	e002      	b.n	800dcd6 <_printf_i+0x1c6>
 800dcd0:	0668      	lsls	r0, r5, #25
 800dcd2:	d5fb      	bpl.n	800dccc <_printf_i+0x1bc>
 800dcd4:	8019      	strh	r1, [r3, #0]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	6123      	str	r3, [r4, #16]
 800dcda:	4616      	mov	r6, r2
 800dcdc:	e7bc      	b.n	800dc58 <_printf_i+0x148>
 800dcde:	6833      	ldr	r3, [r6, #0]
 800dce0:	1d1a      	adds	r2, r3, #4
 800dce2:	6032      	str	r2, [r6, #0]
 800dce4:	681e      	ldr	r6, [r3, #0]
 800dce6:	6862      	ldr	r2, [r4, #4]
 800dce8:	2100      	movs	r1, #0
 800dcea:	4630      	mov	r0, r6
 800dcec:	f7f2 fb10 	bl	8000310 <memchr>
 800dcf0:	b108      	cbz	r0, 800dcf6 <_printf_i+0x1e6>
 800dcf2:	1b80      	subs	r0, r0, r6
 800dcf4:	6060      	str	r0, [r4, #4]
 800dcf6:	6863      	ldr	r3, [r4, #4]
 800dcf8:	6123      	str	r3, [r4, #16]
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd00:	e7aa      	b.n	800dc58 <_printf_i+0x148>
 800dd02:	6923      	ldr	r3, [r4, #16]
 800dd04:	4632      	mov	r2, r6
 800dd06:	4649      	mov	r1, r9
 800dd08:	4640      	mov	r0, r8
 800dd0a:	47d0      	blx	sl
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	d0ad      	beq.n	800dc6c <_printf_i+0x15c>
 800dd10:	6823      	ldr	r3, [r4, #0]
 800dd12:	079b      	lsls	r3, r3, #30
 800dd14:	d413      	bmi.n	800dd3e <_printf_i+0x22e>
 800dd16:	68e0      	ldr	r0, [r4, #12]
 800dd18:	9b03      	ldr	r3, [sp, #12]
 800dd1a:	4298      	cmp	r0, r3
 800dd1c:	bfb8      	it	lt
 800dd1e:	4618      	movlt	r0, r3
 800dd20:	e7a6      	b.n	800dc70 <_printf_i+0x160>
 800dd22:	2301      	movs	r3, #1
 800dd24:	4632      	mov	r2, r6
 800dd26:	4649      	mov	r1, r9
 800dd28:	4640      	mov	r0, r8
 800dd2a:	47d0      	blx	sl
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	d09d      	beq.n	800dc6c <_printf_i+0x15c>
 800dd30:	3501      	adds	r5, #1
 800dd32:	68e3      	ldr	r3, [r4, #12]
 800dd34:	9903      	ldr	r1, [sp, #12]
 800dd36:	1a5b      	subs	r3, r3, r1
 800dd38:	42ab      	cmp	r3, r5
 800dd3a:	dcf2      	bgt.n	800dd22 <_printf_i+0x212>
 800dd3c:	e7eb      	b.n	800dd16 <_printf_i+0x206>
 800dd3e:	2500      	movs	r5, #0
 800dd40:	f104 0619 	add.w	r6, r4, #25
 800dd44:	e7f5      	b.n	800dd32 <_printf_i+0x222>
 800dd46:	bf00      	nop
 800dd48:	08011ee6 	.word	0x08011ee6
 800dd4c:	08011ef7 	.word	0x08011ef7

0800dd50 <_scanf_float>:
 800dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	b087      	sub	sp, #28
 800dd56:	4617      	mov	r7, r2
 800dd58:	9303      	str	r3, [sp, #12]
 800dd5a:	688b      	ldr	r3, [r1, #8]
 800dd5c:	1e5a      	subs	r2, r3, #1
 800dd5e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dd62:	bf81      	itttt	hi
 800dd64:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dd68:	eb03 0b05 	addhi.w	fp, r3, r5
 800dd6c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dd70:	608b      	strhi	r3, [r1, #8]
 800dd72:	680b      	ldr	r3, [r1, #0]
 800dd74:	460a      	mov	r2, r1
 800dd76:	f04f 0500 	mov.w	r5, #0
 800dd7a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dd7e:	f842 3b1c 	str.w	r3, [r2], #28
 800dd82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dd86:	4680      	mov	r8, r0
 800dd88:	460c      	mov	r4, r1
 800dd8a:	bf98      	it	ls
 800dd8c:	f04f 0b00 	movls.w	fp, #0
 800dd90:	9201      	str	r2, [sp, #4]
 800dd92:	4616      	mov	r6, r2
 800dd94:	46aa      	mov	sl, r5
 800dd96:	46a9      	mov	r9, r5
 800dd98:	9502      	str	r5, [sp, #8]
 800dd9a:	68a2      	ldr	r2, [r4, #8]
 800dd9c:	b152      	cbz	r2, 800ddb4 <_scanf_float+0x64>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	2b4e      	cmp	r3, #78	@ 0x4e
 800dda4:	d864      	bhi.n	800de70 <_scanf_float+0x120>
 800dda6:	2b40      	cmp	r3, #64	@ 0x40
 800dda8:	d83c      	bhi.n	800de24 <_scanf_float+0xd4>
 800ddaa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ddae:	b2c8      	uxtb	r0, r1
 800ddb0:	280e      	cmp	r0, #14
 800ddb2:	d93a      	bls.n	800de2a <_scanf_float+0xda>
 800ddb4:	f1b9 0f00 	cmp.w	r9, #0
 800ddb8:	d003      	beq.n	800ddc2 <_scanf_float+0x72>
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ddc6:	f1ba 0f01 	cmp.w	sl, #1
 800ddca:	f200 8117 	bhi.w	800dffc <_scanf_float+0x2ac>
 800ddce:	9b01      	ldr	r3, [sp, #4]
 800ddd0:	429e      	cmp	r6, r3
 800ddd2:	f200 8108 	bhi.w	800dfe6 <_scanf_float+0x296>
 800ddd6:	2001      	movs	r0, #1
 800ddd8:	b007      	add	sp, #28
 800ddda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddde:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dde2:	2a0d      	cmp	r2, #13
 800dde4:	d8e6      	bhi.n	800ddb4 <_scanf_float+0x64>
 800dde6:	a101      	add	r1, pc, #4	@ (adr r1, 800ddec <_scanf_float+0x9c>)
 800dde8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ddec:	0800df33 	.word	0x0800df33
 800ddf0:	0800ddb5 	.word	0x0800ddb5
 800ddf4:	0800ddb5 	.word	0x0800ddb5
 800ddf8:	0800ddb5 	.word	0x0800ddb5
 800ddfc:	0800df93 	.word	0x0800df93
 800de00:	0800df6b 	.word	0x0800df6b
 800de04:	0800ddb5 	.word	0x0800ddb5
 800de08:	0800ddb5 	.word	0x0800ddb5
 800de0c:	0800df41 	.word	0x0800df41
 800de10:	0800ddb5 	.word	0x0800ddb5
 800de14:	0800ddb5 	.word	0x0800ddb5
 800de18:	0800ddb5 	.word	0x0800ddb5
 800de1c:	0800ddb5 	.word	0x0800ddb5
 800de20:	0800def9 	.word	0x0800def9
 800de24:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800de28:	e7db      	b.n	800dde2 <_scanf_float+0x92>
 800de2a:	290e      	cmp	r1, #14
 800de2c:	d8c2      	bhi.n	800ddb4 <_scanf_float+0x64>
 800de2e:	a001      	add	r0, pc, #4	@ (adr r0, 800de34 <_scanf_float+0xe4>)
 800de30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800de34:	0800dee9 	.word	0x0800dee9
 800de38:	0800ddb5 	.word	0x0800ddb5
 800de3c:	0800dee9 	.word	0x0800dee9
 800de40:	0800df7f 	.word	0x0800df7f
 800de44:	0800ddb5 	.word	0x0800ddb5
 800de48:	0800de91 	.word	0x0800de91
 800de4c:	0800decf 	.word	0x0800decf
 800de50:	0800decf 	.word	0x0800decf
 800de54:	0800decf 	.word	0x0800decf
 800de58:	0800decf 	.word	0x0800decf
 800de5c:	0800decf 	.word	0x0800decf
 800de60:	0800decf 	.word	0x0800decf
 800de64:	0800decf 	.word	0x0800decf
 800de68:	0800decf 	.word	0x0800decf
 800de6c:	0800decf 	.word	0x0800decf
 800de70:	2b6e      	cmp	r3, #110	@ 0x6e
 800de72:	d809      	bhi.n	800de88 <_scanf_float+0x138>
 800de74:	2b60      	cmp	r3, #96	@ 0x60
 800de76:	d8b2      	bhi.n	800ddde <_scanf_float+0x8e>
 800de78:	2b54      	cmp	r3, #84	@ 0x54
 800de7a:	d07b      	beq.n	800df74 <_scanf_float+0x224>
 800de7c:	2b59      	cmp	r3, #89	@ 0x59
 800de7e:	d199      	bne.n	800ddb4 <_scanf_float+0x64>
 800de80:	2d07      	cmp	r5, #7
 800de82:	d197      	bne.n	800ddb4 <_scanf_float+0x64>
 800de84:	2508      	movs	r5, #8
 800de86:	e02c      	b.n	800dee2 <_scanf_float+0x192>
 800de88:	2b74      	cmp	r3, #116	@ 0x74
 800de8a:	d073      	beq.n	800df74 <_scanf_float+0x224>
 800de8c:	2b79      	cmp	r3, #121	@ 0x79
 800de8e:	e7f6      	b.n	800de7e <_scanf_float+0x12e>
 800de90:	6821      	ldr	r1, [r4, #0]
 800de92:	05c8      	lsls	r0, r1, #23
 800de94:	d51b      	bpl.n	800dece <_scanf_float+0x17e>
 800de96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800de9a:	6021      	str	r1, [r4, #0]
 800de9c:	f109 0901 	add.w	r9, r9, #1
 800dea0:	f1bb 0f00 	cmp.w	fp, #0
 800dea4:	d003      	beq.n	800deae <_scanf_float+0x15e>
 800dea6:	3201      	adds	r2, #1
 800dea8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800deac:	60a2      	str	r2, [r4, #8]
 800deae:	68a3      	ldr	r3, [r4, #8]
 800deb0:	3b01      	subs	r3, #1
 800deb2:	60a3      	str	r3, [r4, #8]
 800deb4:	6923      	ldr	r3, [r4, #16]
 800deb6:	3301      	adds	r3, #1
 800deb8:	6123      	str	r3, [r4, #16]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	3b01      	subs	r3, #1
 800debe:	2b00      	cmp	r3, #0
 800dec0:	607b      	str	r3, [r7, #4]
 800dec2:	f340 8087 	ble.w	800dfd4 <_scanf_float+0x284>
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	3301      	adds	r3, #1
 800deca:	603b      	str	r3, [r7, #0]
 800decc:	e765      	b.n	800dd9a <_scanf_float+0x4a>
 800dece:	eb1a 0105 	adds.w	r1, sl, r5
 800ded2:	f47f af6f 	bne.w	800ddb4 <_scanf_float+0x64>
 800ded6:	6822      	ldr	r2, [r4, #0]
 800ded8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800dedc:	6022      	str	r2, [r4, #0]
 800dede:	460d      	mov	r5, r1
 800dee0:	468a      	mov	sl, r1
 800dee2:	f806 3b01 	strb.w	r3, [r6], #1
 800dee6:	e7e2      	b.n	800deae <_scanf_float+0x15e>
 800dee8:	6822      	ldr	r2, [r4, #0]
 800deea:	0610      	lsls	r0, r2, #24
 800deec:	f57f af62 	bpl.w	800ddb4 <_scanf_float+0x64>
 800def0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800def4:	6022      	str	r2, [r4, #0]
 800def6:	e7f4      	b.n	800dee2 <_scanf_float+0x192>
 800def8:	f1ba 0f00 	cmp.w	sl, #0
 800defc:	d10e      	bne.n	800df1c <_scanf_float+0x1cc>
 800defe:	f1b9 0f00 	cmp.w	r9, #0
 800df02:	d10e      	bne.n	800df22 <_scanf_float+0x1d2>
 800df04:	6822      	ldr	r2, [r4, #0]
 800df06:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800df0a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800df0e:	d108      	bne.n	800df22 <_scanf_float+0x1d2>
 800df10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df14:	6022      	str	r2, [r4, #0]
 800df16:	f04f 0a01 	mov.w	sl, #1
 800df1a:	e7e2      	b.n	800dee2 <_scanf_float+0x192>
 800df1c:	f1ba 0f02 	cmp.w	sl, #2
 800df20:	d055      	beq.n	800dfce <_scanf_float+0x27e>
 800df22:	2d01      	cmp	r5, #1
 800df24:	d002      	beq.n	800df2c <_scanf_float+0x1dc>
 800df26:	2d04      	cmp	r5, #4
 800df28:	f47f af44 	bne.w	800ddb4 <_scanf_float+0x64>
 800df2c:	3501      	adds	r5, #1
 800df2e:	b2ed      	uxtb	r5, r5
 800df30:	e7d7      	b.n	800dee2 <_scanf_float+0x192>
 800df32:	f1ba 0f01 	cmp.w	sl, #1
 800df36:	f47f af3d 	bne.w	800ddb4 <_scanf_float+0x64>
 800df3a:	f04f 0a02 	mov.w	sl, #2
 800df3e:	e7d0      	b.n	800dee2 <_scanf_float+0x192>
 800df40:	b97d      	cbnz	r5, 800df62 <_scanf_float+0x212>
 800df42:	f1b9 0f00 	cmp.w	r9, #0
 800df46:	f47f af38 	bne.w	800ddba <_scanf_float+0x6a>
 800df4a:	6822      	ldr	r2, [r4, #0]
 800df4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800df50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800df54:	f040 8101 	bne.w	800e15a <_scanf_float+0x40a>
 800df58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df5c:	6022      	str	r2, [r4, #0]
 800df5e:	2501      	movs	r5, #1
 800df60:	e7bf      	b.n	800dee2 <_scanf_float+0x192>
 800df62:	2d03      	cmp	r5, #3
 800df64:	d0e2      	beq.n	800df2c <_scanf_float+0x1dc>
 800df66:	2d05      	cmp	r5, #5
 800df68:	e7de      	b.n	800df28 <_scanf_float+0x1d8>
 800df6a:	2d02      	cmp	r5, #2
 800df6c:	f47f af22 	bne.w	800ddb4 <_scanf_float+0x64>
 800df70:	2503      	movs	r5, #3
 800df72:	e7b6      	b.n	800dee2 <_scanf_float+0x192>
 800df74:	2d06      	cmp	r5, #6
 800df76:	f47f af1d 	bne.w	800ddb4 <_scanf_float+0x64>
 800df7a:	2507      	movs	r5, #7
 800df7c:	e7b1      	b.n	800dee2 <_scanf_float+0x192>
 800df7e:	6822      	ldr	r2, [r4, #0]
 800df80:	0591      	lsls	r1, r2, #22
 800df82:	f57f af17 	bpl.w	800ddb4 <_scanf_float+0x64>
 800df86:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800df8a:	6022      	str	r2, [r4, #0]
 800df8c:	f8cd 9008 	str.w	r9, [sp, #8]
 800df90:	e7a7      	b.n	800dee2 <_scanf_float+0x192>
 800df92:	6822      	ldr	r2, [r4, #0]
 800df94:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800df98:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800df9c:	d006      	beq.n	800dfac <_scanf_float+0x25c>
 800df9e:	0550      	lsls	r0, r2, #21
 800dfa0:	f57f af08 	bpl.w	800ddb4 <_scanf_float+0x64>
 800dfa4:	f1b9 0f00 	cmp.w	r9, #0
 800dfa8:	f000 80d7 	beq.w	800e15a <_scanf_float+0x40a>
 800dfac:	0591      	lsls	r1, r2, #22
 800dfae:	bf58      	it	pl
 800dfb0:	9902      	ldrpl	r1, [sp, #8]
 800dfb2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dfb6:	bf58      	it	pl
 800dfb8:	eba9 0101 	subpl.w	r1, r9, r1
 800dfbc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800dfc0:	bf58      	it	pl
 800dfc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dfc6:	6022      	str	r2, [r4, #0]
 800dfc8:	f04f 0900 	mov.w	r9, #0
 800dfcc:	e789      	b.n	800dee2 <_scanf_float+0x192>
 800dfce:	f04f 0a03 	mov.w	sl, #3
 800dfd2:	e786      	b.n	800dee2 <_scanf_float+0x192>
 800dfd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dfd8:	4639      	mov	r1, r7
 800dfda:	4640      	mov	r0, r8
 800dfdc:	4798      	blx	r3
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	f43f aedb 	beq.w	800dd9a <_scanf_float+0x4a>
 800dfe4:	e6e6      	b.n	800ddb4 <_scanf_float+0x64>
 800dfe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfee:	463a      	mov	r2, r7
 800dff0:	4640      	mov	r0, r8
 800dff2:	4798      	blx	r3
 800dff4:	6923      	ldr	r3, [r4, #16]
 800dff6:	3b01      	subs	r3, #1
 800dff8:	6123      	str	r3, [r4, #16]
 800dffa:	e6e8      	b.n	800ddce <_scanf_float+0x7e>
 800dffc:	1e6b      	subs	r3, r5, #1
 800dffe:	2b06      	cmp	r3, #6
 800e000:	d824      	bhi.n	800e04c <_scanf_float+0x2fc>
 800e002:	2d02      	cmp	r5, #2
 800e004:	d836      	bhi.n	800e074 <_scanf_float+0x324>
 800e006:	9b01      	ldr	r3, [sp, #4]
 800e008:	429e      	cmp	r6, r3
 800e00a:	f67f aee4 	bls.w	800ddd6 <_scanf_float+0x86>
 800e00e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e016:	463a      	mov	r2, r7
 800e018:	4640      	mov	r0, r8
 800e01a:	4798      	blx	r3
 800e01c:	6923      	ldr	r3, [r4, #16]
 800e01e:	3b01      	subs	r3, #1
 800e020:	6123      	str	r3, [r4, #16]
 800e022:	e7f0      	b.n	800e006 <_scanf_float+0x2b6>
 800e024:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e028:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e02c:	463a      	mov	r2, r7
 800e02e:	4640      	mov	r0, r8
 800e030:	4798      	blx	r3
 800e032:	6923      	ldr	r3, [r4, #16]
 800e034:	3b01      	subs	r3, #1
 800e036:	6123      	str	r3, [r4, #16]
 800e038:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e03c:	fa5f fa8a 	uxtb.w	sl, sl
 800e040:	f1ba 0f02 	cmp.w	sl, #2
 800e044:	d1ee      	bne.n	800e024 <_scanf_float+0x2d4>
 800e046:	3d03      	subs	r5, #3
 800e048:	b2ed      	uxtb	r5, r5
 800e04a:	1b76      	subs	r6, r6, r5
 800e04c:	6823      	ldr	r3, [r4, #0]
 800e04e:	05da      	lsls	r2, r3, #23
 800e050:	d530      	bpl.n	800e0b4 <_scanf_float+0x364>
 800e052:	055b      	lsls	r3, r3, #21
 800e054:	d511      	bpl.n	800e07a <_scanf_float+0x32a>
 800e056:	9b01      	ldr	r3, [sp, #4]
 800e058:	429e      	cmp	r6, r3
 800e05a:	f67f aebc 	bls.w	800ddd6 <_scanf_float+0x86>
 800e05e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e062:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e066:	463a      	mov	r2, r7
 800e068:	4640      	mov	r0, r8
 800e06a:	4798      	blx	r3
 800e06c:	6923      	ldr	r3, [r4, #16]
 800e06e:	3b01      	subs	r3, #1
 800e070:	6123      	str	r3, [r4, #16]
 800e072:	e7f0      	b.n	800e056 <_scanf_float+0x306>
 800e074:	46aa      	mov	sl, r5
 800e076:	46b3      	mov	fp, r6
 800e078:	e7de      	b.n	800e038 <_scanf_float+0x2e8>
 800e07a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e07e:	6923      	ldr	r3, [r4, #16]
 800e080:	2965      	cmp	r1, #101	@ 0x65
 800e082:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e086:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800e08a:	6123      	str	r3, [r4, #16]
 800e08c:	d00c      	beq.n	800e0a8 <_scanf_float+0x358>
 800e08e:	2945      	cmp	r1, #69	@ 0x45
 800e090:	d00a      	beq.n	800e0a8 <_scanf_float+0x358>
 800e092:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e096:	463a      	mov	r2, r7
 800e098:	4640      	mov	r0, r8
 800e09a:	4798      	blx	r3
 800e09c:	6923      	ldr	r3, [r4, #16]
 800e09e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	1eb5      	subs	r5, r6, #2
 800e0a6:	6123      	str	r3, [r4, #16]
 800e0a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0ac:	463a      	mov	r2, r7
 800e0ae:	4640      	mov	r0, r8
 800e0b0:	4798      	blx	r3
 800e0b2:	462e      	mov	r6, r5
 800e0b4:	6822      	ldr	r2, [r4, #0]
 800e0b6:	f012 0210 	ands.w	r2, r2, #16
 800e0ba:	d001      	beq.n	800e0c0 <_scanf_float+0x370>
 800e0bc:	2000      	movs	r0, #0
 800e0be:	e68b      	b.n	800ddd8 <_scanf_float+0x88>
 800e0c0:	7032      	strb	r2, [r6, #0]
 800e0c2:	6823      	ldr	r3, [r4, #0]
 800e0c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e0c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0cc:	d11a      	bne.n	800e104 <_scanf_float+0x3b4>
 800e0ce:	9b02      	ldr	r3, [sp, #8]
 800e0d0:	454b      	cmp	r3, r9
 800e0d2:	eba3 0209 	sub.w	r2, r3, r9
 800e0d6:	d121      	bne.n	800e11c <_scanf_float+0x3cc>
 800e0d8:	9901      	ldr	r1, [sp, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	4640      	mov	r0, r8
 800e0de:	f000 ff31 	bl	800ef44 <_strtod_r>
 800e0e2:	9b03      	ldr	r3, [sp, #12]
 800e0e4:	6821      	ldr	r1, [r4, #0]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f011 0f02 	tst.w	r1, #2
 800e0ec:	f103 0204 	add.w	r2, r3, #4
 800e0f0:	d01f      	beq.n	800e132 <_scanf_float+0x3e2>
 800e0f2:	9903      	ldr	r1, [sp, #12]
 800e0f4:	600a      	str	r2, [r1, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	ed83 0b00 	vstr	d0, [r3]
 800e0fc:	68e3      	ldr	r3, [r4, #12]
 800e0fe:	3301      	adds	r3, #1
 800e100:	60e3      	str	r3, [r4, #12]
 800e102:	e7db      	b.n	800e0bc <_scanf_float+0x36c>
 800e104:	9b04      	ldr	r3, [sp, #16]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d0e6      	beq.n	800e0d8 <_scanf_float+0x388>
 800e10a:	9905      	ldr	r1, [sp, #20]
 800e10c:	230a      	movs	r3, #10
 800e10e:	3101      	adds	r1, #1
 800e110:	4640      	mov	r0, r8
 800e112:	f000 ff97 	bl	800f044 <_strtol_r>
 800e116:	9b04      	ldr	r3, [sp, #16]
 800e118:	9e05      	ldr	r6, [sp, #20]
 800e11a:	1ac2      	subs	r2, r0, r3
 800e11c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e120:	429e      	cmp	r6, r3
 800e122:	bf28      	it	cs
 800e124:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e128:	490d      	ldr	r1, [pc, #52]	@ (800e160 <_scanf_float+0x410>)
 800e12a:	4630      	mov	r0, r6
 800e12c:	f000 f850 	bl	800e1d0 <siprintf>
 800e130:	e7d2      	b.n	800e0d8 <_scanf_float+0x388>
 800e132:	f011 0f04 	tst.w	r1, #4
 800e136:	9903      	ldr	r1, [sp, #12]
 800e138:	600a      	str	r2, [r1, #0]
 800e13a:	d1dc      	bne.n	800e0f6 <_scanf_float+0x3a6>
 800e13c:	eeb4 0b40 	vcmp.f64	d0, d0
 800e140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e144:	681d      	ldr	r5, [r3, #0]
 800e146:	d705      	bvc.n	800e154 <_scanf_float+0x404>
 800e148:	4806      	ldr	r0, [pc, #24]	@ (800e164 <_scanf_float+0x414>)
 800e14a:	f001 f8b5 	bl	800f2b8 <nanf>
 800e14e:	ed85 0a00 	vstr	s0, [r5]
 800e152:	e7d3      	b.n	800e0fc <_scanf_float+0x3ac>
 800e154:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e158:	e7f9      	b.n	800e14e <_scanf_float+0x3fe>
 800e15a:	f04f 0900 	mov.w	r9, #0
 800e15e:	e630      	b.n	800ddc2 <_scanf_float+0x72>
 800e160:	08011f08 	.word	0x08011f08
 800e164:	080122fb 	.word	0x080122fb

0800e168 <sniprintf>:
 800e168:	b40c      	push	{r2, r3}
 800e16a:	b530      	push	{r4, r5, lr}
 800e16c:	4b17      	ldr	r3, [pc, #92]	@ (800e1cc <sniprintf+0x64>)
 800e16e:	1e0c      	subs	r4, r1, #0
 800e170:	681d      	ldr	r5, [r3, #0]
 800e172:	b09d      	sub	sp, #116	@ 0x74
 800e174:	da08      	bge.n	800e188 <sniprintf+0x20>
 800e176:	238b      	movs	r3, #139	@ 0x8b
 800e178:	602b      	str	r3, [r5, #0]
 800e17a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e17e:	b01d      	add	sp, #116	@ 0x74
 800e180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e184:	b002      	add	sp, #8
 800e186:	4770      	bx	lr
 800e188:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e18c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e190:	bf14      	ite	ne
 800e192:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800e196:	4623      	moveq	r3, r4
 800e198:	9304      	str	r3, [sp, #16]
 800e19a:	9307      	str	r3, [sp, #28]
 800e19c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e1a0:	9002      	str	r0, [sp, #8]
 800e1a2:	9006      	str	r0, [sp, #24]
 800e1a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e1a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e1aa:	ab21      	add	r3, sp, #132	@ 0x84
 800e1ac:	a902      	add	r1, sp, #8
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	9301      	str	r3, [sp, #4]
 800e1b2:	f002 fa45 	bl	8010640 <_svfiprintf_r>
 800e1b6:	1c43      	adds	r3, r0, #1
 800e1b8:	bfbc      	itt	lt
 800e1ba:	238b      	movlt	r3, #139	@ 0x8b
 800e1bc:	602b      	strlt	r3, [r5, #0]
 800e1be:	2c00      	cmp	r4, #0
 800e1c0:	d0dd      	beq.n	800e17e <sniprintf+0x16>
 800e1c2:	9b02      	ldr	r3, [sp, #8]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	701a      	strb	r2, [r3, #0]
 800e1c8:	e7d9      	b.n	800e17e <sniprintf+0x16>
 800e1ca:	bf00      	nop
 800e1cc:	24000194 	.word	0x24000194

0800e1d0 <siprintf>:
 800e1d0:	b40e      	push	{r1, r2, r3}
 800e1d2:	b500      	push	{lr}
 800e1d4:	b09c      	sub	sp, #112	@ 0x70
 800e1d6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e1d8:	9002      	str	r0, [sp, #8]
 800e1da:	9006      	str	r0, [sp, #24]
 800e1dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e1e0:	4809      	ldr	r0, [pc, #36]	@ (800e208 <siprintf+0x38>)
 800e1e2:	9107      	str	r1, [sp, #28]
 800e1e4:	9104      	str	r1, [sp, #16]
 800e1e6:	4909      	ldr	r1, [pc, #36]	@ (800e20c <siprintf+0x3c>)
 800e1e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1ec:	9105      	str	r1, [sp, #20]
 800e1ee:	6800      	ldr	r0, [r0, #0]
 800e1f0:	9301      	str	r3, [sp, #4]
 800e1f2:	a902      	add	r1, sp, #8
 800e1f4:	f002 fa24 	bl	8010640 <_svfiprintf_r>
 800e1f8:	9b02      	ldr	r3, [sp, #8]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	701a      	strb	r2, [r3, #0]
 800e1fe:	b01c      	add	sp, #112	@ 0x70
 800e200:	f85d eb04 	ldr.w	lr, [sp], #4
 800e204:	b003      	add	sp, #12
 800e206:	4770      	bx	lr
 800e208:	24000194 	.word	0x24000194
 800e20c:	ffff0208 	.word	0xffff0208

0800e210 <__sread>:
 800e210:	b510      	push	{r4, lr}
 800e212:	460c      	mov	r4, r1
 800e214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e218:	f000 ffe4 	bl	800f1e4 <_read_r>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	bfab      	itete	ge
 800e220:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e222:	89a3      	ldrhlt	r3, [r4, #12]
 800e224:	181b      	addge	r3, r3, r0
 800e226:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e22a:	bfac      	ite	ge
 800e22c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e22e:	81a3      	strhlt	r3, [r4, #12]
 800e230:	bd10      	pop	{r4, pc}

0800e232 <__swrite>:
 800e232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e236:	461f      	mov	r7, r3
 800e238:	898b      	ldrh	r3, [r1, #12]
 800e23a:	05db      	lsls	r3, r3, #23
 800e23c:	4605      	mov	r5, r0
 800e23e:	460c      	mov	r4, r1
 800e240:	4616      	mov	r6, r2
 800e242:	d505      	bpl.n	800e250 <__swrite+0x1e>
 800e244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e248:	2302      	movs	r3, #2
 800e24a:	2200      	movs	r2, #0
 800e24c:	f000 ffb8 	bl	800f1c0 <_lseek_r>
 800e250:	89a3      	ldrh	r3, [r4, #12]
 800e252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e25a:	81a3      	strh	r3, [r4, #12]
 800e25c:	4632      	mov	r2, r6
 800e25e:	463b      	mov	r3, r7
 800e260:	4628      	mov	r0, r5
 800e262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e266:	f000 bfcf 	b.w	800f208 <_write_r>

0800e26a <__sseek>:
 800e26a:	b510      	push	{r4, lr}
 800e26c:	460c      	mov	r4, r1
 800e26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e272:	f000 ffa5 	bl	800f1c0 <_lseek_r>
 800e276:	1c43      	adds	r3, r0, #1
 800e278:	89a3      	ldrh	r3, [r4, #12]
 800e27a:	bf15      	itete	ne
 800e27c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e27e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e282:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e286:	81a3      	strheq	r3, [r4, #12]
 800e288:	bf18      	it	ne
 800e28a:	81a3      	strhne	r3, [r4, #12]
 800e28c:	bd10      	pop	{r4, pc}

0800e28e <__sclose>:
 800e28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e292:	f000 bf85 	b.w	800f1a0 <_close_r>
	...

0800e298 <std>:
 800e298:	2300      	movs	r3, #0
 800e29a:	b510      	push	{r4, lr}
 800e29c:	4604      	mov	r4, r0
 800e29e:	e9c0 3300 	strd	r3, r3, [r0]
 800e2a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2a6:	6083      	str	r3, [r0, #8]
 800e2a8:	8181      	strh	r1, [r0, #12]
 800e2aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800e2ac:	81c2      	strh	r2, [r0, #14]
 800e2ae:	6183      	str	r3, [r0, #24]
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	2208      	movs	r2, #8
 800e2b4:	305c      	adds	r0, #92	@ 0x5c
 800e2b6:	f000 ff67 	bl	800f188 <memset>
 800e2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f0 <std+0x58>)
 800e2bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800e2be:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f4 <std+0x5c>)
 800e2c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f8 <std+0x60>)
 800e2c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2fc <std+0x64>)
 800e2c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e300 <std+0x68>)
 800e2cc:	6224      	str	r4, [r4, #32]
 800e2ce:	429c      	cmp	r4, r3
 800e2d0:	d006      	beq.n	800e2e0 <std+0x48>
 800e2d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e2d6:	4294      	cmp	r4, r2
 800e2d8:	d002      	beq.n	800e2e0 <std+0x48>
 800e2da:	33d0      	adds	r3, #208	@ 0xd0
 800e2dc:	429c      	cmp	r4, r3
 800e2de:	d105      	bne.n	800e2ec <std+0x54>
 800e2e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2e8:	f000 bfca 	b.w	800f280 <__retarget_lock_init_recursive>
 800e2ec:	bd10      	pop	{r4, pc}
 800e2ee:	bf00      	nop
 800e2f0:	0800e211 	.word	0x0800e211
 800e2f4:	0800e233 	.word	0x0800e233
 800e2f8:	0800e26b 	.word	0x0800e26b
 800e2fc:	0800e28f 	.word	0x0800e28f
 800e300:	24000c5c 	.word	0x24000c5c

0800e304 <stdio_exit_handler>:
 800e304:	4a02      	ldr	r2, [pc, #8]	@ (800e310 <stdio_exit_handler+0xc>)
 800e306:	4903      	ldr	r1, [pc, #12]	@ (800e314 <stdio_exit_handler+0x10>)
 800e308:	4803      	ldr	r0, [pc, #12]	@ (800e318 <stdio_exit_handler+0x14>)
 800e30a:	f000 be9d 	b.w	800f048 <_fwalk_sglue>
 800e30e:	bf00      	nop
 800e310:	2400001c 	.word	0x2400001c
 800e314:	08010d3d 	.word	0x08010d3d
 800e318:	24000198 	.word	0x24000198

0800e31c <cleanup_stdio>:
 800e31c:	6841      	ldr	r1, [r0, #4]
 800e31e:	4b0c      	ldr	r3, [pc, #48]	@ (800e350 <cleanup_stdio+0x34>)
 800e320:	4299      	cmp	r1, r3
 800e322:	b510      	push	{r4, lr}
 800e324:	4604      	mov	r4, r0
 800e326:	d001      	beq.n	800e32c <cleanup_stdio+0x10>
 800e328:	f002 fd08 	bl	8010d3c <_fflush_r>
 800e32c:	68a1      	ldr	r1, [r4, #8]
 800e32e:	4b09      	ldr	r3, [pc, #36]	@ (800e354 <cleanup_stdio+0x38>)
 800e330:	4299      	cmp	r1, r3
 800e332:	d002      	beq.n	800e33a <cleanup_stdio+0x1e>
 800e334:	4620      	mov	r0, r4
 800e336:	f002 fd01 	bl	8010d3c <_fflush_r>
 800e33a:	68e1      	ldr	r1, [r4, #12]
 800e33c:	4b06      	ldr	r3, [pc, #24]	@ (800e358 <cleanup_stdio+0x3c>)
 800e33e:	4299      	cmp	r1, r3
 800e340:	d004      	beq.n	800e34c <cleanup_stdio+0x30>
 800e342:	4620      	mov	r0, r4
 800e344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e348:	f002 bcf8 	b.w	8010d3c <_fflush_r>
 800e34c:	bd10      	pop	{r4, pc}
 800e34e:	bf00      	nop
 800e350:	24000c5c 	.word	0x24000c5c
 800e354:	24000cc4 	.word	0x24000cc4
 800e358:	24000d2c 	.word	0x24000d2c

0800e35c <global_stdio_init.part.0>:
 800e35c:	b510      	push	{r4, lr}
 800e35e:	4b0b      	ldr	r3, [pc, #44]	@ (800e38c <global_stdio_init.part.0+0x30>)
 800e360:	4c0b      	ldr	r4, [pc, #44]	@ (800e390 <global_stdio_init.part.0+0x34>)
 800e362:	4a0c      	ldr	r2, [pc, #48]	@ (800e394 <global_stdio_init.part.0+0x38>)
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	4620      	mov	r0, r4
 800e368:	2200      	movs	r2, #0
 800e36a:	2104      	movs	r1, #4
 800e36c:	f7ff ff94 	bl	800e298 <std>
 800e370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e374:	2201      	movs	r2, #1
 800e376:	2109      	movs	r1, #9
 800e378:	f7ff ff8e 	bl	800e298 <std>
 800e37c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e380:	2202      	movs	r2, #2
 800e382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e386:	2112      	movs	r1, #18
 800e388:	f7ff bf86 	b.w	800e298 <std>
 800e38c:	24000d94 	.word	0x24000d94
 800e390:	24000c5c 	.word	0x24000c5c
 800e394:	0800e305 	.word	0x0800e305

0800e398 <__sfp_lock_acquire>:
 800e398:	4801      	ldr	r0, [pc, #4]	@ (800e3a0 <__sfp_lock_acquire+0x8>)
 800e39a:	f000 bf72 	b.w	800f282 <__retarget_lock_acquire_recursive>
 800e39e:	bf00      	nop
 800e3a0:	24000d9d 	.word	0x24000d9d

0800e3a4 <__sfp_lock_release>:
 800e3a4:	4801      	ldr	r0, [pc, #4]	@ (800e3ac <__sfp_lock_release+0x8>)
 800e3a6:	f000 bf6d 	b.w	800f284 <__retarget_lock_release_recursive>
 800e3aa:	bf00      	nop
 800e3ac:	24000d9d 	.word	0x24000d9d

0800e3b0 <__sinit>:
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	f7ff fff0 	bl	800e398 <__sfp_lock_acquire>
 800e3b8:	6a23      	ldr	r3, [r4, #32]
 800e3ba:	b11b      	cbz	r3, 800e3c4 <__sinit+0x14>
 800e3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3c0:	f7ff bff0 	b.w	800e3a4 <__sfp_lock_release>
 800e3c4:	4b04      	ldr	r3, [pc, #16]	@ (800e3d8 <__sinit+0x28>)
 800e3c6:	6223      	str	r3, [r4, #32]
 800e3c8:	4b04      	ldr	r3, [pc, #16]	@ (800e3dc <__sinit+0x2c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1f5      	bne.n	800e3bc <__sinit+0xc>
 800e3d0:	f7ff ffc4 	bl	800e35c <global_stdio_init.part.0>
 800e3d4:	e7f2      	b.n	800e3bc <__sinit+0xc>
 800e3d6:	bf00      	nop
 800e3d8:	0800e31d 	.word	0x0800e31d
 800e3dc:	24000d94 	.word	0x24000d94

0800e3e0 <sulp>:
 800e3e0:	b570      	push	{r4, r5, r6, lr}
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	460d      	mov	r5, r1
 800e3e6:	4616      	mov	r6, r2
 800e3e8:	ec45 4b10 	vmov	d0, r4, r5
 800e3ec:	f003 f84e 	bl	801148c <__ulp>
 800e3f0:	b17e      	cbz	r6, 800e412 <sulp+0x32>
 800e3f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e3f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	dd09      	ble.n	800e412 <sulp+0x32>
 800e3fe:	051b      	lsls	r3, r3, #20
 800e400:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e404:	2000      	movs	r0, #0
 800e406:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e40a:	ec41 0b17 	vmov	d7, r0, r1
 800e40e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e412:	bd70      	pop	{r4, r5, r6, pc}
 800e414:	0000      	movs	r0, r0
	...

0800e418 <_strtod_l>:
 800e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41c:	ed2d 8b0a 	vpush	{d8-d12}
 800e420:	b097      	sub	sp, #92	@ 0x5c
 800e422:	4688      	mov	r8, r1
 800e424:	920e      	str	r2, [sp, #56]	@ 0x38
 800e426:	2200      	movs	r2, #0
 800e428:	9212      	str	r2, [sp, #72]	@ 0x48
 800e42a:	9005      	str	r0, [sp, #20]
 800e42c:	f04f 0a00 	mov.w	sl, #0
 800e430:	f04f 0b00 	mov.w	fp, #0
 800e434:	460a      	mov	r2, r1
 800e436:	9211      	str	r2, [sp, #68]	@ 0x44
 800e438:	7811      	ldrb	r1, [r2, #0]
 800e43a:	292b      	cmp	r1, #43	@ 0x2b
 800e43c:	d04c      	beq.n	800e4d8 <_strtod_l+0xc0>
 800e43e:	d839      	bhi.n	800e4b4 <_strtod_l+0x9c>
 800e440:	290d      	cmp	r1, #13
 800e442:	d833      	bhi.n	800e4ac <_strtod_l+0x94>
 800e444:	2908      	cmp	r1, #8
 800e446:	d833      	bhi.n	800e4b0 <_strtod_l+0x98>
 800e448:	2900      	cmp	r1, #0
 800e44a:	d03c      	beq.n	800e4c6 <_strtod_l+0xae>
 800e44c:	2200      	movs	r2, #0
 800e44e:	9208      	str	r2, [sp, #32]
 800e450:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e452:	782a      	ldrb	r2, [r5, #0]
 800e454:	2a30      	cmp	r2, #48	@ 0x30
 800e456:	f040 80b5 	bne.w	800e5c4 <_strtod_l+0x1ac>
 800e45a:	786a      	ldrb	r2, [r5, #1]
 800e45c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e460:	2a58      	cmp	r2, #88	@ 0x58
 800e462:	d170      	bne.n	800e546 <_strtod_l+0x12e>
 800e464:	9302      	str	r3, [sp, #8]
 800e466:	9b08      	ldr	r3, [sp, #32]
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	ab12      	add	r3, sp, #72	@ 0x48
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	4a8b      	ldr	r2, [pc, #556]	@ (800e69c <_strtod_l+0x284>)
 800e470:	9805      	ldr	r0, [sp, #20]
 800e472:	ab13      	add	r3, sp, #76	@ 0x4c
 800e474:	a911      	add	r1, sp, #68	@ 0x44
 800e476:	f001 fdb7 	bl	800ffe8 <__gethex>
 800e47a:	f010 060f 	ands.w	r6, r0, #15
 800e47e:	4604      	mov	r4, r0
 800e480:	d005      	beq.n	800e48e <_strtod_l+0x76>
 800e482:	2e06      	cmp	r6, #6
 800e484:	d12a      	bne.n	800e4dc <_strtod_l+0xc4>
 800e486:	3501      	adds	r5, #1
 800e488:	2300      	movs	r3, #0
 800e48a:	9511      	str	r5, [sp, #68]	@ 0x44
 800e48c:	9308      	str	r3, [sp, #32]
 800e48e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e490:	2b00      	cmp	r3, #0
 800e492:	f040 852f 	bne.w	800eef4 <_strtod_l+0xadc>
 800e496:	9b08      	ldr	r3, [sp, #32]
 800e498:	ec4b ab10 	vmov	d0, sl, fp
 800e49c:	b1cb      	cbz	r3, 800e4d2 <_strtod_l+0xba>
 800e49e:	eeb1 0b40 	vneg.f64	d0, d0
 800e4a2:	b017      	add	sp, #92	@ 0x5c
 800e4a4:	ecbd 8b0a 	vpop	{d8-d12}
 800e4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ac:	2920      	cmp	r1, #32
 800e4ae:	d1cd      	bne.n	800e44c <_strtod_l+0x34>
 800e4b0:	3201      	adds	r2, #1
 800e4b2:	e7c0      	b.n	800e436 <_strtod_l+0x1e>
 800e4b4:	292d      	cmp	r1, #45	@ 0x2d
 800e4b6:	d1c9      	bne.n	800e44c <_strtod_l+0x34>
 800e4b8:	2101      	movs	r1, #1
 800e4ba:	9108      	str	r1, [sp, #32]
 800e4bc:	1c51      	adds	r1, r2, #1
 800e4be:	9111      	str	r1, [sp, #68]	@ 0x44
 800e4c0:	7852      	ldrb	r2, [r2, #1]
 800e4c2:	2a00      	cmp	r2, #0
 800e4c4:	d1c4      	bne.n	800e450 <_strtod_l+0x38>
 800e4c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4c8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f040 850f 	bne.w	800eef0 <_strtod_l+0xad8>
 800e4d2:	ec4b ab10 	vmov	d0, sl, fp
 800e4d6:	e7e4      	b.n	800e4a2 <_strtod_l+0x8a>
 800e4d8:	2100      	movs	r1, #0
 800e4da:	e7ee      	b.n	800e4ba <_strtod_l+0xa2>
 800e4dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e4de:	b13a      	cbz	r2, 800e4f0 <_strtod_l+0xd8>
 800e4e0:	2135      	movs	r1, #53	@ 0x35
 800e4e2:	a814      	add	r0, sp, #80	@ 0x50
 800e4e4:	f003 f8c9 	bl	801167a <__copybits>
 800e4e8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e4ea:	9805      	ldr	r0, [sp, #20]
 800e4ec:	f002 fc9a 	bl	8010e24 <_Bfree>
 800e4f0:	1e73      	subs	r3, r6, #1
 800e4f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e4f4:	2b04      	cmp	r3, #4
 800e4f6:	d806      	bhi.n	800e506 <_strtod_l+0xee>
 800e4f8:	e8df f003 	tbb	[pc, r3]
 800e4fc:	201d0314 	.word	0x201d0314
 800e500:	14          	.byte	0x14
 800e501:	00          	.byte	0x00
 800e502:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e506:	05e3      	lsls	r3, r4, #23
 800e508:	bf48      	it	mi
 800e50a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e50e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e512:	0d1b      	lsrs	r3, r3, #20
 800e514:	051b      	lsls	r3, r3, #20
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1b9      	bne.n	800e48e <_strtod_l+0x76>
 800e51a:	f000 fe87 	bl	800f22c <__errno>
 800e51e:	2322      	movs	r3, #34	@ 0x22
 800e520:	6003      	str	r3, [r0, #0]
 800e522:	e7b4      	b.n	800e48e <_strtod_l+0x76>
 800e524:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e528:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e52c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e530:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e534:	e7e7      	b.n	800e506 <_strtod_l+0xee>
 800e536:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e6a4 <_strtod_l+0x28c>
 800e53a:	e7e4      	b.n	800e506 <_strtod_l+0xee>
 800e53c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e540:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e544:	e7df      	b.n	800e506 <_strtod_l+0xee>
 800e546:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e548:	1c5a      	adds	r2, r3, #1
 800e54a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e54c:	785b      	ldrb	r3, [r3, #1]
 800e54e:	2b30      	cmp	r3, #48	@ 0x30
 800e550:	d0f9      	beq.n	800e546 <_strtod_l+0x12e>
 800e552:	2b00      	cmp	r3, #0
 800e554:	d09b      	beq.n	800e48e <_strtod_l+0x76>
 800e556:	2301      	movs	r3, #1
 800e558:	2600      	movs	r6, #0
 800e55a:	9307      	str	r3, [sp, #28]
 800e55c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e55e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e560:	46b1      	mov	r9, r6
 800e562:	4635      	mov	r5, r6
 800e564:	220a      	movs	r2, #10
 800e566:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e568:	7804      	ldrb	r4, [r0, #0]
 800e56a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e56e:	b2d9      	uxtb	r1, r3
 800e570:	2909      	cmp	r1, #9
 800e572:	d929      	bls.n	800e5c8 <_strtod_l+0x1b0>
 800e574:	494a      	ldr	r1, [pc, #296]	@ (800e6a0 <_strtod_l+0x288>)
 800e576:	2201      	movs	r2, #1
 800e578:	f000 fdf4 	bl	800f164 <strncmp>
 800e57c:	b378      	cbz	r0, 800e5de <_strtod_l+0x1c6>
 800e57e:	2000      	movs	r0, #0
 800e580:	4622      	mov	r2, r4
 800e582:	462b      	mov	r3, r5
 800e584:	4607      	mov	r7, r0
 800e586:	9006      	str	r0, [sp, #24]
 800e588:	2a65      	cmp	r2, #101	@ 0x65
 800e58a:	d001      	beq.n	800e590 <_strtod_l+0x178>
 800e58c:	2a45      	cmp	r2, #69	@ 0x45
 800e58e:	d117      	bne.n	800e5c0 <_strtod_l+0x1a8>
 800e590:	b91b      	cbnz	r3, 800e59a <_strtod_l+0x182>
 800e592:	9b07      	ldr	r3, [sp, #28]
 800e594:	4303      	orrs	r3, r0
 800e596:	d096      	beq.n	800e4c6 <_strtod_l+0xae>
 800e598:	2300      	movs	r3, #0
 800e59a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e59e:	f108 0201 	add.w	r2, r8, #1
 800e5a2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e5a4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e5a8:	2a2b      	cmp	r2, #43	@ 0x2b
 800e5aa:	d06b      	beq.n	800e684 <_strtod_l+0x26c>
 800e5ac:	2a2d      	cmp	r2, #45	@ 0x2d
 800e5ae:	d071      	beq.n	800e694 <_strtod_l+0x27c>
 800e5b0:	f04f 0e00 	mov.w	lr, #0
 800e5b4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e5b8:	2c09      	cmp	r4, #9
 800e5ba:	d979      	bls.n	800e6b0 <_strtod_l+0x298>
 800e5bc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e5c0:	2400      	movs	r4, #0
 800e5c2:	e094      	b.n	800e6ee <_strtod_l+0x2d6>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	e7c7      	b.n	800e558 <_strtod_l+0x140>
 800e5c8:	2d08      	cmp	r5, #8
 800e5ca:	f100 0001 	add.w	r0, r0, #1
 800e5ce:	bfd4      	ite	le
 800e5d0:	fb02 3909 	mlale	r9, r2, r9, r3
 800e5d4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e5d8:	3501      	adds	r5, #1
 800e5da:	9011      	str	r0, [sp, #68]	@ 0x44
 800e5dc:	e7c3      	b.n	800e566 <_strtod_l+0x14e>
 800e5de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5e0:	1c5a      	adds	r2, r3, #1
 800e5e2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e5e4:	785a      	ldrb	r2, [r3, #1]
 800e5e6:	b375      	cbz	r5, 800e646 <_strtod_l+0x22e>
 800e5e8:	4607      	mov	r7, r0
 800e5ea:	462b      	mov	r3, r5
 800e5ec:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e5f0:	2909      	cmp	r1, #9
 800e5f2:	d913      	bls.n	800e61c <_strtod_l+0x204>
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	9106      	str	r1, [sp, #24]
 800e5f8:	e7c6      	b.n	800e588 <_strtod_l+0x170>
 800e5fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5fc:	1c5a      	adds	r2, r3, #1
 800e5fe:	9211      	str	r2, [sp, #68]	@ 0x44
 800e600:	785a      	ldrb	r2, [r3, #1]
 800e602:	3001      	adds	r0, #1
 800e604:	2a30      	cmp	r2, #48	@ 0x30
 800e606:	d0f8      	beq.n	800e5fa <_strtod_l+0x1e2>
 800e608:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e60c:	2b08      	cmp	r3, #8
 800e60e:	f200 8476 	bhi.w	800eefe <_strtod_l+0xae6>
 800e612:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e614:	930a      	str	r3, [sp, #40]	@ 0x28
 800e616:	4607      	mov	r7, r0
 800e618:	2000      	movs	r0, #0
 800e61a:	4603      	mov	r3, r0
 800e61c:	3a30      	subs	r2, #48	@ 0x30
 800e61e:	f100 0101 	add.w	r1, r0, #1
 800e622:	d023      	beq.n	800e66c <_strtod_l+0x254>
 800e624:	440f      	add	r7, r1
 800e626:	eb00 0c03 	add.w	ip, r0, r3
 800e62a:	4619      	mov	r1, r3
 800e62c:	240a      	movs	r4, #10
 800e62e:	4561      	cmp	r1, ip
 800e630:	d10b      	bne.n	800e64a <_strtod_l+0x232>
 800e632:	1c5c      	adds	r4, r3, #1
 800e634:	4403      	add	r3, r0
 800e636:	2b08      	cmp	r3, #8
 800e638:	4404      	add	r4, r0
 800e63a:	dc11      	bgt.n	800e660 <_strtod_l+0x248>
 800e63c:	230a      	movs	r3, #10
 800e63e:	fb03 2909 	mla	r9, r3, r9, r2
 800e642:	2100      	movs	r1, #0
 800e644:	e013      	b.n	800e66e <_strtod_l+0x256>
 800e646:	4628      	mov	r0, r5
 800e648:	e7dc      	b.n	800e604 <_strtod_l+0x1ec>
 800e64a:	2908      	cmp	r1, #8
 800e64c:	f101 0101 	add.w	r1, r1, #1
 800e650:	dc02      	bgt.n	800e658 <_strtod_l+0x240>
 800e652:	fb04 f909 	mul.w	r9, r4, r9
 800e656:	e7ea      	b.n	800e62e <_strtod_l+0x216>
 800e658:	2910      	cmp	r1, #16
 800e65a:	bfd8      	it	le
 800e65c:	4366      	mulle	r6, r4
 800e65e:	e7e6      	b.n	800e62e <_strtod_l+0x216>
 800e660:	2b0f      	cmp	r3, #15
 800e662:	dcee      	bgt.n	800e642 <_strtod_l+0x22a>
 800e664:	230a      	movs	r3, #10
 800e666:	fb03 2606 	mla	r6, r3, r6, r2
 800e66a:	e7ea      	b.n	800e642 <_strtod_l+0x22a>
 800e66c:	461c      	mov	r4, r3
 800e66e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e670:	1c5a      	adds	r2, r3, #1
 800e672:	9211      	str	r2, [sp, #68]	@ 0x44
 800e674:	785a      	ldrb	r2, [r3, #1]
 800e676:	4608      	mov	r0, r1
 800e678:	4623      	mov	r3, r4
 800e67a:	e7b7      	b.n	800e5ec <_strtod_l+0x1d4>
 800e67c:	2301      	movs	r3, #1
 800e67e:	2700      	movs	r7, #0
 800e680:	9306      	str	r3, [sp, #24]
 800e682:	e786      	b.n	800e592 <_strtod_l+0x17a>
 800e684:	f04f 0e00 	mov.w	lr, #0
 800e688:	f108 0202 	add.w	r2, r8, #2
 800e68c:	9211      	str	r2, [sp, #68]	@ 0x44
 800e68e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e692:	e78f      	b.n	800e5b4 <_strtod_l+0x19c>
 800e694:	f04f 0e01 	mov.w	lr, #1
 800e698:	e7f6      	b.n	800e688 <_strtod_l+0x270>
 800e69a:	bf00      	nop
 800e69c:	08011f24 	.word	0x08011f24
 800e6a0:	08011f0d 	.word	0x08011f0d
 800e6a4:	7ff00000 	.word	0x7ff00000
 800e6a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e6aa:	1c54      	adds	r4, r2, #1
 800e6ac:	9411      	str	r4, [sp, #68]	@ 0x44
 800e6ae:	7852      	ldrb	r2, [r2, #1]
 800e6b0:	2a30      	cmp	r2, #48	@ 0x30
 800e6b2:	d0f9      	beq.n	800e6a8 <_strtod_l+0x290>
 800e6b4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e6b8:	2c08      	cmp	r4, #8
 800e6ba:	d881      	bhi.n	800e5c0 <_strtod_l+0x1a8>
 800e6bc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e6c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e6c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e6c6:	1c51      	adds	r1, r2, #1
 800e6c8:	9111      	str	r1, [sp, #68]	@ 0x44
 800e6ca:	7852      	ldrb	r2, [r2, #1]
 800e6cc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e6d0:	2c09      	cmp	r4, #9
 800e6d2:	d938      	bls.n	800e746 <_strtod_l+0x32e>
 800e6d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e6d6:	1b0c      	subs	r4, r1, r4
 800e6d8:	2c08      	cmp	r4, #8
 800e6da:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e6de:	dc02      	bgt.n	800e6e6 <_strtod_l+0x2ce>
 800e6e0:	4564      	cmp	r4, ip
 800e6e2:	bfa8      	it	ge
 800e6e4:	4664      	movge	r4, ip
 800e6e6:	f1be 0f00 	cmp.w	lr, #0
 800e6ea:	d000      	beq.n	800e6ee <_strtod_l+0x2d6>
 800e6ec:	4264      	negs	r4, r4
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d14e      	bne.n	800e790 <_strtod_l+0x378>
 800e6f2:	9b07      	ldr	r3, [sp, #28]
 800e6f4:	4318      	orrs	r0, r3
 800e6f6:	f47f aeca 	bne.w	800e48e <_strtod_l+0x76>
 800e6fa:	9b06      	ldr	r3, [sp, #24]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f47f aee2 	bne.w	800e4c6 <_strtod_l+0xae>
 800e702:	2a69      	cmp	r2, #105	@ 0x69
 800e704:	d027      	beq.n	800e756 <_strtod_l+0x33e>
 800e706:	dc24      	bgt.n	800e752 <_strtod_l+0x33a>
 800e708:	2a49      	cmp	r2, #73	@ 0x49
 800e70a:	d024      	beq.n	800e756 <_strtod_l+0x33e>
 800e70c:	2a4e      	cmp	r2, #78	@ 0x4e
 800e70e:	f47f aeda 	bne.w	800e4c6 <_strtod_l+0xae>
 800e712:	4997      	ldr	r1, [pc, #604]	@ (800e970 <_strtod_l+0x558>)
 800e714:	a811      	add	r0, sp, #68	@ 0x44
 800e716:	f001 fe89 	bl	801042c <__match>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	f43f aed3 	beq.w	800e4c6 <_strtod_l+0xae>
 800e720:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	2b28      	cmp	r3, #40	@ 0x28
 800e726:	d12d      	bne.n	800e784 <_strtod_l+0x36c>
 800e728:	4992      	ldr	r1, [pc, #584]	@ (800e974 <_strtod_l+0x55c>)
 800e72a:	aa14      	add	r2, sp, #80	@ 0x50
 800e72c:	a811      	add	r0, sp, #68	@ 0x44
 800e72e:	f001 fe91 	bl	8010454 <__hexnan>
 800e732:	2805      	cmp	r0, #5
 800e734:	d126      	bne.n	800e784 <_strtod_l+0x36c>
 800e736:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e738:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e73c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e740:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e744:	e6a3      	b.n	800e48e <_strtod_l+0x76>
 800e746:	240a      	movs	r4, #10
 800e748:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e74c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e750:	e7b8      	b.n	800e6c4 <_strtod_l+0x2ac>
 800e752:	2a6e      	cmp	r2, #110	@ 0x6e
 800e754:	e7db      	b.n	800e70e <_strtod_l+0x2f6>
 800e756:	4988      	ldr	r1, [pc, #544]	@ (800e978 <_strtod_l+0x560>)
 800e758:	a811      	add	r0, sp, #68	@ 0x44
 800e75a:	f001 fe67 	bl	801042c <__match>
 800e75e:	2800      	cmp	r0, #0
 800e760:	f43f aeb1 	beq.w	800e4c6 <_strtod_l+0xae>
 800e764:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e766:	4985      	ldr	r1, [pc, #532]	@ (800e97c <_strtod_l+0x564>)
 800e768:	3b01      	subs	r3, #1
 800e76a:	a811      	add	r0, sp, #68	@ 0x44
 800e76c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e76e:	f001 fe5d 	bl	801042c <__match>
 800e772:	b910      	cbnz	r0, 800e77a <_strtod_l+0x362>
 800e774:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e776:	3301      	adds	r3, #1
 800e778:	9311      	str	r3, [sp, #68]	@ 0x44
 800e77a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e990 <_strtod_l+0x578>
 800e77e:	f04f 0a00 	mov.w	sl, #0
 800e782:	e684      	b.n	800e48e <_strtod_l+0x76>
 800e784:	487e      	ldr	r0, [pc, #504]	@ (800e980 <_strtod_l+0x568>)
 800e786:	f000 fd8f 	bl	800f2a8 <nan>
 800e78a:	ec5b ab10 	vmov	sl, fp, d0
 800e78e:	e67e      	b.n	800e48e <_strtod_l+0x76>
 800e790:	ee07 9a90 	vmov	s15, r9
 800e794:	1be2      	subs	r2, r4, r7
 800e796:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e79a:	2d00      	cmp	r5, #0
 800e79c:	bf08      	it	eq
 800e79e:	461d      	moveq	r5, r3
 800e7a0:	2b10      	cmp	r3, #16
 800e7a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	bfa8      	it	ge
 800e7a8:	2210      	movge	r2, #16
 800e7aa:	2b09      	cmp	r3, #9
 800e7ac:	ec5b ab17 	vmov	sl, fp, d7
 800e7b0:	dc15      	bgt.n	800e7de <_strtod_l+0x3c6>
 800e7b2:	1be1      	subs	r1, r4, r7
 800e7b4:	2900      	cmp	r1, #0
 800e7b6:	f43f ae6a 	beq.w	800e48e <_strtod_l+0x76>
 800e7ba:	eba4 0107 	sub.w	r1, r4, r7
 800e7be:	dd72      	ble.n	800e8a6 <_strtod_l+0x48e>
 800e7c0:	2916      	cmp	r1, #22
 800e7c2:	dc59      	bgt.n	800e878 <_strtod_l+0x460>
 800e7c4:	4b6f      	ldr	r3, [pc, #444]	@ (800e984 <_strtod_l+0x56c>)
 800e7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7cc:	ed93 7b00 	vldr	d7, [r3]
 800e7d0:	ec4b ab16 	vmov	d6, sl, fp
 800e7d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7d8:	ec5b ab17 	vmov	sl, fp, d7
 800e7dc:	e657      	b.n	800e48e <_strtod_l+0x76>
 800e7de:	4969      	ldr	r1, [pc, #420]	@ (800e984 <_strtod_l+0x56c>)
 800e7e0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e7e4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e7e8:	ee06 6a90 	vmov	s13, r6
 800e7ec:	2b0f      	cmp	r3, #15
 800e7ee:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e7f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e7f6:	ec5b ab16 	vmov	sl, fp, d6
 800e7fa:	ddda      	ble.n	800e7b2 <_strtod_l+0x39a>
 800e7fc:	1a9a      	subs	r2, r3, r2
 800e7fe:	1be1      	subs	r1, r4, r7
 800e800:	440a      	add	r2, r1
 800e802:	2a00      	cmp	r2, #0
 800e804:	f340 8094 	ble.w	800e930 <_strtod_l+0x518>
 800e808:	f012 000f 	ands.w	r0, r2, #15
 800e80c:	d00a      	beq.n	800e824 <_strtod_l+0x40c>
 800e80e:	495d      	ldr	r1, [pc, #372]	@ (800e984 <_strtod_l+0x56c>)
 800e810:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e814:	ed91 7b00 	vldr	d7, [r1]
 800e818:	ec4b ab16 	vmov	d6, sl, fp
 800e81c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e820:	ec5b ab17 	vmov	sl, fp, d7
 800e824:	f032 020f 	bics.w	r2, r2, #15
 800e828:	d073      	beq.n	800e912 <_strtod_l+0x4fa>
 800e82a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e82e:	dd47      	ble.n	800e8c0 <_strtod_l+0x4a8>
 800e830:	2400      	movs	r4, #0
 800e832:	4625      	mov	r5, r4
 800e834:	9407      	str	r4, [sp, #28]
 800e836:	4626      	mov	r6, r4
 800e838:	9a05      	ldr	r2, [sp, #20]
 800e83a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e990 <_strtod_l+0x578>
 800e83e:	2322      	movs	r3, #34	@ 0x22
 800e840:	6013      	str	r3, [r2, #0]
 800e842:	f04f 0a00 	mov.w	sl, #0
 800e846:	9b07      	ldr	r3, [sp, #28]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	f43f ae20 	beq.w	800e48e <_strtod_l+0x76>
 800e84e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e850:	9805      	ldr	r0, [sp, #20]
 800e852:	f002 fae7 	bl	8010e24 <_Bfree>
 800e856:	9805      	ldr	r0, [sp, #20]
 800e858:	4631      	mov	r1, r6
 800e85a:	f002 fae3 	bl	8010e24 <_Bfree>
 800e85e:	9805      	ldr	r0, [sp, #20]
 800e860:	4629      	mov	r1, r5
 800e862:	f002 fadf 	bl	8010e24 <_Bfree>
 800e866:	9907      	ldr	r1, [sp, #28]
 800e868:	9805      	ldr	r0, [sp, #20]
 800e86a:	f002 fadb 	bl	8010e24 <_Bfree>
 800e86e:	9805      	ldr	r0, [sp, #20]
 800e870:	4621      	mov	r1, r4
 800e872:	f002 fad7 	bl	8010e24 <_Bfree>
 800e876:	e60a      	b.n	800e48e <_strtod_l+0x76>
 800e878:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e87c:	1be0      	subs	r0, r4, r7
 800e87e:	4281      	cmp	r1, r0
 800e880:	dbbc      	blt.n	800e7fc <_strtod_l+0x3e4>
 800e882:	4a40      	ldr	r2, [pc, #256]	@ (800e984 <_strtod_l+0x56c>)
 800e884:	f1c3 030f 	rsb	r3, r3, #15
 800e888:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e88c:	ed91 7b00 	vldr	d7, [r1]
 800e890:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e892:	ec4b ab16 	vmov	d6, sl, fp
 800e896:	1acb      	subs	r3, r1, r3
 800e898:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e89c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8a0:	ed92 6b00 	vldr	d6, [r2]
 800e8a4:	e796      	b.n	800e7d4 <_strtod_l+0x3bc>
 800e8a6:	3116      	adds	r1, #22
 800e8a8:	dba8      	blt.n	800e7fc <_strtod_l+0x3e4>
 800e8aa:	4b36      	ldr	r3, [pc, #216]	@ (800e984 <_strtod_l+0x56c>)
 800e8ac:	1b3c      	subs	r4, r7, r4
 800e8ae:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e8b2:	ed94 7b00 	vldr	d7, [r4]
 800e8b6:	ec4b ab16 	vmov	d6, sl, fp
 800e8ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e8be:	e78b      	b.n	800e7d8 <_strtod_l+0x3c0>
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	ec4b ab17 	vmov	d7, sl, fp
 800e8c6:	4e30      	ldr	r6, [pc, #192]	@ (800e988 <_strtod_l+0x570>)
 800e8c8:	1112      	asrs	r2, r2, #4
 800e8ca:	4601      	mov	r1, r0
 800e8cc:	2a01      	cmp	r2, #1
 800e8ce:	dc23      	bgt.n	800e918 <_strtod_l+0x500>
 800e8d0:	b108      	cbz	r0, 800e8d6 <_strtod_l+0x4be>
 800e8d2:	ec5b ab17 	vmov	sl, fp, d7
 800e8d6:	4a2c      	ldr	r2, [pc, #176]	@ (800e988 <_strtod_l+0x570>)
 800e8d8:	482c      	ldr	r0, [pc, #176]	@ (800e98c <_strtod_l+0x574>)
 800e8da:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e8de:	ed92 7b00 	vldr	d7, [r2]
 800e8e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e8e6:	ec4b ab16 	vmov	d6, sl, fp
 800e8ea:	4a29      	ldr	r2, [pc, #164]	@ (800e990 <_strtod_l+0x578>)
 800e8ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8f0:	ee17 1a90 	vmov	r1, s15
 800e8f4:	400a      	ands	r2, r1
 800e8f6:	4282      	cmp	r2, r0
 800e8f8:	ec5b ab17 	vmov	sl, fp, d7
 800e8fc:	d898      	bhi.n	800e830 <_strtod_l+0x418>
 800e8fe:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e902:	4282      	cmp	r2, r0
 800e904:	bf86      	itte	hi
 800e906:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e994 <_strtod_l+0x57c>
 800e90a:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800e90e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e912:	2200      	movs	r2, #0
 800e914:	9206      	str	r2, [sp, #24]
 800e916:	e076      	b.n	800ea06 <_strtod_l+0x5ee>
 800e918:	f012 0f01 	tst.w	r2, #1
 800e91c:	d004      	beq.n	800e928 <_strtod_l+0x510>
 800e91e:	ed96 6b00 	vldr	d6, [r6]
 800e922:	2001      	movs	r0, #1
 800e924:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e928:	3101      	adds	r1, #1
 800e92a:	1052      	asrs	r2, r2, #1
 800e92c:	3608      	adds	r6, #8
 800e92e:	e7cd      	b.n	800e8cc <_strtod_l+0x4b4>
 800e930:	d0ef      	beq.n	800e912 <_strtod_l+0x4fa>
 800e932:	4252      	negs	r2, r2
 800e934:	f012 000f 	ands.w	r0, r2, #15
 800e938:	d00a      	beq.n	800e950 <_strtod_l+0x538>
 800e93a:	4912      	ldr	r1, [pc, #72]	@ (800e984 <_strtod_l+0x56c>)
 800e93c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e940:	ed91 7b00 	vldr	d7, [r1]
 800e944:	ec4b ab16 	vmov	d6, sl, fp
 800e948:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e94c:	ec5b ab17 	vmov	sl, fp, d7
 800e950:	1112      	asrs	r2, r2, #4
 800e952:	d0de      	beq.n	800e912 <_strtod_l+0x4fa>
 800e954:	2a1f      	cmp	r2, #31
 800e956:	dd1f      	ble.n	800e998 <_strtod_l+0x580>
 800e958:	2400      	movs	r4, #0
 800e95a:	4625      	mov	r5, r4
 800e95c:	9407      	str	r4, [sp, #28]
 800e95e:	4626      	mov	r6, r4
 800e960:	9a05      	ldr	r2, [sp, #20]
 800e962:	2322      	movs	r3, #34	@ 0x22
 800e964:	f04f 0a00 	mov.w	sl, #0
 800e968:	f04f 0b00 	mov.w	fp, #0
 800e96c:	6013      	str	r3, [r2, #0]
 800e96e:	e76a      	b.n	800e846 <_strtod_l+0x42e>
 800e970:	08011ee1 	.word	0x08011ee1
 800e974:	08011f10 	.word	0x08011f10
 800e978:	08011ed9 	.word	0x08011ed9
 800e97c:	0801206c 	.word	0x0801206c
 800e980:	080122fb 	.word	0x080122fb
 800e984:	080121f8 	.word	0x080121f8
 800e988:	080121d0 	.word	0x080121d0
 800e98c:	7ca00000 	.word	0x7ca00000
 800e990:	7ff00000 	.word	0x7ff00000
 800e994:	7fefffff 	.word	0x7fefffff
 800e998:	f012 0110 	ands.w	r1, r2, #16
 800e99c:	bf18      	it	ne
 800e99e:	216a      	movne	r1, #106	@ 0x6a
 800e9a0:	9106      	str	r1, [sp, #24]
 800e9a2:	ec4b ab17 	vmov	d7, sl, fp
 800e9a6:	49b0      	ldr	r1, [pc, #704]	@ (800ec68 <_strtod_l+0x850>)
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	07d6      	lsls	r6, r2, #31
 800e9ac:	d504      	bpl.n	800e9b8 <_strtod_l+0x5a0>
 800e9ae:	ed91 6b00 	vldr	d6, [r1]
 800e9b2:	2001      	movs	r0, #1
 800e9b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9b8:	1052      	asrs	r2, r2, #1
 800e9ba:	f101 0108 	add.w	r1, r1, #8
 800e9be:	d1f4      	bne.n	800e9aa <_strtod_l+0x592>
 800e9c0:	b108      	cbz	r0, 800e9c6 <_strtod_l+0x5ae>
 800e9c2:	ec5b ab17 	vmov	sl, fp, d7
 800e9c6:	9a06      	ldr	r2, [sp, #24]
 800e9c8:	b1b2      	cbz	r2, 800e9f8 <_strtod_l+0x5e0>
 800e9ca:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e9ce:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e9d2:	2a00      	cmp	r2, #0
 800e9d4:	4658      	mov	r0, fp
 800e9d6:	dd0f      	ble.n	800e9f8 <_strtod_l+0x5e0>
 800e9d8:	2a1f      	cmp	r2, #31
 800e9da:	dd55      	ble.n	800ea88 <_strtod_l+0x670>
 800e9dc:	2a34      	cmp	r2, #52	@ 0x34
 800e9de:	bfde      	ittt	le
 800e9e0:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800e9e4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e9e8:	408a      	lslle	r2, r1
 800e9ea:	f04f 0a00 	mov.w	sl, #0
 800e9ee:	bfcc      	ite	gt
 800e9f0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e9f4:	ea02 0b00 	andle.w	fp, r2, r0
 800e9f8:	ec4b ab17 	vmov	d7, sl, fp
 800e9fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea04:	d0a8      	beq.n	800e958 <_strtod_l+0x540>
 800ea06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ea08:	9805      	ldr	r0, [sp, #20]
 800ea0a:	f8cd 9000 	str.w	r9, [sp]
 800ea0e:	462a      	mov	r2, r5
 800ea10:	f002 fa70 	bl	8010ef4 <__s2b>
 800ea14:	9007      	str	r0, [sp, #28]
 800ea16:	2800      	cmp	r0, #0
 800ea18:	f43f af0a 	beq.w	800e830 <_strtod_l+0x418>
 800ea1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea1e:	1b3f      	subs	r7, r7, r4
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	bfb4      	ite	lt
 800ea24:	463b      	movlt	r3, r7
 800ea26:	2300      	movge	r3, #0
 800ea28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea2c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800ec58 <_strtod_l+0x840>
 800ea30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ea34:	2400      	movs	r4, #0
 800ea36:	930d      	str	r3, [sp, #52]	@ 0x34
 800ea38:	4625      	mov	r5, r4
 800ea3a:	9b07      	ldr	r3, [sp, #28]
 800ea3c:	9805      	ldr	r0, [sp, #20]
 800ea3e:	6859      	ldr	r1, [r3, #4]
 800ea40:	f002 f9b0 	bl	8010da4 <_Balloc>
 800ea44:	4606      	mov	r6, r0
 800ea46:	2800      	cmp	r0, #0
 800ea48:	f43f aef6 	beq.w	800e838 <_strtod_l+0x420>
 800ea4c:	9b07      	ldr	r3, [sp, #28]
 800ea4e:	691a      	ldr	r2, [r3, #16]
 800ea50:	ec4b ab19 	vmov	d9, sl, fp
 800ea54:	3202      	adds	r2, #2
 800ea56:	f103 010c 	add.w	r1, r3, #12
 800ea5a:	0092      	lsls	r2, r2, #2
 800ea5c:	300c      	adds	r0, #12
 800ea5e:	f000 fc12 	bl	800f286 <memcpy>
 800ea62:	eeb0 0b49 	vmov.f64	d0, d9
 800ea66:	9805      	ldr	r0, [sp, #20]
 800ea68:	aa14      	add	r2, sp, #80	@ 0x50
 800ea6a:	a913      	add	r1, sp, #76	@ 0x4c
 800ea6c:	f002 fd7e 	bl	801156c <__d2b>
 800ea70:	9012      	str	r0, [sp, #72]	@ 0x48
 800ea72:	2800      	cmp	r0, #0
 800ea74:	f43f aee0 	beq.w	800e838 <_strtod_l+0x420>
 800ea78:	9805      	ldr	r0, [sp, #20]
 800ea7a:	2101      	movs	r1, #1
 800ea7c:	f002 fad0 	bl	8011020 <__i2b>
 800ea80:	4605      	mov	r5, r0
 800ea82:	b940      	cbnz	r0, 800ea96 <_strtod_l+0x67e>
 800ea84:	2500      	movs	r5, #0
 800ea86:	e6d7      	b.n	800e838 <_strtod_l+0x420>
 800ea88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ea8c:	fa01 f202 	lsl.w	r2, r1, r2
 800ea90:	ea02 0a0a 	and.w	sl, r2, sl
 800ea94:	e7b0      	b.n	800e9f8 <_strtod_l+0x5e0>
 800ea96:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ea98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ea9a:	2f00      	cmp	r7, #0
 800ea9c:	bfab      	itete	ge
 800ea9e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800eaa0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800eaa2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800eaa6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800eaaa:	bfac      	ite	ge
 800eaac:	eb07 0903 	addge.w	r9, r7, r3
 800eab0:	eba3 0807 	sublt.w	r8, r3, r7
 800eab4:	9b06      	ldr	r3, [sp, #24]
 800eab6:	1aff      	subs	r7, r7, r3
 800eab8:	4417      	add	r7, r2
 800eaba:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800eabe:	4a6b      	ldr	r2, [pc, #428]	@ (800ec6c <_strtod_l+0x854>)
 800eac0:	3f01      	subs	r7, #1
 800eac2:	4297      	cmp	r7, r2
 800eac4:	da51      	bge.n	800eb6a <_strtod_l+0x752>
 800eac6:	1bd1      	subs	r1, r2, r7
 800eac8:	291f      	cmp	r1, #31
 800eaca:	eba3 0301 	sub.w	r3, r3, r1
 800eace:	f04f 0201 	mov.w	r2, #1
 800ead2:	dc3e      	bgt.n	800eb52 <_strtod_l+0x73a>
 800ead4:	408a      	lsls	r2, r1
 800ead6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ead8:	2200      	movs	r2, #0
 800eada:	920b      	str	r2, [sp, #44]	@ 0x2c
 800eadc:	eb09 0703 	add.w	r7, r9, r3
 800eae0:	4498      	add	r8, r3
 800eae2:	9b06      	ldr	r3, [sp, #24]
 800eae4:	45b9      	cmp	r9, r7
 800eae6:	4498      	add	r8, r3
 800eae8:	464b      	mov	r3, r9
 800eaea:	bfa8      	it	ge
 800eaec:	463b      	movge	r3, r7
 800eaee:	4543      	cmp	r3, r8
 800eaf0:	bfa8      	it	ge
 800eaf2:	4643      	movge	r3, r8
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	bfc2      	ittt	gt
 800eaf8:	1aff      	subgt	r7, r7, r3
 800eafa:	eba8 0803 	subgt.w	r8, r8, r3
 800eafe:	eba9 0903 	subgt.w	r9, r9, r3
 800eb02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	dd16      	ble.n	800eb36 <_strtod_l+0x71e>
 800eb08:	4629      	mov	r1, r5
 800eb0a:	9805      	ldr	r0, [sp, #20]
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	f002 fb47 	bl	80111a0 <__pow5mult>
 800eb12:	4605      	mov	r5, r0
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d0b5      	beq.n	800ea84 <_strtod_l+0x66c>
 800eb18:	4601      	mov	r1, r0
 800eb1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800eb1c:	9805      	ldr	r0, [sp, #20]
 800eb1e:	f002 fa95 	bl	801104c <__multiply>
 800eb22:	900f      	str	r0, [sp, #60]	@ 0x3c
 800eb24:	2800      	cmp	r0, #0
 800eb26:	f43f ae87 	beq.w	800e838 <_strtod_l+0x420>
 800eb2a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eb2c:	9805      	ldr	r0, [sp, #20]
 800eb2e:	f002 f979 	bl	8010e24 <_Bfree>
 800eb32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb34:	9312      	str	r3, [sp, #72]	@ 0x48
 800eb36:	2f00      	cmp	r7, #0
 800eb38:	dc1b      	bgt.n	800eb72 <_strtod_l+0x75a>
 800eb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	dd21      	ble.n	800eb84 <_strtod_l+0x76c>
 800eb40:	4631      	mov	r1, r6
 800eb42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb44:	9805      	ldr	r0, [sp, #20]
 800eb46:	f002 fb2b 	bl	80111a0 <__pow5mult>
 800eb4a:	4606      	mov	r6, r0
 800eb4c:	b9d0      	cbnz	r0, 800eb84 <_strtod_l+0x76c>
 800eb4e:	2600      	movs	r6, #0
 800eb50:	e672      	b.n	800e838 <_strtod_l+0x420>
 800eb52:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800eb56:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800eb5a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800eb5e:	37e2      	adds	r7, #226	@ 0xe2
 800eb60:	fa02 f107 	lsl.w	r1, r2, r7
 800eb64:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eb66:	920c      	str	r2, [sp, #48]	@ 0x30
 800eb68:	e7b8      	b.n	800eadc <_strtod_l+0x6c4>
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800eb6e:	2201      	movs	r2, #1
 800eb70:	e7f9      	b.n	800eb66 <_strtod_l+0x74e>
 800eb72:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eb74:	9805      	ldr	r0, [sp, #20]
 800eb76:	463a      	mov	r2, r7
 800eb78:	f002 fb6c 	bl	8011254 <__lshift>
 800eb7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	d1db      	bne.n	800eb3a <_strtod_l+0x722>
 800eb82:	e659      	b.n	800e838 <_strtod_l+0x420>
 800eb84:	f1b8 0f00 	cmp.w	r8, #0
 800eb88:	dd07      	ble.n	800eb9a <_strtod_l+0x782>
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	9805      	ldr	r0, [sp, #20]
 800eb8e:	4642      	mov	r2, r8
 800eb90:	f002 fb60 	bl	8011254 <__lshift>
 800eb94:	4606      	mov	r6, r0
 800eb96:	2800      	cmp	r0, #0
 800eb98:	d0d9      	beq.n	800eb4e <_strtod_l+0x736>
 800eb9a:	f1b9 0f00 	cmp.w	r9, #0
 800eb9e:	dd08      	ble.n	800ebb2 <_strtod_l+0x79a>
 800eba0:	4629      	mov	r1, r5
 800eba2:	9805      	ldr	r0, [sp, #20]
 800eba4:	464a      	mov	r2, r9
 800eba6:	f002 fb55 	bl	8011254 <__lshift>
 800ebaa:	4605      	mov	r5, r0
 800ebac:	2800      	cmp	r0, #0
 800ebae:	f43f ae43 	beq.w	800e838 <_strtod_l+0x420>
 800ebb2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ebb4:	9805      	ldr	r0, [sp, #20]
 800ebb6:	4632      	mov	r2, r6
 800ebb8:	f002 fbd4 	bl	8011364 <__mdiff>
 800ebbc:	4604      	mov	r4, r0
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	f43f ae3a 	beq.w	800e838 <_strtod_l+0x420>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ebca:	60c3      	str	r3, [r0, #12]
 800ebcc:	4629      	mov	r1, r5
 800ebce:	f002 fbad 	bl	801132c <__mcmp>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	da4e      	bge.n	800ec74 <_strtod_l+0x85c>
 800ebd6:	ea58 080a 	orrs.w	r8, r8, sl
 800ebda:	d174      	bne.n	800ecc6 <_strtod_l+0x8ae>
 800ebdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d170      	bne.n	800ecc6 <_strtod_l+0x8ae>
 800ebe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ebe8:	0d1b      	lsrs	r3, r3, #20
 800ebea:	051b      	lsls	r3, r3, #20
 800ebec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ebf0:	d969      	bls.n	800ecc6 <_strtod_l+0x8ae>
 800ebf2:	6963      	ldr	r3, [r4, #20]
 800ebf4:	b913      	cbnz	r3, 800ebfc <_strtod_l+0x7e4>
 800ebf6:	6923      	ldr	r3, [r4, #16]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	dd64      	ble.n	800ecc6 <_strtod_l+0x8ae>
 800ebfc:	4621      	mov	r1, r4
 800ebfe:	2201      	movs	r2, #1
 800ec00:	9805      	ldr	r0, [sp, #20]
 800ec02:	f002 fb27 	bl	8011254 <__lshift>
 800ec06:	4629      	mov	r1, r5
 800ec08:	4604      	mov	r4, r0
 800ec0a:	f002 fb8f 	bl	801132c <__mcmp>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	dd59      	ble.n	800ecc6 <_strtod_l+0x8ae>
 800ec12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec16:	9a06      	ldr	r2, [sp, #24]
 800ec18:	0d1b      	lsrs	r3, r3, #20
 800ec1a:	051b      	lsls	r3, r3, #20
 800ec1c:	2a00      	cmp	r2, #0
 800ec1e:	d070      	beq.n	800ed02 <_strtod_l+0x8ea>
 800ec20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ec24:	d86d      	bhi.n	800ed02 <_strtod_l+0x8ea>
 800ec26:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ec2a:	f67f ae99 	bls.w	800e960 <_strtod_l+0x548>
 800ec2e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800ec60 <_strtod_l+0x848>
 800ec32:	ec4b ab16 	vmov	d6, sl, fp
 800ec36:	4b0e      	ldr	r3, [pc, #56]	@ (800ec70 <_strtod_l+0x858>)
 800ec38:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ec3c:	ee17 2a90 	vmov	r2, s15
 800ec40:	4013      	ands	r3, r2
 800ec42:	ec5b ab17 	vmov	sl, fp, d7
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f47f ae01 	bne.w	800e84e <_strtod_l+0x436>
 800ec4c:	9a05      	ldr	r2, [sp, #20]
 800ec4e:	2322      	movs	r3, #34	@ 0x22
 800ec50:	6013      	str	r3, [r2, #0]
 800ec52:	e5fc      	b.n	800e84e <_strtod_l+0x436>
 800ec54:	f3af 8000 	nop.w
 800ec58:	ffc00000 	.word	0xffc00000
 800ec5c:	41dfffff 	.word	0x41dfffff
 800ec60:	00000000 	.word	0x00000000
 800ec64:	39500000 	.word	0x39500000
 800ec68:	08011f38 	.word	0x08011f38
 800ec6c:	fffffc02 	.word	0xfffffc02
 800ec70:	7ff00000 	.word	0x7ff00000
 800ec74:	46d9      	mov	r9, fp
 800ec76:	d15d      	bne.n	800ed34 <_strtod_l+0x91c>
 800ec78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec7c:	f1b8 0f00 	cmp.w	r8, #0
 800ec80:	d02a      	beq.n	800ecd8 <_strtod_l+0x8c0>
 800ec82:	4aab      	ldr	r2, [pc, #684]	@ (800ef30 <_strtod_l+0xb18>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d12a      	bne.n	800ecde <_strtod_l+0x8c6>
 800ec88:	9b06      	ldr	r3, [sp, #24]
 800ec8a:	4652      	mov	r2, sl
 800ec8c:	b1fb      	cbz	r3, 800ecce <_strtod_l+0x8b6>
 800ec8e:	4ba9      	ldr	r3, [pc, #676]	@ (800ef34 <_strtod_l+0xb1c>)
 800ec90:	ea0b 0303 	and.w	r3, fp, r3
 800ec94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ec98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ec9c:	d81a      	bhi.n	800ecd4 <_strtod_l+0x8bc>
 800ec9e:	0d1b      	lsrs	r3, r3, #20
 800eca0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eca4:	fa01 f303 	lsl.w	r3, r1, r3
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d118      	bne.n	800ecde <_strtod_l+0x8c6>
 800ecac:	4ba2      	ldr	r3, [pc, #648]	@ (800ef38 <_strtod_l+0xb20>)
 800ecae:	4599      	cmp	r9, r3
 800ecb0:	d102      	bne.n	800ecb8 <_strtod_l+0x8a0>
 800ecb2:	3201      	adds	r2, #1
 800ecb4:	f43f adc0 	beq.w	800e838 <_strtod_l+0x420>
 800ecb8:	4b9e      	ldr	r3, [pc, #632]	@ (800ef34 <_strtod_l+0xb1c>)
 800ecba:	ea09 0303 	and.w	r3, r9, r3
 800ecbe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ecc2:	f04f 0a00 	mov.w	sl, #0
 800ecc6:	9b06      	ldr	r3, [sp, #24]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1b0      	bne.n	800ec2e <_strtod_l+0x816>
 800eccc:	e5bf      	b.n	800e84e <_strtod_l+0x436>
 800ecce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ecd2:	e7e9      	b.n	800eca8 <_strtod_l+0x890>
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	e7e7      	b.n	800eca8 <_strtod_l+0x890>
 800ecd8:	ea53 030a 	orrs.w	r3, r3, sl
 800ecdc:	d099      	beq.n	800ec12 <_strtod_l+0x7fa>
 800ecde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ece0:	b1c3      	cbz	r3, 800ed14 <_strtod_l+0x8fc>
 800ece2:	ea13 0f09 	tst.w	r3, r9
 800ece6:	d0ee      	beq.n	800ecc6 <_strtod_l+0x8ae>
 800ece8:	9a06      	ldr	r2, [sp, #24]
 800ecea:	4650      	mov	r0, sl
 800ecec:	4659      	mov	r1, fp
 800ecee:	f1b8 0f00 	cmp.w	r8, #0
 800ecf2:	d013      	beq.n	800ed1c <_strtod_l+0x904>
 800ecf4:	f7ff fb74 	bl	800e3e0 <sulp>
 800ecf8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ecfc:	ec5b ab17 	vmov	sl, fp, d7
 800ed00:	e7e1      	b.n	800ecc6 <_strtod_l+0x8ae>
 800ed02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ed06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed0e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ed12:	e7d8      	b.n	800ecc6 <_strtod_l+0x8ae>
 800ed14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed16:	ea13 0f0a 	tst.w	r3, sl
 800ed1a:	e7e4      	b.n	800ece6 <_strtod_l+0x8ce>
 800ed1c:	f7ff fb60 	bl	800e3e0 <sulp>
 800ed20:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ed24:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ed28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2c:	ec5b ab10 	vmov	sl, fp, d0
 800ed30:	d1c9      	bne.n	800ecc6 <_strtod_l+0x8ae>
 800ed32:	e615      	b.n	800e960 <_strtod_l+0x548>
 800ed34:	4629      	mov	r1, r5
 800ed36:	4620      	mov	r0, r4
 800ed38:	f002 fc70 	bl	801161c <__ratio>
 800ed3c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ed40:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ed44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed48:	d85d      	bhi.n	800ee06 <_strtod_l+0x9ee>
 800ed4a:	f1b8 0f00 	cmp.w	r8, #0
 800ed4e:	d164      	bne.n	800ee1a <_strtod_l+0xa02>
 800ed50:	f1ba 0f00 	cmp.w	sl, #0
 800ed54:	d14b      	bne.n	800edee <_strtod_l+0x9d6>
 800ed56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed5a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d160      	bne.n	800ee24 <_strtod_l+0xa0c>
 800ed62:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ed66:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ed6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6e:	d401      	bmi.n	800ed74 <_strtod_l+0x95c>
 800ed70:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ed74:	eeb1 ab48 	vneg.f64	d10, d8
 800ed78:	486e      	ldr	r0, [pc, #440]	@ (800ef34 <_strtod_l+0xb1c>)
 800ed7a:	4970      	ldr	r1, [pc, #448]	@ (800ef3c <_strtod_l+0xb24>)
 800ed7c:	ea09 0700 	and.w	r7, r9, r0
 800ed80:	428f      	cmp	r7, r1
 800ed82:	ec53 2b1a 	vmov	r2, r3, d10
 800ed86:	d17d      	bne.n	800ee84 <_strtod_l+0xa6c>
 800ed88:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ed8c:	ec4b ab1c 	vmov	d12, sl, fp
 800ed90:	eeb0 0b4c 	vmov.f64	d0, d12
 800ed94:	f002 fb7a 	bl	801148c <__ulp>
 800ed98:	4866      	ldr	r0, [pc, #408]	@ (800ef34 <_strtod_l+0xb1c>)
 800ed9a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ed9e:	ee1c 3a90 	vmov	r3, s25
 800eda2:	4a67      	ldr	r2, [pc, #412]	@ (800ef40 <_strtod_l+0xb28>)
 800eda4:	ea03 0100 	and.w	r1, r3, r0
 800eda8:	4291      	cmp	r1, r2
 800edaa:	ec5b ab1c 	vmov	sl, fp, d12
 800edae:	d93c      	bls.n	800ee2a <_strtod_l+0xa12>
 800edb0:	ee19 2a90 	vmov	r2, s19
 800edb4:	4b60      	ldr	r3, [pc, #384]	@ (800ef38 <_strtod_l+0xb20>)
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d104      	bne.n	800edc4 <_strtod_l+0x9ac>
 800edba:	ee19 3a10 	vmov	r3, s18
 800edbe:	3301      	adds	r3, #1
 800edc0:	f43f ad3a 	beq.w	800e838 <_strtod_l+0x420>
 800edc4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ef38 <_strtod_l+0xb20>
 800edc8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800edcc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800edce:	9805      	ldr	r0, [sp, #20]
 800edd0:	f002 f828 	bl	8010e24 <_Bfree>
 800edd4:	9805      	ldr	r0, [sp, #20]
 800edd6:	4631      	mov	r1, r6
 800edd8:	f002 f824 	bl	8010e24 <_Bfree>
 800eddc:	9805      	ldr	r0, [sp, #20]
 800edde:	4629      	mov	r1, r5
 800ede0:	f002 f820 	bl	8010e24 <_Bfree>
 800ede4:	9805      	ldr	r0, [sp, #20]
 800ede6:	4621      	mov	r1, r4
 800ede8:	f002 f81c 	bl	8010e24 <_Bfree>
 800edec:	e625      	b.n	800ea3a <_strtod_l+0x622>
 800edee:	f1ba 0f01 	cmp.w	sl, #1
 800edf2:	d103      	bne.n	800edfc <_strtod_l+0x9e4>
 800edf4:	f1bb 0f00 	cmp.w	fp, #0
 800edf8:	f43f adb2 	beq.w	800e960 <_strtod_l+0x548>
 800edfc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ee00:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ee04:	e7b8      	b.n	800ed78 <_strtod_l+0x960>
 800ee06:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ee0a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ee0e:	f1b8 0f00 	cmp.w	r8, #0
 800ee12:	d0af      	beq.n	800ed74 <_strtod_l+0x95c>
 800ee14:	eeb0 ab48 	vmov.f64	d10, d8
 800ee18:	e7ae      	b.n	800ed78 <_strtod_l+0x960>
 800ee1a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ee1e:	eeb0 8b4a 	vmov.f64	d8, d10
 800ee22:	e7a9      	b.n	800ed78 <_strtod_l+0x960>
 800ee24:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ee28:	e7a6      	b.n	800ed78 <_strtod_l+0x960>
 800ee2a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ee2e:	9b06      	ldr	r3, [sp, #24]
 800ee30:	46d9      	mov	r9, fp
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1ca      	bne.n	800edcc <_strtod_l+0x9b4>
 800ee36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ee3a:	0d1b      	lsrs	r3, r3, #20
 800ee3c:	051b      	lsls	r3, r3, #20
 800ee3e:	429f      	cmp	r7, r3
 800ee40:	d1c4      	bne.n	800edcc <_strtod_l+0x9b4>
 800ee42:	ec51 0b18 	vmov	r0, r1, d8
 800ee46:	f7f1 fc8f 	bl	8000768 <__aeabi_d2lz>
 800ee4a:	f7f1 fc47 	bl	80006dc <__aeabi_l2d>
 800ee4e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ee52:	ec41 0b17 	vmov	d7, r0, r1
 800ee56:	ea49 090a 	orr.w	r9, r9, sl
 800ee5a:	ea59 0908 	orrs.w	r9, r9, r8
 800ee5e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ee62:	d03c      	beq.n	800eede <_strtod_l+0xac6>
 800ee64:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ef18 <_strtod_l+0xb00>
 800ee68:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ee6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee70:	f53f aced 	bmi.w	800e84e <_strtod_l+0x436>
 800ee74:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ef20 <_strtod_l+0xb08>
 800ee78:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ee7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee80:	dda4      	ble.n	800edcc <_strtod_l+0x9b4>
 800ee82:	e4e4      	b.n	800e84e <_strtod_l+0x436>
 800ee84:	9906      	ldr	r1, [sp, #24]
 800ee86:	b1e1      	cbz	r1, 800eec2 <_strtod_l+0xaaa>
 800ee88:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ee8c:	d819      	bhi.n	800eec2 <_strtod_l+0xaaa>
 800ee8e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee96:	d811      	bhi.n	800eebc <_strtod_l+0xaa4>
 800ee98:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ee9c:	ee18 3a10 	vmov	r3, s16
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	bf38      	it	cc
 800eea4:	2301      	movcc	r3, #1
 800eea6:	ee08 3a10 	vmov	s16, r3
 800eeaa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800eeae:	f1b8 0f00 	cmp.w	r8, #0
 800eeb2:	d111      	bne.n	800eed8 <_strtod_l+0xac0>
 800eeb4:	eeb1 7b48 	vneg.f64	d7, d8
 800eeb8:	ec53 2b17 	vmov	r2, r3, d7
 800eebc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800eec0:	1bcb      	subs	r3, r1, r7
 800eec2:	eeb0 0b49 	vmov.f64	d0, d9
 800eec6:	ec43 2b1a 	vmov	d10, r2, r3
 800eeca:	f002 fadf 	bl	801148c <__ulp>
 800eece:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800eed2:	ec5b ab19 	vmov	sl, fp, d9
 800eed6:	e7aa      	b.n	800ee2e <_strtod_l+0xa16>
 800eed8:	eeb0 7b48 	vmov.f64	d7, d8
 800eedc:	e7ec      	b.n	800eeb8 <_strtod_l+0xaa0>
 800eede:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800ef28 <_strtod_l+0xb10>
 800eee2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeea:	f57f af6f 	bpl.w	800edcc <_strtod_l+0x9b4>
 800eeee:	e4ae      	b.n	800e84e <_strtod_l+0x436>
 800eef0:	2300      	movs	r3, #0
 800eef2:	9308      	str	r3, [sp, #32]
 800eef4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eef6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eef8:	6013      	str	r3, [r2, #0]
 800eefa:	f7ff bacc 	b.w	800e496 <_strtod_l+0x7e>
 800eefe:	2a65      	cmp	r2, #101	@ 0x65
 800ef00:	f43f abbc 	beq.w	800e67c <_strtod_l+0x264>
 800ef04:	2a45      	cmp	r2, #69	@ 0x45
 800ef06:	f43f abb9 	beq.w	800e67c <_strtod_l+0x264>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	9306      	str	r3, [sp, #24]
 800ef0e:	f7ff bbf0 	b.w	800e6f2 <_strtod_l+0x2da>
 800ef12:	bf00      	nop
 800ef14:	f3af 8000 	nop.w
 800ef18:	94a03595 	.word	0x94a03595
 800ef1c:	3fdfffff 	.word	0x3fdfffff
 800ef20:	35afe535 	.word	0x35afe535
 800ef24:	3fe00000 	.word	0x3fe00000
 800ef28:	94a03595 	.word	0x94a03595
 800ef2c:	3fcfffff 	.word	0x3fcfffff
 800ef30:	000fffff 	.word	0x000fffff
 800ef34:	7ff00000 	.word	0x7ff00000
 800ef38:	7fefffff 	.word	0x7fefffff
 800ef3c:	7fe00000 	.word	0x7fe00000
 800ef40:	7c9fffff 	.word	0x7c9fffff

0800ef44 <_strtod_r>:
 800ef44:	4b01      	ldr	r3, [pc, #4]	@ (800ef4c <_strtod_r+0x8>)
 800ef46:	f7ff ba67 	b.w	800e418 <_strtod_l>
 800ef4a:	bf00      	nop
 800ef4c:	24000028 	.word	0x24000028

0800ef50 <_strtol_l.constprop.0>:
 800ef50:	2b24      	cmp	r3, #36	@ 0x24
 800ef52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef56:	4686      	mov	lr, r0
 800ef58:	4690      	mov	r8, r2
 800ef5a:	d801      	bhi.n	800ef60 <_strtol_l.constprop.0+0x10>
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d106      	bne.n	800ef6e <_strtol_l.constprop.0+0x1e>
 800ef60:	f000 f964 	bl	800f22c <__errno>
 800ef64:	2316      	movs	r3, #22
 800ef66:	6003      	str	r3, [r0, #0]
 800ef68:	2000      	movs	r0, #0
 800ef6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef6e:	4834      	ldr	r0, [pc, #208]	@ (800f040 <_strtol_l.constprop.0+0xf0>)
 800ef70:	460d      	mov	r5, r1
 800ef72:	462a      	mov	r2, r5
 800ef74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef78:	5d06      	ldrb	r6, [r0, r4]
 800ef7a:	f016 0608 	ands.w	r6, r6, #8
 800ef7e:	d1f8      	bne.n	800ef72 <_strtol_l.constprop.0+0x22>
 800ef80:	2c2d      	cmp	r4, #45	@ 0x2d
 800ef82:	d12d      	bne.n	800efe0 <_strtol_l.constprop.0+0x90>
 800ef84:	782c      	ldrb	r4, [r5, #0]
 800ef86:	2601      	movs	r6, #1
 800ef88:	1c95      	adds	r5, r2, #2
 800ef8a:	f033 0210 	bics.w	r2, r3, #16
 800ef8e:	d109      	bne.n	800efa4 <_strtol_l.constprop.0+0x54>
 800ef90:	2c30      	cmp	r4, #48	@ 0x30
 800ef92:	d12a      	bne.n	800efea <_strtol_l.constprop.0+0x9a>
 800ef94:	782a      	ldrb	r2, [r5, #0]
 800ef96:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef9a:	2a58      	cmp	r2, #88	@ 0x58
 800ef9c:	d125      	bne.n	800efea <_strtol_l.constprop.0+0x9a>
 800ef9e:	786c      	ldrb	r4, [r5, #1]
 800efa0:	2310      	movs	r3, #16
 800efa2:	3502      	adds	r5, #2
 800efa4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800efa8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800efac:	2200      	movs	r2, #0
 800efae:	fbbc f9f3 	udiv	r9, ip, r3
 800efb2:	4610      	mov	r0, r2
 800efb4:	fb03 ca19 	mls	sl, r3, r9, ip
 800efb8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800efbc:	2f09      	cmp	r7, #9
 800efbe:	d81b      	bhi.n	800eff8 <_strtol_l.constprop.0+0xa8>
 800efc0:	463c      	mov	r4, r7
 800efc2:	42a3      	cmp	r3, r4
 800efc4:	dd27      	ble.n	800f016 <_strtol_l.constprop.0+0xc6>
 800efc6:	1c57      	adds	r7, r2, #1
 800efc8:	d007      	beq.n	800efda <_strtol_l.constprop.0+0x8a>
 800efca:	4581      	cmp	r9, r0
 800efcc:	d320      	bcc.n	800f010 <_strtol_l.constprop.0+0xc0>
 800efce:	d101      	bne.n	800efd4 <_strtol_l.constprop.0+0x84>
 800efd0:	45a2      	cmp	sl, r4
 800efd2:	db1d      	blt.n	800f010 <_strtol_l.constprop.0+0xc0>
 800efd4:	fb00 4003 	mla	r0, r0, r3, r4
 800efd8:	2201      	movs	r2, #1
 800efda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efde:	e7eb      	b.n	800efb8 <_strtol_l.constprop.0+0x68>
 800efe0:	2c2b      	cmp	r4, #43	@ 0x2b
 800efe2:	bf04      	itt	eq
 800efe4:	782c      	ldrbeq	r4, [r5, #0]
 800efe6:	1c95      	addeq	r5, r2, #2
 800efe8:	e7cf      	b.n	800ef8a <_strtol_l.constprop.0+0x3a>
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1da      	bne.n	800efa4 <_strtol_l.constprop.0+0x54>
 800efee:	2c30      	cmp	r4, #48	@ 0x30
 800eff0:	bf0c      	ite	eq
 800eff2:	2308      	moveq	r3, #8
 800eff4:	230a      	movne	r3, #10
 800eff6:	e7d5      	b.n	800efa4 <_strtol_l.constprop.0+0x54>
 800eff8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800effc:	2f19      	cmp	r7, #25
 800effe:	d801      	bhi.n	800f004 <_strtol_l.constprop.0+0xb4>
 800f000:	3c37      	subs	r4, #55	@ 0x37
 800f002:	e7de      	b.n	800efc2 <_strtol_l.constprop.0+0x72>
 800f004:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f008:	2f19      	cmp	r7, #25
 800f00a:	d804      	bhi.n	800f016 <_strtol_l.constprop.0+0xc6>
 800f00c:	3c57      	subs	r4, #87	@ 0x57
 800f00e:	e7d8      	b.n	800efc2 <_strtol_l.constprop.0+0x72>
 800f010:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f014:	e7e1      	b.n	800efda <_strtol_l.constprop.0+0x8a>
 800f016:	1c53      	adds	r3, r2, #1
 800f018:	d108      	bne.n	800f02c <_strtol_l.constprop.0+0xdc>
 800f01a:	2322      	movs	r3, #34	@ 0x22
 800f01c:	f8ce 3000 	str.w	r3, [lr]
 800f020:	4660      	mov	r0, ip
 800f022:	f1b8 0f00 	cmp.w	r8, #0
 800f026:	d0a0      	beq.n	800ef6a <_strtol_l.constprop.0+0x1a>
 800f028:	1e69      	subs	r1, r5, #1
 800f02a:	e006      	b.n	800f03a <_strtol_l.constprop.0+0xea>
 800f02c:	b106      	cbz	r6, 800f030 <_strtol_l.constprop.0+0xe0>
 800f02e:	4240      	negs	r0, r0
 800f030:	f1b8 0f00 	cmp.w	r8, #0
 800f034:	d099      	beq.n	800ef6a <_strtol_l.constprop.0+0x1a>
 800f036:	2a00      	cmp	r2, #0
 800f038:	d1f6      	bne.n	800f028 <_strtol_l.constprop.0+0xd8>
 800f03a:	f8c8 1000 	str.w	r1, [r8]
 800f03e:	e794      	b.n	800ef6a <_strtol_l.constprop.0+0x1a>
 800f040:	08011f69 	.word	0x08011f69

0800f044 <_strtol_r>:
 800f044:	f7ff bf84 	b.w	800ef50 <_strtol_l.constprop.0>

0800f048 <_fwalk_sglue>:
 800f048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f04c:	4607      	mov	r7, r0
 800f04e:	4688      	mov	r8, r1
 800f050:	4614      	mov	r4, r2
 800f052:	2600      	movs	r6, #0
 800f054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f058:	f1b9 0901 	subs.w	r9, r9, #1
 800f05c:	d505      	bpl.n	800f06a <_fwalk_sglue+0x22>
 800f05e:	6824      	ldr	r4, [r4, #0]
 800f060:	2c00      	cmp	r4, #0
 800f062:	d1f7      	bne.n	800f054 <_fwalk_sglue+0xc>
 800f064:	4630      	mov	r0, r6
 800f066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f06a:	89ab      	ldrh	r3, [r5, #12]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d907      	bls.n	800f080 <_fwalk_sglue+0x38>
 800f070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f074:	3301      	adds	r3, #1
 800f076:	d003      	beq.n	800f080 <_fwalk_sglue+0x38>
 800f078:	4629      	mov	r1, r5
 800f07a:	4638      	mov	r0, r7
 800f07c:	47c0      	blx	r8
 800f07e:	4306      	orrs	r6, r0
 800f080:	3568      	adds	r5, #104	@ 0x68
 800f082:	e7e9      	b.n	800f058 <_fwalk_sglue+0x10>

0800f084 <iprintf>:
 800f084:	b40f      	push	{r0, r1, r2, r3}
 800f086:	b507      	push	{r0, r1, r2, lr}
 800f088:	4906      	ldr	r1, [pc, #24]	@ (800f0a4 <iprintf+0x20>)
 800f08a:	ab04      	add	r3, sp, #16
 800f08c:	6808      	ldr	r0, [r1, #0]
 800f08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f092:	6881      	ldr	r1, [r0, #8]
 800f094:	9301      	str	r3, [sp, #4]
 800f096:	f001 fbf9 	bl	801088c <_vfiprintf_r>
 800f09a:	b003      	add	sp, #12
 800f09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0a0:	b004      	add	sp, #16
 800f0a2:	4770      	bx	lr
 800f0a4:	24000194 	.word	0x24000194

0800f0a8 <_puts_r>:
 800f0a8:	6a03      	ldr	r3, [r0, #32]
 800f0aa:	b570      	push	{r4, r5, r6, lr}
 800f0ac:	6884      	ldr	r4, [r0, #8]
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	460e      	mov	r6, r1
 800f0b2:	b90b      	cbnz	r3, 800f0b8 <_puts_r+0x10>
 800f0b4:	f7ff f97c 	bl	800e3b0 <__sinit>
 800f0b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0ba:	07db      	lsls	r3, r3, #31
 800f0bc:	d405      	bmi.n	800f0ca <_puts_r+0x22>
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	0598      	lsls	r0, r3, #22
 800f0c2:	d402      	bmi.n	800f0ca <_puts_r+0x22>
 800f0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0c6:	f000 f8dc 	bl	800f282 <__retarget_lock_acquire_recursive>
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	0719      	lsls	r1, r3, #28
 800f0ce:	d502      	bpl.n	800f0d6 <_puts_r+0x2e>
 800f0d0:	6923      	ldr	r3, [r4, #16]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d135      	bne.n	800f142 <_puts_r+0x9a>
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f002 fb7f 	bl	80117dc <__swsetup_r>
 800f0de:	b380      	cbz	r0, 800f142 <_puts_r+0x9a>
 800f0e0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800f0e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0e6:	07da      	lsls	r2, r3, #31
 800f0e8:	d405      	bmi.n	800f0f6 <_puts_r+0x4e>
 800f0ea:	89a3      	ldrh	r3, [r4, #12]
 800f0ec:	059b      	lsls	r3, r3, #22
 800f0ee:	d402      	bmi.n	800f0f6 <_puts_r+0x4e>
 800f0f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0f2:	f000 f8c7 	bl	800f284 <__retarget_lock_release_recursive>
 800f0f6:	4628      	mov	r0, r5
 800f0f8:	bd70      	pop	{r4, r5, r6, pc}
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	da04      	bge.n	800f108 <_puts_r+0x60>
 800f0fe:	69a2      	ldr	r2, [r4, #24]
 800f100:	429a      	cmp	r2, r3
 800f102:	dc17      	bgt.n	800f134 <_puts_r+0x8c>
 800f104:	290a      	cmp	r1, #10
 800f106:	d015      	beq.n	800f134 <_puts_r+0x8c>
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	1c5a      	adds	r2, r3, #1
 800f10c:	6022      	str	r2, [r4, #0]
 800f10e:	7019      	strb	r1, [r3, #0]
 800f110:	68a3      	ldr	r3, [r4, #8]
 800f112:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f116:	3b01      	subs	r3, #1
 800f118:	60a3      	str	r3, [r4, #8]
 800f11a:	2900      	cmp	r1, #0
 800f11c:	d1ed      	bne.n	800f0fa <_puts_r+0x52>
 800f11e:	2b00      	cmp	r3, #0
 800f120:	da11      	bge.n	800f146 <_puts_r+0x9e>
 800f122:	4622      	mov	r2, r4
 800f124:	210a      	movs	r1, #10
 800f126:	4628      	mov	r0, r5
 800f128:	f002 fb19 	bl	801175e <__swbuf_r>
 800f12c:	3001      	adds	r0, #1
 800f12e:	d0d7      	beq.n	800f0e0 <_puts_r+0x38>
 800f130:	250a      	movs	r5, #10
 800f132:	e7d7      	b.n	800f0e4 <_puts_r+0x3c>
 800f134:	4622      	mov	r2, r4
 800f136:	4628      	mov	r0, r5
 800f138:	f002 fb11 	bl	801175e <__swbuf_r>
 800f13c:	3001      	adds	r0, #1
 800f13e:	d1e7      	bne.n	800f110 <_puts_r+0x68>
 800f140:	e7ce      	b.n	800f0e0 <_puts_r+0x38>
 800f142:	3e01      	subs	r6, #1
 800f144:	e7e4      	b.n	800f110 <_puts_r+0x68>
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	1c5a      	adds	r2, r3, #1
 800f14a:	6022      	str	r2, [r4, #0]
 800f14c:	220a      	movs	r2, #10
 800f14e:	701a      	strb	r2, [r3, #0]
 800f150:	e7ee      	b.n	800f130 <_puts_r+0x88>
	...

0800f154 <puts>:
 800f154:	4b02      	ldr	r3, [pc, #8]	@ (800f160 <puts+0xc>)
 800f156:	4601      	mov	r1, r0
 800f158:	6818      	ldr	r0, [r3, #0]
 800f15a:	f7ff bfa5 	b.w	800f0a8 <_puts_r>
 800f15e:	bf00      	nop
 800f160:	24000194 	.word	0x24000194

0800f164 <strncmp>:
 800f164:	b510      	push	{r4, lr}
 800f166:	b16a      	cbz	r2, 800f184 <strncmp+0x20>
 800f168:	3901      	subs	r1, #1
 800f16a:	1884      	adds	r4, r0, r2
 800f16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f170:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f174:	429a      	cmp	r2, r3
 800f176:	d103      	bne.n	800f180 <strncmp+0x1c>
 800f178:	42a0      	cmp	r0, r4
 800f17a:	d001      	beq.n	800f180 <strncmp+0x1c>
 800f17c:	2a00      	cmp	r2, #0
 800f17e:	d1f5      	bne.n	800f16c <strncmp+0x8>
 800f180:	1ad0      	subs	r0, r2, r3
 800f182:	bd10      	pop	{r4, pc}
 800f184:	4610      	mov	r0, r2
 800f186:	e7fc      	b.n	800f182 <strncmp+0x1e>

0800f188 <memset>:
 800f188:	4402      	add	r2, r0
 800f18a:	4603      	mov	r3, r0
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d100      	bne.n	800f192 <memset+0xa>
 800f190:	4770      	bx	lr
 800f192:	f803 1b01 	strb.w	r1, [r3], #1
 800f196:	e7f9      	b.n	800f18c <memset+0x4>

0800f198 <_localeconv_r>:
 800f198:	4800      	ldr	r0, [pc, #0]	@ (800f19c <_localeconv_r+0x4>)
 800f19a:	4770      	bx	lr
 800f19c:	24000118 	.word	0x24000118

0800f1a0 <_close_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4d06      	ldr	r5, [pc, #24]	@ (800f1bc <_close_r+0x1c>)
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	4608      	mov	r0, r1
 800f1aa:	602b      	str	r3, [r5, #0]
 800f1ac:	f7f4 fcc2 	bl	8003b34 <_close>
 800f1b0:	1c43      	adds	r3, r0, #1
 800f1b2:	d102      	bne.n	800f1ba <_close_r+0x1a>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	b103      	cbz	r3, 800f1ba <_close_r+0x1a>
 800f1b8:	6023      	str	r3, [r4, #0]
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	24000d98 	.word	0x24000d98

0800f1c0 <_lseek_r>:
 800f1c0:	b538      	push	{r3, r4, r5, lr}
 800f1c2:	4d07      	ldr	r5, [pc, #28]	@ (800f1e0 <_lseek_r+0x20>)
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	4608      	mov	r0, r1
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	602a      	str	r2, [r5, #0]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	f7f4 fcd7 	bl	8003b82 <_lseek>
 800f1d4:	1c43      	adds	r3, r0, #1
 800f1d6:	d102      	bne.n	800f1de <_lseek_r+0x1e>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	b103      	cbz	r3, 800f1de <_lseek_r+0x1e>
 800f1dc:	6023      	str	r3, [r4, #0]
 800f1de:	bd38      	pop	{r3, r4, r5, pc}
 800f1e0:	24000d98 	.word	0x24000d98

0800f1e4 <_read_r>:
 800f1e4:	b538      	push	{r3, r4, r5, lr}
 800f1e6:	4d07      	ldr	r5, [pc, #28]	@ (800f204 <_read_r+0x20>)
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	4608      	mov	r0, r1
 800f1ec:	4611      	mov	r1, r2
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	602a      	str	r2, [r5, #0]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	f7f4 fc81 	bl	8003afa <_read>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d102      	bne.n	800f202 <_read_r+0x1e>
 800f1fc:	682b      	ldr	r3, [r5, #0]
 800f1fe:	b103      	cbz	r3, 800f202 <_read_r+0x1e>
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	24000d98 	.word	0x24000d98

0800f208 <_write_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	4d07      	ldr	r5, [pc, #28]	@ (800f228 <_write_r+0x20>)
 800f20c:	4604      	mov	r4, r0
 800f20e:	4608      	mov	r0, r1
 800f210:	4611      	mov	r1, r2
 800f212:	2200      	movs	r2, #0
 800f214:	602a      	str	r2, [r5, #0]
 800f216:	461a      	mov	r2, r3
 800f218:	f7f3 faf3 	bl	8002802 <_write>
 800f21c:	1c43      	adds	r3, r0, #1
 800f21e:	d102      	bne.n	800f226 <_write_r+0x1e>
 800f220:	682b      	ldr	r3, [r5, #0]
 800f222:	b103      	cbz	r3, 800f226 <_write_r+0x1e>
 800f224:	6023      	str	r3, [r4, #0]
 800f226:	bd38      	pop	{r3, r4, r5, pc}
 800f228:	24000d98 	.word	0x24000d98

0800f22c <__errno>:
 800f22c:	4b01      	ldr	r3, [pc, #4]	@ (800f234 <__errno+0x8>)
 800f22e:	6818      	ldr	r0, [r3, #0]
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	24000194 	.word	0x24000194

0800f238 <__libc_init_array>:
 800f238:	b570      	push	{r4, r5, r6, lr}
 800f23a:	4d0d      	ldr	r5, [pc, #52]	@ (800f270 <__libc_init_array+0x38>)
 800f23c:	4c0d      	ldr	r4, [pc, #52]	@ (800f274 <__libc_init_array+0x3c>)
 800f23e:	1b64      	subs	r4, r4, r5
 800f240:	10a4      	asrs	r4, r4, #2
 800f242:	2600      	movs	r6, #0
 800f244:	42a6      	cmp	r6, r4
 800f246:	d109      	bne.n	800f25c <__libc_init_array+0x24>
 800f248:	4d0b      	ldr	r5, [pc, #44]	@ (800f278 <__libc_init_array+0x40>)
 800f24a:	4c0c      	ldr	r4, [pc, #48]	@ (800f27c <__libc_init_array+0x44>)
 800f24c:	f002 fc70 	bl	8011b30 <_init>
 800f250:	1b64      	subs	r4, r4, r5
 800f252:	10a4      	asrs	r4, r4, #2
 800f254:	2600      	movs	r6, #0
 800f256:	42a6      	cmp	r6, r4
 800f258:	d105      	bne.n	800f266 <__libc_init_array+0x2e>
 800f25a:	bd70      	pop	{r4, r5, r6, pc}
 800f25c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f260:	4798      	blx	r3
 800f262:	3601      	adds	r6, #1
 800f264:	e7ee      	b.n	800f244 <__libc_init_array+0xc>
 800f266:	f855 3b04 	ldr.w	r3, [r5], #4
 800f26a:	4798      	blx	r3
 800f26c:	3601      	adds	r6, #1
 800f26e:	e7f2      	b.n	800f256 <__libc_init_array+0x1e>
 800f270:	08012304 	.word	0x08012304
 800f274:	08012304 	.word	0x08012304
 800f278:	08012304 	.word	0x08012304
 800f27c:	08012308 	.word	0x08012308

0800f280 <__retarget_lock_init_recursive>:
 800f280:	4770      	bx	lr

0800f282 <__retarget_lock_acquire_recursive>:
 800f282:	4770      	bx	lr

0800f284 <__retarget_lock_release_recursive>:
 800f284:	4770      	bx	lr

0800f286 <memcpy>:
 800f286:	440a      	add	r2, r1
 800f288:	4291      	cmp	r1, r2
 800f28a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f28e:	d100      	bne.n	800f292 <memcpy+0xc>
 800f290:	4770      	bx	lr
 800f292:	b510      	push	{r4, lr}
 800f294:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f29c:	4291      	cmp	r1, r2
 800f29e:	d1f9      	bne.n	800f294 <memcpy+0xe>
 800f2a0:	bd10      	pop	{r4, pc}
 800f2a2:	0000      	movs	r0, r0
 800f2a4:	0000      	movs	r0, r0
	...

0800f2a8 <nan>:
 800f2a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f2b0 <nan+0x8>
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	00000000 	.word	0x00000000
 800f2b4:	7ff80000 	.word	0x7ff80000

0800f2b8 <nanf>:
 800f2b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f2c0 <nanf+0x8>
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	7fc00000 	.word	0x7fc00000

0800f2c4 <quorem>:
 800f2c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c8:	6903      	ldr	r3, [r0, #16]
 800f2ca:	690c      	ldr	r4, [r1, #16]
 800f2cc:	42a3      	cmp	r3, r4
 800f2ce:	4607      	mov	r7, r0
 800f2d0:	db7e      	blt.n	800f3d0 <quorem+0x10c>
 800f2d2:	3c01      	subs	r4, #1
 800f2d4:	f101 0814 	add.w	r8, r1, #20
 800f2d8:	00a3      	lsls	r3, r4, #2
 800f2da:	f100 0514 	add.w	r5, r0, #20
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f2ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f2f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f2fa:	d32e      	bcc.n	800f35a <quorem+0x96>
 800f2fc:	f04f 0a00 	mov.w	sl, #0
 800f300:	46c4      	mov	ip, r8
 800f302:	46ae      	mov	lr, r5
 800f304:	46d3      	mov	fp, sl
 800f306:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f30a:	b298      	uxth	r0, r3
 800f30c:	fb06 a000 	mla	r0, r6, r0, sl
 800f310:	0c02      	lsrs	r2, r0, #16
 800f312:	0c1b      	lsrs	r3, r3, #16
 800f314:	fb06 2303 	mla	r3, r6, r3, r2
 800f318:	f8de 2000 	ldr.w	r2, [lr]
 800f31c:	b280      	uxth	r0, r0
 800f31e:	b292      	uxth	r2, r2
 800f320:	1a12      	subs	r2, r2, r0
 800f322:	445a      	add	r2, fp
 800f324:	f8de 0000 	ldr.w	r0, [lr]
 800f328:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f332:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f336:	b292      	uxth	r2, r2
 800f338:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f33c:	45e1      	cmp	r9, ip
 800f33e:	f84e 2b04 	str.w	r2, [lr], #4
 800f342:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f346:	d2de      	bcs.n	800f306 <quorem+0x42>
 800f348:	9b00      	ldr	r3, [sp, #0]
 800f34a:	58eb      	ldr	r3, [r5, r3]
 800f34c:	b92b      	cbnz	r3, 800f35a <quorem+0x96>
 800f34e:	9b01      	ldr	r3, [sp, #4]
 800f350:	3b04      	subs	r3, #4
 800f352:	429d      	cmp	r5, r3
 800f354:	461a      	mov	r2, r3
 800f356:	d32f      	bcc.n	800f3b8 <quorem+0xf4>
 800f358:	613c      	str	r4, [r7, #16]
 800f35a:	4638      	mov	r0, r7
 800f35c:	f001 ffe6 	bl	801132c <__mcmp>
 800f360:	2800      	cmp	r0, #0
 800f362:	db25      	blt.n	800f3b0 <quorem+0xec>
 800f364:	4629      	mov	r1, r5
 800f366:	2000      	movs	r0, #0
 800f368:	f858 2b04 	ldr.w	r2, [r8], #4
 800f36c:	f8d1 c000 	ldr.w	ip, [r1]
 800f370:	fa1f fe82 	uxth.w	lr, r2
 800f374:	fa1f f38c 	uxth.w	r3, ip
 800f378:	eba3 030e 	sub.w	r3, r3, lr
 800f37c:	4403      	add	r3, r0
 800f37e:	0c12      	lsrs	r2, r2, #16
 800f380:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f384:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f388:	b29b      	uxth	r3, r3
 800f38a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f38e:	45c1      	cmp	r9, r8
 800f390:	f841 3b04 	str.w	r3, [r1], #4
 800f394:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f398:	d2e6      	bcs.n	800f368 <quorem+0xa4>
 800f39a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f39e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3a2:	b922      	cbnz	r2, 800f3ae <quorem+0xea>
 800f3a4:	3b04      	subs	r3, #4
 800f3a6:	429d      	cmp	r5, r3
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	d30b      	bcc.n	800f3c4 <quorem+0x100>
 800f3ac:	613c      	str	r4, [r7, #16]
 800f3ae:	3601      	adds	r6, #1
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	b003      	add	sp, #12
 800f3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b8:	6812      	ldr	r2, [r2, #0]
 800f3ba:	3b04      	subs	r3, #4
 800f3bc:	2a00      	cmp	r2, #0
 800f3be:	d1cb      	bne.n	800f358 <quorem+0x94>
 800f3c0:	3c01      	subs	r4, #1
 800f3c2:	e7c6      	b.n	800f352 <quorem+0x8e>
 800f3c4:	6812      	ldr	r2, [r2, #0]
 800f3c6:	3b04      	subs	r3, #4
 800f3c8:	2a00      	cmp	r2, #0
 800f3ca:	d1ef      	bne.n	800f3ac <quorem+0xe8>
 800f3cc:	3c01      	subs	r4, #1
 800f3ce:	e7ea      	b.n	800f3a6 <quorem+0xe2>
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	e7ee      	b.n	800f3b2 <quorem+0xee>
 800f3d4:	0000      	movs	r0, r0
	...

0800f3d8 <_dtoa_r>:
 800f3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3dc:	ed2d 8b02 	vpush	{d8}
 800f3e0:	69c7      	ldr	r7, [r0, #28]
 800f3e2:	b091      	sub	sp, #68	@ 0x44
 800f3e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f3e8:	ec55 4b10 	vmov	r4, r5, d0
 800f3ec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f3ee:	9107      	str	r1, [sp, #28]
 800f3f0:	4681      	mov	r9, r0
 800f3f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3f4:	930d      	str	r3, [sp, #52]	@ 0x34
 800f3f6:	b97f      	cbnz	r7, 800f418 <_dtoa_r+0x40>
 800f3f8:	2010      	movs	r0, #16
 800f3fa:	f001 fb5f 	bl	8010abc <malloc>
 800f3fe:	4602      	mov	r2, r0
 800f400:	f8c9 001c 	str.w	r0, [r9, #28]
 800f404:	b920      	cbnz	r0, 800f410 <_dtoa_r+0x38>
 800f406:	4ba0      	ldr	r3, [pc, #640]	@ (800f688 <_dtoa_r+0x2b0>)
 800f408:	21ef      	movs	r1, #239	@ 0xef
 800f40a:	48a0      	ldr	r0, [pc, #640]	@ (800f68c <_dtoa_r+0x2b4>)
 800f40c:	f002 faf8 	bl	8011a00 <__assert_func>
 800f410:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f414:	6007      	str	r7, [r0, #0]
 800f416:	60c7      	str	r7, [r0, #12]
 800f418:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f41c:	6819      	ldr	r1, [r3, #0]
 800f41e:	b159      	cbz	r1, 800f438 <_dtoa_r+0x60>
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	604a      	str	r2, [r1, #4]
 800f424:	2301      	movs	r3, #1
 800f426:	4093      	lsls	r3, r2
 800f428:	608b      	str	r3, [r1, #8]
 800f42a:	4648      	mov	r0, r9
 800f42c:	f001 fcfa 	bl	8010e24 <_Bfree>
 800f430:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f434:	2200      	movs	r2, #0
 800f436:	601a      	str	r2, [r3, #0]
 800f438:	1e2b      	subs	r3, r5, #0
 800f43a:	bfbb      	ittet	lt
 800f43c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f440:	9303      	strlt	r3, [sp, #12]
 800f442:	2300      	movge	r3, #0
 800f444:	2201      	movlt	r2, #1
 800f446:	bfac      	ite	ge
 800f448:	6033      	strge	r3, [r6, #0]
 800f44a:	6032      	strlt	r2, [r6, #0]
 800f44c:	4b90      	ldr	r3, [pc, #576]	@ (800f690 <_dtoa_r+0x2b8>)
 800f44e:	9e03      	ldr	r6, [sp, #12]
 800f450:	43b3      	bics	r3, r6
 800f452:	d110      	bne.n	800f476 <_dtoa_r+0x9e>
 800f454:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f456:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f45a:	6013      	str	r3, [r2, #0]
 800f45c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f460:	4323      	orrs	r3, r4
 800f462:	f000 84de 	beq.w	800fe22 <_dtoa_r+0xa4a>
 800f466:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f468:	4f8a      	ldr	r7, [pc, #552]	@ (800f694 <_dtoa_r+0x2bc>)
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	f000 84e0 	beq.w	800fe30 <_dtoa_r+0xa58>
 800f470:	1cfb      	adds	r3, r7, #3
 800f472:	f000 bcdb 	b.w	800fe2c <_dtoa_r+0xa54>
 800f476:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f47a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f482:	d10a      	bne.n	800f49a <_dtoa_r+0xc2>
 800f484:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f486:	2301      	movs	r3, #1
 800f488:	6013      	str	r3, [r2, #0]
 800f48a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f48c:	b113      	cbz	r3, 800f494 <_dtoa_r+0xbc>
 800f48e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f490:	4b81      	ldr	r3, [pc, #516]	@ (800f698 <_dtoa_r+0x2c0>)
 800f492:	6013      	str	r3, [r2, #0]
 800f494:	4f81      	ldr	r7, [pc, #516]	@ (800f69c <_dtoa_r+0x2c4>)
 800f496:	f000 bccb 	b.w	800fe30 <_dtoa_r+0xa58>
 800f49a:	aa0e      	add	r2, sp, #56	@ 0x38
 800f49c:	a90f      	add	r1, sp, #60	@ 0x3c
 800f49e:	4648      	mov	r0, r9
 800f4a0:	eeb0 0b48 	vmov.f64	d0, d8
 800f4a4:	f002 f862 	bl	801156c <__d2b>
 800f4a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f4ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4ae:	9001      	str	r0, [sp, #4]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d045      	beq.n	800f540 <_dtoa_r+0x168>
 800f4b4:	eeb0 7b48 	vmov.f64	d7, d8
 800f4b8:	ee18 1a90 	vmov	r1, s17
 800f4bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f4c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f4c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f4c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f4cc:	2500      	movs	r5, #0
 800f4ce:	ee07 1a90 	vmov	s15, r1
 800f4d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f4d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f670 <_dtoa_r+0x298>
 800f4da:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f4de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f678 <_dtoa_r+0x2a0>
 800f4e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f4e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f680 <_dtoa_r+0x2a8>
 800f4ea:	ee07 3a90 	vmov	s15, r3
 800f4ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f4f2:	eeb0 7b46 	vmov.f64	d7, d6
 800f4f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f4fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f4fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f506:	ee16 8a90 	vmov	r8, s13
 800f50a:	d508      	bpl.n	800f51e <_dtoa_r+0x146>
 800f50c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f510:	eeb4 6b47 	vcmp.f64	d6, d7
 800f514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f518:	bf18      	it	ne
 800f51a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800f51e:	f1b8 0f16 	cmp.w	r8, #22
 800f522:	d82b      	bhi.n	800f57c <_dtoa_r+0x1a4>
 800f524:	495e      	ldr	r1, [pc, #376]	@ (800f6a0 <_dtoa_r+0x2c8>)
 800f526:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f52a:	ed91 7b00 	vldr	d7, [r1]
 800f52e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f536:	d501      	bpl.n	800f53c <_dtoa_r+0x164>
 800f538:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f53c:	2100      	movs	r1, #0
 800f53e:	e01e      	b.n	800f57e <_dtoa_r+0x1a6>
 800f540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f542:	4413      	add	r3, r2
 800f544:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f548:	2920      	cmp	r1, #32
 800f54a:	bfc1      	itttt	gt
 800f54c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f550:	408e      	lslgt	r6, r1
 800f552:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f556:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f55a:	bfd6      	itet	le
 800f55c:	f1c1 0120 	rsble	r1, r1, #32
 800f560:	4331      	orrgt	r1, r6
 800f562:	fa04 f101 	lslle.w	r1, r4, r1
 800f566:	ee07 1a90 	vmov	s15, r1
 800f56a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f56e:	3b01      	subs	r3, #1
 800f570:	ee17 1a90 	vmov	r1, s15
 800f574:	2501      	movs	r5, #1
 800f576:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f57a:	e7a8      	b.n	800f4ce <_dtoa_r+0xf6>
 800f57c:	2101      	movs	r1, #1
 800f57e:	1ad2      	subs	r2, r2, r3
 800f580:	1e53      	subs	r3, r2, #1
 800f582:	9306      	str	r3, [sp, #24]
 800f584:	bf45      	ittet	mi
 800f586:	f1c2 0301 	rsbmi	r3, r2, #1
 800f58a:	9305      	strmi	r3, [sp, #20]
 800f58c:	2300      	movpl	r3, #0
 800f58e:	2300      	movmi	r3, #0
 800f590:	bf4c      	ite	mi
 800f592:	9306      	strmi	r3, [sp, #24]
 800f594:	9305      	strpl	r3, [sp, #20]
 800f596:	f1b8 0f00 	cmp.w	r8, #0
 800f59a:	910c      	str	r1, [sp, #48]	@ 0x30
 800f59c:	db18      	blt.n	800f5d0 <_dtoa_r+0x1f8>
 800f59e:	9b06      	ldr	r3, [sp, #24]
 800f5a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f5a4:	4443      	add	r3, r8
 800f5a6:	9306      	str	r3, [sp, #24]
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	9a07      	ldr	r2, [sp, #28]
 800f5ac:	2a09      	cmp	r2, #9
 800f5ae:	d849      	bhi.n	800f644 <_dtoa_r+0x26c>
 800f5b0:	2a05      	cmp	r2, #5
 800f5b2:	bfc4      	itt	gt
 800f5b4:	3a04      	subgt	r2, #4
 800f5b6:	9207      	strgt	r2, [sp, #28]
 800f5b8:	9a07      	ldr	r2, [sp, #28]
 800f5ba:	f1a2 0202 	sub.w	r2, r2, #2
 800f5be:	bfcc      	ite	gt
 800f5c0:	2400      	movgt	r4, #0
 800f5c2:	2401      	movle	r4, #1
 800f5c4:	2a03      	cmp	r2, #3
 800f5c6:	d848      	bhi.n	800f65a <_dtoa_r+0x282>
 800f5c8:	e8df f002 	tbb	[pc, r2]
 800f5cc:	3a2c2e0b 	.word	0x3a2c2e0b
 800f5d0:	9b05      	ldr	r3, [sp, #20]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	eba3 0308 	sub.w	r3, r3, r8
 800f5d8:	9305      	str	r3, [sp, #20]
 800f5da:	920a      	str	r2, [sp, #40]	@ 0x28
 800f5dc:	f1c8 0300 	rsb	r3, r8, #0
 800f5e0:	e7e3      	b.n	800f5aa <_dtoa_r+0x1d2>
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	9208      	str	r2, [sp, #32]
 800f5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5e8:	2a00      	cmp	r2, #0
 800f5ea:	dc39      	bgt.n	800f660 <_dtoa_r+0x288>
 800f5ec:	f04f 0b01 	mov.w	fp, #1
 800f5f0:	46da      	mov	sl, fp
 800f5f2:	465a      	mov	r2, fp
 800f5f4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f5f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	2004      	movs	r0, #4
 800f600:	f100 0614 	add.w	r6, r0, #20
 800f604:	4296      	cmp	r6, r2
 800f606:	d930      	bls.n	800f66a <_dtoa_r+0x292>
 800f608:	6079      	str	r1, [r7, #4]
 800f60a:	4648      	mov	r0, r9
 800f60c:	9304      	str	r3, [sp, #16]
 800f60e:	f001 fbc9 	bl	8010da4 <_Balloc>
 800f612:	9b04      	ldr	r3, [sp, #16]
 800f614:	4607      	mov	r7, r0
 800f616:	2800      	cmp	r0, #0
 800f618:	d146      	bne.n	800f6a8 <_dtoa_r+0x2d0>
 800f61a:	4b22      	ldr	r3, [pc, #136]	@ (800f6a4 <_dtoa_r+0x2cc>)
 800f61c:	4602      	mov	r2, r0
 800f61e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f622:	e6f2      	b.n	800f40a <_dtoa_r+0x32>
 800f624:	2201      	movs	r2, #1
 800f626:	e7dd      	b.n	800f5e4 <_dtoa_r+0x20c>
 800f628:	2200      	movs	r2, #0
 800f62a:	9208      	str	r2, [sp, #32]
 800f62c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f62e:	eb08 0b02 	add.w	fp, r8, r2
 800f632:	f10b 0a01 	add.w	sl, fp, #1
 800f636:	4652      	mov	r2, sl
 800f638:	2a01      	cmp	r2, #1
 800f63a:	bfb8      	it	lt
 800f63c:	2201      	movlt	r2, #1
 800f63e:	e7db      	b.n	800f5f8 <_dtoa_r+0x220>
 800f640:	2201      	movs	r2, #1
 800f642:	e7f2      	b.n	800f62a <_dtoa_r+0x252>
 800f644:	2401      	movs	r4, #1
 800f646:	2200      	movs	r2, #0
 800f648:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f64c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f650:	2100      	movs	r1, #0
 800f652:	46da      	mov	sl, fp
 800f654:	2212      	movs	r2, #18
 800f656:	9109      	str	r1, [sp, #36]	@ 0x24
 800f658:	e7ce      	b.n	800f5f8 <_dtoa_r+0x220>
 800f65a:	2201      	movs	r2, #1
 800f65c:	9208      	str	r2, [sp, #32]
 800f65e:	e7f5      	b.n	800f64c <_dtoa_r+0x274>
 800f660:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f664:	46da      	mov	sl, fp
 800f666:	465a      	mov	r2, fp
 800f668:	e7c6      	b.n	800f5f8 <_dtoa_r+0x220>
 800f66a:	3101      	adds	r1, #1
 800f66c:	0040      	lsls	r0, r0, #1
 800f66e:	e7c7      	b.n	800f600 <_dtoa_r+0x228>
 800f670:	636f4361 	.word	0x636f4361
 800f674:	3fd287a7 	.word	0x3fd287a7
 800f678:	8b60c8b3 	.word	0x8b60c8b3
 800f67c:	3fc68a28 	.word	0x3fc68a28
 800f680:	509f79fb 	.word	0x509f79fb
 800f684:	3fd34413 	.word	0x3fd34413
 800f688:	08012076 	.word	0x08012076
 800f68c:	0801208d 	.word	0x0801208d
 800f690:	7ff00000 	.word	0x7ff00000
 800f694:	08012072 	.word	0x08012072
 800f698:	08011ee5 	.word	0x08011ee5
 800f69c:	08011ee4 	.word	0x08011ee4
 800f6a0:	080121f8 	.word	0x080121f8
 800f6a4:	080120e5 	.word	0x080120e5
 800f6a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f6ac:	f1ba 0f0e 	cmp.w	sl, #14
 800f6b0:	6010      	str	r0, [r2, #0]
 800f6b2:	d86f      	bhi.n	800f794 <_dtoa_r+0x3bc>
 800f6b4:	2c00      	cmp	r4, #0
 800f6b6:	d06d      	beq.n	800f794 <_dtoa_r+0x3bc>
 800f6b8:	f1b8 0f00 	cmp.w	r8, #0
 800f6bc:	f340 80c2 	ble.w	800f844 <_dtoa_r+0x46c>
 800f6c0:	4aca      	ldr	r2, [pc, #808]	@ (800f9ec <_dtoa_r+0x614>)
 800f6c2:	f008 010f 	and.w	r1, r8, #15
 800f6c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f6ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f6ce:	ed92 7b00 	vldr	d7, [r2]
 800f6d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f6d6:	f000 80a9 	beq.w	800f82c <_dtoa_r+0x454>
 800f6da:	4ac5      	ldr	r2, [pc, #788]	@ (800f9f0 <_dtoa_r+0x618>)
 800f6dc:	ed92 6b08 	vldr	d6, [r2, #32]
 800f6e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f6e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f6e8:	f001 010f 	and.w	r1, r1, #15
 800f6ec:	2203      	movs	r2, #3
 800f6ee:	48c0      	ldr	r0, [pc, #768]	@ (800f9f0 <_dtoa_r+0x618>)
 800f6f0:	2900      	cmp	r1, #0
 800f6f2:	f040 809d 	bne.w	800f830 <_dtoa_r+0x458>
 800f6f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f6fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f6fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f702:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f704:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f708:	2900      	cmp	r1, #0
 800f70a:	f000 80c1 	beq.w	800f890 <_dtoa_r+0x4b8>
 800f70e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f712:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71a:	f140 80b9 	bpl.w	800f890 <_dtoa_r+0x4b8>
 800f71e:	f1ba 0f00 	cmp.w	sl, #0
 800f722:	f000 80b5 	beq.w	800f890 <_dtoa_r+0x4b8>
 800f726:	f1bb 0f00 	cmp.w	fp, #0
 800f72a:	dd31      	ble.n	800f790 <_dtoa_r+0x3b8>
 800f72c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f730:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f734:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f738:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800f73c:	9104      	str	r1, [sp, #16]
 800f73e:	3201      	adds	r2, #1
 800f740:	465c      	mov	r4, fp
 800f742:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f746:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f74a:	ee07 2a90 	vmov	s15, r2
 800f74e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f752:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f756:	ee15 2a90 	vmov	r2, s11
 800f75a:	ec51 0b15 	vmov	r0, r1, d5
 800f75e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f762:	2c00      	cmp	r4, #0
 800f764:	f040 8098 	bne.w	800f898 <_dtoa_r+0x4c0>
 800f768:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f76c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f770:	ec41 0b17 	vmov	d7, r0, r1
 800f774:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77c:	f300 8261 	bgt.w	800fc42 <_dtoa_r+0x86a>
 800f780:	eeb1 7b47 	vneg.f64	d7, d7
 800f784:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78c:	f100 80f5 	bmi.w	800f97a <_dtoa_r+0x5a2>
 800f790:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f794:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f796:	2a00      	cmp	r2, #0
 800f798:	f2c0 812c 	blt.w	800f9f4 <_dtoa_r+0x61c>
 800f79c:	f1b8 0f0e 	cmp.w	r8, #14
 800f7a0:	f300 8128 	bgt.w	800f9f4 <_dtoa_r+0x61c>
 800f7a4:	4b91      	ldr	r3, [pc, #580]	@ (800f9ec <_dtoa_r+0x614>)
 800f7a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f7aa:	ed93 6b00 	vldr	d6, [r3]
 800f7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	da03      	bge.n	800f7bc <_dtoa_r+0x3e4>
 800f7b4:	f1ba 0f00 	cmp.w	sl, #0
 800f7b8:	f340 80d2 	ble.w	800f960 <_dtoa_r+0x588>
 800f7bc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f7c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7c4:	463e      	mov	r6, r7
 800f7c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f7ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f7ce:	ee15 3a10 	vmov	r3, s10
 800f7d2:	3330      	adds	r3, #48	@ 0x30
 800f7d4:	f806 3b01 	strb.w	r3, [r6], #1
 800f7d8:	1bf3      	subs	r3, r6, r7
 800f7da:	459a      	cmp	sl, r3
 800f7dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f7e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f7e4:	f040 80f8 	bne.w	800f9d8 <_dtoa_r+0x600>
 800f7e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f7ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f4:	f300 80dd 	bgt.w	800f9b2 <_dtoa_r+0x5da>
 800f7f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800f7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f800:	d104      	bne.n	800f80c <_dtoa_r+0x434>
 800f802:	ee15 3a10 	vmov	r3, s10
 800f806:	07db      	lsls	r3, r3, #31
 800f808:	f100 80d3 	bmi.w	800f9b2 <_dtoa_r+0x5da>
 800f80c:	9901      	ldr	r1, [sp, #4]
 800f80e:	4648      	mov	r0, r9
 800f810:	f001 fb08 	bl	8010e24 <_Bfree>
 800f814:	2300      	movs	r3, #0
 800f816:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f818:	7033      	strb	r3, [r6, #0]
 800f81a:	f108 0301 	add.w	r3, r8, #1
 800f81e:	6013      	str	r3, [r2, #0]
 800f820:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f822:	2b00      	cmp	r3, #0
 800f824:	f000 8304 	beq.w	800fe30 <_dtoa_r+0xa58>
 800f828:	601e      	str	r6, [r3, #0]
 800f82a:	e301      	b.n	800fe30 <_dtoa_r+0xa58>
 800f82c:	2202      	movs	r2, #2
 800f82e:	e75e      	b.n	800f6ee <_dtoa_r+0x316>
 800f830:	07cc      	lsls	r4, r1, #31
 800f832:	d504      	bpl.n	800f83e <_dtoa_r+0x466>
 800f834:	ed90 6b00 	vldr	d6, [r0]
 800f838:	3201      	adds	r2, #1
 800f83a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f83e:	1049      	asrs	r1, r1, #1
 800f840:	3008      	adds	r0, #8
 800f842:	e755      	b.n	800f6f0 <_dtoa_r+0x318>
 800f844:	d022      	beq.n	800f88c <_dtoa_r+0x4b4>
 800f846:	f1c8 0100 	rsb	r1, r8, #0
 800f84a:	4a68      	ldr	r2, [pc, #416]	@ (800f9ec <_dtoa_r+0x614>)
 800f84c:	f001 000f 	and.w	r0, r1, #15
 800f850:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f854:	ed92 7b00 	vldr	d7, [r2]
 800f858:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f85c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f860:	4863      	ldr	r0, [pc, #396]	@ (800f9f0 <_dtoa_r+0x618>)
 800f862:	1109      	asrs	r1, r1, #4
 800f864:	2400      	movs	r4, #0
 800f866:	2202      	movs	r2, #2
 800f868:	b929      	cbnz	r1, 800f876 <_dtoa_r+0x49e>
 800f86a:	2c00      	cmp	r4, #0
 800f86c:	f43f af49 	beq.w	800f702 <_dtoa_r+0x32a>
 800f870:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f874:	e745      	b.n	800f702 <_dtoa_r+0x32a>
 800f876:	07ce      	lsls	r6, r1, #31
 800f878:	d505      	bpl.n	800f886 <_dtoa_r+0x4ae>
 800f87a:	ed90 6b00 	vldr	d6, [r0]
 800f87e:	3201      	adds	r2, #1
 800f880:	2401      	movs	r4, #1
 800f882:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f886:	1049      	asrs	r1, r1, #1
 800f888:	3008      	adds	r0, #8
 800f88a:	e7ed      	b.n	800f868 <_dtoa_r+0x490>
 800f88c:	2202      	movs	r2, #2
 800f88e:	e738      	b.n	800f702 <_dtoa_r+0x32a>
 800f890:	f8cd 8010 	str.w	r8, [sp, #16]
 800f894:	4654      	mov	r4, sl
 800f896:	e754      	b.n	800f742 <_dtoa_r+0x36a>
 800f898:	4a54      	ldr	r2, [pc, #336]	@ (800f9ec <_dtoa_r+0x614>)
 800f89a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f89e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f8a2:	9a08      	ldr	r2, [sp, #32]
 800f8a4:	ec41 0b17 	vmov	d7, r0, r1
 800f8a8:	443c      	add	r4, r7
 800f8aa:	b34a      	cbz	r2, 800f900 <_dtoa_r+0x528>
 800f8ac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f8b0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f8b4:	463e      	mov	r6, r7
 800f8b6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f8ba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f8be:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f8c2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f8c6:	ee14 2a90 	vmov	r2, s9
 800f8ca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f8ce:	3230      	adds	r2, #48	@ 0x30
 800f8d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f8d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8dc:	f806 2b01 	strb.w	r2, [r6], #1
 800f8e0:	d438      	bmi.n	800f954 <_dtoa_r+0x57c>
 800f8e2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f8e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ee:	d462      	bmi.n	800f9b6 <_dtoa_r+0x5de>
 800f8f0:	42a6      	cmp	r6, r4
 800f8f2:	f43f af4d 	beq.w	800f790 <_dtoa_r+0x3b8>
 800f8f6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f8fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f8fe:	e7e0      	b.n	800f8c2 <_dtoa_r+0x4ea>
 800f900:	4621      	mov	r1, r4
 800f902:	463e      	mov	r6, r7
 800f904:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f908:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f90c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f910:	ee14 2a90 	vmov	r2, s9
 800f914:	3230      	adds	r2, #48	@ 0x30
 800f916:	f806 2b01 	strb.w	r2, [r6], #1
 800f91a:	42a6      	cmp	r6, r4
 800f91c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f920:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f924:	d119      	bne.n	800f95a <_dtoa_r+0x582>
 800f926:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f92a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f92e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f936:	dc3e      	bgt.n	800f9b6 <_dtoa_r+0x5de>
 800f938:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f93c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f944:	f57f af24 	bpl.w	800f790 <_dtoa_r+0x3b8>
 800f948:	460e      	mov	r6, r1
 800f94a:	3901      	subs	r1, #1
 800f94c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f950:	2b30      	cmp	r3, #48	@ 0x30
 800f952:	d0f9      	beq.n	800f948 <_dtoa_r+0x570>
 800f954:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f958:	e758      	b.n	800f80c <_dtoa_r+0x434>
 800f95a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f95e:	e7d5      	b.n	800f90c <_dtoa_r+0x534>
 800f960:	d10b      	bne.n	800f97a <_dtoa_r+0x5a2>
 800f962:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f966:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f96a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f96e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f976:	f2c0 8161 	blt.w	800fc3c <_dtoa_r+0x864>
 800f97a:	2400      	movs	r4, #0
 800f97c:	4625      	mov	r5, r4
 800f97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f980:	43db      	mvns	r3, r3
 800f982:	9304      	str	r3, [sp, #16]
 800f984:	463e      	mov	r6, r7
 800f986:	f04f 0800 	mov.w	r8, #0
 800f98a:	4621      	mov	r1, r4
 800f98c:	4648      	mov	r0, r9
 800f98e:	f001 fa49 	bl	8010e24 <_Bfree>
 800f992:	2d00      	cmp	r5, #0
 800f994:	d0de      	beq.n	800f954 <_dtoa_r+0x57c>
 800f996:	f1b8 0f00 	cmp.w	r8, #0
 800f99a:	d005      	beq.n	800f9a8 <_dtoa_r+0x5d0>
 800f99c:	45a8      	cmp	r8, r5
 800f99e:	d003      	beq.n	800f9a8 <_dtoa_r+0x5d0>
 800f9a0:	4641      	mov	r1, r8
 800f9a2:	4648      	mov	r0, r9
 800f9a4:	f001 fa3e 	bl	8010e24 <_Bfree>
 800f9a8:	4629      	mov	r1, r5
 800f9aa:	4648      	mov	r0, r9
 800f9ac:	f001 fa3a 	bl	8010e24 <_Bfree>
 800f9b0:	e7d0      	b.n	800f954 <_dtoa_r+0x57c>
 800f9b2:	f8cd 8010 	str.w	r8, [sp, #16]
 800f9b6:	4633      	mov	r3, r6
 800f9b8:	461e      	mov	r6, r3
 800f9ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9be:	2a39      	cmp	r2, #57	@ 0x39
 800f9c0:	d106      	bne.n	800f9d0 <_dtoa_r+0x5f8>
 800f9c2:	429f      	cmp	r7, r3
 800f9c4:	d1f8      	bne.n	800f9b8 <_dtoa_r+0x5e0>
 800f9c6:	9a04      	ldr	r2, [sp, #16]
 800f9c8:	3201      	adds	r2, #1
 800f9ca:	9204      	str	r2, [sp, #16]
 800f9cc:	2230      	movs	r2, #48	@ 0x30
 800f9ce:	703a      	strb	r2, [r7, #0]
 800f9d0:	781a      	ldrb	r2, [r3, #0]
 800f9d2:	3201      	adds	r2, #1
 800f9d4:	701a      	strb	r2, [r3, #0]
 800f9d6:	e7bd      	b.n	800f954 <_dtoa_r+0x57c>
 800f9d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f9dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e4:	f47f aeef 	bne.w	800f7c6 <_dtoa_r+0x3ee>
 800f9e8:	e710      	b.n	800f80c <_dtoa_r+0x434>
 800f9ea:	bf00      	nop
 800f9ec:	080121f8 	.word	0x080121f8
 800f9f0:	080121d0 	.word	0x080121d0
 800f9f4:	9908      	ldr	r1, [sp, #32]
 800f9f6:	2900      	cmp	r1, #0
 800f9f8:	f000 80e3 	beq.w	800fbc2 <_dtoa_r+0x7ea>
 800f9fc:	9907      	ldr	r1, [sp, #28]
 800f9fe:	2901      	cmp	r1, #1
 800fa00:	f300 80c8 	bgt.w	800fb94 <_dtoa_r+0x7bc>
 800fa04:	2d00      	cmp	r5, #0
 800fa06:	f000 80c1 	beq.w	800fb8c <_dtoa_r+0x7b4>
 800fa0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fa0e:	9e05      	ldr	r6, [sp, #20]
 800fa10:	461c      	mov	r4, r3
 800fa12:	9304      	str	r3, [sp, #16]
 800fa14:	9b05      	ldr	r3, [sp, #20]
 800fa16:	4413      	add	r3, r2
 800fa18:	9305      	str	r3, [sp, #20]
 800fa1a:	9b06      	ldr	r3, [sp, #24]
 800fa1c:	2101      	movs	r1, #1
 800fa1e:	4413      	add	r3, r2
 800fa20:	4648      	mov	r0, r9
 800fa22:	9306      	str	r3, [sp, #24]
 800fa24:	f001 fafc 	bl	8011020 <__i2b>
 800fa28:	9b04      	ldr	r3, [sp, #16]
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	b166      	cbz	r6, 800fa48 <_dtoa_r+0x670>
 800fa2e:	9a06      	ldr	r2, [sp, #24]
 800fa30:	2a00      	cmp	r2, #0
 800fa32:	dd09      	ble.n	800fa48 <_dtoa_r+0x670>
 800fa34:	42b2      	cmp	r2, r6
 800fa36:	9905      	ldr	r1, [sp, #20]
 800fa38:	bfa8      	it	ge
 800fa3a:	4632      	movge	r2, r6
 800fa3c:	1a89      	subs	r1, r1, r2
 800fa3e:	9105      	str	r1, [sp, #20]
 800fa40:	9906      	ldr	r1, [sp, #24]
 800fa42:	1ab6      	subs	r6, r6, r2
 800fa44:	1a8a      	subs	r2, r1, r2
 800fa46:	9206      	str	r2, [sp, #24]
 800fa48:	b1fb      	cbz	r3, 800fa8a <_dtoa_r+0x6b2>
 800fa4a:	9a08      	ldr	r2, [sp, #32]
 800fa4c:	2a00      	cmp	r2, #0
 800fa4e:	f000 80bc 	beq.w	800fbca <_dtoa_r+0x7f2>
 800fa52:	b19c      	cbz	r4, 800fa7c <_dtoa_r+0x6a4>
 800fa54:	4629      	mov	r1, r5
 800fa56:	4622      	mov	r2, r4
 800fa58:	4648      	mov	r0, r9
 800fa5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa5c:	f001 fba0 	bl	80111a0 <__pow5mult>
 800fa60:	9a01      	ldr	r2, [sp, #4]
 800fa62:	4601      	mov	r1, r0
 800fa64:	4605      	mov	r5, r0
 800fa66:	4648      	mov	r0, r9
 800fa68:	f001 faf0 	bl	801104c <__multiply>
 800fa6c:	9901      	ldr	r1, [sp, #4]
 800fa6e:	9004      	str	r0, [sp, #16]
 800fa70:	4648      	mov	r0, r9
 800fa72:	f001 f9d7 	bl	8010e24 <_Bfree>
 800fa76:	9a04      	ldr	r2, [sp, #16]
 800fa78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa7a:	9201      	str	r2, [sp, #4]
 800fa7c:	1b1a      	subs	r2, r3, r4
 800fa7e:	d004      	beq.n	800fa8a <_dtoa_r+0x6b2>
 800fa80:	9901      	ldr	r1, [sp, #4]
 800fa82:	4648      	mov	r0, r9
 800fa84:	f001 fb8c 	bl	80111a0 <__pow5mult>
 800fa88:	9001      	str	r0, [sp, #4]
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	4648      	mov	r0, r9
 800fa8e:	f001 fac7 	bl	8011020 <__i2b>
 800fa92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa94:	4604      	mov	r4, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f000 81d0 	beq.w	800fe3c <_dtoa_r+0xa64>
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4601      	mov	r1, r0
 800faa0:	4648      	mov	r0, r9
 800faa2:	f001 fb7d 	bl	80111a0 <__pow5mult>
 800faa6:	9b07      	ldr	r3, [sp, #28]
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	4604      	mov	r4, r0
 800faac:	f300 8095 	bgt.w	800fbda <_dtoa_r+0x802>
 800fab0:	9b02      	ldr	r3, [sp, #8]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f040 808b 	bne.w	800fbce <_dtoa_r+0x7f6>
 800fab8:	9b03      	ldr	r3, [sp, #12]
 800faba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fabe:	2a00      	cmp	r2, #0
 800fac0:	f040 8087 	bne.w	800fbd2 <_dtoa_r+0x7fa>
 800fac4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fac8:	0d12      	lsrs	r2, r2, #20
 800faca:	0512      	lsls	r2, r2, #20
 800facc:	2a00      	cmp	r2, #0
 800face:	f000 8082 	beq.w	800fbd6 <_dtoa_r+0x7fe>
 800fad2:	9b05      	ldr	r3, [sp, #20]
 800fad4:	3301      	adds	r3, #1
 800fad6:	9305      	str	r3, [sp, #20]
 800fad8:	9b06      	ldr	r3, [sp, #24]
 800fada:	3301      	adds	r3, #1
 800fadc:	9306      	str	r3, [sp, #24]
 800fade:	2301      	movs	r3, #1
 800fae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f000 81af 	beq.w	800fe48 <_dtoa_r+0xa70>
 800faea:	6922      	ldr	r2, [r4, #16]
 800faec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800faf0:	6910      	ldr	r0, [r2, #16]
 800faf2:	f001 fa49 	bl	8010f88 <__hi0bits>
 800faf6:	f1c0 0020 	rsb	r0, r0, #32
 800fafa:	9b06      	ldr	r3, [sp, #24]
 800fafc:	4418      	add	r0, r3
 800fafe:	f010 001f 	ands.w	r0, r0, #31
 800fb02:	d076      	beq.n	800fbf2 <_dtoa_r+0x81a>
 800fb04:	f1c0 0220 	rsb	r2, r0, #32
 800fb08:	2a04      	cmp	r2, #4
 800fb0a:	dd69      	ble.n	800fbe0 <_dtoa_r+0x808>
 800fb0c:	9b05      	ldr	r3, [sp, #20]
 800fb0e:	f1c0 001c 	rsb	r0, r0, #28
 800fb12:	4403      	add	r3, r0
 800fb14:	9305      	str	r3, [sp, #20]
 800fb16:	9b06      	ldr	r3, [sp, #24]
 800fb18:	4406      	add	r6, r0
 800fb1a:	4403      	add	r3, r0
 800fb1c:	9306      	str	r3, [sp, #24]
 800fb1e:	9b05      	ldr	r3, [sp, #20]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	dd05      	ble.n	800fb30 <_dtoa_r+0x758>
 800fb24:	9901      	ldr	r1, [sp, #4]
 800fb26:	461a      	mov	r2, r3
 800fb28:	4648      	mov	r0, r9
 800fb2a:	f001 fb93 	bl	8011254 <__lshift>
 800fb2e:	9001      	str	r0, [sp, #4]
 800fb30:	9b06      	ldr	r3, [sp, #24]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	dd05      	ble.n	800fb42 <_dtoa_r+0x76a>
 800fb36:	4621      	mov	r1, r4
 800fb38:	461a      	mov	r2, r3
 800fb3a:	4648      	mov	r0, r9
 800fb3c:	f001 fb8a 	bl	8011254 <__lshift>
 800fb40:	4604      	mov	r4, r0
 800fb42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d056      	beq.n	800fbf6 <_dtoa_r+0x81e>
 800fb48:	9801      	ldr	r0, [sp, #4]
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	f001 fbee 	bl	801132c <__mcmp>
 800fb50:	2800      	cmp	r0, #0
 800fb52:	da50      	bge.n	800fbf6 <_dtoa_r+0x81e>
 800fb54:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800fb58:	9304      	str	r3, [sp, #16]
 800fb5a:	9901      	ldr	r1, [sp, #4]
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	220a      	movs	r2, #10
 800fb60:	4648      	mov	r0, r9
 800fb62:	f001 f981 	bl	8010e68 <__multadd>
 800fb66:	9b08      	ldr	r3, [sp, #32]
 800fb68:	9001      	str	r0, [sp, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	f000 816e 	beq.w	800fe4c <_dtoa_r+0xa74>
 800fb70:	4629      	mov	r1, r5
 800fb72:	2300      	movs	r3, #0
 800fb74:	220a      	movs	r2, #10
 800fb76:	4648      	mov	r0, r9
 800fb78:	f001 f976 	bl	8010e68 <__multadd>
 800fb7c:	f1bb 0f00 	cmp.w	fp, #0
 800fb80:	4605      	mov	r5, r0
 800fb82:	dc64      	bgt.n	800fc4e <_dtoa_r+0x876>
 800fb84:	9b07      	ldr	r3, [sp, #28]
 800fb86:	2b02      	cmp	r3, #2
 800fb88:	dc3e      	bgt.n	800fc08 <_dtoa_r+0x830>
 800fb8a:	e060      	b.n	800fc4e <_dtoa_r+0x876>
 800fb8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb8e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fb92:	e73c      	b.n	800fa0e <_dtoa_r+0x636>
 800fb94:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800fb98:	42a3      	cmp	r3, r4
 800fb9a:	bfbf      	itttt	lt
 800fb9c:	1ae2      	sublt	r2, r4, r3
 800fb9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fba0:	189b      	addlt	r3, r3, r2
 800fba2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800fba4:	bfae      	itee	ge
 800fba6:	1b1c      	subge	r4, r3, r4
 800fba8:	4623      	movlt	r3, r4
 800fbaa:	2400      	movlt	r4, #0
 800fbac:	f1ba 0f00 	cmp.w	sl, #0
 800fbb0:	bfb5      	itete	lt
 800fbb2:	9a05      	ldrlt	r2, [sp, #20]
 800fbb4:	9e05      	ldrge	r6, [sp, #20]
 800fbb6:	eba2 060a 	sublt.w	r6, r2, sl
 800fbba:	4652      	movge	r2, sl
 800fbbc:	bfb8      	it	lt
 800fbbe:	2200      	movlt	r2, #0
 800fbc0:	e727      	b.n	800fa12 <_dtoa_r+0x63a>
 800fbc2:	9e05      	ldr	r6, [sp, #20]
 800fbc4:	9d08      	ldr	r5, [sp, #32]
 800fbc6:	461c      	mov	r4, r3
 800fbc8:	e730      	b.n	800fa2c <_dtoa_r+0x654>
 800fbca:	461a      	mov	r2, r3
 800fbcc:	e758      	b.n	800fa80 <_dtoa_r+0x6a8>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	e786      	b.n	800fae0 <_dtoa_r+0x708>
 800fbd2:	9b02      	ldr	r3, [sp, #8]
 800fbd4:	e784      	b.n	800fae0 <_dtoa_r+0x708>
 800fbd6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fbd8:	e783      	b.n	800fae2 <_dtoa_r+0x70a>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbde:	e784      	b.n	800faea <_dtoa_r+0x712>
 800fbe0:	d09d      	beq.n	800fb1e <_dtoa_r+0x746>
 800fbe2:	9b05      	ldr	r3, [sp, #20]
 800fbe4:	321c      	adds	r2, #28
 800fbe6:	4413      	add	r3, r2
 800fbe8:	9305      	str	r3, [sp, #20]
 800fbea:	9b06      	ldr	r3, [sp, #24]
 800fbec:	4416      	add	r6, r2
 800fbee:	4413      	add	r3, r2
 800fbf0:	e794      	b.n	800fb1c <_dtoa_r+0x744>
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	e7f5      	b.n	800fbe2 <_dtoa_r+0x80a>
 800fbf6:	f1ba 0f00 	cmp.w	sl, #0
 800fbfa:	f8cd 8010 	str.w	r8, [sp, #16]
 800fbfe:	46d3      	mov	fp, sl
 800fc00:	dc21      	bgt.n	800fc46 <_dtoa_r+0x86e>
 800fc02:	9b07      	ldr	r3, [sp, #28]
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	dd1e      	ble.n	800fc46 <_dtoa_r+0x86e>
 800fc08:	f1bb 0f00 	cmp.w	fp, #0
 800fc0c:	f47f aeb7 	bne.w	800f97e <_dtoa_r+0x5a6>
 800fc10:	4621      	mov	r1, r4
 800fc12:	465b      	mov	r3, fp
 800fc14:	2205      	movs	r2, #5
 800fc16:	4648      	mov	r0, r9
 800fc18:	f001 f926 	bl	8010e68 <__multadd>
 800fc1c:	4601      	mov	r1, r0
 800fc1e:	4604      	mov	r4, r0
 800fc20:	9801      	ldr	r0, [sp, #4]
 800fc22:	f001 fb83 	bl	801132c <__mcmp>
 800fc26:	2800      	cmp	r0, #0
 800fc28:	f77f aea9 	ble.w	800f97e <_dtoa_r+0x5a6>
 800fc2c:	463e      	mov	r6, r7
 800fc2e:	2331      	movs	r3, #49	@ 0x31
 800fc30:	f806 3b01 	strb.w	r3, [r6], #1
 800fc34:	9b04      	ldr	r3, [sp, #16]
 800fc36:	3301      	adds	r3, #1
 800fc38:	9304      	str	r3, [sp, #16]
 800fc3a:	e6a4      	b.n	800f986 <_dtoa_r+0x5ae>
 800fc3c:	f8cd 8010 	str.w	r8, [sp, #16]
 800fc40:	4654      	mov	r4, sl
 800fc42:	4625      	mov	r5, r4
 800fc44:	e7f2      	b.n	800fc2c <_dtoa_r+0x854>
 800fc46:	9b08      	ldr	r3, [sp, #32]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	f000 8103 	beq.w	800fe54 <_dtoa_r+0xa7c>
 800fc4e:	2e00      	cmp	r6, #0
 800fc50:	dd05      	ble.n	800fc5e <_dtoa_r+0x886>
 800fc52:	4629      	mov	r1, r5
 800fc54:	4632      	mov	r2, r6
 800fc56:	4648      	mov	r0, r9
 800fc58:	f001 fafc 	bl	8011254 <__lshift>
 800fc5c:	4605      	mov	r5, r0
 800fc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d058      	beq.n	800fd16 <_dtoa_r+0x93e>
 800fc64:	6869      	ldr	r1, [r5, #4]
 800fc66:	4648      	mov	r0, r9
 800fc68:	f001 f89c 	bl	8010da4 <_Balloc>
 800fc6c:	4606      	mov	r6, r0
 800fc6e:	b928      	cbnz	r0, 800fc7c <_dtoa_r+0x8a4>
 800fc70:	4b82      	ldr	r3, [pc, #520]	@ (800fe7c <_dtoa_r+0xaa4>)
 800fc72:	4602      	mov	r2, r0
 800fc74:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fc78:	f7ff bbc7 	b.w	800f40a <_dtoa_r+0x32>
 800fc7c:	692a      	ldr	r2, [r5, #16]
 800fc7e:	3202      	adds	r2, #2
 800fc80:	0092      	lsls	r2, r2, #2
 800fc82:	f105 010c 	add.w	r1, r5, #12
 800fc86:	300c      	adds	r0, #12
 800fc88:	f7ff fafd 	bl	800f286 <memcpy>
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	4631      	mov	r1, r6
 800fc90:	4648      	mov	r0, r9
 800fc92:	f001 fadf 	bl	8011254 <__lshift>
 800fc96:	1c7b      	adds	r3, r7, #1
 800fc98:	9305      	str	r3, [sp, #20]
 800fc9a:	eb07 030b 	add.w	r3, r7, fp
 800fc9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fca0:	9b02      	ldr	r3, [sp, #8]
 800fca2:	f003 0301 	and.w	r3, r3, #1
 800fca6:	46a8      	mov	r8, r5
 800fca8:	9308      	str	r3, [sp, #32]
 800fcaa:	4605      	mov	r5, r0
 800fcac:	9b05      	ldr	r3, [sp, #20]
 800fcae:	9801      	ldr	r0, [sp, #4]
 800fcb0:	4621      	mov	r1, r4
 800fcb2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800fcb6:	f7ff fb05 	bl	800f2c4 <quorem>
 800fcba:	4641      	mov	r1, r8
 800fcbc:	9002      	str	r0, [sp, #8]
 800fcbe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fcc2:	9801      	ldr	r0, [sp, #4]
 800fcc4:	f001 fb32 	bl	801132c <__mcmp>
 800fcc8:	462a      	mov	r2, r5
 800fcca:	9006      	str	r0, [sp, #24]
 800fccc:	4621      	mov	r1, r4
 800fcce:	4648      	mov	r0, r9
 800fcd0:	f001 fb48 	bl	8011364 <__mdiff>
 800fcd4:	68c2      	ldr	r2, [r0, #12]
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	b9fa      	cbnz	r2, 800fd1a <_dtoa_r+0x942>
 800fcda:	4601      	mov	r1, r0
 800fcdc:	9801      	ldr	r0, [sp, #4]
 800fcde:	f001 fb25 	bl	801132c <__mcmp>
 800fce2:	4602      	mov	r2, r0
 800fce4:	4631      	mov	r1, r6
 800fce6:	4648      	mov	r0, r9
 800fce8:	920a      	str	r2, [sp, #40]	@ 0x28
 800fcea:	f001 f89b 	bl	8010e24 <_Bfree>
 800fcee:	9b07      	ldr	r3, [sp, #28]
 800fcf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fcf2:	9e05      	ldr	r6, [sp, #20]
 800fcf4:	ea43 0102 	orr.w	r1, r3, r2
 800fcf8:	9b08      	ldr	r3, [sp, #32]
 800fcfa:	4319      	orrs	r1, r3
 800fcfc:	d10f      	bne.n	800fd1e <_dtoa_r+0x946>
 800fcfe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fd02:	d028      	beq.n	800fd56 <_dtoa_r+0x97e>
 800fd04:	9b06      	ldr	r3, [sp, #24]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	dd02      	ble.n	800fd10 <_dtoa_r+0x938>
 800fd0a:	9b02      	ldr	r3, [sp, #8]
 800fd0c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fd10:	f88b a000 	strb.w	sl, [fp]
 800fd14:	e639      	b.n	800f98a <_dtoa_r+0x5b2>
 800fd16:	4628      	mov	r0, r5
 800fd18:	e7bd      	b.n	800fc96 <_dtoa_r+0x8be>
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	e7e2      	b.n	800fce4 <_dtoa_r+0x90c>
 800fd1e:	9b06      	ldr	r3, [sp, #24]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	db04      	blt.n	800fd2e <_dtoa_r+0x956>
 800fd24:	9907      	ldr	r1, [sp, #28]
 800fd26:	430b      	orrs	r3, r1
 800fd28:	9908      	ldr	r1, [sp, #32]
 800fd2a:	430b      	orrs	r3, r1
 800fd2c:	d120      	bne.n	800fd70 <_dtoa_r+0x998>
 800fd2e:	2a00      	cmp	r2, #0
 800fd30:	ddee      	ble.n	800fd10 <_dtoa_r+0x938>
 800fd32:	9901      	ldr	r1, [sp, #4]
 800fd34:	2201      	movs	r2, #1
 800fd36:	4648      	mov	r0, r9
 800fd38:	f001 fa8c 	bl	8011254 <__lshift>
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	9001      	str	r0, [sp, #4]
 800fd40:	f001 faf4 	bl	801132c <__mcmp>
 800fd44:	2800      	cmp	r0, #0
 800fd46:	dc03      	bgt.n	800fd50 <_dtoa_r+0x978>
 800fd48:	d1e2      	bne.n	800fd10 <_dtoa_r+0x938>
 800fd4a:	f01a 0f01 	tst.w	sl, #1
 800fd4e:	d0df      	beq.n	800fd10 <_dtoa_r+0x938>
 800fd50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fd54:	d1d9      	bne.n	800fd0a <_dtoa_r+0x932>
 800fd56:	2339      	movs	r3, #57	@ 0x39
 800fd58:	f88b 3000 	strb.w	r3, [fp]
 800fd5c:	4633      	mov	r3, r6
 800fd5e:	461e      	mov	r6, r3
 800fd60:	3b01      	subs	r3, #1
 800fd62:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fd66:	2a39      	cmp	r2, #57	@ 0x39
 800fd68:	d053      	beq.n	800fe12 <_dtoa_r+0xa3a>
 800fd6a:	3201      	adds	r2, #1
 800fd6c:	701a      	strb	r2, [r3, #0]
 800fd6e:	e60c      	b.n	800f98a <_dtoa_r+0x5b2>
 800fd70:	2a00      	cmp	r2, #0
 800fd72:	dd07      	ble.n	800fd84 <_dtoa_r+0x9ac>
 800fd74:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fd78:	d0ed      	beq.n	800fd56 <_dtoa_r+0x97e>
 800fd7a:	f10a 0301 	add.w	r3, sl, #1
 800fd7e:	f88b 3000 	strb.w	r3, [fp]
 800fd82:	e602      	b.n	800f98a <_dtoa_r+0x5b2>
 800fd84:	9b05      	ldr	r3, [sp, #20]
 800fd86:	9a05      	ldr	r2, [sp, #20]
 800fd88:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fd8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d029      	beq.n	800fde6 <_dtoa_r+0xa0e>
 800fd92:	9901      	ldr	r1, [sp, #4]
 800fd94:	2300      	movs	r3, #0
 800fd96:	220a      	movs	r2, #10
 800fd98:	4648      	mov	r0, r9
 800fd9a:	f001 f865 	bl	8010e68 <__multadd>
 800fd9e:	45a8      	cmp	r8, r5
 800fda0:	9001      	str	r0, [sp, #4]
 800fda2:	f04f 0300 	mov.w	r3, #0
 800fda6:	f04f 020a 	mov.w	r2, #10
 800fdaa:	4641      	mov	r1, r8
 800fdac:	4648      	mov	r0, r9
 800fdae:	d107      	bne.n	800fdc0 <_dtoa_r+0x9e8>
 800fdb0:	f001 f85a 	bl	8010e68 <__multadd>
 800fdb4:	4680      	mov	r8, r0
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	9b05      	ldr	r3, [sp, #20]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	9305      	str	r3, [sp, #20]
 800fdbe:	e775      	b.n	800fcac <_dtoa_r+0x8d4>
 800fdc0:	f001 f852 	bl	8010e68 <__multadd>
 800fdc4:	4629      	mov	r1, r5
 800fdc6:	4680      	mov	r8, r0
 800fdc8:	2300      	movs	r3, #0
 800fdca:	220a      	movs	r2, #10
 800fdcc:	4648      	mov	r0, r9
 800fdce:	f001 f84b 	bl	8010e68 <__multadd>
 800fdd2:	4605      	mov	r5, r0
 800fdd4:	e7f0      	b.n	800fdb8 <_dtoa_r+0x9e0>
 800fdd6:	f1bb 0f00 	cmp.w	fp, #0
 800fdda:	bfcc      	ite	gt
 800fddc:	465e      	movgt	r6, fp
 800fdde:	2601      	movle	r6, #1
 800fde0:	443e      	add	r6, r7
 800fde2:	f04f 0800 	mov.w	r8, #0
 800fde6:	9901      	ldr	r1, [sp, #4]
 800fde8:	2201      	movs	r2, #1
 800fdea:	4648      	mov	r0, r9
 800fdec:	f001 fa32 	bl	8011254 <__lshift>
 800fdf0:	4621      	mov	r1, r4
 800fdf2:	9001      	str	r0, [sp, #4]
 800fdf4:	f001 fa9a 	bl	801132c <__mcmp>
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	dcaf      	bgt.n	800fd5c <_dtoa_r+0x984>
 800fdfc:	d102      	bne.n	800fe04 <_dtoa_r+0xa2c>
 800fdfe:	f01a 0f01 	tst.w	sl, #1
 800fe02:	d1ab      	bne.n	800fd5c <_dtoa_r+0x984>
 800fe04:	4633      	mov	r3, r6
 800fe06:	461e      	mov	r6, r3
 800fe08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe0c:	2a30      	cmp	r2, #48	@ 0x30
 800fe0e:	d0fa      	beq.n	800fe06 <_dtoa_r+0xa2e>
 800fe10:	e5bb      	b.n	800f98a <_dtoa_r+0x5b2>
 800fe12:	429f      	cmp	r7, r3
 800fe14:	d1a3      	bne.n	800fd5e <_dtoa_r+0x986>
 800fe16:	9b04      	ldr	r3, [sp, #16]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	9304      	str	r3, [sp, #16]
 800fe1c:	2331      	movs	r3, #49	@ 0x31
 800fe1e:	703b      	strb	r3, [r7, #0]
 800fe20:	e5b3      	b.n	800f98a <_dtoa_r+0x5b2>
 800fe22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fe24:	4f16      	ldr	r7, [pc, #88]	@ (800fe80 <_dtoa_r+0xaa8>)
 800fe26:	b11b      	cbz	r3, 800fe30 <_dtoa_r+0xa58>
 800fe28:	f107 0308 	add.w	r3, r7, #8
 800fe2c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fe2e:	6013      	str	r3, [r2, #0]
 800fe30:	4638      	mov	r0, r7
 800fe32:	b011      	add	sp, #68	@ 0x44
 800fe34:	ecbd 8b02 	vpop	{d8}
 800fe38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe3c:	9b07      	ldr	r3, [sp, #28]
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	f77f ae36 	ble.w	800fab0 <_dtoa_r+0x6d8>
 800fe44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe48:	2001      	movs	r0, #1
 800fe4a:	e656      	b.n	800fafa <_dtoa_r+0x722>
 800fe4c:	f1bb 0f00 	cmp.w	fp, #0
 800fe50:	f77f aed7 	ble.w	800fc02 <_dtoa_r+0x82a>
 800fe54:	463e      	mov	r6, r7
 800fe56:	9801      	ldr	r0, [sp, #4]
 800fe58:	4621      	mov	r1, r4
 800fe5a:	f7ff fa33 	bl	800f2c4 <quorem>
 800fe5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fe62:	f806 ab01 	strb.w	sl, [r6], #1
 800fe66:	1bf2      	subs	r2, r6, r7
 800fe68:	4593      	cmp	fp, r2
 800fe6a:	ddb4      	ble.n	800fdd6 <_dtoa_r+0x9fe>
 800fe6c:	9901      	ldr	r1, [sp, #4]
 800fe6e:	2300      	movs	r3, #0
 800fe70:	220a      	movs	r2, #10
 800fe72:	4648      	mov	r0, r9
 800fe74:	f000 fff8 	bl	8010e68 <__multadd>
 800fe78:	9001      	str	r0, [sp, #4]
 800fe7a:	e7ec      	b.n	800fe56 <_dtoa_r+0xa7e>
 800fe7c:	080120e5 	.word	0x080120e5
 800fe80:	08012069 	.word	0x08012069

0800fe84 <_free_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4605      	mov	r5, r0
 800fe88:	2900      	cmp	r1, #0
 800fe8a:	d041      	beq.n	800ff10 <_free_r+0x8c>
 800fe8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe90:	1f0c      	subs	r4, r1, #4
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	bfb8      	it	lt
 800fe96:	18e4      	addlt	r4, r4, r3
 800fe98:	f000 ff78 	bl	8010d8c <__malloc_lock>
 800fe9c:	4a1d      	ldr	r2, [pc, #116]	@ (800ff14 <_free_r+0x90>)
 800fe9e:	6813      	ldr	r3, [r2, #0]
 800fea0:	b933      	cbnz	r3, 800feb0 <_free_r+0x2c>
 800fea2:	6063      	str	r3, [r4, #4]
 800fea4:	6014      	str	r4, [r2, #0]
 800fea6:	4628      	mov	r0, r5
 800fea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800feac:	f000 bf74 	b.w	8010d98 <__malloc_unlock>
 800feb0:	42a3      	cmp	r3, r4
 800feb2:	d908      	bls.n	800fec6 <_free_r+0x42>
 800feb4:	6820      	ldr	r0, [r4, #0]
 800feb6:	1821      	adds	r1, r4, r0
 800feb8:	428b      	cmp	r3, r1
 800feba:	bf01      	itttt	eq
 800febc:	6819      	ldreq	r1, [r3, #0]
 800febe:	685b      	ldreq	r3, [r3, #4]
 800fec0:	1809      	addeq	r1, r1, r0
 800fec2:	6021      	streq	r1, [r4, #0]
 800fec4:	e7ed      	b.n	800fea2 <_free_r+0x1e>
 800fec6:	461a      	mov	r2, r3
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	b10b      	cbz	r3, 800fed0 <_free_r+0x4c>
 800fecc:	42a3      	cmp	r3, r4
 800fece:	d9fa      	bls.n	800fec6 <_free_r+0x42>
 800fed0:	6811      	ldr	r1, [r2, #0]
 800fed2:	1850      	adds	r0, r2, r1
 800fed4:	42a0      	cmp	r0, r4
 800fed6:	d10b      	bne.n	800fef0 <_free_r+0x6c>
 800fed8:	6820      	ldr	r0, [r4, #0]
 800feda:	4401      	add	r1, r0
 800fedc:	1850      	adds	r0, r2, r1
 800fede:	4283      	cmp	r3, r0
 800fee0:	6011      	str	r1, [r2, #0]
 800fee2:	d1e0      	bne.n	800fea6 <_free_r+0x22>
 800fee4:	6818      	ldr	r0, [r3, #0]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	6053      	str	r3, [r2, #4]
 800feea:	4408      	add	r0, r1
 800feec:	6010      	str	r0, [r2, #0]
 800feee:	e7da      	b.n	800fea6 <_free_r+0x22>
 800fef0:	d902      	bls.n	800fef8 <_free_r+0x74>
 800fef2:	230c      	movs	r3, #12
 800fef4:	602b      	str	r3, [r5, #0]
 800fef6:	e7d6      	b.n	800fea6 <_free_r+0x22>
 800fef8:	6820      	ldr	r0, [r4, #0]
 800fefa:	1821      	adds	r1, r4, r0
 800fefc:	428b      	cmp	r3, r1
 800fefe:	bf04      	itt	eq
 800ff00:	6819      	ldreq	r1, [r3, #0]
 800ff02:	685b      	ldreq	r3, [r3, #4]
 800ff04:	6063      	str	r3, [r4, #4]
 800ff06:	bf04      	itt	eq
 800ff08:	1809      	addeq	r1, r1, r0
 800ff0a:	6021      	streq	r1, [r4, #0]
 800ff0c:	6054      	str	r4, [r2, #4]
 800ff0e:	e7ca      	b.n	800fea6 <_free_r+0x22>
 800ff10:	bd38      	pop	{r3, r4, r5, pc}
 800ff12:	bf00      	nop
 800ff14:	24000da4 	.word	0x24000da4

0800ff18 <rshift>:
 800ff18:	6903      	ldr	r3, [r0, #16]
 800ff1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ff1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff22:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ff26:	f100 0414 	add.w	r4, r0, #20
 800ff2a:	dd45      	ble.n	800ffb8 <rshift+0xa0>
 800ff2c:	f011 011f 	ands.w	r1, r1, #31
 800ff30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ff34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ff38:	d10c      	bne.n	800ff54 <rshift+0x3c>
 800ff3a:	f100 0710 	add.w	r7, r0, #16
 800ff3e:	4629      	mov	r1, r5
 800ff40:	42b1      	cmp	r1, r6
 800ff42:	d334      	bcc.n	800ffae <rshift+0x96>
 800ff44:	1a9b      	subs	r3, r3, r2
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	1eea      	subs	r2, r5, #3
 800ff4a:	4296      	cmp	r6, r2
 800ff4c:	bf38      	it	cc
 800ff4e:	2300      	movcc	r3, #0
 800ff50:	4423      	add	r3, r4
 800ff52:	e015      	b.n	800ff80 <rshift+0x68>
 800ff54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ff58:	f1c1 0820 	rsb	r8, r1, #32
 800ff5c:	40cf      	lsrs	r7, r1
 800ff5e:	f105 0e04 	add.w	lr, r5, #4
 800ff62:	46a1      	mov	r9, r4
 800ff64:	4576      	cmp	r6, lr
 800ff66:	46f4      	mov	ip, lr
 800ff68:	d815      	bhi.n	800ff96 <rshift+0x7e>
 800ff6a:	1a9a      	subs	r2, r3, r2
 800ff6c:	0092      	lsls	r2, r2, #2
 800ff6e:	3a04      	subs	r2, #4
 800ff70:	3501      	adds	r5, #1
 800ff72:	42ae      	cmp	r6, r5
 800ff74:	bf38      	it	cc
 800ff76:	2200      	movcc	r2, #0
 800ff78:	18a3      	adds	r3, r4, r2
 800ff7a:	50a7      	str	r7, [r4, r2]
 800ff7c:	b107      	cbz	r7, 800ff80 <rshift+0x68>
 800ff7e:	3304      	adds	r3, #4
 800ff80:	1b1a      	subs	r2, r3, r4
 800ff82:	42a3      	cmp	r3, r4
 800ff84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ff88:	bf08      	it	eq
 800ff8a:	2300      	moveq	r3, #0
 800ff8c:	6102      	str	r2, [r0, #16]
 800ff8e:	bf08      	it	eq
 800ff90:	6143      	streq	r3, [r0, #20]
 800ff92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff96:	f8dc c000 	ldr.w	ip, [ip]
 800ff9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ff9e:	ea4c 0707 	orr.w	r7, ip, r7
 800ffa2:	f849 7b04 	str.w	r7, [r9], #4
 800ffa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ffaa:	40cf      	lsrs	r7, r1
 800ffac:	e7da      	b.n	800ff64 <rshift+0x4c>
 800ffae:	f851 cb04 	ldr.w	ip, [r1], #4
 800ffb2:	f847 cf04 	str.w	ip, [r7, #4]!
 800ffb6:	e7c3      	b.n	800ff40 <rshift+0x28>
 800ffb8:	4623      	mov	r3, r4
 800ffba:	e7e1      	b.n	800ff80 <rshift+0x68>

0800ffbc <__hexdig_fun>:
 800ffbc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ffc0:	2b09      	cmp	r3, #9
 800ffc2:	d802      	bhi.n	800ffca <__hexdig_fun+0xe>
 800ffc4:	3820      	subs	r0, #32
 800ffc6:	b2c0      	uxtb	r0, r0
 800ffc8:	4770      	bx	lr
 800ffca:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ffce:	2b05      	cmp	r3, #5
 800ffd0:	d801      	bhi.n	800ffd6 <__hexdig_fun+0x1a>
 800ffd2:	3847      	subs	r0, #71	@ 0x47
 800ffd4:	e7f7      	b.n	800ffc6 <__hexdig_fun+0xa>
 800ffd6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ffda:	2b05      	cmp	r3, #5
 800ffdc:	d801      	bhi.n	800ffe2 <__hexdig_fun+0x26>
 800ffde:	3827      	subs	r0, #39	@ 0x27
 800ffe0:	e7f1      	b.n	800ffc6 <__hexdig_fun+0xa>
 800ffe2:	2000      	movs	r0, #0
 800ffe4:	4770      	bx	lr
	...

0800ffe8 <__gethex>:
 800ffe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	b085      	sub	sp, #20
 800ffee:	468a      	mov	sl, r1
 800fff0:	9302      	str	r3, [sp, #8]
 800fff2:	680b      	ldr	r3, [r1, #0]
 800fff4:	9001      	str	r0, [sp, #4]
 800fff6:	4690      	mov	r8, r2
 800fff8:	1c9c      	adds	r4, r3, #2
 800fffa:	46a1      	mov	r9, r4
 800fffc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010000:	2830      	cmp	r0, #48	@ 0x30
 8010002:	d0fa      	beq.n	800fffa <__gethex+0x12>
 8010004:	eba9 0303 	sub.w	r3, r9, r3
 8010008:	f1a3 0b02 	sub.w	fp, r3, #2
 801000c:	f7ff ffd6 	bl	800ffbc <__hexdig_fun>
 8010010:	4605      	mov	r5, r0
 8010012:	2800      	cmp	r0, #0
 8010014:	d168      	bne.n	80100e8 <__gethex+0x100>
 8010016:	49a0      	ldr	r1, [pc, #640]	@ (8010298 <__gethex+0x2b0>)
 8010018:	2201      	movs	r2, #1
 801001a:	4648      	mov	r0, r9
 801001c:	f7ff f8a2 	bl	800f164 <strncmp>
 8010020:	4607      	mov	r7, r0
 8010022:	2800      	cmp	r0, #0
 8010024:	d167      	bne.n	80100f6 <__gethex+0x10e>
 8010026:	f899 0001 	ldrb.w	r0, [r9, #1]
 801002a:	4626      	mov	r6, r4
 801002c:	f7ff ffc6 	bl	800ffbc <__hexdig_fun>
 8010030:	2800      	cmp	r0, #0
 8010032:	d062      	beq.n	80100fa <__gethex+0x112>
 8010034:	4623      	mov	r3, r4
 8010036:	7818      	ldrb	r0, [r3, #0]
 8010038:	2830      	cmp	r0, #48	@ 0x30
 801003a:	4699      	mov	r9, r3
 801003c:	f103 0301 	add.w	r3, r3, #1
 8010040:	d0f9      	beq.n	8010036 <__gethex+0x4e>
 8010042:	f7ff ffbb 	bl	800ffbc <__hexdig_fun>
 8010046:	fab0 f580 	clz	r5, r0
 801004a:	096d      	lsrs	r5, r5, #5
 801004c:	f04f 0b01 	mov.w	fp, #1
 8010050:	464a      	mov	r2, r9
 8010052:	4616      	mov	r6, r2
 8010054:	3201      	adds	r2, #1
 8010056:	7830      	ldrb	r0, [r6, #0]
 8010058:	f7ff ffb0 	bl	800ffbc <__hexdig_fun>
 801005c:	2800      	cmp	r0, #0
 801005e:	d1f8      	bne.n	8010052 <__gethex+0x6a>
 8010060:	498d      	ldr	r1, [pc, #564]	@ (8010298 <__gethex+0x2b0>)
 8010062:	2201      	movs	r2, #1
 8010064:	4630      	mov	r0, r6
 8010066:	f7ff f87d 	bl	800f164 <strncmp>
 801006a:	2800      	cmp	r0, #0
 801006c:	d13f      	bne.n	80100ee <__gethex+0x106>
 801006e:	b944      	cbnz	r4, 8010082 <__gethex+0x9a>
 8010070:	1c74      	adds	r4, r6, #1
 8010072:	4622      	mov	r2, r4
 8010074:	4616      	mov	r6, r2
 8010076:	3201      	adds	r2, #1
 8010078:	7830      	ldrb	r0, [r6, #0]
 801007a:	f7ff ff9f 	bl	800ffbc <__hexdig_fun>
 801007e:	2800      	cmp	r0, #0
 8010080:	d1f8      	bne.n	8010074 <__gethex+0x8c>
 8010082:	1ba4      	subs	r4, r4, r6
 8010084:	00a7      	lsls	r7, r4, #2
 8010086:	7833      	ldrb	r3, [r6, #0]
 8010088:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801008c:	2b50      	cmp	r3, #80	@ 0x50
 801008e:	d13e      	bne.n	801010e <__gethex+0x126>
 8010090:	7873      	ldrb	r3, [r6, #1]
 8010092:	2b2b      	cmp	r3, #43	@ 0x2b
 8010094:	d033      	beq.n	80100fe <__gethex+0x116>
 8010096:	2b2d      	cmp	r3, #45	@ 0x2d
 8010098:	d034      	beq.n	8010104 <__gethex+0x11c>
 801009a:	1c71      	adds	r1, r6, #1
 801009c:	2400      	movs	r4, #0
 801009e:	7808      	ldrb	r0, [r1, #0]
 80100a0:	f7ff ff8c 	bl	800ffbc <__hexdig_fun>
 80100a4:	1e43      	subs	r3, r0, #1
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	2b18      	cmp	r3, #24
 80100aa:	d830      	bhi.n	801010e <__gethex+0x126>
 80100ac:	f1a0 0210 	sub.w	r2, r0, #16
 80100b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80100b4:	f7ff ff82 	bl	800ffbc <__hexdig_fun>
 80100b8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80100bc:	fa5f fc8c 	uxtb.w	ip, ip
 80100c0:	f1bc 0f18 	cmp.w	ip, #24
 80100c4:	f04f 030a 	mov.w	r3, #10
 80100c8:	d91e      	bls.n	8010108 <__gethex+0x120>
 80100ca:	b104      	cbz	r4, 80100ce <__gethex+0xe6>
 80100cc:	4252      	negs	r2, r2
 80100ce:	4417      	add	r7, r2
 80100d0:	f8ca 1000 	str.w	r1, [sl]
 80100d4:	b1ed      	cbz	r5, 8010112 <__gethex+0x12a>
 80100d6:	f1bb 0f00 	cmp.w	fp, #0
 80100da:	bf0c      	ite	eq
 80100dc:	2506      	moveq	r5, #6
 80100de:	2500      	movne	r5, #0
 80100e0:	4628      	mov	r0, r5
 80100e2:	b005      	add	sp, #20
 80100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e8:	2500      	movs	r5, #0
 80100ea:	462c      	mov	r4, r5
 80100ec:	e7b0      	b.n	8010050 <__gethex+0x68>
 80100ee:	2c00      	cmp	r4, #0
 80100f0:	d1c7      	bne.n	8010082 <__gethex+0x9a>
 80100f2:	4627      	mov	r7, r4
 80100f4:	e7c7      	b.n	8010086 <__gethex+0x9e>
 80100f6:	464e      	mov	r6, r9
 80100f8:	462f      	mov	r7, r5
 80100fa:	2501      	movs	r5, #1
 80100fc:	e7c3      	b.n	8010086 <__gethex+0x9e>
 80100fe:	2400      	movs	r4, #0
 8010100:	1cb1      	adds	r1, r6, #2
 8010102:	e7cc      	b.n	801009e <__gethex+0xb6>
 8010104:	2401      	movs	r4, #1
 8010106:	e7fb      	b.n	8010100 <__gethex+0x118>
 8010108:	fb03 0002 	mla	r0, r3, r2, r0
 801010c:	e7ce      	b.n	80100ac <__gethex+0xc4>
 801010e:	4631      	mov	r1, r6
 8010110:	e7de      	b.n	80100d0 <__gethex+0xe8>
 8010112:	eba6 0309 	sub.w	r3, r6, r9
 8010116:	3b01      	subs	r3, #1
 8010118:	4629      	mov	r1, r5
 801011a:	2b07      	cmp	r3, #7
 801011c:	dc0a      	bgt.n	8010134 <__gethex+0x14c>
 801011e:	9801      	ldr	r0, [sp, #4]
 8010120:	f000 fe40 	bl	8010da4 <_Balloc>
 8010124:	4604      	mov	r4, r0
 8010126:	b940      	cbnz	r0, 801013a <__gethex+0x152>
 8010128:	4b5c      	ldr	r3, [pc, #368]	@ (801029c <__gethex+0x2b4>)
 801012a:	4602      	mov	r2, r0
 801012c:	21e4      	movs	r1, #228	@ 0xe4
 801012e:	485c      	ldr	r0, [pc, #368]	@ (80102a0 <__gethex+0x2b8>)
 8010130:	f001 fc66 	bl	8011a00 <__assert_func>
 8010134:	3101      	adds	r1, #1
 8010136:	105b      	asrs	r3, r3, #1
 8010138:	e7ef      	b.n	801011a <__gethex+0x132>
 801013a:	f100 0a14 	add.w	sl, r0, #20
 801013e:	2300      	movs	r3, #0
 8010140:	4655      	mov	r5, sl
 8010142:	469b      	mov	fp, r3
 8010144:	45b1      	cmp	r9, r6
 8010146:	d337      	bcc.n	80101b8 <__gethex+0x1d0>
 8010148:	f845 bb04 	str.w	fp, [r5], #4
 801014c:	eba5 050a 	sub.w	r5, r5, sl
 8010150:	10ad      	asrs	r5, r5, #2
 8010152:	6125      	str	r5, [r4, #16]
 8010154:	4658      	mov	r0, fp
 8010156:	f000 ff17 	bl	8010f88 <__hi0bits>
 801015a:	016d      	lsls	r5, r5, #5
 801015c:	f8d8 6000 	ldr.w	r6, [r8]
 8010160:	1a2d      	subs	r5, r5, r0
 8010162:	42b5      	cmp	r5, r6
 8010164:	dd54      	ble.n	8010210 <__gethex+0x228>
 8010166:	1bad      	subs	r5, r5, r6
 8010168:	4629      	mov	r1, r5
 801016a:	4620      	mov	r0, r4
 801016c:	f001 faa8 	bl	80116c0 <__any_on>
 8010170:	4681      	mov	r9, r0
 8010172:	b178      	cbz	r0, 8010194 <__gethex+0x1ac>
 8010174:	1e6b      	subs	r3, r5, #1
 8010176:	1159      	asrs	r1, r3, #5
 8010178:	f003 021f 	and.w	r2, r3, #31
 801017c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010180:	f04f 0901 	mov.w	r9, #1
 8010184:	fa09 f202 	lsl.w	r2, r9, r2
 8010188:	420a      	tst	r2, r1
 801018a:	d003      	beq.n	8010194 <__gethex+0x1ac>
 801018c:	454b      	cmp	r3, r9
 801018e:	dc36      	bgt.n	80101fe <__gethex+0x216>
 8010190:	f04f 0902 	mov.w	r9, #2
 8010194:	4629      	mov	r1, r5
 8010196:	4620      	mov	r0, r4
 8010198:	f7ff febe 	bl	800ff18 <rshift>
 801019c:	442f      	add	r7, r5
 801019e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101a2:	42bb      	cmp	r3, r7
 80101a4:	da42      	bge.n	801022c <__gethex+0x244>
 80101a6:	9801      	ldr	r0, [sp, #4]
 80101a8:	4621      	mov	r1, r4
 80101aa:	f000 fe3b 	bl	8010e24 <_Bfree>
 80101ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101b0:	2300      	movs	r3, #0
 80101b2:	6013      	str	r3, [r2, #0]
 80101b4:	25a3      	movs	r5, #163	@ 0xa3
 80101b6:	e793      	b.n	80100e0 <__gethex+0xf8>
 80101b8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80101bc:	2a2e      	cmp	r2, #46	@ 0x2e
 80101be:	d012      	beq.n	80101e6 <__gethex+0x1fe>
 80101c0:	2b20      	cmp	r3, #32
 80101c2:	d104      	bne.n	80101ce <__gethex+0x1e6>
 80101c4:	f845 bb04 	str.w	fp, [r5], #4
 80101c8:	f04f 0b00 	mov.w	fp, #0
 80101cc:	465b      	mov	r3, fp
 80101ce:	7830      	ldrb	r0, [r6, #0]
 80101d0:	9303      	str	r3, [sp, #12]
 80101d2:	f7ff fef3 	bl	800ffbc <__hexdig_fun>
 80101d6:	9b03      	ldr	r3, [sp, #12]
 80101d8:	f000 000f 	and.w	r0, r0, #15
 80101dc:	4098      	lsls	r0, r3
 80101de:	ea4b 0b00 	orr.w	fp, fp, r0
 80101e2:	3304      	adds	r3, #4
 80101e4:	e7ae      	b.n	8010144 <__gethex+0x15c>
 80101e6:	45b1      	cmp	r9, r6
 80101e8:	d8ea      	bhi.n	80101c0 <__gethex+0x1d8>
 80101ea:	492b      	ldr	r1, [pc, #172]	@ (8010298 <__gethex+0x2b0>)
 80101ec:	9303      	str	r3, [sp, #12]
 80101ee:	2201      	movs	r2, #1
 80101f0:	4630      	mov	r0, r6
 80101f2:	f7fe ffb7 	bl	800f164 <strncmp>
 80101f6:	9b03      	ldr	r3, [sp, #12]
 80101f8:	2800      	cmp	r0, #0
 80101fa:	d1e1      	bne.n	80101c0 <__gethex+0x1d8>
 80101fc:	e7a2      	b.n	8010144 <__gethex+0x15c>
 80101fe:	1ea9      	subs	r1, r5, #2
 8010200:	4620      	mov	r0, r4
 8010202:	f001 fa5d 	bl	80116c0 <__any_on>
 8010206:	2800      	cmp	r0, #0
 8010208:	d0c2      	beq.n	8010190 <__gethex+0x1a8>
 801020a:	f04f 0903 	mov.w	r9, #3
 801020e:	e7c1      	b.n	8010194 <__gethex+0x1ac>
 8010210:	da09      	bge.n	8010226 <__gethex+0x23e>
 8010212:	1b75      	subs	r5, r6, r5
 8010214:	4621      	mov	r1, r4
 8010216:	9801      	ldr	r0, [sp, #4]
 8010218:	462a      	mov	r2, r5
 801021a:	f001 f81b 	bl	8011254 <__lshift>
 801021e:	1b7f      	subs	r7, r7, r5
 8010220:	4604      	mov	r4, r0
 8010222:	f100 0a14 	add.w	sl, r0, #20
 8010226:	f04f 0900 	mov.w	r9, #0
 801022a:	e7b8      	b.n	801019e <__gethex+0x1b6>
 801022c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010230:	42bd      	cmp	r5, r7
 8010232:	dd6f      	ble.n	8010314 <__gethex+0x32c>
 8010234:	1bed      	subs	r5, r5, r7
 8010236:	42ae      	cmp	r6, r5
 8010238:	dc34      	bgt.n	80102a4 <__gethex+0x2bc>
 801023a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801023e:	2b02      	cmp	r3, #2
 8010240:	d022      	beq.n	8010288 <__gethex+0x2a0>
 8010242:	2b03      	cmp	r3, #3
 8010244:	d024      	beq.n	8010290 <__gethex+0x2a8>
 8010246:	2b01      	cmp	r3, #1
 8010248:	d115      	bne.n	8010276 <__gethex+0x28e>
 801024a:	42ae      	cmp	r6, r5
 801024c:	d113      	bne.n	8010276 <__gethex+0x28e>
 801024e:	2e01      	cmp	r6, #1
 8010250:	d10b      	bne.n	801026a <__gethex+0x282>
 8010252:	9a02      	ldr	r2, [sp, #8]
 8010254:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010258:	6013      	str	r3, [r2, #0]
 801025a:	2301      	movs	r3, #1
 801025c:	6123      	str	r3, [r4, #16]
 801025e:	f8ca 3000 	str.w	r3, [sl]
 8010262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010264:	2562      	movs	r5, #98	@ 0x62
 8010266:	601c      	str	r4, [r3, #0]
 8010268:	e73a      	b.n	80100e0 <__gethex+0xf8>
 801026a:	1e71      	subs	r1, r6, #1
 801026c:	4620      	mov	r0, r4
 801026e:	f001 fa27 	bl	80116c0 <__any_on>
 8010272:	2800      	cmp	r0, #0
 8010274:	d1ed      	bne.n	8010252 <__gethex+0x26a>
 8010276:	9801      	ldr	r0, [sp, #4]
 8010278:	4621      	mov	r1, r4
 801027a:	f000 fdd3 	bl	8010e24 <_Bfree>
 801027e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010280:	2300      	movs	r3, #0
 8010282:	6013      	str	r3, [r2, #0]
 8010284:	2550      	movs	r5, #80	@ 0x50
 8010286:	e72b      	b.n	80100e0 <__gethex+0xf8>
 8010288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1f3      	bne.n	8010276 <__gethex+0x28e>
 801028e:	e7e0      	b.n	8010252 <__gethex+0x26a>
 8010290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010292:	2b00      	cmp	r3, #0
 8010294:	d1dd      	bne.n	8010252 <__gethex+0x26a>
 8010296:	e7ee      	b.n	8010276 <__gethex+0x28e>
 8010298:	08011f0d 	.word	0x08011f0d
 801029c:	080120e5 	.word	0x080120e5
 80102a0:	080120f6 	.word	0x080120f6
 80102a4:	1e6f      	subs	r7, r5, #1
 80102a6:	f1b9 0f00 	cmp.w	r9, #0
 80102aa:	d130      	bne.n	801030e <__gethex+0x326>
 80102ac:	b127      	cbz	r7, 80102b8 <__gethex+0x2d0>
 80102ae:	4639      	mov	r1, r7
 80102b0:	4620      	mov	r0, r4
 80102b2:	f001 fa05 	bl	80116c0 <__any_on>
 80102b6:	4681      	mov	r9, r0
 80102b8:	117a      	asrs	r2, r7, #5
 80102ba:	2301      	movs	r3, #1
 80102bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80102c0:	f007 071f 	and.w	r7, r7, #31
 80102c4:	40bb      	lsls	r3, r7
 80102c6:	4213      	tst	r3, r2
 80102c8:	4629      	mov	r1, r5
 80102ca:	4620      	mov	r0, r4
 80102cc:	bf18      	it	ne
 80102ce:	f049 0902 	orrne.w	r9, r9, #2
 80102d2:	f7ff fe21 	bl	800ff18 <rshift>
 80102d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80102da:	1b76      	subs	r6, r6, r5
 80102dc:	2502      	movs	r5, #2
 80102de:	f1b9 0f00 	cmp.w	r9, #0
 80102e2:	d047      	beq.n	8010374 <__gethex+0x38c>
 80102e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80102e8:	2b02      	cmp	r3, #2
 80102ea:	d015      	beq.n	8010318 <__gethex+0x330>
 80102ec:	2b03      	cmp	r3, #3
 80102ee:	d017      	beq.n	8010320 <__gethex+0x338>
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d109      	bne.n	8010308 <__gethex+0x320>
 80102f4:	f019 0f02 	tst.w	r9, #2
 80102f8:	d006      	beq.n	8010308 <__gethex+0x320>
 80102fa:	f8da 3000 	ldr.w	r3, [sl]
 80102fe:	ea49 0903 	orr.w	r9, r9, r3
 8010302:	f019 0f01 	tst.w	r9, #1
 8010306:	d10e      	bne.n	8010326 <__gethex+0x33e>
 8010308:	f045 0510 	orr.w	r5, r5, #16
 801030c:	e032      	b.n	8010374 <__gethex+0x38c>
 801030e:	f04f 0901 	mov.w	r9, #1
 8010312:	e7d1      	b.n	80102b8 <__gethex+0x2d0>
 8010314:	2501      	movs	r5, #1
 8010316:	e7e2      	b.n	80102de <__gethex+0x2f6>
 8010318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801031a:	f1c3 0301 	rsb	r3, r3, #1
 801031e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010322:	2b00      	cmp	r3, #0
 8010324:	d0f0      	beq.n	8010308 <__gethex+0x320>
 8010326:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801032a:	f104 0314 	add.w	r3, r4, #20
 801032e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010332:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010336:	f04f 0c00 	mov.w	ip, #0
 801033a:	4618      	mov	r0, r3
 801033c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010340:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010344:	d01b      	beq.n	801037e <__gethex+0x396>
 8010346:	3201      	adds	r2, #1
 8010348:	6002      	str	r2, [r0, #0]
 801034a:	2d02      	cmp	r5, #2
 801034c:	f104 0314 	add.w	r3, r4, #20
 8010350:	d13c      	bne.n	80103cc <__gethex+0x3e4>
 8010352:	f8d8 2000 	ldr.w	r2, [r8]
 8010356:	3a01      	subs	r2, #1
 8010358:	42b2      	cmp	r2, r6
 801035a:	d109      	bne.n	8010370 <__gethex+0x388>
 801035c:	1171      	asrs	r1, r6, #5
 801035e:	2201      	movs	r2, #1
 8010360:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010364:	f006 061f 	and.w	r6, r6, #31
 8010368:	fa02 f606 	lsl.w	r6, r2, r6
 801036c:	421e      	tst	r6, r3
 801036e:	d13a      	bne.n	80103e6 <__gethex+0x3fe>
 8010370:	f045 0520 	orr.w	r5, r5, #32
 8010374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010376:	601c      	str	r4, [r3, #0]
 8010378:	9b02      	ldr	r3, [sp, #8]
 801037a:	601f      	str	r7, [r3, #0]
 801037c:	e6b0      	b.n	80100e0 <__gethex+0xf8>
 801037e:	4299      	cmp	r1, r3
 8010380:	f843 cc04 	str.w	ip, [r3, #-4]
 8010384:	d8d9      	bhi.n	801033a <__gethex+0x352>
 8010386:	68a3      	ldr	r3, [r4, #8]
 8010388:	459b      	cmp	fp, r3
 801038a:	db17      	blt.n	80103bc <__gethex+0x3d4>
 801038c:	6861      	ldr	r1, [r4, #4]
 801038e:	9801      	ldr	r0, [sp, #4]
 8010390:	3101      	adds	r1, #1
 8010392:	f000 fd07 	bl	8010da4 <_Balloc>
 8010396:	4681      	mov	r9, r0
 8010398:	b918      	cbnz	r0, 80103a2 <__gethex+0x3ba>
 801039a:	4b1a      	ldr	r3, [pc, #104]	@ (8010404 <__gethex+0x41c>)
 801039c:	4602      	mov	r2, r0
 801039e:	2184      	movs	r1, #132	@ 0x84
 80103a0:	e6c5      	b.n	801012e <__gethex+0x146>
 80103a2:	6922      	ldr	r2, [r4, #16]
 80103a4:	3202      	adds	r2, #2
 80103a6:	f104 010c 	add.w	r1, r4, #12
 80103aa:	0092      	lsls	r2, r2, #2
 80103ac:	300c      	adds	r0, #12
 80103ae:	f7fe ff6a 	bl	800f286 <memcpy>
 80103b2:	4621      	mov	r1, r4
 80103b4:	9801      	ldr	r0, [sp, #4]
 80103b6:	f000 fd35 	bl	8010e24 <_Bfree>
 80103ba:	464c      	mov	r4, r9
 80103bc:	6923      	ldr	r3, [r4, #16]
 80103be:	1c5a      	adds	r2, r3, #1
 80103c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103c4:	6122      	str	r2, [r4, #16]
 80103c6:	2201      	movs	r2, #1
 80103c8:	615a      	str	r2, [r3, #20]
 80103ca:	e7be      	b.n	801034a <__gethex+0x362>
 80103cc:	6922      	ldr	r2, [r4, #16]
 80103ce:	455a      	cmp	r2, fp
 80103d0:	dd0b      	ble.n	80103ea <__gethex+0x402>
 80103d2:	2101      	movs	r1, #1
 80103d4:	4620      	mov	r0, r4
 80103d6:	f7ff fd9f 	bl	800ff18 <rshift>
 80103da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103de:	3701      	adds	r7, #1
 80103e0:	42bb      	cmp	r3, r7
 80103e2:	f6ff aee0 	blt.w	80101a6 <__gethex+0x1be>
 80103e6:	2501      	movs	r5, #1
 80103e8:	e7c2      	b.n	8010370 <__gethex+0x388>
 80103ea:	f016 061f 	ands.w	r6, r6, #31
 80103ee:	d0fa      	beq.n	80103e6 <__gethex+0x3fe>
 80103f0:	4453      	add	r3, sl
 80103f2:	f1c6 0620 	rsb	r6, r6, #32
 80103f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80103fa:	f000 fdc5 	bl	8010f88 <__hi0bits>
 80103fe:	42b0      	cmp	r0, r6
 8010400:	dbe7      	blt.n	80103d2 <__gethex+0x3ea>
 8010402:	e7f0      	b.n	80103e6 <__gethex+0x3fe>
 8010404:	080120e5 	.word	0x080120e5

08010408 <L_shift>:
 8010408:	f1c2 0208 	rsb	r2, r2, #8
 801040c:	0092      	lsls	r2, r2, #2
 801040e:	b570      	push	{r4, r5, r6, lr}
 8010410:	f1c2 0620 	rsb	r6, r2, #32
 8010414:	6843      	ldr	r3, [r0, #4]
 8010416:	6804      	ldr	r4, [r0, #0]
 8010418:	fa03 f506 	lsl.w	r5, r3, r6
 801041c:	432c      	orrs	r4, r5
 801041e:	40d3      	lsrs	r3, r2
 8010420:	6004      	str	r4, [r0, #0]
 8010422:	f840 3f04 	str.w	r3, [r0, #4]!
 8010426:	4288      	cmp	r0, r1
 8010428:	d3f4      	bcc.n	8010414 <L_shift+0xc>
 801042a:	bd70      	pop	{r4, r5, r6, pc}

0801042c <__match>:
 801042c:	b530      	push	{r4, r5, lr}
 801042e:	6803      	ldr	r3, [r0, #0]
 8010430:	3301      	adds	r3, #1
 8010432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010436:	b914      	cbnz	r4, 801043e <__match+0x12>
 8010438:	6003      	str	r3, [r0, #0]
 801043a:	2001      	movs	r0, #1
 801043c:	bd30      	pop	{r4, r5, pc}
 801043e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010442:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010446:	2d19      	cmp	r5, #25
 8010448:	bf98      	it	ls
 801044a:	3220      	addls	r2, #32
 801044c:	42a2      	cmp	r2, r4
 801044e:	d0f0      	beq.n	8010432 <__match+0x6>
 8010450:	2000      	movs	r0, #0
 8010452:	e7f3      	b.n	801043c <__match+0x10>

08010454 <__hexnan>:
 8010454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010458:	680b      	ldr	r3, [r1, #0]
 801045a:	6801      	ldr	r1, [r0, #0]
 801045c:	115e      	asrs	r6, r3, #5
 801045e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010462:	f013 031f 	ands.w	r3, r3, #31
 8010466:	b087      	sub	sp, #28
 8010468:	bf18      	it	ne
 801046a:	3604      	addne	r6, #4
 801046c:	2500      	movs	r5, #0
 801046e:	1f37      	subs	r7, r6, #4
 8010470:	4682      	mov	sl, r0
 8010472:	4690      	mov	r8, r2
 8010474:	9301      	str	r3, [sp, #4]
 8010476:	f846 5c04 	str.w	r5, [r6, #-4]
 801047a:	46b9      	mov	r9, r7
 801047c:	463c      	mov	r4, r7
 801047e:	9502      	str	r5, [sp, #8]
 8010480:	46ab      	mov	fp, r5
 8010482:	784a      	ldrb	r2, [r1, #1]
 8010484:	1c4b      	adds	r3, r1, #1
 8010486:	9303      	str	r3, [sp, #12]
 8010488:	b342      	cbz	r2, 80104dc <__hexnan+0x88>
 801048a:	4610      	mov	r0, r2
 801048c:	9105      	str	r1, [sp, #20]
 801048e:	9204      	str	r2, [sp, #16]
 8010490:	f7ff fd94 	bl	800ffbc <__hexdig_fun>
 8010494:	2800      	cmp	r0, #0
 8010496:	d151      	bne.n	801053c <__hexnan+0xe8>
 8010498:	9a04      	ldr	r2, [sp, #16]
 801049a:	9905      	ldr	r1, [sp, #20]
 801049c:	2a20      	cmp	r2, #32
 801049e:	d818      	bhi.n	80104d2 <__hexnan+0x7e>
 80104a0:	9b02      	ldr	r3, [sp, #8]
 80104a2:	459b      	cmp	fp, r3
 80104a4:	dd13      	ble.n	80104ce <__hexnan+0x7a>
 80104a6:	454c      	cmp	r4, r9
 80104a8:	d206      	bcs.n	80104b8 <__hexnan+0x64>
 80104aa:	2d07      	cmp	r5, #7
 80104ac:	dc04      	bgt.n	80104b8 <__hexnan+0x64>
 80104ae:	462a      	mov	r2, r5
 80104b0:	4649      	mov	r1, r9
 80104b2:	4620      	mov	r0, r4
 80104b4:	f7ff ffa8 	bl	8010408 <L_shift>
 80104b8:	4544      	cmp	r4, r8
 80104ba:	d952      	bls.n	8010562 <__hexnan+0x10e>
 80104bc:	2300      	movs	r3, #0
 80104be:	f1a4 0904 	sub.w	r9, r4, #4
 80104c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80104c6:	f8cd b008 	str.w	fp, [sp, #8]
 80104ca:	464c      	mov	r4, r9
 80104cc:	461d      	mov	r5, r3
 80104ce:	9903      	ldr	r1, [sp, #12]
 80104d0:	e7d7      	b.n	8010482 <__hexnan+0x2e>
 80104d2:	2a29      	cmp	r2, #41	@ 0x29
 80104d4:	d157      	bne.n	8010586 <__hexnan+0x132>
 80104d6:	3102      	adds	r1, #2
 80104d8:	f8ca 1000 	str.w	r1, [sl]
 80104dc:	f1bb 0f00 	cmp.w	fp, #0
 80104e0:	d051      	beq.n	8010586 <__hexnan+0x132>
 80104e2:	454c      	cmp	r4, r9
 80104e4:	d206      	bcs.n	80104f4 <__hexnan+0xa0>
 80104e6:	2d07      	cmp	r5, #7
 80104e8:	dc04      	bgt.n	80104f4 <__hexnan+0xa0>
 80104ea:	462a      	mov	r2, r5
 80104ec:	4649      	mov	r1, r9
 80104ee:	4620      	mov	r0, r4
 80104f0:	f7ff ff8a 	bl	8010408 <L_shift>
 80104f4:	4544      	cmp	r4, r8
 80104f6:	d936      	bls.n	8010566 <__hexnan+0x112>
 80104f8:	f1a8 0204 	sub.w	r2, r8, #4
 80104fc:	4623      	mov	r3, r4
 80104fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8010502:	f842 1f04 	str.w	r1, [r2, #4]!
 8010506:	429f      	cmp	r7, r3
 8010508:	d2f9      	bcs.n	80104fe <__hexnan+0xaa>
 801050a:	1b3b      	subs	r3, r7, r4
 801050c:	f023 0303 	bic.w	r3, r3, #3
 8010510:	3304      	adds	r3, #4
 8010512:	3401      	adds	r4, #1
 8010514:	3e03      	subs	r6, #3
 8010516:	42b4      	cmp	r4, r6
 8010518:	bf88      	it	hi
 801051a:	2304      	movhi	r3, #4
 801051c:	4443      	add	r3, r8
 801051e:	2200      	movs	r2, #0
 8010520:	f843 2b04 	str.w	r2, [r3], #4
 8010524:	429f      	cmp	r7, r3
 8010526:	d2fb      	bcs.n	8010520 <__hexnan+0xcc>
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	b91b      	cbnz	r3, 8010534 <__hexnan+0xe0>
 801052c:	4547      	cmp	r7, r8
 801052e:	d128      	bne.n	8010582 <__hexnan+0x12e>
 8010530:	2301      	movs	r3, #1
 8010532:	603b      	str	r3, [r7, #0]
 8010534:	2005      	movs	r0, #5
 8010536:	b007      	add	sp, #28
 8010538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801053c:	3501      	adds	r5, #1
 801053e:	2d08      	cmp	r5, #8
 8010540:	f10b 0b01 	add.w	fp, fp, #1
 8010544:	dd06      	ble.n	8010554 <__hexnan+0x100>
 8010546:	4544      	cmp	r4, r8
 8010548:	d9c1      	bls.n	80104ce <__hexnan+0x7a>
 801054a:	2300      	movs	r3, #0
 801054c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010550:	2501      	movs	r5, #1
 8010552:	3c04      	subs	r4, #4
 8010554:	6822      	ldr	r2, [r4, #0]
 8010556:	f000 000f 	and.w	r0, r0, #15
 801055a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801055e:	6020      	str	r0, [r4, #0]
 8010560:	e7b5      	b.n	80104ce <__hexnan+0x7a>
 8010562:	2508      	movs	r5, #8
 8010564:	e7b3      	b.n	80104ce <__hexnan+0x7a>
 8010566:	9b01      	ldr	r3, [sp, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d0dd      	beq.n	8010528 <__hexnan+0xd4>
 801056c:	f1c3 0320 	rsb	r3, r3, #32
 8010570:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010574:	40da      	lsrs	r2, r3
 8010576:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801057a:	4013      	ands	r3, r2
 801057c:	f846 3c04 	str.w	r3, [r6, #-4]
 8010580:	e7d2      	b.n	8010528 <__hexnan+0xd4>
 8010582:	3f04      	subs	r7, #4
 8010584:	e7d0      	b.n	8010528 <__hexnan+0xd4>
 8010586:	2004      	movs	r0, #4
 8010588:	e7d5      	b.n	8010536 <__hexnan+0xe2>

0801058a <__ssputs_r>:
 801058a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801058e:	688e      	ldr	r6, [r1, #8]
 8010590:	461f      	mov	r7, r3
 8010592:	42be      	cmp	r6, r7
 8010594:	680b      	ldr	r3, [r1, #0]
 8010596:	4682      	mov	sl, r0
 8010598:	460c      	mov	r4, r1
 801059a:	4690      	mov	r8, r2
 801059c:	d82d      	bhi.n	80105fa <__ssputs_r+0x70>
 801059e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105a2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80105a6:	d026      	beq.n	80105f6 <__ssputs_r+0x6c>
 80105a8:	6965      	ldr	r5, [r4, #20]
 80105aa:	6909      	ldr	r1, [r1, #16]
 80105ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105b0:	eba3 0901 	sub.w	r9, r3, r1
 80105b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105b8:	1c7b      	adds	r3, r7, #1
 80105ba:	444b      	add	r3, r9
 80105bc:	106d      	asrs	r5, r5, #1
 80105be:	429d      	cmp	r5, r3
 80105c0:	bf38      	it	cc
 80105c2:	461d      	movcc	r5, r3
 80105c4:	0553      	lsls	r3, r2, #21
 80105c6:	d527      	bpl.n	8010618 <__ssputs_r+0x8e>
 80105c8:	4629      	mov	r1, r5
 80105ca:	f000 faa1 	bl	8010b10 <_malloc_r>
 80105ce:	4606      	mov	r6, r0
 80105d0:	b360      	cbz	r0, 801062c <__ssputs_r+0xa2>
 80105d2:	6921      	ldr	r1, [r4, #16]
 80105d4:	464a      	mov	r2, r9
 80105d6:	f7fe fe56 	bl	800f286 <memcpy>
 80105da:	89a3      	ldrh	r3, [r4, #12]
 80105dc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80105e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105e4:	81a3      	strh	r3, [r4, #12]
 80105e6:	6126      	str	r6, [r4, #16]
 80105e8:	6165      	str	r5, [r4, #20]
 80105ea:	444e      	add	r6, r9
 80105ec:	eba5 0509 	sub.w	r5, r5, r9
 80105f0:	6026      	str	r6, [r4, #0]
 80105f2:	60a5      	str	r5, [r4, #8]
 80105f4:	463e      	mov	r6, r7
 80105f6:	42be      	cmp	r6, r7
 80105f8:	d900      	bls.n	80105fc <__ssputs_r+0x72>
 80105fa:	463e      	mov	r6, r7
 80105fc:	6820      	ldr	r0, [r4, #0]
 80105fe:	4632      	mov	r2, r6
 8010600:	4641      	mov	r1, r8
 8010602:	f001 f9b0 	bl	8011966 <memmove>
 8010606:	68a3      	ldr	r3, [r4, #8]
 8010608:	1b9b      	subs	r3, r3, r6
 801060a:	60a3      	str	r3, [r4, #8]
 801060c:	6823      	ldr	r3, [r4, #0]
 801060e:	4433      	add	r3, r6
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	2000      	movs	r0, #0
 8010614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010618:	462a      	mov	r2, r5
 801061a:	f001 f872 	bl	8011702 <_realloc_r>
 801061e:	4606      	mov	r6, r0
 8010620:	2800      	cmp	r0, #0
 8010622:	d1e0      	bne.n	80105e6 <__ssputs_r+0x5c>
 8010624:	6921      	ldr	r1, [r4, #16]
 8010626:	4650      	mov	r0, sl
 8010628:	f7ff fc2c 	bl	800fe84 <_free_r>
 801062c:	230c      	movs	r3, #12
 801062e:	f8ca 3000 	str.w	r3, [sl]
 8010632:	89a3      	ldrh	r3, [r4, #12]
 8010634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010638:	81a3      	strh	r3, [r4, #12]
 801063a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801063e:	e7e9      	b.n	8010614 <__ssputs_r+0x8a>

08010640 <_svfiprintf_r>:
 8010640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010644:	4698      	mov	r8, r3
 8010646:	898b      	ldrh	r3, [r1, #12]
 8010648:	061b      	lsls	r3, r3, #24
 801064a:	b09d      	sub	sp, #116	@ 0x74
 801064c:	4607      	mov	r7, r0
 801064e:	460d      	mov	r5, r1
 8010650:	4614      	mov	r4, r2
 8010652:	d510      	bpl.n	8010676 <_svfiprintf_r+0x36>
 8010654:	690b      	ldr	r3, [r1, #16]
 8010656:	b973      	cbnz	r3, 8010676 <_svfiprintf_r+0x36>
 8010658:	2140      	movs	r1, #64	@ 0x40
 801065a:	f000 fa59 	bl	8010b10 <_malloc_r>
 801065e:	6028      	str	r0, [r5, #0]
 8010660:	6128      	str	r0, [r5, #16]
 8010662:	b930      	cbnz	r0, 8010672 <_svfiprintf_r+0x32>
 8010664:	230c      	movs	r3, #12
 8010666:	603b      	str	r3, [r7, #0]
 8010668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801066c:	b01d      	add	sp, #116	@ 0x74
 801066e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010672:	2340      	movs	r3, #64	@ 0x40
 8010674:	616b      	str	r3, [r5, #20]
 8010676:	2300      	movs	r3, #0
 8010678:	9309      	str	r3, [sp, #36]	@ 0x24
 801067a:	2320      	movs	r3, #32
 801067c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010680:	f8cd 800c 	str.w	r8, [sp, #12]
 8010684:	2330      	movs	r3, #48	@ 0x30
 8010686:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010824 <_svfiprintf_r+0x1e4>
 801068a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801068e:	f04f 0901 	mov.w	r9, #1
 8010692:	4623      	mov	r3, r4
 8010694:	469a      	mov	sl, r3
 8010696:	f813 2b01 	ldrb.w	r2, [r3], #1
 801069a:	b10a      	cbz	r2, 80106a0 <_svfiprintf_r+0x60>
 801069c:	2a25      	cmp	r2, #37	@ 0x25
 801069e:	d1f9      	bne.n	8010694 <_svfiprintf_r+0x54>
 80106a0:	ebba 0b04 	subs.w	fp, sl, r4
 80106a4:	d00b      	beq.n	80106be <_svfiprintf_r+0x7e>
 80106a6:	465b      	mov	r3, fp
 80106a8:	4622      	mov	r2, r4
 80106aa:	4629      	mov	r1, r5
 80106ac:	4638      	mov	r0, r7
 80106ae:	f7ff ff6c 	bl	801058a <__ssputs_r>
 80106b2:	3001      	adds	r0, #1
 80106b4:	f000 80a7 	beq.w	8010806 <_svfiprintf_r+0x1c6>
 80106b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106ba:	445a      	add	r2, fp
 80106bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80106be:	f89a 3000 	ldrb.w	r3, [sl]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f000 809f 	beq.w	8010806 <_svfiprintf_r+0x1c6>
 80106c8:	2300      	movs	r3, #0
 80106ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80106ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106d2:	f10a 0a01 	add.w	sl, sl, #1
 80106d6:	9304      	str	r3, [sp, #16]
 80106d8:	9307      	str	r3, [sp, #28]
 80106da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80106de:	931a      	str	r3, [sp, #104]	@ 0x68
 80106e0:	4654      	mov	r4, sl
 80106e2:	2205      	movs	r2, #5
 80106e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106e8:	484e      	ldr	r0, [pc, #312]	@ (8010824 <_svfiprintf_r+0x1e4>)
 80106ea:	f7ef fe11 	bl	8000310 <memchr>
 80106ee:	9a04      	ldr	r2, [sp, #16]
 80106f0:	b9d8      	cbnz	r0, 801072a <_svfiprintf_r+0xea>
 80106f2:	06d0      	lsls	r0, r2, #27
 80106f4:	bf44      	itt	mi
 80106f6:	2320      	movmi	r3, #32
 80106f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106fc:	0711      	lsls	r1, r2, #28
 80106fe:	bf44      	itt	mi
 8010700:	232b      	movmi	r3, #43	@ 0x2b
 8010702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010706:	f89a 3000 	ldrb.w	r3, [sl]
 801070a:	2b2a      	cmp	r3, #42	@ 0x2a
 801070c:	d015      	beq.n	801073a <_svfiprintf_r+0xfa>
 801070e:	9a07      	ldr	r2, [sp, #28]
 8010710:	4654      	mov	r4, sl
 8010712:	2000      	movs	r0, #0
 8010714:	f04f 0c0a 	mov.w	ip, #10
 8010718:	4621      	mov	r1, r4
 801071a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801071e:	3b30      	subs	r3, #48	@ 0x30
 8010720:	2b09      	cmp	r3, #9
 8010722:	d94b      	bls.n	80107bc <_svfiprintf_r+0x17c>
 8010724:	b1b0      	cbz	r0, 8010754 <_svfiprintf_r+0x114>
 8010726:	9207      	str	r2, [sp, #28]
 8010728:	e014      	b.n	8010754 <_svfiprintf_r+0x114>
 801072a:	eba0 0308 	sub.w	r3, r0, r8
 801072e:	fa09 f303 	lsl.w	r3, r9, r3
 8010732:	4313      	orrs	r3, r2
 8010734:	9304      	str	r3, [sp, #16]
 8010736:	46a2      	mov	sl, r4
 8010738:	e7d2      	b.n	80106e0 <_svfiprintf_r+0xa0>
 801073a:	9b03      	ldr	r3, [sp, #12]
 801073c:	1d19      	adds	r1, r3, #4
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	9103      	str	r1, [sp, #12]
 8010742:	2b00      	cmp	r3, #0
 8010744:	bfbb      	ittet	lt
 8010746:	425b      	neglt	r3, r3
 8010748:	f042 0202 	orrlt.w	r2, r2, #2
 801074c:	9307      	strge	r3, [sp, #28]
 801074e:	9307      	strlt	r3, [sp, #28]
 8010750:	bfb8      	it	lt
 8010752:	9204      	strlt	r2, [sp, #16]
 8010754:	7823      	ldrb	r3, [r4, #0]
 8010756:	2b2e      	cmp	r3, #46	@ 0x2e
 8010758:	d10a      	bne.n	8010770 <_svfiprintf_r+0x130>
 801075a:	7863      	ldrb	r3, [r4, #1]
 801075c:	2b2a      	cmp	r3, #42	@ 0x2a
 801075e:	d132      	bne.n	80107c6 <_svfiprintf_r+0x186>
 8010760:	9b03      	ldr	r3, [sp, #12]
 8010762:	1d1a      	adds	r2, r3, #4
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	9203      	str	r2, [sp, #12]
 8010768:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801076c:	3402      	adds	r4, #2
 801076e:	9305      	str	r3, [sp, #20]
 8010770:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010834 <_svfiprintf_r+0x1f4>
 8010774:	7821      	ldrb	r1, [r4, #0]
 8010776:	2203      	movs	r2, #3
 8010778:	4650      	mov	r0, sl
 801077a:	f7ef fdc9 	bl	8000310 <memchr>
 801077e:	b138      	cbz	r0, 8010790 <_svfiprintf_r+0x150>
 8010780:	9b04      	ldr	r3, [sp, #16]
 8010782:	eba0 000a 	sub.w	r0, r0, sl
 8010786:	2240      	movs	r2, #64	@ 0x40
 8010788:	4082      	lsls	r2, r0
 801078a:	4313      	orrs	r3, r2
 801078c:	3401      	adds	r4, #1
 801078e:	9304      	str	r3, [sp, #16]
 8010790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010794:	4824      	ldr	r0, [pc, #144]	@ (8010828 <_svfiprintf_r+0x1e8>)
 8010796:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801079a:	2206      	movs	r2, #6
 801079c:	f7ef fdb8 	bl	8000310 <memchr>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d036      	beq.n	8010812 <_svfiprintf_r+0x1d2>
 80107a4:	4b21      	ldr	r3, [pc, #132]	@ (801082c <_svfiprintf_r+0x1ec>)
 80107a6:	bb1b      	cbnz	r3, 80107f0 <_svfiprintf_r+0x1b0>
 80107a8:	9b03      	ldr	r3, [sp, #12]
 80107aa:	3307      	adds	r3, #7
 80107ac:	f023 0307 	bic.w	r3, r3, #7
 80107b0:	3308      	adds	r3, #8
 80107b2:	9303      	str	r3, [sp, #12]
 80107b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107b6:	4433      	add	r3, r6
 80107b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80107ba:	e76a      	b.n	8010692 <_svfiprintf_r+0x52>
 80107bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80107c0:	460c      	mov	r4, r1
 80107c2:	2001      	movs	r0, #1
 80107c4:	e7a8      	b.n	8010718 <_svfiprintf_r+0xd8>
 80107c6:	2300      	movs	r3, #0
 80107c8:	3401      	adds	r4, #1
 80107ca:	9305      	str	r3, [sp, #20]
 80107cc:	4619      	mov	r1, r3
 80107ce:	f04f 0c0a 	mov.w	ip, #10
 80107d2:	4620      	mov	r0, r4
 80107d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107d8:	3a30      	subs	r2, #48	@ 0x30
 80107da:	2a09      	cmp	r2, #9
 80107dc:	d903      	bls.n	80107e6 <_svfiprintf_r+0x1a6>
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d0c6      	beq.n	8010770 <_svfiprintf_r+0x130>
 80107e2:	9105      	str	r1, [sp, #20]
 80107e4:	e7c4      	b.n	8010770 <_svfiprintf_r+0x130>
 80107e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80107ea:	4604      	mov	r4, r0
 80107ec:	2301      	movs	r3, #1
 80107ee:	e7f0      	b.n	80107d2 <_svfiprintf_r+0x192>
 80107f0:	ab03      	add	r3, sp, #12
 80107f2:	9300      	str	r3, [sp, #0]
 80107f4:	462a      	mov	r2, r5
 80107f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010830 <_svfiprintf_r+0x1f0>)
 80107f8:	a904      	add	r1, sp, #16
 80107fa:	4638      	mov	r0, r7
 80107fc:	f7fc ff00 	bl	800d600 <_printf_float>
 8010800:	1c42      	adds	r2, r0, #1
 8010802:	4606      	mov	r6, r0
 8010804:	d1d6      	bne.n	80107b4 <_svfiprintf_r+0x174>
 8010806:	89ab      	ldrh	r3, [r5, #12]
 8010808:	065b      	lsls	r3, r3, #25
 801080a:	f53f af2d 	bmi.w	8010668 <_svfiprintf_r+0x28>
 801080e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010810:	e72c      	b.n	801066c <_svfiprintf_r+0x2c>
 8010812:	ab03      	add	r3, sp, #12
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	462a      	mov	r2, r5
 8010818:	4b05      	ldr	r3, [pc, #20]	@ (8010830 <_svfiprintf_r+0x1f0>)
 801081a:	a904      	add	r1, sp, #16
 801081c:	4638      	mov	r0, r7
 801081e:	f7fd f977 	bl	800db10 <_printf_i>
 8010822:	e7ed      	b.n	8010800 <_svfiprintf_r+0x1c0>
 8010824:	08012156 	.word	0x08012156
 8010828:	08012160 	.word	0x08012160
 801082c:	0800d601 	.word	0x0800d601
 8010830:	0801058b 	.word	0x0801058b
 8010834:	0801215c 	.word	0x0801215c

08010838 <__sfputc_r>:
 8010838:	6893      	ldr	r3, [r2, #8]
 801083a:	3b01      	subs	r3, #1
 801083c:	2b00      	cmp	r3, #0
 801083e:	b410      	push	{r4}
 8010840:	6093      	str	r3, [r2, #8]
 8010842:	da08      	bge.n	8010856 <__sfputc_r+0x1e>
 8010844:	6994      	ldr	r4, [r2, #24]
 8010846:	42a3      	cmp	r3, r4
 8010848:	db01      	blt.n	801084e <__sfputc_r+0x16>
 801084a:	290a      	cmp	r1, #10
 801084c:	d103      	bne.n	8010856 <__sfputc_r+0x1e>
 801084e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010852:	f000 bf84 	b.w	801175e <__swbuf_r>
 8010856:	6813      	ldr	r3, [r2, #0]
 8010858:	1c58      	adds	r0, r3, #1
 801085a:	6010      	str	r0, [r2, #0]
 801085c:	7019      	strb	r1, [r3, #0]
 801085e:	4608      	mov	r0, r1
 8010860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010864:	4770      	bx	lr

08010866 <__sfputs_r>:
 8010866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010868:	4606      	mov	r6, r0
 801086a:	460f      	mov	r7, r1
 801086c:	4614      	mov	r4, r2
 801086e:	18d5      	adds	r5, r2, r3
 8010870:	42ac      	cmp	r4, r5
 8010872:	d101      	bne.n	8010878 <__sfputs_r+0x12>
 8010874:	2000      	movs	r0, #0
 8010876:	e007      	b.n	8010888 <__sfputs_r+0x22>
 8010878:	f814 1b01 	ldrb.w	r1, [r4], #1
 801087c:	463a      	mov	r2, r7
 801087e:	4630      	mov	r0, r6
 8010880:	f7ff ffda 	bl	8010838 <__sfputc_r>
 8010884:	1c43      	adds	r3, r0, #1
 8010886:	d1f3      	bne.n	8010870 <__sfputs_r+0xa>
 8010888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801088c <_vfiprintf_r>:
 801088c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010890:	460d      	mov	r5, r1
 8010892:	b09d      	sub	sp, #116	@ 0x74
 8010894:	4614      	mov	r4, r2
 8010896:	4698      	mov	r8, r3
 8010898:	4606      	mov	r6, r0
 801089a:	b118      	cbz	r0, 80108a4 <_vfiprintf_r+0x18>
 801089c:	6a03      	ldr	r3, [r0, #32]
 801089e:	b90b      	cbnz	r3, 80108a4 <_vfiprintf_r+0x18>
 80108a0:	f7fd fd86 	bl	800e3b0 <__sinit>
 80108a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108a6:	07d9      	lsls	r1, r3, #31
 80108a8:	d405      	bmi.n	80108b6 <_vfiprintf_r+0x2a>
 80108aa:	89ab      	ldrh	r3, [r5, #12]
 80108ac:	059a      	lsls	r2, r3, #22
 80108ae:	d402      	bmi.n	80108b6 <_vfiprintf_r+0x2a>
 80108b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108b2:	f7fe fce6 	bl	800f282 <__retarget_lock_acquire_recursive>
 80108b6:	89ab      	ldrh	r3, [r5, #12]
 80108b8:	071b      	lsls	r3, r3, #28
 80108ba:	d501      	bpl.n	80108c0 <_vfiprintf_r+0x34>
 80108bc:	692b      	ldr	r3, [r5, #16]
 80108be:	b99b      	cbnz	r3, 80108e8 <_vfiprintf_r+0x5c>
 80108c0:	4629      	mov	r1, r5
 80108c2:	4630      	mov	r0, r6
 80108c4:	f000 ff8a 	bl	80117dc <__swsetup_r>
 80108c8:	b170      	cbz	r0, 80108e8 <_vfiprintf_r+0x5c>
 80108ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108cc:	07dc      	lsls	r4, r3, #31
 80108ce:	d504      	bpl.n	80108da <_vfiprintf_r+0x4e>
 80108d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80108d4:	b01d      	add	sp, #116	@ 0x74
 80108d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108da:	89ab      	ldrh	r3, [r5, #12]
 80108dc:	0598      	lsls	r0, r3, #22
 80108de:	d4f7      	bmi.n	80108d0 <_vfiprintf_r+0x44>
 80108e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108e2:	f7fe fccf 	bl	800f284 <__retarget_lock_release_recursive>
 80108e6:	e7f3      	b.n	80108d0 <_vfiprintf_r+0x44>
 80108e8:	2300      	movs	r3, #0
 80108ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80108ec:	2320      	movs	r3, #32
 80108ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80108f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80108f6:	2330      	movs	r3, #48	@ 0x30
 80108f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010aa8 <_vfiprintf_r+0x21c>
 80108fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010900:	f04f 0901 	mov.w	r9, #1
 8010904:	4623      	mov	r3, r4
 8010906:	469a      	mov	sl, r3
 8010908:	f813 2b01 	ldrb.w	r2, [r3], #1
 801090c:	b10a      	cbz	r2, 8010912 <_vfiprintf_r+0x86>
 801090e:	2a25      	cmp	r2, #37	@ 0x25
 8010910:	d1f9      	bne.n	8010906 <_vfiprintf_r+0x7a>
 8010912:	ebba 0b04 	subs.w	fp, sl, r4
 8010916:	d00b      	beq.n	8010930 <_vfiprintf_r+0xa4>
 8010918:	465b      	mov	r3, fp
 801091a:	4622      	mov	r2, r4
 801091c:	4629      	mov	r1, r5
 801091e:	4630      	mov	r0, r6
 8010920:	f7ff ffa1 	bl	8010866 <__sfputs_r>
 8010924:	3001      	adds	r0, #1
 8010926:	f000 80a7 	beq.w	8010a78 <_vfiprintf_r+0x1ec>
 801092a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801092c:	445a      	add	r2, fp
 801092e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010930:	f89a 3000 	ldrb.w	r3, [sl]
 8010934:	2b00      	cmp	r3, #0
 8010936:	f000 809f 	beq.w	8010a78 <_vfiprintf_r+0x1ec>
 801093a:	2300      	movs	r3, #0
 801093c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010944:	f10a 0a01 	add.w	sl, sl, #1
 8010948:	9304      	str	r3, [sp, #16]
 801094a:	9307      	str	r3, [sp, #28]
 801094c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010950:	931a      	str	r3, [sp, #104]	@ 0x68
 8010952:	4654      	mov	r4, sl
 8010954:	2205      	movs	r2, #5
 8010956:	f814 1b01 	ldrb.w	r1, [r4], #1
 801095a:	4853      	ldr	r0, [pc, #332]	@ (8010aa8 <_vfiprintf_r+0x21c>)
 801095c:	f7ef fcd8 	bl	8000310 <memchr>
 8010960:	9a04      	ldr	r2, [sp, #16]
 8010962:	b9d8      	cbnz	r0, 801099c <_vfiprintf_r+0x110>
 8010964:	06d1      	lsls	r1, r2, #27
 8010966:	bf44      	itt	mi
 8010968:	2320      	movmi	r3, #32
 801096a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801096e:	0713      	lsls	r3, r2, #28
 8010970:	bf44      	itt	mi
 8010972:	232b      	movmi	r3, #43	@ 0x2b
 8010974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010978:	f89a 3000 	ldrb.w	r3, [sl]
 801097c:	2b2a      	cmp	r3, #42	@ 0x2a
 801097e:	d015      	beq.n	80109ac <_vfiprintf_r+0x120>
 8010980:	9a07      	ldr	r2, [sp, #28]
 8010982:	4654      	mov	r4, sl
 8010984:	2000      	movs	r0, #0
 8010986:	f04f 0c0a 	mov.w	ip, #10
 801098a:	4621      	mov	r1, r4
 801098c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010990:	3b30      	subs	r3, #48	@ 0x30
 8010992:	2b09      	cmp	r3, #9
 8010994:	d94b      	bls.n	8010a2e <_vfiprintf_r+0x1a2>
 8010996:	b1b0      	cbz	r0, 80109c6 <_vfiprintf_r+0x13a>
 8010998:	9207      	str	r2, [sp, #28]
 801099a:	e014      	b.n	80109c6 <_vfiprintf_r+0x13a>
 801099c:	eba0 0308 	sub.w	r3, r0, r8
 80109a0:	fa09 f303 	lsl.w	r3, r9, r3
 80109a4:	4313      	orrs	r3, r2
 80109a6:	9304      	str	r3, [sp, #16]
 80109a8:	46a2      	mov	sl, r4
 80109aa:	e7d2      	b.n	8010952 <_vfiprintf_r+0xc6>
 80109ac:	9b03      	ldr	r3, [sp, #12]
 80109ae:	1d19      	adds	r1, r3, #4
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	9103      	str	r1, [sp, #12]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	bfbb      	ittet	lt
 80109b8:	425b      	neglt	r3, r3
 80109ba:	f042 0202 	orrlt.w	r2, r2, #2
 80109be:	9307      	strge	r3, [sp, #28]
 80109c0:	9307      	strlt	r3, [sp, #28]
 80109c2:	bfb8      	it	lt
 80109c4:	9204      	strlt	r2, [sp, #16]
 80109c6:	7823      	ldrb	r3, [r4, #0]
 80109c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80109ca:	d10a      	bne.n	80109e2 <_vfiprintf_r+0x156>
 80109cc:	7863      	ldrb	r3, [r4, #1]
 80109ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80109d0:	d132      	bne.n	8010a38 <_vfiprintf_r+0x1ac>
 80109d2:	9b03      	ldr	r3, [sp, #12]
 80109d4:	1d1a      	adds	r2, r3, #4
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	9203      	str	r2, [sp, #12]
 80109da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80109de:	3402      	adds	r4, #2
 80109e0:	9305      	str	r3, [sp, #20]
 80109e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010ab8 <_vfiprintf_r+0x22c>
 80109e6:	7821      	ldrb	r1, [r4, #0]
 80109e8:	2203      	movs	r2, #3
 80109ea:	4650      	mov	r0, sl
 80109ec:	f7ef fc90 	bl	8000310 <memchr>
 80109f0:	b138      	cbz	r0, 8010a02 <_vfiprintf_r+0x176>
 80109f2:	9b04      	ldr	r3, [sp, #16]
 80109f4:	eba0 000a 	sub.w	r0, r0, sl
 80109f8:	2240      	movs	r2, #64	@ 0x40
 80109fa:	4082      	lsls	r2, r0
 80109fc:	4313      	orrs	r3, r2
 80109fe:	3401      	adds	r4, #1
 8010a00:	9304      	str	r3, [sp, #16]
 8010a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a06:	4829      	ldr	r0, [pc, #164]	@ (8010aac <_vfiprintf_r+0x220>)
 8010a08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a0c:	2206      	movs	r2, #6
 8010a0e:	f7ef fc7f 	bl	8000310 <memchr>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d03f      	beq.n	8010a96 <_vfiprintf_r+0x20a>
 8010a16:	4b26      	ldr	r3, [pc, #152]	@ (8010ab0 <_vfiprintf_r+0x224>)
 8010a18:	bb1b      	cbnz	r3, 8010a62 <_vfiprintf_r+0x1d6>
 8010a1a:	9b03      	ldr	r3, [sp, #12]
 8010a1c:	3307      	adds	r3, #7
 8010a1e:	f023 0307 	bic.w	r3, r3, #7
 8010a22:	3308      	adds	r3, #8
 8010a24:	9303      	str	r3, [sp, #12]
 8010a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a28:	443b      	add	r3, r7
 8010a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a2c:	e76a      	b.n	8010904 <_vfiprintf_r+0x78>
 8010a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a32:	460c      	mov	r4, r1
 8010a34:	2001      	movs	r0, #1
 8010a36:	e7a8      	b.n	801098a <_vfiprintf_r+0xfe>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	3401      	adds	r4, #1
 8010a3c:	9305      	str	r3, [sp, #20]
 8010a3e:	4619      	mov	r1, r3
 8010a40:	f04f 0c0a 	mov.w	ip, #10
 8010a44:	4620      	mov	r0, r4
 8010a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a4a:	3a30      	subs	r2, #48	@ 0x30
 8010a4c:	2a09      	cmp	r2, #9
 8010a4e:	d903      	bls.n	8010a58 <_vfiprintf_r+0x1cc>
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d0c6      	beq.n	80109e2 <_vfiprintf_r+0x156>
 8010a54:	9105      	str	r1, [sp, #20]
 8010a56:	e7c4      	b.n	80109e2 <_vfiprintf_r+0x156>
 8010a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e7f0      	b.n	8010a44 <_vfiprintf_r+0x1b8>
 8010a62:	ab03      	add	r3, sp, #12
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	462a      	mov	r2, r5
 8010a68:	4b12      	ldr	r3, [pc, #72]	@ (8010ab4 <_vfiprintf_r+0x228>)
 8010a6a:	a904      	add	r1, sp, #16
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	f7fc fdc7 	bl	800d600 <_printf_float>
 8010a72:	4607      	mov	r7, r0
 8010a74:	1c78      	adds	r0, r7, #1
 8010a76:	d1d6      	bne.n	8010a26 <_vfiprintf_r+0x19a>
 8010a78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a7a:	07d9      	lsls	r1, r3, #31
 8010a7c:	d405      	bmi.n	8010a8a <_vfiprintf_r+0x1fe>
 8010a7e:	89ab      	ldrh	r3, [r5, #12]
 8010a80:	059a      	lsls	r2, r3, #22
 8010a82:	d402      	bmi.n	8010a8a <_vfiprintf_r+0x1fe>
 8010a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a86:	f7fe fbfd 	bl	800f284 <__retarget_lock_release_recursive>
 8010a8a:	89ab      	ldrh	r3, [r5, #12]
 8010a8c:	065b      	lsls	r3, r3, #25
 8010a8e:	f53f af1f 	bmi.w	80108d0 <_vfiprintf_r+0x44>
 8010a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a94:	e71e      	b.n	80108d4 <_vfiprintf_r+0x48>
 8010a96:	ab03      	add	r3, sp, #12
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	462a      	mov	r2, r5
 8010a9c:	4b05      	ldr	r3, [pc, #20]	@ (8010ab4 <_vfiprintf_r+0x228>)
 8010a9e:	a904      	add	r1, sp, #16
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f7fd f835 	bl	800db10 <_printf_i>
 8010aa6:	e7e4      	b.n	8010a72 <_vfiprintf_r+0x1e6>
 8010aa8:	08012156 	.word	0x08012156
 8010aac:	08012160 	.word	0x08012160
 8010ab0:	0800d601 	.word	0x0800d601
 8010ab4:	08010867 	.word	0x08010867
 8010ab8:	0801215c 	.word	0x0801215c

08010abc <malloc>:
 8010abc:	4b02      	ldr	r3, [pc, #8]	@ (8010ac8 <malloc+0xc>)
 8010abe:	4601      	mov	r1, r0
 8010ac0:	6818      	ldr	r0, [r3, #0]
 8010ac2:	f000 b825 	b.w	8010b10 <_malloc_r>
 8010ac6:	bf00      	nop
 8010ac8:	24000194 	.word	0x24000194

08010acc <sbrk_aligned>:
 8010acc:	b570      	push	{r4, r5, r6, lr}
 8010ace:	4e0f      	ldr	r6, [pc, #60]	@ (8010b0c <sbrk_aligned+0x40>)
 8010ad0:	460c      	mov	r4, r1
 8010ad2:	6831      	ldr	r1, [r6, #0]
 8010ad4:	4605      	mov	r5, r0
 8010ad6:	b911      	cbnz	r1, 8010ade <sbrk_aligned+0x12>
 8010ad8:	f000 ff82 	bl	80119e0 <_sbrk_r>
 8010adc:	6030      	str	r0, [r6, #0]
 8010ade:	4621      	mov	r1, r4
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	f000 ff7d 	bl	80119e0 <_sbrk_r>
 8010ae6:	1c43      	adds	r3, r0, #1
 8010ae8:	d103      	bne.n	8010af2 <sbrk_aligned+0x26>
 8010aea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010aee:	4620      	mov	r0, r4
 8010af0:	bd70      	pop	{r4, r5, r6, pc}
 8010af2:	1cc4      	adds	r4, r0, #3
 8010af4:	f024 0403 	bic.w	r4, r4, #3
 8010af8:	42a0      	cmp	r0, r4
 8010afa:	d0f8      	beq.n	8010aee <sbrk_aligned+0x22>
 8010afc:	1a21      	subs	r1, r4, r0
 8010afe:	4628      	mov	r0, r5
 8010b00:	f000 ff6e 	bl	80119e0 <_sbrk_r>
 8010b04:	3001      	adds	r0, #1
 8010b06:	d1f2      	bne.n	8010aee <sbrk_aligned+0x22>
 8010b08:	e7ef      	b.n	8010aea <sbrk_aligned+0x1e>
 8010b0a:	bf00      	nop
 8010b0c:	24000da0 	.word	0x24000da0

08010b10 <_malloc_r>:
 8010b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b14:	1ccd      	adds	r5, r1, #3
 8010b16:	f025 0503 	bic.w	r5, r5, #3
 8010b1a:	3508      	adds	r5, #8
 8010b1c:	2d0c      	cmp	r5, #12
 8010b1e:	bf38      	it	cc
 8010b20:	250c      	movcc	r5, #12
 8010b22:	2d00      	cmp	r5, #0
 8010b24:	4606      	mov	r6, r0
 8010b26:	db01      	blt.n	8010b2c <_malloc_r+0x1c>
 8010b28:	42a9      	cmp	r1, r5
 8010b2a:	d904      	bls.n	8010b36 <_malloc_r+0x26>
 8010b2c:	230c      	movs	r3, #12
 8010b2e:	6033      	str	r3, [r6, #0]
 8010b30:	2000      	movs	r0, #0
 8010b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c0c <_malloc_r+0xfc>
 8010b3a:	f000 f927 	bl	8010d8c <__malloc_lock>
 8010b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8010b42:	461c      	mov	r4, r3
 8010b44:	bb44      	cbnz	r4, 8010b98 <_malloc_r+0x88>
 8010b46:	4629      	mov	r1, r5
 8010b48:	4630      	mov	r0, r6
 8010b4a:	f7ff ffbf 	bl	8010acc <sbrk_aligned>
 8010b4e:	1c43      	adds	r3, r0, #1
 8010b50:	4604      	mov	r4, r0
 8010b52:	d158      	bne.n	8010c06 <_malloc_r+0xf6>
 8010b54:	f8d8 4000 	ldr.w	r4, [r8]
 8010b58:	4627      	mov	r7, r4
 8010b5a:	2f00      	cmp	r7, #0
 8010b5c:	d143      	bne.n	8010be6 <_malloc_r+0xd6>
 8010b5e:	2c00      	cmp	r4, #0
 8010b60:	d04b      	beq.n	8010bfa <_malloc_r+0xea>
 8010b62:	6823      	ldr	r3, [r4, #0]
 8010b64:	4639      	mov	r1, r7
 8010b66:	4630      	mov	r0, r6
 8010b68:	eb04 0903 	add.w	r9, r4, r3
 8010b6c:	f000 ff38 	bl	80119e0 <_sbrk_r>
 8010b70:	4581      	cmp	r9, r0
 8010b72:	d142      	bne.n	8010bfa <_malloc_r+0xea>
 8010b74:	6821      	ldr	r1, [r4, #0]
 8010b76:	1a6d      	subs	r5, r5, r1
 8010b78:	4629      	mov	r1, r5
 8010b7a:	4630      	mov	r0, r6
 8010b7c:	f7ff ffa6 	bl	8010acc <sbrk_aligned>
 8010b80:	3001      	adds	r0, #1
 8010b82:	d03a      	beq.n	8010bfa <_malloc_r+0xea>
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	442b      	add	r3, r5
 8010b88:	6023      	str	r3, [r4, #0]
 8010b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8010b8e:	685a      	ldr	r2, [r3, #4]
 8010b90:	bb62      	cbnz	r2, 8010bec <_malloc_r+0xdc>
 8010b92:	f8c8 7000 	str.w	r7, [r8]
 8010b96:	e00f      	b.n	8010bb8 <_malloc_r+0xa8>
 8010b98:	6822      	ldr	r2, [r4, #0]
 8010b9a:	1b52      	subs	r2, r2, r5
 8010b9c:	d420      	bmi.n	8010be0 <_malloc_r+0xd0>
 8010b9e:	2a0b      	cmp	r2, #11
 8010ba0:	d917      	bls.n	8010bd2 <_malloc_r+0xc2>
 8010ba2:	1961      	adds	r1, r4, r5
 8010ba4:	42a3      	cmp	r3, r4
 8010ba6:	6025      	str	r5, [r4, #0]
 8010ba8:	bf18      	it	ne
 8010baa:	6059      	strne	r1, [r3, #4]
 8010bac:	6863      	ldr	r3, [r4, #4]
 8010bae:	bf08      	it	eq
 8010bb0:	f8c8 1000 	streq.w	r1, [r8]
 8010bb4:	5162      	str	r2, [r4, r5]
 8010bb6:	604b      	str	r3, [r1, #4]
 8010bb8:	4630      	mov	r0, r6
 8010bba:	f000 f8ed 	bl	8010d98 <__malloc_unlock>
 8010bbe:	f104 000b 	add.w	r0, r4, #11
 8010bc2:	1d23      	adds	r3, r4, #4
 8010bc4:	f020 0007 	bic.w	r0, r0, #7
 8010bc8:	1ac2      	subs	r2, r0, r3
 8010bca:	bf1c      	itt	ne
 8010bcc:	1a1b      	subne	r3, r3, r0
 8010bce:	50a3      	strne	r3, [r4, r2]
 8010bd0:	e7af      	b.n	8010b32 <_malloc_r+0x22>
 8010bd2:	6862      	ldr	r2, [r4, #4]
 8010bd4:	42a3      	cmp	r3, r4
 8010bd6:	bf0c      	ite	eq
 8010bd8:	f8c8 2000 	streq.w	r2, [r8]
 8010bdc:	605a      	strne	r2, [r3, #4]
 8010bde:	e7eb      	b.n	8010bb8 <_malloc_r+0xa8>
 8010be0:	4623      	mov	r3, r4
 8010be2:	6864      	ldr	r4, [r4, #4]
 8010be4:	e7ae      	b.n	8010b44 <_malloc_r+0x34>
 8010be6:	463c      	mov	r4, r7
 8010be8:	687f      	ldr	r7, [r7, #4]
 8010bea:	e7b6      	b.n	8010b5a <_malloc_r+0x4a>
 8010bec:	461a      	mov	r2, r3
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	42a3      	cmp	r3, r4
 8010bf2:	d1fb      	bne.n	8010bec <_malloc_r+0xdc>
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	6053      	str	r3, [r2, #4]
 8010bf8:	e7de      	b.n	8010bb8 <_malloc_r+0xa8>
 8010bfa:	230c      	movs	r3, #12
 8010bfc:	6033      	str	r3, [r6, #0]
 8010bfe:	4630      	mov	r0, r6
 8010c00:	f000 f8ca 	bl	8010d98 <__malloc_unlock>
 8010c04:	e794      	b.n	8010b30 <_malloc_r+0x20>
 8010c06:	6005      	str	r5, [r0, #0]
 8010c08:	e7d6      	b.n	8010bb8 <_malloc_r+0xa8>
 8010c0a:	bf00      	nop
 8010c0c:	24000da4 	.word	0x24000da4

08010c10 <__ascii_mbtowc>:
 8010c10:	b082      	sub	sp, #8
 8010c12:	b901      	cbnz	r1, 8010c16 <__ascii_mbtowc+0x6>
 8010c14:	a901      	add	r1, sp, #4
 8010c16:	b142      	cbz	r2, 8010c2a <__ascii_mbtowc+0x1a>
 8010c18:	b14b      	cbz	r3, 8010c2e <__ascii_mbtowc+0x1e>
 8010c1a:	7813      	ldrb	r3, [r2, #0]
 8010c1c:	600b      	str	r3, [r1, #0]
 8010c1e:	7812      	ldrb	r2, [r2, #0]
 8010c20:	1e10      	subs	r0, r2, #0
 8010c22:	bf18      	it	ne
 8010c24:	2001      	movne	r0, #1
 8010c26:	b002      	add	sp, #8
 8010c28:	4770      	bx	lr
 8010c2a:	4610      	mov	r0, r2
 8010c2c:	e7fb      	b.n	8010c26 <__ascii_mbtowc+0x16>
 8010c2e:	f06f 0001 	mvn.w	r0, #1
 8010c32:	e7f8      	b.n	8010c26 <__ascii_mbtowc+0x16>

08010c34 <__sflush_r>:
 8010c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c3c:	0716      	lsls	r6, r2, #28
 8010c3e:	4605      	mov	r5, r0
 8010c40:	460c      	mov	r4, r1
 8010c42:	d454      	bmi.n	8010cee <__sflush_r+0xba>
 8010c44:	684b      	ldr	r3, [r1, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dc02      	bgt.n	8010c50 <__sflush_r+0x1c>
 8010c4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	dd48      	ble.n	8010ce2 <__sflush_r+0xae>
 8010c50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c52:	2e00      	cmp	r6, #0
 8010c54:	d045      	beq.n	8010ce2 <__sflush_r+0xae>
 8010c56:	2300      	movs	r3, #0
 8010c58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010c5c:	682f      	ldr	r7, [r5, #0]
 8010c5e:	6a21      	ldr	r1, [r4, #32]
 8010c60:	602b      	str	r3, [r5, #0]
 8010c62:	d030      	beq.n	8010cc6 <__sflush_r+0x92>
 8010c64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010c66:	89a3      	ldrh	r3, [r4, #12]
 8010c68:	0759      	lsls	r1, r3, #29
 8010c6a:	d505      	bpl.n	8010c78 <__sflush_r+0x44>
 8010c6c:	6863      	ldr	r3, [r4, #4]
 8010c6e:	1ad2      	subs	r2, r2, r3
 8010c70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c72:	b10b      	cbz	r3, 8010c78 <__sflush_r+0x44>
 8010c74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c76:	1ad2      	subs	r2, r2, r3
 8010c78:	2300      	movs	r3, #0
 8010c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c7c:	6a21      	ldr	r1, [r4, #32]
 8010c7e:	4628      	mov	r0, r5
 8010c80:	47b0      	blx	r6
 8010c82:	1c43      	adds	r3, r0, #1
 8010c84:	89a3      	ldrh	r3, [r4, #12]
 8010c86:	d106      	bne.n	8010c96 <__sflush_r+0x62>
 8010c88:	6829      	ldr	r1, [r5, #0]
 8010c8a:	291d      	cmp	r1, #29
 8010c8c:	d82b      	bhi.n	8010ce6 <__sflush_r+0xb2>
 8010c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8010d38 <__sflush_r+0x104>)
 8010c90:	410a      	asrs	r2, r1
 8010c92:	07d6      	lsls	r6, r2, #31
 8010c94:	d427      	bmi.n	8010ce6 <__sflush_r+0xb2>
 8010c96:	2200      	movs	r2, #0
 8010c98:	6062      	str	r2, [r4, #4]
 8010c9a:	04d9      	lsls	r1, r3, #19
 8010c9c:	6922      	ldr	r2, [r4, #16]
 8010c9e:	6022      	str	r2, [r4, #0]
 8010ca0:	d504      	bpl.n	8010cac <__sflush_r+0x78>
 8010ca2:	1c42      	adds	r2, r0, #1
 8010ca4:	d101      	bne.n	8010caa <__sflush_r+0x76>
 8010ca6:	682b      	ldr	r3, [r5, #0]
 8010ca8:	b903      	cbnz	r3, 8010cac <__sflush_r+0x78>
 8010caa:	6560      	str	r0, [r4, #84]	@ 0x54
 8010cac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010cae:	602f      	str	r7, [r5, #0]
 8010cb0:	b1b9      	cbz	r1, 8010ce2 <__sflush_r+0xae>
 8010cb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cb6:	4299      	cmp	r1, r3
 8010cb8:	d002      	beq.n	8010cc0 <__sflush_r+0x8c>
 8010cba:	4628      	mov	r0, r5
 8010cbc:	f7ff f8e2 	bl	800fe84 <_free_r>
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010cc4:	e00d      	b.n	8010ce2 <__sflush_r+0xae>
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	4628      	mov	r0, r5
 8010cca:	47b0      	blx	r6
 8010ccc:	4602      	mov	r2, r0
 8010cce:	1c50      	adds	r0, r2, #1
 8010cd0:	d1c9      	bne.n	8010c66 <__sflush_r+0x32>
 8010cd2:	682b      	ldr	r3, [r5, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d0c6      	beq.n	8010c66 <__sflush_r+0x32>
 8010cd8:	2b1d      	cmp	r3, #29
 8010cda:	d001      	beq.n	8010ce0 <__sflush_r+0xac>
 8010cdc:	2b16      	cmp	r3, #22
 8010cde:	d11e      	bne.n	8010d1e <__sflush_r+0xea>
 8010ce0:	602f      	str	r7, [r5, #0]
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	e022      	b.n	8010d2c <__sflush_r+0xf8>
 8010ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cea:	b21b      	sxth	r3, r3
 8010cec:	e01b      	b.n	8010d26 <__sflush_r+0xf2>
 8010cee:	690f      	ldr	r7, [r1, #16]
 8010cf0:	2f00      	cmp	r7, #0
 8010cf2:	d0f6      	beq.n	8010ce2 <__sflush_r+0xae>
 8010cf4:	0793      	lsls	r3, r2, #30
 8010cf6:	680e      	ldr	r6, [r1, #0]
 8010cf8:	bf08      	it	eq
 8010cfa:	694b      	ldreq	r3, [r1, #20]
 8010cfc:	600f      	str	r7, [r1, #0]
 8010cfe:	bf18      	it	ne
 8010d00:	2300      	movne	r3, #0
 8010d02:	eba6 0807 	sub.w	r8, r6, r7
 8010d06:	608b      	str	r3, [r1, #8]
 8010d08:	f1b8 0f00 	cmp.w	r8, #0
 8010d0c:	dde9      	ble.n	8010ce2 <__sflush_r+0xae>
 8010d0e:	6a21      	ldr	r1, [r4, #32]
 8010d10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010d12:	4643      	mov	r3, r8
 8010d14:	463a      	mov	r2, r7
 8010d16:	4628      	mov	r0, r5
 8010d18:	47b0      	blx	r6
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	dc08      	bgt.n	8010d30 <__sflush_r+0xfc>
 8010d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d26:	81a3      	strh	r3, [r4, #12]
 8010d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d30:	4407      	add	r7, r0
 8010d32:	eba8 0800 	sub.w	r8, r8, r0
 8010d36:	e7e7      	b.n	8010d08 <__sflush_r+0xd4>
 8010d38:	dfbffffe 	.word	0xdfbffffe

08010d3c <_fflush_r>:
 8010d3c:	b538      	push	{r3, r4, r5, lr}
 8010d3e:	690b      	ldr	r3, [r1, #16]
 8010d40:	4605      	mov	r5, r0
 8010d42:	460c      	mov	r4, r1
 8010d44:	b913      	cbnz	r3, 8010d4c <_fflush_r+0x10>
 8010d46:	2500      	movs	r5, #0
 8010d48:	4628      	mov	r0, r5
 8010d4a:	bd38      	pop	{r3, r4, r5, pc}
 8010d4c:	b118      	cbz	r0, 8010d56 <_fflush_r+0x1a>
 8010d4e:	6a03      	ldr	r3, [r0, #32]
 8010d50:	b90b      	cbnz	r3, 8010d56 <_fflush_r+0x1a>
 8010d52:	f7fd fb2d 	bl	800e3b0 <__sinit>
 8010d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d0f3      	beq.n	8010d46 <_fflush_r+0xa>
 8010d5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010d60:	07d0      	lsls	r0, r2, #31
 8010d62:	d404      	bmi.n	8010d6e <_fflush_r+0x32>
 8010d64:	0599      	lsls	r1, r3, #22
 8010d66:	d402      	bmi.n	8010d6e <_fflush_r+0x32>
 8010d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d6a:	f7fe fa8a 	bl	800f282 <__retarget_lock_acquire_recursive>
 8010d6e:	4628      	mov	r0, r5
 8010d70:	4621      	mov	r1, r4
 8010d72:	f7ff ff5f 	bl	8010c34 <__sflush_r>
 8010d76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d78:	07da      	lsls	r2, r3, #31
 8010d7a:	4605      	mov	r5, r0
 8010d7c:	d4e4      	bmi.n	8010d48 <_fflush_r+0xc>
 8010d7e:	89a3      	ldrh	r3, [r4, #12]
 8010d80:	059b      	lsls	r3, r3, #22
 8010d82:	d4e1      	bmi.n	8010d48 <_fflush_r+0xc>
 8010d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d86:	f7fe fa7d 	bl	800f284 <__retarget_lock_release_recursive>
 8010d8a:	e7dd      	b.n	8010d48 <_fflush_r+0xc>

08010d8c <__malloc_lock>:
 8010d8c:	4801      	ldr	r0, [pc, #4]	@ (8010d94 <__malloc_lock+0x8>)
 8010d8e:	f7fe ba78 	b.w	800f282 <__retarget_lock_acquire_recursive>
 8010d92:	bf00      	nop
 8010d94:	24000d9c 	.word	0x24000d9c

08010d98 <__malloc_unlock>:
 8010d98:	4801      	ldr	r0, [pc, #4]	@ (8010da0 <__malloc_unlock+0x8>)
 8010d9a:	f7fe ba73 	b.w	800f284 <__retarget_lock_release_recursive>
 8010d9e:	bf00      	nop
 8010da0:	24000d9c 	.word	0x24000d9c

08010da4 <_Balloc>:
 8010da4:	b570      	push	{r4, r5, r6, lr}
 8010da6:	69c6      	ldr	r6, [r0, #28]
 8010da8:	4604      	mov	r4, r0
 8010daa:	460d      	mov	r5, r1
 8010dac:	b976      	cbnz	r6, 8010dcc <_Balloc+0x28>
 8010dae:	2010      	movs	r0, #16
 8010db0:	f7ff fe84 	bl	8010abc <malloc>
 8010db4:	4602      	mov	r2, r0
 8010db6:	61e0      	str	r0, [r4, #28]
 8010db8:	b920      	cbnz	r0, 8010dc4 <_Balloc+0x20>
 8010dba:	4b18      	ldr	r3, [pc, #96]	@ (8010e1c <_Balloc+0x78>)
 8010dbc:	4818      	ldr	r0, [pc, #96]	@ (8010e20 <_Balloc+0x7c>)
 8010dbe:	216b      	movs	r1, #107	@ 0x6b
 8010dc0:	f000 fe1e 	bl	8011a00 <__assert_func>
 8010dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010dc8:	6006      	str	r6, [r0, #0]
 8010dca:	60c6      	str	r6, [r0, #12]
 8010dcc:	69e6      	ldr	r6, [r4, #28]
 8010dce:	68f3      	ldr	r3, [r6, #12]
 8010dd0:	b183      	cbz	r3, 8010df4 <_Balloc+0x50>
 8010dd2:	69e3      	ldr	r3, [r4, #28]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010dda:	b9b8      	cbnz	r0, 8010e0c <_Balloc+0x68>
 8010ddc:	2101      	movs	r1, #1
 8010dde:	fa01 f605 	lsl.w	r6, r1, r5
 8010de2:	1d72      	adds	r2, r6, #5
 8010de4:	0092      	lsls	r2, r2, #2
 8010de6:	4620      	mov	r0, r4
 8010de8:	f000 fe28 	bl	8011a3c <_calloc_r>
 8010dec:	b160      	cbz	r0, 8010e08 <_Balloc+0x64>
 8010dee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010df2:	e00e      	b.n	8010e12 <_Balloc+0x6e>
 8010df4:	2221      	movs	r2, #33	@ 0x21
 8010df6:	2104      	movs	r1, #4
 8010df8:	4620      	mov	r0, r4
 8010dfa:	f000 fe1f 	bl	8011a3c <_calloc_r>
 8010dfe:	69e3      	ldr	r3, [r4, #28]
 8010e00:	60f0      	str	r0, [r6, #12]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d1e4      	bne.n	8010dd2 <_Balloc+0x2e>
 8010e08:	2000      	movs	r0, #0
 8010e0a:	bd70      	pop	{r4, r5, r6, pc}
 8010e0c:	6802      	ldr	r2, [r0, #0]
 8010e0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e12:	2300      	movs	r3, #0
 8010e14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e18:	e7f7      	b.n	8010e0a <_Balloc+0x66>
 8010e1a:	bf00      	nop
 8010e1c:	08012076 	.word	0x08012076
 8010e20:	08012167 	.word	0x08012167

08010e24 <_Bfree>:
 8010e24:	b570      	push	{r4, r5, r6, lr}
 8010e26:	69c6      	ldr	r6, [r0, #28]
 8010e28:	4605      	mov	r5, r0
 8010e2a:	460c      	mov	r4, r1
 8010e2c:	b976      	cbnz	r6, 8010e4c <_Bfree+0x28>
 8010e2e:	2010      	movs	r0, #16
 8010e30:	f7ff fe44 	bl	8010abc <malloc>
 8010e34:	4602      	mov	r2, r0
 8010e36:	61e8      	str	r0, [r5, #28]
 8010e38:	b920      	cbnz	r0, 8010e44 <_Bfree+0x20>
 8010e3a:	4b09      	ldr	r3, [pc, #36]	@ (8010e60 <_Bfree+0x3c>)
 8010e3c:	4809      	ldr	r0, [pc, #36]	@ (8010e64 <_Bfree+0x40>)
 8010e3e:	218f      	movs	r1, #143	@ 0x8f
 8010e40:	f000 fdde 	bl	8011a00 <__assert_func>
 8010e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e48:	6006      	str	r6, [r0, #0]
 8010e4a:	60c6      	str	r6, [r0, #12]
 8010e4c:	b13c      	cbz	r4, 8010e5e <_Bfree+0x3a>
 8010e4e:	69eb      	ldr	r3, [r5, #28]
 8010e50:	6862      	ldr	r2, [r4, #4]
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e58:	6021      	str	r1, [r4, #0]
 8010e5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e5e:	bd70      	pop	{r4, r5, r6, pc}
 8010e60:	08012076 	.word	0x08012076
 8010e64:	08012167 	.word	0x08012167

08010e68 <__multadd>:
 8010e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e6c:	690d      	ldr	r5, [r1, #16]
 8010e6e:	4607      	mov	r7, r0
 8010e70:	460c      	mov	r4, r1
 8010e72:	461e      	mov	r6, r3
 8010e74:	f101 0c14 	add.w	ip, r1, #20
 8010e78:	2000      	movs	r0, #0
 8010e7a:	f8dc 3000 	ldr.w	r3, [ip]
 8010e7e:	b299      	uxth	r1, r3
 8010e80:	fb02 6101 	mla	r1, r2, r1, r6
 8010e84:	0c1e      	lsrs	r6, r3, #16
 8010e86:	0c0b      	lsrs	r3, r1, #16
 8010e88:	fb02 3306 	mla	r3, r2, r6, r3
 8010e8c:	b289      	uxth	r1, r1
 8010e8e:	3001      	adds	r0, #1
 8010e90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010e94:	4285      	cmp	r5, r0
 8010e96:	f84c 1b04 	str.w	r1, [ip], #4
 8010e9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010e9e:	dcec      	bgt.n	8010e7a <__multadd+0x12>
 8010ea0:	b30e      	cbz	r6, 8010ee6 <__multadd+0x7e>
 8010ea2:	68a3      	ldr	r3, [r4, #8]
 8010ea4:	42ab      	cmp	r3, r5
 8010ea6:	dc19      	bgt.n	8010edc <__multadd+0x74>
 8010ea8:	6861      	ldr	r1, [r4, #4]
 8010eaa:	4638      	mov	r0, r7
 8010eac:	3101      	adds	r1, #1
 8010eae:	f7ff ff79 	bl	8010da4 <_Balloc>
 8010eb2:	4680      	mov	r8, r0
 8010eb4:	b928      	cbnz	r0, 8010ec2 <__multadd+0x5a>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8010eec <__multadd+0x84>)
 8010eba:	480d      	ldr	r0, [pc, #52]	@ (8010ef0 <__multadd+0x88>)
 8010ebc:	21ba      	movs	r1, #186	@ 0xba
 8010ebe:	f000 fd9f 	bl	8011a00 <__assert_func>
 8010ec2:	6922      	ldr	r2, [r4, #16]
 8010ec4:	3202      	adds	r2, #2
 8010ec6:	f104 010c 	add.w	r1, r4, #12
 8010eca:	0092      	lsls	r2, r2, #2
 8010ecc:	300c      	adds	r0, #12
 8010ece:	f7fe f9da 	bl	800f286 <memcpy>
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	4638      	mov	r0, r7
 8010ed6:	f7ff ffa5 	bl	8010e24 <_Bfree>
 8010eda:	4644      	mov	r4, r8
 8010edc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ee0:	3501      	adds	r5, #1
 8010ee2:	615e      	str	r6, [r3, #20]
 8010ee4:	6125      	str	r5, [r4, #16]
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eec:	080120e5 	.word	0x080120e5
 8010ef0:	08012167 	.word	0x08012167

08010ef4 <__s2b>:
 8010ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ef8:	460c      	mov	r4, r1
 8010efa:	4615      	mov	r5, r2
 8010efc:	461f      	mov	r7, r3
 8010efe:	2209      	movs	r2, #9
 8010f00:	3308      	adds	r3, #8
 8010f02:	4606      	mov	r6, r0
 8010f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f08:	2100      	movs	r1, #0
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	db09      	blt.n	8010f24 <__s2b+0x30>
 8010f10:	4630      	mov	r0, r6
 8010f12:	f7ff ff47 	bl	8010da4 <_Balloc>
 8010f16:	b940      	cbnz	r0, 8010f2a <__s2b+0x36>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	4b19      	ldr	r3, [pc, #100]	@ (8010f80 <__s2b+0x8c>)
 8010f1c:	4819      	ldr	r0, [pc, #100]	@ (8010f84 <__s2b+0x90>)
 8010f1e:	21d3      	movs	r1, #211	@ 0xd3
 8010f20:	f000 fd6e 	bl	8011a00 <__assert_func>
 8010f24:	0052      	lsls	r2, r2, #1
 8010f26:	3101      	adds	r1, #1
 8010f28:	e7f0      	b.n	8010f0c <__s2b+0x18>
 8010f2a:	9b08      	ldr	r3, [sp, #32]
 8010f2c:	6143      	str	r3, [r0, #20]
 8010f2e:	2d09      	cmp	r5, #9
 8010f30:	f04f 0301 	mov.w	r3, #1
 8010f34:	6103      	str	r3, [r0, #16]
 8010f36:	dd16      	ble.n	8010f66 <__s2b+0x72>
 8010f38:	f104 0909 	add.w	r9, r4, #9
 8010f3c:	46c8      	mov	r8, r9
 8010f3e:	442c      	add	r4, r5
 8010f40:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010f44:	4601      	mov	r1, r0
 8010f46:	3b30      	subs	r3, #48	@ 0x30
 8010f48:	220a      	movs	r2, #10
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	f7ff ff8c 	bl	8010e68 <__multadd>
 8010f50:	45a0      	cmp	r8, r4
 8010f52:	d1f5      	bne.n	8010f40 <__s2b+0x4c>
 8010f54:	f1a5 0408 	sub.w	r4, r5, #8
 8010f58:	444c      	add	r4, r9
 8010f5a:	1b2d      	subs	r5, r5, r4
 8010f5c:	1963      	adds	r3, r4, r5
 8010f5e:	42bb      	cmp	r3, r7
 8010f60:	db04      	blt.n	8010f6c <__s2b+0x78>
 8010f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f66:	340a      	adds	r4, #10
 8010f68:	2509      	movs	r5, #9
 8010f6a:	e7f6      	b.n	8010f5a <__s2b+0x66>
 8010f6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f70:	4601      	mov	r1, r0
 8010f72:	3b30      	subs	r3, #48	@ 0x30
 8010f74:	220a      	movs	r2, #10
 8010f76:	4630      	mov	r0, r6
 8010f78:	f7ff ff76 	bl	8010e68 <__multadd>
 8010f7c:	e7ee      	b.n	8010f5c <__s2b+0x68>
 8010f7e:	bf00      	nop
 8010f80:	080120e5 	.word	0x080120e5
 8010f84:	08012167 	.word	0x08012167

08010f88 <__hi0bits>:
 8010f88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	bf36      	itet	cc
 8010f90:	0403      	lslcc	r3, r0, #16
 8010f92:	2000      	movcs	r0, #0
 8010f94:	2010      	movcc	r0, #16
 8010f96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f9a:	bf3c      	itt	cc
 8010f9c:	021b      	lslcc	r3, r3, #8
 8010f9e:	3008      	addcc	r0, #8
 8010fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010fa4:	bf3c      	itt	cc
 8010fa6:	011b      	lslcc	r3, r3, #4
 8010fa8:	3004      	addcc	r0, #4
 8010faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fae:	bf3c      	itt	cc
 8010fb0:	009b      	lslcc	r3, r3, #2
 8010fb2:	3002      	addcc	r0, #2
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	db05      	blt.n	8010fc4 <__hi0bits+0x3c>
 8010fb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010fbc:	f100 0001 	add.w	r0, r0, #1
 8010fc0:	bf08      	it	eq
 8010fc2:	2020      	moveq	r0, #32
 8010fc4:	4770      	bx	lr

08010fc6 <__lo0bits>:
 8010fc6:	6803      	ldr	r3, [r0, #0]
 8010fc8:	4602      	mov	r2, r0
 8010fca:	f013 0007 	ands.w	r0, r3, #7
 8010fce:	d00b      	beq.n	8010fe8 <__lo0bits+0x22>
 8010fd0:	07d9      	lsls	r1, r3, #31
 8010fd2:	d421      	bmi.n	8011018 <__lo0bits+0x52>
 8010fd4:	0798      	lsls	r0, r3, #30
 8010fd6:	bf49      	itett	mi
 8010fd8:	085b      	lsrmi	r3, r3, #1
 8010fda:	089b      	lsrpl	r3, r3, #2
 8010fdc:	2001      	movmi	r0, #1
 8010fde:	6013      	strmi	r3, [r2, #0]
 8010fe0:	bf5c      	itt	pl
 8010fe2:	6013      	strpl	r3, [r2, #0]
 8010fe4:	2002      	movpl	r0, #2
 8010fe6:	4770      	bx	lr
 8010fe8:	b299      	uxth	r1, r3
 8010fea:	b909      	cbnz	r1, 8010ff0 <__lo0bits+0x2a>
 8010fec:	0c1b      	lsrs	r3, r3, #16
 8010fee:	2010      	movs	r0, #16
 8010ff0:	b2d9      	uxtb	r1, r3
 8010ff2:	b909      	cbnz	r1, 8010ff8 <__lo0bits+0x32>
 8010ff4:	3008      	adds	r0, #8
 8010ff6:	0a1b      	lsrs	r3, r3, #8
 8010ff8:	0719      	lsls	r1, r3, #28
 8010ffa:	bf04      	itt	eq
 8010ffc:	091b      	lsreq	r3, r3, #4
 8010ffe:	3004      	addeq	r0, #4
 8011000:	0799      	lsls	r1, r3, #30
 8011002:	bf04      	itt	eq
 8011004:	089b      	lsreq	r3, r3, #2
 8011006:	3002      	addeq	r0, #2
 8011008:	07d9      	lsls	r1, r3, #31
 801100a:	d403      	bmi.n	8011014 <__lo0bits+0x4e>
 801100c:	085b      	lsrs	r3, r3, #1
 801100e:	f100 0001 	add.w	r0, r0, #1
 8011012:	d003      	beq.n	801101c <__lo0bits+0x56>
 8011014:	6013      	str	r3, [r2, #0]
 8011016:	4770      	bx	lr
 8011018:	2000      	movs	r0, #0
 801101a:	4770      	bx	lr
 801101c:	2020      	movs	r0, #32
 801101e:	4770      	bx	lr

08011020 <__i2b>:
 8011020:	b510      	push	{r4, lr}
 8011022:	460c      	mov	r4, r1
 8011024:	2101      	movs	r1, #1
 8011026:	f7ff febd 	bl	8010da4 <_Balloc>
 801102a:	4602      	mov	r2, r0
 801102c:	b928      	cbnz	r0, 801103a <__i2b+0x1a>
 801102e:	4b05      	ldr	r3, [pc, #20]	@ (8011044 <__i2b+0x24>)
 8011030:	4805      	ldr	r0, [pc, #20]	@ (8011048 <__i2b+0x28>)
 8011032:	f240 1145 	movw	r1, #325	@ 0x145
 8011036:	f000 fce3 	bl	8011a00 <__assert_func>
 801103a:	2301      	movs	r3, #1
 801103c:	6144      	str	r4, [r0, #20]
 801103e:	6103      	str	r3, [r0, #16]
 8011040:	bd10      	pop	{r4, pc}
 8011042:	bf00      	nop
 8011044:	080120e5 	.word	0x080120e5
 8011048:	08012167 	.word	0x08012167

0801104c <__multiply>:
 801104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011050:	4614      	mov	r4, r2
 8011052:	690a      	ldr	r2, [r1, #16]
 8011054:	6923      	ldr	r3, [r4, #16]
 8011056:	429a      	cmp	r2, r3
 8011058:	bfa8      	it	ge
 801105a:	4623      	movge	r3, r4
 801105c:	460f      	mov	r7, r1
 801105e:	bfa4      	itt	ge
 8011060:	460c      	movge	r4, r1
 8011062:	461f      	movge	r7, r3
 8011064:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011068:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801106c:	68a3      	ldr	r3, [r4, #8]
 801106e:	6861      	ldr	r1, [r4, #4]
 8011070:	eb0a 0609 	add.w	r6, sl, r9
 8011074:	42b3      	cmp	r3, r6
 8011076:	b085      	sub	sp, #20
 8011078:	bfb8      	it	lt
 801107a:	3101      	addlt	r1, #1
 801107c:	f7ff fe92 	bl	8010da4 <_Balloc>
 8011080:	b930      	cbnz	r0, 8011090 <__multiply+0x44>
 8011082:	4602      	mov	r2, r0
 8011084:	4b44      	ldr	r3, [pc, #272]	@ (8011198 <__multiply+0x14c>)
 8011086:	4845      	ldr	r0, [pc, #276]	@ (801119c <__multiply+0x150>)
 8011088:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801108c:	f000 fcb8 	bl	8011a00 <__assert_func>
 8011090:	f100 0514 	add.w	r5, r0, #20
 8011094:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011098:	462b      	mov	r3, r5
 801109a:	2200      	movs	r2, #0
 801109c:	4543      	cmp	r3, r8
 801109e:	d321      	bcc.n	80110e4 <__multiply+0x98>
 80110a0:	f107 0114 	add.w	r1, r7, #20
 80110a4:	f104 0214 	add.w	r2, r4, #20
 80110a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80110ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80110b0:	9302      	str	r3, [sp, #8]
 80110b2:	1b13      	subs	r3, r2, r4
 80110b4:	3b15      	subs	r3, #21
 80110b6:	f023 0303 	bic.w	r3, r3, #3
 80110ba:	3304      	adds	r3, #4
 80110bc:	f104 0715 	add.w	r7, r4, #21
 80110c0:	42ba      	cmp	r2, r7
 80110c2:	bf38      	it	cc
 80110c4:	2304      	movcc	r3, #4
 80110c6:	9301      	str	r3, [sp, #4]
 80110c8:	9b02      	ldr	r3, [sp, #8]
 80110ca:	9103      	str	r1, [sp, #12]
 80110cc:	428b      	cmp	r3, r1
 80110ce:	d80c      	bhi.n	80110ea <__multiply+0x9e>
 80110d0:	2e00      	cmp	r6, #0
 80110d2:	dd03      	ble.n	80110dc <__multiply+0x90>
 80110d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d05b      	beq.n	8011194 <__multiply+0x148>
 80110dc:	6106      	str	r6, [r0, #16]
 80110de:	b005      	add	sp, #20
 80110e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e4:	f843 2b04 	str.w	r2, [r3], #4
 80110e8:	e7d8      	b.n	801109c <__multiply+0x50>
 80110ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80110ee:	f1ba 0f00 	cmp.w	sl, #0
 80110f2:	d024      	beq.n	801113e <__multiply+0xf2>
 80110f4:	f104 0e14 	add.w	lr, r4, #20
 80110f8:	46a9      	mov	r9, r5
 80110fa:	f04f 0c00 	mov.w	ip, #0
 80110fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011102:	f8d9 3000 	ldr.w	r3, [r9]
 8011106:	fa1f fb87 	uxth.w	fp, r7
 801110a:	b29b      	uxth	r3, r3
 801110c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011110:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011114:	f8d9 7000 	ldr.w	r7, [r9]
 8011118:	4463      	add	r3, ip
 801111a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801111e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011122:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011126:	b29b      	uxth	r3, r3
 8011128:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801112c:	4572      	cmp	r2, lr
 801112e:	f849 3b04 	str.w	r3, [r9], #4
 8011132:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011136:	d8e2      	bhi.n	80110fe <__multiply+0xb2>
 8011138:	9b01      	ldr	r3, [sp, #4]
 801113a:	f845 c003 	str.w	ip, [r5, r3]
 801113e:	9b03      	ldr	r3, [sp, #12]
 8011140:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011144:	3104      	adds	r1, #4
 8011146:	f1b9 0f00 	cmp.w	r9, #0
 801114a:	d021      	beq.n	8011190 <__multiply+0x144>
 801114c:	682b      	ldr	r3, [r5, #0]
 801114e:	f104 0c14 	add.w	ip, r4, #20
 8011152:	46ae      	mov	lr, r5
 8011154:	f04f 0a00 	mov.w	sl, #0
 8011158:	f8bc b000 	ldrh.w	fp, [ip]
 801115c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011160:	fb09 770b 	mla	r7, r9, fp, r7
 8011164:	4457      	add	r7, sl
 8011166:	b29b      	uxth	r3, r3
 8011168:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801116c:	f84e 3b04 	str.w	r3, [lr], #4
 8011170:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011178:	f8be 3000 	ldrh.w	r3, [lr]
 801117c:	fb09 330a 	mla	r3, r9, sl, r3
 8011180:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011184:	4562      	cmp	r2, ip
 8011186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801118a:	d8e5      	bhi.n	8011158 <__multiply+0x10c>
 801118c:	9f01      	ldr	r7, [sp, #4]
 801118e:	51eb      	str	r3, [r5, r7]
 8011190:	3504      	adds	r5, #4
 8011192:	e799      	b.n	80110c8 <__multiply+0x7c>
 8011194:	3e01      	subs	r6, #1
 8011196:	e79b      	b.n	80110d0 <__multiply+0x84>
 8011198:	080120e5 	.word	0x080120e5
 801119c:	08012167 	.word	0x08012167

080111a0 <__pow5mult>:
 80111a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111a4:	4615      	mov	r5, r2
 80111a6:	f012 0203 	ands.w	r2, r2, #3
 80111aa:	4607      	mov	r7, r0
 80111ac:	460e      	mov	r6, r1
 80111ae:	d007      	beq.n	80111c0 <__pow5mult+0x20>
 80111b0:	4c25      	ldr	r4, [pc, #148]	@ (8011248 <__pow5mult+0xa8>)
 80111b2:	3a01      	subs	r2, #1
 80111b4:	2300      	movs	r3, #0
 80111b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111ba:	f7ff fe55 	bl	8010e68 <__multadd>
 80111be:	4606      	mov	r6, r0
 80111c0:	10ad      	asrs	r5, r5, #2
 80111c2:	d03d      	beq.n	8011240 <__pow5mult+0xa0>
 80111c4:	69fc      	ldr	r4, [r7, #28]
 80111c6:	b97c      	cbnz	r4, 80111e8 <__pow5mult+0x48>
 80111c8:	2010      	movs	r0, #16
 80111ca:	f7ff fc77 	bl	8010abc <malloc>
 80111ce:	4602      	mov	r2, r0
 80111d0:	61f8      	str	r0, [r7, #28]
 80111d2:	b928      	cbnz	r0, 80111e0 <__pow5mult+0x40>
 80111d4:	4b1d      	ldr	r3, [pc, #116]	@ (801124c <__pow5mult+0xac>)
 80111d6:	481e      	ldr	r0, [pc, #120]	@ (8011250 <__pow5mult+0xb0>)
 80111d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80111dc:	f000 fc10 	bl	8011a00 <__assert_func>
 80111e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111e4:	6004      	str	r4, [r0, #0]
 80111e6:	60c4      	str	r4, [r0, #12]
 80111e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80111ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111f0:	b94c      	cbnz	r4, 8011206 <__pow5mult+0x66>
 80111f2:	f240 2171 	movw	r1, #625	@ 0x271
 80111f6:	4638      	mov	r0, r7
 80111f8:	f7ff ff12 	bl	8011020 <__i2b>
 80111fc:	2300      	movs	r3, #0
 80111fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8011202:	4604      	mov	r4, r0
 8011204:	6003      	str	r3, [r0, #0]
 8011206:	f04f 0900 	mov.w	r9, #0
 801120a:	07eb      	lsls	r3, r5, #31
 801120c:	d50a      	bpl.n	8011224 <__pow5mult+0x84>
 801120e:	4631      	mov	r1, r6
 8011210:	4622      	mov	r2, r4
 8011212:	4638      	mov	r0, r7
 8011214:	f7ff ff1a 	bl	801104c <__multiply>
 8011218:	4631      	mov	r1, r6
 801121a:	4680      	mov	r8, r0
 801121c:	4638      	mov	r0, r7
 801121e:	f7ff fe01 	bl	8010e24 <_Bfree>
 8011222:	4646      	mov	r6, r8
 8011224:	106d      	asrs	r5, r5, #1
 8011226:	d00b      	beq.n	8011240 <__pow5mult+0xa0>
 8011228:	6820      	ldr	r0, [r4, #0]
 801122a:	b938      	cbnz	r0, 801123c <__pow5mult+0x9c>
 801122c:	4622      	mov	r2, r4
 801122e:	4621      	mov	r1, r4
 8011230:	4638      	mov	r0, r7
 8011232:	f7ff ff0b 	bl	801104c <__multiply>
 8011236:	6020      	str	r0, [r4, #0]
 8011238:	f8c0 9000 	str.w	r9, [r0]
 801123c:	4604      	mov	r4, r0
 801123e:	e7e4      	b.n	801120a <__pow5mult+0x6a>
 8011240:	4630      	mov	r0, r6
 8011242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011246:	bf00      	nop
 8011248:	080121c0 	.word	0x080121c0
 801124c:	08012076 	.word	0x08012076
 8011250:	08012167 	.word	0x08012167

08011254 <__lshift>:
 8011254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011258:	460c      	mov	r4, r1
 801125a:	6849      	ldr	r1, [r1, #4]
 801125c:	6923      	ldr	r3, [r4, #16]
 801125e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011262:	68a3      	ldr	r3, [r4, #8]
 8011264:	4607      	mov	r7, r0
 8011266:	4691      	mov	r9, r2
 8011268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801126c:	f108 0601 	add.w	r6, r8, #1
 8011270:	42b3      	cmp	r3, r6
 8011272:	db0b      	blt.n	801128c <__lshift+0x38>
 8011274:	4638      	mov	r0, r7
 8011276:	f7ff fd95 	bl	8010da4 <_Balloc>
 801127a:	4605      	mov	r5, r0
 801127c:	b948      	cbnz	r0, 8011292 <__lshift+0x3e>
 801127e:	4602      	mov	r2, r0
 8011280:	4b28      	ldr	r3, [pc, #160]	@ (8011324 <__lshift+0xd0>)
 8011282:	4829      	ldr	r0, [pc, #164]	@ (8011328 <__lshift+0xd4>)
 8011284:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011288:	f000 fbba 	bl	8011a00 <__assert_func>
 801128c:	3101      	adds	r1, #1
 801128e:	005b      	lsls	r3, r3, #1
 8011290:	e7ee      	b.n	8011270 <__lshift+0x1c>
 8011292:	2300      	movs	r3, #0
 8011294:	f100 0114 	add.w	r1, r0, #20
 8011298:	f100 0210 	add.w	r2, r0, #16
 801129c:	4618      	mov	r0, r3
 801129e:	4553      	cmp	r3, sl
 80112a0:	db33      	blt.n	801130a <__lshift+0xb6>
 80112a2:	6920      	ldr	r0, [r4, #16]
 80112a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112a8:	f104 0314 	add.w	r3, r4, #20
 80112ac:	f019 091f 	ands.w	r9, r9, #31
 80112b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112b8:	d02b      	beq.n	8011312 <__lshift+0xbe>
 80112ba:	f1c9 0e20 	rsb	lr, r9, #32
 80112be:	468a      	mov	sl, r1
 80112c0:	2200      	movs	r2, #0
 80112c2:	6818      	ldr	r0, [r3, #0]
 80112c4:	fa00 f009 	lsl.w	r0, r0, r9
 80112c8:	4310      	orrs	r0, r2
 80112ca:	f84a 0b04 	str.w	r0, [sl], #4
 80112ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80112d2:	459c      	cmp	ip, r3
 80112d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80112d8:	d8f3      	bhi.n	80112c2 <__lshift+0x6e>
 80112da:	ebac 0304 	sub.w	r3, ip, r4
 80112de:	3b15      	subs	r3, #21
 80112e0:	f023 0303 	bic.w	r3, r3, #3
 80112e4:	3304      	adds	r3, #4
 80112e6:	f104 0015 	add.w	r0, r4, #21
 80112ea:	4584      	cmp	ip, r0
 80112ec:	bf38      	it	cc
 80112ee:	2304      	movcc	r3, #4
 80112f0:	50ca      	str	r2, [r1, r3]
 80112f2:	b10a      	cbz	r2, 80112f8 <__lshift+0xa4>
 80112f4:	f108 0602 	add.w	r6, r8, #2
 80112f8:	3e01      	subs	r6, #1
 80112fa:	4638      	mov	r0, r7
 80112fc:	612e      	str	r6, [r5, #16]
 80112fe:	4621      	mov	r1, r4
 8011300:	f7ff fd90 	bl	8010e24 <_Bfree>
 8011304:	4628      	mov	r0, r5
 8011306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801130a:	f842 0f04 	str.w	r0, [r2, #4]!
 801130e:	3301      	adds	r3, #1
 8011310:	e7c5      	b.n	801129e <__lshift+0x4a>
 8011312:	3904      	subs	r1, #4
 8011314:	f853 2b04 	ldr.w	r2, [r3], #4
 8011318:	f841 2f04 	str.w	r2, [r1, #4]!
 801131c:	459c      	cmp	ip, r3
 801131e:	d8f9      	bhi.n	8011314 <__lshift+0xc0>
 8011320:	e7ea      	b.n	80112f8 <__lshift+0xa4>
 8011322:	bf00      	nop
 8011324:	080120e5 	.word	0x080120e5
 8011328:	08012167 	.word	0x08012167

0801132c <__mcmp>:
 801132c:	690a      	ldr	r2, [r1, #16]
 801132e:	4603      	mov	r3, r0
 8011330:	6900      	ldr	r0, [r0, #16]
 8011332:	1a80      	subs	r0, r0, r2
 8011334:	b530      	push	{r4, r5, lr}
 8011336:	d10e      	bne.n	8011356 <__mcmp+0x2a>
 8011338:	3314      	adds	r3, #20
 801133a:	3114      	adds	r1, #20
 801133c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011340:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011344:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801134c:	4295      	cmp	r5, r2
 801134e:	d003      	beq.n	8011358 <__mcmp+0x2c>
 8011350:	d205      	bcs.n	801135e <__mcmp+0x32>
 8011352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011356:	bd30      	pop	{r4, r5, pc}
 8011358:	42a3      	cmp	r3, r4
 801135a:	d3f3      	bcc.n	8011344 <__mcmp+0x18>
 801135c:	e7fb      	b.n	8011356 <__mcmp+0x2a>
 801135e:	2001      	movs	r0, #1
 8011360:	e7f9      	b.n	8011356 <__mcmp+0x2a>
	...

08011364 <__mdiff>:
 8011364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011368:	4689      	mov	r9, r1
 801136a:	4606      	mov	r6, r0
 801136c:	4611      	mov	r1, r2
 801136e:	4648      	mov	r0, r9
 8011370:	4614      	mov	r4, r2
 8011372:	f7ff ffdb 	bl	801132c <__mcmp>
 8011376:	1e05      	subs	r5, r0, #0
 8011378:	d112      	bne.n	80113a0 <__mdiff+0x3c>
 801137a:	4629      	mov	r1, r5
 801137c:	4630      	mov	r0, r6
 801137e:	f7ff fd11 	bl	8010da4 <_Balloc>
 8011382:	4602      	mov	r2, r0
 8011384:	b928      	cbnz	r0, 8011392 <__mdiff+0x2e>
 8011386:	4b3f      	ldr	r3, [pc, #252]	@ (8011484 <__mdiff+0x120>)
 8011388:	f240 2137 	movw	r1, #567	@ 0x237
 801138c:	483e      	ldr	r0, [pc, #248]	@ (8011488 <__mdiff+0x124>)
 801138e:	f000 fb37 	bl	8011a00 <__assert_func>
 8011392:	2301      	movs	r3, #1
 8011394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011398:	4610      	mov	r0, r2
 801139a:	b003      	add	sp, #12
 801139c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a0:	bfbc      	itt	lt
 80113a2:	464b      	movlt	r3, r9
 80113a4:	46a1      	movlt	r9, r4
 80113a6:	4630      	mov	r0, r6
 80113a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80113ac:	bfba      	itte	lt
 80113ae:	461c      	movlt	r4, r3
 80113b0:	2501      	movlt	r5, #1
 80113b2:	2500      	movge	r5, #0
 80113b4:	f7ff fcf6 	bl	8010da4 <_Balloc>
 80113b8:	4602      	mov	r2, r0
 80113ba:	b918      	cbnz	r0, 80113c4 <__mdiff+0x60>
 80113bc:	4b31      	ldr	r3, [pc, #196]	@ (8011484 <__mdiff+0x120>)
 80113be:	f240 2145 	movw	r1, #581	@ 0x245
 80113c2:	e7e3      	b.n	801138c <__mdiff+0x28>
 80113c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80113c8:	6926      	ldr	r6, [r4, #16]
 80113ca:	60c5      	str	r5, [r0, #12]
 80113cc:	f109 0310 	add.w	r3, r9, #16
 80113d0:	f109 0514 	add.w	r5, r9, #20
 80113d4:	f104 0e14 	add.w	lr, r4, #20
 80113d8:	f100 0b14 	add.w	fp, r0, #20
 80113dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80113e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80113e4:	9301      	str	r3, [sp, #4]
 80113e6:	46d9      	mov	r9, fp
 80113e8:	f04f 0c00 	mov.w	ip, #0
 80113ec:	9b01      	ldr	r3, [sp, #4]
 80113ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80113f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80113f6:	9301      	str	r3, [sp, #4]
 80113f8:	fa1f f38a 	uxth.w	r3, sl
 80113fc:	4619      	mov	r1, r3
 80113fe:	b283      	uxth	r3, r0
 8011400:	1acb      	subs	r3, r1, r3
 8011402:	0c00      	lsrs	r0, r0, #16
 8011404:	4463      	add	r3, ip
 8011406:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801140a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801140e:	b29b      	uxth	r3, r3
 8011410:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011414:	4576      	cmp	r6, lr
 8011416:	f849 3b04 	str.w	r3, [r9], #4
 801141a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801141e:	d8e5      	bhi.n	80113ec <__mdiff+0x88>
 8011420:	1b33      	subs	r3, r6, r4
 8011422:	3b15      	subs	r3, #21
 8011424:	f023 0303 	bic.w	r3, r3, #3
 8011428:	3415      	adds	r4, #21
 801142a:	3304      	adds	r3, #4
 801142c:	42a6      	cmp	r6, r4
 801142e:	bf38      	it	cc
 8011430:	2304      	movcc	r3, #4
 8011432:	441d      	add	r5, r3
 8011434:	445b      	add	r3, fp
 8011436:	461e      	mov	r6, r3
 8011438:	462c      	mov	r4, r5
 801143a:	4544      	cmp	r4, r8
 801143c:	d30e      	bcc.n	801145c <__mdiff+0xf8>
 801143e:	f108 0103 	add.w	r1, r8, #3
 8011442:	1b49      	subs	r1, r1, r5
 8011444:	f021 0103 	bic.w	r1, r1, #3
 8011448:	3d03      	subs	r5, #3
 801144a:	45a8      	cmp	r8, r5
 801144c:	bf38      	it	cc
 801144e:	2100      	movcc	r1, #0
 8011450:	440b      	add	r3, r1
 8011452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011456:	b191      	cbz	r1, 801147e <__mdiff+0x11a>
 8011458:	6117      	str	r7, [r2, #16]
 801145a:	e79d      	b.n	8011398 <__mdiff+0x34>
 801145c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011460:	46e6      	mov	lr, ip
 8011462:	0c08      	lsrs	r0, r1, #16
 8011464:	fa1c fc81 	uxtah	ip, ip, r1
 8011468:	4471      	add	r1, lr
 801146a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801146e:	b289      	uxth	r1, r1
 8011470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011474:	f846 1b04 	str.w	r1, [r6], #4
 8011478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801147c:	e7dd      	b.n	801143a <__mdiff+0xd6>
 801147e:	3f01      	subs	r7, #1
 8011480:	e7e7      	b.n	8011452 <__mdiff+0xee>
 8011482:	bf00      	nop
 8011484:	080120e5 	.word	0x080120e5
 8011488:	08012167 	.word	0x08012167

0801148c <__ulp>:
 801148c:	b082      	sub	sp, #8
 801148e:	ed8d 0b00 	vstr	d0, [sp]
 8011492:	9a01      	ldr	r2, [sp, #4]
 8011494:	4b0f      	ldr	r3, [pc, #60]	@ (80114d4 <__ulp+0x48>)
 8011496:	4013      	ands	r3, r2
 8011498:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801149c:	2b00      	cmp	r3, #0
 801149e:	dc08      	bgt.n	80114b2 <__ulp+0x26>
 80114a0:	425b      	negs	r3, r3
 80114a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80114a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80114aa:	da04      	bge.n	80114b6 <__ulp+0x2a>
 80114ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80114b0:	4113      	asrs	r3, r2
 80114b2:	2200      	movs	r2, #0
 80114b4:	e008      	b.n	80114c8 <__ulp+0x3c>
 80114b6:	f1a2 0314 	sub.w	r3, r2, #20
 80114ba:	2b1e      	cmp	r3, #30
 80114bc:	bfda      	itte	le
 80114be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80114c2:	40da      	lsrle	r2, r3
 80114c4:	2201      	movgt	r2, #1
 80114c6:	2300      	movs	r3, #0
 80114c8:	4619      	mov	r1, r3
 80114ca:	4610      	mov	r0, r2
 80114cc:	ec41 0b10 	vmov	d0, r0, r1
 80114d0:	b002      	add	sp, #8
 80114d2:	4770      	bx	lr
 80114d4:	7ff00000 	.word	0x7ff00000

080114d8 <__b2d>:
 80114d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114dc:	6906      	ldr	r6, [r0, #16]
 80114de:	f100 0814 	add.w	r8, r0, #20
 80114e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80114e6:	1f37      	subs	r7, r6, #4
 80114e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80114ec:	4610      	mov	r0, r2
 80114ee:	f7ff fd4b 	bl	8010f88 <__hi0bits>
 80114f2:	f1c0 0320 	rsb	r3, r0, #32
 80114f6:	280a      	cmp	r0, #10
 80114f8:	600b      	str	r3, [r1, #0]
 80114fa:	491b      	ldr	r1, [pc, #108]	@ (8011568 <__b2d+0x90>)
 80114fc:	dc15      	bgt.n	801152a <__b2d+0x52>
 80114fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8011502:	fa22 f30c 	lsr.w	r3, r2, ip
 8011506:	45b8      	cmp	r8, r7
 8011508:	ea43 0501 	orr.w	r5, r3, r1
 801150c:	bf34      	ite	cc
 801150e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011512:	2300      	movcs	r3, #0
 8011514:	3015      	adds	r0, #21
 8011516:	fa02 f000 	lsl.w	r0, r2, r0
 801151a:	fa23 f30c 	lsr.w	r3, r3, ip
 801151e:	4303      	orrs	r3, r0
 8011520:	461c      	mov	r4, r3
 8011522:	ec45 4b10 	vmov	d0, r4, r5
 8011526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801152a:	45b8      	cmp	r8, r7
 801152c:	bf3a      	itte	cc
 801152e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011532:	f1a6 0708 	subcc.w	r7, r6, #8
 8011536:	2300      	movcs	r3, #0
 8011538:	380b      	subs	r0, #11
 801153a:	d012      	beq.n	8011562 <__b2d+0x8a>
 801153c:	f1c0 0120 	rsb	r1, r0, #32
 8011540:	fa23 f401 	lsr.w	r4, r3, r1
 8011544:	4082      	lsls	r2, r0
 8011546:	4322      	orrs	r2, r4
 8011548:	4547      	cmp	r7, r8
 801154a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801154e:	bf8c      	ite	hi
 8011550:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011554:	2200      	movls	r2, #0
 8011556:	4083      	lsls	r3, r0
 8011558:	40ca      	lsrs	r2, r1
 801155a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801155e:	4313      	orrs	r3, r2
 8011560:	e7de      	b.n	8011520 <__b2d+0x48>
 8011562:	ea42 0501 	orr.w	r5, r2, r1
 8011566:	e7db      	b.n	8011520 <__b2d+0x48>
 8011568:	3ff00000 	.word	0x3ff00000

0801156c <__d2b>:
 801156c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011570:	460f      	mov	r7, r1
 8011572:	2101      	movs	r1, #1
 8011574:	ec59 8b10 	vmov	r8, r9, d0
 8011578:	4616      	mov	r6, r2
 801157a:	f7ff fc13 	bl	8010da4 <_Balloc>
 801157e:	4604      	mov	r4, r0
 8011580:	b930      	cbnz	r0, 8011590 <__d2b+0x24>
 8011582:	4602      	mov	r2, r0
 8011584:	4b23      	ldr	r3, [pc, #140]	@ (8011614 <__d2b+0xa8>)
 8011586:	4824      	ldr	r0, [pc, #144]	@ (8011618 <__d2b+0xac>)
 8011588:	f240 310f 	movw	r1, #783	@ 0x30f
 801158c:	f000 fa38 	bl	8011a00 <__assert_func>
 8011590:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011594:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011598:	b10d      	cbz	r5, 801159e <__d2b+0x32>
 801159a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801159e:	9301      	str	r3, [sp, #4]
 80115a0:	f1b8 0300 	subs.w	r3, r8, #0
 80115a4:	d023      	beq.n	80115ee <__d2b+0x82>
 80115a6:	4668      	mov	r0, sp
 80115a8:	9300      	str	r3, [sp, #0]
 80115aa:	f7ff fd0c 	bl	8010fc6 <__lo0bits>
 80115ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80115b2:	b1d0      	cbz	r0, 80115ea <__d2b+0x7e>
 80115b4:	f1c0 0320 	rsb	r3, r0, #32
 80115b8:	fa02 f303 	lsl.w	r3, r2, r3
 80115bc:	430b      	orrs	r3, r1
 80115be:	40c2      	lsrs	r2, r0
 80115c0:	6163      	str	r3, [r4, #20]
 80115c2:	9201      	str	r2, [sp, #4]
 80115c4:	9b01      	ldr	r3, [sp, #4]
 80115c6:	61a3      	str	r3, [r4, #24]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	bf0c      	ite	eq
 80115cc:	2201      	moveq	r2, #1
 80115ce:	2202      	movne	r2, #2
 80115d0:	6122      	str	r2, [r4, #16]
 80115d2:	b1a5      	cbz	r5, 80115fe <__d2b+0x92>
 80115d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80115d8:	4405      	add	r5, r0
 80115da:	603d      	str	r5, [r7, #0]
 80115dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80115e0:	6030      	str	r0, [r6, #0]
 80115e2:	4620      	mov	r0, r4
 80115e4:	b003      	add	sp, #12
 80115e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115ea:	6161      	str	r1, [r4, #20]
 80115ec:	e7ea      	b.n	80115c4 <__d2b+0x58>
 80115ee:	a801      	add	r0, sp, #4
 80115f0:	f7ff fce9 	bl	8010fc6 <__lo0bits>
 80115f4:	9b01      	ldr	r3, [sp, #4]
 80115f6:	6163      	str	r3, [r4, #20]
 80115f8:	3020      	adds	r0, #32
 80115fa:	2201      	movs	r2, #1
 80115fc:	e7e8      	b.n	80115d0 <__d2b+0x64>
 80115fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011602:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011606:	6038      	str	r0, [r7, #0]
 8011608:	6918      	ldr	r0, [r3, #16]
 801160a:	f7ff fcbd 	bl	8010f88 <__hi0bits>
 801160e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011612:	e7e5      	b.n	80115e0 <__d2b+0x74>
 8011614:	080120e5 	.word	0x080120e5
 8011618:	08012167 	.word	0x08012167

0801161c <__ratio>:
 801161c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011620:	4688      	mov	r8, r1
 8011622:	4669      	mov	r1, sp
 8011624:	4681      	mov	r9, r0
 8011626:	f7ff ff57 	bl	80114d8 <__b2d>
 801162a:	a901      	add	r1, sp, #4
 801162c:	4640      	mov	r0, r8
 801162e:	ec55 4b10 	vmov	r4, r5, d0
 8011632:	f7ff ff51 	bl	80114d8 <__b2d>
 8011636:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801163a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801163e:	1ad2      	subs	r2, r2, r3
 8011640:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011644:	1a5b      	subs	r3, r3, r1
 8011646:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801164a:	ec57 6b10 	vmov	r6, r7, d0
 801164e:	2b00      	cmp	r3, #0
 8011650:	bfd6      	itet	le
 8011652:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011656:	462a      	movgt	r2, r5
 8011658:	463a      	movle	r2, r7
 801165a:	46ab      	mov	fp, r5
 801165c:	46a2      	mov	sl, r4
 801165e:	bfce      	itee	gt
 8011660:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011664:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011668:	ee00 3a90 	vmovle	s1, r3
 801166c:	ec4b ab17 	vmov	d7, sl, fp
 8011670:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011674:	b003      	add	sp, #12
 8011676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801167a <__copybits>:
 801167a:	3901      	subs	r1, #1
 801167c:	b570      	push	{r4, r5, r6, lr}
 801167e:	1149      	asrs	r1, r1, #5
 8011680:	6914      	ldr	r4, [r2, #16]
 8011682:	3101      	adds	r1, #1
 8011684:	f102 0314 	add.w	r3, r2, #20
 8011688:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801168c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011690:	1f05      	subs	r5, r0, #4
 8011692:	42a3      	cmp	r3, r4
 8011694:	d30c      	bcc.n	80116b0 <__copybits+0x36>
 8011696:	1aa3      	subs	r3, r4, r2
 8011698:	3b11      	subs	r3, #17
 801169a:	f023 0303 	bic.w	r3, r3, #3
 801169e:	3211      	adds	r2, #17
 80116a0:	42a2      	cmp	r2, r4
 80116a2:	bf88      	it	hi
 80116a4:	2300      	movhi	r3, #0
 80116a6:	4418      	add	r0, r3
 80116a8:	2300      	movs	r3, #0
 80116aa:	4288      	cmp	r0, r1
 80116ac:	d305      	bcc.n	80116ba <__copybits+0x40>
 80116ae:	bd70      	pop	{r4, r5, r6, pc}
 80116b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80116b4:	f845 6f04 	str.w	r6, [r5, #4]!
 80116b8:	e7eb      	b.n	8011692 <__copybits+0x18>
 80116ba:	f840 3b04 	str.w	r3, [r0], #4
 80116be:	e7f4      	b.n	80116aa <__copybits+0x30>

080116c0 <__any_on>:
 80116c0:	f100 0214 	add.w	r2, r0, #20
 80116c4:	6900      	ldr	r0, [r0, #16]
 80116c6:	114b      	asrs	r3, r1, #5
 80116c8:	4298      	cmp	r0, r3
 80116ca:	b510      	push	{r4, lr}
 80116cc:	db11      	blt.n	80116f2 <__any_on+0x32>
 80116ce:	dd0a      	ble.n	80116e6 <__any_on+0x26>
 80116d0:	f011 011f 	ands.w	r1, r1, #31
 80116d4:	d007      	beq.n	80116e6 <__any_on+0x26>
 80116d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80116da:	fa24 f001 	lsr.w	r0, r4, r1
 80116de:	fa00 f101 	lsl.w	r1, r0, r1
 80116e2:	428c      	cmp	r4, r1
 80116e4:	d10b      	bne.n	80116fe <__any_on+0x3e>
 80116e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d803      	bhi.n	80116f6 <__any_on+0x36>
 80116ee:	2000      	movs	r0, #0
 80116f0:	bd10      	pop	{r4, pc}
 80116f2:	4603      	mov	r3, r0
 80116f4:	e7f7      	b.n	80116e6 <__any_on+0x26>
 80116f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80116fa:	2900      	cmp	r1, #0
 80116fc:	d0f5      	beq.n	80116ea <__any_on+0x2a>
 80116fe:	2001      	movs	r0, #1
 8011700:	e7f6      	b.n	80116f0 <__any_on+0x30>

08011702 <_realloc_r>:
 8011702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011706:	4680      	mov	r8, r0
 8011708:	4615      	mov	r5, r2
 801170a:	460c      	mov	r4, r1
 801170c:	b921      	cbnz	r1, 8011718 <_realloc_r+0x16>
 801170e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011712:	4611      	mov	r1, r2
 8011714:	f7ff b9fc 	b.w	8010b10 <_malloc_r>
 8011718:	b92a      	cbnz	r2, 8011726 <_realloc_r+0x24>
 801171a:	f7fe fbb3 	bl	800fe84 <_free_r>
 801171e:	2400      	movs	r4, #0
 8011720:	4620      	mov	r0, r4
 8011722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011726:	f000 f99d 	bl	8011a64 <_malloc_usable_size_r>
 801172a:	4285      	cmp	r5, r0
 801172c:	4606      	mov	r6, r0
 801172e:	d802      	bhi.n	8011736 <_realloc_r+0x34>
 8011730:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011734:	d8f4      	bhi.n	8011720 <_realloc_r+0x1e>
 8011736:	4629      	mov	r1, r5
 8011738:	4640      	mov	r0, r8
 801173a:	f7ff f9e9 	bl	8010b10 <_malloc_r>
 801173e:	4607      	mov	r7, r0
 8011740:	2800      	cmp	r0, #0
 8011742:	d0ec      	beq.n	801171e <_realloc_r+0x1c>
 8011744:	42b5      	cmp	r5, r6
 8011746:	462a      	mov	r2, r5
 8011748:	4621      	mov	r1, r4
 801174a:	bf28      	it	cs
 801174c:	4632      	movcs	r2, r6
 801174e:	f7fd fd9a 	bl	800f286 <memcpy>
 8011752:	4621      	mov	r1, r4
 8011754:	4640      	mov	r0, r8
 8011756:	f7fe fb95 	bl	800fe84 <_free_r>
 801175a:	463c      	mov	r4, r7
 801175c:	e7e0      	b.n	8011720 <_realloc_r+0x1e>

0801175e <__swbuf_r>:
 801175e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011760:	460e      	mov	r6, r1
 8011762:	4614      	mov	r4, r2
 8011764:	4605      	mov	r5, r0
 8011766:	b118      	cbz	r0, 8011770 <__swbuf_r+0x12>
 8011768:	6a03      	ldr	r3, [r0, #32]
 801176a:	b90b      	cbnz	r3, 8011770 <__swbuf_r+0x12>
 801176c:	f7fc fe20 	bl	800e3b0 <__sinit>
 8011770:	69a3      	ldr	r3, [r4, #24]
 8011772:	60a3      	str	r3, [r4, #8]
 8011774:	89a3      	ldrh	r3, [r4, #12]
 8011776:	071a      	lsls	r2, r3, #28
 8011778:	d501      	bpl.n	801177e <__swbuf_r+0x20>
 801177a:	6923      	ldr	r3, [r4, #16]
 801177c:	b943      	cbnz	r3, 8011790 <__swbuf_r+0x32>
 801177e:	4621      	mov	r1, r4
 8011780:	4628      	mov	r0, r5
 8011782:	f000 f82b 	bl	80117dc <__swsetup_r>
 8011786:	b118      	cbz	r0, 8011790 <__swbuf_r+0x32>
 8011788:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801178c:	4638      	mov	r0, r7
 801178e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011790:	6823      	ldr	r3, [r4, #0]
 8011792:	6922      	ldr	r2, [r4, #16]
 8011794:	1a98      	subs	r0, r3, r2
 8011796:	6963      	ldr	r3, [r4, #20]
 8011798:	b2f6      	uxtb	r6, r6
 801179a:	4283      	cmp	r3, r0
 801179c:	4637      	mov	r7, r6
 801179e:	dc05      	bgt.n	80117ac <__swbuf_r+0x4e>
 80117a0:	4621      	mov	r1, r4
 80117a2:	4628      	mov	r0, r5
 80117a4:	f7ff faca 	bl	8010d3c <_fflush_r>
 80117a8:	2800      	cmp	r0, #0
 80117aa:	d1ed      	bne.n	8011788 <__swbuf_r+0x2a>
 80117ac:	68a3      	ldr	r3, [r4, #8]
 80117ae:	3b01      	subs	r3, #1
 80117b0:	60a3      	str	r3, [r4, #8]
 80117b2:	6823      	ldr	r3, [r4, #0]
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	6022      	str	r2, [r4, #0]
 80117b8:	701e      	strb	r6, [r3, #0]
 80117ba:	6962      	ldr	r2, [r4, #20]
 80117bc:	1c43      	adds	r3, r0, #1
 80117be:	429a      	cmp	r2, r3
 80117c0:	d004      	beq.n	80117cc <__swbuf_r+0x6e>
 80117c2:	89a3      	ldrh	r3, [r4, #12]
 80117c4:	07db      	lsls	r3, r3, #31
 80117c6:	d5e1      	bpl.n	801178c <__swbuf_r+0x2e>
 80117c8:	2e0a      	cmp	r6, #10
 80117ca:	d1df      	bne.n	801178c <__swbuf_r+0x2e>
 80117cc:	4621      	mov	r1, r4
 80117ce:	4628      	mov	r0, r5
 80117d0:	f7ff fab4 	bl	8010d3c <_fflush_r>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	d0d9      	beq.n	801178c <__swbuf_r+0x2e>
 80117d8:	e7d6      	b.n	8011788 <__swbuf_r+0x2a>
	...

080117dc <__swsetup_r>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	4b29      	ldr	r3, [pc, #164]	@ (8011884 <__swsetup_r+0xa8>)
 80117e0:	4605      	mov	r5, r0
 80117e2:	6818      	ldr	r0, [r3, #0]
 80117e4:	460c      	mov	r4, r1
 80117e6:	b118      	cbz	r0, 80117f0 <__swsetup_r+0x14>
 80117e8:	6a03      	ldr	r3, [r0, #32]
 80117ea:	b90b      	cbnz	r3, 80117f0 <__swsetup_r+0x14>
 80117ec:	f7fc fde0 	bl	800e3b0 <__sinit>
 80117f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117f4:	0719      	lsls	r1, r3, #28
 80117f6:	d422      	bmi.n	801183e <__swsetup_r+0x62>
 80117f8:	06da      	lsls	r2, r3, #27
 80117fa:	d407      	bmi.n	801180c <__swsetup_r+0x30>
 80117fc:	2209      	movs	r2, #9
 80117fe:	602a      	str	r2, [r5, #0]
 8011800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011804:	81a3      	strh	r3, [r4, #12]
 8011806:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801180a:	e033      	b.n	8011874 <__swsetup_r+0x98>
 801180c:	0758      	lsls	r0, r3, #29
 801180e:	d512      	bpl.n	8011836 <__swsetup_r+0x5a>
 8011810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011812:	b141      	cbz	r1, 8011826 <__swsetup_r+0x4a>
 8011814:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011818:	4299      	cmp	r1, r3
 801181a:	d002      	beq.n	8011822 <__swsetup_r+0x46>
 801181c:	4628      	mov	r0, r5
 801181e:	f7fe fb31 	bl	800fe84 <_free_r>
 8011822:	2300      	movs	r3, #0
 8011824:	6363      	str	r3, [r4, #52]	@ 0x34
 8011826:	89a3      	ldrh	r3, [r4, #12]
 8011828:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801182c:	81a3      	strh	r3, [r4, #12]
 801182e:	2300      	movs	r3, #0
 8011830:	6063      	str	r3, [r4, #4]
 8011832:	6923      	ldr	r3, [r4, #16]
 8011834:	6023      	str	r3, [r4, #0]
 8011836:	89a3      	ldrh	r3, [r4, #12]
 8011838:	f043 0308 	orr.w	r3, r3, #8
 801183c:	81a3      	strh	r3, [r4, #12]
 801183e:	6923      	ldr	r3, [r4, #16]
 8011840:	b94b      	cbnz	r3, 8011856 <__swsetup_r+0x7a>
 8011842:	89a3      	ldrh	r3, [r4, #12]
 8011844:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801184c:	d003      	beq.n	8011856 <__swsetup_r+0x7a>
 801184e:	4621      	mov	r1, r4
 8011850:	4628      	mov	r0, r5
 8011852:	f000 f84c 	bl	80118ee <__smakebuf_r>
 8011856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801185a:	f013 0201 	ands.w	r2, r3, #1
 801185e:	d00a      	beq.n	8011876 <__swsetup_r+0x9a>
 8011860:	2200      	movs	r2, #0
 8011862:	60a2      	str	r2, [r4, #8]
 8011864:	6962      	ldr	r2, [r4, #20]
 8011866:	4252      	negs	r2, r2
 8011868:	61a2      	str	r2, [r4, #24]
 801186a:	6922      	ldr	r2, [r4, #16]
 801186c:	b942      	cbnz	r2, 8011880 <__swsetup_r+0xa4>
 801186e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011872:	d1c5      	bne.n	8011800 <__swsetup_r+0x24>
 8011874:	bd38      	pop	{r3, r4, r5, pc}
 8011876:	0799      	lsls	r1, r3, #30
 8011878:	bf58      	it	pl
 801187a:	6962      	ldrpl	r2, [r4, #20]
 801187c:	60a2      	str	r2, [r4, #8]
 801187e:	e7f4      	b.n	801186a <__swsetup_r+0x8e>
 8011880:	2000      	movs	r0, #0
 8011882:	e7f7      	b.n	8011874 <__swsetup_r+0x98>
 8011884:	24000194 	.word	0x24000194

08011888 <__ascii_wctomb>:
 8011888:	4603      	mov	r3, r0
 801188a:	4608      	mov	r0, r1
 801188c:	b141      	cbz	r1, 80118a0 <__ascii_wctomb+0x18>
 801188e:	2aff      	cmp	r2, #255	@ 0xff
 8011890:	d904      	bls.n	801189c <__ascii_wctomb+0x14>
 8011892:	228a      	movs	r2, #138	@ 0x8a
 8011894:	601a      	str	r2, [r3, #0]
 8011896:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801189a:	4770      	bx	lr
 801189c:	700a      	strb	r2, [r1, #0]
 801189e:	2001      	movs	r0, #1
 80118a0:	4770      	bx	lr

080118a2 <__swhatbuf_r>:
 80118a2:	b570      	push	{r4, r5, r6, lr}
 80118a4:	460c      	mov	r4, r1
 80118a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118aa:	2900      	cmp	r1, #0
 80118ac:	b096      	sub	sp, #88	@ 0x58
 80118ae:	4615      	mov	r5, r2
 80118b0:	461e      	mov	r6, r3
 80118b2:	da0d      	bge.n	80118d0 <__swhatbuf_r+0x2e>
 80118b4:	89a3      	ldrh	r3, [r4, #12]
 80118b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80118ba:	f04f 0100 	mov.w	r1, #0
 80118be:	bf14      	ite	ne
 80118c0:	2340      	movne	r3, #64	@ 0x40
 80118c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80118c6:	2000      	movs	r0, #0
 80118c8:	6031      	str	r1, [r6, #0]
 80118ca:	602b      	str	r3, [r5, #0]
 80118cc:	b016      	add	sp, #88	@ 0x58
 80118ce:	bd70      	pop	{r4, r5, r6, pc}
 80118d0:	466a      	mov	r2, sp
 80118d2:	f000 f863 	bl	801199c <_fstat_r>
 80118d6:	2800      	cmp	r0, #0
 80118d8:	dbec      	blt.n	80118b4 <__swhatbuf_r+0x12>
 80118da:	9901      	ldr	r1, [sp, #4]
 80118dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80118e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80118e4:	4259      	negs	r1, r3
 80118e6:	4159      	adcs	r1, r3
 80118e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80118ec:	e7eb      	b.n	80118c6 <__swhatbuf_r+0x24>

080118ee <__smakebuf_r>:
 80118ee:	898b      	ldrh	r3, [r1, #12]
 80118f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118f2:	079d      	lsls	r5, r3, #30
 80118f4:	4606      	mov	r6, r0
 80118f6:	460c      	mov	r4, r1
 80118f8:	d507      	bpl.n	801190a <__smakebuf_r+0x1c>
 80118fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80118fe:	6023      	str	r3, [r4, #0]
 8011900:	6123      	str	r3, [r4, #16]
 8011902:	2301      	movs	r3, #1
 8011904:	6163      	str	r3, [r4, #20]
 8011906:	b003      	add	sp, #12
 8011908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801190a:	ab01      	add	r3, sp, #4
 801190c:	466a      	mov	r2, sp
 801190e:	f7ff ffc8 	bl	80118a2 <__swhatbuf_r>
 8011912:	9f00      	ldr	r7, [sp, #0]
 8011914:	4605      	mov	r5, r0
 8011916:	4639      	mov	r1, r7
 8011918:	4630      	mov	r0, r6
 801191a:	f7ff f8f9 	bl	8010b10 <_malloc_r>
 801191e:	b948      	cbnz	r0, 8011934 <__smakebuf_r+0x46>
 8011920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011924:	059a      	lsls	r2, r3, #22
 8011926:	d4ee      	bmi.n	8011906 <__smakebuf_r+0x18>
 8011928:	f023 0303 	bic.w	r3, r3, #3
 801192c:	f043 0302 	orr.w	r3, r3, #2
 8011930:	81a3      	strh	r3, [r4, #12]
 8011932:	e7e2      	b.n	80118fa <__smakebuf_r+0xc>
 8011934:	89a3      	ldrh	r3, [r4, #12]
 8011936:	6020      	str	r0, [r4, #0]
 8011938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801193c:	81a3      	strh	r3, [r4, #12]
 801193e:	9b01      	ldr	r3, [sp, #4]
 8011940:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011944:	b15b      	cbz	r3, 801195e <__smakebuf_r+0x70>
 8011946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801194a:	4630      	mov	r0, r6
 801194c:	f000 f838 	bl	80119c0 <_isatty_r>
 8011950:	b128      	cbz	r0, 801195e <__smakebuf_r+0x70>
 8011952:	89a3      	ldrh	r3, [r4, #12]
 8011954:	f023 0303 	bic.w	r3, r3, #3
 8011958:	f043 0301 	orr.w	r3, r3, #1
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	89a3      	ldrh	r3, [r4, #12]
 8011960:	431d      	orrs	r5, r3
 8011962:	81a5      	strh	r5, [r4, #12]
 8011964:	e7cf      	b.n	8011906 <__smakebuf_r+0x18>

08011966 <memmove>:
 8011966:	4288      	cmp	r0, r1
 8011968:	b510      	push	{r4, lr}
 801196a:	eb01 0402 	add.w	r4, r1, r2
 801196e:	d902      	bls.n	8011976 <memmove+0x10>
 8011970:	4284      	cmp	r4, r0
 8011972:	4623      	mov	r3, r4
 8011974:	d807      	bhi.n	8011986 <memmove+0x20>
 8011976:	1e43      	subs	r3, r0, #1
 8011978:	42a1      	cmp	r1, r4
 801197a:	d008      	beq.n	801198e <memmove+0x28>
 801197c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011980:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011984:	e7f8      	b.n	8011978 <memmove+0x12>
 8011986:	4402      	add	r2, r0
 8011988:	4601      	mov	r1, r0
 801198a:	428a      	cmp	r2, r1
 801198c:	d100      	bne.n	8011990 <memmove+0x2a>
 801198e:	bd10      	pop	{r4, pc}
 8011990:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011994:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011998:	e7f7      	b.n	801198a <memmove+0x24>
	...

0801199c <_fstat_r>:
 801199c:	b538      	push	{r3, r4, r5, lr}
 801199e:	4d07      	ldr	r5, [pc, #28]	@ (80119bc <_fstat_r+0x20>)
 80119a0:	2300      	movs	r3, #0
 80119a2:	4604      	mov	r4, r0
 80119a4:	4608      	mov	r0, r1
 80119a6:	4611      	mov	r1, r2
 80119a8:	602b      	str	r3, [r5, #0]
 80119aa:	f7f2 f8cf 	bl	8003b4c <_fstat>
 80119ae:	1c43      	adds	r3, r0, #1
 80119b0:	d102      	bne.n	80119b8 <_fstat_r+0x1c>
 80119b2:	682b      	ldr	r3, [r5, #0]
 80119b4:	b103      	cbz	r3, 80119b8 <_fstat_r+0x1c>
 80119b6:	6023      	str	r3, [r4, #0]
 80119b8:	bd38      	pop	{r3, r4, r5, pc}
 80119ba:	bf00      	nop
 80119bc:	24000d98 	.word	0x24000d98

080119c0 <_isatty_r>:
 80119c0:	b538      	push	{r3, r4, r5, lr}
 80119c2:	4d06      	ldr	r5, [pc, #24]	@ (80119dc <_isatty_r+0x1c>)
 80119c4:	2300      	movs	r3, #0
 80119c6:	4604      	mov	r4, r0
 80119c8:	4608      	mov	r0, r1
 80119ca:	602b      	str	r3, [r5, #0]
 80119cc:	f7f2 f8ce 	bl	8003b6c <_isatty>
 80119d0:	1c43      	adds	r3, r0, #1
 80119d2:	d102      	bne.n	80119da <_isatty_r+0x1a>
 80119d4:	682b      	ldr	r3, [r5, #0]
 80119d6:	b103      	cbz	r3, 80119da <_isatty_r+0x1a>
 80119d8:	6023      	str	r3, [r4, #0]
 80119da:	bd38      	pop	{r3, r4, r5, pc}
 80119dc:	24000d98 	.word	0x24000d98

080119e0 <_sbrk_r>:
 80119e0:	b538      	push	{r3, r4, r5, lr}
 80119e2:	4d06      	ldr	r5, [pc, #24]	@ (80119fc <_sbrk_r+0x1c>)
 80119e4:	2300      	movs	r3, #0
 80119e6:	4604      	mov	r4, r0
 80119e8:	4608      	mov	r0, r1
 80119ea:	602b      	str	r3, [r5, #0]
 80119ec:	f7f2 f8d6 	bl	8003b9c <_sbrk>
 80119f0:	1c43      	adds	r3, r0, #1
 80119f2:	d102      	bne.n	80119fa <_sbrk_r+0x1a>
 80119f4:	682b      	ldr	r3, [r5, #0]
 80119f6:	b103      	cbz	r3, 80119fa <_sbrk_r+0x1a>
 80119f8:	6023      	str	r3, [r4, #0]
 80119fa:	bd38      	pop	{r3, r4, r5, pc}
 80119fc:	24000d98 	.word	0x24000d98

08011a00 <__assert_func>:
 8011a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a02:	4614      	mov	r4, r2
 8011a04:	461a      	mov	r2, r3
 8011a06:	4b09      	ldr	r3, [pc, #36]	@ (8011a2c <__assert_func+0x2c>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4605      	mov	r5, r0
 8011a0c:	68d8      	ldr	r0, [r3, #12]
 8011a0e:	b954      	cbnz	r4, 8011a26 <__assert_func+0x26>
 8011a10:	4b07      	ldr	r3, [pc, #28]	@ (8011a30 <__assert_func+0x30>)
 8011a12:	461c      	mov	r4, r3
 8011a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a18:	9100      	str	r1, [sp, #0]
 8011a1a:	462b      	mov	r3, r5
 8011a1c:	4905      	ldr	r1, [pc, #20]	@ (8011a34 <__assert_func+0x34>)
 8011a1e:	f000 f829 	bl	8011a74 <fiprintf>
 8011a22:	f000 f839 	bl	8011a98 <abort>
 8011a26:	4b04      	ldr	r3, [pc, #16]	@ (8011a38 <__assert_func+0x38>)
 8011a28:	e7f4      	b.n	8011a14 <__assert_func+0x14>
 8011a2a:	bf00      	nop
 8011a2c:	24000194 	.word	0x24000194
 8011a30:	080122fb 	.word	0x080122fb
 8011a34:	080122cd 	.word	0x080122cd
 8011a38:	080122c0 	.word	0x080122c0

08011a3c <_calloc_r>:
 8011a3c:	b570      	push	{r4, r5, r6, lr}
 8011a3e:	fba1 5402 	umull	r5, r4, r1, r2
 8011a42:	b93c      	cbnz	r4, 8011a54 <_calloc_r+0x18>
 8011a44:	4629      	mov	r1, r5
 8011a46:	f7ff f863 	bl	8010b10 <_malloc_r>
 8011a4a:	4606      	mov	r6, r0
 8011a4c:	b928      	cbnz	r0, 8011a5a <_calloc_r+0x1e>
 8011a4e:	2600      	movs	r6, #0
 8011a50:	4630      	mov	r0, r6
 8011a52:	bd70      	pop	{r4, r5, r6, pc}
 8011a54:	220c      	movs	r2, #12
 8011a56:	6002      	str	r2, [r0, #0]
 8011a58:	e7f9      	b.n	8011a4e <_calloc_r+0x12>
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	4621      	mov	r1, r4
 8011a5e:	f7fd fb93 	bl	800f188 <memset>
 8011a62:	e7f5      	b.n	8011a50 <_calloc_r+0x14>

08011a64 <_malloc_usable_size_r>:
 8011a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a68:	1f18      	subs	r0, r3, #4
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	bfbc      	itt	lt
 8011a6e:	580b      	ldrlt	r3, [r1, r0]
 8011a70:	18c0      	addlt	r0, r0, r3
 8011a72:	4770      	bx	lr

08011a74 <fiprintf>:
 8011a74:	b40e      	push	{r1, r2, r3}
 8011a76:	b503      	push	{r0, r1, lr}
 8011a78:	4601      	mov	r1, r0
 8011a7a:	ab03      	add	r3, sp, #12
 8011a7c:	4805      	ldr	r0, [pc, #20]	@ (8011a94 <fiprintf+0x20>)
 8011a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a82:	6800      	ldr	r0, [r0, #0]
 8011a84:	9301      	str	r3, [sp, #4]
 8011a86:	f7fe ff01 	bl	801088c <_vfiprintf_r>
 8011a8a:	b002      	add	sp, #8
 8011a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a90:	b003      	add	sp, #12
 8011a92:	4770      	bx	lr
 8011a94:	24000194 	.word	0x24000194

08011a98 <abort>:
 8011a98:	b508      	push	{r3, lr}
 8011a9a:	2006      	movs	r0, #6
 8011a9c:	f000 f82c 	bl	8011af8 <raise>
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	f7f2 f81f 	bl	8003ae4 <_exit>

08011aa6 <_raise_r>:
 8011aa6:	291f      	cmp	r1, #31
 8011aa8:	b538      	push	{r3, r4, r5, lr}
 8011aaa:	4605      	mov	r5, r0
 8011aac:	460c      	mov	r4, r1
 8011aae:	d904      	bls.n	8011aba <_raise_r+0x14>
 8011ab0:	2316      	movs	r3, #22
 8011ab2:	6003      	str	r3, [r0, #0]
 8011ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ab8:	bd38      	pop	{r3, r4, r5, pc}
 8011aba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011abc:	b112      	cbz	r2, 8011ac4 <_raise_r+0x1e>
 8011abe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ac2:	b94b      	cbnz	r3, 8011ad8 <_raise_r+0x32>
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	f000 f831 	bl	8011b2c <_getpid_r>
 8011aca:	4622      	mov	r2, r4
 8011acc:	4601      	mov	r1, r0
 8011ace:	4628      	mov	r0, r5
 8011ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ad4:	f000 b818 	b.w	8011b08 <_kill_r>
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d00a      	beq.n	8011af2 <_raise_r+0x4c>
 8011adc:	1c59      	adds	r1, r3, #1
 8011ade:	d103      	bne.n	8011ae8 <_raise_r+0x42>
 8011ae0:	2316      	movs	r3, #22
 8011ae2:	6003      	str	r3, [r0, #0]
 8011ae4:	2001      	movs	r0, #1
 8011ae6:	e7e7      	b.n	8011ab8 <_raise_r+0x12>
 8011ae8:	2100      	movs	r1, #0
 8011aea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011aee:	4620      	mov	r0, r4
 8011af0:	4798      	blx	r3
 8011af2:	2000      	movs	r0, #0
 8011af4:	e7e0      	b.n	8011ab8 <_raise_r+0x12>
	...

08011af8 <raise>:
 8011af8:	4b02      	ldr	r3, [pc, #8]	@ (8011b04 <raise+0xc>)
 8011afa:	4601      	mov	r1, r0
 8011afc:	6818      	ldr	r0, [r3, #0]
 8011afe:	f7ff bfd2 	b.w	8011aa6 <_raise_r>
 8011b02:	bf00      	nop
 8011b04:	24000194 	.word	0x24000194

08011b08 <_kill_r>:
 8011b08:	b538      	push	{r3, r4, r5, lr}
 8011b0a:	4d07      	ldr	r5, [pc, #28]	@ (8011b28 <_kill_r+0x20>)
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	4604      	mov	r4, r0
 8011b10:	4608      	mov	r0, r1
 8011b12:	4611      	mov	r1, r2
 8011b14:	602b      	str	r3, [r5, #0]
 8011b16:	f7f1 ffd5 	bl	8003ac4 <_kill>
 8011b1a:	1c43      	adds	r3, r0, #1
 8011b1c:	d102      	bne.n	8011b24 <_kill_r+0x1c>
 8011b1e:	682b      	ldr	r3, [r5, #0]
 8011b20:	b103      	cbz	r3, 8011b24 <_kill_r+0x1c>
 8011b22:	6023      	str	r3, [r4, #0]
 8011b24:	bd38      	pop	{r3, r4, r5, pc}
 8011b26:	bf00      	nop
 8011b28:	24000d98 	.word	0x24000d98

08011b2c <_getpid_r>:
 8011b2c:	f7f1 bfc2 	b.w	8003ab4 <_getpid>

08011b30 <_init>:
 8011b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b32:	bf00      	nop
 8011b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b36:	bc08      	pop	{r3}
 8011b38:	469e      	mov	lr, r3
 8011b3a:	4770      	bx	lr

08011b3c <_fini>:
 8011b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b3e:	bf00      	nop
 8011b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b42:	bc08      	pop	{r3}
 8011b44:	469e      	mov	lr, r3
 8011b46:	4770      	bx	lr
