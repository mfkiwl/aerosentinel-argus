
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001046c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08010740  08010740  00011740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010c3c  08010c3c  00011c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010c44  08010c44  00011c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010c48  08010c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08010c4c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000694  240001d8  08010e24  000121d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400086c  08010e24  0001286c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022cd1  00000000  00000000  00012206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004142  00000000  00000000  00034ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c10  00000000  00000000  00039020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015e1  00000000  00000000  0003ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006762  00000000  00000000  0003c211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027d90  00000000  00000000  00042973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175428  00000000  00000000  0006a703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dfb2b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b50  00000000  00000000  001dfb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  001e86c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010724 	.word	0x08010724

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	08010724 	.word	0x08010724

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000748:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ab0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ab8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac0:	e000      	b.n	8000ac4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ac2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ace:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	int i=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffc7 	bl	8000a98 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x16>
	}
	return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b28:	f000 fcca 	bl	80014c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f001 fb58 	bl	80021e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f82e 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 fba6 	bl	8001284 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000b38:	f000 f9b6 	bl	8000ea8 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8000b3c:	f000 f898 	bl	8000c70 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b40:	f000 f8d6 	bl	8000cf0 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000b44:	f000 f914 	bl	8000d70 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000b48:	f000 f9cc 	bl	8000ee4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b4c:	f000 fa20 	bl	8000f90 <MX_SPI2_Init>
  MX_UART8_Init();
 8000b50:	f000 fb00 	bl	8001154 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000b54:	f000 fb4a 	bl	80011ec <MX_USART1_UART_Init>
  MX_SPI4_Init();
 8000b58:	f000 fa70 	bl	800103c <MX_SPI4_Init>
  MX_FATFS_Init();
 8000b5c:	f00b f8ae 	bl	800bcbc <MX_FATFS_Init>
  MX_TIM6_Init();
 8000b60:	f000 fac2 	bl	80010e8 <MX_TIM6_Init>
  MX_RTC_Init();
 8000b64:	f000 f944 	bl	8000df0 <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count++; //Increment count variable
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <main+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <main+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]
//	  char temp_buf[200];
	  		// Use sprintf to format the device ID into the buffer
//	  sprintf(temp_buf, "USART: Hello World from Aerosentinel Argus Navigation Module! Count =%lu \n", count);
//	  UART_Transmit_P(temp_buf);
	  printf("Hello World from Aerosentinel Argus Navigation Module! Count =%lu \n", count); // Hello World Test
 8000b72:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <main+0x64>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4619      	mov	r1, r3
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <main+0x68>)
 8000b7a:	f00d f993 	bl	800dea4 <iprintf>
	  HAL_Delay(250);
 8000b7e:	20fa      	movs	r0, #250	@ 0xfa
 8000b80:	f001 fb8a 	bl	8002298 <HAL_Delay>
	  count++; //Increment count variable
 8000b84:	bf00      	nop
 8000b86:	e7ef      	b.n	8000b68 <main+0x44>
 8000b88:	2400069c 	.word	0x2400069c
 8000b8c:	08010780 	.word	0x08010780

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	@ 0x70
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	224c      	movs	r2, #76	@ 0x4c
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00d f9a4 	bl	800deec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00d f99e 	bl	800deec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f002 fd5f 	bl	8003674 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b2c      	ldr	r3, [pc, #176]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd2:	bf00      	nop
 8000bd4:	4b25      	ldr	r3, [pc, #148]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000be0:	d1f8      	bne.n	8000bd4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000be2:	2309      	movs	r3, #9
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000bfc:	231f      	movs	r3, #31
 8000bfe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000c14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 fd62 	bl	80036e8 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c2a:	f000 fc87 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	233f      	movs	r3, #63	@ 0x3f
 8000c30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2303      	movs	r3, #3
 8000c34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c3e:	2340      	movs	r3, #64	@ 0x40
 8000c40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c42:	2340      	movs	r3, #64	@ 0x40
 8000c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c4c:	2340      	movs	r3, #64	@ 0x40
 8000c4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2103      	movs	r1, #3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 f921 	bl	8003e9c <HAL_RCC_ClockConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c60:	f000 fc6c 	bl	800153c <Error_Handler>
  }
}
 8000c64:	bf00      	nop
 8000c66:	3770      	adds	r7, #112	@ 0x70
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58024800 	.word	0x58024800

08000c70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <MX_I2C1_Init+0x78>)
 8000c78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cec <MX_I2C1_Init+0x7c>)
 8000c7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000caa:	480e      	ldr	r0, [pc, #56]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000cac:	f002 fbae 	bl	800340c <HAL_I2C_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cb6:	f000 fc41 	bl	800153c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000cbe:	f002 fc41 	bl	8003544 <HAL_I2CEx_ConfigAnalogFilter>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cc8:	f000 fc38 	bl	800153c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_I2C1_Init+0x74>)
 8000cd0:	f002 fc83 	bl	80035da <HAL_I2CEx_ConfigDigitalFilter>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cda:	f000 fc2f 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	240001f4 	.word	0x240001f4
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	20a0a3f6 	.word	0x20a0a3f6

08000cf0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <MX_I2C2_Init+0x78>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <MX_I2C2_Init+0x7c>)
 8000cfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d06:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d2a:	480e      	ldr	r0, [pc, #56]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d2c:	f002 fb6e 	bl	800340c <HAL_I2C_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d36:	f000 fc01 	bl	800153c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4809      	ldr	r0, [pc, #36]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d3e:	f002 fc01 	bl	8003544 <HAL_I2CEx_ConfigAnalogFilter>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d48:	f000 fbf8 	bl	800153c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_I2C2_Init+0x74>)
 8000d50:	f002 fc43 	bl	80035da <HAL_I2CEx_ConfigDigitalFilter>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d5a:	f000 fbef 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	24000248 	.word	0x24000248
 8000d68:	40005800 	.word	0x40005800
 8000d6c:	20a0a3f6 	.word	0x20a0a3f6

08000d70 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <MX_I2C4_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <MX_I2C4_Init+0x7c>)
 8000d7e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000dac:	f002 fb2e 	bl	800340c <HAL_I2C_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000db6:	f000 fbc1 	bl	800153c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000dba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dbe:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000dc0:	f002 fbc0 	bl	8003544 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000dca:	f000 fbb7 	bl	800153c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <MX_I2C4_Init+0x74>)
 8000dd2:	f002 fc02 	bl	80035da <HAL_I2CEx_ConfigDigitalFilter>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000ddc:	f000 fbae 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2400029c 	.word	0x2400029c
 8000de8:	58001c00 	.word	0x58001c00
 8000dec:	60405858 	.word	0x60405858

08000df0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e08:	4b25      	ldr	r3, [pc, #148]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e0a:	4a26      	ldr	r2, [pc, #152]	@ (8000ea4 <MX_RTC_Init+0xb4>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e14:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e16:	227f      	movs	r2, #127	@ 0x7f
 8000e18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e1c:	22ff      	movs	r2, #255	@ 0xff
 8000e1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e38:	4819      	ldr	r0, [pc, #100]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e3a:	f005 ffe3 	bl	8006e04 <HAL_RTC_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000e44:	f000 fb7a 	bl	800153c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4619      	mov	r1, r3
 8000e62:	480f      	ldr	r0, [pc, #60]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e64:	f006 f850 	bl	8006f08 <HAL_RTC_SetTime>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000e6e:	f000 fb65 	bl	800153c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e72:	2301      	movs	r3, #1
 8000e74:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e76:	2301      	movs	r3, #1
 8000e78:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	2201      	movs	r2, #1
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_RTC_Init+0xb0>)
 8000e8a:	f006 f8db 	bl	8007044 <HAL_RTC_SetDate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000e94:	f000 fb52 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	240002f0 	.word	0x240002f0
 8000ea4:	58004000 	.word	0x58004000

08000ea8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <MX_SDMMC1_SD_Init+0x34>)
 8000eae:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <MX_SDMMC1_SD_Init+0x38>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <MX_SDMMC1_SD_Init+0x34>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <MX_SDMMC1_SD_Init+0x34>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <MX_SDMMC1_SD_Init+0x34>)
 8000ec0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ec4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ec6:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <MX_SDMMC1_SD_Init+0x34>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <MX_SDMMC1_SD_Init+0x34>)
 8000ece:	2208      	movs	r2, #8
 8000ed0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	24000314 	.word	0x24000314
 8000ee0:	52007000 	.word	0x52007000

08000ee4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000eea:	4a28      	ldr	r2, [pc, #160]	@ (8000f8c <MX_SPI1_Init+0xa8>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000ef0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000efe:	2207      	movs	r2, #7
 8000f00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f18:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000f1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f3e:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f44:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	@ (8000f88 <MX_SPI1_Init+0xa4>)
 8000f76:	f007 fe07 	bl	8008b88 <HAL_SPI_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f80:	f000 fadc 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	24000390 	.word	0x24000390
 8000f8c:	40013000 	.word	0x40013000

08000f90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000f96:	4a28      	ldr	r2, [pc, #160]	@ (8001038 <MX_SPI2_Init+0xa8>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000f9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000faa:	2207      	movs	r2, #7
 8000fac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fc4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000fc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fe4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fea:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ff0:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <MX_SPI2_Init+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI2_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_SPI2_Init+0xa4>)
 8001022:	f007 fdb1 	bl	8008b88 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800102c:	f000 fa86 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	24000418 	.word	0x24000418
 8001038:	40003800 	.word	0x40003800

0800103c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001042:	4a28      	ldr	r2, [pc, #160]	@ (80010e4 <MX_SPI4_Init+0xa8>)
 8001044:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001048:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800104c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800104e:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001054:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001056:	2207      	movs	r2, #7
 8001058:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105a:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001068:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800106c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800106e:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001070:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001074:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001076:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800107c:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001082:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001090:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001094:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_SPI4_Init+0xa4>)
 80010ce:	f007 fd5b 	bl	8008b88 <HAL_SPI_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80010d8:	f000 fa30 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	240004a0 	.word	0x240004a0
 80010e4:	40013400 	.word	0x40013400

080010e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_TIM6_Init+0x64>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <MX_TIM6_Init+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 49999;
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_TIM6_Init+0x64>)
 8001100:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001104:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_TIM6_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_TIM6_Init+0x64>)
 800110e:	2209      	movs	r2, #9
 8001110:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_TIM6_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <MX_TIM6_Init+0x64>)
 800111a:	f007 fe74 	bl	8008e06 <HAL_TIM_Base_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001124:	f000 fa0a 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001128:	2320      	movs	r3, #32
 800112a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_TIM6_Init+0x64>)
 8001136:	f008 f925 	bl	8009384 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 f9fc 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	24000528 	.word	0x24000528
 8001150:	40001000 	.word	0x40001000

08001154 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001158:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <MX_UART8_Init+0x90>)
 800115a:	4a23      	ldr	r2, [pc, #140]	@ (80011e8 <MX_UART8_Init+0x94>)
 800115c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800115e:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <MX_UART8_Init+0x90>)
 8001160:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001164:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <MX_UART8_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_UART8_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <MX_UART8_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_UART8_Init+0x90>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_UART8_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <MX_UART8_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_UART8_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_UART8_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_UART8_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800119c:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <MX_UART8_Init+0x90>)
 800119e:	f008 f9ab 	bl	80094f8 <HAL_UART_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80011a8:	f000 f9c8 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MX_UART8_Init+0x90>)
 80011b0:	f009 fef0 	bl	800af94 <HAL_UARTEx_SetTxFifoThreshold>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80011ba:	f000 f9bf 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4808      	ldr	r0, [pc, #32]	@ (80011e4 <MX_UART8_Init+0x90>)
 80011c2:	f009 ff25 	bl	800b010 <HAL_UARTEx_SetRxFifoThreshold>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f000 f9b6 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_UART8_Init+0x90>)
 80011d2:	f009 fea6 	bl	800af22 <HAL_UARTEx_DisableFifoMode>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80011dc:	f000 f9ae 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	24000574 	.word	0x24000574
 80011e8:	40007c00 	.word	0x40007c00

080011ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f0:	4b22      	ldr	r3, [pc, #136]	@ (800127c <MX_USART1_UART_Init+0x90>)
 80011f2:	4a23      	ldr	r2, [pc, #140]	@ (8001280 <MX_USART1_UART_Init+0x94>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011f6:	4b21      	ldr	r3, [pc, #132]	@ (800127c <MX_USART1_UART_Init+0x90>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <MX_USART1_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_USART1_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <MX_USART1_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_USART1_UART_Init+0x90>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <MX_USART1_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_USART1_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <MX_USART1_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_USART1_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <MX_USART1_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001234:	4811      	ldr	r0, [pc, #68]	@ (800127c <MX_USART1_UART_Init+0x90>)
 8001236:	f008 f95f 	bl	80094f8 <HAL_UART_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001240:	f000 f97c 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_USART1_UART_Init+0x90>)
 8001248:	f009 fea4 	bl	800af94 <HAL_UARTEx_SetTxFifoThreshold>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001252:	f000 f973 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	4808      	ldr	r0, [pc, #32]	@ (800127c <MX_USART1_UART_Init+0x90>)
 800125a:	f009 fed9 	bl	800b010 <HAL_UARTEx_SetRxFifoThreshold>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001264:	f000 f96a 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_USART1_UART_Init+0x90>)
 800126a:	f009 fe5a 	bl	800af22 <HAL_UARTEx_DisableFifoMode>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001274:	f000 f962 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24000608 	.word	0x24000608
 8001280:	40011000 	.word	0x40011000

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	@ 0x30
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4b83      	ldr	r3, [pc, #524]	@ (80014a8 <MX_GPIO_Init+0x224>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	4a81      	ldr	r2, [pc, #516]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012aa:	4b7f      	ldr	r3, [pc, #508]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b8:	4b7b      	ldr	r3, [pc, #492]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	4a7a      	ldr	r2, [pc, #488]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c8:	4b77      	ldr	r3, [pc, #476]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b74      	ldr	r3, [pc, #464]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012dc:	4a72      	ldr	r2, [pc, #456]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e6:	4b70      	ldr	r3, [pc, #448]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b6c      	ldr	r3, [pc, #432]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fa:	4a6b      	ldr	r2, [pc, #428]	@ (80014a8 <MX_GPIO_Init+0x224>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001304:	4b68      	ldr	r3, [pc, #416]	@ (80014a8 <MX_GPIO_Init+0x224>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	4b65      	ldr	r3, [pc, #404]	@ (80014a8 <MX_GPIO_Init+0x224>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001318:	4a63      	ldr	r2, [pc, #396]	@ (80014a8 <MX_GPIO_Init+0x224>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001322:	4b61      	ldr	r3, [pc, #388]	@ (80014a8 <MX_GPIO_Init+0x224>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001330:	4b5d      	ldr	r3, [pc, #372]	@ (80014a8 <MX_GPIO_Init+0x224>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	4a5c      	ldr	r2, [pc, #368]	@ (80014a8 <MX_GPIO_Init+0x224>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001340:	4b59      	ldr	r3, [pc, #356]	@ (80014a8 <MX_GPIO_Init+0x224>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2110      	movs	r1, #16
 8001352:	4856      	ldr	r0, [pc, #344]	@ (80014ac <MX_GPIO_Init+0x228>)
 8001354:	f002 f840 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2110      	movs	r1, #16
 800135c:	4854      	ldr	r0, [pc, #336]	@ (80014b0 <MX_GPIO_Init+0x22c>)
 800135e:	f002 f83b 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001368:	4852      	ldr	r0, [pc, #328]	@ (80014b4 <MX_GPIO_Init+0x230>)
 800136a:	f002 f835 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800136e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	484d      	ldr	r0, [pc, #308]	@ (80014b8 <MX_GPIO_Init+0x234>)
 8001384:	f001 fe68 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001388:	2310      	movs	r3, #16
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001394:	2302      	movs	r3, #2
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4843      	ldr	r0, [pc, #268]	@ (80014ac <MX_GPIO_Init+0x228>)
 80013a0:	f001 fe5a 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	4841      	ldr	r0, [pc, #260]	@ (80014bc <MX_GPIO_Init+0x238>)
 80013b8:	f001 fe4e 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	483a      	ldr	r0, [pc, #232]	@ (80014b8 <MX_GPIO_Init+0x234>)
 80013d0:	f001 fe42 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013d4:	2308      	movs	r3, #8
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4834      	ldr	r0, [pc, #208]	@ (80014b8 <MX_GPIO_Init+0x234>)
 80013e8:	f001 fe36 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 80013ec:	2310      	movs	r3, #16
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	482b      	ldr	r0, [pc, #172]	@ (80014b0 <MX_GPIO_Init+0x22c>)
 8001404:	f001 fe28 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001408:	2304      	movs	r3, #4
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140c:	2303      	movs	r3, #3
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4826      	ldr	r0, [pc, #152]	@ (80014b4 <MX_GPIO_Init+0x230>)
 800141c:	f001 fe1c 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8001420:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	481d      	ldr	r0, [pc, #116]	@ (80014ac <MX_GPIO_Init+0x228>)
 8001436:	f001 fe0f 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 800143a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <MX_GPIO_Init+0x230>)
 8001454:	f001 fe00 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001458:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	480f      	ldr	r0, [pc, #60]	@ (80014ac <MX_GPIO_Init+0x228>)
 800146e:	f001 fdf3 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001472:	2308      	movs	r3, #8
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	480a      	ldr	r0, [pc, #40]	@ (80014b0 <MX_GPIO_Init+0x22c>)
 8001486:	f001 fde7 	bl	8003058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001490:	4808      	ldr	r0, [pc, #32]	@ (80014b4 <MX_GPIO_Init+0x230>)
 8001492:	f001 ffa1 	bl	80033d8 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2110      	movs	r1, #16
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_GPIO_Init+0x22c>)
 800149c:	f001 ff9c 	bl	80033d8 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	@ 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58021000 	.word	0x58021000
 80014b0:	58020000 	.word	0x58020000
 80014b4:	58020400 	.word	0x58020400
 80014b8:	58020800 	.word	0x58020800
 80014bc:	58020c00 	.word	0x58020c00

080014c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014d2:	f000 ffe5 	bl	80024a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014d6:	2301      	movs	r3, #1
 80014d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014da:	2300      	movs	r3, #0
 80014dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80014e2:	231f      	movs	r3, #31
 80014e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80014e6:	2387      	movs	r3, #135	@ 0x87
 80014e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80014ee:	2300      	movs	r3, #0
 80014f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001502:	463b      	mov	r3, r7
 8001504:	4618      	mov	r0, r3
 8001506:	f001 f803 	bl	8002510 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800150a:	2004      	movs	r0, #4
 800150c:	f000 ffe0 	bl	80024d0 <HAL_MPU_Enable>

}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800152a:	f000 fe95 	bl	8002258 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40001400 	.word	0x40001400

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <Error_Handler+0x8>

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_MspInit+0x30>)
 8001550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001554:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <HAL_MspInit+0x30>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_MspInit+0x30>)
 8001560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	58024400 	.word	0x58024400

0800157c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0bc      	sub	sp, #240	@ 0xf0
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	22b8      	movs	r2, #184	@ 0xb8
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f00c fca5 	bl	800deec <memset>
  if(hi2c->Instance==I2C1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a74      	ldr	r2, [pc, #464]	@ (8001778 <HAL_I2C_MspInit+0x1fc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d147      	bne.n	800163c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015ac:	f04f 0208 	mov.w	r2, #8
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 f838 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015ce:	f7ff ffb5 	bl	800153c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	4b6a      	ldr	r3, [pc, #424]	@ (800177c <HAL_I2C_MspInit+0x200>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d8:	4a68      	ldr	r2, [pc, #416]	@ (800177c <HAL_I2C_MspInit+0x200>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e2:	4b66      	ldr	r3, [pc, #408]	@ (800177c <HAL_I2C_MspInit+0x200>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015f0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f8:	2312      	movs	r3, #18
 80015fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160a:	2304      	movs	r3, #4
 800160c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001614:	4619      	mov	r1, r3
 8001616:	485a      	ldr	r0, [pc, #360]	@ (8001780 <HAL_I2C_MspInit+0x204>)
 8001618:	f001 fd1e 	bl	8003058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161c:	4b57      	ldr	r3, [pc, #348]	@ (800177c <HAL_I2C_MspInit+0x200>)
 800161e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001622:	4a56      	ldr	r2, [pc, #344]	@ (800177c <HAL_I2C_MspInit+0x200>)
 8001624:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001628:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800162c:	4b53      	ldr	r3, [pc, #332]	@ (800177c <HAL_I2C_MspInit+0x200>)
 800162e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800163a:	e098      	b.n	800176e <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a50      	ldr	r2, [pc, #320]	@ (8001784 <HAL_I2C_MspInit+0x208>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d147      	bne.n	80016d6 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001646:	f04f 0208 	mov.w	r2, #8
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	4618      	mov	r0, r3
 800165e:	f002 ffeb 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001668:	f7ff ff68 	bl	800153c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b43      	ldr	r3, [pc, #268]	@ (800177c <HAL_I2C_MspInit+0x200>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	4a42      	ldr	r2, [pc, #264]	@ (800177c <HAL_I2C_MspInit+0x200>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167c:	4b3f      	ldr	r3, [pc, #252]	@ (800177c <HAL_I2C_MspInit+0x200>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800168a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800168e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001692:	2312      	movs	r3, #18
 8001694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016a4:	2304      	movs	r3, #4
 80016a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016ae:	4619      	mov	r1, r3
 80016b0:	4833      	ldr	r0, [pc, #204]	@ (8001780 <HAL_I2C_MspInit+0x204>)
 80016b2:	f001 fcd1 	bl	8003058 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016b6:	4b31      	ldr	r3, [pc, #196]	@ (800177c <HAL_I2C_MspInit+0x200>)
 80016b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016bc:	4a2f      	ldr	r2, [pc, #188]	@ (800177c <HAL_I2C_MspInit+0x200>)
 80016be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016c6:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <HAL_I2C_MspInit+0x200>)
 80016c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]
}
 80016d4:	e04b      	b.n	800176e <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <HAL_I2C_MspInit+0x20c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d146      	bne.n	800176e <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80016e0:	f04f 0210 	mov.w	r2, #16
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 ff9e 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8001702:	f7ff ff1b 	bl	800153c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <HAL_I2C_MspInit+0x200>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170c:	4a1b      	ldr	r2, [pc, #108]	@ (800177c <HAL_I2C_MspInit+0x200>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_I2C_MspInit+0x200>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001724:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001728:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172c:	2312      	movs	r3, #18
 800172e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800173e:	2304      	movs	r3, #4
 8001740:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001744:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001748:	4619      	mov	r1, r3
 800174a:	4810      	ldr	r0, [pc, #64]	@ (800178c <HAL_I2C_MspInit+0x210>)
 800174c:	f001 fc84 	bl	8003058 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001750:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_I2C_MspInit+0x200>)
 8001752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001756:	4a09      	ldr	r2, [pc, #36]	@ (800177c <HAL_I2C_MspInit+0x200>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800175c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_I2C_MspInit+0x200>)
 8001762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
}
 800176e:	bf00      	nop
 8001770:	37f0      	adds	r7, #240	@ 0xf0
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40005400 	.word	0x40005400
 800177c:	58024400 	.word	0x58024400
 8001780:	58020400 	.word	0x58020400
 8001784:	40005800 	.word	0x40005800
 8001788:	58001c00 	.word	0x58001c00
 800178c:	58020c00 	.word	0x58020c00

08001790 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0b0      	sub	sp, #192	@ 0xc0
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	22b8      	movs	r2, #184	@ 0xb8
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f00c fba3 	bl	800deec <memset>
  if(hrtc->Instance==RTC)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a10      	ldr	r2, [pc, #64]	@ (80017ec <HAL_RTC_MspInit+0x5c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d119      	bne.n	80017e4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c4:	f107 0308 	add.w	r3, r7, #8
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 ff35 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80017d4:	f7ff feb2 	bl	800153c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017d8:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <HAL_RTC_MspInit+0x60>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <HAL_RTC_MspInit+0x60>)
 80017de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017e2:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80017e4:	bf00      	nop
 80017e6:	37c0      	adds	r7, #192	@ 0xc0
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	58004000 	.word	0x58004000
 80017f0:	58024400 	.word	0x58024400

080017f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0ba      	sub	sp, #232	@ 0xe8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800180c:	f107 0318 	add.w	r3, r7, #24
 8001810:	22b8      	movs	r2, #184	@ 0xb8
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f00c fb69 	bl	800deec <memset>
  if(hsd->Instance==SDMMC1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a45      	ldr	r2, [pc, #276]	@ (8001934 <HAL_SD_MspInit+0x140>)
 8001820:	4293      	cmp	r3, r2
 8001822:	f040 8083 	bne.w	800192c <HAL_SD_MspInit+0x138>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001826:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 3;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001836:	230c      	movs	r3, #12
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800183a:	2302      	movs	r3, #2
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800183e:	2302      	movs	r3, #2
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001842:	2302      	movs	r3, #2
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001846:	23c0      	movs	r3, #192	@ 0xc0
 8001848:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800184a:	2300      	movs	r3, #0
 800184c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001856:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001858:	f107 0318 	add.w	r3, r7, #24
 800185c:	4618      	mov	r0, r3
 800185e:	f002 feeb 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_SD_MspInit+0x78>
    {
      Error_Handler();
 8001868:	f7ff fe68 	bl	800153c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <HAL_SD_MspInit+0x144>)
 800186e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001872:	4a31      	ldr	r2, [pc, #196]	@ (8001938 <HAL_SD_MspInit+0x144>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001878:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800187c:	4b2e      	ldr	r3, [pc, #184]	@ (8001938 <HAL_SD_MspInit+0x144>)
 800187e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800188a:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <HAL_SD_MspInit+0x144>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001890:	4a29      	ldr	r2, [pc, #164]	@ (8001938 <HAL_SD_MspInit+0x144>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800189a:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_SD_MspInit+0x144>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a8:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <HAL_SD_MspInit+0x144>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	4a22      	ldr	r2, [pc, #136]	@ (8001938 <HAL_SD_MspInit+0x144>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <HAL_SD_MspInit+0x144>)
 80018ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018c6:	2304      	movs	r3, #4
 80018c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018de:	230c      	movs	r3, #12
 80018e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4814      	ldr	r0, [pc, #80]	@ (800193c <HAL_SD_MspInit+0x148>)
 80018ec:	f001 fbb4 	bl	8003058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 80018f0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80018f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800190a:	230c      	movs	r3, #12
 800190c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001910:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001914:	4619      	mov	r1, r3
 8001916:	480a      	ldr	r0, [pc, #40]	@ (8001940 <HAL_SD_MspInit+0x14c>)
 8001918:	f001 fb9e 	bl	8003058 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2031      	movs	r0, #49	@ 0x31
 8001922:	f000 fd95 	bl	8002450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001926:	2031      	movs	r0, #49	@ 0x31
 8001928:	f000 fdac 	bl	8002484 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800192c:	bf00      	nop
 800192e:	37e8      	adds	r7, #232	@ 0xe8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	52007000 	.word	0x52007000
 8001938:	58024400 	.word	0x58024400
 800193c:	58020c00 	.word	0x58020c00
 8001940:	58020800 	.word	0x58020800

08001944 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b0be      	sub	sp, #248	@ 0xf8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800195c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001960:	22b8      	movs	r2, #184	@ 0xb8
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f00c fac1 	bl	800deec <memset>
  if(hspi->Instance==SPI1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a97      	ldr	r2, [pc, #604]	@ (8001bcc <HAL_SPI_MspInit+0x288>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d16a      	bne.n	8001a4a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001974:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fe54 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001996:	f7ff fdd1 	bl	800153c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800199a:	4b8d      	ldr	r3, [pc, #564]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 800199c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019a0:	4a8b      	ldr	r2, [pc, #556]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 80019a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019aa:	4b89      	ldr	r3, [pc, #548]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 80019ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	4b85      	ldr	r3, [pc, #532]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019be:	4a84      	ldr	r2, [pc, #528]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019c8:	4b81      	ldr	r3, [pc, #516]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b7e      	ldr	r3, [pc, #504]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019dc:	4a7c      	ldr	r2, [pc, #496]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019e6:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019f4:	2310      	movs	r3, #16
 80019f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a16:	4619      	mov	r1, r3
 8001a18:	486e      	ldr	r0, [pc, #440]	@ (8001bd4 <HAL_SPI_MspInit+0x290>)
 8001a1a:	f001 fb1d 	bl	8003058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a1e:	23a0      	movs	r3, #160	@ 0xa0
 8001a20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a36:	2305      	movs	r3, #5
 8001a38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4865      	ldr	r0, [pc, #404]	@ (8001bd8 <HAL_SPI_MspInit+0x294>)
 8001a44:	f001 fb08 	bl	8003058 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001a48:	e0bb      	b.n	8001bc2 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a63      	ldr	r2, [pc, #396]	@ (8001bdc <HAL_SPI_MspInit+0x298>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d16b      	bne.n	8001b2c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fde4 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8001a76:	f7ff fd61 	bl	800153c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a7a:	4b55      	ldr	r3, [pc, #340]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a80:	4a53      	ldr	r2, [pc, #332]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a8a:	4b51      	ldr	r3, [pc, #324]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9e:	4a4c      	ldr	r2, [pc, #304]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa8:	4b49      	ldr	r3, [pc, #292]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	4b46      	ldr	r3, [pc, #280]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abc:	4a44      	ldr	r2, [pc, #272]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac6:	4b42      	ldr	r3, [pc, #264]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aee:	2305      	movs	r3, #5
 8001af0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4837      	ldr	r0, [pc, #220]	@ (8001bd8 <HAL_SPI_MspInit+0x294>)
 8001afc:	f001 faac 	bl	8003058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8001b00:	2306      	movs	r3, #6
 8001b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b22:	4619      	mov	r1, r3
 8001b24:	482e      	ldr	r0, [pc, #184]	@ (8001be0 <HAL_SPI_MspInit+0x29c>)
 8001b26:	f001 fa97 	bl	8003058 <HAL_GPIO_Init>
}
 8001b2a:	e04a      	b.n	8001bc2 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2c      	ldr	r2, [pc, #176]	@ (8001be4 <HAL_SPI_MspInit+0x2a0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d145      	bne.n	8001bc2 <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001b36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 fd73 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_SPI_MspInit+0x218>
      Error_Handler();
 8001b58:	f7ff fcf0 	bl	800153c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b62:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001b64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b6c:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b80:	4a13      	ldr	r2, [pc, #76]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b8a:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <HAL_SPI_MspInit+0x28c>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001b98:	2364      	movs	r3, #100	@ 0x64
 8001b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001bb0:	2305      	movs	r3, #5
 8001bb2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480a      	ldr	r0, [pc, #40]	@ (8001be8 <HAL_SPI_MspInit+0x2a4>)
 8001bbe:	f001 fa4b 	bl	8003058 <HAL_GPIO_Init>
}
 8001bc2:	bf00      	nop
 8001bc4:	37f8      	adds	r7, #248	@ 0xf8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40013000 	.word	0x40013000
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	58020400 	.word	0x58020400
 8001bd8:	58020000 	.word	0x58020000
 8001bdc:	40003800 	.word	0x40003800
 8001be0:	58020800 	.word	0x58020800
 8001be4:	40013400 	.word	0x40013400
 8001be8:	58021000 	.word	0x58021000

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c34 <HAL_TIM_Base_MspInit+0x48>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d116      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_TIM_Base_MspInit+0x4c>)
 8001c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c04:	4a0c      	ldr	r2, [pc, #48]	@ (8001c38 <HAL_TIM_Base_MspInit+0x4c>)
 8001c06:	f043 0310 	orr.w	r3, r3, #16
 8001c0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_TIM_Base_MspInit+0x4c>)
 8001c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2036      	movs	r0, #54	@ 0x36
 8001c22:	f000 fc15 	bl	8002450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c26:	2036      	movs	r0, #54	@ 0x36
 8001c28:	f000 fc2c 	bl	8002484 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40001000 	.word	0x40001000
 8001c38:	58024400 	.word	0x58024400

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0ba      	sub	sp, #232	@ 0xe8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	22b8      	movs	r2, #184	@ 0xb8
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f00c f945 	bl	800deec <memset>
  if(huart->Instance==UART8)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a51      	ldr	r2, [pc, #324]	@ (8001dac <HAL_UART_MspInit+0x170>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d14e      	bne.n	8001d0a <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001c6c:	f04f 0202 	mov.w	r2, #2
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 fcd8 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c8e:	f7ff fc55 	bl	800153c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001c92:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c98:	4a45      	ldr	r2, [pc, #276]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001c9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ca2:	4b43      	ldr	r3, [pc, #268]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4830      	ldr	r0, [pc, #192]	@ (8001db4 <HAL_UART_MspInit+0x178>)
 8001cf4:	f001 f9b0 	bl	8003058 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	2053      	movs	r0, #83	@ 0x53
 8001cfe:	f000 fba7 	bl	8002450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001d02:	2053      	movs	r0, #83	@ 0x53
 8001d04:	f000 fbbe 	bl	8002484 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d08:	e04b      	b.n	8001da2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001db8 <HAL_UART_MspInit+0x17c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d146      	bne.n	8001da2 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d14:	f04f 0201 	mov.w	r2, #1
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d26:	f107 0318 	add.w	r3, r7, #24
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 fc84 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8001d36:	f7ff fc01 	bl	800153c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d40:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001d42:	f043 0310 	orr.w	r3, r3, #16
 8001d46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5e:	4a14      	ldr	r2, [pc, #80]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_UART_MspInit+0x174>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d90:	2307      	movs	r3, #7
 8001d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4807      	ldr	r0, [pc, #28]	@ (8001dbc <HAL_UART_MspInit+0x180>)
 8001d9e:	f001 f95b 	bl	8003058 <HAL_GPIO_Init>
}
 8001da2:	bf00      	nop
 8001da4:	37e8      	adds	r7, #232	@ 0xe8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40007c00 	.word	0x40007c00
 8001db0:	58024400 	.word	0x58024400
 8001db4:	58021000 	.word	0x58021000
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	58020000 	.word	0x58020000

08001dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b090      	sub	sp, #64	@ 0x40
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	d827      	bhi.n	8001e1e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	2037      	movs	r0, #55	@ 0x37
 8001dd4:	f000 fb3c 	bl	8002450 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001dd8:	2037      	movs	r0, #55	@ 0x37
 8001dda:	f000 fb53 	bl	8002484 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001dde:	4a29      	ldr	r2, [pc, #164]	@ (8001e84 <HAL_InitTick+0xc4>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <HAL_InitTick+0xc8>)
 8001de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dea:	4a27      	ldr	r2, [pc, #156]	@ (8001e88 <HAL_InitTick+0xc8>)
 8001dec:	f043 0320 	orr.w	r3, r3, #32
 8001df0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001df4:	4b24      	ldr	r3, [pc, #144]	@ (8001e88 <HAL_InitTick+0xc8>)
 8001df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e02:	f107 0210 	add.w	r2, r7, #16
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 fbd1 	bl	80045b4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <HAL_InitTick+0x6a>
 8001e1c:	e001      	b.n	8001e22 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e02b      	b.n	8001e7a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e22:	f002 fb9b 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8001e26:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001e28:	e004      	b.n	8001e34 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e2a:	f002 fb97 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e36:	4a15      	ldr	r2, [pc, #84]	@ (8001e8c <HAL_InitTick+0xcc>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	0c9b      	lsrs	r3, r3, #18
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <HAL_InitTick+0xd0>)
 8001e44:	4a13      	ldr	r2, [pc, #76]	@ (8001e94 <HAL_InitTick+0xd4>)
 8001e46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <HAL_InitTick+0xd0>)
 8001e4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e4e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001e50:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <HAL_InitTick+0xd0>)
 8001e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e54:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <HAL_InitTick+0xd0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_InitTick+0xd0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001e62:	480b      	ldr	r0, [pc, #44]	@ (8001e90 <HAL_InitTick+0xd0>)
 8001e64:	f006 ffcf 	bl	8008e06 <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001e6e:	4808      	ldr	r0, [pc, #32]	@ (8001e90 <HAL_InitTick+0xd0>)
 8001e70:	f007 f820 	bl	8008eb4 <HAL_TIM_Base_Start_IT>
 8001e74:	4603      	mov	r3, r0
 8001e76:	e000      	b.n	8001e7a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3740      	adds	r7, #64	@ 0x40
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	24000008 	.word	0x24000008
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	431bde83 	.word	0x431bde83
 8001e90:	240006a0 	.word	0x240006a0
 8001e94:	40001400 	.word	0x40001400

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <NMI_Handler+0x4>

08001ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <MemManage_Handler+0x4>

08001eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <BusFault_Handler+0x4>

08001eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <UsageFault_Handler+0x4>

08001ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <SDMMC1_IRQHandler+0x10>)
 8001efe:	f005 fc4f 	bl	80077a0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	24000314 	.word	0x24000314

08001f0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <TIM6_DAC_IRQHandler+0x10>)
 8001f12:	f007 f855 	bl	8008fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	24000528 	.word	0x24000528

08001f20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f24:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <TIM7_IRQHandler+0x10>)
 8001f26:	f007 f84b 	bl	8008fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	240006a0 	.word	0x240006a0

08001f34 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <UART8_IRQHandler+0x10>)
 8001f3a:	f007 fb2d 	bl	8009598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	24000574 	.word	0x24000574

08001f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return 1;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_kill>:

int _kill(int pid, int sig)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f62:	f00c f825 	bl	800dfb0 <__errno>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2216      	movs	r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_exit>:

void _exit (int status)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffe7 	bl	8001f58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f8a:	bf00      	nop
 8001f8c:	e7fd      	b.n	8001f8a <_exit+0x12>

08001f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e00a      	b.n	8001fb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fa0:	f3af 8000 	nop.w
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	60ba      	str	r2, [r7, #8]
 8001fac:	b2ca      	uxtb	r2, r1
 8001fae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dbf0      	blt.n	8001fa0 <_read+0x12>
  }

  return len;
 8001fbe:	687b      	ldr	r3, [r7, #4]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ff0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_isatty>:

int _isatty(int file)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002008:	2301      	movs	r3, #1
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f00b ffa6 	bl	800dfb0 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	24050000 	.word	0x24050000
 8002090:	00000400 	.word	0x00000400
 8002094:	240006ec 	.word	0x240006ec
 8002098:	24000870 	.word	0x24000870

0800209c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020a0:	4b32      	ldr	r3, [pc, #200]	@ (800216c <SystemInit+0xd0>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	4a31      	ldr	r2, [pc, #196]	@ (800216c <SystemInit+0xd0>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <SystemInit+0xd4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	2b06      	cmp	r3, #6
 80020ba:	d807      	bhi.n	80020cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <SystemInit+0xd4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 030f 	bic.w	r3, r3, #15
 80020c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002170 <SystemInit+0xd4>)
 80020c6:	f043 0307 	orr.w	r3, r3, #7
 80020ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <SystemInit+0xd8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a28      	ldr	r2, [pc, #160]	@ (8002174 <SystemInit+0xd8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020d8:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <SystemInit+0xd8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020de:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <SystemInit+0xd8>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4924      	ldr	r1, [pc, #144]	@ (8002174 <SystemInit+0xd8>)
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <SystemInit+0xdc>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020ea:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <SystemInit+0xd4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <SystemInit+0xd4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 030f 	bic.w	r3, r3, #15
 80020fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002170 <SystemInit+0xd4>)
 8002100:	f043 0307 	orr.w	r3, r3, #7
 8002104:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002106:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <SystemInit+0xd8>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <SystemInit+0xd8>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002112:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <SystemInit+0xd8>)
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002118:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <SystemInit+0xd8>)
 800211a:	4a18      	ldr	r2, [pc, #96]	@ (800217c <SystemInit+0xe0>)
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <SystemInit+0xd8>)
 8002120:	4a17      	ldr	r2, [pc, #92]	@ (8002180 <SystemInit+0xe4>)
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002124:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <SystemInit+0xd8>)
 8002126:	4a17      	ldr	r2, [pc, #92]	@ (8002184 <SystemInit+0xe8>)
 8002128:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800212a:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <SystemInit+0xd8>)
 800212c:	2200      	movs	r2, #0
 800212e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002130:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <SystemInit+0xd8>)
 8002132:	4a14      	ldr	r2, [pc, #80]	@ (8002184 <SystemInit+0xe8>)
 8002134:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002136:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <SystemInit+0xd8>)
 8002138:	2200      	movs	r2, #0
 800213a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <SystemInit+0xd8>)
 800213e:	4a11      	ldr	r2, [pc, #68]	@ (8002184 <SystemInit+0xe8>)
 8002140:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002142:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <SystemInit+0xd8>)
 8002144:	2200      	movs	r2, #0
 8002146:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002148:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <SystemInit+0xd8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <SystemInit+0xd8>)
 800214e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002152:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <SystemInit+0xd8>)
 8002156:	2200      	movs	r2, #0
 8002158:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <SystemInit+0xec>)
 800215c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002160:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00
 8002170:	52002000 	.word	0x52002000
 8002174:	58024400 	.word	0x58024400
 8002178:	eaf6ed7f 	.word	0xeaf6ed7f
 800217c:	02020200 	.word	0x02020200
 8002180:	01ff0000 	.word	0x01ff0000
 8002184:	01010280 	.word	0x01010280
 8002188:	52004000 	.word	0x52004000

0800218c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002190:	f7ff ff84 	bl	800209c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002194:	480c      	ldr	r0, [pc, #48]	@ (80021c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002196:	490d      	ldr	r1, [pc, #52]	@ (80021cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002198:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021ac:	4c0a      	ldr	r4, [pc, #40]	@ (80021d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ba:	f00b feff 	bl	800dfbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021be:	f7fe fcb1 	bl	8000b24 <main>
  bx  lr
 80021c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80021c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021cc:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80021d0:	08010c4c 	.word	0x08010c4c
  ldr r2, =_sbss
 80021d4:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80021d8:	2400086c 	.word	0x2400086c

080021dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC3_IRQHandler>
	...

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e6:	2003      	movs	r0, #3
 80021e8:	f000 f927 	bl	800243a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021ec:	f002 f80c 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <HAL_Init+0x68>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	4913      	ldr	r1, [pc, #76]	@ (800224c <HAL_Init+0x6c>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800220a:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <HAL_Init+0x68>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	4a0e      	ldr	r2, [pc, #56]	@ (800224c <HAL_Init+0x6c>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	4a0b      	ldr	r2, [pc, #44]	@ (8002250 <HAL_Init+0x70>)
 8002222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002224:	4a0b      	ldr	r2, [pc, #44]	@ (8002254 <HAL_Init+0x74>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff fdc8 	bl	8001dc0 <HAL_InitTick>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e002      	b.n	8002240 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800223a:	f7ff f985 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	58024400 	.word	0x58024400
 800224c:	080107c4 	.word	0x080107c4
 8002250:	24000004 	.word	0x24000004
 8002254:	24000000 	.word	0x24000000

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_IncTick+0x20>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_IncTick+0x24>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_IncTick+0x24>)
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2400000c 	.word	0x2400000c
 800227c:	240006f0 	.word	0x240006f0

08002280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_GetTick+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	240006f0 	.word	0x240006f0

08002298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff ffee 	bl	8002280 <HAL_GetTick>
 80022a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022b0:	d005      	beq.n	80022be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <HAL_Delay+0x44>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022be:	bf00      	nop
 80022c0:	f7ff ffde 	bl	8002280 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d8f7      	bhi.n	80022c0 <HAL_Delay+0x28>
  {
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2400000c 	.word	0x2400000c

080022e0 <__NVIC_SetPriorityGrouping>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <__NVIC_SetPriorityGrouping+0x40>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	4313      	orrs	r3, r2
 800230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230e:	4a04      	ldr	r2, [pc, #16]	@ (8002320 <__NVIC_SetPriorityGrouping+0x40>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00
 8002324:	05fa0000 	.word	0x05fa0000

08002328 <__NVIC_GetPriorityGrouping>:
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_EnableIRQ>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800234e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0b      	blt.n	800236e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4907      	ldr	r1, [pc, #28]	@ (800237c <__NVIC_EnableIRQ+0x38>)
 800235e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2001      	movs	r0, #1
 8002366:	fa00 f202 	lsl.w	r2, r0, r2
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000e100 	.word	0xe000e100

08002380 <__NVIC_SetPriority>:
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800238c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0a      	blt.n	80023aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	@ (80023cc <__NVIC_SetPriority+0x4c>)
 800239a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80023a8:	e00a      	b.n	80023c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4908      	ldr	r1, [pc, #32]	@ (80023d0 <__NVIC_SetPriority+0x50>)
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	440b      	add	r3, r1
 80023be:	761a      	strb	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EncodePriority>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	@ 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	@ 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff4c 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800245e:	f7ff ff63 	bl	8002328 <__NVIC_GetPriorityGrouping>
 8002462:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	6978      	ldr	r0, [r7, #20]
 800246a:	f7ff ffb3 	bl	80023d4 <NVIC_EncodePriority>
 800246e:	4602      	mov	r2, r0
 8002470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff82 	bl	8002380 <__NVIC_SetPriority>
}
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff56 	bl	8002344 <__NVIC_EnableIRQ>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024a4:	f3bf 8f5f 	dmb	sy
}
 80024a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024aa:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <HAL_MPU_Disable+0x28>)
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	4a06      	ldr	r2, [pc, #24]	@ (80024c8 <HAL_MPU_Disable+0x28>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_MPU_Disable+0x2c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	605a      	str	r2, [r3, #4]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000ed00 	.word	0xe000ed00
 80024cc:	e000ed90 	.word	0xe000ed90

080024d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80024d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002508 <HAL_MPU_Enable+0x38>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <HAL_MPU_Enable+0x3c>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_MPU_Enable+0x3c>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80024ee:	f3bf 8f4f 	dsb	sy
}
 80024f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024f4:	f3bf 8f6f 	isb	sy
}
 80024f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed90 	.word	0xe000ed90
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	785a      	ldrb	r2, [r3, #1]
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <HAL_MPU_ConfigRegion+0x7c>)
 800251e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002520:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <HAL_MPU_ConfigRegion+0x7c>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4a19      	ldr	r2, [pc, #100]	@ (800258c <HAL_MPU_ConfigRegion+0x7c>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800252c:	4a17      	ldr	r2, [pc, #92]	@ (800258c <HAL_MPU_ConfigRegion+0x7c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7b1b      	ldrb	r3, [r3, #12]
 8002538:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7adb      	ldrb	r3, [r3, #11]
 800253e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7a9b      	ldrb	r3, [r3, #10]
 8002546:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002548:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7b5b      	ldrb	r3, [r3, #13]
 800254e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002550:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7b9b      	ldrb	r3, [r3, #14]
 8002556:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002558:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7bdb      	ldrb	r3, [r3, #15]
 800255e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002560:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7a5b      	ldrb	r3, [r3, #9]
 8002566:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002568:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7a1b      	ldrb	r3, [r3, #8]
 800256e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002570:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	7812      	ldrb	r2, [r2, #0]
 8002576:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002578:	4a04      	ldr	r2, [pc, #16]	@ (800258c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800257a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800257c:	6113      	str	r3, [r2, #16]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed90 	.word	0xe000ed90

08002590 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff fe72 	bl	8002280 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e2dc      	b.n	8002b62 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d008      	beq.n	80025c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2280      	movs	r2, #128	@ 0x80
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e2cd      	b.n	8002b62 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a76      	ldr	r2, [pc, #472]	@ (80027a4 <HAL_DMA_Abort+0x214>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d04a      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a74      	ldr	r2, [pc, #464]	@ (80027a8 <HAL_DMA_Abort+0x218>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d045      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a73      	ldr	r2, [pc, #460]	@ (80027ac <HAL_DMA_Abort+0x21c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d040      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a71      	ldr	r2, [pc, #452]	@ (80027b0 <HAL_DMA_Abort+0x220>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d03b      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a70      	ldr	r2, [pc, #448]	@ (80027b4 <HAL_DMA_Abort+0x224>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d036      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a6e      	ldr	r2, [pc, #440]	@ (80027b8 <HAL_DMA_Abort+0x228>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d031      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6d      	ldr	r2, [pc, #436]	@ (80027bc <HAL_DMA_Abort+0x22c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d02c      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a6b      	ldr	r2, [pc, #428]	@ (80027c0 <HAL_DMA_Abort+0x230>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d027      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6a      	ldr	r2, [pc, #424]	@ (80027c4 <HAL_DMA_Abort+0x234>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a68      	ldr	r2, [pc, #416]	@ (80027c8 <HAL_DMA_Abort+0x238>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01d      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a67      	ldr	r2, [pc, #412]	@ (80027cc <HAL_DMA_Abort+0x23c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d018      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a65      	ldr	r2, [pc, #404]	@ (80027d0 <HAL_DMA_Abort+0x240>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a64      	ldr	r2, [pc, #400]	@ (80027d4 <HAL_DMA_Abort+0x244>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a62      	ldr	r2, [pc, #392]	@ (80027d8 <HAL_DMA_Abort+0x248>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a61      	ldr	r2, [pc, #388]	@ (80027dc <HAL_DMA_Abort+0x24c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Abort+0xd6>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a5f      	ldr	r2, [pc, #380]	@ (80027e0 <HAL_DMA_Abort+0x250>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_DMA_Abort+0xda>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_DMA_Abort+0xdc>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 021e 	bic.w	r2, r2, #30
 800267e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800268e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e00a      	b.n	80026ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 020e 	bic.w	r2, r2, #14
 80026a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a3c      	ldr	r2, [pc, #240]	@ (80027a4 <HAL_DMA_Abort+0x214>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d072      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a3a      	ldr	r2, [pc, #232]	@ (80027a8 <HAL_DMA_Abort+0x218>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d06d      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a39      	ldr	r2, [pc, #228]	@ (80027ac <HAL_DMA_Abort+0x21c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d068      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a37      	ldr	r2, [pc, #220]	@ (80027b0 <HAL_DMA_Abort+0x220>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d063      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a36      	ldr	r2, [pc, #216]	@ (80027b4 <HAL_DMA_Abort+0x224>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d05e      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a34      	ldr	r2, [pc, #208]	@ (80027b8 <HAL_DMA_Abort+0x228>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d059      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a33      	ldr	r2, [pc, #204]	@ (80027bc <HAL_DMA_Abort+0x22c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d054      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a31      	ldr	r2, [pc, #196]	@ (80027c0 <HAL_DMA_Abort+0x230>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d04f      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a30      	ldr	r2, [pc, #192]	@ (80027c4 <HAL_DMA_Abort+0x234>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d04a      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2e      	ldr	r2, [pc, #184]	@ (80027c8 <HAL_DMA_Abort+0x238>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d045      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2d      	ldr	r2, [pc, #180]	@ (80027cc <HAL_DMA_Abort+0x23c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d040      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2b      	ldr	r2, [pc, #172]	@ (80027d0 <HAL_DMA_Abort+0x240>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d03b      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2a      	ldr	r2, [pc, #168]	@ (80027d4 <HAL_DMA_Abort+0x244>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d036      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a28      	ldr	r2, [pc, #160]	@ (80027d8 <HAL_DMA_Abort+0x248>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d031      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a27      	ldr	r2, [pc, #156]	@ (80027dc <HAL_DMA_Abort+0x24c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d02c      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a25      	ldr	r2, [pc, #148]	@ (80027e0 <HAL_DMA_Abort+0x250>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d027      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a24      	ldr	r2, [pc, #144]	@ (80027e4 <HAL_DMA_Abort+0x254>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d022      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a22      	ldr	r2, [pc, #136]	@ (80027e8 <HAL_DMA_Abort+0x258>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01d      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a21      	ldr	r2, [pc, #132]	@ (80027ec <HAL_DMA_Abort+0x25c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d018      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <HAL_DMA_Abort+0x260>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1e      	ldr	r2, [pc, #120]	@ (80027f4 <HAL_DMA_Abort+0x264>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <HAL_DMA_Abort+0x268>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <HAL_DMA_Abort+0x26c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_DMA_Abort+0x20e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <HAL_DMA_Abort+0x270>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d132      	bne.n	8002804 <HAL_DMA_Abort+0x274>
 800279e:	2301      	movs	r3, #1
 80027a0:	e031      	b.n	8002806 <HAL_DMA_Abort+0x276>
 80027a2:	bf00      	nop
 80027a4:	40020010 	.word	0x40020010
 80027a8:	40020028 	.word	0x40020028
 80027ac:	40020040 	.word	0x40020040
 80027b0:	40020058 	.word	0x40020058
 80027b4:	40020070 	.word	0x40020070
 80027b8:	40020088 	.word	0x40020088
 80027bc:	400200a0 	.word	0x400200a0
 80027c0:	400200b8 	.word	0x400200b8
 80027c4:	40020410 	.word	0x40020410
 80027c8:	40020428 	.word	0x40020428
 80027cc:	40020440 	.word	0x40020440
 80027d0:	40020458 	.word	0x40020458
 80027d4:	40020470 	.word	0x40020470
 80027d8:	40020488 	.word	0x40020488
 80027dc:	400204a0 	.word	0x400204a0
 80027e0:	400204b8 	.word	0x400204b8
 80027e4:	58025408 	.word	0x58025408
 80027e8:	5802541c 	.word	0x5802541c
 80027ec:	58025430 	.word	0x58025430
 80027f0:	58025444 	.word	0x58025444
 80027f4:	58025458 	.word	0x58025458
 80027f8:	5802546c 	.word	0x5802546c
 80027fc:	58025480 	.word	0x58025480
 8002800:	58025494 	.word	0x58025494
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002818:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6d      	ldr	r2, [pc, #436]	@ (80029d4 <HAL_DMA_Abort+0x444>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d04a      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6b      	ldr	r2, [pc, #428]	@ (80029d8 <HAL_DMA_Abort+0x448>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d045      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6a      	ldr	r2, [pc, #424]	@ (80029dc <HAL_DMA_Abort+0x44c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d040      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a68      	ldr	r2, [pc, #416]	@ (80029e0 <HAL_DMA_Abort+0x450>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d03b      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a67      	ldr	r2, [pc, #412]	@ (80029e4 <HAL_DMA_Abort+0x454>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d036      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a65      	ldr	r2, [pc, #404]	@ (80029e8 <HAL_DMA_Abort+0x458>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a64      	ldr	r2, [pc, #400]	@ (80029ec <HAL_DMA_Abort+0x45c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d02c      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a62      	ldr	r2, [pc, #392]	@ (80029f0 <HAL_DMA_Abort+0x460>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d027      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a61      	ldr	r2, [pc, #388]	@ (80029f4 <HAL_DMA_Abort+0x464>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5f      	ldr	r2, [pc, #380]	@ (80029f8 <HAL_DMA_Abort+0x468>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01d      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a5e      	ldr	r2, [pc, #376]	@ (80029fc <HAL_DMA_Abort+0x46c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d018      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a5c      	ldr	r2, [pc, #368]	@ (8002a00 <HAL_DMA_Abort+0x470>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a5b      	ldr	r2, [pc, #364]	@ (8002a04 <HAL_DMA_Abort+0x474>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a59      	ldr	r2, [pc, #356]	@ (8002a08 <HAL_DMA_Abort+0x478>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d009      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a58      	ldr	r2, [pc, #352]	@ (8002a0c <HAL_DMA_Abort+0x47c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_DMA_Abort+0x32a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a56      	ldr	r2, [pc, #344]	@ (8002a10 <HAL_DMA_Abort+0x480>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d108      	bne.n	80028cc <HAL_DMA_Abort+0x33c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e007      	b.n	80028dc <HAL_DMA_Abort+0x34c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028dc:	e013      	b.n	8002906 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028de:	f7ff fccf 	bl	8002280 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d90c      	bls.n	8002906 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2203      	movs	r2, #3
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e12d      	b.n	8002b62 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e5      	bne.n	80028de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a2f      	ldr	r2, [pc, #188]	@ (80029d4 <HAL_DMA_Abort+0x444>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d04a      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a2d      	ldr	r2, [pc, #180]	@ (80029d8 <HAL_DMA_Abort+0x448>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d045      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a2c      	ldr	r2, [pc, #176]	@ (80029dc <HAL_DMA_Abort+0x44c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d040      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2a      	ldr	r2, [pc, #168]	@ (80029e0 <HAL_DMA_Abort+0x450>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d03b      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a29      	ldr	r2, [pc, #164]	@ (80029e4 <HAL_DMA_Abort+0x454>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d036      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a27      	ldr	r2, [pc, #156]	@ (80029e8 <HAL_DMA_Abort+0x458>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d031      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a26      	ldr	r2, [pc, #152]	@ (80029ec <HAL_DMA_Abort+0x45c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d02c      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a24      	ldr	r2, [pc, #144]	@ (80029f0 <HAL_DMA_Abort+0x460>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d027      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a23      	ldr	r2, [pc, #140]	@ (80029f4 <HAL_DMA_Abort+0x464>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a21      	ldr	r2, [pc, #132]	@ (80029f8 <HAL_DMA_Abort+0x468>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01d      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a20      	ldr	r2, [pc, #128]	@ (80029fc <HAL_DMA_Abort+0x46c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d018      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1e      	ldr	r2, [pc, #120]	@ (8002a00 <HAL_DMA_Abort+0x470>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_DMA_Abort+0x474>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00e      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1b      	ldr	r2, [pc, #108]	@ (8002a08 <HAL_DMA_Abort+0x478>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a0c <HAL_DMA_Abort+0x47c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_DMA_Abort+0x422>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <HAL_DMA_Abort+0x480>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_DMA_Abort+0x426>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_Abort+0x428>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d02b      	beq.n	8002a14 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	223f      	movs	r2, #63	@ 0x3f
 80029cc:	409a      	lsls	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	e02a      	b.n	8002a2a <HAL_DMA_Abort+0x49a>
 80029d4:	40020010 	.word	0x40020010
 80029d8:	40020028 	.word	0x40020028
 80029dc:	40020040 	.word	0x40020040
 80029e0:	40020058 	.word	0x40020058
 80029e4:	40020070 	.word	0x40020070
 80029e8:	40020088 	.word	0x40020088
 80029ec:	400200a0 	.word	0x400200a0
 80029f0:	400200b8 	.word	0x400200b8
 80029f4:	40020410 	.word	0x40020410
 80029f8:	40020428 	.word	0x40020428
 80029fc:	40020440 	.word	0x40020440
 8002a00:	40020458 	.word	0x40020458
 8002a04:	40020470 	.word	0x40020470
 8002a08:	40020488 	.word	0x40020488
 8002a0c:	400204a0 	.word	0x400204a0
 8002a10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a18:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2201      	movs	r2, #1
 8002a24:	409a      	lsls	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a4f      	ldr	r2, [pc, #316]	@ (8002b6c <HAL_DMA_Abort+0x5dc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d072      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4d      	ldr	r2, [pc, #308]	@ (8002b70 <HAL_DMA_Abort+0x5e0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d06d      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a4c      	ldr	r2, [pc, #304]	@ (8002b74 <HAL_DMA_Abort+0x5e4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d068      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b78 <HAL_DMA_Abort+0x5e8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d063      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a49      	ldr	r2, [pc, #292]	@ (8002b7c <HAL_DMA_Abort+0x5ec>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d05e      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a47      	ldr	r2, [pc, #284]	@ (8002b80 <HAL_DMA_Abort+0x5f0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d059      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a46      	ldr	r2, [pc, #280]	@ (8002b84 <HAL_DMA_Abort+0x5f4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d054      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a44      	ldr	r2, [pc, #272]	@ (8002b88 <HAL_DMA_Abort+0x5f8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d04f      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a43      	ldr	r2, [pc, #268]	@ (8002b8c <HAL_DMA_Abort+0x5fc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d04a      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a41      	ldr	r2, [pc, #260]	@ (8002b90 <HAL_DMA_Abort+0x600>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d045      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a40      	ldr	r2, [pc, #256]	@ (8002b94 <HAL_DMA_Abort+0x604>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d040      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b98 <HAL_DMA_Abort+0x608>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d03b      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8002b9c <HAL_DMA_Abort+0x60c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d036      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba0 <HAL_DMA_Abort+0x610>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d031      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a3a      	ldr	r2, [pc, #232]	@ (8002ba4 <HAL_DMA_Abort+0x614>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d02c      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a38      	ldr	r2, [pc, #224]	@ (8002ba8 <HAL_DMA_Abort+0x618>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d027      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a37      	ldr	r2, [pc, #220]	@ (8002bac <HAL_DMA_Abort+0x61c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d022      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a35      	ldr	r2, [pc, #212]	@ (8002bb0 <HAL_DMA_Abort+0x620>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01d      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a34      	ldr	r2, [pc, #208]	@ (8002bb4 <HAL_DMA_Abort+0x624>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d018      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a32      	ldr	r2, [pc, #200]	@ (8002bb8 <HAL_DMA_Abort+0x628>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a31      	ldr	r2, [pc, #196]	@ (8002bbc <HAL_DMA_Abort+0x62c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a2f      	ldr	r2, [pc, #188]	@ (8002bc0 <HAL_DMA_Abort+0x630>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002bc4 <HAL_DMA_Abort+0x634>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_DMA_Abort+0x58a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc8 <HAL_DMA_Abort+0x638>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA_Abort+0x58e>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_DMA_Abort+0x590>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b2c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b44:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b4e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40020010 	.word	0x40020010
 8002b70:	40020028 	.word	0x40020028
 8002b74:	40020040 	.word	0x40020040
 8002b78:	40020058 	.word	0x40020058
 8002b7c:	40020070 	.word	0x40020070
 8002b80:	40020088 	.word	0x40020088
 8002b84:	400200a0 	.word	0x400200a0
 8002b88:	400200b8 	.word	0x400200b8
 8002b8c:	40020410 	.word	0x40020410
 8002b90:	40020428 	.word	0x40020428
 8002b94:	40020440 	.word	0x40020440
 8002b98:	40020458 	.word	0x40020458
 8002b9c:	40020470 	.word	0x40020470
 8002ba0:	40020488 	.word	0x40020488
 8002ba4:	400204a0 	.word	0x400204a0
 8002ba8:	400204b8 	.word	0x400204b8
 8002bac:	58025408 	.word	0x58025408
 8002bb0:	5802541c 	.word	0x5802541c
 8002bb4:	58025430 	.word	0x58025430
 8002bb8:	58025444 	.word	0x58025444
 8002bbc:	58025458 	.word	0x58025458
 8002bc0:	5802546c 	.word	0x5802546c
 8002bc4:	58025480 	.word	0x58025480
 8002bc8:	58025494 	.word	0x58025494

08002bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e237      	b.n	800304e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d004      	beq.n	8002bf4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2280      	movs	r2, #128	@ 0x80
 8002bee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e22c      	b.n	800304e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5c      	ldr	r2, [pc, #368]	@ (8002d6c <HAL_DMA_Abort_IT+0x1a0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d04a      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5b      	ldr	r2, [pc, #364]	@ (8002d70 <HAL_DMA_Abort_IT+0x1a4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d045      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a59      	ldr	r2, [pc, #356]	@ (8002d74 <HAL_DMA_Abort_IT+0x1a8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d040      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a58      	ldr	r2, [pc, #352]	@ (8002d78 <HAL_DMA_Abort_IT+0x1ac>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d03b      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a56      	ldr	r2, [pc, #344]	@ (8002d7c <HAL_DMA_Abort_IT+0x1b0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d036      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a55      	ldr	r2, [pc, #340]	@ (8002d80 <HAL_DMA_Abort_IT+0x1b4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d031      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a53      	ldr	r2, [pc, #332]	@ (8002d84 <HAL_DMA_Abort_IT+0x1b8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d02c      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a52      	ldr	r2, [pc, #328]	@ (8002d88 <HAL_DMA_Abort_IT+0x1bc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d027      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a50      	ldr	r2, [pc, #320]	@ (8002d8c <HAL_DMA_Abort_IT+0x1c0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d022      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a4f      	ldr	r2, [pc, #316]	@ (8002d90 <HAL_DMA_Abort_IT+0x1c4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d01d      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d94 <HAL_DMA_Abort_IT+0x1c8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d018      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a4c      	ldr	r2, [pc, #304]	@ (8002d98 <HAL_DMA_Abort_IT+0x1cc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d013      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4a      	ldr	r2, [pc, #296]	@ (8002d9c <HAL_DMA_Abort_IT+0x1d0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00e      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a49      	ldr	r2, [pc, #292]	@ (8002da0 <HAL_DMA_Abort_IT+0x1d4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d009      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a47      	ldr	r2, [pc, #284]	@ (8002da4 <HAL_DMA_Abort_IT+0x1d8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xc8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a46      	ldr	r2, [pc, #280]	@ (8002da8 <HAL_DMA_Abort_IT+0x1dc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_DMA_Abort_IT+0xcc>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_DMA_Abort_IT+0xce>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8086 	beq.w	8002dac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2f      	ldr	r2, [pc, #188]	@ (8002d6c <HAL_DMA_Abort_IT+0x1a0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d04a      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002d70 <HAL_DMA_Abort_IT+0x1a4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d045      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d74 <HAL_DMA_Abort_IT+0x1a8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d040      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2b      	ldr	r2, [pc, #172]	@ (8002d78 <HAL_DMA_Abort_IT+0x1ac>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d03b      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a29      	ldr	r2, [pc, #164]	@ (8002d7c <HAL_DMA_Abort_IT+0x1b0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d036      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a28      	ldr	r2, [pc, #160]	@ (8002d80 <HAL_DMA_Abort_IT+0x1b4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d031      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a26      	ldr	r2, [pc, #152]	@ (8002d84 <HAL_DMA_Abort_IT+0x1b8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02c      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	@ (8002d88 <HAL_DMA_Abort_IT+0x1bc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d027      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a23      	ldr	r2, [pc, #140]	@ (8002d8c <HAL_DMA_Abort_IT+0x1c0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d022      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a22      	ldr	r2, [pc, #136]	@ (8002d90 <HAL_DMA_Abort_IT+0x1c4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d01d      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a20      	ldr	r2, [pc, #128]	@ (8002d94 <HAL_DMA_Abort_IT+0x1c8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d018      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d98 <HAL_DMA_Abort_IT+0x1cc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d013      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <HAL_DMA_Abort_IT+0x1d0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00e      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002da0 <HAL_DMA_Abort_IT+0x1d4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d009      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	@ (8002da4 <HAL_DMA_Abort_IT+0x1d8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x17c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <HAL_DMA_Abort_IT+0x1dc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d108      	bne.n	8002d5a <HAL_DMA_Abort_IT+0x18e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e178      	b.n	800304c <HAL_DMA_Abort_IT+0x480>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e16f      	b.n	800304c <HAL_DMA_Abort_IT+0x480>
 8002d6c:	40020010 	.word	0x40020010
 8002d70:	40020028 	.word	0x40020028
 8002d74:	40020040 	.word	0x40020040
 8002d78:	40020058 	.word	0x40020058
 8002d7c:	40020070 	.word	0x40020070
 8002d80:	40020088 	.word	0x40020088
 8002d84:	400200a0 	.word	0x400200a0
 8002d88:	400200b8 	.word	0x400200b8
 8002d8c:	40020410 	.word	0x40020410
 8002d90:	40020428 	.word	0x40020428
 8002d94:	40020440 	.word	0x40020440
 8002d98:	40020458 	.word	0x40020458
 8002d9c:	40020470 	.word	0x40020470
 8002da0:	40020488 	.word	0x40020488
 8002da4:	400204a0 	.word	0x400204a0
 8002da8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 020e 	bic.w	r2, r2, #14
 8002dba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a6c      	ldr	r2, [pc, #432]	@ (8002f74 <HAL_DMA_Abort_IT+0x3a8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d04a      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a6b      	ldr	r2, [pc, #428]	@ (8002f78 <HAL_DMA_Abort_IT+0x3ac>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d045      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a69      	ldr	r2, [pc, #420]	@ (8002f7c <HAL_DMA_Abort_IT+0x3b0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d040      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a68      	ldr	r2, [pc, #416]	@ (8002f80 <HAL_DMA_Abort_IT+0x3b4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d03b      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a66      	ldr	r2, [pc, #408]	@ (8002f84 <HAL_DMA_Abort_IT+0x3b8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d036      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a65      	ldr	r2, [pc, #404]	@ (8002f88 <HAL_DMA_Abort_IT+0x3bc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d031      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a63      	ldr	r2, [pc, #396]	@ (8002f8c <HAL_DMA_Abort_IT+0x3c0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d02c      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a62      	ldr	r2, [pc, #392]	@ (8002f90 <HAL_DMA_Abort_IT+0x3c4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d027      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a60      	ldr	r2, [pc, #384]	@ (8002f94 <HAL_DMA_Abort_IT+0x3c8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d022      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5f      	ldr	r2, [pc, #380]	@ (8002f98 <HAL_DMA_Abort_IT+0x3cc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d01d      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a5d      	ldr	r2, [pc, #372]	@ (8002f9c <HAL_DMA_Abort_IT+0x3d0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d018      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa0 <HAL_DMA_Abort_IT+0x3d4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d013      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa4 <HAL_DMA_Abort_IT+0x3d8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00e      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a59      	ldr	r2, [pc, #356]	@ (8002fa8 <HAL_DMA_Abort_IT+0x3dc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a57      	ldr	r2, [pc, #348]	@ (8002fac <HAL_DMA_Abort_IT+0x3e0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x290>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a56      	ldr	r2, [pc, #344]	@ (8002fb0 <HAL_DMA_Abort_IT+0x3e4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <HAL_DMA_Abort_IT+0x2a2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e007      	b.n	8002e7e <HAL_DMA_Abort_IT+0x2b2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a3c      	ldr	r2, [pc, #240]	@ (8002f74 <HAL_DMA_Abort_IT+0x3a8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d072      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f78 <HAL_DMA_Abort_IT+0x3ac>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d06d      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a39      	ldr	r2, [pc, #228]	@ (8002f7c <HAL_DMA_Abort_IT+0x3b0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d068      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a37      	ldr	r2, [pc, #220]	@ (8002f80 <HAL_DMA_Abort_IT+0x3b4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d063      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a36      	ldr	r2, [pc, #216]	@ (8002f84 <HAL_DMA_Abort_IT+0x3b8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d05e      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a34      	ldr	r2, [pc, #208]	@ (8002f88 <HAL_DMA_Abort_IT+0x3bc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d059      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a33      	ldr	r2, [pc, #204]	@ (8002f8c <HAL_DMA_Abort_IT+0x3c0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d054      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a31      	ldr	r2, [pc, #196]	@ (8002f90 <HAL_DMA_Abort_IT+0x3c4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04f      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a30      	ldr	r2, [pc, #192]	@ (8002f94 <HAL_DMA_Abort_IT+0x3c8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d04a      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2e      	ldr	r2, [pc, #184]	@ (8002f98 <HAL_DMA_Abort_IT+0x3cc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d045      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f9c <HAL_DMA_Abort_IT+0x3d0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d040      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8002fa0 <HAL_DMA_Abort_IT+0x3d4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d03b      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2a      	ldr	r2, [pc, #168]	@ (8002fa4 <HAL_DMA_Abort_IT+0x3d8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d036      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a28      	ldr	r2, [pc, #160]	@ (8002fa8 <HAL_DMA_Abort_IT+0x3dc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d031      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a27      	ldr	r2, [pc, #156]	@ (8002fac <HAL_DMA_Abort_IT+0x3e0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d02c      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a25      	ldr	r2, [pc, #148]	@ (8002fb0 <HAL_DMA_Abort_IT+0x3e4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d027      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a24      	ldr	r2, [pc, #144]	@ (8002fb4 <HAL_DMA_Abort_IT+0x3e8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d022      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a22      	ldr	r2, [pc, #136]	@ (8002fb8 <HAL_DMA_Abort_IT+0x3ec>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01d      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a21      	ldr	r2, [pc, #132]	@ (8002fbc <HAL_DMA_Abort_IT+0x3f0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d018      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc0 <HAL_DMA_Abort_IT+0x3f4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc4 <HAL_DMA_Abort_IT+0x3f8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc8 <HAL_DMA_Abort_IT+0x3fc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fcc <HAL_DMA_Abort_IT+0x400>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x3a2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a19      	ldr	r2, [pc, #100]	@ (8002fd0 <HAL_DMA_Abort_IT+0x404>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d132      	bne.n	8002fd4 <HAL_DMA_Abort_IT+0x408>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e031      	b.n	8002fd6 <HAL_DMA_Abort_IT+0x40a>
 8002f72:	bf00      	nop
 8002f74:	40020010 	.word	0x40020010
 8002f78:	40020028 	.word	0x40020028
 8002f7c:	40020040 	.word	0x40020040
 8002f80:	40020058 	.word	0x40020058
 8002f84:	40020070 	.word	0x40020070
 8002f88:	40020088 	.word	0x40020088
 8002f8c:	400200a0 	.word	0x400200a0
 8002f90:	400200b8 	.word	0x400200b8
 8002f94:	40020410 	.word	0x40020410
 8002f98:	40020428 	.word	0x40020428
 8002f9c:	40020440 	.word	0x40020440
 8002fa0:	40020458 	.word	0x40020458
 8002fa4:	40020470 	.word	0x40020470
 8002fa8:	40020488 	.word	0x40020488
 8002fac:	400204a0 	.word	0x400204a0
 8002fb0:	400204b8 	.word	0x400204b8
 8002fb4:	58025408 	.word	0x58025408
 8002fb8:	5802541c 	.word	0x5802541c
 8002fbc:	58025430 	.word	0x58025430
 8002fc0:	58025444 	.word	0x58025444
 8002fc4:	58025458 	.word	0x58025458
 8002fc8:	5802546c 	.word	0x5802546c
 8002fcc:	58025480 	.word	0x58025480
 8002fd0:	58025494 	.word	0x58025494
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d028      	beq.n	800302c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003008:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00c      	beq.n	800302c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800301c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003020:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800302a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop

08003058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	@ 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003066:	4b86      	ldr	r3, [pc, #536]	@ (8003280 <HAL_GPIO_Init+0x228>)
 8003068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800306a:	e18c      	b.n	8003386 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 817e 	beq.w	8003380 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d005      	beq.n	800309c <HAL_GPIO_Init+0x44>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d130      	bne.n	80030fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030d2:	2201      	movs	r2, #1
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	f003 0201 	and.w	r2, r3, #1
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b03      	cmp	r3, #3
 8003108:	d017      	beq.n	800313a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d123      	bne.n	800318e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	08da      	lsrs	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3208      	adds	r2, #8
 8003188:	69b9      	ldr	r1, [r7, #24]
 800318a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0203 	and.w	r2, r3, #3
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80d8 	beq.w	8003380 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003284 <HAL_GPIO_Init+0x22c>)
 80031d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80031d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003284 <HAL_GPIO_Init+0x22c>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80031e0:	4b28      	ldr	r3, [pc, #160]	@ (8003284 <HAL_GPIO_Init+0x22c>)
 80031e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ee:	4a26      	ldr	r2, [pc, #152]	@ (8003288 <HAL_GPIO_Init+0x230>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <HAL_GPIO_Init+0x234>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d04a      	beq.n	80032b0 <HAL_GPIO_Init+0x258>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1c      	ldr	r2, [pc, #112]	@ (8003290 <HAL_GPIO_Init+0x238>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d02b      	beq.n	800327a <HAL_GPIO_Init+0x222>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a1b      	ldr	r2, [pc, #108]	@ (8003294 <HAL_GPIO_Init+0x23c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d025      	beq.n	8003276 <HAL_GPIO_Init+0x21e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a1a      	ldr	r2, [pc, #104]	@ (8003298 <HAL_GPIO_Init+0x240>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01f      	beq.n	8003272 <HAL_GPIO_Init+0x21a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a19      	ldr	r2, [pc, #100]	@ (800329c <HAL_GPIO_Init+0x244>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d019      	beq.n	800326e <HAL_GPIO_Init+0x216>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a18      	ldr	r2, [pc, #96]	@ (80032a0 <HAL_GPIO_Init+0x248>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_GPIO_Init+0x212>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a17      	ldr	r2, [pc, #92]	@ (80032a4 <HAL_GPIO_Init+0x24c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00d      	beq.n	8003266 <HAL_GPIO_Init+0x20e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a16      	ldr	r2, [pc, #88]	@ (80032a8 <HAL_GPIO_Init+0x250>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d007      	beq.n	8003262 <HAL_GPIO_Init+0x20a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a15      	ldr	r2, [pc, #84]	@ (80032ac <HAL_GPIO_Init+0x254>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <HAL_GPIO_Init+0x206>
 800325a:	2309      	movs	r3, #9
 800325c:	e029      	b.n	80032b2 <HAL_GPIO_Init+0x25a>
 800325e:	230a      	movs	r3, #10
 8003260:	e027      	b.n	80032b2 <HAL_GPIO_Init+0x25a>
 8003262:	2307      	movs	r3, #7
 8003264:	e025      	b.n	80032b2 <HAL_GPIO_Init+0x25a>
 8003266:	2306      	movs	r3, #6
 8003268:	e023      	b.n	80032b2 <HAL_GPIO_Init+0x25a>
 800326a:	2305      	movs	r3, #5
 800326c:	e021      	b.n	80032b2 <HAL_GPIO_Init+0x25a>
 800326e:	2304      	movs	r3, #4
 8003270:	e01f      	b.n	80032b2 <HAL_GPIO_Init+0x25a>
 8003272:	2303      	movs	r3, #3
 8003274:	e01d      	b.n	80032b2 <HAL_GPIO_Init+0x25a>
 8003276:	2302      	movs	r3, #2
 8003278:	e01b      	b.n	80032b2 <HAL_GPIO_Init+0x25a>
 800327a:	2301      	movs	r3, #1
 800327c:	e019      	b.n	80032b2 <HAL_GPIO_Init+0x25a>
 800327e:	bf00      	nop
 8003280:	58000080 	.word	0x58000080
 8003284:	58024400 	.word	0x58024400
 8003288:	58000400 	.word	0x58000400
 800328c:	58020000 	.word	0x58020000
 8003290:	58020400 	.word	0x58020400
 8003294:	58020800 	.word	0x58020800
 8003298:	58020c00 	.word	0x58020c00
 800329c:	58021000 	.word	0x58021000
 80032a0:	58021400 	.word	0x58021400
 80032a4:	58021800 	.word	0x58021800
 80032a8:	58021c00 	.word	0x58021c00
 80032ac:	58022400 	.word	0x58022400
 80032b0:	2300      	movs	r3, #0
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	f002 0203 	and.w	r2, r2, #3
 80032b8:	0092      	lsls	r2, r2, #2
 80032ba:	4093      	lsls	r3, r2
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c2:	4938      	ldr	r1, [pc, #224]	@ (80033a4 <HAL_GPIO_Init+0x34c>)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	3302      	adds	r3, #2
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003324:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	3301      	adds	r3, #1
 8003384:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f ae6b 	bne.w	800306c <HAL_GPIO_Init+0x14>
  }
}
 8003396:	bf00      	nop
 8003398:	bf00      	nop
 800339a:	3724      	adds	r7, #36	@ 0x24
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	58000400 	.word	0x58000400

080033a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e001      	b.n	80033ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80033f4:	e003      	b.n	80033fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e08b      	b.n	8003536 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe f8a2 	bl	800157c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800345c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800346c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e006      	b.n	8003494 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d108      	bne.n	80034ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	e007      	b.n	80034be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <HAL_I2C_Init+0x134>)
 80034ca:	430b      	orrs	r3, r1
 80034cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69d9      	ldr	r1, [r3, #28]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	02008000 	.word	0x02008000

08003544 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b20      	cmp	r3, #32
 8003558:	d138      	bne.n	80035cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003564:	2302      	movs	r3, #2
 8003566:	e032      	b.n	80035ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2224      	movs	r2, #36	@ 0x24
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003596:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e000      	b.n	80035ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035cc:	2302      	movs	r3, #2
  }
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d139      	bne.n	8003664 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e033      	b.n	8003666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2224      	movs	r2, #36	@ 0x24
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800362c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e000      	b.n	8003666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800367c:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <HAL_PWREx_ConfigSupply+0x70>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d00a      	beq.n	800369e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003688:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <HAL_PWREx_ConfigSupply+0x70>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	d001      	beq.n	800369a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e01f      	b.n	80036da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e01d      	b.n	80036da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800369e:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <HAL_PWREx_ConfigSupply+0x70>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 0207 	bic.w	r2, r3, #7
 80036a6:	490f      	ldr	r1, [pc, #60]	@ (80036e4 <HAL_PWREx_ConfigSupply+0x70>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036ae:	f7fe fde7 	bl	8002280 <HAL_GetTick>
 80036b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036b4:	e009      	b.n	80036ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036b6:	f7fe fde3 	bl	8002280 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036c4:	d901      	bls.n	80036ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e007      	b.n	80036da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <HAL_PWREx_ConfigSupply+0x70>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d6:	d1ee      	bne.n	80036b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	58024800 	.word	0x58024800

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08c      	sub	sp, #48	@ 0x30
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e3c8      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8087 	beq.w	8003816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003708:	4b88      	ldr	r3, [pc, #544]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003712:	4b86      	ldr	r3, [pc, #536]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371a:	2b10      	cmp	r3, #16
 800371c:	d007      	beq.n	800372e <HAL_RCC_OscConfig+0x46>
 800371e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003720:	2b18      	cmp	r3, #24
 8003722:	d110      	bne.n	8003746 <HAL_RCC_OscConfig+0x5e>
 8003724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d10b      	bne.n	8003746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372e:	4b7f      	ldr	r3, [pc, #508]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d06c      	beq.n	8003814 <HAL_RCC_OscConfig+0x12c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d168      	bne.n	8003814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e3a2      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x76>
 8003750:	4b76      	ldr	r3, [pc, #472]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a75      	ldr	r2, [pc, #468]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	e02e      	b.n	80037bc <HAL_RCC_OscConfig+0xd4>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x98>
 8003766:	4b71      	ldr	r3, [pc, #452]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a70      	ldr	r2, [pc, #448]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b6e      	ldr	r3, [pc, #440]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6d      	ldr	r2, [pc, #436]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e01d      	b.n	80037bc <HAL_RCC_OscConfig+0xd4>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0xbc>
 800378a:	4b68      	ldr	r3, [pc, #416]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a67      	ldr	r2, [pc, #412]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b65      	ldr	r3, [pc, #404]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a64      	ldr	r2, [pc, #400]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0xd4>
 80037a4:	4b61      	ldr	r3, [pc, #388]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a60      	ldr	r2, [pc, #384]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b5e      	ldr	r3, [pc, #376]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5d      	ldr	r2, [pc, #372]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe fd5c 	bl	8002280 <HAL_GetTick>
 80037c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe fd58 	bl	8002280 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	@ 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e356      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037de:	4b53      	ldr	r3, [pc, #332]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0xe4>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fd48 	bl	8002280 <HAL_GetTick>
 80037f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fd44 	bl	8002280 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	@ 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e342      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003806:	4b49      	ldr	r3, [pc, #292]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x10c>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 808c 	beq.w	800393c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003824:	4b41      	ldr	r3, [pc, #260]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800382c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800382e:	4b3f      	ldr	r3, [pc, #252]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_RCC_OscConfig+0x162>
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	2b18      	cmp	r3, #24
 800383e:	d137      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1c8>
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d132      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800384a:	4b38      	ldr	r3, [pc, #224]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x17a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e314      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003862:	4b32      	ldr	r3, [pc, #200]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 0219 	bic.w	r2, r3, #25
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	492f      	ldr	r1, [pc, #188]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe fd04 	bl	8002280 <HAL_GetTick>
 8003878:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387c:	f7fe fd00 	bl	8002280 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e2fe      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800388e:	4b27      	ldr	r3, [pc, #156]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b24      	ldr	r3, [pc, #144]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	061b      	lsls	r3, r3, #24
 80038a8:	4920      	ldr	r1, [pc, #128]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ae:	e045      	b.n	800393c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d026      	beq.n	8003906 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038b8:	4b1c      	ldr	r3, [pc, #112]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 0219 	bic.w	r2, r3, #25
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4919      	ldr	r1, [pc, #100]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fe fcd9 	bl	8002280 <HAL_GetTick>
 80038ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fe fcd5 	bl	8002280 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e2d3      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038e4:	4b11      	ldr	r3, [pc, #68]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f0:	4b0e      	ldr	r3, [pc, #56]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	490b      	ldr	r1, [pc, #44]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
 8003904:	e01a      	b.n	800393c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003906:	4b09      	ldr	r3, [pc, #36]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a08      	ldr	r2, [pc, #32]	@ (800392c <HAL_RCC_OscConfig+0x244>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fe fcb5 	bl	8002280 <HAL_GetTick>
 8003916:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391a:	f7fe fcb1 	bl	8002280 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d903      	bls.n	8003930 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e2af      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
 800392c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003930:	4b96      	ldr	r3, [pc, #600]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ee      	bne.n	800391a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d06a      	beq.n	8003a1e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003948:	4b90      	ldr	r3, [pc, #576]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003950:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003952:	4b8e      	ldr	r3, [pc, #568]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b08      	cmp	r3, #8
 800395c:	d007      	beq.n	800396e <HAL_RCC_OscConfig+0x286>
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b18      	cmp	r3, #24
 8003962:	d11b      	bne.n	800399c <HAL_RCC_OscConfig+0x2b4>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800396e:	4b87      	ldr	r3, [pc, #540]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_RCC_OscConfig+0x29e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b80      	cmp	r3, #128	@ 0x80
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e282      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003986:	4b81      	ldr	r3, [pc, #516]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	497d      	ldr	r1, [pc, #500]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800399a:	e040      	b.n	8003a1e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d023      	beq.n	80039ec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039a4:	4b79      	ldr	r3, [pc, #484]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a78      	ldr	r2, [pc, #480]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 80039aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fc66 	bl	8002280 <HAL_GetTick>
 80039b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039b8:	f7fe fc62 	bl	8002280 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e260      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ca:	4b70      	ldr	r3, [pc, #448]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	061b      	lsls	r3, r3, #24
 80039e4:	4969      	ldr	r1, [pc, #420]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60cb      	str	r3, [r1, #12]
 80039ea:	e018      	b.n	8003a1e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039ec:	4b67      	ldr	r3, [pc, #412]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a66      	ldr	r2, [pc, #408]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 80039f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe fc42 	bl	8002280 <HAL_GetTick>
 80039fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a00:	f7fe fc3e 	bl	8002280 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e23c      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a12:	4b5e      	ldr	r3, [pc, #376]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d036      	beq.n	8003a98 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d019      	beq.n	8003a66 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b56      	ldr	r3, [pc, #344]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a36:	4a55      	ldr	r2, [pc, #340]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fe fc1f 	bl	8002280 <HAL_GetTick>
 8003a42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a46:	f7fe fc1b 	bl	8002280 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e219      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a58:	4b4c      	ldr	r3, [pc, #304]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x35e>
 8003a64:	e018      	b.n	8003a98 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a66:	4b49      	ldr	r3, [pc, #292]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6a:	4a48      	ldr	r2, [pc, #288]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a72:	f7fe fc05 	bl	8002280 <HAL_GetTick>
 8003a76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7a:	f7fe fc01 	bl	8002280 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e1ff      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f0      	bne.n	8003a7a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d036      	beq.n	8003b12 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d019      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003aac:	4b37      	ldr	r3, [pc, #220]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a36      	ldr	r2, [pc, #216]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003ab2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fbe2 	bl	8002280 <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ac0:	f7fe fbde 	bl	8002280 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1dc      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x3d8>
 8003ade:	e018      	b.n	8003b12 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a29      	ldr	r2, [pc, #164]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003ae6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aec:	f7fe fbc8 	bl	8002280 <HAL_GetTick>
 8003af0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af4:	f7fe fbc4 	bl	8002280 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e1c2      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b06:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8086 	beq.w	8003c2c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x4a8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1a      	ldr	r2, [pc, #104]	@ (8003b90 <HAL_RCC_OscConfig+0x4a8>)
 8003b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b2c:	f7fe fba8 	bl	8002280 <HAL_GetTick>
 8003b30:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b34:	f7fe fba4 	bl	8002280 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	@ 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e1a2      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b46:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <HAL_RCC_OscConfig+0x4a8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d106      	bne.n	8003b68 <HAL_RCC_OscConfig+0x480>
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b66:	e032      	b.n	8003bce <HAL_RCC_OscConfig+0x4e6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d111      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4ac>
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b74:	4a05      	ldr	r2, [pc, #20]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7c:	4b03      	ldr	r3, [pc, #12]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b80:	4a02      	ldr	r2, [pc, #8]	@ (8003b8c <HAL_RCC_OscConfig+0x4a4>)
 8003b82:	f023 0304 	bic.w	r3, r3, #4
 8003b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b88:	e021      	b.n	8003bce <HAL_RCC_OscConfig+0x4e6>
 8003b8a:	bf00      	nop
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	58024800 	.word	0x58024800
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x4ce>
 8003b9c:	4b83      	ldr	r3, [pc, #524]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba0:	4a82      	ldr	r2, [pc, #520]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003ba2:	f043 0304 	orr.w	r3, r3, #4
 8003ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba8:	4b80      	ldr	r3, [pc, #512]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4a7f      	ldr	r2, [pc, #508]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb4:	e00b      	b.n	8003bce <HAL_RCC_OscConfig+0x4e6>
 8003bb6:	4b7d      	ldr	r3, [pc, #500]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	4a7c      	ldr	r2, [pc, #496]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc2:	4b7a      	ldr	r3, [pc, #488]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	4a79      	ldr	r2, [pc, #484]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003bc8:	f023 0304 	bic.w	r3, r3, #4
 8003bcc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d015      	beq.n	8003c02 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fe fb53 	bl	8002280 <HAL_GetTick>
 8003bda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fe fb4f 	bl	8002280 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e14b      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bf4:	4b6d      	ldr	r3, [pc, #436]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ee      	beq.n	8003bde <HAL_RCC_OscConfig+0x4f6>
 8003c00:	e014      	b.n	8003c2c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fe fb3d 	bl	8002280 <HAL_GetTick>
 8003c06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fe fb39 	bl	8002280 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e135      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c20:	4b62      	ldr	r3, [pc, #392]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ee      	bne.n	8003c0a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 812a 	beq.w	8003e8a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c36:	4b5d      	ldr	r3, [pc, #372]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c3e:	2b18      	cmp	r3, #24
 8003c40:	f000 80ba 	beq.w	8003db8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	f040 8095 	bne.w	8003d78 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4e:	4b57      	ldr	r3, [pc, #348]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a56      	ldr	r2, [pc, #344]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003c54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fe fb11 	bl	8002280 <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c62:	f7fe fb0d 	bl	8002280 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e10b      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c74:	4b4d      	ldr	r3, [pc, #308]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c80:	4b4a      	ldr	r3, [pc, #296]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003c82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c84:	4b4a      	ldr	r3, [pc, #296]	@ (8003db0 <HAL_RCC_OscConfig+0x6c8>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c90:	0112      	lsls	r2, r2, #4
 8003c92:	430a      	orrs	r2, r1
 8003c94:	4945      	ldr	r1, [pc, #276]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	025b      	lsls	r3, r3, #9
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003cca:	4938      	ldr	r1, [pc, #224]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cd0:	4b36      	ldr	r3, [pc, #216]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	4a35      	ldr	r2, [pc, #212]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cdc:	4b33      	ldr	r3, [pc, #204]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ce0:	4b34      	ldr	r3, [pc, #208]	@ (8003db4 <HAL_RCC_OscConfig+0x6cc>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ce8:	00d2      	lsls	r2, r2, #3
 8003cea:	4930      	ldr	r1, [pc, #192]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	f023 020c 	bic.w	r2, r3, #12
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	492b      	ldr	r1, [pc, #172]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d02:	4b2a      	ldr	r3, [pc, #168]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	f023 0202 	bic.w	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	4927      	ldr	r1, [pc, #156]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d14:	4b25      	ldr	r3, [pc, #148]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	4a24      	ldr	r2, [pc, #144]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4b22      	ldr	r3, [pc, #136]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	4a21      	ldr	r2, [pc, #132]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	4a1e      	ldr	r2, [pc, #120]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d38:	4b1c      	ldr	r3, [pc, #112]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d44:	4b19      	ldr	r3, [pc, #100]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a18      	ldr	r2, [pc, #96]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fa96 	bl	8002280 <HAL_GetTick>
 8003d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fe fa92 	bl	8002280 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e090      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x670>
 8003d76:	e088      	b.n	8003e8a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d78:	4b0c      	ldr	r3, [pc, #48]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fa7c 	bl	8002280 <HAL_GetTick>
 8003d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fe fa78 	bl	8002280 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e076      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d9e:	4b03      	ldr	r3, [pc, #12]	@ (8003dac <HAL_RCC_OscConfig+0x6c4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x6a4>
 8003daa:	e06e      	b.n	8003e8a <HAL_RCC_OscConfig+0x7a2>
 8003dac:	58024400 	.word	0x58024400
 8003db0:	fffffc0c 	.word	0xfffffc0c
 8003db4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003db8:	4b36      	ldr	r3, [pc, #216]	@ (8003e94 <HAL_RCC_OscConfig+0x7ac>)
 8003dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dbe:	4b35      	ldr	r3, [pc, #212]	@ (8003e94 <HAL_RCC_OscConfig+0x7ac>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d031      	beq.n	8003e30 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0203 	and.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d12a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d122      	bne.n	8003e30 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d11a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	0a5b      	lsrs	r3, r3, #9
 8003dfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d108      	bne.n	8003e30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	0e1b      	lsrs	r3, r3, #24
 8003e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e02b      	b.n	8003e8c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e34:	4b17      	ldr	r3, [pc, #92]	@ (8003e94 <HAL_RCC_OscConfig+0x7ac>)
 8003e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e38:	08db      	lsrs	r3, r3, #3
 8003e3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e3e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d01f      	beq.n	8003e8a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e4a:	4b12      	ldr	r3, [pc, #72]	@ (8003e94 <HAL_RCC_OscConfig+0x7ac>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	4a11      	ldr	r2, [pc, #68]	@ (8003e94 <HAL_RCC_OscConfig+0x7ac>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e56:	f7fe fa13 	bl	8002280 <HAL_GetTick>
 8003e5a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e5c:	bf00      	nop
 8003e5e:	f7fe fa0f 	bl	8002280 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d0f9      	beq.n	8003e5e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <HAL_RCC_OscConfig+0x7ac>)
 8003e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <HAL_RCC_OscConfig+0x7b0>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e76:	00d2      	lsls	r2, r2, #3
 8003e78:	4906      	ldr	r1, [pc, #24]	@ (8003e94 <HAL_RCC_OscConfig+0x7ac>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e7e:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <HAL_RCC_OscConfig+0x7ac>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	4a04      	ldr	r2, [pc, #16]	@ (8003e94 <HAL_RCC_OscConfig+0x7ac>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3730      	adds	r7, #48	@ 0x30
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	58024400 	.word	0x58024400
 8003e98:	ffff0007 	.word	0xffff0007

08003e9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e19c      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b8a      	ldr	r3, [pc, #552]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d910      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b87      	ldr	r3, [pc, #540]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 020f 	bic.w	r2, r3, #15
 8003ec6:	4985      	ldr	r1, [pc, #532]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b83      	ldr	r3, [pc, #524]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e184      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	4b7b      	ldr	r3, [pc, #492]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d908      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003efc:	4b78      	ldr	r3, [pc, #480]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	4975      	ldr	r1, [pc, #468]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	4b70      	ldr	r3, [pc, #448]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d908      	bls.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	496a      	ldr	r1, [pc, #424]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	4b64      	ldr	r3, [pc, #400]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d908      	bls.n	8003f6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f58:	4b61      	ldr	r3, [pc, #388]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	495e      	ldr	r1, [pc, #376]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	4b59      	ldr	r3, [pc, #356]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d908      	bls.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f86:	4b56      	ldr	r3, [pc, #344]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4953      	ldr	r1, [pc, #332]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d908      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f023 020f 	bic.w	r2, r3, #15
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4947      	ldr	r1, [pc, #284]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d055      	beq.n	800407e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fd2:	4b43      	ldr	r3, [pc, #268]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4940      	ldr	r1, [pc, #256]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fec:	4b3c      	ldr	r3, [pc, #240]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d121      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0f6      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004004:	4b36      	ldr	r3, [pc, #216]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d115      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0ea      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800401c:	4b30      	ldr	r3, [pc, #192]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0de      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800402c:	4b2c      	ldr	r3, [pc, #176]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0d6      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800403c:	4b28      	ldr	r3, [pc, #160]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f023 0207 	bic.w	r2, r3, #7
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4925      	ldr	r1, [pc, #148]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800404a:	4313      	orrs	r3, r2
 800404c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404e:	f7fe f917 	bl	8002280 <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004054:	e00a      	b.n	800406c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004056:	f7fe f913 	bl	8002280 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0be      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406c:	4b1c      	ldr	r3, [pc, #112]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	429a      	cmp	r2, r3
 800407c:	d1eb      	bne.n	8004056 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	4b14      	ldr	r3, [pc, #80]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	429a      	cmp	r2, r3
 8004098:	d208      	bcs.n	80040ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800409a:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f023 020f 	bic.w	r2, r3, #15
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	490e      	ldr	r1, [pc, #56]	@ (80040e0 <HAL_RCC_ClockConfig+0x244>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d214      	bcs.n	80040e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 020f 	bic.w	r2, r3, #15
 80040c2:	4906      	ldr	r1, [pc, #24]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e086      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
 80040dc:	52002000 	.word	0x52002000
 80040e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d010      	beq.n	8004112 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	4b3f      	ldr	r3, [pc, #252]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d208      	bcs.n	8004112 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004100:	4b3c      	ldr	r3, [pc, #240]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	4939      	ldr	r1, [pc, #228]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800410e:	4313      	orrs	r3, r2
 8004110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	4b34      	ldr	r3, [pc, #208]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800412a:	429a      	cmp	r2, r3
 800412c:	d208      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800412e:	4b31      	ldr	r3, [pc, #196]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	492e      	ldr	r1, [pc, #184]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800413c:	4313      	orrs	r3, r2
 800413e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004158:	429a      	cmp	r2, r3
 800415a:	d208      	bcs.n	800416e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800415c:	4b25      	ldr	r3, [pc, #148]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	4922      	ldr	r1, [pc, #136]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800416a:	4313      	orrs	r3, r2
 800416c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004186:	429a      	cmp	r2, r3
 8004188:	d208      	bcs.n	800419c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800418a:	4b1a      	ldr	r3, [pc, #104]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4917      	ldr	r1, [pc, #92]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004198:	4313      	orrs	r3, r2
 800419a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800419c:	f000 f834 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	4912      	ldr	r1, [pc, #72]	@ (80041f8 <HAL_RCC_ClockConfig+0x35c>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ba:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	4a0d      	ldr	r2, [pc, #52]	@ (80041f8 <HAL_RCC_ClockConfig+0x35c>)
 80041c4:	5cd3      	ldrb	r3, [r2, r3]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
 80041d0:	4a0a      	ldr	r2, [pc, #40]	@ (80041fc <HAL_RCC_ClockConfig+0x360>)
 80041d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <HAL_RCC_ClockConfig+0x364>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041da:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x368>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd fdee 	bl	8001dc0 <HAL_InitTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
 80041f8:	080107c4 	.word	0x080107c4
 80041fc:	24000004 	.word	0x24000004
 8004200:	24000000 	.word	0x24000000
 8004204:	24000008 	.word	0x24000008

08004208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	@ 0x24
 800420c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420e:	4bb3      	ldr	r3, [pc, #716]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004216:	2b18      	cmp	r3, #24
 8004218:	f200 8155 	bhi.w	80044c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800421c:	a201      	add	r2, pc, #4	@ (adr r2, 8004224 <HAL_RCC_GetSysClockFreq+0x1c>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004289 	.word	0x08004289
 8004228:	080044c7 	.word	0x080044c7
 800422c:	080044c7 	.word	0x080044c7
 8004230:	080044c7 	.word	0x080044c7
 8004234:	080044c7 	.word	0x080044c7
 8004238:	080044c7 	.word	0x080044c7
 800423c:	080044c7 	.word	0x080044c7
 8004240:	080044c7 	.word	0x080044c7
 8004244:	080042af 	.word	0x080042af
 8004248:	080044c7 	.word	0x080044c7
 800424c:	080044c7 	.word	0x080044c7
 8004250:	080044c7 	.word	0x080044c7
 8004254:	080044c7 	.word	0x080044c7
 8004258:	080044c7 	.word	0x080044c7
 800425c:	080044c7 	.word	0x080044c7
 8004260:	080044c7 	.word	0x080044c7
 8004264:	080042b5 	.word	0x080042b5
 8004268:	080044c7 	.word	0x080044c7
 800426c:	080044c7 	.word	0x080044c7
 8004270:	080044c7 	.word	0x080044c7
 8004274:	080044c7 	.word	0x080044c7
 8004278:	080044c7 	.word	0x080044c7
 800427c:	080044c7 	.word	0x080044c7
 8004280:	080044c7 	.word	0x080044c7
 8004284:	080042bb 	.word	0x080042bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004288:	4b94      	ldr	r3, [pc, #592]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004294:	4b91      	ldr	r3, [pc, #580]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	4a90      	ldr	r2, [pc, #576]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042a6:	e111      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042a8:	4b8d      	ldr	r3, [pc, #564]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042aa:	61bb      	str	r3, [r7, #24]
      break;
 80042ac:	e10e      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042ae:	4b8d      	ldr	r3, [pc, #564]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042b0:	61bb      	str	r3, [r7, #24]
      break;
 80042b2:	e10b      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042b4:	4b8c      	ldr	r3, [pc, #560]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042b6:	61bb      	str	r3, [r7, #24]
      break;
 80042b8:	e108      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042ba:	4b88      	ldr	r3, [pc, #544]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042c4:	4b85      	ldr	r3, [pc, #532]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042d0:	4b82      	ldr	r3, [pc, #520]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042da:	4b80      	ldr	r3, [pc, #512]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042de:	08db      	lsrs	r3, r3, #3
 80042e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80e1 	beq.w	80044c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b02      	cmp	r3, #2
 8004302:	f000 8083 	beq.w	800440c <HAL_RCC_GetSysClockFreq+0x204>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f200 80a1 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x248>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x114>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d056      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800431a:	e099      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800431c:	4b6f      	ldr	r3, [pc, #444]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02d      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004328:	4b6c      	ldr	r3, [pc, #432]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	4a6b      	ldr	r2, [pc, #428]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b62      	ldr	r3, [pc, #392]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a02 	vldr	s12, [r7, #8]
 8004366:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004382:	e087      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80044f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b51      	ldr	r3, [pc, #324]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043aa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043c6:	e065      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80044f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b40      	ldr	r3, [pc, #256]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800440a:	e043      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80044f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b2f      	ldr	r3, [pc, #188]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004432:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800444e:	e021      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80044f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a02 	vldr	s12, [r7, #8]
 8004476:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004492:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004494:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004498:	0a5b      	lsrs	r3, r3, #9
 800449a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800449e:	3301      	adds	r3, #1
 80044a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	ee07 3a90 	vmov	s15, r3
 80044a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80044b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b8:	ee17 3a90 	vmov	r3, s15
 80044bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044be:	e005      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
      break;
 80044c4:	e002      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044c6:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044c8:	61bb      	str	r3, [r7, #24]
      break;
 80044ca:	bf00      	nop
  }

  return sysclockfreq;
 80044cc:	69bb      	ldr	r3, [r7, #24]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	@ 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	58024400 	.word	0x58024400
 80044e0:	03d09000 	.word	0x03d09000
 80044e4:	003d0900 	.word	0x003d0900
 80044e8:	02dc6c00 	.word	0x02dc6c00
 80044ec:	46000000 	.word	0x46000000
 80044f0:	4c742400 	.word	0x4c742400
 80044f4:	4a742400 	.word	0x4a742400
 80044f8:	4c371b00 	.word	0x4c371b00

080044fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004502:	f7ff fe81 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 8004506:	4602      	mov	r2, r0
 8004508:	4b10      	ldr	r3, [pc, #64]	@ (800454c <HAL_RCC_GetHCLKFreq+0x50>)
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	490f      	ldr	r1, [pc, #60]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x54>)
 8004514:	5ccb      	ldrb	r3, [r1, r3]
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	fa22 f303 	lsr.w	r3, r2, r3
 800451e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004520:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <HAL_RCC_GetHCLKFreq+0x50>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	4a09      	ldr	r2, [pc, #36]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x54>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	fa22 f303 	lsr.w	r3, r2, r3
 8004536:	4a07      	ldr	r2, [pc, #28]	@ (8004554 <HAL_RCC_GetHCLKFreq+0x58>)
 8004538:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800453a:	4a07      	ldr	r2, [pc, #28]	@ (8004558 <HAL_RCC_GetHCLKFreq+0x5c>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <HAL_RCC_GetHCLKFreq+0x58>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	58024400 	.word	0x58024400
 8004550:	080107c4 	.word	0x080107c4
 8004554:	24000004 	.word	0x24000004
 8004558:	24000000 	.word	0x24000000

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004560:	f7ff ffcc 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4904      	ldr	r1, [pc, #16]	@ (8004584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	58024400 	.word	0x58024400
 8004584:	080107c4 	.word	0x080107c4

08004588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800458c:	f7ff ffb6 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4904      	ldr	r1, [pc, #16]	@ (80045b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	58024400 	.word	0x58024400
 80045b0:	080107c4 	.word	0x080107c4

080045b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	223f      	movs	r2, #63	@ 0x3f
 80045c2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004630 <HAL_RCC_GetClockConfig+0x7c>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f003 0207 	and.w	r2, r3, #7
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80045d0:	4b17      	ldr	r3, [pc, #92]	@ (8004630 <HAL_RCC_GetClockConfig+0x7c>)
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80045dc:	4b14      	ldr	r3, [pc, #80]	@ (8004630 <HAL_RCC_GetClockConfig+0x7c>)
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80045e8:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <HAL_RCC_GetClockConfig+0x7c>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80045f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004630 <HAL_RCC_GetClockConfig+0x7c>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_GetClockConfig+0x7c>)
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800460c:	4b08      	ldr	r3, [pc, #32]	@ (8004630 <HAL_RCC_GetClockConfig+0x7c>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004618:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <HAL_RCC_GetClockConfig+0x80>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	58024400 	.word	0x58024400
 8004634:	52002000 	.word	0x52002000

08004638 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800463c:	b0c6      	sub	sp, #280	@ 0x118
 800463e:	af00      	add	r7, sp, #0
 8004640:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800464a:	2300      	movs	r3, #0
 800464c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800465c:	2500      	movs	r5, #0
 800465e:	ea54 0305 	orrs.w	r3, r4, r5
 8004662:	d049      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800466a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800466e:	d02f      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004670:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004674:	d828      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800467a:	d01a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800467c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004680:	d822      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800468a:	d007      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800468c:	e01c      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468e:	4bab      	ldr	r3, [pc, #684]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004692:	4aaa      	ldr	r2, [pc, #680]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004698:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800469a:	e01a      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800469c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a0:	3308      	adds	r3, #8
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 fa49 	bl	8006b3c <RCCEx_PLL2_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046b0:	e00f      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b6:	3328      	adds	r3, #40	@ 0x28
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f002 faf0 	bl	8006ca0 <RCCEx_PLL3_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046c6:	e004      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046ce:	e000      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046da:	4b98      	ldr	r3, [pc, #608]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046e8:	4a94      	ldr	r2, [pc, #592]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80046ee:	e003      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004704:	f04f 0900 	mov.w	r9, #0
 8004708:	ea58 0309 	orrs.w	r3, r8, r9
 800470c:	d047      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800470e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004714:	2b04      	cmp	r3, #4
 8004716:	d82a      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004718:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004735 	.word	0x08004735
 8004724:	08004743 	.word	0x08004743
 8004728:	08004759 	.word	0x08004759
 800472c:	08004777 	.word	0x08004777
 8004730:	08004777 	.word	0x08004777
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004734:	4b81      	ldr	r3, [pc, #516]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	4a80      	ldr	r2, [pc, #512]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800473a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800473e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004740:	e01a      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004746:	3308      	adds	r3, #8
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f002 f9f6 	bl	8006b3c <RCCEx_PLL2_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004756:	e00f      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475c:	3328      	adds	r3, #40	@ 0x28
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f002 fa9d 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800476c:	e004      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004774:	e000      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004780:	4b6e      	ldr	r3, [pc, #440]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004784:	f023 0107 	bic.w	r1, r3, #7
 8004788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478e:	4a6b      	ldr	r2, [pc, #428]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6513      	str	r3, [r2, #80]	@ 0x50
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800479a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800479e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80047aa:	f04f 0b00 	mov.w	fp, #0
 80047ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80047b2:	d05b      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80047b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047bc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80047c0:	d03b      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80047c2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80047c6:	d834      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80047c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047cc:	d037      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047d2:	d82e      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80047d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80047d8:	d033      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80047da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80047de:	d828      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80047e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047e4:	d01a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80047e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ea:	d822      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80047f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f4:	d007      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047f6:	e01c      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f8:	4b50      	ldr	r3, [pc, #320]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	4a4f      	ldr	r2, [pc, #316]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004804:	e01e      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480a:	3308      	adds	r3, #8
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f002 f994 	bl	8006b3c <RCCEx_PLL2_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800481a:	e013      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800481c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004820:	3328      	adds	r3, #40	@ 0x28
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f002 fa3b 	bl	8006ca0 <RCCEx_PLL3_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004830:	e008      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004838:	e004      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800483a:	bf00      	nop
 800483c:	e002      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800483e:	bf00      	nop
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800484c:	4b3b      	ldr	r3, [pc, #236]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800484e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004850:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004858:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800485c:	4a37      	ldr	r2, [pc, #220]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800485e:	430b      	orrs	r3, r1
 8004860:	6593      	str	r3, [r2, #88]	@ 0x58
 8004862:	e003      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004868:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004878:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800487c:	2300      	movs	r3, #0
 800487e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004882:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004886:	460b      	mov	r3, r1
 8004888:	4313      	orrs	r3, r2
 800488a:	d05d      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800488c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004890:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004894:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004898:	d03b      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800489a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800489e:	d834      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80048a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048a4:	d037      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80048a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048aa:	d82e      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80048ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048b0:	d033      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80048b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048b6:	d828      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80048b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048bc:	d01a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80048be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048c2:	d822      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80048c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048cc:	d007      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80048ce:	e01c      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d0:	4b1a      	ldr	r3, [pc, #104]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	4a19      	ldr	r2, [pc, #100]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048dc:	e01e      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e2:	3308      	adds	r3, #8
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f002 f928 	bl	8006b3c <RCCEx_PLL2_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048f2:	e013      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f8:	3328      	adds	r3, #40	@ 0x28
 80048fa:	2100      	movs	r1, #0
 80048fc:	4618      	mov	r0, r3
 80048fe:	f002 f9cf 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004902:	4603      	mov	r3, r0
 8004904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004908:	e008      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004910:	e004      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004912:	bf00      	nop
 8004914:	e002      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800491a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10d      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004928:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800492c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004930:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004934:	4a01      	ldr	r2, [pc, #4]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004936:	430b      	orrs	r3, r1
 8004938:	6593      	str	r3, [r2, #88]	@ 0x58
 800493a:	e005      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800493c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004954:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004958:	2300      	movs	r3, #0
 800495a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800495e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004962:	460b      	mov	r3, r1
 8004964:	4313      	orrs	r3, r2
 8004966:	d03a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496e:	2b30      	cmp	r3, #48	@ 0x30
 8004970:	d01f      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004972:	2b30      	cmp	r3, #48	@ 0x30
 8004974:	d819      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004976:	2b20      	cmp	r3, #32
 8004978:	d00c      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800497a:	2b20      	cmp	r3, #32
 800497c:	d815      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d019      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004982:	2b10      	cmp	r3, #16
 8004984:	d111      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004986:	4baa      	ldr	r3, [pc, #680]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	4aa9      	ldr	r2, [pc, #676]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800498c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004990:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004992:	e011      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004998:	3308      	adds	r3, #8
 800499a:	2102      	movs	r1, #2
 800499c:	4618      	mov	r0, r3
 800499e:	f002 f8cd 	bl	8006b3c <RCCEx_PLL2_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80049a8:	e006      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049b0:	e002      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80049b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80049c0:	4b9b      	ldr	r3, [pc, #620]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80049c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ce:	4a98      	ldr	r2, [pc, #608]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049d0:	430b      	orrs	r3, r1
 80049d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80049de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80049ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049ee:	2300      	movs	r3, #0
 80049f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80049f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d051      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80049fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a08:	d035      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004a0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a0e:	d82e      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004a10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a14:	d031      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004a16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a1a:	d828      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a20:	d01a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a26:	d822      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a30:	d007      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004a32:	e01c      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a34:	4b7e      	ldr	r3, [pc, #504]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	4a7d      	ldr	r2, [pc, #500]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a40:	e01c      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a46:	3308      	adds	r3, #8
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f002 f876 	bl	8006b3c <RCCEx_PLL2_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a56:	e011      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a5c:	3328      	adds	r3, #40	@ 0x28
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f002 f91d 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a6c:	e006      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a74:	e002      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004a76:	bf00      	nop
 8004a78:	e000      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a84:	4b6a      	ldr	r3, [pc, #424]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a88:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a92:	4a67      	ldr	r2, [pc, #412]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a98:	e003      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004aae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ab8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	d053      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004acc:	d033      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004ace:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ad2:	d82c      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004ad4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ad8:	d02f      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ade:	d826      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004ae0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ae4:	d02b      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004ae6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004aea:	d820      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af0:	d012      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af6:	d81a      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d022      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b00:	d115      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b06:	3308      	adds	r3, #8
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f002 f816 	bl	8006b3c <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b16:	e015      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1c:	3328      	adds	r3, #40	@ 0x28
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4618      	mov	r0, r3
 8004b22:	f002 f8bd 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b34:	e006      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004b36:	bf00      	nop
 8004b38:	e004      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b4c:	4b38      	ldr	r3, [pc, #224]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b50:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5a:	4a35      	ldr	r2, [pc, #212]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004b76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b80:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b84:	460b      	mov	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d058      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b96:	d033      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b9c:	d82c      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba2:	d02f      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba8:	d826      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004baa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bae:	d02b      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004bb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bb4:	d820      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bba:	d012      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bc0:	d81a      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d022      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004bc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bca:	d115      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 ffb1 	bl	8006b3c <RCCEx_PLL2_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004be0:	e015      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be6:	3328      	adds	r3, #40	@ 0x28
 8004be8:	2101      	movs	r1, #1
 8004bea:	4618      	mov	r0, r3
 8004bec:	f002 f858 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bfe:	e006      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c00:	bf00      	nop
 8004c02:	e004      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c04:	bf00      	nop
 8004c06:	e002      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c08:	bf00      	nop
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10e      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c16:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c26:	4a02      	ldr	r2, [pc, #8]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c2c:	e006      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004c2e:	bf00      	nop
 8004c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	d037      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c66:	d00e      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c6c:	d816      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d018      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004c72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c76:	d111      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c78:	4bc4      	ldr	r3, [pc, #784]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	4ac3      	ldr	r2, [pc, #780]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c84:	e00f      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 ff54 	bl	8006b3c <RCCEx_PLL2_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c9a:	e004      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cae:	4bb7      	ldr	r3, [pc, #732]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cbc:	4ab3      	ldr	r2, [pc, #716]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cc2:	e003      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ce2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	d039      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d81c      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d39 	.word	0x08004d39
 8004d00:	08004d0d 	.word	0x08004d0d
 8004d04:	08004d1b 	.word	0x08004d1b
 8004d08:	08004d39 	.word	0x08004d39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0c:	4b9f      	ldr	r3, [pc, #636]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	4a9e      	ldr	r2, [pc, #632]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d18:	e00f      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d1e:	3308      	adds	r3, #8
 8004d20:	2102      	movs	r1, #2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 ff0a 	bl	8006b3c <RCCEx_PLL2_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d2e:	e004      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d36:	e000      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d42:	4b92      	ldr	r3, [pc, #584]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d46:	f023 0103 	bic.w	r1, r3, #3
 8004d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d50:	4a8e      	ldr	r2, [pc, #568]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d52:	430b      	orrs	r3, r1
 8004d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d56:	e003      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f000 8099 	beq.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d82:	4b83      	ldr	r3, [pc, #524]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a82      	ldr	r2, [pc, #520]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d8e:	f7fd fa77 	bl	8002280 <HAL_GetTick>
 8004d92:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d96:	e00b      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d98:	f7fd fa72 	bl	8002280 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b64      	cmp	r3, #100	@ 0x64
 8004da6:	d903      	bls.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dae:	e005      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004db0:	4b77      	ldr	r3, [pc, #476]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0ed      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d173      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004dc4:	4b71      	ldr	r3, [pc, #452]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dd0:	4053      	eors	r3, r2
 8004dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d015      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dda:	4b6c      	ldr	r3, [pc, #432]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004de6:	4b69      	ldr	r3, [pc, #420]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	4a68      	ldr	r2, [pc, #416]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004df2:	4b66      	ldr	r3, [pc, #408]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	4a65      	ldr	r2, [pc, #404]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dfc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004dfe:	4a63      	ldr	r2, [pc, #396]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e04:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e12:	d118      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd fa34 	bl	8002280 <HAL_GetTick>
 8004e18:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e1c:	e00d      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fd fa2f 	bl	8002280 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004e28:	1ad2      	subs	r2, r2, r3
 8004e2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d903      	bls.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004e38:	e005      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e3a:	4b54      	ldr	r3, [pc, #336]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0eb      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004e46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d129      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e5e:	d10e      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004e60:	4b4a      	ldr	r3, [pc, #296]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e70:	091a      	lsrs	r2, r3, #4
 8004e72:	4b48      	ldr	r3, [pc, #288]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	4a45      	ldr	r2, [pc, #276]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6113      	str	r3, [r2, #16]
 8004e7c:	e005      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004e7e:	4b43      	ldr	r3, [pc, #268]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	4a42      	ldr	r2, [pc, #264]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e88:	6113      	str	r3, [r2, #16]
 8004e8a:	4b40      	ldr	r3, [pc, #256]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e8c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9a:	4a3c      	ldr	r2, [pc, #240]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ea6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004eaa:	e003      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f002 0301 	and.w	r3, r2, #1
 8004ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004eca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f000 808f 	beq.w	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004edc:	2b28      	cmp	r3, #40	@ 0x28
 8004ede:	d871      	bhi.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004fcd 	.word	0x08004fcd
 8004eec:	08004fc5 	.word	0x08004fc5
 8004ef0:	08004fc5 	.word	0x08004fc5
 8004ef4:	08004fc5 	.word	0x08004fc5
 8004ef8:	08004fc5 	.word	0x08004fc5
 8004efc:	08004fc5 	.word	0x08004fc5
 8004f00:	08004fc5 	.word	0x08004fc5
 8004f04:	08004fc5 	.word	0x08004fc5
 8004f08:	08004f99 	.word	0x08004f99
 8004f0c:	08004fc5 	.word	0x08004fc5
 8004f10:	08004fc5 	.word	0x08004fc5
 8004f14:	08004fc5 	.word	0x08004fc5
 8004f18:	08004fc5 	.word	0x08004fc5
 8004f1c:	08004fc5 	.word	0x08004fc5
 8004f20:	08004fc5 	.word	0x08004fc5
 8004f24:	08004fc5 	.word	0x08004fc5
 8004f28:	08004faf 	.word	0x08004faf
 8004f2c:	08004fc5 	.word	0x08004fc5
 8004f30:	08004fc5 	.word	0x08004fc5
 8004f34:	08004fc5 	.word	0x08004fc5
 8004f38:	08004fc5 	.word	0x08004fc5
 8004f3c:	08004fc5 	.word	0x08004fc5
 8004f40:	08004fc5 	.word	0x08004fc5
 8004f44:	08004fc5 	.word	0x08004fc5
 8004f48:	08004fcd 	.word	0x08004fcd
 8004f4c:	08004fc5 	.word	0x08004fc5
 8004f50:	08004fc5 	.word	0x08004fc5
 8004f54:	08004fc5 	.word	0x08004fc5
 8004f58:	08004fc5 	.word	0x08004fc5
 8004f5c:	08004fc5 	.word	0x08004fc5
 8004f60:	08004fc5 	.word	0x08004fc5
 8004f64:	08004fc5 	.word	0x08004fc5
 8004f68:	08004fcd 	.word	0x08004fcd
 8004f6c:	08004fc5 	.word	0x08004fc5
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	08004fc5 	.word	0x08004fc5
 8004f78:	08004fc5 	.word	0x08004fc5
 8004f7c:	08004fc5 	.word	0x08004fc5
 8004f80:	08004fc5 	.word	0x08004fc5
 8004f84:	08004fc5 	.word	0x08004fc5
 8004f88:	08004fcd 	.word	0x08004fcd
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	58024800 	.word	0x58024800
 8004f94:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 fdcb 	bl	8006b3c <RCCEx_PLL2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fac:	e00f      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb2:	3328      	adds	r3, #40	@ 0x28
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 fe72 	bl	8006ca0 <RCCEx_PLL3_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fc2:	e004      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fca:	e000      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004fd6:	4bbf      	ldr	r3, [pc, #764]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fe4:	4abb      	ldr	r2, [pc, #748]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ff0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f002 0302 	and.w	r3, r2, #2
 8005000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005004:	2300      	movs	r3, #0
 8005006:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800500a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	d041      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501a:	2b05      	cmp	r3, #5
 800501c:	d824      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800501e:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005071 	.word	0x08005071
 8005028:	0800503d 	.word	0x0800503d
 800502c:	08005053 	.word	0x08005053
 8005030:	08005071 	.word	0x08005071
 8005034:	08005071 	.word	0x08005071
 8005038:	08005071 	.word	0x08005071
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800503c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005040:	3308      	adds	r3, #8
 8005042:	2101      	movs	r1, #1
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fd79 	bl	8006b3c <RCCEx_PLL2_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005050:	e00f      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005056:	3328      	adds	r3, #40	@ 0x28
 8005058:	2101      	movs	r1, #1
 800505a:	4618      	mov	r0, r3
 800505c:	f001 fe20 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005066:	e004      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800507a:	4b96      	ldr	r3, [pc, #600]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800507c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507e:	f023 0107 	bic.w	r1, r3, #7
 8005082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005088:	4a92      	ldr	r2, [pc, #584]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800508a:	430b      	orrs	r3, r1
 800508c:	6553      	str	r3, [r2, #84]	@ 0x54
 800508e:	e003      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005094:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f002 0304 	and.w	r3, r2, #4
 80050a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050a8:	2300      	movs	r3, #0
 80050aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050ae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050b2:	460b      	mov	r3, r1
 80050b4:	4313      	orrs	r3, r2
 80050b6:	d044      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80050b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d825      	bhi.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80050c4:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	08005119 	.word	0x08005119
 80050d0:	080050e5 	.word	0x080050e5
 80050d4:	080050fb 	.word	0x080050fb
 80050d8:	08005119 	.word	0x08005119
 80050dc:	08005119 	.word	0x08005119
 80050e0:	08005119 	.word	0x08005119
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e8:	3308      	adds	r3, #8
 80050ea:	2101      	movs	r1, #1
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 fd25 	bl	8006b3c <RCCEx_PLL2_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80050f8:	e00f      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fe:	3328      	adds	r3, #40	@ 0x28
 8005100:	2101      	movs	r1, #1
 8005102:	4618      	mov	r0, r3
 8005104:	f001 fdcc 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800510e:	e004      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005116:	e000      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10b      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005122:	4b6c      	ldr	r3, [pc, #432]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005126:	f023 0107 	bic.w	r1, r3, #7
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005132:	4a68      	ldr	r2, [pc, #416]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005134:	430b      	orrs	r3, r1
 8005136:	6593      	str	r3, [r2, #88]	@ 0x58
 8005138:	e003      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800513e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	f002 0320 	and.w	r3, r2, #32
 800514e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005152:	2300      	movs	r3, #0
 8005154:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005158:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800515c:	460b      	mov	r3, r1
 800515e:	4313      	orrs	r3, r2
 8005160:	d055      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005166:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800516a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800516e:	d033      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005174:	d82c      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517a:	d02f      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005180:	d826      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005182:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005186:	d02b      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005188:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800518c:	d820      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800518e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005192:	d012      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005198:	d81a      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d022      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800519e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051a2:	d115      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a8:	3308      	adds	r3, #8
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f001 fcc5 	bl	8006b3c <RCCEx_PLL2_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051b8:	e015      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051be:	3328      	adds	r3, #40	@ 0x28
 80051c0:	2102      	movs	r1, #2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 fd6c 	bl	8006ca0 <RCCEx_PLL3_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051ce:	e00a      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051d6:	e006      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80051d8:	bf00      	nop
 80051da:	e004      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80051dc:	bf00      	nop
 80051de:	e002      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80051e0:	bf00      	nop
 80051e2:	e000      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80051e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ee:	4b39      	ldr	r3, [pc, #228]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80051f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051fe:	4a35      	ldr	r2, [pc, #212]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005200:	430b      	orrs	r3, r1
 8005202:	6553      	str	r3, [r2, #84]	@ 0x54
 8005204:	e003      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005206:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800520a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800520e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800521a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800521e:	2300      	movs	r3, #0
 8005220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005224:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005228:	460b      	mov	r3, r1
 800522a:	4313      	orrs	r3, r2
 800522c:	d058      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005236:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800523a:	d033      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800523c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005240:	d82c      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005246:	d02f      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524c:	d826      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800524e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005252:	d02b      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005254:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005258:	d820      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800525a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800525e:	d012      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005264:	d81a      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d022      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526e:	d115      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005274:	3308      	adds	r3, #8
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f001 fc5f 	bl	8006b3c <RCCEx_PLL2_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005284:	e015      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800528a:	3328      	adds	r3, #40	@ 0x28
 800528c:	2102      	movs	r1, #2
 800528e:	4618      	mov	r0, r3
 8005290:	f001 fd06 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800529a:	e00a      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052a2:	e006      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80052a4:	bf00      	nop
 80052a6:	e004      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80052a8:	bf00      	nop
 80052aa:	e002      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80052b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10e      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052ba:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052be:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80052c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ca:	4a02      	ldr	r2, [pc, #8]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80052d0:	e006      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80052d2:	bf00      	nop
 80052d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80052ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052f0:	2300      	movs	r3, #0
 80052f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80052fa:	460b      	mov	r3, r1
 80052fc:	4313      	orrs	r3, r2
 80052fe:	d055      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005304:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005308:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800530c:	d033      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800530e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005312:	d82c      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005318:	d02f      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800531a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800531e:	d826      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005320:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005324:	d02b      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005326:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800532a:	d820      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800532c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005330:	d012      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005332:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005336:	d81a      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d022      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800533c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005340:	d115      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005346:	3308      	adds	r3, #8
 8005348:	2100      	movs	r1, #0
 800534a:	4618      	mov	r0, r3
 800534c:	f001 fbf6 	bl	8006b3c <RCCEx_PLL2_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005356:	e015      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535c:	3328      	adds	r3, #40	@ 0x28
 800535e:	2102      	movs	r1, #2
 8005360:	4618      	mov	r0, r3
 8005362:	f001 fc9d 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800536c:	e00a      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005374:	e006      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005376:	bf00      	nop
 8005378:	e004      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800537a:	bf00      	nop
 800537c:	e002      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800538c:	4ba0      	ldr	r3, [pc, #640]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800538e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005390:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005398:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800539c:	4a9c      	ldr	r2, [pc, #624]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800539e:	430b      	orrs	r3, r1
 80053a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053a2:	e003      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80053ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f002 0308 	and.w	r3, r2, #8
 80053b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053bc:	2300      	movs	r3, #0
 80053be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80053c6:	460b      	mov	r3, r1
 80053c8:	4313      	orrs	r3, r2
 80053ca:	d01e      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80053cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053de:	3328      	adds	r3, #40	@ 0x28
 80053e0:	2102      	movs	r1, #2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fc5c 	bl	8006ca0 <RCCEx_PLL3_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80053f4:	4b86      	ldr	r3, [pc, #536]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005404:	4a82      	ldr	r2, [pc, #520]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005406:	430b      	orrs	r3, r1
 8005408:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f002 0310 	and.w	r3, r2, #16
 8005416:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800541a:	2300      	movs	r3, #0
 800541c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005420:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005424:	460b      	mov	r3, r1
 8005426:	4313      	orrs	r3, r2
 8005428:	d01e      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800542a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005436:	d10c      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543c:	3328      	adds	r3, #40	@ 0x28
 800543e:	2102      	movs	r1, #2
 8005440:	4618      	mov	r0, r3
 8005442:	f001 fc2d 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005452:	4b6f      	ldr	r3, [pc, #444]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005456:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005462:	4a6b      	ldr	r2, [pc, #428]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005464:	430b      	orrs	r3, r1
 8005466:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005474:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005476:	2300      	movs	r3, #0
 8005478:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800547a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800547e:	460b      	mov	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	d03e      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005488:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800548c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005490:	d022      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005496:	d81b      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a0:	d00b      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80054a2:	e015      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a8:	3308      	adds	r3, #8
 80054aa:	2100      	movs	r1, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fb45 	bl	8006b3c <RCCEx_PLL2_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054b8:	e00f      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054be:	3328      	adds	r3, #40	@ 0x28
 80054c0:	2102      	movs	r1, #2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 fbec 	bl	8006ca0 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80054ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054f2:	4a47      	ldr	r2, [pc, #284]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800550e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005510:	2300      	movs	r3, #0
 8005512:	677b      	str	r3, [r7, #116]	@ 0x74
 8005514:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005518:	460b      	mov	r3, r1
 800551a:	4313      	orrs	r3, r2
 800551c:	d03b      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005526:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800552a:	d01f      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800552c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005530:	d818      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005536:	d003      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005538:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800553c:	d007      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800553e:	e011      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005540:	4b33      	ldr	r3, [pc, #204]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	4a32      	ldr	r2, [pc, #200]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800554a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800554c:	e00f      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005552:	3328      	adds	r3, #40	@ 0x28
 8005554:	2101      	movs	r1, #1
 8005556:	4618      	mov	r0, r3
 8005558:	f001 fba2 	bl	8006ca0 <RCCEx_PLL3_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005562:	e004      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800556a:	e000      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800556c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005576:	4b26      	ldr	r3, [pc, #152]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800557e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005586:	4a22      	ldr	r2, [pc, #136]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005588:	430b      	orrs	r3, r1
 800558a:	6553      	str	r3, [r2, #84]	@ 0x54
 800558c:	e003      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005592:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80055a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055a4:	2300      	movs	r3, #0
 80055a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055a8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80055ac:	460b      	mov	r3, r1
 80055ae:	4313      	orrs	r3, r2
 80055b0:	d034      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80055b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c0:	d007      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80055c2:	e011      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c4:	4b12      	ldr	r3, [pc, #72]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	4a11      	ldr	r2, [pc, #68]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80055d0:	e00e      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d6:	3308      	adds	r3, #8
 80055d8:	2102      	movs	r1, #2
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 faae 	bl	8006b3c <RCCEx_PLL2_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80055e6:	e003      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80055ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10d      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055f8:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005606:	4a02      	ldr	r2, [pc, #8]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005608:	430b      	orrs	r3, r1
 800560a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800560c:	e006      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800560e:	bf00      	nop
 8005610:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005614:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005618:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005628:	663b      	str	r3, [r7, #96]	@ 0x60
 800562a:	2300      	movs	r3, #0
 800562c:	667b      	str	r3, [r7, #100]	@ 0x64
 800562e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005632:	460b      	mov	r3, r1
 8005634:	4313      	orrs	r3, r2
 8005636:	d00c      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563c:	3328      	adds	r3, #40	@ 0x28
 800563e:	2102      	movs	r1, #2
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fb2d 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800565e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005660:	2300      	movs	r3, #0
 8005662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005664:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005668:	460b      	mov	r3, r1
 800566a:	4313      	orrs	r3, r2
 800566c:	d036      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800566e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005678:	d018      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800567a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800567e:	d811      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005684:	d014      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800568a:	d80b      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d011      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005694:	d106      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005696:	4bb7      	ldr	r3, [pc, #732]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	4ab6      	ldr	r2, [pc, #728]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800569c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80056a2:	e008      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056aa:	e004      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80056ac:	bf00      	nop
 80056ae:	e002      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80056b0:	bf00      	nop
 80056b2:	e000      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80056b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056be:	4bad      	ldr	r3, [pc, #692]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056cc:	4aa9      	ldr	r2, [pc, #676]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056ce:	430b      	orrs	r3, r1
 80056d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80056d2:	e003      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80056e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80056ea:	2300      	movs	r3, #0
 80056ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80056ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80056f2:	460b      	mov	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056f8:	4b9e      	ldr	r3, [pc, #632]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005706:	4a9b      	ldr	r2, [pc, #620]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005708:	430b      	orrs	r3, r1
 800570a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800571a:	2300      	movs	r3, #0
 800571c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800571e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005722:	460b      	mov	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	d009      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005728:	4b92      	ldr	r3, [pc, #584]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800572a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005736:	4a8f      	ldr	r2, [pc, #572]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005738:	430b      	orrs	r3, r1
 800573a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800573c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005748:	643b      	str	r3, [r7, #64]	@ 0x40
 800574a:	2300      	movs	r3, #0
 800574c:	647b      	str	r3, [r7, #68]	@ 0x44
 800574e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005758:	4b86      	ldr	r3, [pc, #536]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	4a85      	ldr	r2, [pc, #532]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800575e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005762:	6113      	str	r3, [r2, #16]
 8005764:	4b83      	ldr	r3, [pc, #524]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005766:	6919      	ldr	r1, [r3, #16]
 8005768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005770:	4a80      	ldr	r2, [pc, #512]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005772:	430b      	orrs	r3, r1
 8005774:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005784:	2300      	movs	r3, #0
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005788:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800578c:	460b      	mov	r3, r1
 800578e:	4313      	orrs	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005792:	4b78      	ldr	r3, [pc, #480]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005796:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a0:	4a74      	ldr	r2, [pc, #464]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057a2:	430b      	orrs	r3, r1
 80057a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80057b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80057b4:	2300      	movs	r3, #0
 80057b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80057bc:	460b      	mov	r3, r1
 80057be:	4313      	orrs	r3, r2
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057c2:	4b6c      	ldr	r3, [pc, #432]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80057ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d2:	4a68      	ldr	r2, [pc, #416]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	2100      	movs	r1, #0
 80057e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80057ee:	460b      	mov	r3, r1
 80057f0:	4313      	orrs	r3, r2
 80057f2:	d011      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	3308      	adds	r3, #8
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 f99d 	bl	8006b3c <RCCEx_PLL2_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005814:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	2100      	movs	r1, #0
 8005822:	6239      	str	r1, [r7, #32]
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
 800582a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	d011      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005838:	3308      	adds	r3, #8
 800583a:	2101      	movs	r1, #1
 800583c:	4618      	mov	r0, r3
 800583e:	f001 f97d 	bl	8006b3c <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005854:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	2100      	movs	r1, #0
 8005862:	61b9      	str	r1, [r7, #24]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800586e:	460b      	mov	r3, r1
 8005870:	4313      	orrs	r3, r2
 8005872:	d011      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	3308      	adds	r3, #8
 800587a:	2102      	movs	r1, #2
 800587c:	4618      	mov	r0, r3
 800587e:	f001 f95d 	bl	8006b3c <RCCEx_PLL2_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	2100      	movs	r1, #0
 80058a2:	6139      	str	r1, [r7, #16]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	d011      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b8:	3328      	adds	r3, #40	@ 0x28
 80058ba:	2100      	movs	r1, #0
 80058bc:	4618      	mov	r0, r3
 80058be:	f001 f9ef 	bl	8006ca0 <RCCEx_PLL3_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80058c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	2100      	movs	r1, #0
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80058ee:	460b      	mov	r3, r1
 80058f0:	4313      	orrs	r3, r2
 80058f2:	d011      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f8:	3328      	adds	r3, #40	@ 0x28
 80058fa:	2101      	movs	r1, #1
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 f9cf 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005902:	4603      	mov	r3, r0
 8005904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005910:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005914:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	2100      	movs	r1, #0
 8005922:	6039      	str	r1, [r7, #0]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d011      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005938:	3328      	adds	r3, #40	@ 0x28
 800593a:	2102      	movs	r1, #2
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f9af 	bl	8006ca0 <RCCEx_PLL3_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005948:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005958:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
}
 8005966:	4618      	mov	r0, r3
 8005968:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800596c:	46bd      	mov	sp, r7
 800596e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400

08005978 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b090      	sub	sp, #64	@ 0x40
 800597c:	af00      	add	r7, sp, #0
 800597e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005986:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800598a:	430b      	orrs	r3, r1
 800598c:	f040 8094 	bne.w	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005990:	4b9b      	ldr	r3, [pc, #620]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	2b04      	cmp	r3, #4
 800599e:	f200 8087 	bhi.w	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80059a2:	a201      	add	r2, pc, #4	@ (adr r2, 80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059bd 	.word	0x080059bd
 80059ac:	080059e5 	.word	0x080059e5
 80059b0:	08005a0d 	.word	0x08005a0d
 80059b4:	08005aa9 	.word	0x08005aa9
 80059b8:	08005a35 	.word	0x08005a35
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059bc:	4b90      	ldr	r3, [pc, #576]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059c8:	d108      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 ff62 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059d8:	f000 bc93 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e0:	f000 bc8f 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059e4:	4b86      	ldr	r3, [pc, #536]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059f0:	d108      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059f2:	f107 0318 	add.w	r3, r7, #24
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fca6 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a00:	f000 bc7f 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a08:	f000 bc7b 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a0c:	4b7c      	ldr	r3, [pc, #496]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a18:	d108      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a1a:	f107 030c 	add.w	r3, r7, #12
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fde6 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a28:	f000 bc6b 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a30:	f000 bc67 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a34:	4b72      	ldr	r3, [pc, #456]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a3c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a3e:	4b70      	ldr	r3, [pc, #448]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d109      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a50:	4b6b      	ldr	r3, [pc, #428]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	08db      	lsrs	r3, r3, #3
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	4a6a      	ldr	r2, [pc, #424]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a62:	e01f      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a64:	4b66      	ldr	r3, [pc, #408]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a70:	d106      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a78:	d102      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a7a:	4b63      	ldr	r3, [pc, #396]	@ (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a7e:	e011      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a80:	4b5f      	ldr	r3, [pc, #380]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a8c:	d106      	bne.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a94:	d102      	bne.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a96:	4b5d      	ldr	r3, [pc, #372]	@ (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9a:	e003      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005aa0:	f000 bc2f 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005aa4:	f000 bc2d 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005aa8:	4b59      	ldr	r3, [pc, #356]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aac:	f000 bc29 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab4:	f000 bc25 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005abc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	f040 80a7 	bne.w	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005ac6:	4b4e      	ldr	r3, [pc, #312]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005ace:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ad6:	d054      	beq.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ade:	f200 808b 	bhi.w	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ae8:	f000 8083 	beq.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005af2:	f200 8081 	bhi.w	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005afc:	d02f      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b04:	d878      	bhi.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b12:	d012      	beq.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005b14:	e070      	b.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b16:	4b3a      	ldr	r3, [pc, #232]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b22:	d107      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 feb5 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b32:	e3e6      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b38:	e3e3      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b3a:	4b31      	ldr	r3, [pc, #196]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b46:	d107      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b48:	f107 0318 	add.w	r3, r7, #24
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fbfb 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b56:	e3d4      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b5c:	e3d1      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b5e:	4b28      	ldr	r3, [pc, #160]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b6c:	f107 030c 	add.w	r3, r7, #12
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fd3d 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b7a:	e3c2      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b80:	e3bf      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b82:	4b1f      	ldr	r3, [pc, #124]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d10c      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d109      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b9e:	4b18      	ldr	r3, [pc, #96]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	08db      	lsrs	r3, r3, #3
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	4a16      	ldr	r2, [pc, #88]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005baa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bb0:	e01e      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bb2:	4b13      	ldr	r3, [pc, #76]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bbe:	d106      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bc6:	d102      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bcc:	e010      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bce:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bda:	d106      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be2:	d102      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005be4:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005bee:	e388      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005bf0:	e387      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005bf2:	4b07      	ldr	r3, [pc, #28]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf6:	e384      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bfc:	e381      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005bfe:	bf00      	nop
 8005c00:	58024400 	.word	0x58024400
 8005c04:	03d09000 	.word	0x03d09000
 8005c08:	003d0900 	.word	0x003d0900
 8005c0c:	02dc6c00 	.word	0x02dc6c00
 8005c10:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c18:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	f040 809c 	bne.w	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005c22:	4b9e      	ldr	r3, [pc, #632]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c26:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005c2a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c32:	d054      	beq.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c3a:	f200 808b 	bhi.w	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c44:	f000 8083 	beq.w	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c4e:	f200 8081 	bhi.w	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c58:	d02f      	beq.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c60:	d878      	bhi.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c6e:	d012      	beq.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005c70:	e070      	b.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c72:	4b8a      	ldr	r3, [pc, #552]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c7e:	d107      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fe07 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c8e:	e338      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c94:	e335      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c96:	4b81      	ldr	r3, [pc, #516]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ca4:	f107 0318 	add.w	r3, r7, #24
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fb4d 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cb2:	e326      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cb8:	e323      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cba:	4b78      	ldr	r3, [pc, #480]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cc6:	d107      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cc8:	f107 030c 	add.w	r3, r7, #12
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fc8f 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cd6:	e314      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cdc:	e311      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cde:	4b6f      	ldr	r3, [pc, #444]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ce6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d10c      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cfa:	4b68      	ldr	r3, [pc, #416]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	08db      	lsrs	r3, r3, #3
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	4a66      	ldr	r2, [pc, #408]	@ (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005d06:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d0c:	e01e      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d0e:	4b63      	ldr	r3, [pc, #396]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d1a:	d106      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d22:	d102      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d24:	4b5f      	ldr	r3, [pc, #380]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d28:	e010      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d2a:	4b5c      	ldr	r3, [pc, #368]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d36:	d106      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8005d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d3e:	d102      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d40:	4b59      	ldr	r3, [pc, #356]	@ (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d44:	e002      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d4a:	e2da      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d4c:	e2d9      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d4e:	4b57      	ldr	r3, [pc, #348]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d52:	e2d6      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d58:	e2d3      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d5e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005d62:	430b      	orrs	r3, r1
 8005d64:	f040 80a7 	bne.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005d68:	4b4c      	ldr	r3, [pc, #304]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d6c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005d70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d78:	d055      	beq.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d80:	f200 8096 	bhi.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d8a:	f000 8084 	beq.w	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d94:	f200 808c 	bhi.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d9e:	d030      	beq.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da6:	f200 8083 	bhi.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005db6:	d012      	beq.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005db8:	e07a      	b.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dba:	4b38      	ldr	r3, [pc, #224]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fd63 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dd6:	e294      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ddc:	e291      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dde:	4b2f      	ldr	r3, [pc, #188]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005de6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dea:	d107      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dec:	f107 0318 	add.w	r3, r7, #24
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 faa9 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dfa:	e282      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e00:	e27f      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e02:	4b26      	ldr	r3, [pc, #152]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e0e:	d107      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e10:	f107 030c 	add.w	r3, r7, #12
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fbeb 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e1e:	e270      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e24:	e26d      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e26:	4b1d      	ldr	r3, [pc, #116]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e30:	4b1a      	ldr	r3, [pc, #104]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d10c      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e42:	4b16      	ldr	r3, [pc, #88]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	08db      	lsrs	r3, r3, #3
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	4a14      	ldr	r2, [pc, #80]	@ (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e54:	e01e      	b.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e56:	4b11      	ldr	r3, [pc, #68]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e62:	d106      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e6a:	d102      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e70:	e010      	b.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e7e:	d106      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e86:	d102      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e88:	4b07      	ldr	r3, [pc, #28]	@ (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e8c:	e002      	b.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e92:	e236      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e94:	e235      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e96:	4b05      	ldr	r3, [pc, #20]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e9a:	e232      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e9c:	58024400 	.word	0x58024400
 8005ea0:	03d09000 	.word	0x03d09000
 8005ea4:	003d0900 	.word	0x003d0900
 8005ea8:	02dc6c00 	.word	0x02dc6c00
 8005eac:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb4:	e225      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eba:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	f040 8085 	bne.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005ec4:	4b9c      	ldr	r3, [pc, #624]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ed4:	d06b      	beq.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005edc:	d874      	bhi.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ee4:	d056      	beq.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eec:	d86c      	bhi.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ef4:	d03b      	beq.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005efc:	d864      	bhi.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f04:	d021      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f0c:	d85c      	bhi.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8005f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1a:	d004      	beq.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8005f1c:	e054      	b.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005f1e:	f7fe fb1d 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8005f22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f24:	e1ed      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f26:	4b84      	ldr	r3, [pc, #528]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f32:	d107      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f34:	f107 0318 	add.w	r3, r7, #24
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fa05 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f42:	e1de      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f48:	e1db      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f56:	d107      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fb47 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f66:	e1cc      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f6c:	e1c9      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f6e:	4b72      	ldr	r3, [pc, #456]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d109      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	08db      	lsrs	r3, r3, #3
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	4a6d      	ldr	r2, [pc, #436]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005f86:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f8c:	e1b9      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f92:	e1b6      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005f94:	4b68      	ldr	r3, [pc, #416]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa0:	d102      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8005fa2:	4b67      	ldr	r3, [pc, #412]	@ (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fa6:	e1ac      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fac:	e1a9      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fae:	4b62      	ldr	r3, [pc, #392]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fba:	d102      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8005fbc:	4b61      	ldr	r3, [pc, #388]	@ (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fc0:	e19f      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fc6:	e19c      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fcc:	e199      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	d173      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005fda:	4b57      	ldr	r3, [pc, #348]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fe2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fea:	d02f      	beq.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff2:	d863      	bhi.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006000:	d012      	beq.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006002:	e05b      	b.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006004:	4b4c      	ldr	r3, [pc, #304]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800600c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006010:	d107      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006012:	f107 0318 	add.w	r3, r7, #24
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f996 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006020:	e16f      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006026:	e16c      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006028:	4b43      	ldr	r3, [pc, #268]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006034:	d107      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006036:	f107 030c 	add.w	r3, r7, #12
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fad8 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006044:	e15d      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800604a:	e15a      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800604c:	4b3a      	ldr	r3, [pc, #232]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800604e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006050:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006054:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006056:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b04      	cmp	r3, #4
 8006060:	d10c      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006068:	4b33      	ldr	r3, [pc, #204]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	08db      	lsrs	r3, r3, #3
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	4a32      	ldr	r2, [pc, #200]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
 8006078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800607a:	e01e      	b.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800607c:	4b2e      	ldr	r3, [pc, #184]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006088:	d106      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800608a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006090:	d102      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006092:	4b2b      	ldr	r3, [pc, #172]	@ (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006096:	e010      	b.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006098:	4b27      	ldr	r3, [pc, #156]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060a4:	d106      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80060a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060ac:	d102      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060ae:	4b25      	ldr	r3, [pc, #148]	@ (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80060b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060b2:	e002      	b.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80060b8:	e123      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80060ba:	e122      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c0:	e11f      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80060c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80060ca:	430b      	orrs	r3, r1
 80060cc:	d13c      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80060ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80060d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80060d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e4:	d012      	beq.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80060e6:	e023      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060e8:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060f4:	d107      	bne.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fbcc 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006104:	e0fd      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800610a:	e0fa      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800610c:	4b0a      	ldr	r3, [pc, #40]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006118:	d107      	bne.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800611a:	f107 0318 	add.w	r3, r7, #24
 800611e:	4618      	mov	r0, r3
 8006120:	f000 f912 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006128:	e0eb      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800612e:	e0e8      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006134:	e0e5      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006136:	bf00      	nop
 8006138:	58024400 	.word	0x58024400
 800613c:	03d09000 	.word	0x03d09000
 8006140:	003d0900 	.word	0x003d0900
 8006144:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800614c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006150:	430b      	orrs	r3, r1
 8006152:	f040 8085 	bne.w	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006156:	4b6d      	ldr	r3, [pc, #436]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800615e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006162:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006166:	d06b      	beq.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800616e:	d874      	bhi.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006176:	d056      	beq.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617e:	d86c      	bhi.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006182:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006186:	d03b      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800618e:	d864      	bhi.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006196:	d021      	beq.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800619e:	d85c      	bhi.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80061a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d004      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80061a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ac:	d004      	beq.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80061ae:	e054      	b.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80061b0:	f000 f8b4 	bl	800631c <HAL_RCCEx_GetD3PCLK1Freq>
 80061b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061b6:	e0a4      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061b8:	4b54      	ldr	r3, [pc, #336]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061c4:	d107      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061c6:	f107 0318 	add.w	r3, r7, #24
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f8bc 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d4:	e095      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061da:	e092      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061dc:	4b4b      	ldr	r3, [pc, #300]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e8:	d107      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ea:	f107 030c 	add.w	r3, r7, #12
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f9fe 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061f8:	e083      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fe:	e080      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006200:	4b42      	ldr	r3, [pc, #264]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d109      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800620c:	4b3f      	ldr	r3, [pc, #252]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	08db      	lsrs	r3, r3, #3
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	4a3e      	ldr	r2, [pc, #248]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
 800621c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800621e:	e070      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006224:	e06d      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006226:	4b39      	ldr	r3, [pc, #228]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800622e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006232:	d102      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006234:	4b37      	ldr	r3, [pc, #220]	@ (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006238:	e063      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800623e:	e060      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006240:	4b32      	ldr	r3, [pc, #200]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800624c:	d102      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800624e:	4b32      	ldr	r3, [pc, #200]	@ (8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006252:	e056      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006258:	e053      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800625a:	2300      	movs	r3, #0
 800625c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800625e:	e050      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006264:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006268:	430b      	orrs	r3, r1
 800626a:	d148      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800626c:	4b27      	ldr	r3, [pc, #156]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800626e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006270:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006274:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800627c:	d02a      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800627e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006284:	d838      	bhi.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800628c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006292:	d00d      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006294:	e030      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006296:	4b1d      	ldr	r3, [pc, #116]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a2:	d102      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80062a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80062a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062a8:	e02b      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ae:	e028      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062b0:	4b16      	ldr	r3, [pc, #88]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062bc:	d107      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fae8 	bl	8006898 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062cc:	e019      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d2:	e016      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062d4:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062e0:	d107      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e2:	f107 0318 	add.w	r3, r7, #24
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 f82e 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062f0:	e007      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062f6:	e004      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062fc:	e001      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006304:	4618      	mov	r0, r3
 8006306:	3740      	adds	r7, #64	@ 0x40
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	58024400 	.word	0x58024400
 8006310:	03d09000 	.word	0x03d09000
 8006314:	003d0900 	.word	0x003d0900
 8006318:	02dc6c00 	.word	0x02dc6c00

0800631c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006320:	f7fe f8ec 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8006324:	4602      	mov	r2, r0
 8006326:	4b06      	ldr	r3, [pc, #24]	@ (8006340 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	091b      	lsrs	r3, r3, #4
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	4904      	ldr	r1, [pc, #16]	@ (8006344 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006332:	5ccb      	ldrb	r3, [r1, r3]
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800633c:	4618      	mov	r0, r3
 800633e:	bd80      	pop	{r7, pc}
 8006340:	58024400 	.word	0x58024400
 8006344:	080107c4 	.word	0x080107c4

08006348 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006348:	b480      	push	{r7}
 800634a:	b089      	sub	sp, #36	@ 0x24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006350:	4ba1      	ldr	r3, [pc, #644]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800635a:	4b9f      	ldr	r3, [pc, #636]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800635c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635e:	0b1b      	lsrs	r3, r3, #12
 8006360:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006364:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006366:	4b9c      	ldr	r3, [pc, #624]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636a:	091b      	lsrs	r3, r3, #4
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006372:	4b99      	ldr	r3, [pc, #612]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8111 	beq.w	80065b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b02      	cmp	r3, #2
 800639a:	f000 8083 	beq.w	80064a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	f200 80a1 	bhi.w	80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d056      	beq.n	8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80063b2:	e099      	b.n	80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b4:	4b88      	ldr	r3, [pc, #544]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d02d      	beq.n	800641c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063c0:	4b85      	ldr	r3, [pc, #532]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	4a84      	ldr	r2, [pc, #528]	@ (80065dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	ee07 3a90 	vmov	s15, r3
 80063d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	4b7b      	ldr	r3, [pc, #492]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80063fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006416:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800641a:	e087      	b.n	800652c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80065e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800642a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642e:	4b6a      	ldr	r3, [pc, #424]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006442:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800645e:	e065      	b.n	800652c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800646e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006472:	4b59      	ldr	r3, [pc, #356]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006482:	ed97 6a03 	vldr	s12, [r7, #12]
 8006486:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800648a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064a2:	e043      	b.n	800652c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80064b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b6:	4b48      	ldr	r3, [pc, #288]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064e6:	e021      	b.n	800652c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fa:	4b37      	ldr	r3, [pc, #220]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650a:	ed97 6a03 	vldr	s12, [r7, #12]
 800650e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80065e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800651e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800652a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800652c:	4b2a      	ldr	r3, [pc, #168]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800652e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006530:	0a5b      	lsrs	r3, r3, #9
 8006532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006546:	edd7 6a07 	vldr	s13, [r7, #28]
 800654a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800654e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006552:	ee17 2a90 	vmov	r2, s15
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800655a:	4b1f      	ldr	r3, [pc, #124]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800655c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800655e:	0c1b      	lsrs	r3, r3, #16
 8006560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006570:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006574:	edd7 6a07 	vldr	s13, [r7, #28]
 8006578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800657c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006580:	ee17 2a90 	vmov	r2, s15
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006588:	4b13      	ldr	r3, [pc, #76]	@ (80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800658a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658c:	0e1b      	lsrs	r3, r3, #24
 800658e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800659e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ae:	ee17 2a90 	vmov	r2, s15
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80065b6:	e008      	b.n	80065ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
}
 80065ca:	bf00      	nop
 80065cc:	3724      	adds	r7, #36	@ 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	03d09000 	.word	0x03d09000
 80065e0:	46000000 	.word	0x46000000
 80065e4:	4c742400 	.word	0x4c742400
 80065e8:	4a742400 	.word	0x4a742400
 80065ec:	4c371b00 	.word	0x4c371b00

080065f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b089      	sub	sp, #36	@ 0x24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065f8:	4ba1      	ldr	r3, [pc, #644]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006602:	4b9f      	ldr	r3, [pc, #636]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	0d1b      	lsrs	r3, r3, #20
 8006608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800660c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800660e:	4b9c      	ldr	r3, [pc, #624]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800661a:	4b99      	ldr	r3, [pc, #612]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	fb02 f303 	mul.w	r3, r2, r3
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8111 	beq.w	8006860 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b02      	cmp	r3, #2
 8006642:	f000 8083 	beq.w	800674c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b02      	cmp	r3, #2
 800664a:	f200 80a1 	bhi.w	8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d056      	beq.n	8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800665a:	e099      	b.n	8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800665c:	4b88      	ldr	r3, [pc, #544]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02d      	beq.n	80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006668:	4b85      	ldr	r3, [pc, #532]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	08db      	lsrs	r3, r3, #3
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	4a84      	ldr	r2, [pc, #528]	@ (8006884 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006674:	fa22 f303 	lsr.w	r3, r2, r3
 8006678:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006692:	4b7b      	ldr	r3, [pc, #492]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80066c2:	e087      	b.n	80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800688c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80066d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006706:	e065      	b.n	80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b59      	ldr	r3, [pc, #356]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	ed97 6a03 	vldr	s12, [r7, #12]
 800672e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800674a:	e043      	b.n	80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006756:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800675a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675e:	4b48      	ldr	r3, [pc, #288]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006772:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800678e:	e021      	b.n	80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800679e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a2:	4b37      	ldr	r3, [pc, #220]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80067d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d8:	0a5b      	lsrs	r3, r3, #9
 80067da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fa:	ee17 2a90 	vmov	r2, s15
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006802:	4b1f      	ldr	r3, [pc, #124]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006814:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800681c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006828:	ee17 2a90 	vmov	r2, s15
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006830:	4b13      	ldr	r3, [pc, #76]	@ (8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006834:	0e1b      	lsrs	r3, r3, #24
 8006836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800684a:	edd7 6a07 	vldr	s13, [r7, #28]
 800684e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006856:	ee17 2a90 	vmov	r2, s15
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800685e:	e008      	b.n	8006872 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	609a      	str	r2, [r3, #8]
}
 8006872:	bf00      	nop
 8006874:	3724      	adds	r7, #36	@ 0x24
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	58024400 	.word	0x58024400
 8006884:	03d09000 	.word	0x03d09000
 8006888:	46000000 	.word	0x46000000
 800688c:	4c742400 	.word	0x4c742400
 8006890:	4a742400 	.word	0x4a742400
 8006894:	4c371b00 	.word	0x4c371b00

08006898 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	@ 0x24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068a0:	4ba0      	ldr	r3, [pc, #640]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80068aa:	4b9e      	ldr	r3, [pc, #632]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	091b      	lsrs	r3, r3, #4
 80068b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80068b6:	4b9b      	ldr	r3, [pc, #620]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80068c0:	4b98      	ldr	r3, [pc, #608]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c4:	08db      	lsrs	r3, r3, #3
 80068c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	fb02 f303 	mul.w	r3, r2, r3
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 8111 	beq.w	8006b06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	f000 8083 	beq.w	80069f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	f200 80a1 	bhi.w	8006a36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d056      	beq.n	80069ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006900:	e099      	b.n	8006a36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006902:	4b88      	ldr	r3, [pc, #544]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d02d      	beq.n	800696a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800690e:	4b85      	ldr	r3, [pc, #532]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	08db      	lsrs	r3, r3, #3
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	4a83      	ldr	r2, [pc, #524]	@ (8006b28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800691a:	fa22 f303 	lsr.w	r3, r2, r3
 800691e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	ee07 3a90 	vmov	s15, r3
 8006930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006938:	4b7a      	ldr	r3, [pc, #488]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006940:	ee07 3a90 	vmov	s15, r3
 8006944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006948:	ed97 6a03 	vldr	s12, [r7, #12]
 800694c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006950:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006954:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006958:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800695c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006964:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006968:	e087      	b.n	8006a7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	ee07 3a90 	vmov	s15, r3
 8006970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006974:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006b30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697c:	4b69      	ldr	r3, [pc, #420]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800697e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006984:	ee07 3a90 	vmov	s15, r3
 8006988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006990:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ac:	e065      	b.n	8006a7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	ee07 3a90 	vmov	s15, r3
 80069b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006b34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80069bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c0:	4b58      	ldr	r3, [pc, #352]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80069d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069f0:	e043      	b.n	8006a7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	ee07 3a90 	vmov	s15, r3
 80069f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006b38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a04:	4b47      	ldr	r3, [pc, #284]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0c:	ee07 3a90 	vmov	s15, r3
 8006a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a18:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a34:	e021      	b.n	8006a7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	ee07 3a90 	vmov	s15, r3
 8006a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a40:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006b30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a48:	4b36      	ldr	r3, [pc, #216]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a58:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a78:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7e:	0a5b      	lsrs	r3, r3, #9
 8006a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa0:	ee17 2a90 	vmov	r2, s15
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ace:	ee17 2a90 	vmov	r2, s15
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006ad6:	4b13      	ldr	r3, [pc, #76]	@ (8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	0e1b      	lsrs	r3, r3, #24
 8006adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afc:	ee17 2a90 	vmov	r2, s15
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006b04:	e008      	b.n	8006b18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	3724      	adds	r7, #36	@ 0x24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	58024400 	.word	0x58024400
 8006b28:	03d09000 	.word	0x03d09000
 8006b2c:	46000000 	.word	0x46000000
 8006b30:	4c742400 	.word	0x4c742400
 8006b34:	4a742400 	.word	0x4a742400
 8006b38:	4c371b00 	.word	0x4c371b00

08006b3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b4a:	4b53      	ldr	r3, [pc, #332]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d101      	bne.n	8006b5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e099      	b.n	8006c8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b66:	f7fb fb8b 	bl	8002280 <HAL_GetTick>
 8006b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b6c:	e008      	b.n	8006b80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b6e:	f7fb fb87 	bl	8002280 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e086      	b.n	8006c8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b80:	4b45      	ldr	r3, [pc, #276]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f0      	bne.n	8006b6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b8c:	4b42      	ldr	r3, [pc, #264]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	031b      	lsls	r3, r3, #12
 8006b9a:	493f      	ldr	r1, [pc, #252]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	025b      	lsls	r3, r3, #9
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	061b      	lsls	r3, r3, #24
 8006bcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bd0:	4931      	ldr	r1, [pc, #196]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006bd6:	4b30      	ldr	r3, [pc, #192]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	492d      	ldr	r1, [pc, #180]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006be8:	4b2b      	ldr	r3, [pc, #172]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	f023 0220 	bic.w	r2, r3, #32
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	4928      	ldr	r1, [pc, #160]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006bfa:	4b27      	ldr	r3, [pc, #156]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	4a26      	ldr	r2, [pc, #152]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c00:	f023 0310 	bic.w	r3, r3, #16
 8006c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c06:	4b24      	ldr	r3, [pc, #144]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c0a:	4b24      	ldr	r3, [pc, #144]	@ (8006c9c <RCCEx_PLL2_Config+0x160>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	69d2      	ldr	r2, [r2, #28]
 8006c12:	00d2      	lsls	r2, r2, #3
 8006c14:	4920      	ldr	r1, [pc, #128]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c20:	f043 0310 	orr.w	r3, r3, #16
 8006c24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d106      	bne.n	8006c3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	4a19      	ldr	r2, [pc, #100]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c38:	e00f      	b.n	8006c5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d106      	bne.n	8006c4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c40:	4b15      	ldr	r3, [pc, #84]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c44:	4a14      	ldr	r2, [pc, #80]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c4c:	e005      	b.n	8006c5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c4e:	4b12      	ldr	r3, [pc, #72]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c52:	4a11      	ldr	r2, [pc, #68]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c66:	f7fb fb0b 	bl	8002280 <HAL_GetTick>
 8006c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c6c:	e008      	b.n	8006c80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c6e:	f7fb fb07 	bl	8002280 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e006      	b.n	8006c8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c80:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <RCCEx_PLL2_Config+0x15c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0f0      	beq.n	8006c6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	ffff0007 	.word	0xffff0007

08006ca0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cae:	4b53      	ldr	r3, [pc, #332]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d101      	bne.n	8006cbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e099      	b.n	8006df2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006cbe:	4b4f      	ldr	r3, [pc, #316]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a4e      	ldr	r2, [pc, #312]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cca:	f7fb fad9 	bl	8002280 <HAL_GetTick>
 8006cce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006cd0:	e008      	b.n	8006ce4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006cd2:	f7fb fad5 	bl	8002280 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e086      	b.n	8006df2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ce4:	4b45      	ldr	r3, [pc, #276]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f0      	bne.n	8006cd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006cf0:	4b42      	ldr	r3, [pc, #264]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	051b      	lsls	r3, r3, #20
 8006cfe:	493f      	ldr	r1, [pc, #252]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	025b      	lsls	r3, r3, #9
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	061b      	lsls	r3, r3, #24
 8006d30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d34:	4931      	ldr	r1, [pc, #196]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d3a:	4b30      	ldr	r3, [pc, #192]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	492d      	ldr	r1, [pc, #180]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d50:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	4928      	ldr	r1, [pc, #160]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d5e:	4b27      	ldr	r3, [pc, #156]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d62:	4a26      	ldr	r2, [pc, #152]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006d6a:	4b24      	ldr	r3, [pc, #144]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d6e:	4b24      	ldr	r3, [pc, #144]	@ (8006e00 <RCCEx_PLL3_Config+0x160>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	69d2      	ldr	r2, [r2, #28]
 8006d76:	00d2      	lsls	r2, r2, #3
 8006d78:	4920      	ldr	r1, [pc, #128]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d82:	4a1e      	ldr	r2, [pc, #120]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d106      	bne.n	8006d9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d90:	4b1a      	ldr	r3, [pc, #104]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d94:	4a19      	ldr	r2, [pc, #100]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006d96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d9c:	e00f      	b.n	8006dbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d106      	bne.n	8006db2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006da4:	4b15      	ldr	r3, [pc, #84]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da8:	4a14      	ldr	r2, [pc, #80]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006daa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006dae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006db0:	e005      	b.n	8006dbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006db2:	4b12      	ldr	r3, [pc, #72]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	4a11      	ldr	r2, [pc, #68]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006db8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dca:	f7fb fa59 	bl	8002280 <HAL_GetTick>
 8006dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006dd0:	e008      	b.n	8006de4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006dd2:	f7fb fa55 	bl	8002280 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e006      	b.n	8006df2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006de4:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <RCCEx_PLL3_Config+0x15c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f0      	beq.n	8006dd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	ffff0007 	.word	0xffff0007

08006e04 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d071      	beq.n	8006efa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fa fcb0 	bl	8001790 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	2b10      	cmp	r3, #16
 8006e44:	d050      	beq.n	8006ee8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	22ca      	movs	r2, #202	@ 0xca
 8006e4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2253      	movs	r2, #83	@ 0x53
 8006e54:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9a0 	bl	800719c <RTC_EnterInitMode>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d124      	bne.n	8006eb0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6899      	ldr	r1, [r3, #8]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	4b24      	ldr	r3, [pc, #144]	@ (8006f04 <HAL_RTC_Init+0x100>)
 8006e72:	400b      	ands	r3, r1
 8006e74:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6899      	ldr	r1, [r3, #8]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	0419      	lsls	r1, r3, #16
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f9ac 	bl	8007204 <RTC_ExitInitMode>
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d113      	bne.n	8006ede <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0203 	bic.w	r2, r2, #3
 8006ec4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	22ff      	movs	r2, #255	@ 0xff
 8006ee4:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ee6:	e001      	b.n	8006eec <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	ff8fffbf 	.word	0xff8fffbf

08006f08 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_RTC_SetTime+0x1a>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e089      	b.n	8007036 <HAL_RTC_SetTime+0x12e>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	22ca      	movs	r2, #202	@ 0xca
 8006f38:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2253      	movs	r2, #83	@ 0x53
 8006f40:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f92a 	bl	800719c <RTC_EnterInitMode>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006f4c:	7cfb      	ldrb	r3, [r7, #19]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d161      	bne.n	8007016 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d126      	bne.n	8006fa6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 f985 	bl	8007280 <RTC_ByteToBcd2>
 8006f76:	4603      	mov	r3, r0
 8006f78:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 f97e 	bl	8007280 <RTC_ByteToBcd2>
 8006f84:	4603      	mov	r3, r0
 8006f86:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f88:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	789b      	ldrb	r3, [r3, #2]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 f976 	bl	8007280 <RTC_ByteToBcd2>
 8006f94:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f96:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	78db      	ldrb	r3, [r3, #3]
 8006f9e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e018      	b.n	8006fd8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fc6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fcc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	78db      	ldrb	r3, [r3, #3]
 8006fd2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	6979      	ldr	r1, [r7, #20]
 8006fde:	4b18      	ldr	r3, [pc, #96]	@ (8007040 <HAL_RTC_SetTime+0x138>)
 8006fe0:	400b      	ands	r3, r1
 8006fe2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ff2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6899      	ldr	r1, [r3, #8]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	431a      	orrs	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f8f9 	bl	8007204 <RTC_ExitInitMode>
 8007012:	4603      	mov	r3, r0
 8007014:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	22ff      	movs	r2, #255	@ 0xff
 800701c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800701e:	7cfb      	ldrb	r3, [r7, #19]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007034:	7cfb      	ldrb	r3, [r7, #19]
}
 8007036:	4618      	mov	r0, r3
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	bd90      	pop	{r4, r7, pc}
 800703e:	bf00      	nop
 8007040:	007f7f7f 	.word	0x007f7f7f

08007044 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007044:	b590      	push	{r4, r7, lr}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_RTC_SetDate+0x1a>
 800705a:	2302      	movs	r3, #2
 800705c:	e073      	b.n	8007146 <HAL_RTC_SetDate+0x102>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2202      	movs	r2, #2
 800706a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10e      	bne.n	8007092 <HAL_RTC_SetDate+0x4e>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b00      	cmp	r3, #0
 800707e:	d008      	beq.n	8007092 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	f023 0310 	bic.w	r3, r3, #16
 8007088:	b2db      	uxtb	r3, r3
 800708a:	330a      	adds	r3, #10
 800708c:	b2da      	uxtb	r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d11c      	bne.n	80070d2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	78db      	ldrb	r3, [r3, #3]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 f8ef 	bl	8007280 <RTC_ByteToBcd2>
 80070a2:	4603      	mov	r3, r0
 80070a4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f8e8 	bl	8007280 <RTC_ByteToBcd2>
 80070b0:	4603      	mov	r3, r0
 80070b2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80070b4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	789b      	ldrb	r3, [r3, #2]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 f8e0 	bl	8007280 <RTC_ByteToBcd2>
 80070c0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80070c2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80070cc:	4313      	orrs	r3, r2
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e00e      	b.n	80070f0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	78db      	ldrb	r3, [r3, #3]
 80070d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070de:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80070e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	22ca      	movs	r2, #202	@ 0xca
 80070f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2253      	movs	r2, #83	@ 0x53
 80070fe:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f84b 	bl	800719c <RTC_EnterInitMode>
 8007106:	4603      	mov	r3, r0
 8007108:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800710a:	7cfb      	ldrb	r3, [r7, #19]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	6979      	ldr	r1, [r7, #20]
 8007116:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <HAL_RTC_SetDate+0x10c>)
 8007118:	400b      	ands	r3, r1
 800711a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f871 	bl	8007204 <RTC_ExitInitMode>
 8007122:	4603      	mov	r3, r0
 8007124:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	22ff      	movs	r2, #255	@ 0xff
 800712c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800712e:	7cfb      	ldrb	r3, [r7, #19]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007144:	7cfb      	ldrb	r3, [r7, #19]


}
 8007146:	4618      	mov	r0, r3
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	bd90      	pop	{r4, r7, pc}
 800714e:	bf00      	nop
 8007150:	00ffff3f 	.word	0x00ffff3f

08007154 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a0d      	ldr	r2, [pc, #52]	@ (8007198 <HAL_RTC_WaitForSynchro+0x44>)
 8007162:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007164:	f7fb f88c 	bl	8002280 <HAL_GetTick>
 8007168:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800716a:	e009      	b.n	8007180 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800716c:	f7fb f888 	bl	8002280 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800717a:	d901      	bls.n	8007180 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e007      	b.n	8007190 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0ee      	beq.n	800716c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	0003ff5f 	.word	0x0003ff5f

0800719c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d120      	bne.n	80071f8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80071c0:	f7fb f85e 	bl	8002280 <HAL_GetTick>
 80071c4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071c6:	e00d      	b.n	80071e4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80071c8:	f7fb f85a 	bl	8002280 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071d6:	d905      	bls.n	80071e4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2203      	movs	r2, #3
 80071e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d102      	bne.n	80071f8 <RTC_EnterInitMode+0x5c>
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d1e7      	bne.n	80071c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007210:	4b1a      	ldr	r3, [pc, #104]	@ (800727c <RTC_ExitInitMode+0x78>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	4a19      	ldr	r2, [pc, #100]	@ (800727c <RTC_ExitInitMode+0x78>)
 8007216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800721a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800721c:	4b17      	ldr	r3, [pc, #92]	@ (800727c <RTC_ExitInitMode+0x78>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10c      	bne.n	8007242 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff ff93 	bl	8007154 <HAL_RTC_WaitForSynchro>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01e      	beq.n	8007272 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2203      	movs	r2, #3
 8007238:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	73fb      	strb	r3, [r7, #15]
 8007240:	e017      	b.n	8007272 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007242:	4b0e      	ldr	r3, [pc, #56]	@ (800727c <RTC_ExitInitMode+0x78>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	4a0d      	ldr	r2, [pc, #52]	@ (800727c <RTC_ExitInitMode+0x78>)
 8007248:	f023 0320 	bic.w	r3, r3, #32
 800724c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff ff80 	bl	8007154 <HAL_RTC_WaitForSynchro>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2203      	movs	r2, #3
 800725e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007266:	4b05      	ldr	r3, [pc, #20]	@ (800727c <RTC_ExitInitMode+0x78>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	4a04      	ldr	r2, [pc, #16]	@ (800727c <RTC_ExitInitMode+0x78>)
 800726c:	f043 0320 	orr.w	r3, r3, #32
 8007270:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	58004000 	.word	0x58004000

08007280 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007292:	e005      	b.n	80072a0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3301      	adds	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800729a:	7afb      	ldrb	r3, [r7, #11]
 800729c:	3b0a      	subs	r3, #10
 800729e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	2b09      	cmp	r3, #9
 80072a4:	d8f6      	bhi.n	8007294 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	b2db      	uxtb	r3, r3
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	@ 0x28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e075      	b.n	80073be <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d105      	bne.n	80072ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7fa fa85 	bl	80017f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2204      	movs	r2, #4
 80072ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f868 	bl	80073c8 <HAL_SD_InitCard>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e05d      	b.n	80073be <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007302:	f107 0308 	add.w	r3, r7, #8
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fdaf 	bl	8007e6c <HAL_SD_GetCardStatus>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e052      	b.n	80073be <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007318:	7e3b      	ldrb	r3, [r7, #24]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800731e:	7e7b      	ldrb	r3, [r7, #25]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007328:	2b01      	cmp	r3, #1
 800732a:	d10a      	bne.n	8007342 <HAL_SD_Init+0x82>
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d102      	bne.n	8007338 <HAL_SD_Init+0x78>
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d004      	beq.n	8007342 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800733e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007340:	e00b      	b.n	800735a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	2b01      	cmp	r3, #1
 8007348:	d104      	bne.n	8007354 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007350:	659a      	str	r2, [r3, #88]	@ 0x58
 8007352:	e002      	b.n	800735a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fe6d 	bl	8008040 <HAL_SD_ConfigWideBusOperation>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e026      	b.n	80073be <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007370:	f7fa ff86 	bl	8002280 <HAL_GetTick>
 8007374:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007376:	e011      	b.n	800739c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007378:	f7fa ff82 	bl	8002280 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007386:	d109      	bne.n	800739c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800738e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e010      	b.n	80073be <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 ff61 	bl	8008264 <HAL_SD_GetCardState>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d1e7      	bne.n	8007378 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3728      	adds	r7, #40	@ 0x28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b08d      	sub	sp, #52	@ 0x34
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80073d8:	2300      	movs	r3, #0
 80073da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80073dc:	2300      	movs	r3, #0
 80073de:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80073e0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80073e4:	f04f 0100 	mov.w	r1, #0
 80073e8:	f7fe fac6 	bl	8005978 <HAL_RCCEx_GetPeriphCLKFreq>
 80073ec:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d109      	bne.n	8007408 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007402:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e070      	b.n	80074ea <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	0a1b      	lsrs	r3, r3, #8
 800740c:	4a39      	ldr	r2, [pc, #228]	@ (80074f4 <HAL_SD_InitCard+0x12c>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	091b      	lsrs	r3, r3, #4
 8007414:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681c      	ldr	r4, [r3, #0]
 800741a:	466a      	mov	r2, sp
 800741c:	f107 0318 	add.w	r3, r7, #24
 8007420:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007424:	e882 0003 	stmia.w	r2, {r0, r1}
 8007428:	f107 030c 	add.w	r3, r7, #12
 800742c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800742e:	4620      	mov	r0, r4
 8007430:	f003 fe7a 	bl	800b128 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f003 febd 	bl	800b1b8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800744a:	fbb2 f3f3 	udiv	r3, r2, r3
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007456:	4a28      	ldr	r2, [pc, #160]	@ (80074f8 <HAL_SD_InitCard+0x130>)
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	fbb2 f3f3 	udiv	r3, r2, r3
 800745e:	3301      	adds	r3, #1
 8007460:	4618      	mov	r0, r3
 8007462:	f7fa ff19 	bl	8002298 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 ffea 	bl	8008440 <SD_PowerON>
 800746c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e02e      	b.n	80074ea <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 ff09 	bl	80082a4 <SD_InitCard>
 8007492:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e01b      	b.n	80074ea <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80074ba:	4618      	mov	r0, r3
 80074bc:	f003 ff12 	bl	800b2e4 <SDMMC_CmdBlockLength>
 80074c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00f      	beq.n	80074e8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a0b      	ldr	r2, [pc, #44]	@ (80074fc <HAL_SD_InitCard+0x134>)
 80074ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	372c      	adds	r7, #44	@ 0x2c
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd90      	pop	{r4, r7, pc}
 80074f2:	bf00      	nop
 80074f4:	014f8b59 	.word	0x014f8b59
 80074f8:	00012110 	.word	0x00012110
 80074fc:	1fe00fff 	.word	0x1fe00fff

08007500 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08c      	sub	sp, #48	@ 0x30
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d107      	bne.n	8007528 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e08d      	b.n	8007644 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b01      	cmp	r3, #1
 8007532:	f040 8086 	bne.w	8007642 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800753c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007546:	429a      	cmp	r2, r3
 8007548:	d907      	bls.n	800755a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800754e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e074      	b.n	8007644 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2203      	movs	r2, #3
 800755e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	025a      	lsls	r2, r3, #9
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757c:	2b01      	cmp	r3, #1
 800757e:	d002      	beq.n	8007586 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007582:	025b      	lsls	r3, r3, #9
 8007584:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800758a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	025b      	lsls	r3, r3, #9
 8007590:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007592:	2390      	movs	r3, #144	@ 0x90
 8007594:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007596:	2302      	movs	r3, #2
 8007598:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800759a:	2300      	movs	r3, #0
 800759c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800759e:	2300      	movs	r3, #0
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f107 0210 	add.w	r2, r7, #16
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f003 fe6d 	bl	800b28c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075c0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2201      	movs	r2, #1
 80075d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d90a      	bls.n	80075ee <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2282      	movs	r2, #130	@ 0x82
 80075dc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075e4:	4618      	mov	r0, r3
 80075e6:	f003 fec3 	bl	800b370 <SDMMC_CmdReadMultiBlock>
 80075ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80075ec:	e009      	b.n	8007602 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2281      	movs	r2, #129	@ 0x81
 80075f2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075fa:	4618      	mov	r0, r3
 80075fc:	f003 fe95 	bl	800b32a <SDMMC_CmdReadSingleBlock>
 8007600:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d012      	beq.n	800762e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a0f      	ldr	r2, [pc, #60]	@ (800764c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800760e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007616:	431a      	orrs	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e00a      	b.n	8007644 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800763c:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	e000      	b.n	8007644 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007642:	2302      	movs	r3, #2
  }
}
 8007644:	4618      	mov	r0, r3
 8007646:	3730      	adds	r7, #48	@ 0x30
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	1fe00fff 	.word	0x1fe00fff

08007650 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08c      	sub	sp, #48	@ 0x30
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d107      	bne.n	8007678 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e08d      	b.n	8007794 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b01      	cmp	r3, #1
 8007682:	f040 8086 	bne.w	8007792 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800768c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	441a      	add	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007696:	429a      	cmp	r2, r3
 8007698:	d907      	bls.n	80076aa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e074      	b.n	8007794 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2203      	movs	r2, #3
 80076ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2200      	movs	r2, #0
 80076b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	025a      	lsls	r2, r3, #9
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d002      	beq.n	80076d6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80076d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d2:	025b      	lsls	r3, r3, #9
 80076d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076da:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	025b      	lsls	r3, r3, #9
 80076e0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80076e2:	2390      	movs	r3, #144	@ 0x90
 80076e4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80076e6:	2300      	movs	r3, #0
 80076e8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f107 0210 	add.w	r2, r7, #16
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f003 fdc5 	bl	800b28c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007710:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2201      	movs	r2, #1
 8007720:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d90a      	bls.n	800773e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	22a0      	movs	r2, #160	@ 0xa0
 800772c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007734:	4618      	mov	r0, r3
 8007736:	f003 fe61 	bl	800b3fc <SDMMC_CmdWriteMultiBlock>
 800773a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800773c:	e009      	b.n	8007752 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2290      	movs	r2, #144	@ 0x90
 8007742:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800774a:	4618      	mov	r0, r3
 800774c:	f003 fe33 	bl	800b3b6 <SDMMC_CmdWriteSingleBlock>
 8007750:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d012      	beq.n	800777e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a0f      	ldr	r2, [pc, #60]	@ (800779c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800775e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	431a      	orrs	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e00a      	b.n	8007794 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800778c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	e000      	b.n	8007794 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007792:	2302      	movs	r3, #2
  }
}
 8007794:	4618      	mov	r0, r3
 8007796:	3730      	adds	r7, #48	@ 0x30
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	1fe00fff 	.word	0x1fe00fff

080077a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d008      	beq.n	80077ce <HAL_SD_IRQHandler+0x2e>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 f926 	bl	8008a18 <SD_Read_IT>
 80077cc:	e19a      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80ac 	beq.w	8007936 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077e6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	4b59      	ldr	r3, [pc, #356]	@ (8007958 <HAL_SD_IRQHandler+0x1b8>)
 80077f4:	400b      	ands	r3, r1
 80077f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007806:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007816:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d038      	beq.n	8007894 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d104      	bne.n	8007836 <HAL_SD_IRQHandler+0x96>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d011      	beq.n	800785a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f003 fe02 	bl	800b444 <SDMMC_CmdStopTransfer>
 8007840:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d008      	beq.n	800785a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f95b 	bl	8007b10 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a3f      	ldr	r2, [pc, #252]	@ (800795c <HAL_SD_IRQHandler+0x1bc>)
 8007860:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d104      	bne.n	8007884 <HAL_SD_IRQHandler+0xe4>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f004 faad 	bl	800bde4 <HAL_SD_RxCpltCallback>
 800788a:	e13b      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f004 fa9f 	bl	800bdd0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007892:	e137      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 8132 	beq.w	8007b04 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2200      	movs	r2, #0
 80078a6:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2200      	movs	r2, #0
 80078b6:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <HAL_SD_IRQHandler+0x12c>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d011      	beq.n	80078f0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f003 fdb7 	bl	800b444 <SDMMC_CmdStopTransfer>
 80078d6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f910 	bl	8007b10 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <HAL_SD_IRQHandler+0x172>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f004 fa5c 	bl	800bdd0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d105      	bne.n	800792e <HAL_SD_IRQHandler+0x18e>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 80eb 	beq.w	8007b04 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f004 fa58 	bl	800bde4 <HAL_SD_RxCpltCallback>
}
 8007934:	e0e6      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800793c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00d      	beq.n	8007960 <HAL_SD_IRQHandler+0x1c0>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d008      	beq.n	8007960 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 f8a8 	bl	8008aa4 <SD_Write_IT>
 8007954:	e0d6      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
 8007956:	bf00      	nop
 8007958:	ffff3ec5 	.word	0xffff3ec5
 800795c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007966:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 809d 	beq.w	8007aaa <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007982:	f043 0202 	orr.w	r2, r3, #2
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d005      	beq.n	80079a4 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800799c:	f043 0208 	orr.w	r2, r3, #8
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d005      	beq.n	80079be <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b6:	f043 0220 	orr.w	r2, r3, #32
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d0:	f043 0210 	orr.w	r2, r3, #16
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a4b      	ldr	r2, [pc, #300]	@ (8007b0c <HAL_SD_IRQHandler+0x36c>)
 80079de:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80079ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079fe:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a1e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f003 fd0d 	bl	800b444 <SDMMC_CmdStopTransfer>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a44:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a4e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f851 	bl	8007b10 <HAL_SD_ErrorCallback>
}
 8007a6e:	e049      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d044      	beq.n	8007b04 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d040      	beq.n	8007b04 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007a90:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2200      	movs	r2, #0
 8007a98:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f834 	bl	8007b10 <HAL_SD_ErrorCallback>
}
 8007aa8:	e02c      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d025      	beq.n	8007b04 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ac0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10c      	bne.n	8007aea <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 f84a 	bl	8008b74 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007ae0:	e010      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 f832 	bl	8008b4c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007ae8:	e00c      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 f833 	bl	8008b60 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007afa:	e003      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f81b 	bl	8008b38 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007b02:	e7ff      	b.n	8007b04 <HAL_SD_IRQHandler+0x364>
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	18000f3a 	.word	0x18000f3a

08007b10 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b32:	0f9b      	lsrs	r3, r3, #30
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b3e:	0e9b      	lsrs	r3, r3, #26
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 030f 	and.w	r3, r3, #15
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b50:	0e1b      	lsrs	r3, r3, #24
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b62:	0c1b      	lsrs	r3, r3, #16
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b84:	0d1b      	lsrs	r3, r3, #20
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b90:	0c1b      	lsrs	r3, r3, #16
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba2:	0bdb      	lsrs	r3, r3, #15
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bb4:	0b9b      	lsrs	r3, r3, #14
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bc6:	0b5b      	lsrs	r3, r3, #13
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bd8:	0b1b      	lsrs	r3, r3, #12
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2200      	movs	r2, #0
 8007bea:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d163      	bne.n	8007cbc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bf8:	009a      	lsls	r2, r3, #2
 8007bfa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007bfe:	4013      	ands	r3, r2
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007c04:	0f92      	lsrs	r2, r2, #30
 8007c06:	431a      	orrs	r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c10:	0edb      	lsrs	r3, r3, #27
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 0307 	and.w	r3, r3, #7
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c22:	0e1b      	lsrs	r3, r3, #24
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c34:	0d5b      	lsrs	r3, r3, #21
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c46:	0c9b      	lsrs	r3, r3, #18
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c58:	0bdb      	lsrs	r3, r3, #15
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	7e1b      	ldrb	r3, [r3, #24]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	3302      	adds	r3, #2
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007c86:	fb03 f202 	mul.w	r2, r3, r2
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	7a1b      	ldrb	r3, [r3, #8]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	2201      	movs	r2, #1
 8007c9a:	409a      	lsls	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007ca8:	0a52      	lsrs	r2, r2, #9
 8007caa:	fb03 f202 	mul.w	r2, r3, r2
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cb8:	655a      	str	r2, [r3, #84]	@ 0x54
 8007cba:	e031      	b.n	8007d20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d11d      	bne.n	8007d00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc8:	041b      	lsls	r3, r3, #16
 8007cca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cd2:	0c1b      	lsrs	r3, r3, #16
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	029a      	lsls	r2, r3, #10
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	655a      	str	r2, [r3, #84]	@ 0x54
 8007cfe:	e00f      	b.n	8007d20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a58      	ldr	r2, [pc, #352]	@ (8007e68 <HAL_SD_GetCardCSD+0x344>)
 8007d06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e09d      	b.n	8007e5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d24:	0b9b      	lsrs	r3, r3, #14
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d36:	09db      	lsrs	r3, r3, #7
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d58:	0fdb      	lsrs	r3, r3, #31
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d64:	0f5b      	lsrs	r3, r3, #29
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f003 0303 	and.w	r3, r3, #3
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d76:	0e9b      	lsrs	r3, r3, #26
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d88:	0d9b      	lsrs	r3, r3, #22
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d9a:	0d5b      	lsrs	r3, r3, #21
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dca:	0bdb      	lsrs	r3, r3, #15
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dde:	0b9b      	lsrs	r3, r3, #14
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007df2:	0b5b      	lsrs	r3, r3, #13
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e06:	0b1b      	lsrs	r3, r3, #12
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e1a:	0a9b      	lsrs	r3, r3, #10
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e2e:	0a1b      	lsrs	r3, r3, #8
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e42:	085b      	lsrs	r3, r3, #1
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	1fe00fff 	.word	0x1fe00fff

08007e6c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b094      	sub	sp, #80	@ 0x50
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d101      	bne.n	8007e8c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e0a7      	b.n	8007fdc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fb62 	bl	800855c <SD_SendSDStatus>
 8007e98:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d011      	beq.n	8007ec4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a4f      	ldr	r2, [pc, #316]	@ (8007fe4 <HAL_SD_GetCardStatus+0x178>)
 8007ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007ec2:	e070      	b.n	8007fa6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	099b      	lsrs	r3, r3, #6
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	0a1b      	lsrs	r3, r3, #8
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	0e1b      	lsrs	r3, r3, #24
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	061a      	lsls	r2, r3, #24
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f0a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f14:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	0e1b      	lsrs	r3, r3, #24
 8007f1a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	0d1b      	lsrs	r3, r3, #20
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	4313      	orrs	r3, r2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	0a9b      	lsrs	r3, r3, #10
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	0a1b      	lsrs	r3, r3, #8
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	091b      	lsrs	r3, r3, #4
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	0e1b      	lsrs	r3, r3, #24
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f003 f998 	bl	800b2e4 <SDMMC_CmdBlockLength>
 8007fb4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00d      	beq.n	8007fd8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a08      	ldr	r2, [pc, #32]	@ (8007fe4 <HAL_SD_GetCardStatus+0x178>)
 8007fc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fc8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8007fd8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3750      	adds	r7, #80	@ 0x50
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	1fe00fff 	.word	0x1fe00fff

08007fe8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008040:	b590      	push	{r4, r7, lr}
 8008042:	b08d      	sub	sp, #52	@ 0x34
 8008044:	af02      	add	r7, sp, #8
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2203      	movs	r2, #3
 8008054:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	2b03      	cmp	r3, #3
 800805e:	d02e      	beq.n	80080be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008066:	d106      	bne.n	8008076 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800806c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	635a      	str	r2, [r3, #52]	@ 0x34
 8008074:	e029      	b.n	80080ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800807c:	d10a      	bne.n	8008094 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fb64 	bl	800874c <SD_WideBus_Enable>
 8008084:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	635a      	str	r2, [r3, #52]	@ 0x34
 8008092:	e01a      	b.n	80080ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fba1 	bl	80087e2 <SD_WideBus_Disable>
 80080a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80080ae:	e00c      	b.n	80080ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80080bc:	e005      	b.n	80080ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a5f      	ldr	r2, [pc, #380]	@ (8008254 <HAL_SD_ConfigWideBusOperation+0x214>)
 80080d8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80080e0:	e096      	b.n	8008210 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80080e2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80080e6:	f04f 0100 	mov.w	r1, #0
 80080ea:	f7fd fc45 	bl	8005978 <HAL_RCCEx_GetPeriphCLKFreq>
 80080ee:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 8083 	beq.w	80081fe <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695a      	ldr	r2, [r3, #20]
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	4950      	ldr	r1, [pc, #320]	@ (8008258 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008116:	fba1 1303 	umull	r1, r3, r1, r3
 800811a:	0e1b      	lsrs	r3, r3, #24
 800811c:	429a      	cmp	r2, r3
 800811e:	d303      	bcc.n	8008128 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	61bb      	str	r3, [r7, #24]
 8008126:	e05a      	b.n	80081de <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800812c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008130:	d103      	bne.n	800813a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	61bb      	str	r3, [r7, #24]
 8008138:	e051      	b.n	80081de <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800813e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008142:	d126      	bne.n	8008192 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10e      	bne.n	800816a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	4a43      	ldr	r2, [pc, #268]	@ (800825c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d906      	bls.n	8008162 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4a40      	ldr	r2, [pc, #256]	@ (8008258 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008158:	fba2 2303 	umull	r2, r3, r2, r3
 800815c:	0e5b      	lsrs	r3, r3, #25
 800815e:	61bb      	str	r3, [r7, #24]
 8008160:	e03d      	b.n	80081de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	e039      	b.n	80081de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	4a39      	ldr	r2, [pc, #228]	@ (800825c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d906      	bls.n	800818a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4a36      	ldr	r2, [pc, #216]	@ (8008258 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008180:	fba2 2303 	umull	r2, r3, r2, r3
 8008184:	0e5b      	lsrs	r3, r3, #25
 8008186:	61bb      	str	r3, [r7, #24]
 8008188:	e029      	b.n	80081de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	61bb      	str	r3, [r7, #24]
 8008190:	e025      	b.n	80081de <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10e      	bne.n	80081b8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	4a30      	ldr	r2, [pc, #192]	@ (8008260 <HAL_SD_ConfigWideBusOperation+0x220>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d906      	bls.n	80081b0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4a2c      	ldr	r2, [pc, #176]	@ (8008258 <HAL_SD_ConfigWideBusOperation+0x218>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	0e1b      	lsrs	r3, r3, #24
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	e016      	b.n	80081de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	61bb      	str	r3, [r7, #24]
 80081b6:	e012      	b.n	80081de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c4:	4a26      	ldr	r2, [pc, #152]	@ (8008260 <HAL_SD_ConfigWideBusOperation+0x220>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d906      	bls.n	80081d8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4a22      	ldr	r2, [pc, #136]	@ (8008258 <HAL_SD_ConfigWideBusOperation+0x218>)
 80081ce:	fba2 2303 	umull	r2, r3, r2, r3
 80081d2:	0e1b      	lsrs	r3, r3, #24
 80081d4:	61bb      	str	r3, [r7, #24]
 80081d6:	e002      	b.n	80081de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681c      	ldr	r4, [r3, #0]
 80081e2:	466a      	mov	r2, sp
 80081e4:	f107 0314 	add.w	r3, r7, #20
 80081e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80081ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80081f0:	f107 0308 	add.w	r3, r7, #8
 80081f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081f6:	4620      	mov	r0, r4
 80081f8:	f002 ff96 	bl	800b128 <SDMMC_Init>
 80081fc:	e008      	b.n	8008210 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008202:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008218:	4618      	mov	r0, r3
 800821a:	f003 f863 	bl	800b2e4 <SDMMC_CmdBlockLength>
 800821e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00c      	beq.n	8008240 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a0a      	ldr	r2, [pc, #40]	@ (8008254 <HAL_SD_ConfigWideBusOperation+0x214>)
 800822c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800824c:	4618      	mov	r0, r3
 800824e:	372c      	adds	r7, #44	@ 0x2c
 8008250:	46bd      	mov	sp, r7
 8008252:	bd90      	pop	{r4, r7, pc}
 8008254:	1fe00fff 	.word	0x1fe00fff
 8008258:	55e63b89 	.word	0x55e63b89
 800825c:	02faf080 	.word	0x02faf080
 8008260:	017d7840 	.word	0x017d7840

08008264 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008270:	f107 030c 	add.w	r3, r7, #12
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa40 	bl	80086fc <SD_SendStatus>
 800827c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	0a5b      	lsrs	r3, r3, #9
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800829a:	693b      	ldr	r3, [r7, #16]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3718      	adds	r7, #24
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b090      	sub	sp, #64	@ 0x40
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80082b0:	f7f9 ffe6 	bl	8002280 <HAL_GetTick>
 80082b4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f002 ff8d 	bl	800b1da <SDMMC_GetPowerState>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d102      	bne.n	80082cc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80082ca:	e0b5      	b.n	8008438 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d02e      	beq.n	8008332 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	f003 f9d8 	bl	800b68e <SDMMC_CmdSendCID>
 80082de:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80082e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <SD_InitCard+0x46>
    {
      return errorstate;
 80082e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e8:	e0a6      	b.n	8008438 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2100      	movs	r1, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f002 ffb8 	bl	800b266 <SDMMC_GetResponse>
 80082f6:	4602      	mov	r2, r0
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2104      	movs	r1, #4
 8008302:	4618      	mov	r0, r3
 8008304:	f002 ffaf 	bl	800b266 <SDMMC_GetResponse>
 8008308:	4602      	mov	r2, r0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2108      	movs	r1, #8
 8008314:	4618      	mov	r0, r3
 8008316:	f002 ffa6 	bl	800b266 <SDMMC_GetResponse>
 800831a:	4602      	mov	r2, r0
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	210c      	movs	r1, #12
 8008326:	4618      	mov	r0, r3
 8008328:	f002 ff9d 	bl	800b266 <SDMMC_GetResponse>
 800832c:	4602      	mov	r2, r0
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008336:	2b03      	cmp	r3, #3
 8008338:	d01d      	beq.n	8008376 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800833a:	e019      	b.n	8008370 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f107 020a 	add.w	r2, r7, #10
 8008344:	4611      	mov	r1, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f003 f9e0 	bl	800b70c <SDMMC_CmdSetRelAdd>
 800834c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008356:	e06f      	b.n	8008438 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008358:	f7f9 ff92 	bl	8002280 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008366:	4293      	cmp	r3, r2
 8008368:	d902      	bls.n	8008370 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800836a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800836e:	e063      	b.n	8008438 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008370:	897b      	ldrh	r3, [r7, #10]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0e2      	beq.n	800833c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837a:	2b03      	cmp	r3, #3
 800837c:	d036      	beq.n	80083ec <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800837e:	897b      	ldrh	r3, [r7, #10]
 8008380:	461a      	mov	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838e:	041b      	lsls	r3, r3, #16
 8008390:	4619      	mov	r1, r3
 8008392:	4610      	mov	r0, r2
 8008394:	f003 f99a 	bl	800b6cc <SDMMC_CmdSendCSD>
 8008398:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <SD_InitCard+0x100>
    {
      return errorstate;
 80083a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a2:	e049      	b.n	8008438 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2100      	movs	r1, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f002 ff5b 	bl	800b266 <SDMMC_GetResponse>
 80083b0:	4602      	mov	r2, r0
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2104      	movs	r1, #4
 80083bc:	4618      	mov	r0, r3
 80083be:	f002 ff52 	bl	800b266 <SDMMC_GetResponse>
 80083c2:	4602      	mov	r2, r0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2108      	movs	r1, #8
 80083ce:	4618      	mov	r0, r3
 80083d0:	f002 ff49 	bl	800b266 <SDMMC_GetResponse>
 80083d4:	4602      	mov	r2, r0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	210c      	movs	r1, #12
 80083e0:	4618      	mov	r0, r3
 80083e2:	f002 ff40 	bl	800b266 <SDMMC_GetResponse>
 80083e6:	4602      	mov	r2, r0
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2104      	movs	r1, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f002 ff37 	bl	800b266 <SDMMC_GetResponse>
 80083f8:	4603      	mov	r3, r0
 80083fa:	0d1a      	lsrs	r2, r3, #20
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008400:	f107 030c 	add.w	r3, r7, #12
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff fb8c 	bl	8007b24 <HAL_SD_GetCardCSD>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008412:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008416:	e00f      	b.n	8008438 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008420:	041b      	lsls	r3, r3, #16
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f003 f849 	bl	800b4bc <SDMMC_CmdSelDesel>
 800842a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800842c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <SD_InitCard+0x192>
  {
    return errorstate;
 8008432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008434:	e000      	b.n	8008438 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3740      	adds	r7, #64	@ 0x40
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f003 f852 	bl	800b502 <SDMMC_CmdGoIdleState>
 800845e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	e072      	b.n	8008550 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f003 f865 	bl	800b53e <SDMMC_CmdOperCond>
 8008474:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800847c:	d10d      	bne.n	800849a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4618      	mov	r0, r3
 800848a:	f003 f83a 	bl	800b502 <SDMMC_CmdGoIdleState>
 800848e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <SD_PowerON+0x60>
    {
      return errorstate;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	e05a      	b.n	8008550 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d137      	bne.n	8008518 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2100      	movs	r1, #0
 80084ae:	4618      	mov	r0, r3
 80084b0:	f003 f865 	bl	800b57e <SDMMC_CmdAppCommand>
 80084b4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d02d      	beq.n	8008518 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084bc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80084c0:	e046      	b.n	8008550 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f003 f858 	bl	800b57e <SDMMC_CmdAppCommand>
 80084ce:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <SD_PowerON+0x9a>
    {
      return errorstate;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	e03a      	b.n	8008550 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	491e      	ldr	r1, [pc, #120]	@ (8008558 <SD_PowerON+0x118>)
 80084e0:	4618      	mov	r0, r3
 80084e2:	f003 f86f 	bl	800b5c4 <SDMMC_CmdAppOperCommand>
 80084e6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80084f2:	e02d      	b.n	8008550 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f002 feb3 	bl	800b266 <SDMMC_GetResponse>
 8008500:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	0fdb      	lsrs	r3, r3, #31
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <SD_PowerON+0xce>
 800850a:	2301      	movs	r3, #1
 800850c:	e000      	b.n	8008510 <SD_PowerON+0xd0>
 800850e:	2300      	movs	r3, #0
 8008510:	613b      	str	r3, [r7, #16]

    count++;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3301      	adds	r3, #1
 8008516:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800851e:	4293      	cmp	r3, r2
 8008520:	d802      	bhi.n	8008528 <SD_PowerON+0xe8>
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0cc      	beq.n	80084c2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800852e:	4293      	cmp	r3, r2
 8008530:	d902      	bls.n	8008538 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008532:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008536:	e00b      	b.n	8008550 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	c1100000 	.word	0xc1100000

0800855c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08c      	sub	sp, #48	@ 0x30
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008566:	f7f9 fe8b 	bl	8002280 <HAL_GetTick>
 800856a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2100      	movs	r1, #0
 8008576:	4618      	mov	r0, r3
 8008578:	f002 fe75 	bl	800b266 <SDMMC_GetResponse>
 800857c:	4603      	mov	r3, r0
 800857e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008582:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008586:	d102      	bne.n	800858e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008588:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800858c:	e0b0      	b.n	80086f0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2140      	movs	r1, #64	@ 0x40
 8008594:	4618      	mov	r0, r3
 8008596:	f002 fea5 	bl	800b2e4 <SDMMC_CmdBlockLength>
 800859a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	e0a0      	b.n	80086f0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f002 ffdf 	bl	800b57e <SDMMC_CmdAppCommand>
 80085c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	e08d      	b.n	80086f0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085d8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80085da:	2340      	movs	r3, #64	@ 0x40
 80085dc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80085de:	2360      	movs	r3, #96	@ 0x60
 80085e0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80085e2:	2302      	movs	r3, #2
 80085e4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80085ea:	2301      	movs	r3, #1
 80085ec:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f107 0208 	add.w	r2, r7, #8
 80085f6:	4611      	mov	r1, r2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 fe47 	bl	800b28c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f003 f8c7 	bl	800b796 <SDMMC_CmdStatusRegister>
 8008608:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d02b      	beq.n	8008668 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	e069      	b.n	80086f0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008622:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d013      	beq.n	8008652 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800862a:	2300      	movs	r3, #0
 800862c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800862e:	e00d      	b.n	800864c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4618      	mov	r0, r3
 8008636:	f002 fda1 	bl	800b17c <SDMMC_ReadFIFO>
 800863a:	4602      	mov	r2, r0
 800863c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863e:	601a      	str	r2, [r3, #0]
        pData++;
 8008640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008642:	3304      	adds	r3, #4
 8008644:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008648:	3301      	adds	r3, #1
 800864a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800864c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864e:	2b07      	cmp	r3, #7
 8008650:	d9ee      	bls.n	8008630 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008652:	f7f9 fe15 	bl	8002280 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008660:	d102      	bne.n	8008668 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008662:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008666:	e043      	b.n	80086f0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800866e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0d2      	beq.n	800861c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008684:	2308      	movs	r3, #8
 8008686:	e033      	b.n	80086f0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008696:	2302      	movs	r3, #2
 8008698:	e02a      	b.n	80086f0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086a0:	f003 0320 	and.w	r3, r3, #32
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d017      	beq.n	80086d8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80086a8:	2320      	movs	r3, #32
 80086aa:	e021      	b.n	80086f0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f002 fd63 	bl	800b17c <SDMMC_ReadFIFO>
 80086b6:	4602      	mov	r2, r0
 80086b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ba:	601a      	str	r2, [r3, #0]
    pData++;
 80086bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086be:	3304      	adds	r3, #4
 80086c0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80086c2:	f7f9 fddd 	bl	8002280 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086d0:	d102      	bne.n	80086d8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80086d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80086d6:	e00b      	b.n	80086f0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e2      	bne.n	80086ac <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a03      	ldr	r2, [pc, #12]	@ (80086f8 <SD_SendSDStatus+0x19c>)
 80086ec:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3730      	adds	r7, #48	@ 0x30
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	18000f3a 	.word	0x18000f3a

080086fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d102      	bne.n	8008712 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800870c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008710:	e018      	b.n	8008744 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800871a:	041b      	lsls	r3, r3, #16
 800871c:	4619      	mov	r1, r3
 800871e:	4610      	mov	r0, r2
 8008720:	f003 f816 	bl	800b750 <SDMMC_CmdSendStatus>
 8008724:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <SD_SendStatus+0x34>
  {
    return errorstate;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	e009      	b.n	8008744 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2100      	movs	r1, #0
 8008736:	4618      	mov	r0, r3
 8008738:	f002 fd95 	bl	800b266 <SDMMC_GetResponse>
 800873c:	4602      	mov	r2, r0
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	2300      	movs	r3, #0
 800875a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2100      	movs	r1, #0
 8008762:	4618      	mov	r0, r3
 8008764:	f002 fd7f 	bl	800b266 <SDMMC_GetResponse>
 8008768:	4603      	mov	r3, r0
 800876a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800876e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008772:	d102      	bne.n	800877a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008774:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008778:	e02f      	b.n	80087da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800877a:	f107 030c 	add.w	r3, r7, #12
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f879 	bl	8008878 <SD_FindSCR>
 8008786:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	e023      	b.n	80087da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01c      	beq.n	80087d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	4619      	mov	r1, r3
 80087a8:	4610      	mov	r0, r2
 80087aa:	f002 fee8 	bl	800b57e <SDMMC_CmdAppCommand>
 80087ae:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	e00f      	b.n	80087da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2102      	movs	r1, #2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f002 ff1f 	bl	800b604 <SDMMC_CmdBusWidth>
 80087c6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	e003      	b.n	80087da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e001      	b.n	80087da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b086      	sub	sp, #24
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80087ea:	2300      	movs	r3, #0
 80087ec:	60fb      	str	r3, [r7, #12]
 80087ee:	2300      	movs	r3, #0
 80087f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2100      	movs	r1, #0
 80087f8:	4618      	mov	r0, r3
 80087fa:	f002 fd34 	bl	800b266 <SDMMC_GetResponse>
 80087fe:	4603      	mov	r3, r0
 8008800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008808:	d102      	bne.n	8008810 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800880a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800880e:	e02f      	b.n	8008870 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f82e 	bl	8008878 <SD_FindSCR>
 800881c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	e023      	b.n	8008870 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01c      	beq.n	800886c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800883a:	041b      	lsls	r3, r3, #16
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f002 fe9d 	bl	800b57e <SDMMC_CmdAppCommand>
 8008844:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	e00f      	b.n	8008870 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2100      	movs	r1, #0
 8008856:	4618      	mov	r0, r3
 8008858:	f002 fed4 	bl	800b604 <SDMMC_CmdBusWidth>
 800885c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	e003      	b.n	8008870 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008868:	2300      	movs	r3, #0
 800886a:	e001      	b.n	8008870 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800886c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08e      	sub	sp, #56	@ 0x38
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008882:	f7f9 fcfd 	bl	8002280 <HAL_GetTick>
 8008886:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800888c:	2300      	movs	r3, #0
 800888e:	60bb      	str	r3, [r7, #8]
 8008890:	2300      	movs	r3, #0
 8008892:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2108      	movs	r1, #8
 800889e:	4618      	mov	r0, r3
 80088a0:	f002 fd20 	bl	800b2e4 <SDMMC_CmdBlockLength>
 80088a4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80088a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80088ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ae:	e0ad      	b.n	8008a0c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b8:	041b      	lsls	r3, r3, #16
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f002 fe5e 	bl	800b57e <SDMMC_CmdAppCommand>
 80088c2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80088c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80088ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088cc:	e09e      	b.n	8008a0c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80088d4:	2308      	movs	r3, #8
 80088d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80088d8:	2330      	movs	r3, #48	@ 0x30
 80088da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80088dc:	2302      	movs	r3, #2
 80088de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80088e4:	2301      	movs	r3, #1
 80088e6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f107 0210 	add.w	r2, r7, #16
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f002 fcca 	bl	800b28c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f002 fea4 	bl	800b64a <SDMMC_CmdSendSCR>
 8008902:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008906:	2b00      	cmp	r3, #0
 8008908:	d027      	beq.n	800895a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890c:	e07e      	b.n	8008a0c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008914:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d113      	bne.n	8008944 <SD_FindSCR+0xcc>
 800891c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891e:	2b00      	cmp	r3, #0
 8008920:	d110      	bne.n	8008944 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f002 fc28 	bl	800b17c <SDMMC_ReadFIFO>
 800892c:	4603      	mov	r3, r0
 800892e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4618      	mov	r0, r3
 8008936:	f002 fc21 	bl	800b17c <SDMMC_ReadFIFO>
 800893a:	4603      	mov	r3, r0
 800893c:	60fb      	str	r3, [r7, #12]
      index++;
 800893e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008940:	3301      	adds	r3, #1
 8008942:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008944:	f7f9 fc9c 	bl	8002280 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008952:	d102      	bne.n	800895a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008954:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008958:	e058      	b.n	8008a0c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008960:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008964:	4013      	ands	r3, r2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0d1      	beq.n	800890e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008970:	f003 0308 	and.w	r3, r3, #8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2208      	movs	r2, #8
 800897e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008980:	2308      	movs	r3, #8
 8008982:	e043      	b.n	8008a0c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d005      	beq.n	800899e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2202      	movs	r2, #2
 8008998:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800899a:	2302      	movs	r3, #2
 800899c:	e036      	b.n	8008a0c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a4:	f003 0320 	and.w	r3, r3, #32
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2220      	movs	r2, #32
 80089b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80089b4:	2320      	movs	r3, #32
 80089b6:	e029      	b.n	8008a0c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a15      	ldr	r2, [pc, #84]	@ (8008a14 <SD_FindSCR+0x19c>)
 80089be:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	061a      	lsls	r2, r3, #24
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80089cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	0a1b      	lsrs	r3, r3, #8
 80089d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80089d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	0e1b      	lsrs	r3, r3, #24
 80089dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80089de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e0:	601a      	str	r2, [r3, #0]
    scr++;
 80089e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e4:	3304      	adds	r3, #4
 80089e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	061a      	lsls	r2, r3, #24
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80089f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	0a1b      	lsrs	r3, r3, #8
 80089fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80089fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	0e1b      	lsrs	r3, r3, #24
 8008a04:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a08:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3738      	adds	r7, #56	@ 0x38
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	18000f3a 	.word	0x18000f3a

08008a18 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a24:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2a:	2b1f      	cmp	r3, #31
 8008a2c:	d936      	bls.n	8008a9c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	e027      	b.n	8008a84 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f002 fb9f 	bl	800b17c <SDMMC_ReadFIFO>
 8008a3e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	0a1b      	lsrs	r3, r3, #8
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	0c1b      	lsrs	r3, r3, #16
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	0e1b      	lsrs	r3, r3, #24
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	3301      	adds	r3, #1
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2b07      	cmp	r3, #7
 8008a88:	d9d4      	bls.n	8008a34 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a94:	f1a3 0220 	sub.w	r2, r3, #32
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8008a9c:	bf00      	nop
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	2b1f      	cmp	r3, #31
 8008ab8:	d93a      	bls.n	8008b30 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e02b      	b.n	8008b18 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	021a      	lsls	r2, r3, #8
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	3301      	adds	r3, #1
 8008adc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	041a      	lsls	r2, r3, #16
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3301      	adds	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	061a      	lsls	r2, r3, #24
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	3301      	adds	r3, #1
 8008b00:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f107 020c 	add.w	r2, r7, #12
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f002 fb42 	bl	800b196 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	3301      	adds	r3, #1
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2b07      	cmp	r3, #7
 8008b1c:	d9d0      	bls.n	8008ac0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	f1a3 0220 	sub.w	r2, r3, #32
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	621a      	str	r2, [r3, #32]
  }
}
 8008b30:	bf00      	nop
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e10f      	b.n	8008dba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a87      	ldr	r2, [pc, #540]	@ (8008dc4 <HAL_SPI_Init+0x23c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d00f      	beq.n	8008bca <HAL_SPI_Init+0x42>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a86      	ldr	r2, [pc, #536]	@ (8008dc8 <HAL_SPI_Init+0x240>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d00a      	beq.n	8008bca <HAL_SPI_Init+0x42>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a84      	ldr	r2, [pc, #528]	@ (8008dcc <HAL_SPI_Init+0x244>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d005      	beq.n	8008bca <HAL_SPI_Init+0x42>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	2b0f      	cmp	r3, #15
 8008bc4:	d901      	bls.n	8008bca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e0f7      	b.n	8008dba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f900 	bl	8008dd0 <SPI_GetPacketSize>
 8008bd0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a7b      	ldr	r2, [pc, #492]	@ (8008dc4 <HAL_SPI_Init+0x23c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00c      	beq.n	8008bf6 <HAL_SPI_Init+0x6e>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a79      	ldr	r2, [pc, #484]	@ (8008dc8 <HAL_SPI_Init+0x240>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d007      	beq.n	8008bf6 <HAL_SPI_Init+0x6e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a78      	ldr	r2, [pc, #480]	@ (8008dcc <HAL_SPI_Init+0x244>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d002      	beq.n	8008bf6 <HAL_SPI_Init+0x6e>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d811      	bhi.n	8008c1a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bfa:	4a72      	ldr	r2, [pc, #456]	@ (8008dc4 <HAL_SPI_Init+0x23c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d009      	beq.n	8008c14 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a70      	ldr	r2, [pc, #448]	@ (8008dc8 <HAL_SPI_Init+0x240>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d004      	beq.n	8008c14 <HAL_SPI_Init+0x8c>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8008dcc <HAL_SPI_Init+0x244>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d104      	bne.n	8008c1e <HAL_SPI_Init+0x96>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b10      	cmp	r3, #16
 8008c18:	d901      	bls.n	8008c1e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e0cd      	b.n	8008dba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7f8 fe86 	bl	8001944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0201 	bic.w	r2, r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008c5a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c64:	d119      	bne.n	8008c9a <HAL_SPI_Init+0x112>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c6e:	d103      	bne.n	8008c78 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d008      	beq.n	8008c8a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10c      	bne.n	8008c9a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c88:	d107      	bne.n	8008c9a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00f      	beq.n	8008cc6 <HAL_SPI_Init+0x13e>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2b06      	cmp	r3, #6
 8008cac:	d90b      	bls.n	8008cc6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	e007      	b.n	8008cd6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008cd4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69da      	ldr	r2, [r3, #28]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce8:	ea42 0103 	orr.w	r1, r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d00:	431a      	orrs	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d06:	431a      	orrs	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	431a      	orrs	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	431a      	orrs	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d36:	ea42 0103 	orr.w	r1, r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d113      	bne.n	8008d76 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0201 	bic.w	r2, r2, #1
 8008d84:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40013000 	.word	0x40013000
 8008dc8:	40003800 	.word	0x40003800
 8008dcc:	40003c00 	.word	0x40003c00

08008dd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ddc:	095b      	lsrs	r3, r3, #5
 8008dde:	3301      	adds	r3, #1
 8008de0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	3307      	adds	r3, #7
 8008dee:	08db      	lsrs	r3, r3, #3
 8008df0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e049      	b.n	8008eac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d106      	bne.n	8008e32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7f8 fedd 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3304      	adds	r3, #4
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f000 f9eb 	bl	8009220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d001      	beq.n	8008ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e05e      	b.n	8008f8a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0201 	orr.w	r2, r2, #1
 8008ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8008f98 <HAL_TIM_Base_Start_IT+0xe4>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d02c      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x94>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ef6:	d027      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x94>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a27      	ldr	r2, [pc, #156]	@ (8008f9c <HAL_TIM_Base_Start_IT+0xe8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d022      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x94>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a26      	ldr	r2, [pc, #152]	@ (8008fa0 <HAL_TIM_Base_Start_IT+0xec>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d01d      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x94>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a24      	ldr	r2, [pc, #144]	@ (8008fa4 <HAL_TIM_Base_Start_IT+0xf0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d018      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x94>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a23      	ldr	r2, [pc, #140]	@ (8008fa8 <HAL_TIM_Base_Start_IT+0xf4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x94>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a21      	ldr	r2, [pc, #132]	@ (8008fac <HAL_TIM_Base_Start_IT+0xf8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00e      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x94>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a20      	ldr	r2, [pc, #128]	@ (8008fb0 <HAL_TIM_Base_Start_IT+0xfc>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x94>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1e      	ldr	r2, [pc, #120]	@ (8008fb4 <HAL_TIM_Base_Start_IT+0x100>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x94>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb8 <HAL_TIM_Base_Start_IT+0x104>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d115      	bne.n	8008f74 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008fbc <HAL_TIM_Base_Start_IT+0x108>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d015      	beq.n	8008f86 <HAL_TIM_Base_Start_IT+0xd2>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f60:	d011      	beq.n	8008f86 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0201 	orr.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f72:	e008      	b.n	8008f86 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f042 0201 	orr.w	r2, r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e000      	b.n	8008f88 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	40010000 	.word	0x40010000
 8008f9c:	40000400 	.word	0x40000400
 8008fa0:	40000800 	.word	0x40000800
 8008fa4:	40000c00 	.word	0x40000c00
 8008fa8:	40010400 	.word	0x40010400
 8008fac:	40001800 	.word	0x40001800
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	4000e000 	.word	0x4000e000
 8008fb8:	4000e400 	.word	0x4000e400
 8008fbc:	00010007 	.word	0x00010007

08008fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d020      	beq.n	8009024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01b      	beq.n	8009024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0202 	mvn.w	r2, #2
 8008ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f8e9 	bl	80091e2 <HAL_TIM_IC_CaptureCallback>
 8009010:	e005      	b.n	800901e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f8db 	bl	80091ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f8ec 	bl	80091f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b00      	cmp	r3, #0
 800902c:	d020      	beq.n	8009070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01b      	beq.n	8009070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f06f 0204 	mvn.w	r2, #4
 8009040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2202      	movs	r2, #2
 8009046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f8c3 	bl	80091e2 <HAL_TIM_IC_CaptureCallback>
 800905c:	e005      	b.n	800906a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f8b5 	bl	80091ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f8c6 	bl	80091f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f003 0308 	and.w	r3, r3, #8
 8009076:	2b00      	cmp	r3, #0
 8009078:	d020      	beq.n	80090bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f003 0308 	and.w	r3, r3, #8
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01b      	beq.n	80090bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0208 	mvn.w	r2, #8
 800908c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2204      	movs	r2, #4
 8009092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f89d 	bl	80091e2 <HAL_TIM_IC_CaptureCallback>
 80090a8:	e005      	b.n	80090b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f88f 	bl	80091ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f8a0 	bl	80091f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d020      	beq.n	8009108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f003 0310 	and.w	r3, r3, #16
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d01b      	beq.n	8009108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0210 	mvn.w	r2, #16
 80090d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2208      	movs	r2, #8
 80090de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f877 	bl	80091e2 <HAL_TIM_IC_CaptureCallback>
 80090f4:	e005      	b.n	8009102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f869 	bl	80091ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f87a 	bl	80091f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00c      	beq.n	800912c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	d007      	beq.n	800912c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f06f 0201 	mvn.w	r2, #1
 8009124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7f8 f9f6 	bl	8001518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009132:	2b00      	cmp	r3, #0
 8009134:	d104      	bne.n	8009140 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00c      	beq.n	800915a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009146:	2b00      	cmp	r3, #0
 8009148:	d007      	beq.n	800915a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f9bb 	bl	80094d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00c      	beq.n	800917e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f9b3 	bl	80094e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00c      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800919a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f834 	bl	800920a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f003 0320 	and.w	r3, r3, #32
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00c      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f06f 0220 	mvn.w	r2, #32
 80091be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f97b 	bl	80094bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
	...

08009220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a4a      	ldr	r2, [pc, #296]	@ (800935c <TIM_Base_SetConfig+0x13c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d013      	beq.n	8009260 <TIM_Base_SetConfig+0x40>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800923e:	d00f      	beq.n	8009260 <TIM_Base_SetConfig+0x40>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a47      	ldr	r2, [pc, #284]	@ (8009360 <TIM_Base_SetConfig+0x140>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d00b      	beq.n	8009260 <TIM_Base_SetConfig+0x40>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a46      	ldr	r2, [pc, #280]	@ (8009364 <TIM_Base_SetConfig+0x144>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d007      	beq.n	8009260 <TIM_Base_SetConfig+0x40>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a45      	ldr	r2, [pc, #276]	@ (8009368 <TIM_Base_SetConfig+0x148>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d003      	beq.n	8009260 <TIM_Base_SetConfig+0x40>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a44      	ldr	r2, [pc, #272]	@ (800936c <TIM_Base_SetConfig+0x14c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d108      	bne.n	8009272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a39      	ldr	r2, [pc, #228]	@ (800935c <TIM_Base_SetConfig+0x13c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d027      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009280:	d023      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a36      	ldr	r2, [pc, #216]	@ (8009360 <TIM_Base_SetConfig+0x140>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d01f      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a35      	ldr	r2, [pc, #212]	@ (8009364 <TIM_Base_SetConfig+0x144>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d01b      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a34      	ldr	r2, [pc, #208]	@ (8009368 <TIM_Base_SetConfig+0x148>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d017      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a33      	ldr	r2, [pc, #204]	@ (800936c <TIM_Base_SetConfig+0x14c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d013      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a32      	ldr	r2, [pc, #200]	@ (8009370 <TIM_Base_SetConfig+0x150>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d00f      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a31      	ldr	r2, [pc, #196]	@ (8009374 <TIM_Base_SetConfig+0x154>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d00b      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a30      	ldr	r2, [pc, #192]	@ (8009378 <TIM_Base_SetConfig+0x158>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d007      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a2f      	ldr	r2, [pc, #188]	@ (800937c <TIM_Base_SetConfig+0x15c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d003      	beq.n	80092ca <TIM_Base_SetConfig+0xaa>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a2e      	ldr	r2, [pc, #184]	@ (8009380 <TIM_Base_SetConfig+0x160>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d108      	bne.n	80092dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a16      	ldr	r2, [pc, #88]	@ (800935c <TIM_Base_SetConfig+0x13c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d00f      	beq.n	8009328 <TIM_Base_SetConfig+0x108>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a18      	ldr	r2, [pc, #96]	@ (800936c <TIM_Base_SetConfig+0x14c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00b      	beq.n	8009328 <TIM_Base_SetConfig+0x108>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a17      	ldr	r2, [pc, #92]	@ (8009370 <TIM_Base_SetConfig+0x150>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d007      	beq.n	8009328 <TIM_Base_SetConfig+0x108>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a16      	ldr	r2, [pc, #88]	@ (8009374 <TIM_Base_SetConfig+0x154>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d003      	beq.n	8009328 <TIM_Base_SetConfig+0x108>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a15      	ldr	r2, [pc, #84]	@ (8009378 <TIM_Base_SetConfig+0x158>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d103      	bne.n	8009330 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	691a      	ldr	r2, [r3, #16]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b01      	cmp	r3, #1
 8009340:	d105      	bne.n	800934e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f023 0201 	bic.w	r2, r3, #1
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	611a      	str	r2, [r3, #16]
  }
}
 800934e:	bf00      	nop
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	40010000 	.word	0x40010000
 8009360:	40000400 	.word	0x40000400
 8009364:	40000800 	.word	0x40000800
 8009368:	40000c00 	.word	0x40000c00
 800936c:	40010400 	.word	0x40010400
 8009370:	40014000 	.word	0x40014000
 8009374:	40014400 	.word	0x40014400
 8009378:	40014800 	.word	0x40014800
 800937c:	4000e000 	.word	0x4000e000
 8009380:	4000e400 	.word	0x4000e400

08009384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009394:	2b01      	cmp	r3, #1
 8009396:	d101      	bne.n	800939c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009398:	2302      	movs	r3, #2
 800939a:	e077      	b.n	800948c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2202      	movs	r2, #2
 80093a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a35      	ldr	r2, [pc, #212]	@ (8009498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d004      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a34      	ldr	r2, [pc, #208]	@ (800949c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d108      	bne.n	80093e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80093d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a25      	ldr	r2, [pc, #148]	@ (8009498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d02c      	beq.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800940e:	d027      	beq.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a22      	ldr	r2, [pc, #136]	@ (80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d022      	beq.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a21      	ldr	r2, [pc, #132]	@ (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d01d      	beq.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a1f      	ldr	r2, [pc, #124]	@ (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d018      	beq.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a1a      	ldr	r2, [pc, #104]	@ (800949c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d013      	beq.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a1b      	ldr	r2, [pc, #108]	@ (80094ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00e      	beq.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a1a      	ldr	r2, [pc, #104]	@ (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d009      	beq.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a18      	ldr	r2, [pc, #96]	@ (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d004      	beq.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a17      	ldr	r2, [pc, #92]	@ (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d10c      	bne.n	800947a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009466:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	4313      	orrs	r3, r2
 8009470:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	40010000 	.word	0x40010000
 800949c:	40010400 	.word	0x40010400
 80094a0:	40000400 	.word	0x40000400
 80094a4:	40000800 	.word	0x40000800
 80094a8:	40000c00 	.word	0x40000c00
 80094ac:	40001800 	.word	0x40001800
 80094b0:	40014000 	.word	0x40014000
 80094b4:	4000e000 	.word	0x4000e000
 80094b8:	4000e400 	.word	0x4000e400

080094bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e042      	b.n	8009590 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7f8 fb8d 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2224      	movs	r2, #36	@ 0x24
 8009526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0201 	bic.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 fa6e 	bl	800aa24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fbff 	bl	8009d4c <UART_SetConfig>
 800954e:	4603      	mov	r3, r0
 8009550:	2b01      	cmp	r3, #1
 8009552:	d101      	bne.n	8009558 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e01b      	b.n	8009590 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689a      	ldr	r2, [r3, #8]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0201 	orr.w	r2, r2, #1
 8009586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 faed 	bl	800ab68 <UART_CheckIdleState>
 800958e:	4603      	mov	r3, r0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b0ba      	sub	sp, #232	@ 0xe8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80095be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80095c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80095c6:	4013      	ands	r3, r2
 80095c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80095cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d11b      	bne.n	800960c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d015      	beq.n	800960c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80095e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095e4:	f003 0320 	and.w	r3, r3, #32
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d105      	bne.n	80095f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d009      	beq.n	800960c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 8377 	beq.w	8009cf0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
      }
      return;
 800960a:	e371      	b.n	8009cf0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800960c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 8123 	beq.w	800985c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009616:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800961a:	4b8d      	ldr	r3, [pc, #564]	@ (8009850 <HAL_UART_IRQHandler+0x2b8>)
 800961c:	4013      	ands	r3, r2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009622:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009626:	4b8b      	ldr	r3, [pc, #556]	@ (8009854 <HAL_UART_IRQHandler+0x2bc>)
 8009628:	4013      	ands	r3, r2
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 8116 	beq.w	800985c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009634:	f003 0301 	and.w	r3, r3, #1
 8009638:	2b00      	cmp	r3, #0
 800963a:	d011      	beq.n	8009660 <HAL_UART_IRQHandler+0xc8>
 800963c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2201      	movs	r2, #1
 800964e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009656:	f043 0201 	orr.w	r2, r3, #1
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009664:	f003 0302 	and.w	r3, r3, #2
 8009668:	2b00      	cmp	r3, #0
 800966a:	d011      	beq.n	8009690 <HAL_UART_IRQHandler+0xf8>
 800966c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00b      	beq.n	8009690 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2202      	movs	r2, #2
 800967e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009686:	f043 0204 	orr.w	r2, r3, #4
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009694:	f003 0304 	and.w	r3, r3, #4
 8009698:	2b00      	cmp	r3, #0
 800969a:	d011      	beq.n	80096c0 <HAL_UART_IRQHandler+0x128>
 800969c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00b      	beq.n	80096c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2204      	movs	r2, #4
 80096ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096b6:	f043 0202 	orr.w	r2, r3, #2
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096c4:	f003 0308 	and.w	r3, r3, #8
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d017      	beq.n	80096fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096d0:	f003 0320 	and.w	r3, r3, #32
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d105      	bne.n	80096e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80096d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80096dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009850 <HAL_UART_IRQHandler+0x2b8>)
 80096de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2208      	movs	r2, #8
 80096ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f2:	f043 0208 	orr.w	r2, r3, #8
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009704:	2b00      	cmp	r3, #0
 8009706:	d012      	beq.n	800972e <HAL_UART_IRQHandler+0x196>
 8009708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800970c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00c      	beq.n	800972e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800971c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009724:	f043 0220 	orr.w	r2, r3, #32
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 82dd 	beq.w	8009cf4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800973a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d013      	beq.n	800976e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d007      	beq.n	800976e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009774:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009782:	2b40      	cmp	r3, #64	@ 0x40
 8009784:	d005      	beq.n	8009792 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800978a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800978e:	2b00      	cmp	r3, #0
 8009790:	d054      	beq.n	800983c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 fb00 	bl	800ad98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097a2:	2b40      	cmp	r3, #64	@ 0x40
 80097a4:	d146      	bne.n	8009834 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3308      	adds	r3, #8
 80097ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097b4:	e853 3f00 	ldrex	r3, [r3]
 80097b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80097bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80097d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80097d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80097de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80097ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1d9      	bne.n	80097a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d017      	beq.n	800982c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009802:	4a15      	ldr	r2, [pc, #84]	@ (8009858 <HAL_UART_IRQHandler+0x2c0>)
 8009804:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800980c:	4618      	mov	r0, r3
 800980e:	f7f9 f9dd 	bl	8002bcc <HAL_DMA_Abort_IT>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d019      	beq.n	800984c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800981e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009826:	4610      	mov	r0, r2
 8009828:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982a:	e00f      	b.n	800984c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fa77 	bl	8009d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009832:	e00b      	b.n	800984c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fa73 	bl	8009d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800983a:	e007      	b.n	800984c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fa6f 	bl	8009d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800984a:	e253      	b.n	8009cf4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800984c:	bf00      	nop
    return;
 800984e:	e251      	b.n	8009cf4 <HAL_UART_IRQHandler+0x75c>
 8009850:	10000001 	.word	0x10000001
 8009854:	04000120 	.word	0x04000120
 8009858:	0800ae65 	.word	0x0800ae65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009860:	2b01      	cmp	r3, #1
 8009862:	f040 81e7 	bne.w	8009c34 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800986a:	f003 0310 	and.w	r3, r3, #16
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 81e0 	beq.w	8009c34 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009878:	f003 0310 	and.w	r3, r3, #16
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 81d9 	beq.w	8009c34 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2210      	movs	r2, #16
 8009888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009894:	2b40      	cmp	r3, #64	@ 0x40
 8009896:	f040 8151 	bne.w	8009b3c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a96      	ldr	r2, [pc, #600]	@ (8009afc <HAL_UART_IRQHandler+0x564>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d068      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a93      	ldr	r2, [pc, #588]	@ (8009b00 <HAL_UART_IRQHandler+0x568>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d061      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a91      	ldr	r2, [pc, #580]	@ (8009b04 <HAL_UART_IRQHandler+0x56c>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d05a      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a8e      	ldr	r2, [pc, #568]	@ (8009b08 <HAL_UART_IRQHandler+0x570>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d053      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a8c      	ldr	r2, [pc, #560]	@ (8009b0c <HAL_UART_IRQHandler+0x574>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d04c      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a89      	ldr	r2, [pc, #548]	@ (8009b10 <HAL_UART_IRQHandler+0x578>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d045      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a87      	ldr	r2, [pc, #540]	@ (8009b14 <HAL_UART_IRQHandler+0x57c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d03e      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a84      	ldr	r2, [pc, #528]	@ (8009b18 <HAL_UART_IRQHandler+0x580>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d037      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a82      	ldr	r2, [pc, #520]	@ (8009b1c <HAL_UART_IRQHandler+0x584>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d030      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a7f      	ldr	r2, [pc, #508]	@ (8009b20 <HAL_UART_IRQHandler+0x588>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d029      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a7d      	ldr	r2, [pc, #500]	@ (8009b24 <HAL_UART_IRQHandler+0x58c>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d022      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a7a      	ldr	r2, [pc, #488]	@ (8009b28 <HAL_UART_IRQHandler+0x590>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d01b      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a78      	ldr	r2, [pc, #480]	@ (8009b2c <HAL_UART_IRQHandler+0x594>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d014      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a75      	ldr	r2, [pc, #468]	@ (8009b30 <HAL_UART_IRQHandler+0x598>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00d      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a73      	ldr	r2, [pc, #460]	@ (8009b34 <HAL_UART_IRQHandler+0x59c>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d006      	beq.n	800997a <HAL_UART_IRQHandler+0x3e2>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a70      	ldr	r2, [pc, #448]	@ (8009b38 <HAL_UART_IRQHandler+0x5a0>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d106      	bne.n	8009988 <HAL_UART_IRQHandler+0x3f0>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	b29b      	uxth	r3, r3
 8009986:	e005      	b.n	8009994 <HAL_UART_IRQHandler+0x3fc>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 81ab 	beq.w	8009cf8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099ac:	429a      	cmp	r2, r3
 80099ae:	f080 81a3 	bcs.w	8009cf8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c2:	69db      	ldr	r3, [r3, #28]
 80099c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099c8:	f000 8087 	beq.w	8009ada <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a06:	e841 2300 	strex	r3, r2, [r1]
 8009a0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1da      	bne.n	80099cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a28:	f023 0301 	bic.w	r3, r3, #1
 8009a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3308      	adds	r3, #8
 8009a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e1      	bne.n	8009a16 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3308      	adds	r3, #8
 8009a58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3308      	adds	r3, #8
 8009a72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e3      	bne.n	8009a52 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aa0:	e853 3f00 	ldrex	r3, [r3]
 8009aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aa8:	f023 0310 	bic.w	r3, r3, #16
 8009aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009abc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ac0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e4      	bne.n	8009a98 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7f8 fd5b 	bl	8002590 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2202      	movs	r2, #2
 8009ade:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f91d 	bl	8009d34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009afa:	e0fd      	b.n	8009cf8 <HAL_UART_IRQHandler+0x760>
 8009afc:	40020010 	.word	0x40020010
 8009b00:	40020028 	.word	0x40020028
 8009b04:	40020040 	.word	0x40020040
 8009b08:	40020058 	.word	0x40020058
 8009b0c:	40020070 	.word	0x40020070
 8009b10:	40020088 	.word	0x40020088
 8009b14:	400200a0 	.word	0x400200a0
 8009b18:	400200b8 	.word	0x400200b8
 8009b1c:	40020410 	.word	0x40020410
 8009b20:	40020428 	.word	0x40020428
 8009b24:	40020440 	.word	0x40020440
 8009b28:	40020458 	.word	0x40020458
 8009b2c:	40020470 	.word	0x40020470
 8009b30:	40020488 	.word	0x40020488
 8009b34:	400204a0 	.word	0x400204a0
 8009b38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 80cf 	beq.w	8009cfc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80ca 	beq.w	8009cfc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b70:	e853 3f00 	ldrex	r3, [r3]
 8009b74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	461a      	mov	r2, r3
 8009b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b8c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b92:	e841 2300 	strex	r3, r2, [r1]
 8009b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1e4      	bne.n	8009b68 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	623b      	str	r3, [r7, #32]
   return(result);
 8009bae:	6a3a      	ldr	r2, [r7, #32]
 8009bb0:	4b55      	ldr	r3, [pc, #340]	@ (8009d08 <HAL_UART_IRQHandler+0x770>)
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009bc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e3      	bne.n	8009b9e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	e853 3f00 	ldrex	r3, [r3]
 8009bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0310 	bic.w	r3, r3, #16
 8009bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009c0c:	61fb      	str	r3, [r7, #28]
 8009c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c10:	69b9      	ldr	r1, [r7, #24]
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	e841 2300 	strex	r3, r2, [r1]
 8009c18:	617b      	str	r3, [r7, #20]
   return(result);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1e4      	bne.n	8009bea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f881 	bl	8009d34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c32:	e063      	b.n	8009cfc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00e      	beq.n	8009c5e <HAL_UART_IRQHandler+0x6c6>
 8009c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d008      	beq.n	8009c5e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009c54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 f945 	bl	800aee6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c5c:	e051      	b.n	8009d02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d014      	beq.n	8009c94 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d105      	bne.n	8009c82 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d008      	beq.n	8009c94 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d03a      	beq.n	8009d00 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	4798      	blx	r3
    }
    return;
 8009c92:	e035      	b.n	8009d00 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d009      	beq.n	8009cb4 <HAL_UART_IRQHandler+0x71c>
 8009ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 f8ef 	bl	800ae90 <UART_EndTransmit_IT>
    return;
 8009cb2:	e026      	b.n	8009d02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d009      	beq.n	8009cd4 <HAL_UART_IRQHandler+0x73c>
 8009cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cc4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 f91e 	bl	800af0e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cd2:	e016      	b.n	8009d02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d010      	beq.n	8009d02 <HAL_UART_IRQHandler+0x76a>
 8009ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	da0c      	bge.n	8009d02 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 f906 	bl	800aefa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cee:	e008      	b.n	8009d02 <HAL_UART_IRQHandler+0x76a>
      return;
 8009cf0:	bf00      	nop
 8009cf2:	e006      	b.n	8009d02 <HAL_UART_IRQHandler+0x76a>
    return;
 8009cf4:	bf00      	nop
 8009cf6:	e004      	b.n	8009d02 <HAL_UART_IRQHandler+0x76a>
      return;
 8009cf8:	bf00      	nop
 8009cfa:	e002      	b.n	8009d02 <HAL_UART_IRQHandler+0x76a>
      return;
 8009cfc:	bf00      	nop
 8009cfe:	e000      	b.n	8009d02 <HAL_UART_IRQHandler+0x76a>
    return;
 8009d00:	bf00      	nop
  }
}
 8009d02:	37e8      	adds	r7, #232	@ 0xe8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	effffffe 	.word	0xeffffffe

08009d0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d50:	b092      	sub	sp, #72	@ 0x48
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	69db      	ldr	r3, [r3, #28]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	4bbe      	ldr	r3, [pc, #760]	@ (800a074 <UART_SetConfig+0x328>)
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d84:	430b      	orrs	r3, r1
 8009d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4ab3      	ldr	r2, [pc, #716]	@ (800a078 <UART_SetConfig+0x32c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d004      	beq.n	8009db8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009db4:	4313      	orrs	r3, r2
 8009db6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	4baf      	ldr	r3, [pc, #700]	@ (800a07c <UART_SetConfig+0x330>)
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	6812      	ldr	r2, [r2, #0]
 8009dc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009dc8:	430b      	orrs	r3, r1
 8009dca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd2:	f023 010f 	bic.w	r1, r3, #15
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4aa6      	ldr	r2, [pc, #664]	@ (800a080 <UART_SetConfig+0x334>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d177      	bne.n	8009edc <UART_SetConfig+0x190>
 8009dec:	4ba5      	ldr	r3, [pc, #660]	@ (800a084 <UART_SetConfig+0x338>)
 8009dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009df4:	2b28      	cmp	r3, #40	@ 0x28
 8009df6:	d86d      	bhi.n	8009ed4 <UART_SetConfig+0x188>
 8009df8:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <UART_SetConfig+0xb4>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009ea5 	.word	0x08009ea5
 8009e04:	08009ed5 	.word	0x08009ed5
 8009e08:	08009ed5 	.word	0x08009ed5
 8009e0c:	08009ed5 	.word	0x08009ed5
 8009e10:	08009ed5 	.word	0x08009ed5
 8009e14:	08009ed5 	.word	0x08009ed5
 8009e18:	08009ed5 	.word	0x08009ed5
 8009e1c:	08009ed5 	.word	0x08009ed5
 8009e20:	08009ead 	.word	0x08009ead
 8009e24:	08009ed5 	.word	0x08009ed5
 8009e28:	08009ed5 	.word	0x08009ed5
 8009e2c:	08009ed5 	.word	0x08009ed5
 8009e30:	08009ed5 	.word	0x08009ed5
 8009e34:	08009ed5 	.word	0x08009ed5
 8009e38:	08009ed5 	.word	0x08009ed5
 8009e3c:	08009ed5 	.word	0x08009ed5
 8009e40:	08009eb5 	.word	0x08009eb5
 8009e44:	08009ed5 	.word	0x08009ed5
 8009e48:	08009ed5 	.word	0x08009ed5
 8009e4c:	08009ed5 	.word	0x08009ed5
 8009e50:	08009ed5 	.word	0x08009ed5
 8009e54:	08009ed5 	.word	0x08009ed5
 8009e58:	08009ed5 	.word	0x08009ed5
 8009e5c:	08009ed5 	.word	0x08009ed5
 8009e60:	08009ebd 	.word	0x08009ebd
 8009e64:	08009ed5 	.word	0x08009ed5
 8009e68:	08009ed5 	.word	0x08009ed5
 8009e6c:	08009ed5 	.word	0x08009ed5
 8009e70:	08009ed5 	.word	0x08009ed5
 8009e74:	08009ed5 	.word	0x08009ed5
 8009e78:	08009ed5 	.word	0x08009ed5
 8009e7c:	08009ed5 	.word	0x08009ed5
 8009e80:	08009ec5 	.word	0x08009ec5
 8009e84:	08009ed5 	.word	0x08009ed5
 8009e88:	08009ed5 	.word	0x08009ed5
 8009e8c:	08009ed5 	.word	0x08009ed5
 8009e90:	08009ed5 	.word	0x08009ed5
 8009e94:	08009ed5 	.word	0x08009ed5
 8009e98:	08009ed5 	.word	0x08009ed5
 8009e9c:	08009ed5 	.word	0x08009ed5
 8009ea0:	08009ecd 	.word	0x08009ecd
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e326      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009eac:	2304      	movs	r3, #4
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e322      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009eb4:	2308      	movs	r3, #8
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e31e      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009ebc:	2310      	movs	r3, #16
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	e31a      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eca:	e316      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009ecc:	2340      	movs	r3, #64	@ 0x40
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed2:	e312      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009ed4:	2380      	movs	r3, #128	@ 0x80
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eda:	e30e      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a69      	ldr	r2, [pc, #420]	@ (800a088 <UART_SetConfig+0x33c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d130      	bne.n	8009f48 <UART_SetConfig+0x1fc>
 8009ee6:	4b67      	ldr	r3, [pc, #412]	@ (800a084 <UART_SetConfig+0x338>)
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eea:	f003 0307 	and.w	r3, r3, #7
 8009eee:	2b05      	cmp	r3, #5
 8009ef0:	d826      	bhi.n	8009f40 <UART_SetConfig+0x1f4>
 8009ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef8 <UART_SetConfig+0x1ac>)
 8009ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef8:	08009f11 	.word	0x08009f11
 8009efc:	08009f19 	.word	0x08009f19
 8009f00:	08009f21 	.word	0x08009f21
 8009f04:	08009f29 	.word	0x08009f29
 8009f08:	08009f31 	.word	0x08009f31
 8009f0c:	08009f39 	.word	0x08009f39
 8009f10:	2300      	movs	r3, #0
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e2f0      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f18:	2304      	movs	r3, #4
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e2ec      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f20:	2308      	movs	r3, #8
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e2e8      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f28:	2310      	movs	r3, #16
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e2e4      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f30:	2320      	movs	r3, #32
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f36:	e2e0      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f38:	2340      	movs	r3, #64	@ 0x40
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	e2dc      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f40:	2380      	movs	r3, #128	@ 0x80
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f46:	e2d8      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800a08c <UART_SetConfig+0x340>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d130      	bne.n	8009fb4 <UART_SetConfig+0x268>
 8009f52:	4b4c      	ldr	r3, [pc, #304]	@ (800a084 <UART_SetConfig+0x338>)
 8009f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f56:	f003 0307 	and.w	r3, r3, #7
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	d826      	bhi.n	8009fac <UART_SetConfig+0x260>
 8009f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f64 <UART_SetConfig+0x218>)
 8009f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f64:	08009f7d 	.word	0x08009f7d
 8009f68:	08009f85 	.word	0x08009f85
 8009f6c:	08009f8d 	.word	0x08009f8d
 8009f70:	08009f95 	.word	0x08009f95
 8009f74:	08009f9d 	.word	0x08009f9d
 8009f78:	08009fa5 	.word	0x08009fa5
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e2ba      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f84:	2304      	movs	r3, #4
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e2b6      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e2b2      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f94:	2310      	movs	r3, #16
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9a:	e2ae      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009f9c:	2320      	movs	r3, #32
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa2:	e2aa      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009fa4:	2340      	movs	r3, #64	@ 0x40
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009faa:	e2a6      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009fac:	2380      	movs	r3, #128	@ 0x80
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb2:	e2a2      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a35      	ldr	r2, [pc, #212]	@ (800a090 <UART_SetConfig+0x344>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d130      	bne.n	800a020 <UART_SetConfig+0x2d4>
 8009fbe:	4b31      	ldr	r3, [pc, #196]	@ (800a084 <UART_SetConfig+0x338>)
 8009fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fc2:	f003 0307 	and.w	r3, r3, #7
 8009fc6:	2b05      	cmp	r3, #5
 8009fc8:	d826      	bhi.n	800a018 <UART_SetConfig+0x2cc>
 8009fca:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd0 <UART_SetConfig+0x284>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	08009fe9 	.word	0x08009fe9
 8009fd4:	08009ff1 	.word	0x08009ff1
 8009fd8:	08009ff9 	.word	0x08009ff9
 8009fdc:	0800a001 	.word	0x0800a001
 8009fe0:	0800a009 	.word	0x0800a009
 8009fe4:	0800a011 	.word	0x0800a011
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e284      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009ff0:	2304      	movs	r3, #4
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e280      	b.n	800a4fa <UART_SetConfig+0x7ae>
 8009ff8:	2308      	movs	r3, #8
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	e27c      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a000:	2310      	movs	r3, #16
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a006:	e278      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a008:	2320      	movs	r3, #32
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e274      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a010:	2340      	movs	r3, #64	@ 0x40
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a016:	e270      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a018:	2380      	movs	r3, #128	@ 0x80
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01e:	e26c      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a1b      	ldr	r2, [pc, #108]	@ (800a094 <UART_SetConfig+0x348>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d142      	bne.n	800a0b0 <UART_SetConfig+0x364>
 800a02a:	4b16      	ldr	r3, [pc, #88]	@ (800a084 <UART_SetConfig+0x338>)
 800a02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02e:	f003 0307 	and.w	r3, r3, #7
 800a032:	2b05      	cmp	r3, #5
 800a034:	d838      	bhi.n	800a0a8 <UART_SetConfig+0x35c>
 800a036:	a201      	add	r2, pc, #4	@ (adr r2, 800a03c <UART_SetConfig+0x2f0>)
 800a038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03c:	0800a055 	.word	0x0800a055
 800a040:	0800a05d 	.word	0x0800a05d
 800a044:	0800a065 	.word	0x0800a065
 800a048:	0800a06d 	.word	0x0800a06d
 800a04c:	0800a099 	.word	0x0800a099
 800a050:	0800a0a1 	.word	0x0800a0a1
 800a054:	2300      	movs	r3, #0
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05a:	e24e      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a05c:	2304      	movs	r3, #4
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a062:	e24a      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a064:	2308      	movs	r3, #8
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06a:	e246      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a06c:	2310      	movs	r3, #16
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a072:	e242      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a074:	cfff69f3 	.word	0xcfff69f3
 800a078:	58000c00 	.word	0x58000c00
 800a07c:	11fff4ff 	.word	0x11fff4ff
 800a080:	40011000 	.word	0x40011000
 800a084:	58024400 	.word	0x58024400
 800a088:	40004400 	.word	0x40004400
 800a08c:	40004800 	.word	0x40004800
 800a090:	40004c00 	.word	0x40004c00
 800a094:	40005000 	.word	0x40005000
 800a098:	2320      	movs	r3, #32
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09e:	e22c      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a0a0:	2340      	movs	r3, #64	@ 0x40
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a6:	e228      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a0a8:	2380      	movs	r3, #128	@ 0x80
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e224      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4ab1      	ldr	r2, [pc, #708]	@ (800a37c <UART_SetConfig+0x630>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d176      	bne.n	800a1a8 <UART_SetConfig+0x45c>
 800a0ba:	4bb1      	ldr	r3, [pc, #708]	@ (800a380 <UART_SetConfig+0x634>)
 800a0bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0c2:	2b28      	cmp	r3, #40	@ 0x28
 800a0c4:	d86c      	bhi.n	800a1a0 <UART_SetConfig+0x454>
 800a0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0cc <UART_SetConfig+0x380>)
 800a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0cc:	0800a171 	.word	0x0800a171
 800a0d0:	0800a1a1 	.word	0x0800a1a1
 800a0d4:	0800a1a1 	.word	0x0800a1a1
 800a0d8:	0800a1a1 	.word	0x0800a1a1
 800a0dc:	0800a1a1 	.word	0x0800a1a1
 800a0e0:	0800a1a1 	.word	0x0800a1a1
 800a0e4:	0800a1a1 	.word	0x0800a1a1
 800a0e8:	0800a1a1 	.word	0x0800a1a1
 800a0ec:	0800a179 	.word	0x0800a179
 800a0f0:	0800a1a1 	.word	0x0800a1a1
 800a0f4:	0800a1a1 	.word	0x0800a1a1
 800a0f8:	0800a1a1 	.word	0x0800a1a1
 800a0fc:	0800a1a1 	.word	0x0800a1a1
 800a100:	0800a1a1 	.word	0x0800a1a1
 800a104:	0800a1a1 	.word	0x0800a1a1
 800a108:	0800a1a1 	.word	0x0800a1a1
 800a10c:	0800a181 	.word	0x0800a181
 800a110:	0800a1a1 	.word	0x0800a1a1
 800a114:	0800a1a1 	.word	0x0800a1a1
 800a118:	0800a1a1 	.word	0x0800a1a1
 800a11c:	0800a1a1 	.word	0x0800a1a1
 800a120:	0800a1a1 	.word	0x0800a1a1
 800a124:	0800a1a1 	.word	0x0800a1a1
 800a128:	0800a1a1 	.word	0x0800a1a1
 800a12c:	0800a189 	.word	0x0800a189
 800a130:	0800a1a1 	.word	0x0800a1a1
 800a134:	0800a1a1 	.word	0x0800a1a1
 800a138:	0800a1a1 	.word	0x0800a1a1
 800a13c:	0800a1a1 	.word	0x0800a1a1
 800a140:	0800a1a1 	.word	0x0800a1a1
 800a144:	0800a1a1 	.word	0x0800a1a1
 800a148:	0800a1a1 	.word	0x0800a1a1
 800a14c:	0800a191 	.word	0x0800a191
 800a150:	0800a1a1 	.word	0x0800a1a1
 800a154:	0800a1a1 	.word	0x0800a1a1
 800a158:	0800a1a1 	.word	0x0800a1a1
 800a15c:	0800a1a1 	.word	0x0800a1a1
 800a160:	0800a1a1 	.word	0x0800a1a1
 800a164:	0800a1a1 	.word	0x0800a1a1
 800a168:	0800a1a1 	.word	0x0800a1a1
 800a16c:	0800a199 	.word	0x0800a199
 800a170:	2301      	movs	r3, #1
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e1c0      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a178:	2304      	movs	r3, #4
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e1bc      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a180:	2308      	movs	r3, #8
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e1b8      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a188:	2310      	movs	r3, #16
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e1b4      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a190:	2320      	movs	r3, #32
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a196:	e1b0      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a198:	2340      	movs	r3, #64	@ 0x40
 800a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19e:	e1ac      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a1a0:	2380      	movs	r3, #128	@ 0x80
 800a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a6:	e1a8      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a75      	ldr	r2, [pc, #468]	@ (800a384 <UART_SetConfig+0x638>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d130      	bne.n	800a214 <UART_SetConfig+0x4c8>
 800a1b2:	4b73      	ldr	r3, [pc, #460]	@ (800a380 <UART_SetConfig+0x634>)
 800a1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1b6:	f003 0307 	and.w	r3, r3, #7
 800a1ba:	2b05      	cmp	r3, #5
 800a1bc:	d826      	bhi.n	800a20c <UART_SetConfig+0x4c0>
 800a1be:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c4 <UART_SetConfig+0x478>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a1dd 	.word	0x0800a1dd
 800a1c8:	0800a1e5 	.word	0x0800a1e5
 800a1cc:	0800a1ed 	.word	0x0800a1ed
 800a1d0:	0800a1f5 	.word	0x0800a1f5
 800a1d4:	0800a1fd 	.word	0x0800a1fd
 800a1d8:	0800a205 	.word	0x0800a205
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e18a      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ea:	e186      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f2:	e182      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fa:	e17e      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a1fc:	2320      	movs	r3, #32
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a202:	e17a      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a204:	2340      	movs	r3, #64	@ 0x40
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20a:	e176      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a20c:	2380      	movs	r3, #128	@ 0x80
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a212:	e172      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a5b      	ldr	r2, [pc, #364]	@ (800a388 <UART_SetConfig+0x63c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d130      	bne.n	800a280 <UART_SetConfig+0x534>
 800a21e:	4b58      	ldr	r3, [pc, #352]	@ (800a380 <UART_SetConfig+0x634>)
 800a220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a222:	f003 0307 	and.w	r3, r3, #7
 800a226:	2b05      	cmp	r3, #5
 800a228:	d826      	bhi.n	800a278 <UART_SetConfig+0x52c>
 800a22a:	a201      	add	r2, pc, #4	@ (adr r2, 800a230 <UART_SetConfig+0x4e4>)
 800a22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a230:	0800a249 	.word	0x0800a249
 800a234:	0800a251 	.word	0x0800a251
 800a238:	0800a259 	.word	0x0800a259
 800a23c:	0800a261 	.word	0x0800a261
 800a240:	0800a269 	.word	0x0800a269
 800a244:	0800a271 	.word	0x0800a271
 800a248:	2300      	movs	r3, #0
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24e:	e154      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a250:	2304      	movs	r3, #4
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a256:	e150      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a258:	2308      	movs	r3, #8
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25e:	e14c      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a260:	2310      	movs	r3, #16
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a266:	e148      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a268:	2320      	movs	r3, #32
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26e:	e144      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a270:	2340      	movs	r3, #64	@ 0x40
 800a272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a276:	e140      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a278:	2380      	movs	r3, #128	@ 0x80
 800a27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27e:	e13c      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a41      	ldr	r2, [pc, #260]	@ (800a38c <UART_SetConfig+0x640>)
 800a286:	4293      	cmp	r3, r2
 800a288:	f040 8082 	bne.w	800a390 <UART_SetConfig+0x644>
 800a28c:	4b3c      	ldr	r3, [pc, #240]	@ (800a380 <UART_SetConfig+0x634>)
 800a28e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a290:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a294:	2b28      	cmp	r3, #40	@ 0x28
 800a296:	d86d      	bhi.n	800a374 <UART_SetConfig+0x628>
 800a298:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <UART_SetConfig+0x554>)
 800a29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29e:	bf00      	nop
 800a2a0:	0800a345 	.word	0x0800a345
 800a2a4:	0800a375 	.word	0x0800a375
 800a2a8:	0800a375 	.word	0x0800a375
 800a2ac:	0800a375 	.word	0x0800a375
 800a2b0:	0800a375 	.word	0x0800a375
 800a2b4:	0800a375 	.word	0x0800a375
 800a2b8:	0800a375 	.word	0x0800a375
 800a2bc:	0800a375 	.word	0x0800a375
 800a2c0:	0800a34d 	.word	0x0800a34d
 800a2c4:	0800a375 	.word	0x0800a375
 800a2c8:	0800a375 	.word	0x0800a375
 800a2cc:	0800a375 	.word	0x0800a375
 800a2d0:	0800a375 	.word	0x0800a375
 800a2d4:	0800a375 	.word	0x0800a375
 800a2d8:	0800a375 	.word	0x0800a375
 800a2dc:	0800a375 	.word	0x0800a375
 800a2e0:	0800a355 	.word	0x0800a355
 800a2e4:	0800a375 	.word	0x0800a375
 800a2e8:	0800a375 	.word	0x0800a375
 800a2ec:	0800a375 	.word	0x0800a375
 800a2f0:	0800a375 	.word	0x0800a375
 800a2f4:	0800a375 	.word	0x0800a375
 800a2f8:	0800a375 	.word	0x0800a375
 800a2fc:	0800a375 	.word	0x0800a375
 800a300:	0800a35d 	.word	0x0800a35d
 800a304:	0800a375 	.word	0x0800a375
 800a308:	0800a375 	.word	0x0800a375
 800a30c:	0800a375 	.word	0x0800a375
 800a310:	0800a375 	.word	0x0800a375
 800a314:	0800a375 	.word	0x0800a375
 800a318:	0800a375 	.word	0x0800a375
 800a31c:	0800a375 	.word	0x0800a375
 800a320:	0800a365 	.word	0x0800a365
 800a324:	0800a375 	.word	0x0800a375
 800a328:	0800a375 	.word	0x0800a375
 800a32c:	0800a375 	.word	0x0800a375
 800a330:	0800a375 	.word	0x0800a375
 800a334:	0800a375 	.word	0x0800a375
 800a338:	0800a375 	.word	0x0800a375
 800a33c:	0800a375 	.word	0x0800a375
 800a340:	0800a36d 	.word	0x0800a36d
 800a344:	2301      	movs	r3, #1
 800a346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34a:	e0d6      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a34c:	2304      	movs	r3, #4
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e0d2      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a354:	2308      	movs	r3, #8
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e0ce      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a35c:	2310      	movs	r3, #16
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a362:	e0ca      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a364:	2320      	movs	r3, #32
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36a:	e0c6      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a36c:	2340      	movs	r3, #64	@ 0x40
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a372:	e0c2      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a374:	2380      	movs	r3, #128	@ 0x80
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e0be      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a37c:	40011400 	.word	0x40011400
 800a380:	58024400 	.word	0x58024400
 800a384:	40007800 	.word	0x40007800
 800a388:	40007c00 	.word	0x40007c00
 800a38c:	40011800 	.word	0x40011800
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4aad      	ldr	r2, [pc, #692]	@ (800a64c <UART_SetConfig+0x900>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d176      	bne.n	800a488 <UART_SetConfig+0x73c>
 800a39a:	4bad      	ldr	r3, [pc, #692]	@ (800a650 <UART_SetConfig+0x904>)
 800a39c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a39e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a3a2:	2b28      	cmp	r3, #40	@ 0x28
 800a3a4:	d86c      	bhi.n	800a480 <UART_SetConfig+0x734>
 800a3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3ac <UART_SetConfig+0x660>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a451 	.word	0x0800a451
 800a3b0:	0800a481 	.word	0x0800a481
 800a3b4:	0800a481 	.word	0x0800a481
 800a3b8:	0800a481 	.word	0x0800a481
 800a3bc:	0800a481 	.word	0x0800a481
 800a3c0:	0800a481 	.word	0x0800a481
 800a3c4:	0800a481 	.word	0x0800a481
 800a3c8:	0800a481 	.word	0x0800a481
 800a3cc:	0800a459 	.word	0x0800a459
 800a3d0:	0800a481 	.word	0x0800a481
 800a3d4:	0800a481 	.word	0x0800a481
 800a3d8:	0800a481 	.word	0x0800a481
 800a3dc:	0800a481 	.word	0x0800a481
 800a3e0:	0800a481 	.word	0x0800a481
 800a3e4:	0800a481 	.word	0x0800a481
 800a3e8:	0800a481 	.word	0x0800a481
 800a3ec:	0800a461 	.word	0x0800a461
 800a3f0:	0800a481 	.word	0x0800a481
 800a3f4:	0800a481 	.word	0x0800a481
 800a3f8:	0800a481 	.word	0x0800a481
 800a3fc:	0800a481 	.word	0x0800a481
 800a400:	0800a481 	.word	0x0800a481
 800a404:	0800a481 	.word	0x0800a481
 800a408:	0800a481 	.word	0x0800a481
 800a40c:	0800a469 	.word	0x0800a469
 800a410:	0800a481 	.word	0x0800a481
 800a414:	0800a481 	.word	0x0800a481
 800a418:	0800a481 	.word	0x0800a481
 800a41c:	0800a481 	.word	0x0800a481
 800a420:	0800a481 	.word	0x0800a481
 800a424:	0800a481 	.word	0x0800a481
 800a428:	0800a481 	.word	0x0800a481
 800a42c:	0800a471 	.word	0x0800a471
 800a430:	0800a481 	.word	0x0800a481
 800a434:	0800a481 	.word	0x0800a481
 800a438:	0800a481 	.word	0x0800a481
 800a43c:	0800a481 	.word	0x0800a481
 800a440:	0800a481 	.word	0x0800a481
 800a444:	0800a481 	.word	0x0800a481
 800a448:	0800a481 	.word	0x0800a481
 800a44c:	0800a479 	.word	0x0800a479
 800a450:	2301      	movs	r3, #1
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a456:	e050      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a458:	2304      	movs	r3, #4
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45e:	e04c      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a460:	2308      	movs	r3, #8
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a466:	e048      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a468:	2310      	movs	r3, #16
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e044      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a470:	2320      	movs	r3, #32
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e040      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a478:	2340      	movs	r3, #64	@ 0x40
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47e:	e03c      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a480:	2380      	movs	r3, #128	@ 0x80
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a486:	e038      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a71      	ldr	r2, [pc, #452]	@ (800a654 <UART_SetConfig+0x908>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d130      	bne.n	800a4f4 <UART_SetConfig+0x7a8>
 800a492:	4b6f      	ldr	r3, [pc, #444]	@ (800a650 <UART_SetConfig+0x904>)
 800a494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	d826      	bhi.n	800a4ec <UART_SetConfig+0x7a0>
 800a49e:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a4 <UART_SetConfig+0x758>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4bd 	.word	0x0800a4bd
 800a4a8:	0800a4c5 	.word	0x0800a4c5
 800a4ac:	0800a4cd 	.word	0x0800a4cd
 800a4b0:	0800a4d5 	.word	0x0800a4d5
 800a4b4:	0800a4dd 	.word	0x0800a4dd
 800a4b8:	0800a4e5 	.word	0x0800a4e5
 800a4bc:	2302      	movs	r3, #2
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e01a      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ca:	e016      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a4cc:	2308      	movs	r3, #8
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d2:	e012      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a4d4:	2310      	movs	r3, #16
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4da:	e00e      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a4dc:	2320      	movs	r3, #32
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e00a      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a4e4:	2340      	movs	r3, #64	@ 0x40
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ea:	e006      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a4ec:	2380      	movs	r3, #128	@ 0x80
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f2:	e002      	b.n	800a4fa <UART_SetConfig+0x7ae>
 800a4f4:	2380      	movs	r3, #128	@ 0x80
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a55      	ldr	r2, [pc, #340]	@ (800a654 <UART_SetConfig+0x908>)
 800a500:	4293      	cmp	r3, r2
 800a502:	f040 80f8 	bne.w	800a6f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a506:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	dc46      	bgt.n	800a59c <UART_SetConfig+0x850>
 800a50e:	2b02      	cmp	r3, #2
 800a510:	db75      	blt.n	800a5fe <UART_SetConfig+0x8b2>
 800a512:	3b02      	subs	r3, #2
 800a514:	2b1e      	cmp	r3, #30
 800a516:	d872      	bhi.n	800a5fe <UART_SetConfig+0x8b2>
 800a518:	a201      	add	r2, pc, #4	@ (adr r2, 800a520 <UART_SetConfig+0x7d4>)
 800a51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51e:	bf00      	nop
 800a520:	0800a5a3 	.word	0x0800a5a3
 800a524:	0800a5ff 	.word	0x0800a5ff
 800a528:	0800a5ab 	.word	0x0800a5ab
 800a52c:	0800a5ff 	.word	0x0800a5ff
 800a530:	0800a5ff 	.word	0x0800a5ff
 800a534:	0800a5ff 	.word	0x0800a5ff
 800a538:	0800a5bb 	.word	0x0800a5bb
 800a53c:	0800a5ff 	.word	0x0800a5ff
 800a540:	0800a5ff 	.word	0x0800a5ff
 800a544:	0800a5ff 	.word	0x0800a5ff
 800a548:	0800a5ff 	.word	0x0800a5ff
 800a54c:	0800a5ff 	.word	0x0800a5ff
 800a550:	0800a5ff 	.word	0x0800a5ff
 800a554:	0800a5ff 	.word	0x0800a5ff
 800a558:	0800a5cb 	.word	0x0800a5cb
 800a55c:	0800a5ff 	.word	0x0800a5ff
 800a560:	0800a5ff 	.word	0x0800a5ff
 800a564:	0800a5ff 	.word	0x0800a5ff
 800a568:	0800a5ff 	.word	0x0800a5ff
 800a56c:	0800a5ff 	.word	0x0800a5ff
 800a570:	0800a5ff 	.word	0x0800a5ff
 800a574:	0800a5ff 	.word	0x0800a5ff
 800a578:	0800a5ff 	.word	0x0800a5ff
 800a57c:	0800a5ff 	.word	0x0800a5ff
 800a580:	0800a5ff 	.word	0x0800a5ff
 800a584:	0800a5ff 	.word	0x0800a5ff
 800a588:	0800a5ff 	.word	0x0800a5ff
 800a58c:	0800a5ff 	.word	0x0800a5ff
 800a590:	0800a5ff 	.word	0x0800a5ff
 800a594:	0800a5ff 	.word	0x0800a5ff
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	2b40      	cmp	r3, #64	@ 0x40
 800a59e:	d02a      	beq.n	800a5f6 <UART_SetConfig+0x8aa>
 800a5a0:	e02d      	b.n	800a5fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a5a2:	f7fb febb 	bl	800631c <HAL_RCCEx_GetD3PCLK1Freq>
 800a5a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5a8:	e02f      	b.n	800a60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fb feca 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b8:	e027      	b.n	800a60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ba:	f107 0318 	add.w	r3, r7, #24
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fc f816 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c8:	e01f      	b.n	800a60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5ca:	4b21      	ldr	r3, [pc, #132]	@ (800a650 <UART_SetConfig+0x904>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d009      	beq.n	800a5ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5d6:	4b1e      	ldr	r3, [pc, #120]	@ (800a650 <UART_SetConfig+0x904>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	08db      	lsrs	r3, r3, #3
 800a5dc:	f003 0303 	and.w	r3, r3, #3
 800a5e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a658 <UART_SetConfig+0x90c>)
 800a5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5e8:	e00f      	b.n	800a60a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800a658 <UART_SetConfig+0x90c>)
 800a5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ee:	e00c      	b.n	800a60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a65c <UART_SetConfig+0x910>)
 800a5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f4:	e009      	b.n	800a60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5fc:	e005      	b.n	800a60a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a608:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 81ee 	beq.w	800a9ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a616:	4a12      	ldr	r2, [pc, #72]	@ (800a660 <UART_SetConfig+0x914>)
 800a618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a61c:	461a      	mov	r2, r3
 800a61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a620:	fbb3 f3f2 	udiv	r3, r3, r2
 800a624:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	4613      	mov	r3, r2
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	4413      	add	r3, r2
 800a630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a632:	429a      	cmp	r2, r3
 800a634:	d305      	bcc.n	800a642 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a63c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a63e:	429a      	cmp	r2, r3
 800a640:	d910      	bls.n	800a664 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a648:	e1d1      	b.n	800a9ee <UART_SetConfig+0xca2>
 800a64a:	bf00      	nop
 800a64c:	40011c00 	.word	0x40011c00
 800a650:	58024400 	.word	0x58024400
 800a654:	58000c00 	.word	0x58000c00
 800a658:	03d09000 	.word	0x03d09000
 800a65c:	003d0900 	.word	0x003d0900
 800a660:	080107d4 	.word	0x080107d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a666:	2200      	movs	r2, #0
 800a668:	60bb      	str	r3, [r7, #8]
 800a66a:	60fa      	str	r2, [r7, #12]
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a670:	4ac0      	ldr	r2, [pc, #768]	@ (800a974 <UART_SetConfig+0xc28>)
 800a672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a676:	b29b      	uxth	r3, r3
 800a678:	2200      	movs	r2, #0
 800a67a:	603b      	str	r3, [r7, #0]
 800a67c:	607a      	str	r2, [r7, #4]
 800a67e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a686:	f7f6 f857 	bl	8000738 <__aeabi_uldivmod>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	4610      	mov	r0, r2
 800a690:	4619      	mov	r1, r3
 800a692:	f04f 0200 	mov.w	r2, #0
 800a696:	f04f 0300 	mov.w	r3, #0
 800a69a:	020b      	lsls	r3, r1, #8
 800a69c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6a0:	0202      	lsls	r2, r0, #8
 800a6a2:	6979      	ldr	r1, [r7, #20]
 800a6a4:	6849      	ldr	r1, [r1, #4]
 800a6a6:	0849      	lsrs	r1, r1, #1
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	eb12 0804 	adds.w	r8, r2, r4
 800a6b2:	eb43 0905 	adc.w	r9, r3, r5
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	469a      	mov	sl, r3
 800a6be:	4693      	mov	fp, r2
 800a6c0:	4652      	mov	r2, sl
 800a6c2:	465b      	mov	r3, fp
 800a6c4:	4640      	mov	r0, r8
 800a6c6:	4649      	mov	r1, r9
 800a6c8:	f7f6 f836 	bl	8000738 <__aeabi_uldivmod>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6da:	d308      	bcc.n	800a6ee <UART_SetConfig+0x9a2>
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6e2:	d204      	bcs.n	800a6ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6ea:	60da      	str	r2, [r3, #12]
 800a6ec:	e17f      	b.n	800a9ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a6f4:	e17b      	b.n	800a9ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6fe:	f040 80bd 	bne.w	800a87c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a702:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a706:	2b20      	cmp	r3, #32
 800a708:	dc48      	bgt.n	800a79c <UART_SetConfig+0xa50>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	db7b      	blt.n	800a806 <UART_SetConfig+0xaba>
 800a70e:	2b20      	cmp	r3, #32
 800a710:	d879      	bhi.n	800a806 <UART_SetConfig+0xaba>
 800a712:	a201      	add	r2, pc, #4	@ (adr r2, 800a718 <UART_SetConfig+0x9cc>)
 800a714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a718:	0800a7a3 	.word	0x0800a7a3
 800a71c:	0800a7ab 	.word	0x0800a7ab
 800a720:	0800a807 	.word	0x0800a807
 800a724:	0800a807 	.word	0x0800a807
 800a728:	0800a7b3 	.word	0x0800a7b3
 800a72c:	0800a807 	.word	0x0800a807
 800a730:	0800a807 	.word	0x0800a807
 800a734:	0800a807 	.word	0x0800a807
 800a738:	0800a7c3 	.word	0x0800a7c3
 800a73c:	0800a807 	.word	0x0800a807
 800a740:	0800a807 	.word	0x0800a807
 800a744:	0800a807 	.word	0x0800a807
 800a748:	0800a807 	.word	0x0800a807
 800a74c:	0800a807 	.word	0x0800a807
 800a750:	0800a807 	.word	0x0800a807
 800a754:	0800a807 	.word	0x0800a807
 800a758:	0800a7d3 	.word	0x0800a7d3
 800a75c:	0800a807 	.word	0x0800a807
 800a760:	0800a807 	.word	0x0800a807
 800a764:	0800a807 	.word	0x0800a807
 800a768:	0800a807 	.word	0x0800a807
 800a76c:	0800a807 	.word	0x0800a807
 800a770:	0800a807 	.word	0x0800a807
 800a774:	0800a807 	.word	0x0800a807
 800a778:	0800a807 	.word	0x0800a807
 800a77c:	0800a807 	.word	0x0800a807
 800a780:	0800a807 	.word	0x0800a807
 800a784:	0800a807 	.word	0x0800a807
 800a788:	0800a807 	.word	0x0800a807
 800a78c:	0800a807 	.word	0x0800a807
 800a790:	0800a807 	.word	0x0800a807
 800a794:	0800a807 	.word	0x0800a807
 800a798:	0800a7f9 	.word	0x0800a7f9
 800a79c:	2b40      	cmp	r3, #64	@ 0x40
 800a79e:	d02e      	beq.n	800a7fe <UART_SetConfig+0xab2>
 800a7a0:	e031      	b.n	800a806 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7a2:	f7f9 fedb 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 800a7a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7a8:	e033      	b.n	800a812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7aa:	f7f9 feed 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 800a7ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7b0:	e02f      	b.n	800a812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fb fdc6 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c0:	e027      	b.n	800a812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7c2:	f107 0318 	add.w	r3, r7, #24
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fb ff12 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7d0:	e01f      	b.n	800a812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7d2:	4b69      	ldr	r3, [pc, #420]	@ (800a978 <UART_SetConfig+0xc2c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0320 	and.w	r3, r3, #32
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d009      	beq.n	800a7f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7de:	4b66      	ldr	r3, [pc, #408]	@ (800a978 <UART_SetConfig+0xc2c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	08db      	lsrs	r3, r3, #3
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	4a64      	ldr	r2, [pc, #400]	@ (800a97c <UART_SetConfig+0xc30>)
 800a7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7f0:	e00f      	b.n	800a812 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a7f2:	4b62      	ldr	r3, [pc, #392]	@ (800a97c <UART_SetConfig+0xc30>)
 800a7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f6:	e00c      	b.n	800a812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7f8:	4b61      	ldr	r3, [pc, #388]	@ (800a980 <UART_SetConfig+0xc34>)
 800a7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7fc:	e009      	b.n	800a812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a804:	e005      	b.n	800a812 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 80ea 	beq.w	800a9ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81e:	4a55      	ldr	r2, [pc, #340]	@ (800a974 <UART_SetConfig+0xc28>)
 800a820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a824:	461a      	mov	r2, r3
 800a826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a828:	fbb3 f3f2 	udiv	r3, r3, r2
 800a82c:	005a      	lsls	r2, r3, #1
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	085b      	lsrs	r3, r3, #1
 800a834:	441a      	add	r2, r3
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a83e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a842:	2b0f      	cmp	r3, #15
 800a844:	d916      	bls.n	800a874 <UART_SetConfig+0xb28>
 800a846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a84c:	d212      	bcs.n	800a874 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a850:	b29b      	uxth	r3, r3
 800a852:	f023 030f 	bic.w	r3, r3, #15
 800a856:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85a:	085b      	lsrs	r3, r3, #1
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	f003 0307 	and.w	r3, r3, #7
 800a862:	b29a      	uxth	r2, r3
 800a864:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a866:	4313      	orrs	r3, r2
 800a868:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a870:	60da      	str	r2, [r3, #12]
 800a872:	e0bc      	b.n	800a9ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a87a:	e0b8      	b.n	800a9ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a87c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a880:	2b20      	cmp	r3, #32
 800a882:	dc4b      	bgt.n	800a91c <UART_SetConfig+0xbd0>
 800a884:	2b00      	cmp	r3, #0
 800a886:	f2c0 8087 	blt.w	800a998 <UART_SetConfig+0xc4c>
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	f200 8084 	bhi.w	800a998 <UART_SetConfig+0xc4c>
 800a890:	a201      	add	r2, pc, #4	@ (adr r2, 800a898 <UART_SetConfig+0xb4c>)
 800a892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a896:	bf00      	nop
 800a898:	0800a923 	.word	0x0800a923
 800a89c:	0800a92b 	.word	0x0800a92b
 800a8a0:	0800a999 	.word	0x0800a999
 800a8a4:	0800a999 	.word	0x0800a999
 800a8a8:	0800a933 	.word	0x0800a933
 800a8ac:	0800a999 	.word	0x0800a999
 800a8b0:	0800a999 	.word	0x0800a999
 800a8b4:	0800a999 	.word	0x0800a999
 800a8b8:	0800a943 	.word	0x0800a943
 800a8bc:	0800a999 	.word	0x0800a999
 800a8c0:	0800a999 	.word	0x0800a999
 800a8c4:	0800a999 	.word	0x0800a999
 800a8c8:	0800a999 	.word	0x0800a999
 800a8cc:	0800a999 	.word	0x0800a999
 800a8d0:	0800a999 	.word	0x0800a999
 800a8d4:	0800a999 	.word	0x0800a999
 800a8d8:	0800a953 	.word	0x0800a953
 800a8dc:	0800a999 	.word	0x0800a999
 800a8e0:	0800a999 	.word	0x0800a999
 800a8e4:	0800a999 	.word	0x0800a999
 800a8e8:	0800a999 	.word	0x0800a999
 800a8ec:	0800a999 	.word	0x0800a999
 800a8f0:	0800a999 	.word	0x0800a999
 800a8f4:	0800a999 	.word	0x0800a999
 800a8f8:	0800a999 	.word	0x0800a999
 800a8fc:	0800a999 	.word	0x0800a999
 800a900:	0800a999 	.word	0x0800a999
 800a904:	0800a999 	.word	0x0800a999
 800a908:	0800a999 	.word	0x0800a999
 800a90c:	0800a999 	.word	0x0800a999
 800a910:	0800a999 	.word	0x0800a999
 800a914:	0800a999 	.word	0x0800a999
 800a918:	0800a98b 	.word	0x0800a98b
 800a91c:	2b40      	cmp	r3, #64	@ 0x40
 800a91e:	d037      	beq.n	800a990 <UART_SetConfig+0xc44>
 800a920:	e03a      	b.n	800a998 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a922:	f7f9 fe1b 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 800a926:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a928:	e03c      	b.n	800a9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a92a:	f7f9 fe2d 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 800a92e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a930:	e038      	b.n	800a9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a936:	4618      	mov	r0, r3
 800a938:	f7fb fd06 	bl	8006348 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a940:	e030      	b.n	800a9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a942:	f107 0318 	add.w	r3, r7, #24
 800a946:	4618      	mov	r0, r3
 800a948:	f7fb fe52 	bl	80065f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a950:	e028      	b.n	800a9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a952:	4b09      	ldr	r3, [pc, #36]	@ (800a978 <UART_SetConfig+0xc2c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0320 	and.w	r3, r3, #32
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d012      	beq.n	800a984 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a95e:	4b06      	ldr	r3, [pc, #24]	@ (800a978 <UART_SetConfig+0xc2c>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	08db      	lsrs	r3, r3, #3
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	4a04      	ldr	r2, [pc, #16]	@ (800a97c <UART_SetConfig+0xc30>)
 800a96a:	fa22 f303 	lsr.w	r3, r2, r3
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a970:	e018      	b.n	800a9a4 <UART_SetConfig+0xc58>
 800a972:	bf00      	nop
 800a974:	080107d4 	.word	0x080107d4
 800a978:	58024400 	.word	0x58024400
 800a97c:	03d09000 	.word	0x03d09000
 800a980:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a984:	4b24      	ldr	r3, [pc, #144]	@ (800aa18 <UART_SetConfig+0xccc>)
 800a986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a988:	e00c      	b.n	800a9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a98a:	4b24      	ldr	r3, [pc, #144]	@ (800aa1c <UART_SetConfig+0xcd0>)
 800a98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98e:	e009      	b.n	800a9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a990:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a996:	e005      	b.n	800a9a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a998:	2300      	movs	r3, #0
 800a99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a9a2:	bf00      	nop
    }

    if (pclk != 0U)
 800a9a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d021      	beq.n	800a9ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ae:	4a1c      	ldr	r2, [pc, #112]	@ (800aa20 <UART_SetConfig+0xcd4>)
 800a9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	085b      	lsrs	r3, r3, #1
 800a9c2:	441a      	add	r2, r3
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d0:	2b0f      	cmp	r3, #15
 800a9d2:	d909      	bls.n	800a9e8 <UART_SetConfig+0xc9c>
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9da:	d205      	bcs.n	800a9e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	60da      	str	r2, [r3, #12]
 800a9e6:	e002      	b.n	800a9ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2200      	movs	r2, #0
 800aa02:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2200      	movs	r2, #0
 800aa08:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa0a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3748      	adds	r7, #72	@ 0x48
 800aa12:	46bd      	mov	sp, r7
 800aa14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa18:	03d09000 	.word	0x03d09000
 800aa1c:	003d0900 	.word	0x003d0900
 800aa20:	080107d4 	.word	0x080107d4

0800aa24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa30:	f003 0308 	and.w	r3, r3, #8
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00a      	beq.n	800aa4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00a      	beq.n	800aa92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	430a      	orrs	r2, r1
 800aa90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa96:	f003 0304 	and.w	r3, r3, #4
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00a      	beq.n	800aab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	430a      	orrs	r2, r1
 800aab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab8:	f003 0310 	and.w	r3, r3, #16
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00a      	beq.n	800aad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	430a      	orrs	r2, r1
 800aad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aada:	f003 0320 	and.w	r3, r3, #32
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00a      	beq.n	800aaf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	430a      	orrs	r2, r1
 800aaf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d01a      	beq.n	800ab3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab22:	d10a      	bne.n	800ab3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	430a      	orrs	r2, r1
 800ab38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00a      	beq.n	800ab5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	430a      	orrs	r2, r1
 800ab5a:	605a      	str	r2, [r3, #4]
  }
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b098      	sub	sp, #96	@ 0x60
 800ab6c:	af02      	add	r7, sp, #8
 800ab6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab78:	f7f7 fb82 	bl	8002280 <HAL_GetTick>
 800ab7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0308 	and.w	r3, r3, #8
 800ab88:	2b08      	cmp	r3, #8
 800ab8a:	d12f      	bne.n	800abec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab94:	2200      	movs	r2, #0
 800ab96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f88e 	bl	800acbc <UART_WaitOnFlagUntilTimeout>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d022      	beq.n	800abec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abae:	e853 3f00 	ldrex	r3, [r3]
 800abb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abba:	653b      	str	r3, [r7, #80]	@ 0x50
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800abc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abcc:	e841 2300 	strex	r3, r2, [r1]
 800abd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1e6      	bne.n	800aba6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2220      	movs	r2, #32
 800abdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e063      	b.n	800acb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0304 	and.w	r3, r3, #4
 800abf6:	2b04      	cmp	r3, #4
 800abf8:	d149      	bne.n	800ac8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abfa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac02:	2200      	movs	r2, #0
 800ac04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f857 	bl	800acbc <UART_WaitOnFlagUntilTimeout>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d03c      	beq.n	800ac8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1c:	e853 3f00 	ldrex	r3, [r3]
 800ac20:	623b      	str	r3, [r7, #32]
   return(result);
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac32:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac3a:	e841 2300 	strex	r3, r2, [r1]
 800ac3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1e6      	bne.n	800ac14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f023 0301 	bic.w	r3, r3, #1
 800ac5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3308      	adds	r3, #8
 800ac64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac66:	61fa      	str	r2, [r7, #28]
 800ac68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	69b9      	ldr	r1, [r7, #24]
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	617b      	str	r3, [r7, #20]
   return(result);
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1e5      	bne.n	800ac46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e012      	b.n	800acb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2220      	movs	r2, #32
 800ac92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2220      	movs	r2, #32
 800ac9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3758      	adds	r7, #88	@ 0x58
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	4613      	mov	r3, r2
 800acca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800accc:	e04f      	b.n	800ad6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acd4:	d04b      	beq.n	800ad6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acd6:	f7f7 fad3 	bl	8002280 <HAL_GetTick>
 800acda:	4602      	mov	r2, r0
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	69ba      	ldr	r2, [r7, #24]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d302      	bcc.n	800acec <UART_WaitOnFlagUntilTimeout+0x30>
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800acec:	2303      	movs	r3, #3
 800acee:	e04e      	b.n	800ad8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 0304 	and.w	r3, r3, #4
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d037      	beq.n	800ad6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2b80      	cmp	r3, #128	@ 0x80
 800ad02:	d034      	beq.n	800ad6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b40      	cmp	r3, #64	@ 0x40
 800ad08:	d031      	beq.n	800ad6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	69db      	ldr	r3, [r3, #28]
 800ad10:	f003 0308 	and.w	r3, r3, #8
 800ad14:	2b08      	cmp	r3, #8
 800ad16:	d110      	bne.n	800ad3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2208      	movs	r2, #8
 800ad1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 f839 	bl	800ad98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2208      	movs	r2, #8
 800ad2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e029      	b.n	800ad8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	69db      	ldr	r3, [r3, #28]
 800ad40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad48:	d111      	bne.n	800ad6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 f81f 	bl	800ad98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	e00f      	b.n	800ad8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	69da      	ldr	r2, [r3, #28]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	4013      	ands	r3, r2
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	bf0c      	ite	eq
 800ad7e:	2301      	moveq	r3, #1
 800ad80:	2300      	movne	r3, #0
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	461a      	mov	r2, r3
 800ad86:	79fb      	ldrb	r3, [r7, #7]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d0a0      	beq.n	800acce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b095      	sub	sp, #84	@ 0x54
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada8:	e853 3f00 	ldrex	r3, [r3]
 800adac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800adae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800adb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adbe:	643b      	str	r3, [r7, #64]	@ 0x40
 800adc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800adc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800adc6:	e841 2300 	strex	r3, r2, [r1]
 800adca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e6      	bne.n	800ada0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3308      	adds	r3, #8
 800add8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	e853 3f00 	ldrex	r3, [r3]
 800ade0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ade2:	69fa      	ldr	r2, [r7, #28]
 800ade4:	4b1e      	ldr	r3, [pc, #120]	@ (800ae60 <UART_EndRxTransfer+0xc8>)
 800ade6:	4013      	ands	r3, r2
 800ade8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3308      	adds	r3, #8
 800adf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adfa:	e841 2300 	strex	r3, r2, [r1]
 800adfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1e5      	bne.n	800add2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d118      	bne.n	800ae40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	e853 3f00 	ldrex	r3, [r3]
 800ae1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	f023 0310 	bic.w	r3, r3, #16
 800ae22:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae2c:	61bb      	str	r3, [r7, #24]
 800ae2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae30:	6979      	ldr	r1, [r7, #20]
 800ae32:	69ba      	ldr	r2, [r7, #24]
 800ae34:	e841 2300 	strex	r3, r2, [r1]
 800ae38:	613b      	str	r3, [r7, #16]
   return(result);
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e6      	bne.n	800ae0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ae54:	bf00      	nop
 800ae56:	3754      	adds	r7, #84	@ 0x54
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr
 800ae60:	effffffe 	.word	0xeffffffe

0800ae64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f7fe ff4c 	bl	8009d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae88:	bf00      	nop
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b088      	sub	sp, #32
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	e853 3f00 	ldrex	r3, [r3]
 800aea4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeac:	61fb      	str	r3, [r7, #28]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	61bb      	str	r3, [r7, #24]
 800aeb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeba:	6979      	ldr	r1, [r7, #20]
 800aebc:	69ba      	ldr	r2, [r7, #24]
 800aebe:	e841 2300 	strex	r3, r2, [r1]
 800aec2:	613b      	str	r3, [r7, #16]
   return(result);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1e6      	bne.n	800ae98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2220      	movs	r2, #32
 800aece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7fe ff17 	bl	8009d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aede:	bf00      	nop
 800aee0:	3720      	adds	r7, #32
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af02:	bf00      	nop
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr

0800af0e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af22:	b480      	push	{r7}
 800af24:	b085      	sub	sp, #20
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af30:	2b01      	cmp	r3, #1
 800af32:	d101      	bne.n	800af38 <HAL_UARTEx_DisableFifoMode+0x16>
 800af34:	2302      	movs	r3, #2
 800af36:	e027      	b.n	800af88 <HAL_UARTEx_DisableFifoMode+0x66>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2224      	movs	r2, #36	@ 0x24
 800af44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0201 	bic.w	r2, r2, #1
 800af5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2220      	movs	r2, #32
 800af7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d101      	bne.n	800afac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800afa8:	2302      	movs	r3, #2
 800afaa:	e02d      	b.n	800b008 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2224      	movs	r2, #36	@ 0x24
 800afb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f022 0201 	bic.w	r2, r2, #1
 800afd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	430a      	orrs	r2, r1
 800afe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f84f 	bl	800b08c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2220      	movs	r2, #32
 800affa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b020:	2b01      	cmp	r3, #1
 800b022:	d101      	bne.n	800b028 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b024:	2302      	movs	r3, #2
 800b026:	e02d      	b.n	800b084 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2224      	movs	r2, #36	@ 0x24
 800b034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f022 0201 	bic.w	r2, r2, #1
 800b04e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f811 	bl	800b08c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d108      	bne.n	800b0ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0ac:	e031      	b.n	800b112 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0ae:	2310      	movs	r3, #16
 800b0b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0b2:	2310      	movs	r3, #16
 800b0b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	0e5b      	lsrs	r3, r3, #25
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	f003 0307 	and.w	r3, r3, #7
 800b0c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	0f5b      	lsrs	r3, r3, #29
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	f003 0307 	and.w	r3, r3, #7
 800b0d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
 800b0d8:	7b3a      	ldrb	r2, [r7, #12]
 800b0da:	4911      	ldr	r1, [pc, #68]	@ (800b120 <UARTEx_SetNbDataToProcess+0x94>)
 800b0dc:	5c8a      	ldrb	r2, [r1, r2]
 800b0de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0e2:	7b3a      	ldrb	r2, [r7, #12]
 800b0e4:	490f      	ldr	r1, [pc, #60]	@ (800b124 <UARTEx_SetNbDataToProcess+0x98>)
 800b0e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	7b7a      	ldrb	r2, [r7, #13]
 800b0f8:	4909      	ldr	r1, [pc, #36]	@ (800b120 <UARTEx_SetNbDataToProcess+0x94>)
 800b0fa:	5c8a      	ldrb	r2, [r1, r2]
 800b0fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b100:	7b7a      	ldrb	r2, [r7, #13]
 800b102:	4908      	ldr	r1, [pc, #32]	@ (800b124 <UARTEx_SetNbDataToProcess+0x98>)
 800b104:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b106:	fb93 f3f2 	sdiv	r3, r3, r2
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b112:	bf00      	nop
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	080107ec 	.word	0x080107ec
 800b124:	080107f4 	.word	0x080107f4

0800b128 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b128:	b084      	sub	sp, #16
 800b12a:	b480      	push	{r7}
 800b12c:	b085      	sub	sp, #20
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	f107 001c 	add.w	r0, r7, #28
 800b136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b13e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b140:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b142:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b146:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b14a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b14e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	4b07      	ldr	r3, [pc, #28]	@ (800b178 <SDMMC_Init+0x50>)
 800b15c:	4013      	ands	r3, r2
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	431a      	orrs	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	b004      	add	sp, #16
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	ffc02c00 	.word	0xffc02c00

0800b17c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f043 0203 	orr.w	r2, r3, #3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b083      	sub	sp, #12
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0303 	and.w	r3, r3, #3
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
	...

0800b1f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b216:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b21c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b222:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4313      	orrs	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	4b06      	ldr	r3, [pc, #24]	@ (800b248 <SDMMC_SendCommand+0x50>)
 800b230:	4013      	ands	r3, r2
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	431a      	orrs	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	fffee0c0 	.word	0xfffee0c0

0800b24c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	b2db      	uxtb	r3, r3
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b266:	b480      	push	{r7}
 800b268:	b085      	sub	sp, #20
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3314      	adds	r3, #20
 800b274:	461a      	mov	r2, r3
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	4413      	add	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b2b2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b2b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b2be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	431a      	orrs	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b2d6:	2300      	movs	r3, #0

}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b2f2:	2310      	movs	r3, #16
 800b2f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b304:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b306:	f107 0308 	add.w	r3, r7, #8
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7ff ff73 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b312:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b316:	2110      	movs	r1, #16
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fa5f 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b31e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b320:	69fb      	ldr	r3, [r7, #28]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3720      	adds	r7, #32
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b088      	sub	sp, #32
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b338:	2311      	movs	r3, #17
 800b33a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b33c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b342:	2300      	movs	r3, #0
 800b344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b346:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b34a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b34c:	f107 0308 	add.w	r3, r7, #8
 800b350:	4619      	mov	r1, r3
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7ff ff50 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b35c:	2111      	movs	r1, #17
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa3c 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b366:	69fb      	ldr	r3, [r7, #28]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3720      	adds	r7, #32
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b37e:	2312      	movs	r3, #18
 800b380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b38c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b390:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b392:	f107 0308 	add.w	r3, r7, #8
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff ff2d 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b39e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3a2:	2112      	movs	r1, #18
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fa19 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3720      	adds	r7, #32
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b088      	sub	sp, #32
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b3c4:	2318      	movs	r3, #24
 800b3c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3d8:	f107 0308 	add.w	r3, r7, #8
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7ff ff0a 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3e8:	2118      	movs	r1, #24
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f9f6 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b3f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3f2:	69fb      	ldr	r3, [r7, #28]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3720      	adds	r7, #32
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b088      	sub	sp, #32
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b40a:	2319      	movs	r3, #25
 800b40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b40e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b414:	2300      	movs	r3, #0
 800b416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b41c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b41e:	f107 0308 	add.w	r3, r7, #8
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff fee7 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b42a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b42e:	2119      	movs	r1, #25
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 f9d3 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b438:	69fb      	ldr	r3, [r7, #28]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b44c:	2300      	movs	r3, #0
 800b44e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b450:	230c      	movs	r3, #12
 800b452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b458:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b45a:	2300      	movs	r3, #0
 800b45c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b45e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b462:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b47c:	f107 0308 	add.w	r3, r7, #8
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff feb8 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b488:	4a0b      	ldr	r2, [pc, #44]	@ (800b4b8 <SDMMC_CmdStopTransfer+0x74>)
 800b48a:	210c      	movs	r1, #12
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f9a5 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b492:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4a6:	d101      	bne.n	800b4ac <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b4ac:	69fb      	ldr	r3, [r7, #28]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3720      	adds	r7, #32
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	05f5e100 	.word	0x05f5e100

0800b4bc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b088      	sub	sp, #32
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b4ca:	2307      	movs	r3, #7
 800b4cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4de:	f107 0308 	add.w	r3, r7, #8
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7ff fe87 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b4ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4ee:	2107      	movs	r1, #7
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 f973 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b4f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4f8:	69fb      	ldr	r3, [r7, #28]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3720      	adds	r7, #32
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b088      	sub	sp, #32
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b50a:	2300      	movs	r3, #0
 800b50c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b512:	2300      	movs	r3, #0
 800b514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b516:	2300      	movs	r3, #0
 800b518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b51a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b51e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b520:	f107 0308 	add.w	r3, r7, #8
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7ff fe66 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fb97 	bl	800bc60 <SDMMC_GetCmdError>
 800b532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b534:	69fb      	ldr	r3, [r7, #28]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3720      	adds	r7, #32
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b088      	sub	sp, #32
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b546:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b54a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b54c:	2308      	movs	r3, #8
 800b54e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b556:	2300      	movs	r3, #0
 800b558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b55a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b55e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b560:	f107 0308 	add.w	r3, r7, #8
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff fe46 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fb29 	bl	800bbc4 <SDMMC_GetCmdResp7>
 800b572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b574:	69fb      	ldr	r3, [r7, #28]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3720      	adds	r7, #32
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b088      	sub	sp, #32
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b58c:	2337      	movs	r3, #55	@ 0x37
 800b58e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b596:	2300      	movs	r3, #0
 800b598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b59a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b59e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5a0:	f107 0308 	add.w	r3, r7, #8
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff fe26 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b5ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5b0:	2137      	movs	r1, #55	@ 0x37
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f912 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b5b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ba:	69fb      	ldr	r3, [r7, #28]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3720      	adds	r7, #32
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b5d2:	2329      	movs	r3, #41	@ 0x29
 800b5d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5e6:	f107 0308 	add.w	r3, r7, #8
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff fe03 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fa2e 	bl	800ba54 <SDMMC_GetCmdResp3>
 800b5f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3720      	adds	r7, #32
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b612:	2306      	movs	r3, #6
 800b614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff fde3 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b632:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b636:	2106      	movs	r1, #6
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f8cf 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b63e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b640:	69fb      	ldr	r3, [r7, #28]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3720      	adds	r7, #32
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b088      	sub	sp, #32
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b652:	2300      	movs	r3, #0
 800b654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b656:	2333      	movs	r3, #51	@ 0x33
 800b658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b65a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b65e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b660:	2300      	movs	r3, #0
 800b662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b66a:	f107 0308 	add.w	r3, r7, #8
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7ff fdc1 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b67a:	2133      	movs	r1, #51	@ 0x33
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f8ad 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b684:	69fb      	ldr	r3, [r7, #28]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b088      	sub	sp, #32
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b696:	2300      	movs	r3, #0
 800b698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b69a:	2302      	movs	r3, #2
 800b69c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b69e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b6a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ae:	f107 0308 	add.w	r3, r7, #8
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff fd9f 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f980 	bl	800b9c0 <SDMMC_GetCmdResp2>
 800b6c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c2:	69fb      	ldr	r3, [r7, #28]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b088      	sub	sp, #32
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b6da:	2309      	movs	r3, #9
 800b6dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b6e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ee:	f107 0308 	add.w	r3, r7, #8
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7ff fd7f 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f960 	bl	800b9c0 <SDMMC_GetCmdResp2>
 800b700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b702:	69fb      	ldr	r3, [r7, #28]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3720      	adds	r7, #32
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b088      	sub	sp, #32
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b71a:	2303      	movs	r3, #3
 800b71c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b71e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b724:	2300      	movs	r3, #0
 800b726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b72c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b72e:	f107 0308 	add.w	r3, r7, #8
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f7ff fd5f 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	2103      	movs	r1, #3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f9c8 	bl	800bad4 <SDMMC_GetCmdResp6>
 800b744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b746:	69fb      	ldr	r3, [r7, #28]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3720      	adds	r7, #32
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b75e:	230d      	movs	r3, #13
 800b760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b768:	2300      	movs	r3, #0
 800b76a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b76c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b772:	f107 0308 	add.w	r3, r7, #8
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7ff fd3d 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b77e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b782:	210d      	movs	r1, #13
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f829 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b78a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b78c:	69fb      	ldr	r3, [r7, #28]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3720      	adds	r7, #32
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b088      	sub	sp, #32
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b7a2:	230d      	movs	r3, #13
 800b7a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7b6:	f107 0308 	add.w	r3, r7, #8
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff fd1b 	bl	800b1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b7c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7c6:	210d      	movs	r1, #13
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f807 	bl	800b7dc <SDMMC_GetCmdResp1>
 800b7ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7d0:	69fb      	ldr	r3, [r7, #28]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3720      	adds	r7, #32
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b088      	sub	sp, #32
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7ea:	4b70      	ldr	r3, [pc, #448]	@ (800b9ac <SDMMC_GetCmdResp1+0x1d0>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a70      	ldr	r2, [pc, #448]	@ (800b9b0 <SDMMC_GetCmdResp1+0x1d4>)
 800b7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7f4:	0a5a      	lsrs	r2, r3, #9
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	fb02 f303 	mul.w	r3, r2, r3
 800b7fc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	1e5a      	subs	r2, r3, #1
 800b802:	61fa      	str	r2, [r7, #28]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b808:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b80c:	e0c9      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b812:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b814:	69ba      	ldr	r2, [r7, #24]
 800b816:	4b67      	ldr	r3, [pc, #412]	@ (800b9b4 <SDMMC_GetCmdResp1+0x1d8>)
 800b818:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0ef      	beq.n	800b7fe <SDMMC_GetCmdResp1+0x22>
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1ea      	bne.n	800b7fe <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b82c:	f003 0304 	and.w	r3, r3, #4
 800b830:	2b00      	cmp	r3, #0
 800b832:	d004      	beq.n	800b83e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2204      	movs	r2, #4
 800b838:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b83a:	2304      	movs	r3, #4
 800b83c:	e0b1      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b842:	f003 0301 	and.w	r3, r3, #1
 800b846:	2b00      	cmp	r3, #0
 800b848:	d004      	beq.n	800b854 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2201      	movs	r2, #1
 800b84e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b850:	2301      	movs	r3, #1
 800b852:	e0a6      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	4a58      	ldr	r2, [pc, #352]	@ (800b9b8 <SDMMC_GetCmdResp1+0x1dc>)
 800b858:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f7ff fcf6 	bl	800b24c <SDMMC_GetCommandResponse>
 800b860:	4603      	mov	r3, r0
 800b862:	461a      	mov	r2, r3
 800b864:	7afb      	ldrb	r3, [r7, #11]
 800b866:	4293      	cmp	r3, r2
 800b868:	d001      	beq.n	800b86e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e099      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b86e:	2100      	movs	r1, #0
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7ff fcf8 	bl	800b266 <SDMMC_GetResponse>
 800b876:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	4b50      	ldr	r3, [pc, #320]	@ (800b9bc <SDMMC_GetCmdResp1+0x1e0>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d101      	bne.n	800b886 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b882:	2300      	movs	r3, #0
 800b884:	e08d      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	da02      	bge.n	800b892 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b88c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b890:	e087      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b89c:	2340      	movs	r3, #64	@ 0x40
 800b89e:	e080      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b8aa:	2380      	movs	r3, #128	@ 0x80
 800b8ac:	e079      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b8b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8bc:	e071      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b8c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8cc:	e069      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b8d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8dc:	e061      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b8e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b8ec:	e059      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8fc:	e051      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b90c:	e049      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b918:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b91c:	e041      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b92c:	e039      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b938:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b93c:	e031      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b948:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b94c:	e029      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b958:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b95c:	e021      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b968:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b96c:	e019      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b978:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b97c:	e011      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b988:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b98c:	e009      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f003 0308 	and.w	r3, r3, #8
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b998:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b99c:	e001      	b.n	800b9a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b99e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3720      	adds	r7, #32
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	24000000 	.word	0x24000000
 800b9b0:	10624dd3 	.word	0x10624dd3
 800b9b4:	00200045 	.word	0x00200045
 800b9b8:	002000c5 	.word	0x002000c5
 800b9bc:	fdffe008 	.word	0xfdffe008

0800b9c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b9c8:	4b1f      	ldr	r3, [pc, #124]	@ (800ba48 <SDMMC_GetCmdResp2+0x88>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a1f      	ldr	r2, [pc, #124]	@ (800ba4c <SDMMC_GetCmdResp2+0x8c>)
 800b9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d2:	0a5b      	lsrs	r3, r3, #9
 800b9d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9d8:	fb02 f303 	mul.w	r3, r2, r3
 800b9dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	1e5a      	subs	r2, r3, #1
 800b9e2:	60fa      	str	r2, [r7, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d102      	bne.n	800b9ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b9ec:	e026      	b.n	800ba3c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0ef      	beq.n	800b9de <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1ea      	bne.n	800b9de <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba0c:	f003 0304 	and.w	r3, r3, #4
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d004      	beq.n	800ba1e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2204      	movs	r2, #4
 800ba18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba1a:	2304      	movs	r3, #4
 800ba1c:	e00e      	b.n	800ba3c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d004      	beq.n	800ba34 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba30:	2301      	movs	r3, #1
 800ba32:	e003      	b.n	800ba3c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a06      	ldr	r2, [pc, #24]	@ (800ba50 <SDMMC_GetCmdResp2+0x90>)
 800ba38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	24000000 	.word	0x24000000
 800ba4c:	10624dd3 	.word	0x10624dd3
 800ba50:	002000c5 	.word	0x002000c5

0800ba54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba5c:	4b1a      	ldr	r3, [pc, #104]	@ (800bac8 <SDMMC_GetCmdResp3+0x74>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a1a      	ldr	r2, [pc, #104]	@ (800bacc <SDMMC_GetCmdResp3+0x78>)
 800ba62:	fba2 2303 	umull	r2, r3, r2, r3
 800ba66:	0a5b      	lsrs	r3, r3, #9
 800ba68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba6c:	fb02 f303 	mul.w	r3, r2, r3
 800ba70:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	1e5a      	subs	r2, r3, #1
 800ba76:	60fa      	str	r2, [r7, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba80:	e01b      	b.n	800baba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba86:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0ef      	beq.n	800ba72 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1ea      	bne.n	800ba72 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baa0:	f003 0304 	and.w	r3, r3, #4
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d004      	beq.n	800bab2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2204      	movs	r2, #4
 800baac:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baae:	2304      	movs	r3, #4
 800bab0:	e003      	b.n	800baba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a06      	ldr	r2, [pc, #24]	@ (800bad0 <SDMMC_GetCmdResp3+0x7c>)
 800bab6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	24000000 	.word	0x24000000
 800bacc:	10624dd3 	.word	0x10624dd3
 800bad0:	002000c5 	.word	0x002000c5

0800bad4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	460b      	mov	r3, r1
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bae2:	4b35      	ldr	r3, [pc, #212]	@ (800bbb8 <SDMMC_GetCmdResp6+0xe4>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a35      	ldr	r2, [pc, #212]	@ (800bbbc <SDMMC_GetCmdResp6+0xe8>)
 800bae8:	fba2 2303 	umull	r2, r3, r2, r3
 800baec:	0a5b      	lsrs	r3, r3, #9
 800baee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800baf2:	fb02 f303 	mul.w	r3, r2, r3
 800baf6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	1e5a      	subs	r2, r3, #1
 800bafc:	61fa      	str	r2, [r7, #28]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb02:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb06:	e052      	b.n	800bbae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d0ef      	beq.n	800baf8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1ea      	bne.n	800baf8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb26:	f003 0304 	and.w	r3, r3, #4
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d004      	beq.n	800bb38 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2204      	movs	r2, #4
 800bb32:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb34:	2304      	movs	r3, #4
 800bb36:	e03a      	b.n	800bbae <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d004      	beq.n	800bb4e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2201      	movs	r2, #1
 800bb48:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e02f      	b.n	800bbae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f7ff fb7c 	bl	800b24c <SDMMC_GetCommandResponse>
 800bb54:	4603      	mov	r3, r0
 800bb56:	461a      	mov	r2, r3
 800bb58:	7afb      	ldrb	r3, [r7, #11]
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d001      	beq.n	800bb62 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e025      	b.n	800bbae <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	4a16      	ldr	r2, [pc, #88]	@ (800bbc0 <SDMMC_GetCmdResp6+0xec>)
 800bb66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb68:	2100      	movs	r1, #0
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7ff fb7b 	bl	800b266 <SDMMC_GetResponse>
 800bb70:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d106      	bne.n	800bb8a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	0c1b      	lsrs	r3, r3, #16
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bb86:	2300      	movs	r3, #0
 800bb88:	e011      	b.n	800bbae <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bb98:	e009      	b.n	800bbae <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bba8:	e001      	b.n	800bbae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bbaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3720      	adds	r7, #32
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	24000000 	.word	0x24000000
 800bbbc:	10624dd3 	.word	0x10624dd3
 800bbc0:	002000c5 	.word	0x002000c5

0800bbc4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b085      	sub	sp, #20
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bbcc:	4b22      	ldr	r3, [pc, #136]	@ (800bc58 <SDMMC_GetCmdResp7+0x94>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a22      	ldr	r2, [pc, #136]	@ (800bc5c <SDMMC_GetCmdResp7+0x98>)
 800bbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbd6:	0a5b      	lsrs	r3, r3, #9
 800bbd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbdc:	fb02 f303 	mul.w	r3, r2, r3
 800bbe0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	1e5a      	subs	r2, r3, #1
 800bbe6:	60fa      	str	r2, [r7, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbf0:	e02c      	b.n	800bc4c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbf6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0ef      	beq.n	800bbe2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1ea      	bne.n	800bbe2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc10:	f003 0304 	and.w	r3, r3, #4
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d004      	beq.n	800bc22 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2204      	movs	r2, #4
 800bc1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc1e:	2304      	movs	r3, #4
 800bc20:	e014      	b.n	800bc4c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d004      	beq.n	800bc38 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e009      	b.n	800bc4c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2240      	movs	r2, #64	@ 0x40
 800bc48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc4a:	2300      	movs	r3, #0

}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	24000000 	.word	0x24000000
 800bc5c:	10624dd3 	.word	0x10624dd3

0800bc60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc68:	4b11      	ldr	r3, [pc, #68]	@ (800bcb0 <SDMMC_GetCmdError+0x50>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a11      	ldr	r2, [pc, #68]	@ (800bcb4 <SDMMC_GetCmdError+0x54>)
 800bc6e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc72:	0a5b      	lsrs	r3, r3, #9
 800bc74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc78:	fb02 f303 	mul.w	r3, r2, r3
 800bc7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	1e5a      	subs	r2, r3, #1
 800bc82:	60fa      	str	r2, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d102      	bne.n	800bc8e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc8c:	e009      	b.n	800bca2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d0f1      	beq.n	800bc7e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a06      	ldr	r2, [pc, #24]	@ (800bcb8 <SDMMC_GetCmdError+0x58>)
 800bc9e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	24000000 	.word	0x24000000
 800bcb4:	10624dd3 	.word	0x10624dd3
 800bcb8:	002000c5 	.word	0x002000c5

0800bcbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bcc0:	4904      	ldr	r1, [pc, #16]	@ (800bcd4 <MX_FATFS_Init+0x18>)
 800bcc2:	4805      	ldr	r0, [pc, #20]	@ (800bcd8 <MX_FATFS_Init+0x1c>)
 800bcc4:	f000 fa8e 	bl	800c1e4 <FATFS_LinkDriver>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	461a      	mov	r2, r3
 800bccc:	4b03      	ldr	r3, [pc, #12]	@ (800bcdc <MX_FATFS_Init+0x20>)
 800bcce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bcd0:	bf00      	nop
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	240006f8 	.word	0x240006f8
 800bcd8:	080107fc 	.word	0x080107fc
 800bcdc:	240006f4 	.word	0x240006f4

0800bce0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bcea:	f000 f885 	bl	800bdf8 <BSP_SD_IsDetected>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d001      	beq.n	800bcf8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	e012      	b.n	800bd1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bcf8:	480b      	ldr	r0, [pc, #44]	@ (800bd28 <BSP_SD_Init+0x48>)
 800bcfa:	f7fb fae1 	bl	80072c0 <HAL_SD_Init>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d109      	bne.n	800bd1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bd08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800bd0c:	4806      	ldr	r0, [pc, #24]	@ (800bd28 <BSP_SD_Init+0x48>)
 800bd0e:	f7fc f997 	bl	8008040 <HAL_SD_ConfigWideBusOperation>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d001      	beq.n	800bd1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bd1c:	79fb      	ldrb	r3, [r7, #7]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	24000314 	.word	0x24000314

0800bd2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	68f9      	ldr	r1, [r7, #12]
 800bd42:	4806      	ldr	r0, [pc, #24]	@ (800bd5c <BSP_SD_ReadBlocks_DMA+0x30>)
 800bd44:	f7fb fbdc 	bl	8007500 <HAL_SD_ReadBlocks_DMA>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	24000314 	.word	0x24000314

0800bd60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	68f9      	ldr	r1, [r7, #12]
 800bd76:	4806      	ldr	r0, [pc, #24]	@ (800bd90 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bd78:	f7fb fc6a 	bl	8007650 <HAL_SD_WriteBlocks_DMA>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	24000314 	.word	0x24000314

0800bd94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bd98:	4805      	ldr	r0, [pc, #20]	@ (800bdb0 <BSP_SD_GetCardState+0x1c>)
 800bd9a:	f7fc fa63 	bl	8008264 <HAL_SD_GetCardState>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b04      	cmp	r3, #4
 800bda2:	bf14      	ite	ne
 800bda4:	2301      	movne	r3, #1
 800bda6:	2300      	moveq	r3, #0
 800bda8:	b2db      	uxtb	r3, r3
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	24000314 	.word	0x24000314

0800bdb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4803      	ldr	r0, [pc, #12]	@ (800bdcc <BSP_SD_GetCardInfo+0x18>)
 800bdc0:	f7fc f912 	bl	8007fe8 <HAL_SD_GetCardInfo>
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	24000314 	.word	0x24000314

0800bdd0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bdd8:	f000 f9a0 	bl	800c11c <BSP_SD_WriteCpltCallback>
}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bdec:	f000 f9a2 	bl	800c134 <BSP_SD_ReadCpltCallback>
}
 800bdf0:	bf00      	nop
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bdfe:	2301      	movs	r3, #1
 800be00:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800be02:	f000 f80b 	bl	800be1c <BSP_PlatformIsDetected>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800be0c:	2300      	movs	r3, #0
 800be0e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	b2db      	uxtb	r3, r3
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800be22:	2301      	movs	r3, #1
 800be24:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800be26:	2180      	movs	r1, #128	@ 0x80
 800be28:	4806      	ldr	r0, [pc, #24]	@ (800be44 <BSP_PlatformIsDetected+0x28>)
 800be2a:	f7f7 fabd 	bl	80033a8 <HAL_GPIO_ReadPin>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d001      	beq.n	800be38 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800be34:	2300      	movs	r3, #0
 800be36:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800be38:	79fb      	ldrb	r3, [r7, #7]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	58020800 	.word	0x58020800

0800be48 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800be50:	f7f6 fa16 	bl	8002280 <HAL_GetTick>
 800be54:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800be56:	e006      	b.n	800be66 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be58:	f7ff ff9c 	bl	800bd94 <BSP_SD_GetCardState>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800be62:	2300      	movs	r3, #0
 800be64:	e009      	b.n	800be7a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800be66:	f7f6 fa0b 	bl	8002280 <HAL_GetTick>
 800be6a:	4602      	mov	r2, r0
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	429a      	cmp	r2, r3
 800be74:	d8f0      	bhi.n	800be58 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800be76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
	...

0800be84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	4603      	mov	r3, r0
 800be8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bebc <SD_CheckStatus+0x38>)
 800be90:	2201      	movs	r2, #1
 800be92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800be94:	f7ff ff7e 	bl	800bd94 <BSP_SD_GetCardState>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d107      	bne.n	800beae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800be9e:	4b07      	ldr	r3, [pc, #28]	@ (800bebc <SD_CheckStatus+0x38>)
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	f023 0301 	bic.w	r3, r3, #1
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	4b04      	ldr	r3, [pc, #16]	@ (800bebc <SD_CheckStatus+0x38>)
 800beac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800beae:	4b03      	ldr	r3, [pc, #12]	@ (800bebc <SD_CheckStatus+0x38>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	b2db      	uxtb	r3, r3
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	2400000d 	.word	0x2400000d

0800bec0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800beca:	f7ff ff09 	bl	800bce0 <BSP_SD_Init>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d107      	bne.n	800bee4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bed4:	79fb      	ldrb	r3, [r7, #7]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff ffd4 	bl	800be84 <SD_CheckStatus>
 800bedc:	4603      	mov	r3, r0
 800bede:	461a      	mov	r2, r3
 800bee0:	4b04      	ldr	r3, [pc, #16]	@ (800bef4 <SD_initialize+0x34>)
 800bee2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bee4:	4b03      	ldr	r3, [pc, #12]	@ (800bef4 <SD_initialize+0x34>)
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	b2db      	uxtb	r3, r3
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	2400000d 	.word	0x2400000d

0800bef8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff ffbd 	bl	800be84 <SD_CheckStatus>
 800bf0a:	4603      	mov	r3, r0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b086      	sub	sp, #24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60b9      	str	r1, [r7, #8]
 800bf1c:	607a      	str	r2, [r7, #4]
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	4603      	mov	r3, r0
 800bf22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf28:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bf2c:	f7ff ff8c 	bl	800be48 <SD_CheckStatusWithTimeout>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	da01      	bge.n	800bf3a <SD_read+0x26>
  {
    return res;
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
 800bf38:	e03b      	b.n	800bfb2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	6879      	ldr	r1, [r7, #4]
 800bf3e:	68b8      	ldr	r0, [r7, #8]
 800bf40:	f7ff fef4 	bl	800bd2c <BSP_SD_ReadBlocks_DMA>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d132      	bne.n	800bfb0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bf4a:	4b1c      	ldr	r3, [pc, #112]	@ (800bfbc <SD_read+0xa8>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bf50:	f7f6 f996 	bl	8002280 <HAL_GetTick>
 800bf54:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bf56:	bf00      	nop
 800bf58:	4b18      	ldr	r3, [pc, #96]	@ (800bfbc <SD_read+0xa8>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d108      	bne.n	800bf72 <SD_read+0x5e>
 800bf60:	f7f6 f98e 	bl	8002280 <HAL_GetTick>
 800bf64:	4602      	mov	r2, r0
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d9f2      	bls.n	800bf58 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bf72:	4b12      	ldr	r3, [pc, #72]	@ (800bfbc <SD_read+0xa8>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d102      	bne.n	800bf80 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	75fb      	strb	r3, [r7, #23]
 800bf7e:	e017      	b.n	800bfb0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bf80:	4b0e      	ldr	r3, [pc, #56]	@ (800bfbc <SD_read+0xa8>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bf86:	f7f6 f97b 	bl	8002280 <HAL_GetTick>
 800bf8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bf8c:	e007      	b.n	800bf9e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf8e:	f7ff ff01 	bl	800bd94 <BSP_SD_GetCardState>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <SD_read+0x8a>
          {
            res = RES_OK;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bf9c:	e008      	b.n	800bfb0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bf9e:	f7f6 f96f 	bl	8002280 <HAL_GetTick>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d9ee      	bls.n	800bf8e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	24000700 	.word	0x24000700

0800bfc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60b9      	str	r1, [r7, #8]
 800bfc8:	607a      	str	r2, [r7, #4]
 800bfca:	603b      	str	r3, [r7, #0]
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bfd4:	4b24      	ldr	r3, [pc, #144]	@ (800c068 <SD_write+0xa8>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bfda:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bfde:	f7ff ff33 	bl	800be48 <SD_CheckStatusWithTimeout>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	da01      	bge.n	800bfec <SD_write+0x2c>
  {
    return res;
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
 800bfea:	e038      	b.n	800c05e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	6879      	ldr	r1, [r7, #4]
 800bff0:	68b8      	ldr	r0, [r7, #8]
 800bff2:	f7ff feb5 	bl	800bd60 <BSP_SD_WriteBlocks_DMA>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d12f      	bne.n	800c05c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bffc:	f7f6 f940 	bl	8002280 <HAL_GetTick>
 800c000:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c002:	bf00      	nop
 800c004:	4b18      	ldr	r3, [pc, #96]	@ (800c068 <SD_write+0xa8>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d108      	bne.n	800c01e <SD_write+0x5e>
 800c00c:	f7f6 f938 	bl	8002280 <HAL_GetTick>
 800c010:	4602      	mov	r2, r0
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	1ad3      	subs	r3, r2, r3
 800c016:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d9f2      	bls.n	800c004 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c01e:	4b12      	ldr	r3, [pc, #72]	@ (800c068 <SD_write+0xa8>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d102      	bne.n	800c02c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	75fb      	strb	r3, [r7, #23]
 800c02a:	e017      	b.n	800c05c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c02c:	4b0e      	ldr	r3, [pc, #56]	@ (800c068 <SD_write+0xa8>)
 800c02e:	2200      	movs	r2, #0
 800c030:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c032:	f7f6 f925 	bl	8002280 <HAL_GetTick>
 800c036:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c038:	e007      	b.n	800c04a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c03a:	f7ff feab 	bl	800bd94 <BSP_SD_GetCardState>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d102      	bne.n	800c04a <SD_write+0x8a>
          {
            res = RES_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	75fb      	strb	r3, [r7, #23]
            break;
 800c048:	e008      	b.n	800c05c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c04a:	f7f6 f919 	bl	8002280 <HAL_GetTick>
 800c04e:	4602      	mov	r2, r0
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c058:	4293      	cmp	r3, r2
 800c05a:	d9ee      	bls.n	800c03a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3718      	adds	r7, #24
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	240006fc 	.word	0x240006fc

0800c06c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b08c      	sub	sp, #48	@ 0x30
 800c070:	af00      	add	r7, sp, #0
 800c072:	4603      	mov	r3, r0
 800c074:	603a      	str	r2, [r7, #0]
 800c076:	71fb      	strb	r3, [r7, #7]
 800c078:	460b      	mov	r3, r1
 800c07a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c082:	4b25      	ldr	r3, [pc, #148]	@ (800c118 <SD_ioctl+0xac>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <SD_ioctl+0x28>
 800c090:	2303      	movs	r3, #3
 800c092:	e03c      	b.n	800c10e <SD_ioctl+0xa2>

  switch (cmd)
 800c094:	79bb      	ldrb	r3, [r7, #6]
 800c096:	2b03      	cmp	r3, #3
 800c098:	d834      	bhi.n	800c104 <SD_ioctl+0x98>
 800c09a:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a0 <SD_ioctl+0x34>)
 800c09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a0:	0800c0b1 	.word	0x0800c0b1
 800c0a4:	0800c0b9 	.word	0x0800c0b9
 800c0a8:	0800c0d1 	.word	0x0800c0d1
 800c0ac:	0800c0eb 	.word	0x0800c0eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c0b6:	e028      	b.n	800c10a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0b8:	f107 0308 	add.w	r3, r7, #8
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff fe79 	bl	800bdb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c0c2:	6a3a      	ldr	r2, [r7, #32]
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c0ce:	e01c      	b.n	800c10a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0d0:	f107 0308 	add.w	r3, r7, #8
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7ff fe6d 	bl	800bdb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c0e8:	e00f      	b.n	800c10a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0ea:	f107 0308 	add.w	r3, r7, #8
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7ff fe60 	bl	800bdb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	0a5a      	lsrs	r2, r3, #9
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c102:	e002      	b.n	800c10a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c104:	2304      	movs	r3, #4
 800c106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c10a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3730      	adds	r7, #48	@ 0x30
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	2400000d 	.word	0x2400000d

0800c11c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c11c:	b480      	push	{r7}
 800c11e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c120:	4b03      	ldr	r3, [pc, #12]	@ (800c130 <BSP_SD_WriteCpltCallback+0x14>)
 800c122:	2201      	movs	r2, #1
 800c124:	601a      	str	r2, [r3, #0]
}
 800c126:	bf00      	nop
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	240006fc 	.word	0x240006fc

0800c134 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c134:	b480      	push	{r7}
 800c136:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c138:	4b03      	ldr	r3, [pc, #12]	@ (800c148 <BSP_SD_ReadCpltCallback+0x14>)
 800c13a:	2201      	movs	r2, #1
 800c13c:	601a      	str	r2, [r3, #0]
}
 800c13e:	bf00      	nop
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	24000700 	.word	0x24000700

0800c14c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b087      	sub	sp, #28
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	4613      	mov	r3, r2
 800c158:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c15a:	2301      	movs	r3, #1
 800c15c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c162:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e0 <FATFS_LinkDriverEx+0x94>)
 800c164:	7e1b      	ldrb	r3, [r3, #24]
 800c166:	b2db      	uxtb	r3, r3
 800c168:	2b03      	cmp	r3, #3
 800c16a:	d831      	bhi.n	800c1d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c16c:	4b1c      	ldr	r3, [pc, #112]	@ (800c1e0 <FATFS_LinkDriverEx+0x94>)
 800c16e:	7e1b      	ldrb	r3, [r3, #24]
 800c170:	b2db      	uxtb	r3, r3
 800c172:	461a      	mov	r2, r3
 800c174:	4b1a      	ldr	r3, [pc, #104]	@ (800c1e0 <FATFS_LinkDriverEx+0x94>)
 800c176:	2100      	movs	r1, #0
 800c178:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c17a:	4b19      	ldr	r3, [pc, #100]	@ (800c1e0 <FATFS_LinkDriverEx+0x94>)
 800c17c:	7e1b      	ldrb	r3, [r3, #24]
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	4a17      	ldr	r2, [pc, #92]	@ (800c1e0 <FATFS_LinkDriverEx+0x94>)
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c18a:	4b15      	ldr	r3, [pc, #84]	@ (800c1e0 <FATFS_LinkDriverEx+0x94>)
 800c18c:	7e1b      	ldrb	r3, [r3, #24]
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	461a      	mov	r2, r3
 800c192:	4b13      	ldr	r3, [pc, #76]	@ (800c1e0 <FATFS_LinkDriverEx+0x94>)
 800c194:	4413      	add	r3, r2
 800c196:	79fa      	ldrb	r2, [r7, #7]
 800c198:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 800c19a:	4b11      	ldr	r3, [pc, #68]	@ (800c1e0 <FATFS_LinkDriverEx+0x94>)
 800c19c:	7e1b      	ldrb	r3, [r3, #24]
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	1c5a      	adds	r2, r3, #1
 800c1a2:	b2d1      	uxtb	r1, r2
 800c1a4:	4a0e      	ldr	r2, [pc, #56]	@ (800c1e0 <FATFS_LinkDriverEx+0x94>)
 800c1a6:	7611      	strb	r1, [r2, #24]
 800c1a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c1aa:	7dbb      	ldrb	r3, [r7, #22]
 800c1ac:	3330      	adds	r3, #48	@ 0x30
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	223a      	movs	r2, #58	@ 0x3a
 800c1ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	3302      	adds	r3, #2
 800c1c0:	222f      	movs	r2, #47	@ 0x2f
 800c1c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	3303      	adds	r3, #3
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c1d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	371c      	adds	r7, #28
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	24000704 	.word	0x24000704

0800c1e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff ffaa 	bl	800c14c <FATFS_LinkDriverEx>
 800c1f8:	4603      	mov	r3, r0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <__cvt>:
 800c202:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c204:	ed2d 8b02 	vpush	{d8}
 800c208:	eeb0 8b40 	vmov.f64	d8, d0
 800c20c:	b085      	sub	sp, #20
 800c20e:	4617      	mov	r7, r2
 800c210:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c212:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c214:	ee18 2a90 	vmov	r2, s17
 800c218:	f025 0520 	bic.w	r5, r5, #32
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	bfb6      	itet	lt
 800c220:	222d      	movlt	r2, #45	@ 0x2d
 800c222:	2200      	movge	r2, #0
 800c224:	eeb1 8b40 	vneglt.f64	d8, d0
 800c228:	2d46      	cmp	r5, #70	@ 0x46
 800c22a:	460c      	mov	r4, r1
 800c22c:	701a      	strb	r2, [r3, #0]
 800c22e:	d004      	beq.n	800c23a <__cvt+0x38>
 800c230:	2d45      	cmp	r5, #69	@ 0x45
 800c232:	d100      	bne.n	800c236 <__cvt+0x34>
 800c234:	3401      	adds	r4, #1
 800c236:	2102      	movs	r1, #2
 800c238:	e000      	b.n	800c23c <__cvt+0x3a>
 800c23a:	2103      	movs	r1, #3
 800c23c:	ab03      	add	r3, sp, #12
 800c23e:	9301      	str	r3, [sp, #4]
 800c240:	ab02      	add	r3, sp, #8
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	4622      	mov	r2, r4
 800c246:	4633      	mov	r3, r6
 800c248:	eeb0 0b48 	vmov.f64	d0, d8
 800c24c:	f001 ff84 	bl	800e158 <_dtoa_r>
 800c250:	2d47      	cmp	r5, #71	@ 0x47
 800c252:	d114      	bne.n	800c27e <__cvt+0x7c>
 800c254:	07fb      	lsls	r3, r7, #31
 800c256:	d50a      	bpl.n	800c26e <__cvt+0x6c>
 800c258:	1902      	adds	r2, r0, r4
 800c25a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c262:	bf08      	it	eq
 800c264:	9203      	streq	r2, [sp, #12]
 800c266:	2130      	movs	r1, #48	@ 0x30
 800c268:	9b03      	ldr	r3, [sp, #12]
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d319      	bcc.n	800c2a2 <__cvt+0xa0>
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c272:	1a1b      	subs	r3, r3, r0
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	b005      	add	sp, #20
 800c278:	ecbd 8b02 	vpop	{d8}
 800c27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c27e:	2d46      	cmp	r5, #70	@ 0x46
 800c280:	eb00 0204 	add.w	r2, r0, r4
 800c284:	d1e9      	bne.n	800c25a <__cvt+0x58>
 800c286:	7803      	ldrb	r3, [r0, #0]
 800c288:	2b30      	cmp	r3, #48	@ 0x30
 800c28a:	d107      	bne.n	800c29c <__cvt+0x9a>
 800c28c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c294:	bf1c      	itt	ne
 800c296:	f1c4 0401 	rsbne	r4, r4, #1
 800c29a:	6034      	strne	r4, [r6, #0]
 800c29c:	6833      	ldr	r3, [r6, #0]
 800c29e:	441a      	add	r2, r3
 800c2a0:	e7db      	b.n	800c25a <__cvt+0x58>
 800c2a2:	1c5c      	adds	r4, r3, #1
 800c2a4:	9403      	str	r4, [sp, #12]
 800c2a6:	7019      	strb	r1, [r3, #0]
 800c2a8:	e7de      	b.n	800c268 <__cvt+0x66>

0800c2aa <__exponent>:
 800c2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ac:	2900      	cmp	r1, #0
 800c2ae:	bfba      	itte	lt
 800c2b0:	4249      	neglt	r1, r1
 800c2b2:	232d      	movlt	r3, #45	@ 0x2d
 800c2b4:	232b      	movge	r3, #43	@ 0x2b
 800c2b6:	2909      	cmp	r1, #9
 800c2b8:	7002      	strb	r2, [r0, #0]
 800c2ba:	7043      	strb	r3, [r0, #1]
 800c2bc:	dd29      	ble.n	800c312 <__exponent+0x68>
 800c2be:	f10d 0307 	add.w	r3, sp, #7
 800c2c2:	461d      	mov	r5, r3
 800c2c4:	270a      	movs	r7, #10
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800c2cc:	fb07 1416 	mls	r4, r7, r6, r1
 800c2d0:	3430      	adds	r4, #48	@ 0x30
 800c2d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	2c63      	cmp	r4, #99	@ 0x63
 800c2da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c2de:	4631      	mov	r1, r6
 800c2e0:	dcf1      	bgt.n	800c2c6 <__exponent+0x1c>
 800c2e2:	3130      	adds	r1, #48	@ 0x30
 800c2e4:	1e94      	subs	r4, r2, #2
 800c2e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c2ea:	1c41      	adds	r1, r0, #1
 800c2ec:	4623      	mov	r3, r4
 800c2ee:	42ab      	cmp	r3, r5
 800c2f0:	d30a      	bcc.n	800c308 <__exponent+0x5e>
 800c2f2:	f10d 0309 	add.w	r3, sp, #9
 800c2f6:	1a9b      	subs	r3, r3, r2
 800c2f8:	42ac      	cmp	r4, r5
 800c2fa:	bf88      	it	hi
 800c2fc:	2300      	movhi	r3, #0
 800c2fe:	3302      	adds	r3, #2
 800c300:	4403      	add	r3, r0
 800c302:	1a18      	subs	r0, r3, r0
 800c304:	b003      	add	sp, #12
 800c306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c308:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c30c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c310:	e7ed      	b.n	800c2ee <__exponent+0x44>
 800c312:	2330      	movs	r3, #48	@ 0x30
 800c314:	3130      	adds	r1, #48	@ 0x30
 800c316:	7083      	strb	r3, [r0, #2]
 800c318:	70c1      	strb	r1, [r0, #3]
 800c31a:	1d03      	adds	r3, r0, #4
 800c31c:	e7f1      	b.n	800c302 <__exponent+0x58>
	...

0800c320 <_printf_float>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	b08d      	sub	sp, #52	@ 0x34
 800c326:	460c      	mov	r4, r1
 800c328:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c32c:	4616      	mov	r6, r2
 800c32e:	461f      	mov	r7, r3
 800c330:	4605      	mov	r5, r0
 800c332:	f001 fde3 	bl	800defc <_localeconv_r>
 800c336:	f8d0 b000 	ldr.w	fp, [r0]
 800c33a:	4658      	mov	r0, fp
 800c33c:	f7f4 f838 	bl	80003b0 <strlen>
 800c340:	2300      	movs	r3, #0
 800c342:	930a      	str	r3, [sp, #40]	@ 0x28
 800c344:	f8d8 3000 	ldr.w	r3, [r8]
 800c348:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c34c:	6822      	ldr	r2, [r4, #0]
 800c34e:	9005      	str	r0, [sp, #20]
 800c350:	3307      	adds	r3, #7
 800c352:	f023 0307 	bic.w	r3, r3, #7
 800c356:	f103 0108 	add.w	r1, r3, #8
 800c35a:	f8c8 1000 	str.w	r1, [r8]
 800c35e:	ed93 0b00 	vldr	d0, [r3]
 800c362:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c5c0 <_printf_float+0x2a0>
 800c366:	eeb0 7bc0 	vabs.f64	d7, d0
 800c36a:	eeb4 7b46 	vcmp.f64	d7, d6
 800c36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c372:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c376:	dd24      	ble.n	800c3c2 <_printf_float+0xa2>
 800c378:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c380:	d502      	bpl.n	800c388 <_printf_float+0x68>
 800c382:	232d      	movs	r3, #45	@ 0x2d
 800c384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c388:	498f      	ldr	r1, [pc, #572]	@ (800c5c8 <_printf_float+0x2a8>)
 800c38a:	4b90      	ldr	r3, [pc, #576]	@ (800c5cc <_printf_float+0x2ac>)
 800c38c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c390:	bf94      	ite	ls
 800c392:	4688      	movls	r8, r1
 800c394:	4698      	movhi	r8, r3
 800c396:	f022 0204 	bic.w	r2, r2, #4
 800c39a:	2303      	movs	r3, #3
 800c39c:	6123      	str	r3, [r4, #16]
 800c39e:	6022      	str	r2, [r4, #0]
 800c3a0:	f04f 0a00 	mov.w	sl, #0
 800c3a4:	9700      	str	r7, [sp, #0]
 800c3a6:	4633      	mov	r3, r6
 800c3a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f000 fa7b 	bl	800c8a8 <_printf_common>
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	f040 8089 	bne.w	800c4ca <_printf_float+0x1aa>
 800c3b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3bc:	b00d      	add	sp, #52	@ 0x34
 800c3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c2:	eeb4 0b40 	vcmp.f64	d0, d0
 800c3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ca:	d709      	bvc.n	800c3e0 <_printf_float+0xc0>
 800c3cc:	ee10 3a90 	vmov	r3, s1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	bfbc      	itt	lt
 800c3d4:	232d      	movlt	r3, #45	@ 0x2d
 800c3d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c3da:	497d      	ldr	r1, [pc, #500]	@ (800c5d0 <_printf_float+0x2b0>)
 800c3dc:	4b7d      	ldr	r3, [pc, #500]	@ (800c5d4 <_printf_float+0x2b4>)
 800c3de:	e7d5      	b.n	800c38c <_printf_float+0x6c>
 800c3e0:	6863      	ldr	r3, [r4, #4]
 800c3e2:	1c59      	adds	r1, r3, #1
 800c3e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c3e8:	d139      	bne.n	800c45e <_printf_float+0x13e>
 800c3ea:	2306      	movs	r3, #6
 800c3ec:	6063      	str	r3, [r4, #4]
 800c3ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	6022      	str	r2, [r4, #0]
 800c3f6:	9303      	str	r3, [sp, #12]
 800c3f8:	ab0a      	add	r3, sp, #40	@ 0x28
 800c3fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c3fe:	ab09      	add	r3, sp, #36	@ 0x24
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	6861      	ldr	r1, [r4, #4]
 800c404:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c408:	4628      	mov	r0, r5
 800c40a:	f7ff fefa 	bl	800c202 <__cvt>
 800c40e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c412:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c414:	4680      	mov	r8, r0
 800c416:	d129      	bne.n	800c46c <_printf_float+0x14c>
 800c418:	1cc8      	adds	r0, r1, #3
 800c41a:	db02      	blt.n	800c422 <_printf_float+0x102>
 800c41c:	6863      	ldr	r3, [r4, #4]
 800c41e:	4299      	cmp	r1, r3
 800c420:	dd41      	ble.n	800c4a6 <_printf_float+0x186>
 800c422:	f1a9 0902 	sub.w	r9, r9, #2
 800c426:	fa5f f989 	uxtb.w	r9, r9
 800c42a:	3901      	subs	r1, #1
 800c42c:	464a      	mov	r2, r9
 800c42e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c432:	9109      	str	r1, [sp, #36]	@ 0x24
 800c434:	f7ff ff39 	bl	800c2aa <__exponent>
 800c438:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c43a:	1813      	adds	r3, r2, r0
 800c43c:	2a01      	cmp	r2, #1
 800c43e:	4682      	mov	sl, r0
 800c440:	6123      	str	r3, [r4, #16]
 800c442:	dc02      	bgt.n	800c44a <_printf_float+0x12a>
 800c444:	6822      	ldr	r2, [r4, #0]
 800c446:	07d2      	lsls	r2, r2, #31
 800c448:	d501      	bpl.n	800c44e <_printf_float+0x12e>
 800c44a:	3301      	adds	r3, #1
 800c44c:	6123      	str	r3, [r4, #16]
 800c44e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c452:	2b00      	cmp	r3, #0
 800c454:	d0a6      	beq.n	800c3a4 <_printf_float+0x84>
 800c456:	232d      	movs	r3, #45	@ 0x2d
 800c458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c45c:	e7a2      	b.n	800c3a4 <_printf_float+0x84>
 800c45e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c462:	d1c4      	bne.n	800c3ee <_printf_float+0xce>
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1c2      	bne.n	800c3ee <_printf_float+0xce>
 800c468:	2301      	movs	r3, #1
 800c46a:	e7bf      	b.n	800c3ec <_printf_float+0xcc>
 800c46c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c470:	d9db      	bls.n	800c42a <_printf_float+0x10a>
 800c472:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c476:	d118      	bne.n	800c4aa <_printf_float+0x18a>
 800c478:	2900      	cmp	r1, #0
 800c47a:	6863      	ldr	r3, [r4, #4]
 800c47c:	dd0b      	ble.n	800c496 <_printf_float+0x176>
 800c47e:	6121      	str	r1, [r4, #16]
 800c480:	b913      	cbnz	r3, 800c488 <_printf_float+0x168>
 800c482:	6822      	ldr	r2, [r4, #0]
 800c484:	07d0      	lsls	r0, r2, #31
 800c486:	d502      	bpl.n	800c48e <_printf_float+0x16e>
 800c488:	3301      	adds	r3, #1
 800c48a:	440b      	add	r3, r1
 800c48c:	6123      	str	r3, [r4, #16]
 800c48e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c490:	f04f 0a00 	mov.w	sl, #0
 800c494:	e7db      	b.n	800c44e <_printf_float+0x12e>
 800c496:	b913      	cbnz	r3, 800c49e <_printf_float+0x17e>
 800c498:	6822      	ldr	r2, [r4, #0]
 800c49a:	07d2      	lsls	r2, r2, #31
 800c49c:	d501      	bpl.n	800c4a2 <_printf_float+0x182>
 800c49e:	3302      	adds	r3, #2
 800c4a0:	e7f4      	b.n	800c48c <_printf_float+0x16c>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e7f2      	b.n	800c48c <_printf_float+0x16c>
 800c4a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ac:	4299      	cmp	r1, r3
 800c4ae:	db05      	blt.n	800c4bc <_printf_float+0x19c>
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	6121      	str	r1, [r4, #16]
 800c4b4:	07d8      	lsls	r0, r3, #31
 800c4b6:	d5ea      	bpl.n	800c48e <_printf_float+0x16e>
 800c4b8:	1c4b      	adds	r3, r1, #1
 800c4ba:	e7e7      	b.n	800c48c <_printf_float+0x16c>
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	bfd4      	ite	le
 800c4c0:	f1c1 0202 	rsble	r2, r1, #2
 800c4c4:	2201      	movgt	r2, #1
 800c4c6:	4413      	add	r3, r2
 800c4c8:	e7e0      	b.n	800c48c <_printf_float+0x16c>
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	055a      	lsls	r2, r3, #21
 800c4ce:	d407      	bmi.n	800c4e0 <_printf_float+0x1c0>
 800c4d0:	6923      	ldr	r3, [r4, #16]
 800c4d2:	4642      	mov	r2, r8
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	47b8      	blx	r7
 800c4da:	3001      	adds	r0, #1
 800c4dc:	d12a      	bne.n	800c534 <_printf_float+0x214>
 800c4de:	e76b      	b.n	800c3b8 <_printf_float+0x98>
 800c4e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c4e4:	f240 80e0 	bls.w	800c6a8 <_printf_float+0x388>
 800c4e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c4ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f4:	d133      	bne.n	800c55e <_printf_float+0x23e>
 800c4f6:	4a38      	ldr	r2, [pc, #224]	@ (800c5d8 <_printf_float+0x2b8>)
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	47b8      	blx	r7
 800c500:	3001      	adds	r0, #1
 800c502:	f43f af59 	beq.w	800c3b8 <_printf_float+0x98>
 800c506:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c50a:	4543      	cmp	r3, r8
 800c50c:	db02      	blt.n	800c514 <_printf_float+0x1f4>
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	07d8      	lsls	r0, r3, #31
 800c512:	d50f      	bpl.n	800c534 <_printf_float+0x214>
 800c514:	9b05      	ldr	r3, [sp, #20]
 800c516:	465a      	mov	r2, fp
 800c518:	4631      	mov	r1, r6
 800c51a:	4628      	mov	r0, r5
 800c51c:	47b8      	blx	r7
 800c51e:	3001      	adds	r0, #1
 800c520:	f43f af4a 	beq.w	800c3b8 <_printf_float+0x98>
 800c524:	f04f 0900 	mov.w	r9, #0
 800c528:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c52c:	f104 0a1a 	add.w	sl, r4, #26
 800c530:	45c8      	cmp	r8, r9
 800c532:	dc09      	bgt.n	800c548 <_printf_float+0x228>
 800c534:	6823      	ldr	r3, [r4, #0]
 800c536:	079b      	lsls	r3, r3, #30
 800c538:	f100 8107 	bmi.w	800c74a <_printf_float+0x42a>
 800c53c:	68e0      	ldr	r0, [r4, #12]
 800c53e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c540:	4298      	cmp	r0, r3
 800c542:	bfb8      	it	lt
 800c544:	4618      	movlt	r0, r3
 800c546:	e739      	b.n	800c3bc <_printf_float+0x9c>
 800c548:	2301      	movs	r3, #1
 800c54a:	4652      	mov	r2, sl
 800c54c:	4631      	mov	r1, r6
 800c54e:	4628      	mov	r0, r5
 800c550:	47b8      	blx	r7
 800c552:	3001      	adds	r0, #1
 800c554:	f43f af30 	beq.w	800c3b8 <_printf_float+0x98>
 800c558:	f109 0901 	add.w	r9, r9, #1
 800c55c:	e7e8      	b.n	800c530 <_printf_float+0x210>
 800c55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c560:	2b00      	cmp	r3, #0
 800c562:	dc3b      	bgt.n	800c5dc <_printf_float+0x2bc>
 800c564:	4a1c      	ldr	r2, [pc, #112]	@ (800c5d8 <_printf_float+0x2b8>)
 800c566:	2301      	movs	r3, #1
 800c568:	4631      	mov	r1, r6
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	f43f af22 	beq.w	800c3b8 <_printf_float+0x98>
 800c574:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c578:	ea59 0303 	orrs.w	r3, r9, r3
 800c57c:	d102      	bne.n	800c584 <_printf_float+0x264>
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	07d9      	lsls	r1, r3, #31
 800c582:	d5d7      	bpl.n	800c534 <_printf_float+0x214>
 800c584:	9b05      	ldr	r3, [sp, #20]
 800c586:	465a      	mov	r2, fp
 800c588:	4631      	mov	r1, r6
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b8      	blx	r7
 800c58e:	3001      	adds	r0, #1
 800c590:	f43f af12 	beq.w	800c3b8 <_printf_float+0x98>
 800c594:	f04f 0a00 	mov.w	sl, #0
 800c598:	f104 0b1a 	add.w	fp, r4, #26
 800c59c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c59e:	425b      	negs	r3, r3
 800c5a0:	4553      	cmp	r3, sl
 800c5a2:	dc01      	bgt.n	800c5a8 <_printf_float+0x288>
 800c5a4:	464b      	mov	r3, r9
 800c5a6:	e794      	b.n	800c4d2 <_printf_float+0x1b2>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	465a      	mov	r2, fp
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	47b8      	blx	r7
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	f43f af00 	beq.w	800c3b8 <_printf_float+0x98>
 800c5b8:	f10a 0a01 	add.w	sl, sl, #1
 800c5bc:	e7ee      	b.n	800c59c <_printf_float+0x27c>
 800c5be:	bf00      	nop
 800c5c0:	ffffffff 	.word	0xffffffff
 800c5c4:	7fefffff 	.word	0x7fefffff
 800c5c8:	08010810 	.word	0x08010810
 800c5cc:	08010814 	.word	0x08010814
 800c5d0:	08010818 	.word	0x08010818
 800c5d4:	0801081c 	.word	0x0801081c
 800c5d8:	08010820 	.word	0x08010820
 800c5dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c5e2:	4553      	cmp	r3, sl
 800c5e4:	bfa8      	it	ge
 800c5e6:	4653      	movge	r3, sl
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	4699      	mov	r9, r3
 800c5ec:	dc37      	bgt.n	800c65e <_printf_float+0x33e>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9307      	str	r3, [sp, #28]
 800c5f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5f6:	f104 021a 	add.w	r2, r4, #26
 800c5fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5fc:	9907      	ldr	r1, [sp, #28]
 800c5fe:	9306      	str	r3, [sp, #24]
 800c600:	eba3 0309 	sub.w	r3, r3, r9
 800c604:	428b      	cmp	r3, r1
 800c606:	dc31      	bgt.n	800c66c <_printf_float+0x34c>
 800c608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c60a:	459a      	cmp	sl, r3
 800c60c:	dc3b      	bgt.n	800c686 <_printf_float+0x366>
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	07da      	lsls	r2, r3, #31
 800c612:	d438      	bmi.n	800c686 <_printf_float+0x366>
 800c614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c616:	ebaa 0903 	sub.w	r9, sl, r3
 800c61a:	9b06      	ldr	r3, [sp, #24]
 800c61c:	ebaa 0303 	sub.w	r3, sl, r3
 800c620:	4599      	cmp	r9, r3
 800c622:	bfa8      	it	ge
 800c624:	4699      	movge	r9, r3
 800c626:	f1b9 0f00 	cmp.w	r9, #0
 800c62a:	dc34      	bgt.n	800c696 <_printf_float+0x376>
 800c62c:	f04f 0800 	mov.w	r8, #0
 800c630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c634:	f104 0b1a 	add.w	fp, r4, #26
 800c638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c63a:	ebaa 0303 	sub.w	r3, sl, r3
 800c63e:	eba3 0309 	sub.w	r3, r3, r9
 800c642:	4543      	cmp	r3, r8
 800c644:	f77f af76 	ble.w	800c534 <_printf_float+0x214>
 800c648:	2301      	movs	r3, #1
 800c64a:	465a      	mov	r2, fp
 800c64c:	4631      	mov	r1, r6
 800c64e:	4628      	mov	r0, r5
 800c650:	47b8      	blx	r7
 800c652:	3001      	adds	r0, #1
 800c654:	f43f aeb0 	beq.w	800c3b8 <_printf_float+0x98>
 800c658:	f108 0801 	add.w	r8, r8, #1
 800c65c:	e7ec      	b.n	800c638 <_printf_float+0x318>
 800c65e:	4642      	mov	r2, r8
 800c660:	4631      	mov	r1, r6
 800c662:	4628      	mov	r0, r5
 800c664:	47b8      	blx	r7
 800c666:	3001      	adds	r0, #1
 800c668:	d1c1      	bne.n	800c5ee <_printf_float+0x2ce>
 800c66a:	e6a5      	b.n	800c3b8 <_printf_float+0x98>
 800c66c:	2301      	movs	r3, #1
 800c66e:	4631      	mov	r1, r6
 800c670:	4628      	mov	r0, r5
 800c672:	9206      	str	r2, [sp, #24]
 800c674:	47b8      	blx	r7
 800c676:	3001      	adds	r0, #1
 800c678:	f43f ae9e 	beq.w	800c3b8 <_printf_float+0x98>
 800c67c:	9b07      	ldr	r3, [sp, #28]
 800c67e:	9a06      	ldr	r2, [sp, #24]
 800c680:	3301      	adds	r3, #1
 800c682:	9307      	str	r3, [sp, #28]
 800c684:	e7b9      	b.n	800c5fa <_printf_float+0x2da>
 800c686:	9b05      	ldr	r3, [sp, #20]
 800c688:	465a      	mov	r2, fp
 800c68a:	4631      	mov	r1, r6
 800c68c:	4628      	mov	r0, r5
 800c68e:	47b8      	blx	r7
 800c690:	3001      	adds	r0, #1
 800c692:	d1bf      	bne.n	800c614 <_printf_float+0x2f4>
 800c694:	e690      	b.n	800c3b8 <_printf_float+0x98>
 800c696:	9a06      	ldr	r2, [sp, #24]
 800c698:	464b      	mov	r3, r9
 800c69a:	4442      	add	r2, r8
 800c69c:	4631      	mov	r1, r6
 800c69e:	4628      	mov	r0, r5
 800c6a0:	47b8      	blx	r7
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d1c2      	bne.n	800c62c <_printf_float+0x30c>
 800c6a6:	e687      	b.n	800c3b8 <_printf_float+0x98>
 800c6a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c6ac:	f1b9 0f01 	cmp.w	r9, #1
 800c6b0:	dc01      	bgt.n	800c6b6 <_printf_float+0x396>
 800c6b2:	07db      	lsls	r3, r3, #31
 800c6b4:	d536      	bpl.n	800c724 <_printf_float+0x404>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	4642      	mov	r2, r8
 800c6ba:	4631      	mov	r1, r6
 800c6bc:	4628      	mov	r0, r5
 800c6be:	47b8      	blx	r7
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	f43f ae79 	beq.w	800c3b8 <_printf_float+0x98>
 800c6c6:	9b05      	ldr	r3, [sp, #20]
 800c6c8:	465a      	mov	r2, fp
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	47b8      	blx	r7
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	f43f ae71 	beq.w	800c3b8 <_printf_float+0x98>
 800c6d6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c6da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6e2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800c6e6:	d018      	beq.n	800c71a <_printf_float+0x3fa>
 800c6e8:	464b      	mov	r3, r9
 800c6ea:	f108 0201 	add.w	r2, r8, #1
 800c6ee:	4631      	mov	r1, r6
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	47b8      	blx	r7
 800c6f4:	3001      	adds	r0, #1
 800c6f6:	d10c      	bne.n	800c712 <_printf_float+0x3f2>
 800c6f8:	e65e      	b.n	800c3b8 <_printf_float+0x98>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	465a      	mov	r2, fp
 800c6fe:	4631      	mov	r1, r6
 800c700:	4628      	mov	r0, r5
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	f43f ae57 	beq.w	800c3b8 <_printf_float+0x98>
 800c70a:	f108 0801 	add.w	r8, r8, #1
 800c70e:	45c8      	cmp	r8, r9
 800c710:	dbf3      	blt.n	800c6fa <_printf_float+0x3da>
 800c712:	4653      	mov	r3, sl
 800c714:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c718:	e6dc      	b.n	800c4d4 <_printf_float+0x1b4>
 800c71a:	f04f 0800 	mov.w	r8, #0
 800c71e:	f104 0b1a 	add.w	fp, r4, #26
 800c722:	e7f4      	b.n	800c70e <_printf_float+0x3ee>
 800c724:	2301      	movs	r3, #1
 800c726:	4642      	mov	r2, r8
 800c728:	e7e1      	b.n	800c6ee <_printf_float+0x3ce>
 800c72a:	2301      	movs	r3, #1
 800c72c:	464a      	mov	r2, r9
 800c72e:	4631      	mov	r1, r6
 800c730:	4628      	mov	r0, r5
 800c732:	47b8      	blx	r7
 800c734:	3001      	adds	r0, #1
 800c736:	f43f ae3f 	beq.w	800c3b8 <_printf_float+0x98>
 800c73a:	f108 0801 	add.w	r8, r8, #1
 800c73e:	68e3      	ldr	r3, [r4, #12]
 800c740:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c742:	1a5b      	subs	r3, r3, r1
 800c744:	4543      	cmp	r3, r8
 800c746:	dcf0      	bgt.n	800c72a <_printf_float+0x40a>
 800c748:	e6f8      	b.n	800c53c <_printf_float+0x21c>
 800c74a:	f04f 0800 	mov.w	r8, #0
 800c74e:	f104 0919 	add.w	r9, r4, #25
 800c752:	e7f4      	b.n	800c73e <_printf_float+0x41e>

0800c754 <malloc>:
 800c754:	4b02      	ldr	r3, [pc, #8]	@ (800c760 <malloc+0xc>)
 800c756:	4601      	mov	r1, r0
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	f000 b825 	b.w	800c7a8 <_malloc_r>
 800c75e:	bf00      	nop
 800c760:	24000188 	.word	0x24000188

0800c764 <sbrk_aligned>:
 800c764:	b570      	push	{r4, r5, r6, lr}
 800c766:	4e0f      	ldr	r6, [pc, #60]	@ (800c7a4 <sbrk_aligned+0x40>)
 800c768:	460c      	mov	r4, r1
 800c76a:	6831      	ldr	r1, [r6, #0]
 800c76c:	4605      	mov	r5, r0
 800c76e:	b911      	cbnz	r1, 800c776 <sbrk_aligned+0x12>
 800c770:	f001 fbfc 	bl	800df6c <_sbrk_r>
 800c774:	6030      	str	r0, [r6, #0]
 800c776:	4621      	mov	r1, r4
 800c778:	4628      	mov	r0, r5
 800c77a:	f001 fbf7 	bl	800df6c <_sbrk_r>
 800c77e:	1c43      	adds	r3, r0, #1
 800c780:	d103      	bne.n	800c78a <sbrk_aligned+0x26>
 800c782:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c786:	4620      	mov	r0, r4
 800c788:	bd70      	pop	{r4, r5, r6, pc}
 800c78a:	1cc4      	adds	r4, r0, #3
 800c78c:	f024 0403 	bic.w	r4, r4, #3
 800c790:	42a0      	cmp	r0, r4
 800c792:	d0f8      	beq.n	800c786 <sbrk_aligned+0x22>
 800c794:	1a21      	subs	r1, r4, r0
 800c796:	4628      	mov	r0, r5
 800c798:	f001 fbe8 	bl	800df6c <_sbrk_r>
 800c79c:	3001      	adds	r0, #1
 800c79e:	d1f2      	bne.n	800c786 <sbrk_aligned+0x22>
 800c7a0:	e7ef      	b.n	800c782 <sbrk_aligned+0x1e>
 800c7a2:	bf00      	nop
 800c7a4:	24000720 	.word	0x24000720

0800c7a8 <_malloc_r>:
 800c7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7ac:	1ccd      	adds	r5, r1, #3
 800c7ae:	f025 0503 	bic.w	r5, r5, #3
 800c7b2:	3508      	adds	r5, #8
 800c7b4:	2d0c      	cmp	r5, #12
 800c7b6:	bf38      	it	cc
 800c7b8:	250c      	movcc	r5, #12
 800c7ba:	2d00      	cmp	r5, #0
 800c7bc:	4606      	mov	r6, r0
 800c7be:	db01      	blt.n	800c7c4 <_malloc_r+0x1c>
 800c7c0:	42a9      	cmp	r1, r5
 800c7c2:	d904      	bls.n	800c7ce <_malloc_r+0x26>
 800c7c4:	230c      	movs	r3, #12
 800c7c6:	6033      	str	r3, [r6, #0]
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8a4 <_malloc_r+0xfc>
 800c7d2:	f000 fc03 	bl	800cfdc <__malloc_lock>
 800c7d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c7da:	461c      	mov	r4, r3
 800c7dc:	bb44      	cbnz	r4, 800c830 <_malloc_r+0x88>
 800c7de:	4629      	mov	r1, r5
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f7ff ffbf 	bl	800c764 <sbrk_aligned>
 800c7e6:	1c43      	adds	r3, r0, #1
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	d158      	bne.n	800c89e <_malloc_r+0xf6>
 800c7ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c7f0:	4627      	mov	r7, r4
 800c7f2:	2f00      	cmp	r7, #0
 800c7f4:	d143      	bne.n	800c87e <_malloc_r+0xd6>
 800c7f6:	2c00      	cmp	r4, #0
 800c7f8:	d04b      	beq.n	800c892 <_malloc_r+0xea>
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	4639      	mov	r1, r7
 800c7fe:	4630      	mov	r0, r6
 800c800:	eb04 0903 	add.w	r9, r4, r3
 800c804:	f001 fbb2 	bl	800df6c <_sbrk_r>
 800c808:	4581      	cmp	r9, r0
 800c80a:	d142      	bne.n	800c892 <_malloc_r+0xea>
 800c80c:	6821      	ldr	r1, [r4, #0]
 800c80e:	1a6d      	subs	r5, r5, r1
 800c810:	4629      	mov	r1, r5
 800c812:	4630      	mov	r0, r6
 800c814:	f7ff ffa6 	bl	800c764 <sbrk_aligned>
 800c818:	3001      	adds	r0, #1
 800c81a:	d03a      	beq.n	800c892 <_malloc_r+0xea>
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	442b      	add	r3, r5
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	f8d8 3000 	ldr.w	r3, [r8]
 800c826:	685a      	ldr	r2, [r3, #4]
 800c828:	bb62      	cbnz	r2, 800c884 <_malloc_r+0xdc>
 800c82a:	f8c8 7000 	str.w	r7, [r8]
 800c82e:	e00f      	b.n	800c850 <_malloc_r+0xa8>
 800c830:	6822      	ldr	r2, [r4, #0]
 800c832:	1b52      	subs	r2, r2, r5
 800c834:	d420      	bmi.n	800c878 <_malloc_r+0xd0>
 800c836:	2a0b      	cmp	r2, #11
 800c838:	d917      	bls.n	800c86a <_malloc_r+0xc2>
 800c83a:	1961      	adds	r1, r4, r5
 800c83c:	42a3      	cmp	r3, r4
 800c83e:	6025      	str	r5, [r4, #0]
 800c840:	bf18      	it	ne
 800c842:	6059      	strne	r1, [r3, #4]
 800c844:	6863      	ldr	r3, [r4, #4]
 800c846:	bf08      	it	eq
 800c848:	f8c8 1000 	streq.w	r1, [r8]
 800c84c:	5162      	str	r2, [r4, r5]
 800c84e:	604b      	str	r3, [r1, #4]
 800c850:	4630      	mov	r0, r6
 800c852:	f000 fbc9 	bl	800cfe8 <__malloc_unlock>
 800c856:	f104 000b 	add.w	r0, r4, #11
 800c85a:	1d23      	adds	r3, r4, #4
 800c85c:	f020 0007 	bic.w	r0, r0, #7
 800c860:	1ac2      	subs	r2, r0, r3
 800c862:	bf1c      	itt	ne
 800c864:	1a1b      	subne	r3, r3, r0
 800c866:	50a3      	strne	r3, [r4, r2]
 800c868:	e7af      	b.n	800c7ca <_malloc_r+0x22>
 800c86a:	6862      	ldr	r2, [r4, #4]
 800c86c:	42a3      	cmp	r3, r4
 800c86e:	bf0c      	ite	eq
 800c870:	f8c8 2000 	streq.w	r2, [r8]
 800c874:	605a      	strne	r2, [r3, #4]
 800c876:	e7eb      	b.n	800c850 <_malloc_r+0xa8>
 800c878:	4623      	mov	r3, r4
 800c87a:	6864      	ldr	r4, [r4, #4]
 800c87c:	e7ae      	b.n	800c7dc <_malloc_r+0x34>
 800c87e:	463c      	mov	r4, r7
 800c880:	687f      	ldr	r7, [r7, #4]
 800c882:	e7b6      	b.n	800c7f2 <_malloc_r+0x4a>
 800c884:	461a      	mov	r2, r3
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	42a3      	cmp	r3, r4
 800c88a:	d1fb      	bne.n	800c884 <_malloc_r+0xdc>
 800c88c:	2300      	movs	r3, #0
 800c88e:	6053      	str	r3, [r2, #4]
 800c890:	e7de      	b.n	800c850 <_malloc_r+0xa8>
 800c892:	230c      	movs	r3, #12
 800c894:	6033      	str	r3, [r6, #0]
 800c896:	4630      	mov	r0, r6
 800c898:	f000 fba6 	bl	800cfe8 <__malloc_unlock>
 800c89c:	e794      	b.n	800c7c8 <_malloc_r+0x20>
 800c89e:	6005      	str	r5, [r0, #0]
 800c8a0:	e7d6      	b.n	800c850 <_malloc_r+0xa8>
 800c8a2:	bf00      	nop
 800c8a4:	24000724 	.word	0x24000724

0800c8a8 <_printf_common>:
 800c8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8ac:	4616      	mov	r6, r2
 800c8ae:	4698      	mov	r8, r3
 800c8b0:	688a      	ldr	r2, [r1, #8]
 800c8b2:	690b      	ldr	r3, [r1, #16]
 800c8b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	bfb8      	it	lt
 800c8bc:	4613      	movlt	r3, r2
 800c8be:	6033      	str	r3, [r6, #0]
 800c8c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c8c4:	4607      	mov	r7, r0
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	b10a      	cbz	r2, 800c8ce <_printf_common+0x26>
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	6033      	str	r3, [r6, #0]
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	0699      	lsls	r1, r3, #26
 800c8d2:	bf42      	ittt	mi
 800c8d4:	6833      	ldrmi	r3, [r6, #0]
 800c8d6:	3302      	addmi	r3, #2
 800c8d8:	6033      	strmi	r3, [r6, #0]
 800c8da:	6825      	ldr	r5, [r4, #0]
 800c8dc:	f015 0506 	ands.w	r5, r5, #6
 800c8e0:	d106      	bne.n	800c8f0 <_printf_common+0x48>
 800c8e2:	f104 0a19 	add.w	sl, r4, #25
 800c8e6:	68e3      	ldr	r3, [r4, #12]
 800c8e8:	6832      	ldr	r2, [r6, #0]
 800c8ea:	1a9b      	subs	r3, r3, r2
 800c8ec:	42ab      	cmp	r3, r5
 800c8ee:	dc26      	bgt.n	800c93e <_printf_common+0x96>
 800c8f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c8f4:	6822      	ldr	r2, [r4, #0]
 800c8f6:	3b00      	subs	r3, #0
 800c8f8:	bf18      	it	ne
 800c8fa:	2301      	movne	r3, #1
 800c8fc:	0692      	lsls	r2, r2, #26
 800c8fe:	d42b      	bmi.n	800c958 <_printf_common+0xb0>
 800c900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c904:	4641      	mov	r1, r8
 800c906:	4638      	mov	r0, r7
 800c908:	47c8      	blx	r9
 800c90a:	3001      	adds	r0, #1
 800c90c:	d01e      	beq.n	800c94c <_printf_common+0xa4>
 800c90e:	6823      	ldr	r3, [r4, #0]
 800c910:	6922      	ldr	r2, [r4, #16]
 800c912:	f003 0306 	and.w	r3, r3, #6
 800c916:	2b04      	cmp	r3, #4
 800c918:	bf02      	ittt	eq
 800c91a:	68e5      	ldreq	r5, [r4, #12]
 800c91c:	6833      	ldreq	r3, [r6, #0]
 800c91e:	1aed      	subeq	r5, r5, r3
 800c920:	68a3      	ldr	r3, [r4, #8]
 800c922:	bf0c      	ite	eq
 800c924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c928:	2500      	movne	r5, #0
 800c92a:	4293      	cmp	r3, r2
 800c92c:	bfc4      	itt	gt
 800c92e:	1a9b      	subgt	r3, r3, r2
 800c930:	18ed      	addgt	r5, r5, r3
 800c932:	2600      	movs	r6, #0
 800c934:	341a      	adds	r4, #26
 800c936:	42b5      	cmp	r5, r6
 800c938:	d11a      	bne.n	800c970 <_printf_common+0xc8>
 800c93a:	2000      	movs	r0, #0
 800c93c:	e008      	b.n	800c950 <_printf_common+0xa8>
 800c93e:	2301      	movs	r3, #1
 800c940:	4652      	mov	r2, sl
 800c942:	4641      	mov	r1, r8
 800c944:	4638      	mov	r0, r7
 800c946:	47c8      	blx	r9
 800c948:	3001      	adds	r0, #1
 800c94a:	d103      	bne.n	800c954 <_printf_common+0xac>
 800c94c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c954:	3501      	adds	r5, #1
 800c956:	e7c6      	b.n	800c8e6 <_printf_common+0x3e>
 800c958:	18e1      	adds	r1, r4, r3
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	2030      	movs	r0, #48	@ 0x30
 800c95e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c962:	4422      	add	r2, r4
 800c964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c96c:	3302      	adds	r3, #2
 800c96e:	e7c7      	b.n	800c900 <_printf_common+0x58>
 800c970:	2301      	movs	r3, #1
 800c972:	4622      	mov	r2, r4
 800c974:	4641      	mov	r1, r8
 800c976:	4638      	mov	r0, r7
 800c978:	47c8      	blx	r9
 800c97a:	3001      	adds	r0, #1
 800c97c:	d0e6      	beq.n	800c94c <_printf_common+0xa4>
 800c97e:	3601      	adds	r6, #1
 800c980:	e7d9      	b.n	800c936 <_printf_common+0x8e>
	...

0800c984 <_printf_i>:
 800c984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c988:	7e0f      	ldrb	r7, [r1, #24]
 800c98a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c98c:	2f78      	cmp	r7, #120	@ 0x78
 800c98e:	4691      	mov	r9, r2
 800c990:	4680      	mov	r8, r0
 800c992:	460c      	mov	r4, r1
 800c994:	469a      	mov	sl, r3
 800c996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c99a:	d807      	bhi.n	800c9ac <_printf_i+0x28>
 800c99c:	2f62      	cmp	r7, #98	@ 0x62
 800c99e:	d80a      	bhi.n	800c9b6 <_printf_i+0x32>
 800c9a0:	2f00      	cmp	r7, #0
 800c9a2:	f000 80d2 	beq.w	800cb4a <_printf_i+0x1c6>
 800c9a6:	2f58      	cmp	r7, #88	@ 0x58
 800c9a8:	f000 80b9 	beq.w	800cb1e <_printf_i+0x19a>
 800c9ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c9b4:	e03a      	b.n	800ca2c <_printf_i+0xa8>
 800c9b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c9ba:	2b15      	cmp	r3, #21
 800c9bc:	d8f6      	bhi.n	800c9ac <_printf_i+0x28>
 800c9be:	a101      	add	r1, pc, #4	@ (adr r1, 800c9c4 <_printf_i+0x40>)
 800c9c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9c4:	0800ca1d 	.word	0x0800ca1d
 800c9c8:	0800ca31 	.word	0x0800ca31
 800c9cc:	0800c9ad 	.word	0x0800c9ad
 800c9d0:	0800c9ad 	.word	0x0800c9ad
 800c9d4:	0800c9ad 	.word	0x0800c9ad
 800c9d8:	0800c9ad 	.word	0x0800c9ad
 800c9dc:	0800ca31 	.word	0x0800ca31
 800c9e0:	0800c9ad 	.word	0x0800c9ad
 800c9e4:	0800c9ad 	.word	0x0800c9ad
 800c9e8:	0800c9ad 	.word	0x0800c9ad
 800c9ec:	0800c9ad 	.word	0x0800c9ad
 800c9f0:	0800cb31 	.word	0x0800cb31
 800c9f4:	0800ca5b 	.word	0x0800ca5b
 800c9f8:	0800caeb 	.word	0x0800caeb
 800c9fc:	0800c9ad 	.word	0x0800c9ad
 800ca00:	0800c9ad 	.word	0x0800c9ad
 800ca04:	0800cb53 	.word	0x0800cb53
 800ca08:	0800c9ad 	.word	0x0800c9ad
 800ca0c:	0800ca5b 	.word	0x0800ca5b
 800ca10:	0800c9ad 	.word	0x0800c9ad
 800ca14:	0800c9ad 	.word	0x0800c9ad
 800ca18:	0800caf3 	.word	0x0800caf3
 800ca1c:	6833      	ldr	r3, [r6, #0]
 800ca1e:	1d1a      	adds	r2, r3, #4
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	6032      	str	r2, [r6, #0]
 800ca24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e09d      	b.n	800cb6c <_printf_i+0x1e8>
 800ca30:	6833      	ldr	r3, [r6, #0]
 800ca32:	6820      	ldr	r0, [r4, #0]
 800ca34:	1d19      	adds	r1, r3, #4
 800ca36:	6031      	str	r1, [r6, #0]
 800ca38:	0606      	lsls	r6, r0, #24
 800ca3a:	d501      	bpl.n	800ca40 <_printf_i+0xbc>
 800ca3c:	681d      	ldr	r5, [r3, #0]
 800ca3e:	e003      	b.n	800ca48 <_printf_i+0xc4>
 800ca40:	0645      	lsls	r5, r0, #25
 800ca42:	d5fb      	bpl.n	800ca3c <_printf_i+0xb8>
 800ca44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ca48:	2d00      	cmp	r5, #0
 800ca4a:	da03      	bge.n	800ca54 <_printf_i+0xd0>
 800ca4c:	232d      	movs	r3, #45	@ 0x2d
 800ca4e:	426d      	negs	r5, r5
 800ca50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca54:	4859      	ldr	r0, [pc, #356]	@ (800cbbc <_printf_i+0x238>)
 800ca56:	230a      	movs	r3, #10
 800ca58:	e011      	b.n	800ca7e <_printf_i+0xfa>
 800ca5a:	6821      	ldr	r1, [r4, #0]
 800ca5c:	6833      	ldr	r3, [r6, #0]
 800ca5e:	0608      	lsls	r0, r1, #24
 800ca60:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca64:	d402      	bmi.n	800ca6c <_printf_i+0xe8>
 800ca66:	0649      	lsls	r1, r1, #25
 800ca68:	bf48      	it	mi
 800ca6a:	b2ad      	uxthmi	r5, r5
 800ca6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca6e:	4853      	ldr	r0, [pc, #332]	@ (800cbbc <_printf_i+0x238>)
 800ca70:	6033      	str	r3, [r6, #0]
 800ca72:	bf14      	ite	ne
 800ca74:	230a      	movne	r3, #10
 800ca76:	2308      	moveq	r3, #8
 800ca78:	2100      	movs	r1, #0
 800ca7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca7e:	6866      	ldr	r6, [r4, #4]
 800ca80:	60a6      	str	r6, [r4, #8]
 800ca82:	2e00      	cmp	r6, #0
 800ca84:	bfa2      	ittt	ge
 800ca86:	6821      	ldrge	r1, [r4, #0]
 800ca88:	f021 0104 	bicge.w	r1, r1, #4
 800ca8c:	6021      	strge	r1, [r4, #0]
 800ca8e:	b90d      	cbnz	r5, 800ca94 <_printf_i+0x110>
 800ca90:	2e00      	cmp	r6, #0
 800ca92:	d04b      	beq.n	800cb2c <_printf_i+0x1a8>
 800ca94:	4616      	mov	r6, r2
 800ca96:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca9a:	fb03 5711 	mls	r7, r3, r1, r5
 800ca9e:	5dc7      	ldrb	r7, [r0, r7]
 800caa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800caa4:	462f      	mov	r7, r5
 800caa6:	42bb      	cmp	r3, r7
 800caa8:	460d      	mov	r5, r1
 800caaa:	d9f4      	bls.n	800ca96 <_printf_i+0x112>
 800caac:	2b08      	cmp	r3, #8
 800caae:	d10b      	bne.n	800cac8 <_printf_i+0x144>
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	07df      	lsls	r7, r3, #31
 800cab4:	d508      	bpl.n	800cac8 <_printf_i+0x144>
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	6861      	ldr	r1, [r4, #4]
 800caba:	4299      	cmp	r1, r3
 800cabc:	bfde      	ittt	le
 800cabe:	2330      	movle	r3, #48	@ 0x30
 800cac0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cac4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cac8:	1b92      	subs	r2, r2, r6
 800caca:	6122      	str	r2, [r4, #16]
 800cacc:	f8cd a000 	str.w	sl, [sp]
 800cad0:	464b      	mov	r3, r9
 800cad2:	aa03      	add	r2, sp, #12
 800cad4:	4621      	mov	r1, r4
 800cad6:	4640      	mov	r0, r8
 800cad8:	f7ff fee6 	bl	800c8a8 <_printf_common>
 800cadc:	3001      	adds	r0, #1
 800cade:	d14a      	bne.n	800cb76 <_printf_i+0x1f2>
 800cae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cae4:	b004      	add	sp, #16
 800cae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	f043 0320 	orr.w	r3, r3, #32
 800caf0:	6023      	str	r3, [r4, #0]
 800caf2:	4833      	ldr	r0, [pc, #204]	@ (800cbc0 <_printf_i+0x23c>)
 800caf4:	2778      	movs	r7, #120	@ 0x78
 800caf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cafa:	6823      	ldr	r3, [r4, #0]
 800cafc:	6831      	ldr	r1, [r6, #0]
 800cafe:	061f      	lsls	r7, r3, #24
 800cb00:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb04:	d402      	bmi.n	800cb0c <_printf_i+0x188>
 800cb06:	065f      	lsls	r7, r3, #25
 800cb08:	bf48      	it	mi
 800cb0a:	b2ad      	uxthmi	r5, r5
 800cb0c:	6031      	str	r1, [r6, #0]
 800cb0e:	07d9      	lsls	r1, r3, #31
 800cb10:	bf44      	itt	mi
 800cb12:	f043 0320 	orrmi.w	r3, r3, #32
 800cb16:	6023      	strmi	r3, [r4, #0]
 800cb18:	b11d      	cbz	r5, 800cb22 <_printf_i+0x19e>
 800cb1a:	2310      	movs	r3, #16
 800cb1c:	e7ac      	b.n	800ca78 <_printf_i+0xf4>
 800cb1e:	4827      	ldr	r0, [pc, #156]	@ (800cbbc <_printf_i+0x238>)
 800cb20:	e7e9      	b.n	800caf6 <_printf_i+0x172>
 800cb22:	6823      	ldr	r3, [r4, #0]
 800cb24:	f023 0320 	bic.w	r3, r3, #32
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	e7f6      	b.n	800cb1a <_printf_i+0x196>
 800cb2c:	4616      	mov	r6, r2
 800cb2e:	e7bd      	b.n	800caac <_printf_i+0x128>
 800cb30:	6833      	ldr	r3, [r6, #0]
 800cb32:	6825      	ldr	r5, [r4, #0]
 800cb34:	6961      	ldr	r1, [r4, #20]
 800cb36:	1d18      	adds	r0, r3, #4
 800cb38:	6030      	str	r0, [r6, #0]
 800cb3a:	062e      	lsls	r6, r5, #24
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	d501      	bpl.n	800cb44 <_printf_i+0x1c0>
 800cb40:	6019      	str	r1, [r3, #0]
 800cb42:	e002      	b.n	800cb4a <_printf_i+0x1c6>
 800cb44:	0668      	lsls	r0, r5, #25
 800cb46:	d5fb      	bpl.n	800cb40 <_printf_i+0x1bc>
 800cb48:	8019      	strh	r1, [r3, #0]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	6123      	str	r3, [r4, #16]
 800cb4e:	4616      	mov	r6, r2
 800cb50:	e7bc      	b.n	800cacc <_printf_i+0x148>
 800cb52:	6833      	ldr	r3, [r6, #0]
 800cb54:	1d1a      	adds	r2, r3, #4
 800cb56:	6032      	str	r2, [r6, #0]
 800cb58:	681e      	ldr	r6, [r3, #0]
 800cb5a:	6862      	ldr	r2, [r4, #4]
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f7f3 fbd6 	bl	8000310 <memchr>
 800cb64:	b108      	cbz	r0, 800cb6a <_printf_i+0x1e6>
 800cb66:	1b80      	subs	r0, r0, r6
 800cb68:	6060      	str	r0, [r4, #4]
 800cb6a:	6863      	ldr	r3, [r4, #4]
 800cb6c:	6123      	str	r3, [r4, #16]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb74:	e7aa      	b.n	800cacc <_printf_i+0x148>
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	4632      	mov	r2, r6
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	47d0      	blx	sl
 800cb80:	3001      	adds	r0, #1
 800cb82:	d0ad      	beq.n	800cae0 <_printf_i+0x15c>
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	079b      	lsls	r3, r3, #30
 800cb88:	d413      	bmi.n	800cbb2 <_printf_i+0x22e>
 800cb8a:	68e0      	ldr	r0, [r4, #12]
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	4298      	cmp	r0, r3
 800cb90:	bfb8      	it	lt
 800cb92:	4618      	movlt	r0, r3
 800cb94:	e7a6      	b.n	800cae4 <_printf_i+0x160>
 800cb96:	2301      	movs	r3, #1
 800cb98:	4632      	mov	r2, r6
 800cb9a:	4649      	mov	r1, r9
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	47d0      	blx	sl
 800cba0:	3001      	adds	r0, #1
 800cba2:	d09d      	beq.n	800cae0 <_printf_i+0x15c>
 800cba4:	3501      	adds	r5, #1
 800cba6:	68e3      	ldr	r3, [r4, #12]
 800cba8:	9903      	ldr	r1, [sp, #12]
 800cbaa:	1a5b      	subs	r3, r3, r1
 800cbac:	42ab      	cmp	r3, r5
 800cbae:	dcf2      	bgt.n	800cb96 <_printf_i+0x212>
 800cbb0:	e7eb      	b.n	800cb8a <_printf_i+0x206>
 800cbb2:	2500      	movs	r5, #0
 800cbb4:	f104 0619 	add.w	r6, r4, #25
 800cbb8:	e7f5      	b.n	800cba6 <_printf_i+0x222>
 800cbba:	bf00      	nop
 800cbbc:	08010822 	.word	0x08010822
 800cbc0:	08010833 	.word	0x08010833

0800cbc4 <_scanf_float>:
 800cbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc8:	b087      	sub	sp, #28
 800cbca:	4617      	mov	r7, r2
 800cbcc:	9303      	str	r3, [sp, #12]
 800cbce:	688b      	ldr	r3, [r1, #8]
 800cbd0:	1e5a      	subs	r2, r3, #1
 800cbd2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cbd6:	bf81      	itttt	hi
 800cbd8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cbdc:	eb03 0b05 	addhi.w	fp, r3, r5
 800cbe0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cbe4:	608b      	strhi	r3, [r1, #8]
 800cbe6:	680b      	ldr	r3, [r1, #0]
 800cbe8:	460a      	mov	r2, r1
 800cbea:	f04f 0500 	mov.w	r5, #0
 800cbee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cbf2:	f842 3b1c 	str.w	r3, [r2], #28
 800cbf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cbfa:	4680      	mov	r8, r0
 800cbfc:	460c      	mov	r4, r1
 800cbfe:	bf98      	it	ls
 800cc00:	f04f 0b00 	movls.w	fp, #0
 800cc04:	9201      	str	r2, [sp, #4]
 800cc06:	4616      	mov	r6, r2
 800cc08:	46aa      	mov	sl, r5
 800cc0a:	46a9      	mov	r9, r5
 800cc0c:	9502      	str	r5, [sp, #8]
 800cc0e:	68a2      	ldr	r2, [r4, #8]
 800cc10:	b152      	cbz	r2, 800cc28 <_scanf_float+0x64>
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	2b4e      	cmp	r3, #78	@ 0x4e
 800cc18:	d864      	bhi.n	800cce4 <_scanf_float+0x120>
 800cc1a:	2b40      	cmp	r3, #64	@ 0x40
 800cc1c:	d83c      	bhi.n	800cc98 <_scanf_float+0xd4>
 800cc1e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cc22:	b2c8      	uxtb	r0, r1
 800cc24:	280e      	cmp	r0, #14
 800cc26:	d93a      	bls.n	800cc9e <_scanf_float+0xda>
 800cc28:	f1b9 0f00 	cmp.w	r9, #0
 800cc2c:	d003      	beq.n	800cc36 <_scanf_float+0x72>
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cc3a:	f1ba 0f01 	cmp.w	sl, #1
 800cc3e:	f200 8117 	bhi.w	800ce70 <_scanf_float+0x2ac>
 800cc42:	9b01      	ldr	r3, [sp, #4]
 800cc44:	429e      	cmp	r6, r3
 800cc46:	f200 8108 	bhi.w	800ce5a <_scanf_float+0x296>
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	b007      	add	sp, #28
 800cc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc52:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cc56:	2a0d      	cmp	r2, #13
 800cc58:	d8e6      	bhi.n	800cc28 <_scanf_float+0x64>
 800cc5a:	a101      	add	r1, pc, #4	@ (adr r1, 800cc60 <_scanf_float+0x9c>)
 800cc5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cc60:	0800cda7 	.word	0x0800cda7
 800cc64:	0800cc29 	.word	0x0800cc29
 800cc68:	0800cc29 	.word	0x0800cc29
 800cc6c:	0800cc29 	.word	0x0800cc29
 800cc70:	0800ce07 	.word	0x0800ce07
 800cc74:	0800cddf 	.word	0x0800cddf
 800cc78:	0800cc29 	.word	0x0800cc29
 800cc7c:	0800cc29 	.word	0x0800cc29
 800cc80:	0800cdb5 	.word	0x0800cdb5
 800cc84:	0800cc29 	.word	0x0800cc29
 800cc88:	0800cc29 	.word	0x0800cc29
 800cc8c:	0800cc29 	.word	0x0800cc29
 800cc90:	0800cc29 	.word	0x0800cc29
 800cc94:	0800cd6d 	.word	0x0800cd6d
 800cc98:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cc9c:	e7db      	b.n	800cc56 <_scanf_float+0x92>
 800cc9e:	290e      	cmp	r1, #14
 800cca0:	d8c2      	bhi.n	800cc28 <_scanf_float+0x64>
 800cca2:	a001      	add	r0, pc, #4	@ (adr r0, 800cca8 <_scanf_float+0xe4>)
 800cca4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cca8:	0800cd5d 	.word	0x0800cd5d
 800ccac:	0800cc29 	.word	0x0800cc29
 800ccb0:	0800cd5d 	.word	0x0800cd5d
 800ccb4:	0800cdf3 	.word	0x0800cdf3
 800ccb8:	0800cc29 	.word	0x0800cc29
 800ccbc:	0800cd05 	.word	0x0800cd05
 800ccc0:	0800cd43 	.word	0x0800cd43
 800ccc4:	0800cd43 	.word	0x0800cd43
 800ccc8:	0800cd43 	.word	0x0800cd43
 800cccc:	0800cd43 	.word	0x0800cd43
 800ccd0:	0800cd43 	.word	0x0800cd43
 800ccd4:	0800cd43 	.word	0x0800cd43
 800ccd8:	0800cd43 	.word	0x0800cd43
 800ccdc:	0800cd43 	.word	0x0800cd43
 800cce0:	0800cd43 	.word	0x0800cd43
 800cce4:	2b6e      	cmp	r3, #110	@ 0x6e
 800cce6:	d809      	bhi.n	800ccfc <_scanf_float+0x138>
 800cce8:	2b60      	cmp	r3, #96	@ 0x60
 800ccea:	d8b2      	bhi.n	800cc52 <_scanf_float+0x8e>
 800ccec:	2b54      	cmp	r3, #84	@ 0x54
 800ccee:	d07b      	beq.n	800cde8 <_scanf_float+0x224>
 800ccf0:	2b59      	cmp	r3, #89	@ 0x59
 800ccf2:	d199      	bne.n	800cc28 <_scanf_float+0x64>
 800ccf4:	2d07      	cmp	r5, #7
 800ccf6:	d197      	bne.n	800cc28 <_scanf_float+0x64>
 800ccf8:	2508      	movs	r5, #8
 800ccfa:	e02c      	b.n	800cd56 <_scanf_float+0x192>
 800ccfc:	2b74      	cmp	r3, #116	@ 0x74
 800ccfe:	d073      	beq.n	800cde8 <_scanf_float+0x224>
 800cd00:	2b79      	cmp	r3, #121	@ 0x79
 800cd02:	e7f6      	b.n	800ccf2 <_scanf_float+0x12e>
 800cd04:	6821      	ldr	r1, [r4, #0]
 800cd06:	05c8      	lsls	r0, r1, #23
 800cd08:	d51b      	bpl.n	800cd42 <_scanf_float+0x17e>
 800cd0a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cd0e:	6021      	str	r1, [r4, #0]
 800cd10:	f109 0901 	add.w	r9, r9, #1
 800cd14:	f1bb 0f00 	cmp.w	fp, #0
 800cd18:	d003      	beq.n	800cd22 <_scanf_float+0x15e>
 800cd1a:	3201      	adds	r2, #1
 800cd1c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cd20:	60a2      	str	r2, [r4, #8]
 800cd22:	68a3      	ldr	r3, [r4, #8]
 800cd24:	3b01      	subs	r3, #1
 800cd26:	60a3      	str	r3, [r4, #8]
 800cd28:	6923      	ldr	r3, [r4, #16]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	6123      	str	r3, [r4, #16]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	607b      	str	r3, [r7, #4]
 800cd36:	f340 8087 	ble.w	800ce48 <_scanf_float+0x284>
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	603b      	str	r3, [r7, #0]
 800cd40:	e765      	b.n	800cc0e <_scanf_float+0x4a>
 800cd42:	eb1a 0105 	adds.w	r1, sl, r5
 800cd46:	f47f af6f 	bne.w	800cc28 <_scanf_float+0x64>
 800cd4a:	6822      	ldr	r2, [r4, #0]
 800cd4c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cd50:	6022      	str	r2, [r4, #0]
 800cd52:	460d      	mov	r5, r1
 800cd54:	468a      	mov	sl, r1
 800cd56:	f806 3b01 	strb.w	r3, [r6], #1
 800cd5a:	e7e2      	b.n	800cd22 <_scanf_float+0x15e>
 800cd5c:	6822      	ldr	r2, [r4, #0]
 800cd5e:	0610      	lsls	r0, r2, #24
 800cd60:	f57f af62 	bpl.w	800cc28 <_scanf_float+0x64>
 800cd64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd68:	6022      	str	r2, [r4, #0]
 800cd6a:	e7f4      	b.n	800cd56 <_scanf_float+0x192>
 800cd6c:	f1ba 0f00 	cmp.w	sl, #0
 800cd70:	d10e      	bne.n	800cd90 <_scanf_float+0x1cc>
 800cd72:	f1b9 0f00 	cmp.w	r9, #0
 800cd76:	d10e      	bne.n	800cd96 <_scanf_float+0x1d2>
 800cd78:	6822      	ldr	r2, [r4, #0]
 800cd7a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cd7e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cd82:	d108      	bne.n	800cd96 <_scanf_float+0x1d2>
 800cd84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd88:	6022      	str	r2, [r4, #0]
 800cd8a:	f04f 0a01 	mov.w	sl, #1
 800cd8e:	e7e2      	b.n	800cd56 <_scanf_float+0x192>
 800cd90:	f1ba 0f02 	cmp.w	sl, #2
 800cd94:	d055      	beq.n	800ce42 <_scanf_float+0x27e>
 800cd96:	2d01      	cmp	r5, #1
 800cd98:	d002      	beq.n	800cda0 <_scanf_float+0x1dc>
 800cd9a:	2d04      	cmp	r5, #4
 800cd9c:	f47f af44 	bne.w	800cc28 <_scanf_float+0x64>
 800cda0:	3501      	adds	r5, #1
 800cda2:	b2ed      	uxtb	r5, r5
 800cda4:	e7d7      	b.n	800cd56 <_scanf_float+0x192>
 800cda6:	f1ba 0f01 	cmp.w	sl, #1
 800cdaa:	f47f af3d 	bne.w	800cc28 <_scanf_float+0x64>
 800cdae:	f04f 0a02 	mov.w	sl, #2
 800cdb2:	e7d0      	b.n	800cd56 <_scanf_float+0x192>
 800cdb4:	b97d      	cbnz	r5, 800cdd6 <_scanf_float+0x212>
 800cdb6:	f1b9 0f00 	cmp.w	r9, #0
 800cdba:	f47f af38 	bne.w	800cc2e <_scanf_float+0x6a>
 800cdbe:	6822      	ldr	r2, [r4, #0]
 800cdc0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cdc4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cdc8:	f040 8101 	bne.w	800cfce <_scanf_float+0x40a>
 800cdcc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cdd0:	6022      	str	r2, [r4, #0]
 800cdd2:	2501      	movs	r5, #1
 800cdd4:	e7bf      	b.n	800cd56 <_scanf_float+0x192>
 800cdd6:	2d03      	cmp	r5, #3
 800cdd8:	d0e2      	beq.n	800cda0 <_scanf_float+0x1dc>
 800cdda:	2d05      	cmp	r5, #5
 800cddc:	e7de      	b.n	800cd9c <_scanf_float+0x1d8>
 800cdde:	2d02      	cmp	r5, #2
 800cde0:	f47f af22 	bne.w	800cc28 <_scanf_float+0x64>
 800cde4:	2503      	movs	r5, #3
 800cde6:	e7b6      	b.n	800cd56 <_scanf_float+0x192>
 800cde8:	2d06      	cmp	r5, #6
 800cdea:	f47f af1d 	bne.w	800cc28 <_scanf_float+0x64>
 800cdee:	2507      	movs	r5, #7
 800cdf0:	e7b1      	b.n	800cd56 <_scanf_float+0x192>
 800cdf2:	6822      	ldr	r2, [r4, #0]
 800cdf4:	0591      	lsls	r1, r2, #22
 800cdf6:	f57f af17 	bpl.w	800cc28 <_scanf_float+0x64>
 800cdfa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cdfe:	6022      	str	r2, [r4, #0]
 800ce00:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce04:	e7a7      	b.n	800cd56 <_scanf_float+0x192>
 800ce06:	6822      	ldr	r2, [r4, #0]
 800ce08:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ce0c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ce10:	d006      	beq.n	800ce20 <_scanf_float+0x25c>
 800ce12:	0550      	lsls	r0, r2, #21
 800ce14:	f57f af08 	bpl.w	800cc28 <_scanf_float+0x64>
 800ce18:	f1b9 0f00 	cmp.w	r9, #0
 800ce1c:	f000 80d7 	beq.w	800cfce <_scanf_float+0x40a>
 800ce20:	0591      	lsls	r1, r2, #22
 800ce22:	bf58      	it	pl
 800ce24:	9902      	ldrpl	r1, [sp, #8]
 800ce26:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ce2a:	bf58      	it	pl
 800ce2c:	eba9 0101 	subpl.w	r1, r9, r1
 800ce30:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ce34:	bf58      	it	pl
 800ce36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ce3a:	6022      	str	r2, [r4, #0]
 800ce3c:	f04f 0900 	mov.w	r9, #0
 800ce40:	e789      	b.n	800cd56 <_scanf_float+0x192>
 800ce42:	f04f 0a03 	mov.w	sl, #3
 800ce46:	e786      	b.n	800cd56 <_scanf_float+0x192>
 800ce48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ce4c:	4639      	mov	r1, r7
 800ce4e:	4640      	mov	r0, r8
 800ce50:	4798      	blx	r3
 800ce52:	2800      	cmp	r0, #0
 800ce54:	f43f aedb 	beq.w	800cc0e <_scanf_float+0x4a>
 800ce58:	e6e6      	b.n	800cc28 <_scanf_float+0x64>
 800ce5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce62:	463a      	mov	r2, r7
 800ce64:	4640      	mov	r0, r8
 800ce66:	4798      	blx	r3
 800ce68:	6923      	ldr	r3, [r4, #16]
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	6123      	str	r3, [r4, #16]
 800ce6e:	e6e8      	b.n	800cc42 <_scanf_float+0x7e>
 800ce70:	1e6b      	subs	r3, r5, #1
 800ce72:	2b06      	cmp	r3, #6
 800ce74:	d824      	bhi.n	800cec0 <_scanf_float+0x2fc>
 800ce76:	2d02      	cmp	r5, #2
 800ce78:	d836      	bhi.n	800cee8 <_scanf_float+0x324>
 800ce7a:	9b01      	ldr	r3, [sp, #4]
 800ce7c:	429e      	cmp	r6, r3
 800ce7e:	f67f aee4 	bls.w	800cc4a <_scanf_float+0x86>
 800ce82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce8a:	463a      	mov	r2, r7
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	4798      	blx	r3
 800ce90:	6923      	ldr	r3, [r4, #16]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	6123      	str	r3, [r4, #16]
 800ce96:	e7f0      	b.n	800ce7a <_scanf_float+0x2b6>
 800ce98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce9c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cea0:	463a      	mov	r2, r7
 800cea2:	4640      	mov	r0, r8
 800cea4:	4798      	blx	r3
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	6123      	str	r3, [r4, #16]
 800ceac:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ceb0:	fa5f fa8a 	uxtb.w	sl, sl
 800ceb4:	f1ba 0f02 	cmp.w	sl, #2
 800ceb8:	d1ee      	bne.n	800ce98 <_scanf_float+0x2d4>
 800ceba:	3d03      	subs	r5, #3
 800cebc:	b2ed      	uxtb	r5, r5
 800cebe:	1b76      	subs	r6, r6, r5
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	05da      	lsls	r2, r3, #23
 800cec4:	d530      	bpl.n	800cf28 <_scanf_float+0x364>
 800cec6:	055b      	lsls	r3, r3, #21
 800cec8:	d511      	bpl.n	800ceee <_scanf_float+0x32a>
 800ceca:	9b01      	ldr	r3, [sp, #4]
 800cecc:	429e      	cmp	r6, r3
 800cece:	f67f aebc 	bls.w	800cc4a <_scanf_float+0x86>
 800ced2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ced6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ceda:	463a      	mov	r2, r7
 800cedc:	4640      	mov	r0, r8
 800cede:	4798      	blx	r3
 800cee0:	6923      	ldr	r3, [r4, #16]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	6123      	str	r3, [r4, #16]
 800cee6:	e7f0      	b.n	800ceca <_scanf_float+0x306>
 800cee8:	46aa      	mov	sl, r5
 800ceea:	46b3      	mov	fp, r6
 800ceec:	e7de      	b.n	800ceac <_scanf_float+0x2e8>
 800ceee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cef2:	6923      	ldr	r3, [r4, #16]
 800cef4:	2965      	cmp	r1, #101	@ 0x65
 800cef6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cefa:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800cefe:	6123      	str	r3, [r4, #16]
 800cf00:	d00c      	beq.n	800cf1c <_scanf_float+0x358>
 800cf02:	2945      	cmp	r1, #69	@ 0x45
 800cf04:	d00a      	beq.n	800cf1c <_scanf_float+0x358>
 800cf06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf0a:	463a      	mov	r2, r7
 800cf0c:	4640      	mov	r0, r8
 800cf0e:	4798      	blx	r3
 800cf10:	6923      	ldr	r3, [r4, #16]
 800cf12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cf16:	3b01      	subs	r3, #1
 800cf18:	1eb5      	subs	r5, r6, #2
 800cf1a:	6123      	str	r3, [r4, #16]
 800cf1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf20:	463a      	mov	r2, r7
 800cf22:	4640      	mov	r0, r8
 800cf24:	4798      	blx	r3
 800cf26:	462e      	mov	r6, r5
 800cf28:	6822      	ldr	r2, [r4, #0]
 800cf2a:	f012 0210 	ands.w	r2, r2, #16
 800cf2e:	d001      	beq.n	800cf34 <_scanf_float+0x370>
 800cf30:	2000      	movs	r0, #0
 800cf32:	e68b      	b.n	800cc4c <_scanf_float+0x88>
 800cf34:	7032      	strb	r2, [r6, #0]
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cf3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf40:	d11a      	bne.n	800cf78 <_scanf_float+0x3b4>
 800cf42:	9b02      	ldr	r3, [sp, #8]
 800cf44:	454b      	cmp	r3, r9
 800cf46:	eba3 0209 	sub.w	r2, r3, r9
 800cf4a:	d121      	bne.n	800cf90 <_scanf_float+0x3cc>
 800cf4c:	9901      	ldr	r1, [sp, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	4640      	mov	r0, r8
 800cf52:	f000 ff07 	bl	800dd64 <_strtod_r>
 800cf56:	9b03      	ldr	r3, [sp, #12]
 800cf58:	6821      	ldr	r1, [r4, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f011 0f02 	tst.w	r1, #2
 800cf60:	f103 0204 	add.w	r2, r3, #4
 800cf64:	d01f      	beq.n	800cfa6 <_scanf_float+0x3e2>
 800cf66:	9903      	ldr	r1, [sp, #12]
 800cf68:	600a      	str	r2, [r1, #0]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	ed83 0b00 	vstr	d0, [r3]
 800cf70:	68e3      	ldr	r3, [r4, #12]
 800cf72:	3301      	adds	r3, #1
 800cf74:	60e3      	str	r3, [r4, #12]
 800cf76:	e7db      	b.n	800cf30 <_scanf_float+0x36c>
 800cf78:	9b04      	ldr	r3, [sp, #16]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d0e6      	beq.n	800cf4c <_scanf_float+0x388>
 800cf7e:	9905      	ldr	r1, [sp, #20]
 800cf80:	230a      	movs	r3, #10
 800cf82:	3101      	adds	r1, #1
 800cf84:	4640      	mov	r0, r8
 800cf86:	f000 ff6d 	bl	800de64 <_strtol_r>
 800cf8a:	9b04      	ldr	r3, [sp, #16]
 800cf8c:	9e05      	ldr	r6, [sp, #20]
 800cf8e:	1ac2      	subs	r2, r0, r3
 800cf90:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cf94:	429e      	cmp	r6, r3
 800cf96:	bf28      	it	cs
 800cf98:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cf9c:	490d      	ldr	r1, [pc, #52]	@ (800cfd4 <_scanf_float+0x410>)
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f000 f828 	bl	800cff4 <siprintf>
 800cfa4:	e7d2      	b.n	800cf4c <_scanf_float+0x388>
 800cfa6:	f011 0f04 	tst.w	r1, #4
 800cfaa:	9903      	ldr	r1, [sp, #12]
 800cfac:	600a      	str	r2, [r1, #0]
 800cfae:	d1dc      	bne.n	800cf6a <_scanf_float+0x3a6>
 800cfb0:	eeb4 0b40 	vcmp.f64	d0, d0
 800cfb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb8:	681d      	ldr	r5, [r3, #0]
 800cfba:	d705      	bvc.n	800cfc8 <_scanf_float+0x404>
 800cfbc:	4806      	ldr	r0, [pc, #24]	@ (800cfd8 <_scanf_float+0x414>)
 800cfbe:	f001 f83b 	bl	800e038 <nanf>
 800cfc2:	ed85 0a00 	vstr	s0, [r5]
 800cfc6:	e7d3      	b.n	800cf70 <_scanf_float+0x3ac>
 800cfc8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cfcc:	e7f9      	b.n	800cfc2 <_scanf_float+0x3fe>
 800cfce:	f04f 0900 	mov.w	r9, #0
 800cfd2:	e630      	b.n	800cc36 <_scanf_float+0x72>
 800cfd4:	08010844 	.word	0x08010844
 800cfd8:	08010c3b 	.word	0x08010c3b

0800cfdc <__malloc_lock>:
 800cfdc:	4801      	ldr	r0, [pc, #4]	@ (800cfe4 <__malloc_lock+0x8>)
 800cfde:	f001 b812 	b.w	800e006 <__retarget_lock_acquire_recursive>
 800cfe2:	bf00      	nop
 800cfe4:	24000868 	.word	0x24000868

0800cfe8 <__malloc_unlock>:
 800cfe8:	4801      	ldr	r0, [pc, #4]	@ (800cff0 <__malloc_unlock+0x8>)
 800cfea:	f001 b80d 	b.w	800e008 <__retarget_lock_release_recursive>
 800cfee:	bf00      	nop
 800cff0:	24000868 	.word	0x24000868

0800cff4 <siprintf>:
 800cff4:	b40e      	push	{r1, r2, r3}
 800cff6:	b500      	push	{lr}
 800cff8:	b09c      	sub	sp, #112	@ 0x70
 800cffa:	ab1d      	add	r3, sp, #116	@ 0x74
 800cffc:	9002      	str	r0, [sp, #8]
 800cffe:	9006      	str	r0, [sp, #24]
 800d000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d004:	4809      	ldr	r0, [pc, #36]	@ (800d02c <siprintf+0x38>)
 800d006:	9107      	str	r1, [sp, #28]
 800d008:	9104      	str	r1, [sp, #16]
 800d00a:	4909      	ldr	r1, [pc, #36]	@ (800d030 <siprintf+0x3c>)
 800d00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d010:	9105      	str	r1, [sp, #20]
 800d012:	6800      	ldr	r0, [r0, #0]
 800d014:	9301      	str	r3, [sp, #4]
 800d016:	a902      	add	r1, sp, #8
 800d018:	f002 f9d2 	bl	800f3c0 <_svfiprintf_r>
 800d01c:	9b02      	ldr	r3, [sp, #8]
 800d01e:	2200      	movs	r2, #0
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	b01c      	add	sp, #112	@ 0x70
 800d024:	f85d eb04 	ldr.w	lr, [sp], #4
 800d028:	b003      	add	sp, #12
 800d02a:	4770      	bx	lr
 800d02c:	24000188 	.word	0x24000188
 800d030:	ffff0208 	.word	0xffff0208

0800d034 <__sread>:
 800d034:	b510      	push	{r4, lr}
 800d036:	460c      	mov	r4, r1
 800d038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d03c:	f000 ff84 	bl	800df48 <_read_r>
 800d040:	2800      	cmp	r0, #0
 800d042:	bfab      	itete	ge
 800d044:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d046:	89a3      	ldrhlt	r3, [r4, #12]
 800d048:	181b      	addge	r3, r3, r0
 800d04a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d04e:	bfac      	ite	ge
 800d050:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d052:	81a3      	strhlt	r3, [r4, #12]
 800d054:	bd10      	pop	{r4, pc}

0800d056 <__swrite>:
 800d056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d05a:	461f      	mov	r7, r3
 800d05c:	898b      	ldrh	r3, [r1, #12]
 800d05e:	05db      	lsls	r3, r3, #23
 800d060:	4605      	mov	r5, r0
 800d062:	460c      	mov	r4, r1
 800d064:	4616      	mov	r6, r2
 800d066:	d505      	bpl.n	800d074 <__swrite+0x1e>
 800d068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06c:	2302      	movs	r3, #2
 800d06e:	2200      	movs	r2, #0
 800d070:	f000 ff58 	bl	800df24 <_lseek_r>
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d07a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d07e:	81a3      	strh	r3, [r4, #12]
 800d080:	4632      	mov	r2, r6
 800d082:	463b      	mov	r3, r7
 800d084:	4628      	mov	r0, r5
 800d086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d08a:	f000 bf7f 	b.w	800df8c <_write_r>

0800d08e <__sseek>:
 800d08e:	b510      	push	{r4, lr}
 800d090:	460c      	mov	r4, r1
 800d092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d096:	f000 ff45 	bl	800df24 <_lseek_r>
 800d09a:	1c43      	adds	r3, r0, #1
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	bf15      	itete	ne
 800d0a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0aa:	81a3      	strheq	r3, [r4, #12]
 800d0ac:	bf18      	it	ne
 800d0ae:	81a3      	strhne	r3, [r4, #12]
 800d0b0:	bd10      	pop	{r4, pc}

0800d0b2 <__sclose>:
 800d0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b6:	f000 bf25 	b.w	800df04 <_close_r>
	...

0800d0bc <std>:
 800d0bc:	2300      	movs	r3, #0
 800d0be:	b510      	push	{r4, lr}
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	e9c0 3300 	strd	r3, r3, [r0]
 800d0c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0ca:	6083      	str	r3, [r0, #8]
 800d0cc:	8181      	strh	r1, [r0, #12]
 800d0ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800d0d0:	81c2      	strh	r2, [r0, #14]
 800d0d2:	6183      	str	r3, [r0, #24]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	2208      	movs	r2, #8
 800d0d8:	305c      	adds	r0, #92	@ 0x5c
 800d0da:	f000 ff07 	bl	800deec <memset>
 800d0de:	4b0d      	ldr	r3, [pc, #52]	@ (800d114 <std+0x58>)
 800d0e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d118 <std+0x5c>)
 800d0e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d0e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d11c <std+0x60>)
 800d0e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d120 <std+0x64>)
 800d0ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800d0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d124 <std+0x68>)
 800d0f0:	6224      	str	r4, [r4, #32]
 800d0f2:	429c      	cmp	r4, r3
 800d0f4:	d006      	beq.n	800d104 <std+0x48>
 800d0f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d0fa:	4294      	cmp	r4, r2
 800d0fc:	d002      	beq.n	800d104 <std+0x48>
 800d0fe:	33d0      	adds	r3, #208	@ 0xd0
 800d100:	429c      	cmp	r4, r3
 800d102:	d105      	bne.n	800d110 <std+0x54>
 800d104:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d10c:	f000 bf7a 	b.w	800e004 <__retarget_lock_init_recursive>
 800d110:	bd10      	pop	{r4, pc}
 800d112:	bf00      	nop
 800d114:	0800d035 	.word	0x0800d035
 800d118:	0800d057 	.word	0x0800d057
 800d11c:	0800d08f 	.word	0x0800d08f
 800d120:	0800d0b3 	.word	0x0800d0b3
 800d124:	24000728 	.word	0x24000728

0800d128 <stdio_exit_handler>:
 800d128:	4a02      	ldr	r2, [pc, #8]	@ (800d134 <stdio_exit_handler+0xc>)
 800d12a:	4903      	ldr	r1, [pc, #12]	@ (800d138 <stdio_exit_handler+0x10>)
 800d12c:	4803      	ldr	r0, [pc, #12]	@ (800d13c <stdio_exit_handler+0x14>)
 800d12e:	f000 be9b 	b.w	800de68 <_fwalk_sglue>
 800d132:	bf00      	nop
 800d134:	24000010 	.word	0x24000010
 800d138:	0800f969 	.word	0x0800f969
 800d13c:	2400018c 	.word	0x2400018c

0800d140 <cleanup_stdio>:
 800d140:	6841      	ldr	r1, [r0, #4]
 800d142:	4b0c      	ldr	r3, [pc, #48]	@ (800d174 <cleanup_stdio+0x34>)
 800d144:	4299      	cmp	r1, r3
 800d146:	b510      	push	{r4, lr}
 800d148:	4604      	mov	r4, r0
 800d14a:	d001      	beq.n	800d150 <cleanup_stdio+0x10>
 800d14c:	f002 fc0c 	bl	800f968 <_fflush_r>
 800d150:	68a1      	ldr	r1, [r4, #8]
 800d152:	4b09      	ldr	r3, [pc, #36]	@ (800d178 <cleanup_stdio+0x38>)
 800d154:	4299      	cmp	r1, r3
 800d156:	d002      	beq.n	800d15e <cleanup_stdio+0x1e>
 800d158:	4620      	mov	r0, r4
 800d15a:	f002 fc05 	bl	800f968 <_fflush_r>
 800d15e:	68e1      	ldr	r1, [r4, #12]
 800d160:	4b06      	ldr	r3, [pc, #24]	@ (800d17c <cleanup_stdio+0x3c>)
 800d162:	4299      	cmp	r1, r3
 800d164:	d004      	beq.n	800d170 <cleanup_stdio+0x30>
 800d166:	4620      	mov	r0, r4
 800d168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d16c:	f002 bbfc 	b.w	800f968 <_fflush_r>
 800d170:	bd10      	pop	{r4, pc}
 800d172:	bf00      	nop
 800d174:	24000728 	.word	0x24000728
 800d178:	24000790 	.word	0x24000790
 800d17c:	240007f8 	.word	0x240007f8

0800d180 <global_stdio_init.part.0>:
 800d180:	b510      	push	{r4, lr}
 800d182:	4b0b      	ldr	r3, [pc, #44]	@ (800d1b0 <global_stdio_init.part.0+0x30>)
 800d184:	4c0b      	ldr	r4, [pc, #44]	@ (800d1b4 <global_stdio_init.part.0+0x34>)
 800d186:	4a0c      	ldr	r2, [pc, #48]	@ (800d1b8 <global_stdio_init.part.0+0x38>)
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	4620      	mov	r0, r4
 800d18c:	2200      	movs	r2, #0
 800d18e:	2104      	movs	r1, #4
 800d190:	f7ff ff94 	bl	800d0bc <std>
 800d194:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d198:	2201      	movs	r2, #1
 800d19a:	2109      	movs	r1, #9
 800d19c:	f7ff ff8e 	bl	800d0bc <std>
 800d1a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1aa:	2112      	movs	r1, #18
 800d1ac:	f7ff bf86 	b.w	800d0bc <std>
 800d1b0:	24000860 	.word	0x24000860
 800d1b4:	24000728 	.word	0x24000728
 800d1b8:	0800d129 	.word	0x0800d129

0800d1bc <__sfp_lock_acquire>:
 800d1bc:	4801      	ldr	r0, [pc, #4]	@ (800d1c4 <__sfp_lock_acquire+0x8>)
 800d1be:	f000 bf22 	b.w	800e006 <__retarget_lock_acquire_recursive>
 800d1c2:	bf00      	nop
 800d1c4:	24000869 	.word	0x24000869

0800d1c8 <__sfp_lock_release>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	@ (800d1d0 <__sfp_lock_release+0x8>)
 800d1ca:	f000 bf1d 	b.w	800e008 <__retarget_lock_release_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	24000869 	.word	0x24000869

0800d1d4 <__sinit>:
 800d1d4:	b510      	push	{r4, lr}
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	f7ff fff0 	bl	800d1bc <__sfp_lock_acquire>
 800d1dc:	6a23      	ldr	r3, [r4, #32]
 800d1de:	b11b      	cbz	r3, 800d1e8 <__sinit+0x14>
 800d1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1e4:	f7ff bff0 	b.w	800d1c8 <__sfp_lock_release>
 800d1e8:	4b04      	ldr	r3, [pc, #16]	@ (800d1fc <__sinit+0x28>)
 800d1ea:	6223      	str	r3, [r4, #32]
 800d1ec:	4b04      	ldr	r3, [pc, #16]	@ (800d200 <__sinit+0x2c>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1f5      	bne.n	800d1e0 <__sinit+0xc>
 800d1f4:	f7ff ffc4 	bl	800d180 <global_stdio_init.part.0>
 800d1f8:	e7f2      	b.n	800d1e0 <__sinit+0xc>
 800d1fa:	bf00      	nop
 800d1fc:	0800d141 	.word	0x0800d141
 800d200:	24000860 	.word	0x24000860

0800d204 <sulp>:
 800d204:	b570      	push	{r4, r5, r6, lr}
 800d206:	4604      	mov	r4, r0
 800d208:	460d      	mov	r5, r1
 800d20a:	4616      	mov	r6, r2
 800d20c:	ec45 4b10 	vmov	d0, r4, r5
 800d210:	f002 ff46 	bl	80100a0 <__ulp>
 800d214:	b17e      	cbz	r6, 800d236 <sulp+0x32>
 800d216:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d21a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d21e:	2b00      	cmp	r3, #0
 800d220:	dd09      	ble.n	800d236 <sulp+0x32>
 800d222:	051b      	lsls	r3, r3, #20
 800d224:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d228:	2000      	movs	r0, #0
 800d22a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d22e:	ec41 0b17 	vmov	d7, r0, r1
 800d232:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d236:	bd70      	pop	{r4, r5, r6, pc}

0800d238 <_strtod_l>:
 800d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d23c:	ed2d 8b0a 	vpush	{d8-d12}
 800d240:	b097      	sub	sp, #92	@ 0x5c
 800d242:	4688      	mov	r8, r1
 800d244:	920e      	str	r2, [sp, #56]	@ 0x38
 800d246:	2200      	movs	r2, #0
 800d248:	9212      	str	r2, [sp, #72]	@ 0x48
 800d24a:	9005      	str	r0, [sp, #20]
 800d24c:	f04f 0a00 	mov.w	sl, #0
 800d250:	f04f 0b00 	mov.w	fp, #0
 800d254:	460a      	mov	r2, r1
 800d256:	9211      	str	r2, [sp, #68]	@ 0x44
 800d258:	7811      	ldrb	r1, [r2, #0]
 800d25a:	292b      	cmp	r1, #43	@ 0x2b
 800d25c:	d04c      	beq.n	800d2f8 <_strtod_l+0xc0>
 800d25e:	d839      	bhi.n	800d2d4 <_strtod_l+0x9c>
 800d260:	290d      	cmp	r1, #13
 800d262:	d833      	bhi.n	800d2cc <_strtod_l+0x94>
 800d264:	2908      	cmp	r1, #8
 800d266:	d833      	bhi.n	800d2d0 <_strtod_l+0x98>
 800d268:	2900      	cmp	r1, #0
 800d26a:	d03c      	beq.n	800d2e6 <_strtod_l+0xae>
 800d26c:	2200      	movs	r2, #0
 800d26e:	9208      	str	r2, [sp, #32]
 800d270:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d272:	782a      	ldrb	r2, [r5, #0]
 800d274:	2a30      	cmp	r2, #48	@ 0x30
 800d276:	f040 80b5 	bne.w	800d3e4 <_strtod_l+0x1ac>
 800d27a:	786a      	ldrb	r2, [r5, #1]
 800d27c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d280:	2a58      	cmp	r2, #88	@ 0x58
 800d282:	d170      	bne.n	800d366 <_strtod_l+0x12e>
 800d284:	9302      	str	r3, [sp, #8]
 800d286:	9b08      	ldr	r3, [sp, #32]
 800d288:	9301      	str	r3, [sp, #4]
 800d28a:	ab12      	add	r3, sp, #72	@ 0x48
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	4a8b      	ldr	r2, [pc, #556]	@ (800d4bc <_strtod_l+0x284>)
 800d290:	9805      	ldr	r0, [sp, #20]
 800d292:	ab13      	add	r3, sp, #76	@ 0x4c
 800d294:	a911      	add	r1, sp, #68	@ 0x44
 800d296:	f001 fd67 	bl	800ed68 <__gethex>
 800d29a:	f010 060f 	ands.w	r6, r0, #15
 800d29e:	4604      	mov	r4, r0
 800d2a0:	d005      	beq.n	800d2ae <_strtod_l+0x76>
 800d2a2:	2e06      	cmp	r6, #6
 800d2a4:	d12a      	bne.n	800d2fc <_strtod_l+0xc4>
 800d2a6:	3501      	adds	r5, #1
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	9511      	str	r5, [sp, #68]	@ 0x44
 800d2ac:	9308      	str	r3, [sp, #32]
 800d2ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f040 852f 	bne.w	800dd14 <_strtod_l+0xadc>
 800d2b6:	9b08      	ldr	r3, [sp, #32]
 800d2b8:	ec4b ab10 	vmov	d0, sl, fp
 800d2bc:	b1cb      	cbz	r3, 800d2f2 <_strtod_l+0xba>
 800d2be:	eeb1 0b40 	vneg.f64	d0, d0
 800d2c2:	b017      	add	sp, #92	@ 0x5c
 800d2c4:	ecbd 8b0a 	vpop	{d8-d12}
 800d2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2cc:	2920      	cmp	r1, #32
 800d2ce:	d1cd      	bne.n	800d26c <_strtod_l+0x34>
 800d2d0:	3201      	adds	r2, #1
 800d2d2:	e7c0      	b.n	800d256 <_strtod_l+0x1e>
 800d2d4:	292d      	cmp	r1, #45	@ 0x2d
 800d2d6:	d1c9      	bne.n	800d26c <_strtod_l+0x34>
 800d2d8:	2101      	movs	r1, #1
 800d2da:	9108      	str	r1, [sp, #32]
 800d2dc:	1c51      	adds	r1, r2, #1
 800d2de:	9111      	str	r1, [sp, #68]	@ 0x44
 800d2e0:	7852      	ldrb	r2, [r2, #1]
 800d2e2:	2a00      	cmp	r2, #0
 800d2e4:	d1c4      	bne.n	800d270 <_strtod_l+0x38>
 800d2e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2e8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f040 850f 	bne.w	800dd10 <_strtod_l+0xad8>
 800d2f2:	ec4b ab10 	vmov	d0, sl, fp
 800d2f6:	e7e4      	b.n	800d2c2 <_strtod_l+0x8a>
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	e7ee      	b.n	800d2da <_strtod_l+0xa2>
 800d2fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d2fe:	b13a      	cbz	r2, 800d310 <_strtod_l+0xd8>
 800d300:	2135      	movs	r1, #53	@ 0x35
 800d302:	a814      	add	r0, sp, #80	@ 0x50
 800d304:	f002 ffc3 	bl	801028e <__copybits>
 800d308:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d30a:	9805      	ldr	r0, [sp, #20]
 800d30c:	f002 fb94 	bl	800fa38 <_Bfree>
 800d310:	1e73      	subs	r3, r6, #1
 800d312:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d314:	2b04      	cmp	r3, #4
 800d316:	d806      	bhi.n	800d326 <_strtod_l+0xee>
 800d318:	e8df f003 	tbb	[pc, r3]
 800d31c:	201d0314 	.word	0x201d0314
 800d320:	14          	.byte	0x14
 800d321:	00          	.byte	0x00
 800d322:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d326:	05e3      	lsls	r3, r4, #23
 800d328:	bf48      	it	mi
 800d32a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d32e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d332:	0d1b      	lsrs	r3, r3, #20
 800d334:	051b      	lsls	r3, r3, #20
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1b9      	bne.n	800d2ae <_strtod_l+0x76>
 800d33a:	f000 fe39 	bl	800dfb0 <__errno>
 800d33e:	2322      	movs	r3, #34	@ 0x22
 800d340:	6003      	str	r3, [r0, #0]
 800d342:	e7b4      	b.n	800d2ae <_strtod_l+0x76>
 800d344:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d348:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d34c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d350:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d354:	e7e7      	b.n	800d326 <_strtod_l+0xee>
 800d356:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800d4c4 <_strtod_l+0x28c>
 800d35a:	e7e4      	b.n	800d326 <_strtod_l+0xee>
 800d35c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d360:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d364:	e7df      	b.n	800d326 <_strtod_l+0xee>
 800d366:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d36c:	785b      	ldrb	r3, [r3, #1]
 800d36e:	2b30      	cmp	r3, #48	@ 0x30
 800d370:	d0f9      	beq.n	800d366 <_strtod_l+0x12e>
 800d372:	2b00      	cmp	r3, #0
 800d374:	d09b      	beq.n	800d2ae <_strtod_l+0x76>
 800d376:	2301      	movs	r3, #1
 800d378:	2600      	movs	r6, #0
 800d37a:	9307      	str	r3, [sp, #28]
 800d37c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d37e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d380:	46b1      	mov	r9, r6
 800d382:	4635      	mov	r5, r6
 800d384:	220a      	movs	r2, #10
 800d386:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d388:	7804      	ldrb	r4, [r0, #0]
 800d38a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d38e:	b2d9      	uxtb	r1, r3
 800d390:	2909      	cmp	r1, #9
 800d392:	d929      	bls.n	800d3e8 <_strtod_l+0x1b0>
 800d394:	494a      	ldr	r1, [pc, #296]	@ (800d4c0 <_strtod_l+0x288>)
 800d396:	2201      	movs	r2, #1
 800d398:	f000 fd96 	bl	800dec8 <strncmp>
 800d39c:	b378      	cbz	r0, 800d3fe <_strtod_l+0x1c6>
 800d39e:	2000      	movs	r0, #0
 800d3a0:	4622      	mov	r2, r4
 800d3a2:	462b      	mov	r3, r5
 800d3a4:	4607      	mov	r7, r0
 800d3a6:	9006      	str	r0, [sp, #24]
 800d3a8:	2a65      	cmp	r2, #101	@ 0x65
 800d3aa:	d001      	beq.n	800d3b0 <_strtod_l+0x178>
 800d3ac:	2a45      	cmp	r2, #69	@ 0x45
 800d3ae:	d117      	bne.n	800d3e0 <_strtod_l+0x1a8>
 800d3b0:	b91b      	cbnz	r3, 800d3ba <_strtod_l+0x182>
 800d3b2:	9b07      	ldr	r3, [sp, #28]
 800d3b4:	4303      	orrs	r3, r0
 800d3b6:	d096      	beq.n	800d2e6 <_strtod_l+0xae>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d3be:	f108 0201 	add.w	r2, r8, #1
 800d3c2:	9211      	str	r2, [sp, #68]	@ 0x44
 800d3c4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d3c8:	2a2b      	cmp	r2, #43	@ 0x2b
 800d3ca:	d06b      	beq.n	800d4a4 <_strtod_l+0x26c>
 800d3cc:	2a2d      	cmp	r2, #45	@ 0x2d
 800d3ce:	d071      	beq.n	800d4b4 <_strtod_l+0x27c>
 800d3d0:	f04f 0e00 	mov.w	lr, #0
 800d3d4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d3d8:	2c09      	cmp	r4, #9
 800d3da:	d979      	bls.n	800d4d0 <_strtod_l+0x298>
 800d3dc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d3e0:	2400      	movs	r4, #0
 800d3e2:	e094      	b.n	800d50e <_strtod_l+0x2d6>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	e7c7      	b.n	800d378 <_strtod_l+0x140>
 800d3e8:	2d08      	cmp	r5, #8
 800d3ea:	f100 0001 	add.w	r0, r0, #1
 800d3ee:	bfd4      	ite	le
 800d3f0:	fb02 3909 	mlale	r9, r2, r9, r3
 800d3f4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800d3f8:	3501      	adds	r5, #1
 800d3fa:	9011      	str	r0, [sp, #68]	@ 0x44
 800d3fc:	e7c3      	b.n	800d386 <_strtod_l+0x14e>
 800d3fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d400:	1c5a      	adds	r2, r3, #1
 800d402:	9211      	str	r2, [sp, #68]	@ 0x44
 800d404:	785a      	ldrb	r2, [r3, #1]
 800d406:	b375      	cbz	r5, 800d466 <_strtod_l+0x22e>
 800d408:	4607      	mov	r7, r0
 800d40a:	462b      	mov	r3, r5
 800d40c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d410:	2909      	cmp	r1, #9
 800d412:	d913      	bls.n	800d43c <_strtod_l+0x204>
 800d414:	2101      	movs	r1, #1
 800d416:	9106      	str	r1, [sp, #24]
 800d418:	e7c6      	b.n	800d3a8 <_strtod_l+0x170>
 800d41a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	9211      	str	r2, [sp, #68]	@ 0x44
 800d420:	785a      	ldrb	r2, [r3, #1]
 800d422:	3001      	adds	r0, #1
 800d424:	2a30      	cmp	r2, #48	@ 0x30
 800d426:	d0f8      	beq.n	800d41a <_strtod_l+0x1e2>
 800d428:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d42c:	2b08      	cmp	r3, #8
 800d42e:	f200 8476 	bhi.w	800dd1e <_strtod_l+0xae6>
 800d432:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d434:	930a      	str	r3, [sp, #40]	@ 0x28
 800d436:	4607      	mov	r7, r0
 800d438:	2000      	movs	r0, #0
 800d43a:	4603      	mov	r3, r0
 800d43c:	3a30      	subs	r2, #48	@ 0x30
 800d43e:	f100 0101 	add.w	r1, r0, #1
 800d442:	d023      	beq.n	800d48c <_strtod_l+0x254>
 800d444:	440f      	add	r7, r1
 800d446:	eb00 0c03 	add.w	ip, r0, r3
 800d44a:	4619      	mov	r1, r3
 800d44c:	240a      	movs	r4, #10
 800d44e:	4561      	cmp	r1, ip
 800d450:	d10b      	bne.n	800d46a <_strtod_l+0x232>
 800d452:	1c5c      	adds	r4, r3, #1
 800d454:	4403      	add	r3, r0
 800d456:	2b08      	cmp	r3, #8
 800d458:	4404      	add	r4, r0
 800d45a:	dc11      	bgt.n	800d480 <_strtod_l+0x248>
 800d45c:	230a      	movs	r3, #10
 800d45e:	fb03 2909 	mla	r9, r3, r9, r2
 800d462:	2100      	movs	r1, #0
 800d464:	e013      	b.n	800d48e <_strtod_l+0x256>
 800d466:	4628      	mov	r0, r5
 800d468:	e7dc      	b.n	800d424 <_strtod_l+0x1ec>
 800d46a:	2908      	cmp	r1, #8
 800d46c:	f101 0101 	add.w	r1, r1, #1
 800d470:	dc02      	bgt.n	800d478 <_strtod_l+0x240>
 800d472:	fb04 f909 	mul.w	r9, r4, r9
 800d476:	e7ea      	b.n	800d44e <_strtod_l+0x216>
 800d478:	2910      	cmp	r1, #16
 800d47a:	bfd8      	it	le
 800d47c:	4366      	mulle	r6, r4
 800d47e:	e7e6      	b.n	800d44e <_strtod_l+0x216>
 800d480:	2b0f      	cmp	r3, #15
 800d482:	dcee      	bgt.n	800d462 <_strtod_l+0x22a>
 800d484:	230a      	movs	r3, #10
 800d486:	fb03 2606 	mla	r6, r3, r6, r2
 800d48a:	e7ea      	b.n	800d462 <_strtod_l+0x22a>
 800d48c:	461c      	mov	r4, r3
 800d48e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	9211      	str	r2, [sp, #68]	@ 0x44
 800d494:	785a      	ldrb	r2, [r3, #1]
 800d496:	4608      	mov	r0, r1
 800d498:	4623      	mov	r3, r4
 800d49a:	e7b7      	b.n	800d40c <_strtod_l+0x1d4>
 800d49c:	2301      	movs	r3, #1
 800d49e:	2700      	movs	r7, #0
 800d4a0:	9306      	str	r3, [sp, #24]
 800d4a2:	e786      	b.n	800d3b2 <_strtod_l+0x17a>
 800d4a4:	f04f 0e00 	mov.w	lr, #0
 800d4a8:	f108 0202 	add.w	r2, r8, #2
 800d4ac:	9211      	str	r2, [sp, #68]	@ 0x44
 800d4ae:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d4b2:	e78f      	b.n	800d3d4 <_strtod_l+0x19c>
 800d4b4:	f04f 0e01 	mov.w	lr, #1
 800d4b8:	e7f6      	b.n	800d4a8 <_strtod_l+0x270>
 800d4ba:	bf00      	nop
 800d4bc:	08010860 	.word	0x08010860
 800d4c0:	08010849 	.word	0x08010849
 800d4c4:	7ff00000 	.word	0x7ff00000
 800d4c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d4ca:	1c54      	adds	r4, r2, #1
 800d4cc:	9411      	str	r4, [sp, #68]	@ 0x44
 800d4ce:	7852      	ldrb	r2, [r2, #1]
 800d4d0:	2a30      	cmp	r2, #48	@ 0x30
 800d4d2:	d0f9      	beq.n	800d4c8 <_strtod_l+0x290>
 800d4d4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d4d8:	2c08      	cmp	r4, #8
 800d4da:	d881      	bhi.n	800d3e0 <_strtod_l+0x1a8>
 800d4dc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d4e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d4e6:	1c51      	adds	r1, r2, #1
 800d4e8:	9111      	str	r1, [sp, #68]	@ 0x44
 800d4ea:	7852      	ldrb	r2, [r2, #1]
 800d4ec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d4f0:	2c09      	cmp	r4, #9
 800d4f2:	d938      	bls.n	800d566 <_strtod_l+0x32e>
 800d4f4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d4f6:	1b0c      	subs	r4, r1, r4
 800d4f8:	2c08      	cmp	r4, #8
 800d4fa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d4fe:	dc02      	bgt.n	800d506 <_strtod_l+0x2ce>
 800d500:	4564      	cmp	r4, ip
 800d502:	bfa8      	it	ge
 800d504:	4664      	movge	r4, ip
 800d506:	f1be 0f00 	cmp.w	lr, #0
 800d50a:	d000      	beq.n	800d50e <_strtod_l+0x2d6>
 800d50c:	4264      	negs	r4, r4
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d14e      	bne.n	800d5b0 <_strtod_l+0x378>
 800d512:	9b07      	ldr	r3, [sp, #28]
 800d514:	4318      	orrs	r0, r3
 800d516:	f47f aeca 	bne.w	800d2ae <_strtod_l+0x76>
 800d51a:	9b06      	ldr	r3, [sp, #24]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f47f aee2 	bne.w	800d2e6 <_strtod_l+0xae>
 800d522:	2a69      	cmp	r2, #105	@ 0x69
 800d524:	d027      	beq.n	800d576 <_strtod_l+0x33e>
 800d526:	dc24      	bgt.n	800d572 <_strtod_l+0x33a>
 800d528:	2a49      	cmp	r2, #73	@ 0x49
 800d52a:	d024      	beq.n	800d576 <_strtod_l+0x33e>
 800d52c:	2a4e      	cmp	r2, #78	@ 0x4e
 800d52e:	f47f aeda 	bne.w	800d2e6 <_strtod_l+0xae>
 800d532:	4997      	ldr	r1, [pc, #604]	@ (800d790 <_strtod_l+0x558>)
 800d534:	a811      	add	r0, sp, #68	@ 0x44
 800d536:	f001 fe39 	bl	800f1ac <__match>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	f43f aed3 	beq.w	800d2e6 <_strtod_l+0xae>
 800d540:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b28      	cmp	r3, #40	@ 0x28
 800d546:	d12d      	bne.n	800d5a4 <_strtod_l+0x36c>
 800d548:	4992      	ldr	r1, [pc, #584]	@ (800d794 <_strtod_l+0x55c>)
 800d54a:	aa14      	add	r2, sp, #80	@ 0x50
 800d54c:	a811      	add	r0, sp, #68	@ 0x44
 800d54e:	f001 fe41 	bl	800f1d4 <__hexnan>
 800d552:	2805      	cmp	r0, #5
 800d554:	d126      	bne.n	800d5a4 <_strtod_l+0x36c>
 800d556:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d558:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d55c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d560:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d564:	e6a3      	b.n	800d2ae <_strtod_l+0x76>
 800d566:	240a      	movs	r4, #10
 800d568:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d56c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d570:	e7b8      	b.n	800d4e4 <_strtod_l+0x2ac>
 800d572:	2a6e      	cmp	r2, #110	@ 0x6e
 800d574:	e7db      	b.n	800d52e <_strtod_l+0x2f6>
 800d576:	4988      	ldr	r1, [pc, #544]	@ (800d798 <_strtod_l+0x560>)
 800d578:	a811      	add	r0, sp, #68	@ 0x44
 800d57a:	f001 fe17 	bl	800f1ac <__match>
 800d57e:	2800      	cmp	r0, #0
 800d580:	f43f aeb1 	beq.w	800d2e6 <_strtod_l+0xae>
 800d584:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d586:	4985      	ldr	r1, [pc, #532]	@ (800d79c <_strtod_l+0x564>)
 800d588:	3b01      	subs	r3, #1
 800d58a:	a811      	add	r0, sp, #68	@ 0x44
 800d58c:	9311      	str	r3, [sp, #68]	@ 0x44
 800d58e:	f001 fe0d 	bl	800f1ac <__match>
 800d592:	b910      	cbnz	r0, 800d59a <_strtod_l+0x362>
 800d594:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d596:	3301      	adds	r3, #1
 800d598:	9311      	str	r3, [sp, #68]	@ 0x44
 800d59a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800d7b0 <_strtod_l+0x578>
 800d59e:	f04f 0a00 	mov.w	sl, #0
 800d5a2:	e684      	b.n	800d2ae <_strtod_l+0x76>
 800d5a4:	487e      	ldr	r0, [pc, #504]	@ (800d7a0 <_strtod_l+0x568>)
 800d5a6:	f000 fd3f 	bl	800e028 <nan>
 800d5aa:	ec5b ab10 	vmov	sl, fp, d0
 800d5ae:	e67e      	b.n	800d2ae <_strtod_l+0x76>
 800d5b0:	ee07 9a90 	vmov	s15, r9
 800d5b4:	1be2      	subs	r2, r4, r7
 800d5b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d5ba:	2d00      	cmp	r5, #0
 800d5bc:	bf08      	it	eq
 800d5be:	461d      	moveq	r5, r3
 800d5c0:	2b10      	cmp	r3, #16
 800d5c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	bfa8      	it	ge
 800d5c8:	2210      	movge	r2, #16
 800d5ca:	2b09      	cmp	r3, #9
 800d5cc:	ec5b ab17 	vmov	sl, fp, d7
 800d5d0:	dc15      	bgt.n	800d5fe <_strtod_l+0x3c6>
 800d5d2:	1be1      	subs	r1, r4, r7
 800d5d4:	2900      	cmp	r1, #0
 800d5d6:	f43f ae6a 	beq.w	800d2ae <_strtod_l+0x76>
 800d5da:	eba4 0107 	sub.w	r1, r4, r7
 800d5de:	dd72      	ble.n	800d6c6 <_strtod_l+0x48e>
 800d5e0:	2916      	cmp	r1, #22
 800d5e2:	dc59      	bgt.n	800d698 <_strtod_l+0x460>
 800d5e4:	4b6f      	ldr	r3, [pc, #444]	@ (800d7a4 <_strtod_l+0x56c>)
 800d5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ec:	ed93 7b00 	vldr	d7, [r3]
 800d5f0:	ec4b ab16 	vmov	d6, sl, fp
 800d5f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d5f8:	ec5b ab17 	vmov	sl, fp, d7
 800d5fc:	e657      	b.n	800d2ae <_strtod_l+0x76>
 800d5fe:	4969      	ldr	r1, [pc, #420]	@ (800d7a4 <_strtod_l+0x56c>)
 800d600:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d604:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d608:	ee06 6a90 	vmov	s13, r6
 800d60c:	2b0f      	cmp	r3, #15
 800d60e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d612:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d616:	ec5b ab16 	vmov	sl, fp, d6
 800d61a:	ddda      	ble.n	800d5d2 <_strtod_l+0x39a>
 800d61c:	1a9a      	subs	r2, r3, r2
 800d61e:	1be1      	subs	r1, r4, r7
 800d620:	440a      	add	r2, r1
 800d622:	2a00      	cmp	r2, #0
 800d624:	f340 8094 	ble.w	800d750 <_strtod_l+0x518>
 800d628:	f012 000f 	ands.w	r0, r2, #15
 800d62c:	d00a      	beq.n	800d644 <_strtod_l+0x40c>
 800d62e:	495d      	ldr	r1, [pc, #372]	@ (800d7a4 <_strtod_l+0x56c>)
 800d630:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d634:	ed91 7b00 	vldr	d7, [r1]
 800d638:	ec4b ab16 	vmov	d6, sl, fp
 800d63c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d640:	ec5b ab17 	vmov	sl, fp, d7
 800d644:	f032 020f 	bics.w	r2, r2, #15
 800d648:	d073      	beq.n	800d732 <_strtod_l+0x4fa>
 800d64a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d64e:	dd47      	ble.n	800d6e0 <_strtod_l+0x4a8>
 800d650:	2400      	movs	r4, #0
 800d652:	4625      	mov	r5, r4
 800d654:	9407      	str	r4, [sp, #28]
 800d656:	4626      	mov	r6, r4
 800d658:	9a05      	ldr	r2, [sp, #20]
 800d65a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d7b0 <_strtod_l+0x578>
 800d65e:	2322      	movs	r3, #34	@ 0x22
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	f04f 0a00 	mov.w	sl, #0
 800d666:	9b07      	ldr	r3, [sp, #28]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f43f ae20 	beq.w	800d2ae <_strtod_l+0x76>
 800d66e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d670:	9805      	ldr	r0, [sp, #20]
 800d672:	f002 f9e1 	bl	800fa38 <_Bfree>
 800d676:	9805      	ldr	r0, [sp, #20]
 800d678:	4631      	mov	r1, r6
 800d67a:	f002 f9dd 	bl	800fa38 <_Bfree>
 800d67e:	9805      	ldr	r0, [sp, #20]
 800d680:	4629      	mov	r1, r5
 800d682:	f002 f9d9 	bl	800fa38 <_Bfree>
 800d686:	9907      	ldr	r1, [sp, #28]
 800d688:	9805      	ldr	r0, [sp, #20]
 800d68a:	f002 f9d5 	bl	800fa38 <_Bfree>
 800d68e:	9805      	ldr	r0, [sp, #20]
 800d690:	4621      	mov	r1, r4
 800d692:	f002 f9d1 	bl	800fa38 <_Bfree>
 800d696:	e60a      	b.n	800d2ae <_strtod_l+0x76>
 800d698:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d69c:	1be0      	subs	r0, r4, r7
 800d69e:	4281      	cmp	r1, r0
 800d6a0:	dbbc      	blt.n	800d61c <_strtod_l+0x3e4>
 800d6a2:	4a40      	ldr	r2, [pc, #256]	@ (800d7a4 <_strtod_l+0x56c>)
 800d6a4:	f1c3 030f 	rsb	r3, r3, #15
 800d6a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d6ac:	ed91 7b00 	vldr	d7, [r1]
 800d6b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6b2:	ec4b ab16 	vmov	d6, sl, fp
 800d6b6:	1acb      	subs	r3, r1, r3
 800d6b8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d6bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6c0:	ed92 6b00 	vldr	d6, [r2]
 800d6c4:	e796      	b.n	800d5f4 <_strtod_l+0x3bc>
 800d6c6:	3116      	adds	r1, #22
 800d6c8:	dba8      	blt.n	800d61c <_strtod_l+0x3e4>
 800d6ca:	4b36      	ldr	r3, [pc, #216]	@ (800d7a4 <_strtod_l+0x56c>)
 800d6cc:	1b3c      	subs	r4, r7, r4
 800d6ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d6d2:	ed94 7b00 	vldr	d7, [r4]
 800d6d6:	ec4b ab16 	vmov	d6, sl, fp
 800d6da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d6de:	e78b      	b.n	800d5f8 <_strtod_l+0x3c0>
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	ec4b ab17 	vmov	d7, sl, fp
 800d6e6:	4e30      	ldr	r6, [pc, #192]	@ (800d7a8 <_strtod_l+0x570>)
 800d6e8:	1112      	asrs	r2, r2, #4
 800d6ea:	4601      	mov	r1, r0
 800d6ec:	2a01      	cmp	r2, #1
 800d6ee:	dc23      	bgt.n	800d738 <_strtod_l+0x500>
 800d6f0:	b108      	cbz	r0, 800d6f6 <_strtod_l+0x4be>
 800d6f2:	ec5b ab17 	vmov	sl, fp, d7
 800d6f6:	4a2c      	ldr	r2, [pc, #176]	@ (800d7a8 <_strtod_l+0x570>)
 800d6f8:	482c      	ldr	r0, [pc, #176]	@ (800d7ac <_strtod_l+0x574>)
 800d6fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d6fe:	ed92 7b00 	vldr	d7, [r2]
 800d702:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d706:	ec4b ab16 	vmov	d6, sl, fp
 800d70a:	4a29      	ldr	r2, [pc, #164]	@ (800d7b0 <_strtod_l+0x578>)
 800d70c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d710:	ee17 1a90 	vmov	r1, s15
 800d714:	400a      	ands	r2, r1
 800d716:	4282      	cmp	r2, r0
 800d718:	ec5b ab17 	vmov	sl, fp, d7
 800d71c:	d898      	bhi.n	800d650 <_strtod_l+0x418>
 800d71e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d722:	4282      	cmp	r2, r0
 800d724:	bf86      	itte	hi
 800d726:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800d7b4 <_strtod_l+0x57c>
 800d72a:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d72e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d732:	2200      	movs	r2, #0
 800d734:	9206      	str	r2, [sp, #24]
 800d736:	e076      	b.n	800d826 <_strtod_l+0x5ee>
 800d738:	f012 0f01 	tst.w	r2, #1
 800d73c:	d004      	beq.n	800d748 <_strtod_l+0x510>
 800d73e:	ed96 6b00 	vldr	d6, [r6]
 800d742:	2001      	movs	r0, #1
 800d744:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d748:	3101      	adds	r1, #1
 800d74a:	1052      	asrs	r2, r2, #1
 800d74c:	3608      	adds	r6, #8
 800d74e:	e7cd      	b.n	800d6ec <_strtod_l+0x4b4>
 800d750:	d0ef      	beq.n	800d732 <_strtod_l+0x4fa>
 800d752:	4252      	negs	r2, r2
 800d754:	f012 000f 	ands.w	r0, r2, #15
 800d758:	d00a      	beq.n	800d770 <_strtod_l+0x538>
 800d75a:	4912      	ldr	r1, [pc, #72]	@ (800d7a4 <_strtod_l+0x56c>)
 800d75c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d760:	ed91 7b00 	vldr	d7, [r1]
 800d764:	ec4b ab16 	vmov	d6, sl, fp
 800d768:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d76c:	ec5b ab17 	vmov	sl, fp, d7
 800d770:	1112      	asrs	r2, r2, #4
 800d772:	d0de      	beq.n	800d732 <_strtod_l+0x4fa>
 800d774:	2a1f      	cmp	r2, #31
 800d776:	dd1f      	ble.n	800d7b8 <_strtod_l+0x580>
 800d778:	2400      	movs	r4, #0
 800d77a:	4625      	mov	r5, r4
 800d77c:	9407      	str	r4, [sp, #28]
 800d77e:	4626      	mov	r6, r4
 800d780:	9a05      	ldr	r2, [sp, #20]
 800d782:	2322      	movs	r3, #34	@ 0x22
 800d784:	f04f 0a00 	mov.w	sl, #0
 800d788:	f04f 0b00 	mov.w	fp, #0
 800d78c:	6013      	str	r3, [r2, #0]
 800d78e:	e76a      	b.n	800d666 <_strtod_l+0x42e>
 800d790:	0801081d 	.word	0x0801081d
 800d794:	0801084c 	.word	0x0801084c
 800d798:	08010815 	.word	0x08010815
 800d79c:	080109ac 	.word	0x080109ac
 800d7a0:	08010c3b 	.word	0x08010c3b
 800d7a4:	08010b38 	.word	0x08010b38
 800d7a8:	08010b10 	.word	0x08010b10
 800d7ac:	7ca00000 	.word	0x7ca00000
 800d7b0:	7ff00000 	.word	0x7ff00000
 800d7b4:	7fefffff 	.word	0x7fefffff
 800d7b8:	f012 0110 	ands.w	r1, r2, #16
 800d7bc:	bf18      	it	ne
 800d7be:	216a      	movne	r1, #106	@ 0x6a
 800d7c0:	9106      	str	r1, [sp, #24]
 800d7c2:	ec4b ab17 	vmov	d7, sl, fp
 800d7c6:	49b0      	ldr	r1, [pc, #704]	@ (800da88 <_strtod_l+0x850>)
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	07d6      	lsls	r6, r2, #31
 800d7cc:	d504      	bpl.n	800d7d8 <_strtod_l+0x5a0>
 800d7ce:	ed91 6b00 	vldr	d6, [r1]
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7d8:	1052      	asrs	r2, r2, #1
 800d7da:	f101 0108 	add.w	r1, r1, #8
 800d7de:	d1f4      	bne.n	800d7ca <_strtod_l+0x592>
 800d7e0:	b108      	cbz	r0, 800d7e6 <_strtod_l+0x5ae>
 800d7e2:	ec5b ab17 	vmov	sl, fp, d7
 800d7e6:	9a06      	ldr	r2, [sp, #24]
 800d7e8:	b1b2      	cbz	r2, 800d818 <_strtod_l+0x5e0>
 800d7ea:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800d7ee:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800d7f2:	2a00      	cmp	r2, #0
 800d7f4:	4658      	mov	r0, fp
 800d7f6:	dd0f      	ble.n	800d818 <_strtod_l+0x5e0>
 800d7f8:	2a1f      	cmp	r2, #31
 800d7fa:	dd55      	ble.n	800d8a8 <_strtod_l+0x670>
 800d7fc:	2a34      	cmp	r2, #52	@ 0x34
 800d7fe:	bfde      	ittt	le
 800d800:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800d804:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800d808:	408a      	lslle	r2, r1
 800d80a:	f04f 0a00 	mov.w	sl, #0
 800d80e:	bfcc      	ite	gt
 800d810:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d814:	ea02 0b00 	andle.w	fp, r2, r0
 800d818:	ec4b ab17 	vmov	d7, sl, fp
 800d81c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d824:	d0a8      	beq.n	800d778 <_strtod_l+0x540>
 800d826:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d828:	9805      	ldr	r0, [sp, #20]
 800d82a:	f8cd 9000 	str.w	r9, [sp]
 800d82e:	462a      	mov	r2, r5
 800d830:	f002 f96a 	bl	800fb08 <__s2b>
 800d834:	9007      	str	r0, [sp, #28]
 800d836:	2800      	cmp	r0, #0
 800d838:	f43f af0a 	beq.w	800d650 <_strtod_l+0x418>
 800d83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d83e:	1b3f      	subs	r7, r7, r4
 800d840:	2b00      	cmp	r3, #0
 800d842:	bfb4      	ite	lt
 800d844:	463b      	movlt	r3, r7
 800d846:	2300      	movge	r3, #0
 800d848:	930a      	str	r3, [sp, #40]	@ 0x28
 800d84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d84c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800da78 <_strtod_l+0x840>
 800d850:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d854:	2400      	movs	r4, #0
 800d856:	930d      	str	r3, [sp, #52]	@ 0x34
 800d858:	4625      	mov	r5, r4
 800d85a:	9b07      	ldr	r3, [sp, #28]
 800d85c:	9805      	ldr	r0, [sp, #20]
 800d85e:	6859      	ldr	r1, [r3, #4]
 800d860:	f002 f8aa 	bl	800f9b8 <_Balloc>
 800d864:	4606      	mov	r6, r0
 800d866:	2800      	cmp	r0, #0
 800d868:	f43f aef6 	beq.w	800d658 <_strtod_l+0x420>
 800d86c:	9b07      	ldr	r3, [sp, #28]
 800d86e:	691a      	ldr	r2, [r3, #16]
 800d870:	ec4b ab19 	vmov	d9, sl, fp
 800d874:	3202      	adds	r2, #2
 800d876:	f103 010c 	add.w	r1, r3, #12
 800d87a:	0092      	lsls	r2, r2, #2
 800d87c:	300c      	adds	r0, #12
 800d87e:	f000 fbc4 	bl	800e00a <memcpy>
 800d882:	eeb0 0b49 	vmov.f64	d0, d9
 800d886:	9805      	ldr	r0, [sp, #20]
 800d888:	aa14      	add	r2, sp, #80	@ 0x50
 800d88a:	a913      	add	r1, sp, #76	@ 0x4c
 800d88c:	f002 fc78 	bl	8010180 <__d2b>
 800d890:	9012      	str	r0, [sp, #72]	@ 0x48
 800d892:	2800      	cmp	r0, #0
 800d894:	f43f aee0 	beq.w	800d658 <_strtod_l+0x420>
 800d898:	9805      	ldr	r0, [sp, #20]
 800d89a:	2101      	movs	r1, #1
 800d89c:	f002 f9ca 	bl	800fc34 <__i2b>
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	b940      	cbnz	r0, 800d8b6 <_strtod_l+0x67e>
 800d8a4:	2500      	movs	r5, #0
 800d8a6:	e6d7      	b.n	800d658 <_strtod_l+0x420>
 800d8a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800d8ac:	fa01 f202 	lsl.w	r2, r1, r2
 800d8b0:	ea02 0a0a 	and.w	sl, r2, sl
 800d8b4:	e7b0      	b.n	800d818 <_strtod_l+0x5e0>
 800d8b6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800d8b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d8ba:	2f00      	cmp	r7, #0
 800d8bc:	bfab      	itete	ge
 800d8be:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800d8c0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800d8c2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800d8c6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800d8ca:	bfac      	ite	ge
 800d8cc:	eb07 0903 	addge.w	r9, r7, r3
 800d8d0:	eba3 0807 	sublt.w	r8, r3, r7
 800d8d4:	9b06      	ldr	r3, [sp, #24]
 800d8d6:	1aff      	subs	r7, r7, r3
 800d8d8:	4417      	add	r7, r2
 800d8da:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800d8de:	4a6b      	ldr	r2, [pc, #428]	@ (800da8c <_strtod_l+0x854>)
 800d8e0:	3f01      	subs	r7, #1
 800d8e2:	4297      	cmp	r7, r2
 800d8e4:	da51      	bge.n	800d98a <_strtod_l+0x752>
 800d8e6:	1bd1      	subs	r1, r2, r7
 800d8e8:	291f      	cmp	r1, #31
 800d8ea:	eba3 0301 	sub.w	r3, r3, r1
 800d8ee:	f04f 0201 	mov.w	r2, #1
 800d8f2:	dc3e      	bgt.n	800d972 <_strtod_l+0x73a>
 800d8f4:	408a      	lsls	r2, r1
 800d8f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d8fc:	eb09 0703 	add.w	r7, r9, r3
 800d900:	4498      	add	r8, r3
 800d902:	9b06      	ldr	r3, [sp, #24]
 800d904:	45b9      	cmp	r9, r7
 800d906:	4498      	add	r8, r3
 800d908:	464b      	mov	r3, r9
 800d90a:	bfa8      	it	ge
 800d90c:	463b      	movge	r3, r7
 800d90e:	4543      	cmp	r3, r8
 800d910:	bfa8      	it	ge
 800d912:	4643      	movge	r3, r8
 800d914:	2b00      	cmp	r3, #0
 800d916:	bfc2      	ittt	gt
 800d918:	1aff      	subgt	r7, r7, r3
 800d91a:	eba8 0803 	subgt.w	r8, r8, r3
 800d91e:	eba9 0903 	subgt.w	r9, r9, r3
 800d922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d924:	2b00      	cmp	r3, #0
 800d926:	dd16      	ble.n	800d956 <_strtod_l+0x71e>
 800d928:	4629      	mov	r1, r5
 800d92a:	9805      	ldr	r0, [sp, #20]
 800d92c:	461a      	mov	r2, r3
 800d92e:	f002 fa41 	bl	800fdb4 <__pow5mult>
 800d932:	4605      	mov	r5, r0
 800d934:	2800      	cmp	r0, #0
 800d936:	d0b5      	beq.n	800d8a4 <_strtod_l+0x66c>
 800d938:	4601      	mov	r1, r0
 800d93a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d93c:	9805      	ldr	r0, [sp, #20]
 800d93e:	f002 f98f 	bl	800fc60 <__multiply>
 800d942:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d944:	2800      	cmp	r0, #0
 800d946:	f43f ae87 	beq.w	800d658 <_strtod_l+0x420>
 800d94a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d94c:	9805      	ldr	r0, [sp, #20]
 800d94e:	f002 f873 	bl	800fa38 <_Bfree>
 800d952:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d954:	9312      	str	r3, [sp, #72]	@ 0x48
 800d956:	2f00      	cmp	r7, #0
 800d958:	dc1b      	bgt.n	800d992 <_strtod_l+0x75a>
 800d95a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	dd21      	ble.n	800d9a4 <_strtod_l+0x76c>
 800d960:	4631      	mov	r1, r6
 800d962:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d964:	9805      	ldr	r0, [sp, #20]
 800d966:	f002 fa25 	bl	800fdb4 <__pow5mult>
 800d96a:	4606      	mov	r6, r0
 800d96c:	b9d0      	cbnz	r0, 800d9a4 <_strtod_l+0x76c>
 800d96e:	2600      	movs	r6, #0
 800d970:	e672      	b.n	800d658 <_strtod_l+0x420>
 800d972:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800d976:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800d97a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800d97e:	37e2      	adds	r7, #226	@ 0xe2
 800d980:	fa02 f107 	lsl.w	r1, r2, r7
 800d984:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d986:	920c      	str	r2, [sp, #48]	@ 0x30
 800d988:	e7b8      	b.n	800d8fc <_strtod_l+0x6c4>
 800d98a:	2200      	movs	r2, #0
 800d98c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d98e:	2201      	movs	r2, #1
 800d990:	e7f9      	b.n	800d986 <_strtod_l+0x74e>
 800d992:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d994:	9805      	ldr	r0, [sp, #20]
 800d996:	463a      	mov	r2, r7
 800d998:	f002 fa66 	bl	800fe68 <__lshift>
 800d99c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d1db      	bne.n	800d95a <_strtod_l+0x722>
 800d9a2:	e659      	b.n	800d658 <_strtod_l+0x420>
 800d9a4:	f1b8 0f00 	cmp.w	r8, #0
 800d9a8:	dd07      	ble.n	800d9ba <_strtod_l+0x782>
 800d9aa:	4631      	mov	r1, r6
 800d9ac:	9805      	ldr	r0, [sp, #20]
 800d9ae:	4642      	mov	r2, r8
 800d9b0:	f002 fa5a 	bl	800fe68 <__lshift>
 800d9b4:	4606      	mov	r6, r0
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d0d9      	beq.n	800d96e <_strtod_l+0x736>
 800d9ba:	f1b9 0f00 	cmp.w	r9, #0
 800d9be:	dd08      	ble.n	800d9d2 <_strtod_l+0x79a>
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	9805      	ldr	r0, [sp, #20]
 800d9c4:	464a      	mov	r2, r9
 800d9c6:	f002 fa4f 	bl	800fe68 <__lshift>
 800d9ca:	4605      	mov	r5, r0
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	f43f ae43 	beq.w	800d658 <_strtod_l+0x420>
 800d9d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d9d4:	9805      	ldr	r0, [sp, #20]
 800d9d6:	4632      	mov	r2, r6
 800d9d8:	f002 face 	bl	800ff78 <__mdiff>
 800d9dc:	4604      	mov	r4, r0
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	f43f ae3a 	beq.w	800d658 <_strtod_l+0x420>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800d9ea:	60c3      	str	r3, [r0, #12]
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	f002 faa7 	bl	800ff40 <__mcmp>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	da4e      	bge.n	800da94 <_strtod_l+0x85c>
 800d9f6:	ea58 080a 	orrs.w	r8, r8, sl
 800d9fa:	d174      	bne.n	800dae6 <_strtod_l+0x8ae>
 800d9fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da00:	2b00      	cmp	r3, #0
 800da02:	d170      	bne.n	800dae6 <_strtod_l+0x8ae>
 800da04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da08:	0d1b      	lsrs	r3, r3, #20
 800da0a:	051b      	lsls	r3, r3, #20
 800da0c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da10:	d969      	bls.n	800dae6 <_strtod_l+0x8ae>
 800da12:	6963      	ldr	r3, [r4, #20]
 800da14:	b913      	cbnz	r3, 800da1c <_strtod_l+0x7e4>
 800da16:	6923      	ldr	r3, [r4, #16]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	dd64      	ble.n	800dae6 <_strtod_l+0x8ae>
 800da1c:	4621      	mov	r1, r4
 800da1e:	2201      	movs	r2, #1
 800da20:	9805      	ldr	r0, [sp, #20]
 800da22:	f002 fa21 	bl	800fe68 <__lshift>
 800da26:	4629      	mov	r1, r5
 800da28:	4604      	mov	r4, r0
 800da2a:	f002 fa89 	bl	800ff40 <__mcmp>
 800da2e:	2800      	cmp	r0, #0
 800da30:	dd59      	ble.n	800dae6 <_strtod_l+0x8ae>
 800da32:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da36:	9a06      	ldr	r2, [sp, #24]
 800da38:	0d1b      	lsrs	r3, r3, #20
 800da3a:	051b      	lsls	r3, r3, #20
 800da3c:	2a00      	cmp	r2, #0
 800da3e:	d070      	beq.n	800db22 <_strtod_l+0x8ea>
 800da40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da44:	d86d      	bhi.n	800db22 <_strtod_l+0x8ea>
 800da46:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800da4a:	f67f ae99 	bls.w	800d780 <_strtod_l+0x548>
 800da4e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800da80 <_strtod_l+0x848>
 800da52:	ec4b ab16 	vmov	d6, sl, fp
 800da56:	4b0e      	ldr	r3, [pc, #56]	@ (800da90 <_strtod_l+0x858>)
 800da58:	ee26 7b07 	vmul.f64	d7, d6, d7
 800da5c:	ee17 2a90 	vmov	r2, s15
 800da60:	4013      	ands	r3, r2
 800da62:	ec5b ab17 	vmov	sl, fp, d7
 800da66:	2b00      	cmp	r3, #0
 800da68:	f47f ae01 	bne.w	800d66e <_strtod_l+0x436>
 800da6c:	9a05      	ldr	r2, [sp, #20]
 800da6e:	2322      	movs	r3, #34	@ 0x22
 800da70:	6013      	str	r3, [r2, #0]
 800da72:	e5fc      	b.n	800d66e <_strtod_l+0x436>
 800da74:	f3af 8000 	nop.w
 800da78:	ffc00000 	.word	0xffc00000
 800da7c:	41dfffff 	.word	0x41dfffff
 800da80:	00000000 	.word	0x00000000
 800da84:	39500000 	.word	0x39500000
 800da88:	08010878 	.word	0x08010878
 800da8c:	fffffc02 	.word	0xfffffc02
 800da90:	7ff00000 	.word	0x7ff00000
 800da94:	46d9      	mov	r9, fp
 800da96:	d15d      	bne.n	800db54 <_strtod_l+0x91c>
 800da98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da9c:	f1b8 0f00 	cmp.w	r8, #0
 800daa0:	d02a      	beq.n	800daf8 <_strtod_l+0x8c0>
 800daa2:	4aab      	ldr	r2, [pc, #684]	@ (800dd50 <_strtod_l+0xb18>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d12a      	bne.n	800dafe <_strtod_l+0x8c6>
 800daa8:	9b06      	ldr	r3, [sp, #24]
 800daaa:	4652      	mov	r2, sl
 800daac:	b1fb      	cbz	r3, 800daee <_strtod_l+0x8b6>
 800daae:	4ba9      	ldr	r3, [pc, #676]	@ (800dd54 <_strtod_l+0xb1c>)
 800dab0:	ea0b 0303 	and.w	r3, fp, r3
 800dab4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dab8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800dabc:	d81a      	bhi.n	800daf4 <_strtod_l+0x8bc>
 800dabe:	0d1b      	lsrs	r3, r3, #20
 800dac0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dac4:	fa01 f303 	lsl.w	r3, r1, r3
 800dac8:	429a      	cmp	r2, r3
 800daca:	d118      	bne.n	800dafe <_strtod_l+0x8c6>
 800dacc:	4ba2      	ldr	r3, [pc, #648]	@ (800dd58 <_strtod_l+0xb20>)
 800dace:	4599      	cmp	r9, r3
 800dad0:	d102      	bne.n	800dad8 <_strtod_l+0x8a0>
 800dad2:	3201      	adds	r2, #1
 800dad4:	f43f adc0 	beq.w	800d658 <_strtod_l+0x420>
 800dad8:	4b9e      	ldr	r3, [pc, #632]	@ (800dd54 <_strtod_l+0xb1c>)
 800dada:	ea09 0303 	and.w	r3, r9, r3
 800dade:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800dae2:	f04f 0a00 	mov.w	sl, #0
 800dae6:	9b06      	ldr	r3, [sp, #24]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d1b0      	bne.n	800da4e <_strtod_l+0x816>
 800daec:	e5bf      	b.n	800d66e <_strtod_l+0x436>
 800daee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800daf2:	e7e9      	b.n	800dac8 <_strtod_l+0x890>
 800daf4:	460b      	mov	r3, r1
 800daf6:	e7e7      	b.n	800dac8 <_strtod_l+0x890>
 800daf8:	ea53 030a 	orrs.w	r3, r3, sl
 800dafc:	d099      	beq.n	800da32 <_strtod_l+0x7fa>
 800dafe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db00:	b1c3      	cbz	r3, 800db34 <_strtod_l+0x8fc>
 800db02:	ea13 0f09 	tst.w	r3, r9
 800db06:	d0ee      	beq.n	800dae6 <_strtod_l+0x8ae>
 800db08:	9a06      	ldr	r2, [sp, #24]
 800db0a:	4650      	mov	r0, sl
 800db0c:	4659      	mov	r1, fp
 800db0e:	f1b8 0f00 	cmp.w	r8, #0
 800db12:	d013      	beq.n	800db3c <_strtod_l+0x904>
 800db14:	f7ff fb76 	bl	800d204 <sulp>
 800db18:	ee39 7b00 	vadd.f64	d7, d9, d0
 800db1c:	ec5b ab17 	vmov	sl, fp, d7
 800db20:	e7e1      	b.n	800dae6 <_strtod_l+0x8ae>
 800db22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800db26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800db2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800db2e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800db32:	e7d8      	b.n	800dae6 <_strtod_l+0x8ae>
 800db34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db36:	ea13 0f0a 	tst.w	r3, sl
 800db3a:	e7e4      	b.n	800db06 <_strtod_l+0x8ce>
 800db3c:	f7ff fb62 	bl	800d204 <sulp>
 800db40:	ee39 0b40 	vsub.f64	d0, d9, d0
 800db44:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800db48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db4c:	ec5b ab10 	vmov	sl, fp, d0
 800db50:	d1c9      	bne.n	800dae6 <_strtod_l+0x8ae>
 800db52:	e615      	b.n	800d780 <_strtod_l+0x548>
 800db54:	4629      	mov	r1, r5
 800db56:	4620      	mov	r0, r4
 800db58:	f002 fb6a 	bl	8010230 <__ratio>
 800db5c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800db60:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800db64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db68:	d85d      	bhi.n	800dc26 <_strtod_l+0x9ee>
 800db6a:	f1b8 0f00 	cmp.w	r8, #0
 800db6e:	d164      	bne.n	800dc3a <_strtod_l+0xa02>
 800db70:	f1ba 0f00 	cmp.w	sl, #0
 800db74:	d14b      	bne.n	800dc0e <_strtod_l+0x9d6>
 800db76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db7a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d160      	bne.n	800dc44 <_strtod_l+0xa0c>
 800db82:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800db86:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800db8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db8e:	d401      	bmi.n	800db94 <_strtod_l+0x95c>
 800db90:	ee20 8b08 	vmul.f64	d8, d0, d8
 800db94:	eeb1 ab48 	vneg.f64	d10, d8
 800db98:	486e      	ldr	r0, [pc, #440]	@ (800dd54 <_strtod_l+0xb1c>)
 800db9a:	4970      	ldr	r1, [pc, #448]	@ (800dd5c <_strtod_l+0xb24>)
 800db9c:	ea09 0700 	and.w	r7, r9, r0
 800dba0:	428f      	cmp	r7, r1
 800dba2:	ec53 2b1a 	vmov	r2, r3, d10
 800dba6:	d17d      	bne.n	800dca4 <_strtod_l+0xa6c>
 800dba8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800dbac:	ec4b ab1c 	vmov	d12, sl, fp
 800dbb0:	eeb0 0b4c 	vmov.f64	d0, d12
 800dbb4:	f002 fa74 	bl	80100a0 <__ulp>
 800dbb8:	4866      	ldr	r0, [pc, #408]	@ (800dd54 <_strtod_l+0xb1c>)
 800dbba:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800dbbe:	ee1c 3a90 	vmov	r3, s25
 800dbc2:	4a67      	ldr	r2, [pc, #412]	@ (800dd60 <_strtod_l+0xb28>)
 800dbc4:	ea03 0100 	and.w	r1, r3, r0
 800dbc8:	4291      	cmp	r1, r2
 800dbca:	ec5b ab1c 	vmov	sl, fp, d12
 800dbce:	d93c      	bls.n	800dc4a <_strtod_l+0xa12>
 800dbd0:	ee19 2a90 	vmov	r2, s19
 800dbd4:	4b60      	ldr	r3, [pc, #384]	@ (800dd58 <_strtod_l+0xb20>)
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d104      	bne.n	800dbe4 <_strtod_l+0x9ac>
 800dbda:	ee19 3a10 	vmov	r3, s18
 800dbde:	3301      	adds	r3, #1
 800dbe0:	f43f ad3a 	beq.w	800d658 <_strtod_l+0x420>
 800dbe4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800dd58 <_strtod_l+0xb20>
 800dbe8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dbec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dbee:	9805      	ldr	r0, [sp, #20]
 800dbf0:	f001 ff22 	bl	800fa38 <_Bfree>
 800dbf4:	9805      	ldr	r0, [sp, #20]
 800dbf6:	4631      	mov	r1, r6
 800dbf8:	f001 ff1e 	bl	800fa38 <_Bfree>
 800dbfc:	9805      	ldr	r0, [sp, #20]
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f001 ff1a 	bl	800fa38 <_Bfree>
 800dc04:	9805      	ldr	r0, [sp, #20]
 800dc06:	4621      	mov	r1, r4
 800dc08:	f001 ff16 	bl	800fa38 <_Bfree>
 800dc0c:	e625      	b.n	800d85a <_strtod_l+0x622>
 800dc0e:	f1ba 0f01 	cmp.w	sl, #1
 800dc12:	d103      	bne.n	800dc1c <_strtod_l+0x9e4>
 800dc14:	f1bb 0f00 	cmp.w	fp, #0
 800dc18:	f43f adb2 	beq.w	800d780 <_strtod_l+0x548>
 800dc1c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800dc20:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800dc24:	e7b8      	b.n	800db98 <_strtod_l+0x960>
 800dc26:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800dc2a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800dc2e:	f1b8 0f00 	cmp.w	r8, #0
 800dc32:	d0af      	beq.n	800db94 <_strtod_l+0x95c>
 800dc34:	eeb0 ab48 	vmov.f64	d10, d8
 800dc38:	e7ae      	b.n	800db98 <_strtod_l+0x960>
 800dc3a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800dc3e:	eeb0 8b4a 	vmov.f64	d8, d10
 800dc42:	e7a9      	b.n	800db98 <_strtod_l+0x960>
 800dc44:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800dc48:	e7a6      	b.n	800db98 <_strtod_l+0x960>
 800dc4a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dc4e:	9b06      	ldr	r3, [sp, #24]
 800dc50:	46d9      	mov	r9, fp
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d1ca      	bne.n	800dbec <_strtod_l+0x9b4>
 800dc56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc5a:	0d1b      	lsrs	r3, r3, #20
 800dc5c:	051b      	lsls	r3, r3, #20
 800dc5e:	429f      	cmp	r7, r3
 800dc60:	d1c4      	bne.n	800dbec <_strtod_l+0x9b4>
 800dc62:	ec51 0b18 	vmov	r0, r1, d8
 800dc66:	f7f2 fd7f 	bl	8000768 <__aeabi_d2lz>
 800dc6a:	f7f2 fd37 	bl	80006dc <__aeabi_l2d>
 800dc6e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800dc72:	ec41 0b17 	vmov	d7, r0, r1
 800dc76:	ea49 090a 	orr.w	r9, r9, sl
 800dc7a:	ea59 0908 	orrs.w	r9, r9, r8
 800dc7e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800dc82:	d03c      	beq.n	800dcfe <_strtod_l+0xac6>
 800dc84:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800dd38 <_strtod_l+0xb00>
 800dc88:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc90:	f53f aced 	bmi.w	800d66e <_strtod_l+0x436>
 800dc94:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800dd40 <_strtod_l+0xb08>
 800dc98:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca0:	dda4      	ble.n	800dbec <_strtod_l+0x9b4>
 800dca2:	e4e4      	b.n	800d66e <_strtod_l+0x436>
 800dca4:	9906      	ldr	r1, [sp, #24]
 800dca6:	b1e1      	cbz	r1, 800dce2 <_strtod_l+0xaaa>
 800dca8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800dcac:	d819      	bhi.n	800dce2 <_strtod_l+0xaaa>
 800dcae:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800dcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcb6:	d811      	bhi.n	800dcdc <_strtod_l+0xaa4>
 800dcb8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800dcbc:	ee18 3a10 	vmov	r3, s16
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	bf38      	it	cc
 800dcc4:	2301      	movcc	r3, #1
 800dcc6:	ee08 3a10 	vmov	s16, r3
 800dcca:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800dcce:	f1b8 0f00 	cmp.w	r8, #0
 800dcd2:	d111      	bne.n	800dcf8 <_strtod_l+0xac0>
 800dcd4:	eeb1 7b48 	vneg.f64	d7, d8
 800dcd8:	ec53 2b17 	vmov	r2, r3, d7
 800dcdc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800dce0:	1bcb      	subs	r3, r1, r7
 800dce2:	eeb0 0b49 	vmov.f64	d0, d9
 800dce6:	ec43 2b1a 	vmov	d10, r2, r3
 800dcea:	f002 f9d9 	bl	80100a0 <__ulp>
 800dcee:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800dcf2:	ec5b ab19 	vmov	sl, fp, d9
 800dcf6:	e7aa      	b.n	800dc4e <_strtod_l+0xa16>
 800dcf8:	eeb0 7b48 	vmov.f64	d7, d8
 800dcfc:	e7ec      	b.n	800dcd8 <_strtod_l+0xaa0>
 800dcfe:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800dd48 <_strtod_l+0xb10>
 800dd02:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd0a:	f57f af6f 	bpl.w	800dbec <_strtod_l+0x9b4>
 800dd0e:	e4ae      	b.n	800d66e <_strtod_l+0x436>
 800dd10:	2300      	movs	r3, #0
 800dd12:	9308      	str	r3, [sp, #32]
 800dd14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd18:	6013      	str	r3, [r2, #0]
 800dd1a:	f7ff bacc 	b.w	800d2b6 <_strtod_l+0x7e>
 800dd1e:	2a65      	cmp	r2, #101	@ 0x65
 800dd20:	f43f abbc 	beq.w	800d49c <_strtod_l+0x264>
 800dd24:	2a45      	cmp	r2, #69	@ 0x45
 800dd26:	f43f abb9 	beq.w	800d49c <_strtod_l+0x264>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	9306      	str	r3, [sp, #24]
 800dd2e:	f7ff bbf0 	b.w	800d512 <_strtod_l+0x2da>
 800dd32:	bf00      	nop
 800dd34:	f3af 8000 	nop.w
 800dd38:	94a03595 	.word	0x94a03595
 800dd3c:	3fdfffff 	.word	0x3fdfffff
 800dd40:	35afe535 	.word	0x35afe535
 800dd44:	3fe00000 	.word	0x3fe00000
 800dd48:	94a03595 	.word	0x94a03595
 800dd4c:	3fcfffff 	.word	0x3fcfffff
 800dd50:	000fffff 	.word	0x000fffff
 800dd54:	7ff00000 	.word	0x7ff00000
 800dd58:	7fefffff 	.word	0x7fefffff
 800dd5c:	7fe00000 	.word	0x7fe00000
 800dd60:	7c9fffff 	.word	0x7c9fffff

0800dd64 <_strtod_r>:
 800dd64:	4b01      	ldr	r3, [pc, #4]	@ (800dd6c <_strtod_r+0x8>)
 800dd66:	f7ff ba67 	b.w	800d238 <_strtod_l>
 800dd6a:	bf00      	nop
 800dd6c:	2400001c 	.word	0x2400001c

0800dd70 <_strtol_l.constprop.0>:
 800dd70:	2b24      	cmp	r3, #36	@ 0x24
 800dd72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd76:	4686      	mov	lr, r0
 800dd78:	4690      	mov	r8, r2
 800dd7a:	d801      	bhi.n	800dd80 <_strtol_l.constprop.0+0x10>
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d106      	bne.n	800dd8e <_strtol_l.constprop.0+0x1e>
 800dd80:	f000 f916 	bl	800dfb0 <__errno>
 800dd84:	2316      	movs	r3, #22
 800dd86:	6003      	str	r3, [r0, #0]
 800dd88:	2000      	movs	r0, #0
 800dd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd8e:	4834      	ldr	r0, [pc, #208]	@ (800de60 <_strtol_l.constprop.0+0xf0>)
 800dd90:	460d      	mov	r5, r1
 800dd92:	462a      	mov	r2, r5
 800dd94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd98:	5d06      	ldrb	r6, [r0, r4]
 800dd9a:	f016 0608 	ands.w	r6, r6, #8
 800dd9e:	d1f8      	bne.n	800dd92 <_strtol_l.constprop.0+0x22>
 800dda0:	2c2d      	cmp	r4, #45	@ 0x2d
 800dda2:	d12d      	bne.n	800de00 <_strtol_l.constprop.0+0x90>
 800dda4:	782c      	ldrb	r4, [r5, #0]
 800dda6:	2601      	movs	r6, #1
 800dda8:	1c95      	adds	r5, r2, #2
 800ddaa:	f033 0210 	bics.w	r2, r3, #16
 800ddae:	d109      	bne.n	800ddc4 <_strtol_l.constprop.0+0x54>
 800ddb0:	2c30      	cmp	r4, #48	@ 0x30
 800ddb2:	d12a      	bne.n	800de0a <_strtol_l.constprop.0+0x9a>
 800ddb4:	782a      	ldrb	r2, [r5, #0]
 800ddb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ddba:	2a58      	cmp	r2, #88	@ 0x58
 800ddbc:	d125      	bne.n	800de0a <_strtol_l.constprop.0+0x9a>
 800ddbe:	786c      	ldrb	r4, [r5, #1]
 800ddc0:	2310      	movs	r3, #16
 800ddc2:	3502      	adds	r5, #2
 800ddc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ddc8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ddcc:	2200      	movs	r2, #0
 800ddce:	fbbc f9f3 	udiv	r9, ip, r3
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	fb03 ca19 	mls	sl, r3, r9, ip
 800ddd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dddc:	2f09      	cmp	r7, #9
 800ddde:	d81b      	bhi.n	800de18 <_strtol_l.constprop.0+0xa8>
 800dde0:	463c      	mov	r4, r7
 800dde2:	42a3      	cmp	r3, r4
 800dde4:	dd27      	ble.n	800de36 <_strtol_l.constprop.0+0xc6>
 800dde6:	1c57      	adds	r7, r2, #1
 800dde8:	d007      	beq.n	800ddfa <_strtol_l.constprop.0+0x8a>
 800ddea:	4581      	cmp	r9, r0
 800ddec:	d320      	bcc.n	800de30 <_strtol_l.constprop.0+0xc0>
 800ddee:	d101      	bne.n	800ddf4 <_strtol_l.constprop.0+0x84>
 800ddf0:	45a2      	cmp	sl, r4
 800ddf2:	db1d      	blt.n	800de30 <_strtol_l.constprop.0+0xc0>
 800ddf4:	fb00 4003 	mla	r0, r0, r3, r4
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddfe:	e7eb      	b.n	800ddd8 <_strtol_l.constprop.0+0x68>
 800de00:	2c2b      	cmp	r4, #43	@ 0x2b
 800de02:	bf04      	itt	eq
 800de04:	782c      	ldrbeq	r4, [r5, #0]
 800de06:	1c95      	addeq	r5, r2, #2
 800de08:	e7cf      	b.n	800ddaa <_strtol_l.constprop.0+0x3a>
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1da      	bne.n	800ddc4 <_strtol_l.constprop.0+0x54>
 800de0e:	2c30      	cmp	r4, #48	@ 0x30
 800de10:	bf0c      	ite	eq
 800de12:	2308      	moveq	r3, #8
 800de14:	230a      	movne	r3, #10
 800de16:	e7d5      	b.n	800ddc4 <_strtol_l.constprop.0+0x54>
 800de18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800de1c:	2f19      	cmp	r7, #25
 800de1e:	d801      	bhi.n	800de24 <_strtol_l.constprop.0+0xb4>
 800de20:	3c37      	subs	r4, #55	@ 0x37
 800de22:	e7de      	b.n	800dde2 <_strtol_l.constprop.0+0x72>
 800de24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800de28:	2f19      	cmp	r7, #25
 800de2a:	d804      	bhi.n	800de36 <_strtol_l.constprop.0+0xc6>
 800de2c:	3c57      	subs	r4, #87	@ 0x57
 800de2e:	e7d8      	b.n	800dde2 <_strtol_l.constprop.0+0x72>
 800de30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de34:	e7e1      	b.n	800ddfa <_strtol_l.constprop.0+0x8a>
 800de36:	1c53      	adds	r3, r2, #1
 800de38:	d108      	bne.n	800de4c <_strtol_l.constprop.0+0xdc>
 800de3a:	2322      	movs	r3, #34	@ 0x22
 800de3c:	f8ce 3000 	str.w	r3, [lr]
 800de40:	4660      	mov	r0, ip
 800de42:	f1b8 0f00 	cmp.w	r8, #0
 800de46:	d0a0      	beq.n	800dd8a <_strtol_l.constprop.0+0x1a>
 800de48:	1e69      	subs	r1, r5, #1
 800de4a:	e006      	b.n	800de5a <_strtol_l.constprop.0+0xea>
 800de4c:	b106      	cbz	r6, 800de50 <_strtol_l.constprop.0+0xe0>
 800de4e:	4240      	negs	r0, r0
 800de50:	f1b8 0f00 	cmp.w	r8, #0
 800de54:	d099      	beq.n	800dd8a <_strtol_l.constprop.0+0x1a>
 800de56:	2a00      	cmp	r2, #0
 800de58:	d1f6      	bne.n	800de48 <_strtol_l.constprop.0+0xd8>
 800de5a:	f8c8 1000 	str.w	r1, [r8]
 800de5e:	e794      	b.n	800dd8a <_strtol_l.constprop.0+0x1a>
 800de60:	080108a9 	.word	0x080108a9

0800de64 <_strtol_r>:
 800de64:	f7ff bf84 	b.w	800dd70 <_strtol_l.constprop.0>

0800de68 <_fwalk_sglue>:
 800de68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de6c:	4607      	mov	r7, r0
 800de6e:	4688      	mov	r8, r1
 800de70:	4614      	mov	r4, r2
 800de72:	2600      	movs	r6, #0
 800de74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de78:	f1b9 0901 	subs.w	r9, r9, #1
 800de7c:	d505      	bpl.n	800de8a <_fwalk_sglue+0x22>
 800de7e:	6824      	ldr	r4, [r4, #0]
 800de80:	2c00      	cmp	r4, #0
 800de82:	d1f7      	bne.n	800de74 <_fwalk_sglue+0xc>
 800de84:	4630      	mov	r0, r6
 800de86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de8a:	89ab      	ldrh	r3, [r5, #12]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d907      	bls.n	800dea0 <_fwalk_sglue+0x38>
 800de90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de94:	3301      	adds	r3, #1
 800de96:	d003      	beq.n	800dea0 <_fwalk_sglue+0x38>
 800de98:	4629      	mov	r1, r5
 800de9a:	4638      	mov	r0, r7
 800de9c:	47c0      	blx	r8
 800de9e:	4306      	orrs	r6, r0
 800dea0:	3568      	adds	r5, #104	@ 0x68
 800dea2:	e7e9      	b.n	800de78 <_fwalk_sglue+0x10>

0800dea4 <iprintf>:
 800dea4:	b40f      	push	{r0, r1, r2, r3}
 800dea6:	b507      	push	{r0, r1, r2, lr}
 800dea8:	4906      	ldr	r1, [pc, #24]	@ (800dec4 <iprintf+0x20>)
 800deaa:	ab04      	add	r3, sp, #16
 800deac:	6808      	ldr	r0, [r1, #0]
 800deae:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb2:	6881      	ldr	r1, [r0, #8]
 800deb4:	9301      	str	r3, [sp, #4]
 800deb6:	f001 fba9 	bl	800f60c <_vfiprintf_r>
 800deba:	b003      	add	sp, #12
 800debc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dec0:	b004      	add	sp, #16
 800dec2:	4770      	bx	lr
 800dec4:	24000188 	.word	0x24000188

0800dec8 <strncmp>:
 800dec8:	b510      	push	{r4, lr}
 800deca:	b16a      	cbz	r2, 800dee8 <strncmp+0x20>
 800decc:	3901      	subs	r1, #1
 800dece:	1884      	adds	r4, r0, r2
 800ded0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ded4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ded8:	429a      	cmp	r2, r3
 800deda:	d103      	bne.n	800dee4 <strncmp+0x1c>
 800dedc:	42a0      	cmp	r0, r4
 800dede:	d001      	beq.n	800dee4 <strncmp+0x1c>
 800dee0:	2a00      	cmp	r2, #0
 800dee2:	d1f5      	bne.n	800ded0 <strncmp+0x8>
 800dee4:	1ad0      	subs	r0, r2, r3
 800dee6:	bd10      	pop	{r4, pc}
 800dee8:	4610      	mov	r0, r2
 800deea:	e7fc      	b.n	800dee6 <strncmp+0x1e>

0800deec <memset>:
 800deec:	4402      	add	r2, r0
 800deee:	4603      	mov	r3, r0
 800def0:	4293      	cmp	r3, r2
 800def2:	d100      	bne.n	800def6 <memset+0xa>
 800def4:	4770      	bx	lr
 800def6:	f803 1b01 	strb.w	r1, [r3], #1
 800defa:	e7f9      	b.n	800def0 <memset+0x4>

0800defc <_localeconv_r>:
 800defc:	4800      	ldr	r0, [pc, #0]	@ (800df00 <_localeconv_r+0x4>)
 800defe:	4770      	bx	lr
 800df00:	2400010c 	.word	0x2400010c

0800df04 <_close_r>:
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	4d06      	ldr	r5, [pc, #24]	@ (800df20 <_close_r+0x1c>)
 800df08:	2300      	movs	r3, #0
 800df0a:	4604      	mov	r4, r0
 800df0c:	4608      	mov	r0, r1
 800df0e:	602b      	str	r3, [r5, #0]
 800df10:	f7f4 f85a 	bl	8001fc8 <_close>
 800df14:	1c43      	adds	r3, r0, #1
 800df16:	d102      	bne.n	800df1e <_close_r+0x1a>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	b103      	cbz	r3, 800df1e <_close_r+0x1a>
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	bd38      	pop	{r3, r4, r5, pc}
 800df20:	24000864 	.word	0x24000864

0800df24 <_lseek_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	4d07      	ldr	r5, [pc, #28]	@ (800df44 <_lseek_r+0x20>)
 800df28:	4604      	mov	r4, r0
 800df2a:	4608      	mov	r0, r1
 800df2c:	4611      	mov	r1, r2
 800df2e:	2200      	movs	r2, #0
 800df30:	602a      	str	r2, [r5, #0]
 800df32:	461a      	mov	r2, r3
 800df34:	f7f4 f86f 	bl	8002016 <_lseek>
 800df38:	1c43      	adds	r3, r0, #1
 800df3a:	d102      	bne.n	800df42 <_lseek_r+0x1e>
 800df3c:	682b      	ldr	r3, [r5, #0]
 800df3e:	b103      	cbz	r3, 800df42 <_lseek_r+0x1e>
 800df40:	6023      	str	r3, [r4, #0]
 800df42:	bd38      	pop	{r3, r4, r5, pc}
 800df44:	24000864 	.word	0x24000864

0800df48 <_read_r>:
 800df48:	b538      	push	{r3, r4, r5, lr}
 800df4a:	4d07      	ldr	r5, [pc, #28]	@ (800df68 <_read_r+0x20>)
 800df4c:	4604      	mov	r4, r0
 800df4e:	4608      	mov	r0, r1
 800df50:	4611      	mov	r1, r2
 800df52:	2200      	movs	r2, #0
 800df54:	602a      	str	r2, [r5, #0]
 800df56:	461a      	mov	r2, r3
 800df58:	f7f4 f819 	bl	8001f8e <_read>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	d102      	bne.n	800df66 <_read_r+0x1e>
 800df60:	682b      	ldr	r3, [r5, #0]
 800df62:	b103      	cbz	r3, 800df66 <_read_r+0x1e>
 800df64:	6023      	str	r3, [r4, #0]
 800df66:	bd38      	pop	{r3, r4, r5, pc}
 800df68:	24000864 	.word	0x24000864

0800df6c <_sbrk_r>:
 800df6c:	b538      	push	{r3, r4, r5, lr}
 800df6e:	4d06      	ldr	r5, [pc, #24]	@ (800df88 <_sbrk_r+0x1c>)
 800df70:	2300      	movs	r3, #0
 800df72:	4604      	mov	r4, r0
 800df74:	4608      	mov	r0, r1
 800df76:	602b      	str	r3, [r5, #0]
 800df78:	f7f4 f85a 	bl	8002030 <_sbrk>
 800df7c:	1c43      	adds	r3, r0, #1
 800df7e:	d102      	bne.n	800df86 <_sbrk_r+0x1a>
 800df80:	682b      	ldr	r3, [r5, #0]
 800df82:	b103      	cbz	r3, 800df86 <_sbrk_r+0x1a>
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	bd38      	pop	{r3, r4, r5, pc}
 800df88:	24000864 	.word	0x24000864

0800df8c <_write_r>:
 800df8c:	b538      	push	{r3, r4, r5, lr}
 800df8e:	4d07      	ldr	r5, [pc, #28]	@ (800dfac <_write_r+0x20>)
 800df90:	4604      	mov	r4, r0
 800df92:	4608      	mov	r0, r1
 800df94:	4611      	mov	r1, r2
 800df96:	2200      	movs	r2, #0
 800df98:	602a      	str	r2, [r5, #0]
 800df9a:	461a      	mov	r2, r3
 800df9c:	f7f2 fda3 	bl	8000ae6 <_write>
 800dfa0:	1c43      	adds	r3, r0, #1
 800dfa2:	d102      	bne.n	800dfaa <_write_r+0x1e>
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	b103      	cbz	r3, 800dfaa <_write_r+0x1e>
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	24000864 	.word	0x24000864

0800dfb0 <__errno>:
 800dfb0:	4b01      	ldr	r3, [pc, #4]	@ (800dfb8 <__errno+0x8>)
 800dfb2:	6818      	ldr	r0, [r3, #0]
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	24000188 	.word	0x24000188

0800dfbc <__libc_init_array>:
 800dfbc:	b570      	push	{r4, r5, r6, lr}
 800dfbe:	4d0d      	ldr	r5, [pc, #52]	@ (800dff4 <__libc_init_array+0x38>)
 800dfc0:	4c0d      	ldr	r4, [pc, #52]	@ (800dff8 <__libc_init_array+0x3c>)
 800dfc2:	1b64      	subs	r4, r4, r5
 800dfc4:	10a4      	asrs	r4, r4, #2
 800dfc6:	2600      	movs	r6, #0
 800dfc8:	42a6      	cmp	r6, r4
 800dfca:	d109      	bne.n	800dfe0 <__libc_init_array+0x24>
 800dfcc:	4d0b      	ldr	r5, [pc, #44]	@ (800dffc <__libc_init_array+0x40>)
 800dfce:	4c0c      	ldr	r4, [pc, #48]	@ (800e000 <__libc_init_array+0x44>)
 800dfd0:	f002 fba8 	bl	8010724 <_init>
 800dfd4:	1b64      	subs	r4, r4, r5
 800dfd6:	10a4      	asrs	r4, r4, #2
 800dfd8:	2600      	movs	r6, #0
 800dfda:	42a6      	cmp	r6, r4
 800dfdc:	d105      	bne.n	800dfea <__libc_init_array+0x2e>
 800dfde:	bd70      	pop	{r4, r5, r6, pc}
 800dfe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfe4:	4798      	blx	r3
 800dfe6:	3601      	adds	r6, #1
 800dfe8:	e7ee      	b.n	800dfc8 <__libc_init_array+0xc>
 800dfea:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfee:	4798      	blx	r3
 800dff0:	3601      	adds	r6, #1
 800dff2:	e7f2      	b.n	800dfda <__libc_init_array+0x1e>
 800dff4:	08010c44 	.word	0x08010c44
 800dff8:	08010c44 	.word	0x08010c44
 800dffc:	08010c44 	.word	0x08010c44
 800e000:	08010c48 	.word	0x08010c48

0800e004 <__retarget_lock_init_recursive>:
 800e004:	4770      	bx	lr

0800e006 <__retarget_lock_acquire_recursive>:
 800e006:	4770      	bx	lr

0800e008 <__retarget_lock_release_recursive>:
 800e008:	4770      	bx	lr

0800e00a <memcpy>:
 800e00a:	440a      	add	r2, r1
 800e00c:	4291      	cmp	r1, r2
 800e00e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e012:	d100      	bne.n	800e016 <memcpy+0xc>
 800e014:	4770      	bx	lr
 800e016:	b510      	push	{r4, lr}
 800e018:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e01c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e020:	4291      	cmp	r1, r2
 800e022:	d1f9      	bne.n	800e018 <memcpy+0xe>
 800e024:	bd10      	pop	{r4, pc}
	...

0800e028 <nan>:
 800e028:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e030 <nan+0x8>
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	00000000 	.word	0x00000000
 800e034:	7ff80000 	.word	0x7ff80000

0800e038 <nanf>:
 800e038:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e040 <nanf+0x8>
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	7fc00000 	.word	0x7fc00000

0800e044 <quorem>:
 800e044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e048:	6903      	ldr	r3, [r0, #16]
 800e04a:	690c      	ldr	r4, [r1, #16]
 800e04c:	42a3      	cmp	r3, r4
 800e04e:	4607      	mov	r7, r0
 800e050:	db7e      	blt.n	800e150 <quorem+0x10c>
 800e052:	3c01      	subs	r4, #1
 800e054:	f101 0814 	add.w	r8, r1, #20
 800e058:	00a3      	lsls	r3, r4, #2
 800e05a:	f100 0514 	add.w	r5, r0, #20
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e064:	9301      	str	r3, [sp, #4]
 800e066:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e06a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e06e:	3301      	adds	r3, #1
 800e070:	429a      	cmp	r2, r3
 800e072:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e076:	fbb2 f6f3 	udiv	r6, r2, r3
 800e07a:	d32e      	bcc.n	800e0da <quorem+0x96>
 800e07c:	f04f 0a00 	mov.w	sl, #0
 800e080:	46c4      	mov	ip, r8
 800e082:	46ae      	mov	lr, r5
 800e084:	46d3      	mov	fp, sl
 800e086:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e08a:	b298      	uxth	r0, r3
 800e08c:	fb06 a000 	mla	r0, r6, r0, sl
 800e090:	0c02      	lsrs	r2, r0, #16
 800e092:	0c1b      	lsrs	r3, r3, #16
 800e094:	fb06 2303 	mla	r3, r6, r3, r2
 800e098:	f8de 2000 	ldr.w	r2, [lr]
 800e09c:	b280      	uxth	r0, r0
 800e09e:	b292      	uxth	r2, r2
 800e0a0:	1a12      	subs	r2, r2, r0
 800e0a2:	445a      	add	r2, fp
 800e0a4:	f8de 0000 	ldr.w	r0, [lr]
 800e0a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e0b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e0b6:	b292      	uxth	r2, r2
 800e0b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e0bc:	45e1      	cmp	r9, ip
 800e0be:	f84e 2b04 	str.w	r2, [lr], #4
 800e0c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e0c6:	d2de      	bcs.n	800e086 <quorem+0x42>
 800e0c8:	9b00      	ldr	r3, [sp, #0]
 800e0ca:	58eb      	ldr	r3, [r5, r3]
 800e0cc:	b92b      	cbnz	r3, 800e0da <quorem+0x96>
 800e0ce:	9b01      	ldr	r3, [sp, #4]
 800e0d0:	3b04      	subs	r3, #4
 800e0d2:	429d      	cmp	r5, r3
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	d32f      	bcc.n	800e138 <quorem+0xf4>
 800e0d8:	613c      	str	r4, [r7, #16]
 800e0da:	4638      	mov	r0, r7
 800e0dc:	f001 ff30 	bl	800ff40 <__mcmp>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	db25      	blt.n	800e130 <quorem+0xec>
 800e0e4:	4629      	mov	r1, r5
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0ec:	f8d1 c000 	ldr.w	ip, [r1]
 800e0f0:	fa1f fe82 	uxth.w	lr, r2
 800e0f4:	fa1f f38c 	uxth.w	r3, ip
 800e0f8:	eba3 030e 	sub.w	r3, r3, lr
 800e0fc:	4403      	add	r3, r0
 800e0fe:	0c12      	lsrs	r2, r2, #16
 800e100:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e104:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e108:	b29b      	uxth	r3, r3
 800e10a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e10e:	45c1      	cmp	r9, r8
 800e110:	f841 3b04 	str.w	r3, [r1], #4
 800e114:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e118:	d2e6      	bcs.n	800e0e8 <quorem+0xa4>
 800e11a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e11e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e122:	b922      	cbnz	r2, 800e12e <quorem+0xea>
 800e124:	3b04      	subs	r3, #4
 800e126:	429d      	cmp	r5, r3
 800e128:	461a      	mov	r2, r3
 800e12a:	d30b      	bcc.n	800e144 <quorem+0x100>
 800e12c:	613c      	str	r4, [r7, #16]
 800e12e:	3601      	adds	r6, #1
 800e130:	4630      	mov	r0, r6
 800e132:	b003      	add	sp, #12
 800e134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e138:	6812      	ldr	r2, [r2, #0]
 800e13a:	3b04      	subs	r3, #4
 800e13c:	2a00      	cmp	r2, #0
 800e13e:	d1cb      	bne.n	800e0d8 <quorem+0x94>
 800e140:	3c01      	subs	r4, #1
 800e142:	e7c6      	b.n	800e0d2 <quorem+0x8e>
 800e144:	6812      	ldr	r2, [r2, #0]
 800e146:	3b04      	subs	r3, #4
 800e148:	2a00      	cmp	r2, #0
 800e14a:	d1ef      	bne.n	800e12c <quorem+0xe8>
 800e14c:	3c01      	subs	r4, #1
 800e14e:	e7ea      	b.n	800e126 <quorem+0xe2>
 800e150:	2000      	movs	r0, #0
 800e152:	e7ee      	b.n	800e132 <quorem+0xee>
 800e154:	0000      	movs	r0, r0
	...

0800e158 <_dtoa_r>:
 800e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15c:	ed2d 8b02 	vpush	{d8}
 800e160:	69c7      	ldr	r7, [r0, #28]
 800e162:	b091      	sub	sp, #68	@ 0x44
 800e164:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e168:	ec55 4b10 	vmov	r4, r5, d0
 800e16c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800e16e:	9107      	str	r1, [sp, #28]
 800e170:	4681      	mov	r9, r0
 800e172:	9209      	str	r2, [sp, #36]	@ 0x24
 800e174:	930d      	str	r3, [sp, #52]	@ 0x34
 800e176:	b97f      	cbnz	r7, 800e198 <_dtoa_r+0x40>
 800e178:	2010      	movs	r0, #16
 800e17a:	f7fe faeb 	bl	800c754 <malloc>
 800e17e:	4602      	mov	r2, r0
 800e180:	f8c9 001c 	str.w	r0, [r9, #28]
 800e184:	b920      	cbnz	r0, 800e190 <_dtoa_r+0x38>
 800e186:	4ba0      	ldr	r3, [pc, #640]	@ (800e408 <_dtoa_r+0x2b0>)
 800e188:	21ef      	movs	r1, #239	@ 0xef
 800e18a:	48a0      	ldr	r0, [pc, #640]	@ (800e40c <_dtoa_r+0x2b4>)
 800e18c:	f002 fa32 	bl	80105f4 <__assert_func>
 800e190:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e194:	6007      	str	r7, [r0, #0]
 800e196:	60c7      	str	r7, [r0, #12]
 800e198:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e19c:	6819      	ldr	r1, [r3, #0]
 800e19e:	b159      	cbz	r1, 800e1b8 <_dtoa_r+0x60>
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	604a      	str	r2, [r1, #4]
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	4093      	lsls	r3, r2
 800e1a8:	608b      	str	r3, [r1, #8]
 800e1aa:	4648      	mov	r0, r9
 800e1ac:	f001 fc44 	bl	800fa38 <_Bfree>
 800e1b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	601a      	str	r2, [r3, #0]
 800e1b8:	1e2b      	subs	r3, r5, #0
 800e1ba:	bfbb      	ittet	lt
 800e1bc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e1c0:	9303      	strlt	r3, [sp, #12]
 800e1c2:	2300      	movge	r3, #0
 800e1c4:	2201      	movlt	r2, #1
 800e1c6:	bfac      	ite	ge
 800e1c8:	6033      	strge	r3, [r6, #0]
 800e1ca:	6032      	strlt	r2, [r6, #0]
 800e1cc:	4b90      	ldr	r3, [pc, #576]	@ (800e410 <_dtoa_r+0x2b8>)
 800e1ce:	9e03      	ldr	r6, [sp, #12]
 800e1d0:	43b3      	bics	r3, r6
 800e1d2:	d110      	bne.n	800e1f6 <_dtoa_r+0x9e>
 800e1d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1d6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e1da:	6013      	str	r3, [r2, #0]
 800e1dc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800e1e0:	4323      	orrs	r3, r4
 800e1e2:	f000 84de 	beq.w	800eba2 <_dtoa_r+0xa4a>
 800e1e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e1e8:	4f8a      	ldr	r7, [pc, #552]	@ (800e414 <_dtoa_r+0x2bc>)
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	f000 84e0 	beq.w	800ebb0 <_dtoa_r+0xa58>
 800e1f0:	1cfb      	adds	r3, r7, #3
 800e1f2:	f000 bcdb 	b.w	800ebac <_dtoa_r+0xa54>
 800e1f6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800e1fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e202:	d10a      	bne.n	800e21a <_dtoa_r+0xc2>
 800e204:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e206:	2301      	movs	r3, #1
 800e208:	6013      	str	r3, [r2, #0]
 800e20a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e20c:	b113      	cbz	r3, 800e214 <_dtoa_r+0xbc>
 800e20e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e210:	4b81      	ldr	r3, [pc, #516]	@ (800e418 <_dtoa_r+0x2c0>)
 800e212:	6013      	str	r3, [r2, #0]
 800e214:	4f81      	ldr	r7, [pc, #516]	@ (800e41c <_dtoa_r+0x2c4>)
 800e216:	f000 bccb 	b.w	800ebb0 <_dtoa_r+0xa58>
 800e21a:	aa0e      	add	r2, sp, #56	@ 0x38
 800e21c:	a90f      	add	r1, sp, #60	@ 0x3c
 800e21e:	4648      	mov	r0, r9
 800e220:	eeb0 0b48 	vmov.f64	d0, d8
 800e224:	f001 ffac 	bl	8010180 <__d2b>
 800e228:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800e22c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e22e:	9001      	str	r0, [sp, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d045      	beq.n	800e2c0 <_dtoa_r+0x168>
 800e234:	eeb0 7b48 	vmov.f64	d7, d8
 800e238:	ee18 1a90 	vmov	r1, s17
 800e23c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e240:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800e244:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800e248:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e24c:	2500      	movs	r5, #0
 800e24e:	ee07 1a90 	vmov	s15, r1
 800e252:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800e256:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e3f0 <_dtoa_r+0x298>
 800e25a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e25e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800e3f8 <_dtoa_r+0x2a0>
 800e262:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e266:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e400 <_dtoa_r+0x2a8>
 800e26a:	ee07 3a90 	vmov	s15, r3
 800e26e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800e272:	eeb0 7b46 	vmov.f64	d7, d6
 800e276:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e27a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e27e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e286:	ee16 8a90 	vmov	r8, s13
 800e28a:	d508      	bpl.n	800e29e <_dtoa_r+0x146>
 800e28c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e290:	eeb4 6b47 	vcmp.f64	d6, d7
 800e294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e298:	bf18      	it	ne
 800e29a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800e29e:	f1b8 0f16 	cmp.w	r8, #22
 800e2a2:	d82b      	bhi.n	800e2fc <_dtoa_r+0x1a4>
 800e2a4:	495e      	ldr	r1, [pc, #376]	@ (800e420 <_dtoa_r+0x2c8>)
 800e2a6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800e2aa:	ed91 7b00 	vldr	d7, [r1]
 800e2ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b6:	d501      	bpl.n	800e2bc <_dtoa_r+0x164>
 800e2b8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e2bc:	2100      	movs	r1, #0
 800e2be:	e01e      	b.n	800e2fe <_dtoa_r+0x1a6>
 800e2c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2c2:	4413      	add	r3, r2
 800e2c4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800e2c8:	2920      	cmp	r1, #32
 800e2ca:	bfc1      	itttt	gt
 800e2cc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800e2d0:	408e      	lslgt	r6, r1
 800e2d2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800e2d6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800e2da:	bfd6      	itet	le
 800e2dc:	f1c1 0120 	rsble	r1, r1, #32
 800e2e0:	4331      	orrgt	r1, r6
 800e2e2:	fa04 f101 	lslle.w	r1, r4, r1
 800e2e6:	ee07 1a90 	vmov	s15, r1
 800e2ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	ee17 1a90 	vmov	r1, s15
 800e2f4:	2501      	movs	r5, #1
 800e2f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800e2fa:	e7a8      	b.n	800e24e <_dtoa_r+0xf6>
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	1ad2      	subs	r2, r2, r3
 800e300:	1e53      	subs	r3, r2, #1
 800e302:	9306      	str	r3, [sp, #24]
 800e304:	bf45      	ittet	mi
 800e306:	f1c2 0301 	rsbmi	r3, r2, #1
 800e30a:	9305      	strmi	r3, [sp, #20]
 800e30c:	2300      	movpl	r3, #0
 800e30e:	2300      	movmi	r3, #0
 800e310:	bf4c      	ite	mi
 800e312:	9306      	strmi	r3, [sp, #24]
 800e314:	9305      	strpl	r3, [sp, #20]
 800e316:	f1b8 0f00 	cmp.w	r8, #0
 800e31a:	910c      	str	r1, [sp, #48]	@ 0x30
 800e31c:	db18      	blt.n	800e350 <_dtoa_r+0x1f8>
 800e31e:	9b06      	ldr	r3, [sp, #24]
 800e320:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800e324:	4443      	add	r3, r8
 800e326:	9306      	str	r3, [sp, #24]
 800e328:	2300      	movs	r3, #0
 800e32a:	9a07      	ldr	r2, [sp, #28]
 800e32c:	2a09      	cmp	r2, #9
 800e32e:	d849      	bhi.n	800e3c4 <_dtoa_r+0x26c>
 800e330:	2a05      	cmp	r2, #5
 800e332:	bfc4      	itt	gt
 800e334:	3a04      	subgt	r2, #4
 800e336:	9207      	strgt	r2, [sp, #28]
 800e338:	9a07      	ldr	r2, [sp, #28]
 800e33a:	f1a2 0202 	sub.w	r2, r2, #2
 800e33e:	bfcc      	ite	gt
 800e340:	2400      	movgt	r4, #0
 800e342:	2401      	movle	r4, #1
 800e344:	2a03      	cmp	r2, #3
 800e346:	d848      	bhi.n	800e3da <_dtoa_r+0x282>
 800e348:	e8df f002 	tbb	[pc, r2]
 800e34c:	3a2c2e0b 	.word	0x3a2c2e0b
 800e350:	9b05      	ldr	r3, [sp, #20]
 800e352:	2200      	movs	r2, #0
 800e354:	eba3 0308 	sub.w	r3, r3, r8
 800e358:	9305      	str	r3, [sp, #20]
 800e35a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e35c:	f1c8 0300 	rsb	r3, r8, #0
 800e360:	e7e3      	b.n	800e32a <_dtoa_r+0x1d2>
 800e362:	2200      	movs	r2, #0
 800e364:	9208      	str	r2, [sp, #32]
 800e366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e368:	2a00      	cmp	r2, #0
 800e36a:	dc39      	bgt.n	800e3e0 <_dtoa_r+0x288>
 800e36c:	f04f 0b01 	mov.w	fp, #1
 800e370:	46da      	mov	sl, fp
 800e372:	465a      	mov	r2, fp
 800e374:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800e378:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800e37c:	2100      	movs	r1, #0
 800e37e:	2004      	movs	r0, #4
 800e380:	f100 0614 	add.w	r6, r0, #20
 800e384:	4296      	cmp	r6, r2
 800e386:	d930      	bls.n	800e3ea <_dtoa_r+0x292>
 800e388:	6079      	str	r1, [r7, #4]
 800e38a:	4648      	mov	r0, r9
 800e38c:	9304      	str	r3, [sp, #16]
 800e38e:	f001 fb13 	bl	800f9b8 <_Balloc>
 800e392:	9b04      	ldr	r3, [sp, #16]
 800e394:	4607      	mov	r7, r0
 800e396:	2800      	cmp	r0, #0
 800e398:	d146      	bne.n	800e428 <_dtoa_r+0x2d0>
 800e39a:	4b22      	ldr	r3, [pc, #136]	@ (800e424 <_dtoa_r+0x2cc>)
 800e39c:	4602      	mov	r2, r0
 800e39e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e3a2:	e6f2      	b.n	800e18a <_dtoa_r+0x32>
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	e7dd      	b.n	800e364 <_dtoa_r+0x20c>
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	9208      	str	r2, [sp, #32]
 800e3ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ae:	eb08 0b02 	add.w	fp, r8, r2
 800e3b2:	f10b 0a01 	add.w	sl, fp, #1
 800e3b6:	4652      	mov	r2, sl
 800e3b8:	2a01      	cmp	r2, #1
 800e3ba:	bfb8      	it	lt
 800e3bc:	2201      	movlt	r2, #1
 800e3be:	e7db      	b.n	800e378 <_dtoa_r+0x220>
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	e7f2      	b.n	800e3aa <_dtoa_r+0x252>
 800e3c4:	2401      	movs	r4, #1
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e3cc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	46da      	mov	sl, fp
 800e3d4:	2212      	movs	r2, #18
 800e3d6:	9109      	str	r1, [sp, #36]	@ 0x24
 800e3d8:	e7ce      	b.n	800e378 <_dtoa_r+0x220>
 800e3da:	2201      	movs	r2, #1
 800e3dc:	9208      	str	r2, [sp, #32]
 800e3de:	e7f5      	b.n	800e3cc <_dtoa_r+0x274>
 800e3e0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800e3e4:	46da      	mov	sl, fp
 800e3e6:	465a      	mov	r2, fp
 800e3e8:	e7c6      	b.n	800e378 <_dtoa_r+0x220>
 800e3ea:	3101      	adds	r1, #1
 800e3ec:	0040      	lsls	r0, r0, #1
 800e3ee:	e7c7      	b.n	800e380 <_dtoa_r+0x228>
 800e3f0:	636f4361 	.word	0x636f4361
 800e3f4:	3fd287a7 	.word	0x3fd287a7
 800e3f8:	8b60c8b3 	.word	0x8b60c8b3
 800e3fc:	3fc68a28 	.word	0x3fc68a28
 800e400:	509f79fb 	.word	0x509f79fb
 800e404:	3fd34413 	.word	0x3fd34413
 800e408:	080109b6 	.word	0x080109b6
 800e40c:	080109cd 	.word	0x080109cd
 800e410:	7ff00000 	.word	0x7ff00000
 800e414:	080109b2 	.word	0x080109b2
 800e418:	08010821 	.word	0x08010821
 800e41c:	08010820 	.word	0x08010820
 800e420:	08010b38 	.word	0x08010b38
 800e424:	08010a25 	.word	0x08010a25
 800e428:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800e42c:	f1ba 0f0e 	cmp.w	sl, #14
 800e430:	6010      	str	r0, [r2, #0]
 800e432:	d86f      	bhi.n	800e514 <_dtoa_r+0x3bc>
 800e434:	2c00      	cmp	r4, #0
 800e436:	d06d      	beq.n	800e514 <_dtoa_r+0x3bc>
 800e438:	f1b8 0f00 	cmp.w	r8, #0
 800e43c:	f340 80c2 	ble.w	800e5c4 <_dtoa_r+0x46c>
 800e440:	4aca      	ldr	r2, [pc, #808]	@ (800e76c <_dtoa_r+0x614>)
 800e442:	f008 010f 	and.w	r1, r8, #15
 800e446:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e44a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800e44e:	ed92 7b00 	vldr	d7, [r2]
 800e452:	ea4f 1128 	mov.w	r1, r8, asr #4
 800e456:	f000 80a9 	beq.w	800e5ac <_dtoa_r+0x454>
 800e45a:	4ac5      	ldr	r2, [pc, #788]	@ (800e770 <_dtoa_r+0x618>)
 800e45c:	ed92 6b08 	vldr	d6, [r2, #32]
 800e460:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e464:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e468:	f001 010f 	and.w	r1, r1, #15
 800e46c:	2203      	movs	r2, #3
 800e46e:	48c0      	ldr	r0, [pc, #768]	@ (800e770 <_dtoa_r+0x618>)
 800e470:	2900      	cmp	r1, #0
 800e472:	f040 809d 	bne.w	800e5b0 <_dtoa_r+0x458>
 800e476:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e47a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e47e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e482:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e484:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e488:	2900      	cmp	r1, #0
 800e48a:	f000 80c1 	beq.w	800e610 <_dtoa_r+0x4b8>
 800e48e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800e492:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e49a:	f140 80b9 	bpl.w	800e610 <_dtoa_r+0x4b8>
 800e49e:	f1ba 0f00 	cmp.w	sl, #0
 800e4a2:	f000 80b5 	beq.w	800e610 <_dtoa_r+0x4b8>
 800e4a6:	f1bb 0f00 	cmp.w	fp, #0
 800e4aa:	dd31      	ble.n	800e510 <_dtoa_r+0x3b8>
 800e4ac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800e4b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e4b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e4b8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800e4bc:	9104      	str	r1, [sp, #16]
 800e4be:	3201      	adds	r2, #1
 800e4c0:	465c      	mov	r4, fp
 800e4c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e4c6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800e4ca:	ee07 2a90 	vmov	s15, r2
 800e4ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e4d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e4d6:	ee15 2a90 	vmov	r2, s11
 800e4da:	ec51 0b15 	vmov	r0, r1, d5
 800e4de:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800e4e2:	2c00      	cmp	r4, #0
 800e4e4:	f040 8098 	bne.w	800e618 <_dtoa_r+0x4c0>
 800e4e8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e4ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e4f0:	ec41 0b17 	vmov	d7, r0, r1
 800e4f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fc:	f300 8261 	bgt.w	800e9c2 <_dtoa_r+0x86a>
 800e500:	eeb1 7b47 	vneg.f64	d7, d7
 800e504:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50c:	f100 80f5 	bmi.w	800e6fa <_dtoa_r+0x5a2>
 800e510:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e514:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e516:	2a00      	cmp	r2, #0
 800e518:	f2c0 812c 	blt.w	800e774 <_dtoa_r+0x61c>
 800e51c:	f1b8 0f0e 	cmp.w	r8, #14
 800e520:	f300 8128 	bgt.w	800e774 <_dtoa_r+0x61c>
 800e524:	4b91      	ldr	r3, [pc, #580]	@ (800e76c <_dtoa_r+0x614>)
 800e526:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e52a:	ed93 6b00 	vldr	d6, [r3]
 800e52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e530:	2b00      	cmp	r3, #0
 800e532:	da03      	bge.n	800e53c <_dtoa_r+0x3e4>
 800e534:	f1ba 0f00 	cmp.w	sl, #0
 800e538:	f340 80d2 	ble.w	800e6e0 <_dtoa_r+0x588>
 800e53c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800e540:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e544:	463e      	mov	r6, r7
 800e546:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e54a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e54e:	ee15 3a10 	vmov	r3, s10
 800e552:	3330      	adds	r3, #48	@ 0x30
 800e554:	f806 3b01 	strb.w	r3, [r6], #1
 800e558:	1bf3      	subs	r3, r6, r7
 800e55a:	459a      	cmp	sl, r3
 800e55c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e560:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e564:	f040 80f8 	bne.w	800e758 <_dtoa_r+0x600>
 800e568:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e56c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e574:	f300 80dd 	bgt.w	800e732 <_dtoa_r+0x5da>
 800e578:	eeb4 7b46 	vcmp.f64	d7, d6
 800e57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e580:	d104      	bne.n	800e58c <_dtoa_r+0x434>
 800e582:	ee15 3a10 	vmov	r3, s10
 800e586:	07db      	lsls	r3, r3, #31
 800e588:	f100 80d3 	bmi.w	800e732 <_dtoa_r+0x5da>
 800e58c:	9901      	ldr	r1, [sp, #4]
 800e58e:	4648      	mov	r0, r9
 800e590:	f001 fa52 	bl	800fa38 <_Bfree>
 800e594:	2300      	movs	r3, #0
 800e596:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e598:	7033      	strb	r3, [r6, #0]
 800e59a:	f108 0301 	add.w	r3, r8, #1
 800e59e:	6013      	str	r3, [r2, #0]
 800e5a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	f000 8304 	beq.w	800ebb0 <_dtoa_r+0xa58>
 800e5a8:	601e      	str	r6, [r3, #0]
 800e5aa:	e301      	b.n	800ebb0 <_dtoa_r+0xa58>
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	e75e      	b.n	800e46e <_dtoa_r+0x316>
 800e5b0:	07cc      	lsls	r4, r1, #31
 800e5b2:	d504      	bpl.n	800e5be <_dtoa_r+0x466>
 800e5b4:	ed90 6b00 	vldr	d6, [r0]
 800e5b8:	3201      	adds	r2, #1
 800e5ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e5be:	1049      	asrs	r1, r1, #1
 800e5c0:	3008      	adds	r0, #8
 800e5c2:	e755      	b.n	800e470 <_dtoa_r+0x318>
 800e5c4:	d022      	beq.n	800e60c <_dtoa_r+0x4b4>
 800e5c6:	f1c8 0100 	rsb	r1, r8, #0
 800e5ca:	4a68      	ldr	r2, [pc, #416]	@ (800e76c <_dtoa_r+0x614>)
 800e5cc:	f001 000f 	and.w	r0, r1, #15
 800e5d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e5d4:	ed92 7b00 	vldr	d7, [r2]
 800e5d8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e5dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e5e0:	4863      	ldr	r0, [pc, #396]	@ (800e770 <_dtoa_r+0x618>)
 800e5e2:	1109      	asrs	r1, r1, #4
 800e5e4:	2400      	movs	r4, #0
 800e5e6:	2202      	movs	r2, #2
 800e5e8:	b929      	cbnz	r1, 800e5f6 <_dtoa_r+0x49e>
 800e5ea:	2c00      	cmp	r4, #0
 800e5ec:	f43f af49 	beq.w	800e482 <_dtoa_r+0x32a>
 800e5f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e5f4:	e745      	b.n	800e482 <_dtoa_r+0x32a>
 800e5f6:	07ce      	lsls	r6, r1, #31
 800e5f8:	d505      	bpl.n	800e606 <_dtoa_r+0x4ae>
 800e5fa:	ed90 6b00 	vldr	d6, [r0]
 800e5fe:	3201      	adds	r2, #1
 800e600:	2401      	movs	r4, #1
 800e602:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e606:	1049      	asrs	r1, r1, #1
 800e608:	3008      	adds	r0, #8
 800e60a:	e7ed      	b.n	800e5e8 <_dtoa_r+0x490>
 800e60c:	2202      	movs	r2, #2
 800e60e:	e738      	b.n	800e482 <_dtoa_r+0x32a>
 800e610:	f8cd 8010 	str.w	r8, [sp, #16]
 800e614:	4654      	mov	r4, sl
 800e616:	e754      	b.n	800e4c2 <_dtoa_r+0x36a>
 800e618:	4a54      	ldr	r2, [pc, #336]	@ (800e76c <_dtoa_r+0x614>)
 800e61a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e61e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e622:	9a08      	ldr	r2, [sp, #32]
 800e624:	ec41 0b17 	vmov	d7, r0, r1
 800e628:	443c      	add	r4, r7
 800e62a:	b34a      	cbz	r2, 800e680 <_dtoa_r+0x528>
 800e62c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800e630:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800e634:	463e      	mov	r6, r7
 800e636:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e63a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e63e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e642:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e646:	ee14 2a90 	vmov	r2, s9
 800e64a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e64e:	3230      	adds	r2, #48	@ 0x30
 800e650:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e654:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65c:	f806 2b01 	strb.w	r2, [r6], #1
 800e660:	d438      	bmi.n	800e6d4 <_dtoa_r+0x57c>
 800e662:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e666:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66e:	d462      	bmi.n	800e736 <_dtoa_r+0x5de>
 800e670:	42a6      	cmp	r6, r4
 800e672:	f43f af4d 	beq.w	800e510 <_dtoa_r+0x3b8>
 800e676:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e67a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e67e:	e7e0      	b.n	800e642 <_dtoa_r+0x4ea>
 800e680:	4621      	mov	r1, r4
 800e682:	463e      	mov	r6, r7
 800e684:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e688:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e68c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e690:	ee14 2a90 	vmov	r2, s9
 800e694:	3230      	adds	r2, #48	@ 0x30
 800e696:	f806 2b01 	strb.w	r2, [r6], #1
 800e69a:	42a6      	cmp	r6, r4
 800e69c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e6a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e6a4:	d119      	bne.n	800e6da <_dtoa_r+0x582>
 800e6a6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800e6aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e6ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b6:	dc3e      	bgt.n	800e736 <_dtoa_r+0x5de>
 800e6b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e6bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c4:	f57f af24 	bpl.w	800e510 <_dtoa_r+0x3b8>
 800e6c8:	460e      	mov	r6, r1
 800e6ca:	3901      	subs	r1, #1
 800e6cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e6d0:	2b30      	cmp	r3, #48	@ 0x30
 800e6d2:	d0f9      	beq.n	800e6c8 <_dtoa_r+0x570>
 800e6d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e6d8:	e758      	b.n	800e58c <_dtoa_r+0x434>
 800e6da:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e6de:	e7d5      	b.n	800e68c <_dtoa_r+0x534>
 800e6e0:	d10b      	bne.n	800e6fa <_dtoa_r+0x5a2>
 800e6e2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e6e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e6ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f6:	f2c0 8161 	blt.w	800e9bc <_dtoa_r+0x864>
 800e6fa:	2400      	movs	r4, #0
 800e6fc:	4625      	mov	r5, r4
 800e6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e700:	43db      	mvns	r3, r3
 800e702:	9304      	str	r3, [sp, #16]
 800e704:	463e      	mov	r6, r7
 800e706:	f04f 0800 	mov.w	r8, #0
 800e70a:	4621      	mov	r1, r4
 800e70c:	4648      	mov	r0, r9
 800e70e:	f001 f993 	bl	800fa38 <_Bfree>
 800e712:	2d00      	cmp	r5, #0
 800e714:	d0de      	beq.n	800e6d4 <_dtoa_r+0x57c>
 800e716:	f1b8 0f00 	cmp.w	r8, #0
 800e71a:	d005      	beq.n	800e728 <_dtoa_r+0x5d0>
 800e71c:	45a8      	cmp	r8, r5
 800e71e:	d003      	beq.n	800e728 <_dtoa_r+0x5d0>
 800e720:	4641      	mov	r1, r8
 800e722:	4648      	mov	r0, r9
 800e724:	f001 f988 	bl	800fa38 <_Bfree>
 800e728:	4629      	mov	r1, r5
 800e72a:	4648      	mov	r0, r9
 800e72c:	f001 f984 	bl	800fa38 <_Bfree>
 800e730:	e7d0      	b.n	800e6d4 <_dtoa_r+0x57c>
 800e732:	f8cd 8010 	str.w	r8, [sp, #16]
 800e736:	4633      	mov	r3, r6
 800e738:	461e      	mov	r6, r3
 800e73a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e73e:	2a39      	cmp	r2, #57	@ 0x39
 800e740:	d106      	bne.n	800e750 <_dtoa_r+0x5f8>
 800e742:	429f      	cmp	r7, r3
 800e744:	d1f8      	bne.n	800e738 <_dtoa_r+0x5e0>
 800e746:	9a04      	ldr	r2, [sp, #16]
 800e748:	3201      	adds	r2, #1
 800e74a:	9204      	str	r2, [sp, #16]
 800e74c:	2230      	movs	r2, #48	@ 0x30
 800e74e:	703a      	strb	r2, [r7, #0]
 800e750:	781a      	ldrb	r2, [r3, #0]
 800e752:	3201      	adds	r2, #1
 800e754:	701a      	strb	r2, [r3, #0]
 800e756:	e7bd      	b.n	800e6d4 <_dtoa_r+0x57c>
 800e758:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e75c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e764:	f47f aeef 	bne.w	800e546 <_dtoa_r+0x3ee>
 800e768:	e710      	b.n	800e58c <_dtoa_r+0x434>
 800e76a:	bf00      	nop
 800e76c:	08010b38 	.word	0x08010b38
 800e770:	08010b10 	.word	0x08010b10
 800e774:	9908      	ldr	r1, [sp, #32]
 800e776:	2900      	cmp	r1, #0
 800e778:	f000 80e3 	beq.w	800e942 <_dtoa_r+0x7ea>
 800e77c:	9907      	ldr	r1, [sp, #28]
 800e77e:	2901      	cmp	r1, #1
 800e780:	f300 80c8 	bgt.w	800e914 <_dtoa_r+0x7bc>
 800e784:	2d00      	cmp	r5, #0
 800e786:	f000 80c1 	beq.w	800e90c <_dtoa_r+0x7b4>
 800e78a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e78e:	9e05      	ldr	r6, [sp, #20]
 800e790:	461c      	mov	r4, r3
 800e792:	9304      	str	r3, [sp, #16]
 800e794:	9b05      	ldr	r3, [sp, #20]
 800e796:	4413      	add	r3, r2
 800e798:	9305      	str	r3, [sp, #20]
 800e79a:	9b06      	ldr	r3, [sp, #24]
 800e79c:	2101      	movs	r1, #1
 800e79e:	4413      	add	r3, r2
 800e7a0:	4648      	mov	r0, r9
 800e7a2:	9306      	str	r3, [sp, #24]
 800e7a4:	f001 fa46 	bl	800fc34 <__i2b>
 800e7a8:	9b04      	ldr	r3, [sp, #16]
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	b166      	cbz	r6, 800e7c8 <_dtoa_r+0x670>
 800e7ae:	9a06      	ldr	r2, [sp, #24]
 800e7b0:	2a00      	cmp	r2, #0
 800e7b2:	dd09      	ble.n	800e7c8 <_dtoa_r+0x670>
 800e7b4:	42b2      	cmp	r2, r6
 800e7b6:	9905      	ldr	r1, [sp, #20]
 800e7b8:	bfa8      	it	ge
 800e7ba:	4632      	movge	r2, r6
 800e7bc:	1a89      	subs	r1, r1, r2
 800e7be:	9105      	str	r1, [sp, #20]
 800e7c0:	9906      	ldr	r1, [sp, #24]
 800e7c2:	1ab6      	subs	r6, r6, r2
 800e7c4:	1a8a      	subs	r2, r1, r2
 800e7c6:	9206      	str	r2, [sp, #24]
 800e7c8:	b1fb      	cbz	r3, 800e80a <_dtoa_r+0x6b2>
 800e7ca:	9a08      	ldr	r2, [sp, #32]
 800e7cc:	2a00      	cmp	r2, #0
 800e7ce:	f000 80bc 	beq.w	800e94a <_dtoa_r+0x7f2>
 800e7d2:	b19c      	cbz	r4, 800e7fc <_dtoa_r+0x6a4>
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	4622      	mov	r2, r4
 800e7d8:	4648      	mov	r0, r9
 800e7da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7dc:	f001 faea 	bl	800fdb4 <__pow5mult>
 800e7e0:	9a01      	ldr	r2, [sp, #4]
 800e7e2:	4601      	mov	r1, r0
 800e7e4:	4605      	mov	r5, r0
 800e7e6:	4648      	mov	r0, r9
 800e7e8:	f001 fa3a 	bl	800fc60 <__multiply>
 800e7ec:	9901      	ldr	r1, [sp, #4]
 800e7ee:	9004      	str	r0, [sp, #16]
 800e7f0:	4648      	mov	r0, r9
 800e7f2:	f001 f921 	bl	800fa38 <_Bfree>
 800e7f6:	9a04      	ldr	r2, [sp, #16]
 800e7f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7fa:	9201      	str	r2, [sp, #4]
 800e7fc:	1b1a      	subs	r2, r3, r4
 800e7fe:	d004      	beq.n	800e80a <_dtoa_r+0x6b2>
 800e800:	9901      	ldr	r1, [sp, #4]
 800e802:	4648      	mov	r0, r9
 800e804:	f001 fad6 	bl	800fdb4 <__pow5mult>
 800e808:	9001      	str	r0, [sp, #4]
 800e80a:	2101      	movs	r1, #1
 800e80c:	4648      	mov	r0, r9
 800e80e:	f001 fa11 	bl	800fc34 <__i2b>
 800e812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e814:	4604      	mov	r4, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	f000 81d0 	beq.w	800ebbc <_dtoa_r+0xa64>
 800e81c:	461a      	mov	r2, r3
 800e81e:	4601      	mov	r1, r0
 800e820:	4648      	mov	r0, r9
 800e822:	f001 fac7 	bl	800fdb4 <__pow5mult>
 800e826:	9b07      	ldr	r3, [sp, #28]
 800e828:	2b01      	cmp	r3, #1
 800e82a:	4604      	mov	r4, r0
 800e82c:	f300 8095 	bgt.w	800e95a <_dtoa_r+0x802>
 800e830:	9b02      	ldr	r3, [sp, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	f040 808b 	bne.w	800e94e <_dtoa_r+0x7f6>
 800e838:	9b03      	ldr	r3, [sp, #12]
 800e83a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e83e:	2a00      	cmp	r2, #0
 800e840:	f040 8087 	bne.w	800e952 <_dtoa_r+0x7fa>
 800e844:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e848:	0d12      	lsrs	r2, r2, #20
 800e84a:	0512      	lsls	r2, r2, #20
 800e84c:	2a00      	cmp	r2, #0
 800e84e:	f000 8082 	beq.w	800e956 <_dtoa_r+0x7fe>
 800e852:	9b05      	ldr	r3, [sp, #20]
 800e854:	3301      	adds	r3, #1
 800e856:	9305      	str	r3, [sp, #20]
 800e858:	9b06      	ldr	r3, [sp, #24]
 800e85a:	3301      	adds	r3, #1
 800e85c:	9306      	str	r3, [sp, #24]
 800e85e:	2301      	movs	r3, #1
 800e860:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 81af 	beq.w	800ebc8 <_dtoa_r+0xa70>
 800e86a:	6922      	ldr	r2, [r4, #16]
 800e86c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e870:	6910      	ldr	r0, [r2, #16]
 800e872:	f001 f993 	bl	800fb9c <__hi0bits>
 800e876:	f1c0 0020 	rsb	r0, r0, #32
 800e87a:	9b06      	ldr	r3, [sp, #24]
 800e87c:	4418      	add	r0, r3
 800e87e:	f010 001f 	ands.w	r0, r0, #31
 800e882:	d076      	beq.n	800e972 <_dtoa_r+0x81a>
 800e884:	f1c0 0220 	rsb	r2, r0, #32
 800e888:	2a04      	cmp	r2, #4
 800e88a:	dd69      	ble.n	800e960 <_dtoa_r+0x808>
 800e88c:	9b05      	ldr	r3, [sp, #20]
 800e88e:	f1c0 001c 	rsb	r0, r0, #28
 800e892:	4403      	add	r3, r0
 800e894:	9305      	str	r3, [sp, #20]
 800e896:	9b06      	ldr	r3, [sp, #24]
 800e898:	4406      	add	r6, r0
 800e89a:	4403      	add	r3, r0
 800e89c:	9306      	str	r3, [sp, #24]
 800e89e:	9b05      	ldr	r3, [sp, #20]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	dd05      	ble.n	800e8b0 <_dtoa_r+0x758>
 800e8a4:	9901      	ldr	r1, [sp, #4]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	4648      	mov	r0, r9
 800e8aa:	f001 fadd 	bl	800fe68 <__lshift>
 800e8ae:	9001      	str	r0, [sp, #4]
 800e8b0:	9b06      	ldr	r3, [sp, #24]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	dd05      	ble.n	800e8c2 <_dtoa_r+0x76a>
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	4648      	mov	r0, r9
 800e8bc:	f001 fad4 	bl	800fe68 <__lshift>
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d056      	beq.n	800e976 <_dtoa_r+0x81e>
 800e8c8:	9801      	ldr	r0, [sp, #4]
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	f001 fb38 	bl	800ff40 <__mcmp>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	da50      	bge.n	800e976 <_dtoa_r+0x81e>
 800e8d4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800e8d8:	9304      	str	r3, [sp, #16]
 800e8da:	9901      	ldr	r1, [sp, #4]
 800e8dc:	2300      	movs	r3, #0
 800e8de:	220a      	movs	r2, #10
 800e8e0:	4648      	mov	r0, r9
 800e8e2:	f001 f8cb 	bl	800fa7c <__multadd>
 800e8e6:	9b08      	ldr	r3, [sp, #32]
 800e8e8:	9001      	str	r0, [sp, #4]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f000 816e 	beq.w	800ebcc <_dtoa_r+0xa74>
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	220a      	movs	r2, #10
 800e8f6:	4648      	mov	r0, r9
 800e8f8:	f001 f8c0 	bl	800fa7c <__multadd>
 800e8fc:	f1bb 0f00 	cmp.w	fp, #0
 800e900:	4605      	mov	r5, r0
 800e902:	dc64      	bgt.n	800e9ce <_dtoa_r+0x876>
 800e904:	9b07      	ldr	r3, [sp, #28]
 800e906:	2b02      	cmp	r3, #2
 800e908:	dc3e      	bgt.n	800e988 <_dtoa_r+0x830>
 800e90a:	e060      	b.n	800e9ce <_dtoa_r+0x876>
 800e90c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e90e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e912:	e73c      	b.n	800e78e <_dtoa_r+0x636>
 800e914:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800e918:	42a3      	cmp	r3, r4
 800e91a:	bfbf      	itttt	lt
 800e91c:	1ae2      	sublt	r2, r4, r3
 800e91e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e920:	189b      	addlt	r3, r3, r2
 800e922:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800e924:	bfae      	itee	ge
 800e926:	1b1c      	subge	r4, r3, r4
 800e928:	4623      	movlt	r3, r4
 800e92a:	2400      	movlt	r4, #0
 800e92c:	f1ba 0f00 	cmp.w	sl, #0
 800e930:	bfb5      	itete	lt
 800e932:	9a05      	ldrlt	r2, [sp, #20]
 800e934:	9e05      	ldrge	r6, [sp, #20]
 800e936:	eba2 060a 	sublt.w	r6, r2, sl
 800e93a:	4652      	movge	r2, sl
 800e93c:	bfb8      	it	lt
 800e93e:	2200      	movlt	r2, #0
 800e940:	e727      	b.n	800e792 <_dtoa_r+0x63a>
 800e942:	9e05      	ldr	r6, [sp, #20]
 800e944:	9d08      	ldr	r5, [sp, #32]
 800e946:	461c      	mov	r4, r3
 800e948:	e730      	b.n	800e7ac <_dtoa_r+0x654>
 800e94a:	461a      	mov	r2, r3
 800e94c:	e758      	b.n	800e800 <_dtoa_r+0x6a8>
 800e94e:	2300      	movs	r3, #0
 800e950:	e786      	b.n	800e860 <_dtoa_r+0x708>
 800e952:	9b02      	ldr	r3, [sp, #8]
 800e954:	e784      	b.n	800e860 <_dtoa_r+0x708>
 800e956:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e958:	e783      	b.n	800e862 <_dtoa_r+0x70a>
 800e95a:	2300      	movs	r3, #0
 800e95c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e95e:	e784      	b.n	800e86a <_dtoa_r+0x712>
 800e960:	d09d      	beq.n	800e89e <_dtoa_r+0x746>
 800e962:	9b05      	ldr	r3, [sp, #20]
 800e964:	321c      	adds	r2, #28
 800e966:	4413      	add	r3, r2
 800e968:	9305      	str	r3, [sp, #20]
 800e96a:	9b06      	ldr	r3, [sp, #24]
 800e96c:	4416      	add	r6, r2
 800e96e:	4413      	add	r3, r2
 800e970:	e794      	b.n	800e89c <_dtoa_r+0x744>
 800e972:	4602      	mov	r2, r0
 800e974:	e7f5      	b.n	800e962 <_dtoa_r+0x80a>
 800e976:	f1ba 0f00 	cmp.w	sl, #0
 800e97a:	f8cd 8010 	str.w	r8, [sp, #16]
 800e97e:	46d3      	mov	fp, sl
 800e980:	dc21      	bgt.n	800e9c6 <_dtoa_r+0x86e>
 800e982:	9b07      	ldr	r3, [sp, #28]
 800e984:	2b02      	cmp	r3, #2
 800e986:	dd1e      	ble.n	800e9c6 <_dtoa_r+0x86e>
 800e988:	f1bb 0f00 	cmp.w	fp, #0
 800e98c:	f47f aeb7 	bne.w	800e6fe <_dtoa_r+0x5a6>
 800e990:	4621      	mov	r1, r4
 800e992:	465b      	mov	r3, fp
 800e994:	2205      	movs	r2, #5
 800e996:	4648      	mov	r0, r9
 800e998:	f001 f870 	bl	800fa7c <__multadd>
 800e99c:	4601      	mov	r1, r0
 800e99e:	4604      	mov	r4, r0
 800e9a0:	9801      	ldr	r0, [sp, #4]
 800e9a2:	f001 facd 	bl	800ff40 <__mcmp>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f77f aea9 	ble.w	800e6fe <_dtoa_r+0x5a6>
 800e9ac:	463e      	mov	r6, r7
 800e9ae:	2331      	movs	r3, #49	@ 0x31
 800e9b0:	f806 3b01 	strb.w	r3, [r6], #1
 800e9b4:	9b04      	ldr	r3, [sp, #16]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	9304      	str	r3, [sp, #16]
 800e9ba:	e6a4      	b.n	800e706 <_dtoa_r+0x5ae>
 800e9bc:	f8cd 8010 	str.w	r8, [sp, #16]
 800e9c0:	4654      	mov	r4, sl
 800e9c2:	4625      	mov	r5, r4
 800e9c4:	e7f2      	b.n	800e9ac <_dtoa_r+0x854>
 800e9c6:	9b08      	ldr	r3, [sp, #32]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 8103 	beq.w	800ebd4 <_dtoa_r+0xa7c>
 800e9ce:	2e00      	cmp	r6, #0
 800e9d0:	dd05      	ble.n	800e9de <_dtoa_r+0x886>
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	4632      	mov	r2, r6
 800e9d6:	4648      	mov	r0, r9
 800e9d8:	f001 fa46 	bl	800fe68 <__lshift>
 800e9dc:	4605      	mov	r5, r0
 800e9de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d058      	beq.n	800ea96 <_dtoa_r+0x93e>
 800e9e4:	6869      	ldr	r1, [r5, #4]
 800e9e6:	4648      	mov	r0, r9
 800e9e8:	f000 ffe6 	bl	800f9b8 <_Balloc>
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	b928      	cbnz	r0, 800e9fc <_dtoa_r+0x8a4>
 800e9f0:	4b82      	ldr	r3, [pc, #520]	@ (800ebfc <_dtoa_r+0xaa4>)
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e9f8:	f7ff bbc7 	b.w	800e18a <_dtoa_r+0x32>
 800e9fc:	692a      	ldr	r2, [r5, #16]
 800e9fe:	3202      	adds	r2, #2
 800ea00:	0092      	lsls	r2, r2, #2
 800ea02:	f105 010c 	add.w	r1, r5, #12
 800ea06:	300c      	adds	r0, #12
 800ea08:	f7ff faff 	bl	800e00a <memcpy>
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	4631      	mov	r1, r6
 800ea10:	4648      	mov	r0, r9
 800ea12:	f001 fa29 	bl	800fe68 <__lshift>
 800ea16:	1c7b      	adds	r3, r7, #1
 800ea18:	9305      	str	r3, [sp, #20]
 800ea1a:	eb07 030b 	add.w	r3, r7, fp
 800ea1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea20:	9b02      	ldr	r3, [sp, #8]
 800ea22:	f003 0301 	and.w	r3, r3, #1
 800ea26:	46a8      	mov	r8, r5
 800ea28:	9308      	str	r3, [sp, #32]
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	9b05      	ldr	r3, [sp, #20]
 800ea2e:	9801      	ldr	r0, [sp, #4]
 800ea30:	4621      	mov	r1, r4
 800ea32:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ea36:	f7ff fb05 	bl	800e044 <quorem>
 800ea3a:	4641      	mov	r1, r8
 800ea3c:	9002      	str	r0, [sp, #8]
 800ea3e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ea42:	9801      	ldr	r0, [sp, #4]
 800ea44:	f001 fa7c 	bl	800ff40 <__mcmp>
 800ea48:	462a      	mov	r2, r5
 800ea4a:	9006      	str	r0, [sp, #24]
 800ea4c:	4621      	mov	r1, r4
 800ea4e:	4648      	mov	r0, r9
 800ea50:	f001 fa92 	bl	800ff78 <__mdiff>
 800ea54:	68c2      	ldr	r2, [r0, #12]
 800ea56:	4606      	mov	r6, r0
 800ea58:	b9fa      	cbnz	r2, 800ea9a <_dtoa_r+0x942>
 800ea5a:	4601      	mov	r1, r0
 800ea5c:	9801      	ldr	r0, [sp, #4]
 800ea5e:	f001 fa6f 	bl	800ff40 <__mcmp>
 800ea62:	4602      	mov	r2, r0
 800ea64:	4631      	mov	r1, r6
 800ea66:	4648      	mov	r0, r9
 800ea68:	920a      	str	r2, [sp, #40]	@ 0x28
 800ea6a:	f000 ffe5 	bl	800fa38 <_Bfree>
 800ea6e:	9b07      	ldr	r3, [sp, #28]
 800ea70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea72:	9e05      	ldr	r6, [sp, #20]
 800ea74:	ea43 0102 	orr.w	r1, r3, r2
 800ea78:	9b08      	ldr	r3, [sp, #32]
 800ea7a:	4319      	orrs	r1, r3
 800ea7c:	d10f      	bne.n	800ea9e <_dtoa_r+0x946>
 800ea7e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ea82:	d028      	beq.n	800ead6 <_dtoa_r+0x97e>
 800ea84:	9b06      	ldr	r3, [sp, #24]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	dd02      	ble.n	800ea90 <_dtoa_r+0x938>
 800ea8a:	9b02      	ldr	r3, [sp, #8]
 800ea8c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ea90:	f88b a000 	strb.w	sl, [fp]
 800ea94:	e639      	b.n	800e70a <_dtoa_r+0x5b2>
 800ea96:	4628      	mov	r0, r5
 800ea98:	e7bd      	b.n	800ea16 <_dtoa_r+0x8be>
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	e7e2      	b.n	800ea64 <_dtoa_r+0x90c>
 800ea9e:	9b06      	ldr	r3, [sp, #24]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	db04      	blt.n	800eaae <_dtoa_r+0x956>
 800eaa4:	9907      	ldr	r1, [sp, #28]
 800eaa6:	430b      	orrs	r3, r1
 800eaa8:	9908      	ldr	r1, [sp, #32]
 800eaaa:	430b      	orrs	r3, r1
 800eaac:	d120      	bne.n	800eaf0 <_dtoa_r+0x998>
 800eaae:	2a00      	cmp	r2, #0
 800eab0:	ddee      	ble.n	800ea90 <_dtoa_r+0x938>
 800eab2:	9901      	ldr	r1, [sp, #4]
 800eab4:	2201      	movs	r2, #1
 800eab6:	4648      	mov	r0, r9
 800eab8:	f001 f9d6 	bl	800fe68 <__lshift>
 800eabc:	4621      	mov	r1, r4
 800eabe:	9001      	str	r0, [sp, #4]
 800eac0:	f001 fa3e 	bl	800ff40 <__mcmp>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	dc03      	bgt.n	800ead0 <_dtoa_r+0x978>
 800eac8:	d1e2      	bne.n	800ea90 <_dtoa_r+0x938>
 800eaca:	f01a 0f01 	tst.w	sl, #1
 800eace:	d0df      	beq.n	800ea90 <_dtoa_r+0x938>
 800ead0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ead4:	d1d9      	bne.n	800ea8a <_dtoa_r+0x932>
 800ead6:	2339      	movs	r3, #57	@ 0x39
 800ead8:	f88b 3000 	strb.w	r3, [fp]
 800eadc:	4633      	mov	r3, r6
 800eade:	461e      	mov	r6, r3
 800eae0:	3b01      	subs	r3, #1
 800eae2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eae6:	2a39      	cmp	r2, #57	@ 0x39
 800eae8:	d053      	beq.n	800eb92 <_dtoa_r+0xa3a>
 800eaea:	3201      	adds	r2, #1
 800eaec:	701a      	strb	r2, [r3, #0]
 800eaee:	e60c      	b.n	800e70a <_dtoa_r+0x5b2>
 800eaf0:	2a00      	cmp	r2, #0
 800eaf2:	dd07      	ble.n	800eb04 <_dtoa_r+0x9ac>
 800eaf4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800eaf8:	d0ed      	beq.n	800ead6 <_dtoa_r+0x97e>
 800eafa:	f10a 0301 	add.w	r3, sl, #1
 800eafe:	f88b 3000 	strb.w	r3, [fp]
 800eb02:	e602      	b.n	800e70a <_dtoa_r+0x5b2>
 800eb04:	9b05      	ldr	r3, [sp, #20]
 800eb06:	9a05      	ldr	r2, [sp, #20]
 800eb08:	f803 ac01 	strb.w	sl, [r3, #-1]
 800eb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d029      	beq.n	800eb66 <_dtoa_r+0xa0e>
 800eb12:	9901      	ldr	r1, [sp, #4]
 800eb14:	2300      	movs	r3, #0
 800eb16:	220a      	movs	r2, #10
 800eb18:	4648      	mov	r0, r9
 800eb1a:	f000 ffaf 	bl	800fa7c <__multadd>
 800eb1e:	45a8      	cmp	r8, r5
 800eb20:	9001      	str	r0, [sp, #4]
 800eb22:	f04f 0300 	mov.w	r3, #0
 800eb26:	f04f 020a 	mov.w	r2, #10
 800eb2a:	4641      	mov	r1, r8
 800eb2c:	4648      	mov	r0, r9
 800eb2e:	d107      	bne.n	800eb40 <_dtoa_r+0x9e8>
 800eb30:	f000 ffa4 	bl	800fa7c <__multadd>
 800eb34:	4680      	mov	r8, r0
 800eb36:	4605      	mov	r5, r0
 800eb38:	9b05      	ldr	r3, [sp, #20]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	9305      	str	r3, [sp, #20]
 800eb3e:	e775      	b.n	800ea2c <_dtoa_r+0x8d4>
 800eb40:	f000 ff9c 	bl	800fa7c <__multadd>
 800eb44:	4629      	mov	r1, r5
 800eb46:	4680      	mov	r8, r0
 800eb48:	2300      	movs	r3, #0
 800eb4a:	220a      	movs	r2, #10
 800eb4c:	4648      	mov	r0, r9
 800eb4e:	f000 ff95 	bl	800fa7c <__multadd>
 800eb52:	4605      	mov	r5, r0
 800eb54:	e7f0      	b.n	800eb38 <_dtoa_r+0x9e0>
 800eb56:	f1bb 0f00 	cmp.w	fp, #0
 800eb5a:	bfcc      	ite	gt
 800eb5c:	465e      	movgt	r6, fp
 800eb5e:	2601      	movle	r6, #1
 800eb60:	443e      	add	r6, r7
 800eb62:	f04f 0800 	mov.w	r8, #0
 800eb66:	9901      	ldr	r1, [sp, #4]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	4648      	mov	r0, r9
 800eb6c:	f001 f97c 	bl	800fe68 <__lshift>
 800eb70:	4621      	mov	r1, r4
 800eb72:	9001      	str	r0, [sp, #4]
 800eb74:	f001 f9e4 	bl	800ff40 <__mcmp>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	dcaf      	bgt.n	800eadc <_dtoa_r+0x984>
 800eb7c:	d102      	bne.n	800eb84 <_dtoa_r+0xa2c>
 800eb7e:	f01a 0f01 	tst.w	sl, #1
 800eb82:	d1ab      	bne.n	800eadc <_dtoa_r+0x984>
 800eb84:	4633      	mov	r3, r6
 800eb86:	461e      	mov	r6, r3
 800eb88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb8c:	2a30      	cmp	r2, #48	@ 0x30
 800eb8e:	d0fa      	beq.n	800eb86 <_dtoa_r+0xa2e>
 800eb90:	e5bb      	b.n	800e70a <_dtoa_r+0x5b2>
 800eb92:	429f      	cmp	r7, r3
 800eb94:	d1a3      	bne.n	800eade <_dtoa_r+0x986>
 800eb96:	9b04      	ldr	r3, [sp, #16]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	9304      	str	r3, [sp, #16]
 800eb9c:	2331      	movs	r3, #49	@ 0x31
 800eb9e:	703b      	strb	r3, [r7, #0]
 800eba0:	e5b3      	b.n	800e70a <_dtoa_r+0x5b2>
 800eba2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eba4:	4f16      	ldr	r7, [pc, #88]	@ (800ec00 <_dtoa_r+0xaa8>)
 800eba6:	b11b      	cbz	r3, 800ebb0 <_dtoa_r+0xa58>
 800eba8:	f107 0308 	add.w	r3, r7, #8
 800ebac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ebae:	6013      	str	r3, [r2, #0]
 800ebb0:	4638      	mov	r0, r7
 800ebb2:	b011      	add	sp, #68	@ 0x44
 800ebb4:	ecbd 8b02 	vpop	{d8}
 800ebb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebbc:	9b07      	ldr	r3, [sp, #28]
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	f77f ae36 	ble.w	800e830 <_dtoa_r+0x6d8>
 800ebc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebc8:	2001      	movs	r0, #1
 800ebca:	e656      	b.n	800e87a <_dtoa_r+0x722>
 800ebcc:	f1bb 0f00 	cmp.w	fp, #0
 800ebd0:	f77f aed7 	ble.w	800e982 <_dtoa_r+0x82a>
 800ebd4:	463e      	mov	r6, r7
 800ebd6:	9801      	ldr	r0, [sp, #4]
 800ebd8:	4621      	mov	r1, r4
 800ebda:	f7ff fa33 	bl	800e044 <quorem>
 800ebde:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ebe2:	f806 ab01 	strb.w	sl, [r6], #1
 800ebe6:	1bf2      	subs	r2, r6, r7
 800ebe8:	4593      	cmp	fp, r2
 800ebea:	ddb4      	ble.n	800eb56 <_dtoa_r+0x9fe>
 800ebec:	9901      	ldr	r1, [sp, #4]
 800ebee:	2300      	movs	r3, #0
 800ebf0:	220a      	movs	r2, #10
 800ebf2:	4648      	mov	r0, r9
 800ebf4:	f000 ff42 	bl	800fa7c <__multadd>
 800ebf8:	9001      	str	r0, [sp, #4]
 800ebfa:	e7ec      	b.n	800ebd6 <_dtoa_r+0xa7e>
 800ebfc:	08010a25 	.word	0x08010a25
 800ec00:	080109a9 	.word	0x080109a9

0800ec04 <_free_r>:
 800ec04:	b538      	push	{r3, r4, r5, lr}
 800ec06:	4605      	mov	r5, r0
 800ec08:	2900      	cmp	r1, #0
 800ec0a:	d041      	beq.n	800ec90 <_free_r+0x8c>
 800ec0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec10:	1f0c      	subs	r4, r1, #4
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	bfb8      	it	lt
 800ec16:	18e4      	addlt	r4, r4, r3
 800ec18:	f7fe f9e0 	bl	800cfdc <__malloc_lock>
 800ec1c:	4a1d      	ldr	r2, [pc, #116]	@ (800ec94 <_free_r+0x90>)
 800ec1e:	6813      	ldr	r3, [r2, #0]
 800ec20:	b933      	cbnz	r3, 800ec30 <_free_r+0x2c>
 800ec22:	6063      	str	r3, [r4, #4]
 800ec24:	6014      	str	r4, [r2, #0]
 800ec26:	4628      	mov	r0, r5
 800ec28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec2c:	f7fe b9dc 	b.w	800cfe8 <__malloc_unlock>
 800ec30:	42a3      	cmp	r3, r4
 800ec32:	d908      	bls.n	800ec46 <_free_r+0x42>
 800ec34:	6820      	ldr	r0, [r4, #0]
 800ec36:	1821      	adds	r1, r4, r0
 800ec38:	428b      	cmp	r3, r1
 800ec3a:	bf01      	itttt	eq
 800ec3c:	6819      	ldreq	r1, [r3, #0]
 800ec3e:	685b      	ldreq	r3, [r3, #4]
 800ec40:	1809      	addeq	r1, r1, r0
 800ec42:	6021      	streq	r1, [r4, #0]
 800ec44:	e7ed      	b.n	800ec22 <_free_r+0x1e>
 800ec46:	461a      	mov	r2, r3
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	b10b      	cbz	r3, 800ec50 <_free_r+0x4c>
 800ec4c:	42a3      	cmp	r3, r4
 800ec4e:	d9fa      	bls.n	800ec46 <_free_r+0x42>
 800ec50:	6811      	ldr	r1, [r2, #0]
 800ec52:	1850      	adds	r0, r2, r1
 800ec54:	42a0      	cmp	r0, r4
 800ec56:	d10b      	bne.n	800ec70 <_free_r+0x6c>
 800ec58:	6820      	ldr	r0, [r4, #0]
 800ec5a:	4401      	add	r1, r0
 800ec5c:	1850      	adds	r0, r2, r1
 800ec5e:	4283      	cmp	r3, r0
 800ec60:	6011      	str	r1, [r2, #0]
 800ec62:	d1e0      	bne.n	800ec26 <_free_r+0x22>
 800ec64:	6818      	ldr	r0, [r3, #0]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	6053      	str	r3, [r2, #4]
 800ec6a:	4408      	add	r0, r1
 800ec6c:	6010      	str	r0, [r2, #0]
 800ec6e:	e7da      	b.n	800ec26 <_free_r+0x22>
 800ec70:	d902      	bls.n	800ec78 <_free_r+0x74>
 800ec72:	230c      	movs	r3, #12
 800ec74:	602b      	str	r3, [r5, #0]
 800ec76:	e7d6      	b.n	800ec26 <_free_r+0x22>
 800ec78:	6820      	ldr	r0, [r4, #0]
 800ec7a:	1821      	adds	r1, r4, r0
 800ec7c:	428b      	cmp	r3, r1
 800ec7e:	bf04      	itt	eq
 800ec80:	6819      	ldreq	r1, [r3, #0]
 800ec82:	685b      	ldreq	r3, [r3, #4]
 800ec84:	6063      	str	r3, [r4, #4]
 800ec86:	bf04      	itt	eq
 800ec88:	1809      	addeq	r1, r1, r0
 800ec8a:	6021      	streq	r1, [r4, #0]
 800ec8c:	6054      	str	r4, [r2, #4]
 800ec8e:	e7ca      	b.n	800ec26 <_free_r+0x22>
 800ec90:	bd38      	pop	{r3, r4, r5, pc}
 800ec92:	bf00      	nop
 800ec94:	24000724 	.word	0x24000724

0800ec98 <rshift>:
 800ec98:	6903      	ldr	r3, [r0, #16]
 800ec9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eca2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eca6:	f100 0414 	add.w	r4, r0, #20
 800ecaa:	dd45      	ble.n	800ed38 <rshift+0xa0>
 800ecac:	f011 011f 	ands.w	r1, r1, #31
 800ecb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ecb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ecb8:	d10c      	bne.n	800ecd4 <rshift+0x3c>
 800ecba:	f100 0710 	add.w	r7, r0, #16
 800ecbe:	4629      	mov	r1, r5
 800ecc0:	42b1      	cmp	r1, r6
 800ecc2:	d334      	bcc.n	800ed2e <rshift+0x96>
 800ecc4:	1a9b      	subs	r3, r3, r2
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	1eea      	subs	r2, r5, #3
 800ecca:	4296      	cmp	r6, r2
 800eccc:	bf38      	it	cc
 800ecce:	2300      	movcc	r3, #0
 800ecd0:	4423      	add	r3, r4
 800ecd2:	e015      	b.n	800ed00 <rshift+0x68>
 800ecd4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ecd8:	f1c1 0820 	rsb	r8, r1, #32
 800ecdc:	40cf      	lsrs	r7, r1
 800ecde:	f105 0e04 	add.w	lr, r5, #4
 800ece2:	46a1      	mov	r9, r4
 800ece4:	4576      	cmp	r6, lr
 800ece6:	46f4      	mov	ip, lr
 800ece8:	d815      	bhi.n	800ed16 <rshift+0x7e>
 800ecea:	1a9a      	subs	r2, r3, r2
 800ecec:	0092      	lsls	r2, r2, #2
 800ecee:	3a04      	subs	r2, #4
 800ecf0:	3501      	adds	r5, #1
 800ecf2:	42ae      	cmp	r6, r5
 800ecf4:	bf38      	it	cc
 800ecf6:	2200      	movcc	r2, #0
 800ecf8:	18a3      	adds	r3, r4, r2
 800ecfa:	50a7      	str	r7, [r4, r2]
 800ecfc:	b107      	cbz	r7, 800ed00 <rshift+0x68>
 800ecfe:	3304      	adds	r3, #4
 800ed00:	1b1a      	subs	r2, r3, r4
 800ed02:	42a3      	cmp	r3, r4
 800ed04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ed08:	bf08      	it	eq
 800ed0a:	2300      	moveq	r3, #0
 800ed0c:	6102      	str	r2, [r0, #16]
 800ed0e:	bf08      	it	eq
 800ed10:	6143      	streq	r3, [r0, #20]
 800ed12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed16:	f8dc c000 	ldr.w	ip, [ip]
 800ed1a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed1e:	ea4c 0707 	orr.w	r7, ip, r7
 800ed22:	f849 7b04 	str.w	r7, [r9], #4
 800ed26:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed2a:	40cf      	lsrs	r7, r1
 800ed2c:	e7da      	b.n	800ece4 <rshift+0x4c>
 800ed2e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed32:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed36:	e7c3      	b.n	800ecc0 <rshift+0x28>
 800ed38:	4623      	mov	r3, r4
 800ed3a:	e7e1      	b.n	800ed00 <rshift+0x68>

0800ed3c <__hexdig_fun>:
 800ed3c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ed40:	2b09      	cmp	r3, #9
 800ed42:	d802      	bhi.n	800ed4a <__hexdig_fun+0xe>
 800ed44:	3820      	subs	r0, #32
 800ed46:	b2c0      	uxtb	r0, r0
 800ed48:	4770      	bx	lr
 800ed4a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ed4e:	2b05      	cmp	r3, #5
 800ed50:	d801      	bhi.n	800ed56 <__hexdig_fun+0x1a>
 800ed52:	3847      	subs	r0, #71	@ 0x47
 800ed54:	e7f7      	b.n	800ed46 <__hexdig_fun+0xa>
 800ed56:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ed5a:	2b05      	cmp	r3, #5
 800ed5c:	d801      	bhi.n	800ed62 <__hexdig_fun+0x26>
 800ed5e:	3827      	subs	r0, #39	@ 0x27
 800ed60:	e7f1      	b.n	800ed46 <__hexdig_fun+0xa>
 800ed62:	2000      	movs	r0, #0
 800ed64:	4770      	bx	lr
	...

0800ed68 <__gethex>:
 800ed68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6c:	b085      	sub	sp, #20
 800ed6e:	468a      	mov	sl, r1
 800ed70:	9302      	str	r3, [sp, #8]
 800ed72:	680b      	ldr	r3, [r1, #0]
 800ed74:	9001      	str	r0, [sp, #4]
 800ed76:	4690      	mov	r8, r2
 800ed78:	1c9c      	adds	r4, r3, #2
 800ed7a:	46a1      	mov	r9, r4
 800ed7c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ed80:	2830      	cmp	r0, #48	@ 0x30
 800ed82:	d0fa      	beq.n	800ed7a <__gethex+0x12>
 800ed84:	eba9 0303 	sub.w	r3, r9, r3
 800ed88:	f1a3 0b02 	sub.w	fp, r3, #2
 800ed8c:	f7ff ffd6 	bl	800ed3c <__hexdig_fun>
 800ed90:	4605      	mov	r5, r0
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d168      	bne.n	800ee68 <__gethex+0x100>
 800ed96:	49a0      	ldr	r1, [pc, #640]	@ (800f018 <__gethex+0x2b0>)
 800ed98:	2201      	movs	r2, #1
 800ed9a:	4648      	mov	r0, r9
 800ed9c:	f7ff f894 	bl	800dec8 <strncmp>
 800eda0:	4607      	mov	r7, r0
 800eda2:	2800      	cmp	r0, #0
 800eda4:	d167      	bne.n	800ee76 <__gethex+0x10e>
 800eda6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800edaa:	4626      	mov	r6, r4
 800edac:	f7ff ffc6 	bl	800ed3c <__hexdig_fun>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	d062      	beq.n	800ee7a <__gethex+0x112>
 800edb4:	4623      	mov	r3, r4
 800edb6:	7818      	ldrb	r0, [r3, #0]
 800edb8:	2830      	cmp	r0, #48	@ 0x30
 800edba:	4699      	mov	r9, r3
 800edbc:	f103 0301 	add.w	r3, r3, #1
 800edc0:	d0f9      	beq.n	800edb6 <__gethex+0x4e>
 800edc2:	f7ff ffbb 	bl	800ed3c <__hexdig_fun>
 800edc6:	fab0 f580 	clz	r5, r0
 800edca:	096d      	lsrs	r5, r5, #5
 800edcc:	f04f 0b01 	mov.w	fp, #1
 800edd0:	464a      	mov	r2, r9
 800edd2:	4616      	mov	r6, r2
 800edd4:	3201      	adds	r2, #1
 800edd6:	7830      	ldrb	r0, [r6, #0]
 800edd8:	f7ff ffb0 	bl	800ed3c <__hexdig_fun>
 800eddc:	2800      	cmp	r0, #0
 800edde:	d1f8      	bne.n	800edd2 <__gethex+0x6a>
 800ede0:	498d      	ldr	r1, [pc, #564]	@ (800f018 <__gethex+0x2b0>)
 800ede2:	2201      	movs	r2, #1
 800ede4:	4630      	mov	r0, r6
 800ede6:	f7ff f86f 	bl	800dec8 <strncmp>
 800edea:	2800      	cmp	r0, #0
 800edec:	d13f      	bne.n	800ee6e <__gethex+0x106>
 800edee:	b944      	cbnz	r4, 800ee02 <__gethex+0x9a>
 800edf0:	1c74      	adds	r4, r6, #1
 800edf2:	4622      	mov	r2, r4
 800edf4:	4616      	mov	r6, r2
 800edf6:	3201      	adds	r2, #1
 800edf8:	7830      	ldrb	r0, [r6, #0]
 800edfa:	f7ff ff9f 	bl	800ed3c <__hexdig_fun>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d1f8      	bne.n	800edf4 <__gethex+0x8c>
 800ee02:	1ba4      	subs	r4, r4, r6
 800ee04:	00a7      	lsls	r7, r4, #2
 800ee06:	7833      	ldrb	r3, [r6, #0]
 800ee08:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ee0c:	2b50      	cmp	r3, #80	@ 0x50
 800ee0e:	d13e      	bne.n	800ee8e <__gethex+0x126>
 800ee10:	7873      	ldrb	r3, [r6, #1]
 800ee12:	2b2b      	cmp	r3, #43	@ 0x2b
 800ee14:	d033      	beq.n	800ee7e <__gethex+0x116>
 800ee16:	2b2d      	cmp	r3, #45	@ 0x2d
 800ee18:	d034      	beq.n	800ee84 <__gethex+0x11c>
 800ee1a:	1c71      	adds	r1, r6, #1
 800ee1c:	2400      	movs	r4, #0
 800ee1e:	7808      	ldrb	r0, [r1, #0]
 800ee20:	f7ff ff8c 	bl	800ed3c <__hexdig_fun>
 800ee24:	1e43      	subs	r3, r0, #1
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	2b18      	cmp	r3, #24
 800ee2a:	d830      	bhi.n	800ee8e <__gethex+0x126>
 800ee2c:	f1a0 0210 	sub.w	r2, r0, #16
 800ee30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ee34:	f7ff ff82 	bl	800ed3c <__hexdig_fun>
 800ee38:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ee3c:	fa5f fc8c 	uxtb.w	ip, ip
 800ee40:	f1bc 0f18 	cmp.w	ip, #24
 800ee44:	f04f 030a 	mov.w	r3, #10
 800ee48:	d91e      	bls.n	800ee88 <__gethex+0x120>
 800ee4a:	b104      	cbz	r4, 800ee4e <__gethex+0xe6>
 800ee4c:	4252      	negs	r2, r2
 800ee4e:	4417      	add	r7, r2
 800ee50:	f8ca 1000 	str.w	r1, [sl]
 800ee54:	b1ed      	cbz	r5, 800ee92 <__gethex+0x12a>
 800ee56:	f1bb 0f00 	cmp.w	fp, #0
 800ee5a:	bf0c      	ite	eq
 800ee5c:	2506      	moveq	r5, #6
 800ee5e:	2500      	movne	r5, #0
 800ee60:	4628      	mov	r0, r5
 800ee62:	b005      	add	sp, #20
 800ee64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee68:	2500      	movs	r5, #0
 800ee6a:	462c      	mov	r4, r5
 800ee6c:	e7b0      	b.n	800edd0 <__gethex+0x68>
 800ee6e:	2c00      	cmp	r4, #0
 800ee70:	d1c7      	bne.n	800ee02 <__gethex+0x9a>
 800ee72:	4627      	mov	r7, r4
 800ee74:	e7c7      	b.n	800ee06 <__gethex+0x9e>
 800ee76:	464e      	mov	r6, r9
 800ee78:	462f      	mov	r7, r5
 800ee7a:	2501      	movs	r5, #1
 800ee7c:	e7c3      	b.n	800ee06 <__gethex+0x9e>
 800ee7e:	2400      	movs	r4, #0
 800ee80:	1cb1      	adds	r1, r6, #2
 800ee82:	e7cc      	b.n	800ee1e <__gethex+0xb6>
 800ee84:	2401      	movs	r4, #1
 800ee86:	e7fb      	b.n	800ee80 <__gethex+0x118>
 800ee88:	fb03 0002 	mla	r0, r3, r2, r0
 800ee8c:	e7ce      	b.n	800ee2c <__gethex+0xc4>
 800ee8e:	4631      	mov	r1, r6
 800ee90:	e7de      	b.n	800ee50 <__gethex+0xe8>
 800ee92:	eba6 0309 	sub.w	r3, r6, r9
 800ee96:	3b01      	subs	r3, #1
 800ee98:	4629      	mov	r1, r5
 800ee9a:	2b07      	cmp	r3, #7
 800ee9c:	dc0a      	bgt.n	800eeb4 <__gethex+0x14c>
 800ee9e:	9801      	ldr	r0, [sp, #4]
 800eea0:	f000 fd8a 	bl	800f9b8 <_Balloc>
 800eea4:	4604      	mov	r4, r0
 800eea6:	b940      	cbnz	r0, 800eeba <__gethex+0x152>
 800eea8:	4b5c      	ldr	r3, [pc, #368]	@ (800f01c <__gethex+0x2b4>)
 800eeaa:	4602      	mov	r2, r0
 800eeac:	21e4      	movs	r1, #228	@ 0xe4
 800eeae:	485c      	ldr	r0, [pc, #368]	@ (800f020 <__gethex+0x2b8>)
 800eeb0:	f001 fba0 	bl	80105f4 <__assert_func>
 800eeb4:	3101      	adds	r1, #1
 800eeb6:	105b      	asrs	r3, r3, #1
 800eeb8:	e7ef      	b.n	800ee9a <__gethex+0x132>
 800eeba:	f100 0a14 	add.w	sl, r0, #20
 800eebe:	2300      	movs	r3, #0
 800eec0:	4655      	mov	r5, sl
 800eec2:	469b      	mov	fp, r3
 800eec4:	45b1      	cmp	r9, r6
 800eec6:	d337      	bcc.n	800ef38 <__gethex+0x1d0>
 800eec8:	f845 bb04 	str.w	fp, [r5], #4
 800eecc:	eba5 050a 	sub.w	r5, r5, sl
 800eed0:	10ad      	asrs	r5, r5, #2
 800eed2:	6125      	str	r5, [r4, #16]
 800eed4:	4658      	mov	r0, fp
 800eed6:	f000 fe61 	bl	800fb9c <__hi0bits>
 800eeda:	016d      	lsls	r5, r5, #5
 800eedc:	f8d8 6000 	ldr.w	r6, [r8]
 800eee0:	1a2d      	subs	r5, r5, r0
 800eee2:	42b5      	cmp	r5, r6
 800eee4:	dd54      	ble.n	800ef90 <__gethex+0x228>
 800eee6:	1bad      	subs	r5, r5, r6
 800eee8:	4629      	mov	r1, r5
 800eeea:	4620      	mov	r0, r4
 800eeec:	f001 f9f2 	bl	80102d4 <__any_on>
 800eef0:	4681      	mov	r9, r0
 800eef2:	b178      	cbz	r0, 800ef14 <__gethex+0x1ac>
 800eef4:	1e6b      	subs	r3, r5, #1
 800eef6:	1159      	asrs	r1, r3, #5
 800eef8:	f003 021f 	and.w	r2, r3, #31
 800eefc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ef00:	f04f 0901 	mov.w	r9, #1
 800ef04:	fa09 f202 	lsl.w	r2, r9, r2
 800ef08:	420a      	tst	r2, r1
 800ef0a:	d003      	beq.n	800ef14 <__gethex+0x1ac>
 800ef0c:	454b      	cmp	r3, r9
 800ef0e:	dc36      	bgt.n	800ef7e <__gethex+0x216>
 800ef10:	f04f 0902 	mov.w	r9, #2
 800ef14:	4629      	mov	r1, r5
 800ef16:	4620      	mov	r0, r4
 800ef18:	f7ff febe 	bl	800ec98 <rshift>
 800ef1c:	442f      	add	r7, r5
 800ef1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef22:	42bb      	cmp	r3, r7
 800ef24:	da42      	bge.n	800efac <__gethex+0x244>
 800ef26:	9801      	ldr	r0, [sp, #4]
 800ef28:	4621      	mov	r1, r4
 800ef2a:	f000 fd85 	bl	800fa38 <_Bfree>
 800ef2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef30:	2300      	movs	r3, #0
 800ef32:	6013      	str	r3, [r2, #0]
 800ef34:	25a3      	movs	r5, #163	@ 0xa3
 800ef36:	e793      	b.n	800ee60 <__gethex+0xf8>
 800ef38:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ef3c:	2a2e      	cmp	r2, #46	@ 0x2e
 800ef3e:	d012      	beq.n	800ef66 <__gethex+0x1fe>
 800ef40:	2b20      	cmp	r3, #32
 800ef42:	d104      	bne.n	800ef4e <__gethex+0x1e6>
 800ef44:	f845 bb04 	str.w	fp, [r5], #4
 800ef48:	f04f 0b00 	mov.w	fp, #0
 800ef4c:	465b      	mov	r3, fp
 800ef4e:	7830      	ldrb	r0, [r6, #0]
 800ef50:	9303      	str	r3, [sp, #12]
 800ef52:	f7ff fef3 	bl	800ed3c <__hexdig_fun>
 800ef56:	9b03      	ldr	r3, [sp, #12]
 800ef58:	f000 000f 	and.w	r0, r0, #15
 800ef5c:	4098      	lsls	r0, r3
 800ef5e:	ea4b 0b00 	orr.w	fp, fp, r0
 800ef62:	3304      	adds	r3, #4
 800ef64:	e7ae      	b.n	800eec4 <__gethex+0x15c>
 800ef66:	45b1      	cmp	r9, r6
 800ef68:	d8ea      	bhi.n	800ef40 <__gethex+0x1d8>
 800ef6a:	492b      	ldr	r1, [pc, #172]	@ (800f018 <__gethex+0x2b0>)
 800ef6c:	9303      	str	r3, [sp, #12]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	4630      	mov	r0, r6
 800ef72:	f7fe ffa9 	bl	800dec8 <strncmp>
 800ef76:	9b03      	ldr	r3, [sp, #12]
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	d1e1      	bne.n	800ef40 <__gethex+0x1d8>
 800ef7c:	e7a2      	b.n	800eec4 <__gethex+0x15c>
 800ef7e:	1ea9      	subs	r1, r5, #2
 800ef80:	4620      	mov	r0, r4
 800ef82:	f001 f9a7 	bl	80102d4 <__any_on>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d0c2      	beq.n	800ef10 <__gethex+0x1a8>
 800ef8a:	f04f 0903 	mov.w	r9, #3
 800ef8e:	e7c1      	b.n	800ef14 <__gethex+0x1ac>
 800ef90:	da09      	bge.n	800efa6 <__gethex+0x23e>
 800ef92:	1b75      	subs	r5, r6, r5
 800ef94:	4621      	mov	r1, r4
 800ef96:	9801      	ldr	r0, [sp, #4]
 800ef98:	462a      	mov	r2, r5
 800ef9a:	f000 ff65 	bl	800fe68 <__lshift>
 800ef9e:	1b7f      	subs	r7, r7, r5
 800efa0:	4604      	mov	r4, r0
 800efa2:	f100 0a14 	add.w	sl, r0, #20
 800efa6:	f04f 0900 	mov.w	r9, #0
 800efaa:	e7b8      	b.n	800ef1e <__gethex+0x1b6>
 800efac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800efb0:	42bd      	cmp	r5, r7
 800efb2:	dd6f      	ble.n	800f094 <__gethex+0x32c>
 800efb4:	1bed      	subs	r5, r5, r7
 800efb6:	42ae      	cmp	r6, r5
 800efb8:	dc34      	bgt.n	800f024 <__gethex+0x2bc>
 800efba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d022      	beq.n	800f008 <__gethex+0x2a0>
 800efc2:	2b03      	cmp	r3, #3
 800efc4:	d024      	beq.n	800f010 <__gethex+0x2a8>
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d115      	bne.n	800eff6 <__gethex+0x28e>
 800efca:	42ae      	cmp	r6, r5
 800efcc:	d113      	bne.n	800eff6 <__gethex+0x28e>
 800efce:	2e01      	cmp	r6, #1
 800efd0:	d10b      	bne.n	800efea <__gethex+0x282>
 800efd2:	9a02      	ldr	r2, [sp, #8]
 800efd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800efd8:	6013      	str	r3, [r2, #0]
 800efda:	2301      	movs	r3, #1
 800efdc:	6123      	str	r3, [r4, #16]
 800efde:	f8ca 3000 	str.w	r3, [sl]
 800efe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efe4:	2562      	movs	r5, #98	@ 0x62
 800efe6:	601c      	str	r4, [r3, #0]
 800efe8:	e73a      	b.n	800ee60 <__gethex+0xf8>
 800efea:	1e71      	subs	r1, r6, #1
 800efec:	4620      	mov	r0, r4
 800efee:	f001 f971 	bl	80102d4 <__any_on>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d1ed      	bne.n	800efd2 <__gethex+0x26a>
 800eff6:	9801      	ldr	r0, [sp, #4]
 800eff8:	4621      	mov	r1, r4
 800effa:	f000 fd1d 	bl	800fa38 <_Bfree>
 800effe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f000:	2300      	movs	r3, #0
 800f002:	6013      	str	r3, [r2, #0]
 800f004:	2550      	movs	r5, #80	@ 0x50
 800f006:	e72b      	b.n	800ee60 <__gethex+0xf8>
 800f008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d1f3      	bne.n	800eff6 <__gethex+0x28e>
 800f00e:	e7e0      	b.n	800efd2 <__gethex+0x26a>
 800f010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1dd      	bne.n	800efd2 <__gethex+0x26a>
 800f016:	e7ee      	b.n	800eff6 <__gethex+0x28e>
 800f018:	08010849 	.word	0x08010849
 800f01c:	08010a25 	.word	0x08010a25
 800f020:	08010a36 	.word	0x08010a36
 800f024:	1e6f      	subs	r7, r5, #1
 800f026:	f1b9 0f00 	cmp.w	r9, #0
 800f02a:	d130      	bne.n	800f08e <__gethex+0x326>
 800f02c:	b127      	cbz	r7, 800f038 <__gethex+0x2d0>
 800f02e:	4639      	mov	r1, r7
 800f030:	4620      	mov	r0, r4
 800f032:	f001 f94f 	bl	80102d4 <__any_on>
 800f036:	4681      	mov	r9, r0
 800f038:	117a      	asrs	r2, r7, #5
 800f03a:	2301      	movs	r3, #1
 800f03c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f040:	f007 071f 	and.w	r7, r7, #31
 800f044:	40bb      	lsls	r3, r7
 800f046:	4213      	tst	r3, r2
 800f048:	4629      	mov	r1, r5
 800f04a:	4620      	mov	r0, r4
 800f04c:	bf18      	it	ne
 800f04e:	f049 0902 	orrne.w	r9, r9, #2
 800f052:	f7ff fe21 	bl	800ec98 <rshift>
 800f056:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f05a:	1b76      	subs	r6, r6, r5
 800f05c:	2502      	movs	r5, #2
 800f05e:	f1b9 0f00 	cmp.w	r9, #0
 800f062:	d047      	beq.n	800f0f4 <__gethex+0x38c>
 800f064:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f068:	2b02      	cmp	r3, #2
 800f06a:	d015      	beq.n	800f098 <__gethex+0x330>
 800f06c:	2b03      	cmp	r3, #3
 800f06e:	d017      	beq.n	800f0a0 <__gethex+0x338>
 800f070:	2b01      	cmp	r3, #1
 800f072:	d109      	bne.n	800f088 <__gethex+0x320>
 800f074:	f019 0f02 	tst.w	r9, #2
 800f078:	d006      	beq.n	800f088 <__gethex+0x320>
 800f07a:	f8da 3000 	ldr.w	r3, [sl]
 800f07e:	ea49 0903 	orr.w	r9, r9, r3
 800f082:	f019 0f01 	tst.w	r9, #1
 800f086:	d10e      	bne.n	800f0a6 <__gethex+0x33e>
 800f088:	f045 0510 	orr.w	r5, r5, #16
 800f08c:	e032      	b.n	800f0f4 <__gethex+0x38c>
 800f08e:	f04f 0901 	mov.w	r9, #1
 800f092:	e7d1      	b.n	800f038 <__gethex+0x2d0>
 800f094:	2501      	movs	r5, #1
 800f096:	e7e2      	b.n	800f05e <__gethex+0x2f6>
 800f098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f09a:	f1c3 0301 	rsb	r3, r3, #1
 800f09e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d0f0      	beq.n	800f088 <__gethex+0x320>
 800f0a6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f0aa:	f104 0314 	add.w	r3, r4, #20
 800f0ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f0b2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f0b6:	f04f 0c00 	mov.w	ip, #0
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0c0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f0c4:	d01b      	beq.n	800f0fe <__gethex+0x396>
 800f0c6:	3201      	adds	r2, #1
 800f0c8:	6002      	str	r2, [r0, #0]
 800f0ca:	2d02      	cmp	r5, #2
 800f0cc:	f104 0314 	add.w	r3, r4, #20
 800f0d0:	d13c      	bne.n	800f14c <__gethex+0x3e4>
 800f0d2:	f8d8 2000 	ldr.w	r2, [r8]
 800f0d6:	3a01      	subs	r2, #1
 800f0d8:	42b2      	cmp	r2, r6
 800f0da:	d109      	bne.n	800f0f0 <__gethex+0x388>
 800f0dc:	1171      	asrs	r1, r6, #5
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0e4:	f006 061f 	and.w	r6, r6, #31
 800f0e8:	fa02 f606 	lsl.w	r6, r2, r6
 800f0ec:	421e      	tst	r6, r3
 800f0ee:	d13a      	bne.n	800f166 <__gethex+0x3fe>
 800f0f0:	f045 0520 	orr.w	r5, r5, #32
 800f0f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0f6:	601c      	str	r4, [r3, #0]
 800f0f8:	9b02      	ldr	r3, [sp, #8]
 800f0fa:	601f      	str	r7, [r3, #0]
 800f0fc:	e6b0      	b.n	800ee60 <__gethex+0xf8>
 800f0fe:	4299      	cmp	r1, r3
 800f100:	f843 cc04 	str.w	ip, [r3, #-4]
 800f104:	d8d9      	bhi.n	800f0ba <__gethex+0x352>
 800f106:	68a3      	ldr	r3, [r4, #8]
 800f108:	459b      	cmp	fp, r3
 800f10a:	db17      	blt.n	800f13c <__gethex+0x3d4>
 800f10c:	6861      	ldr	r1, [r4, #4]
 800f10e:	9801      	ldr	r0, [sp, #4]
 800f110:	3101      	adds	r1, #1
 800f112:	f000 fc51 	bl	800f9b8 <_Balloc>
 800f116:	4681      	mov	r9, r0
 800f118:	b918      	cbnz	r0, 800f122 <__gethex+0x3ba>
 800f11a:	4b1a      	ldr	r3, [pc, #104]	@ (800f184 <__gethex+0x41c>)
 800f11c:	4602      	mov	r2, r0
 800f11e:	2184      	movs	r1, #132	@ 0x84
 800f120:	e6c5      	b.n	800eeae <__gethex+0x146>
 800f122:	6922      	ldr	r2, [r4, #16]
 800f124:	3202      	adds	r2, #2
 800f126:	f104 010c 	add.w	r1, r4, #12
 800f12a:	0092      	lsls	r2, r2, #2
 800f12c:	300c      	adds	r0, #12
 800f12e:	f7fe ff6c 	bl	800e00a <memcpy>
 800f132:	4621      	mov	r1, r4
 800f134:	9801      	ldr	r0, [sp, #4]
 800f136:	f000 fc7f 	bl	800fa38 <_Bfree>
 800f13a:	464c      	mov	r4, r9
 800f13c:	6923      	ldr	r3, [r4, #16]
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f144:	6122      	str	r2, [r4, #16]
 800f146:	2201      	movs	r2, #1
 800f148:	615a      	str	r2, [r3, #20]
 800f14a:	e7be      	b.n	800f0ca <__gethex+0x362>
 800f14c:	6922      	ldr	r2, [r4, #16]
 800f14e:	455a      	cmp	r2, fp
 800f150:	dd0b      	ble.n	800f16a <__gethex+0x402>
 800f152:	2101      	movs	r1, #1
 800f154:	4620      	mov	r0, r4
 800f156:	f7ff fd9f 	bl	800ec98 <rshift>
 800f15a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f15e:	3701      	adds	r7, #1
 800f160:	42bb      	cmp	r3, r7
 800f162:	f6ff aee0 	blt.w	800ef26 <__gethex+0x1be>
 800f166:	2501      	movs	r5, #1
 800f168:	e7c2      	b.n	800f0f0 <__gethex+0x388>
 800f16a:	f016 061f 	ands.w	r6, r6, #31
 800f16e:	d0fa      	beq.n	800f166 <__gethex+0x3fe>
 800f170:	4453      	add	r3, sl
 800f172:	f1c6 0620 	rsb	r6, r6, #32
 800f176:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f17a:	f000 fd0f 	bl	800fb9c <__hi0bits>
 800f17e:	42b0      	cmp	r0, r6
 800f180:	dbe7      	blt.n	800f152 <__gethex+0x3ea>
 800f182:	e7f0      	b.n	800f166 <__gethex+0x3fe>
 800f184:	08010a25 	.word	0x08010a25

0800f188 <L_shift>:
 800f188:	f1c2 0208 	rsb	r2, r2, #8
 800f18c:	0092      	lsls	r2, r2, #2
 800f18e:	b570      	push	{r4, r5, r6, lr}
 800f190:	f1c2 0620 	rsb	r6, r2, #32
 800f194:	6843      	ldr	r3, [r0, #4]
 800f196:	6804      	ldr	r4, [r0, #0]
 800f198:	fa03 f506 	lsl.w	r5, r3, r6
 800f19c:	432c      	orrs	r4, r5
 800f19e:	40d3      	lsrs	r3, r2
 800f1a0:	6004      	str	r4, [r0, #0]
 800f1a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f1a6:	4288      	cmp	r0, r1
 800f1a8:	d3f4      	bcc.n	800f194 <L_shift+0xc>
 800f1aa:	bd70      	pop	{r4, r5, r6, pc}

0800f1ac <__match>:
 800f1ac:	b530      	push	{r4, r5, lr}
 800f1ae:	6803      	ldr	r3, [r0, #0]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1b6:	b914      	cbnz	r4, 800f1be <__match+0x12>
 800f1b8:	6003      	str	r3, [r0, #0]
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	bd30      	pop	{r4, r5, pc}
 800f1be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1c2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f1c6:	2d19      	cmp	r5, #25
 800f1c8:	bf98      	it	ls
 800f1ca:	3220      	addls	r2, #32
 800f1cc:	42a2      	cmp	r2, r4
 800f1ce:	d0f0      	beq.n	800f1b2 <__match+0x6>
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	e7f3      	b.n	800f1bc <__match+0x10>

0800f1d4 <__hexnan>:
 800f1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d8:	680b      	ldr	r3, [r1, #0]
 800f1da:	6801      	ldr	r1, [r0, #0]
 800f1dc:	115e      	asrs	r6, r3, #5
 800f1de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f1e2:	f013 031f 	ands.w	r3, r3, #31
 800f1e6:	b087      	sub	sp, #28
 800f1e8:	bf18      	it	ne
 800f1ea:	3604      	addne	r6, #4
 800f1ec:	2500      	movs	r5, #0
 800f1ee:	1f37      	subs	r7, r6, #4
 800f1f0:	4682      	mov	sl, r0
 800f1f2:	4690      	mov	r8, r2
 800f1f4:	9301      	str	r3, [sp, #4]
 800f1f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800f1fa:	46b9      	mov	r9, r7
 800f1fc:	463c      	mov	r4, r7
 800f1fe:	9502      	str	r5, [sp, #8]
 800f200:	46ab      	mov	fp, r5
 800f202:	784a      	ldrb	r2, [r1, #1]
 800f204:	1c4b      	adds	r3, r1, #1
 800f206:	9303      	str	r3, [sp, #12]
 800f208:	b342      	cbz	r2, 800f25c <__hexnan+0x88>
 800f20a:	4610      	mov	r0, r2
 800f20c:	9105      	str	r1, [sp, #20]
 800f20e:	9204      	str	r2, [sp, #16]
 800f210:	f7ff fd94 	bl	800ed3c <__hexdig_fun>
 800f214:	2800      	cmp	r0, #0
 800f216:	d151      	bne.n	800f2bc <__hexnan+0xe8>
 800f218:	9a04      	ldr	r2, [sp, #16]
 800f21a:	9905      	ldr	r1, [sp, #20]
 800f21c:	2a20      	cmp	r2, #32
 800f21e:	d818      	bhi.n	800f252 <__hexnan+0x7e>
 800f220:	9b02      	ldr	r3, [sp, #8]
 800f222:	459b      	cmp	fp, r3
 800f224:	dd13      	ble.n	800f24e <__hexnan+0x7a>
 800f226:	454c      	cmp	r4, r9
 800f228:	d206      	bcs.n	800f238 <__hexnan+0x64>
 800f22a:	2d07      	cmp	r5, #7
 800f22c:	dc04      	bgt.n	800f238 <__hexnan+0x64>
 800f22e:	462a      	mov	r2, r5
 800f230:	4649      	mov	r1, r9
 800f232:	4620      	mov	r0, r4
 800f234:	f7ff ffa8 	bl	800f188 <L_shift>
 800f238:	4544      	cmp	r4, r8
 800f23a:	d952      	bls.n	800f2e2 <__hexnan+0x10e>
 800f23c:	2300      	movs	r3, #0
 800f23e:	f1a4 0904 	sub.w	r9, r4, #4
 800f242:	f844 3c04 	str.w	r3, [r4, #-4]
 800f246:	f8cd b008 	str.w	fp, [sp, #8]
 800f24a:	464c      	mov	r4, r9
 800f24c:	461d      	mov	r5, r3
 800f24e:	9903      	ldr	r1, [sp, #12]
 800f250:	e7d7      	b.n	800f202 <__hexnan+0x2e>
 800f252:	2a29      	cmp	r2, #41	@ 0x29
 800f254:	d157      	bne.n	800f306 <__hexnan+0x132>
 800f256:	3102      	adds	r1, #2
 800f258:	f8ca 1000 	str.w	r1, [sl]
 800f25c:	f1bb 0f00 	cmp.w	fp, #0
 800f260:	d051      	beq.n	800f306 <__hexnan+0x132>
 800f262:	454c      	cmp	r4, r9
 800f264:	d206      	bcs.n	800f274 <__hexnan+0xa0>
 800f266:	2d07      	cmp	r5, #7
 800f268:	dc04      	bgt.n	800f274 <__hexnan+0xa0>
 800f26a:	462a      	mov	r2, r5
 800f26c:	4649      	mov	r1, r9
 800f26e:	4620      	mov	r0, r4
 800f270:	f7ff ff8a 	bl	800f188 <L_shift>
 800f274:	4544      	cmp	r4, r8
 800f276:	d936      	bls.n	800f2e6 <__hexnan+0x112>
 800f278:	f1a8 0204 	sub.w	r2, r8, #4
 800f27c:	4623      	mov	r3, r4
 800f27e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f282:	f842 1f04 	str.w	r1, [r2, #4]!
 800f286:	429f      	cmp	r7, r3
 800f288:	d2f9      	bcs.n	800f27e <__hexnan+0xaa>
 800f28a:	1b3b      	subs	r3, r7, r4
 800f28c:	f023 0303 	bic.w	r3, r3, #3
 800f290:	3304      	adds	r3, #4
 800f292:	3401      	adds	r4, #1
 800f294:	3e03      	subs	r6, #3
 800f296:	42b4      	cmp	r4, r6
 800f298:	bf88      	it	hi
 800f29a:	2304      	movhi	r3, #4
 800f29c:	4443      	add	r3, r8
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f843 2b04 	str.w	r2, [r3], #4
 800f2a4:	429f      	cmp	r7, r3
 800f2a6:	d2fb      	bcs.n	800f2a0 <__hexnan+0xcc>
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	b91b      	cbnz	r3, 800f2b4 <__hexnan+0xe0>
 800f2ac:	4547      	cmp	r7, r8
 800f2ae:	d128      	bne.n	800f302 <__hexnan+0x12e>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	603b      	str	r3, [r7, #0]
 800f2b4:	2005      	movs	r0, #5
 800f2b6:	b007      	add	sp, #28
 800f2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2bc:	3501      	adds	r5, #1
 800f2be:	2d08      	cmp	r5, #8
 800f2c0:	f10b 0b01 	add.w	fp, fp, #1
 800f2c4:	dd06      	ble.n	800f2d4 <__hexnan+0x100>
 800f2c6:	4544      	cmp	r4, r8
 800f2c8:	d9c1      	bls.n	800f24e <__hexnan+0x7a>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2d0:	2501      	movs	r5, #1
 800f2d2:	3c04      	subs	r4, #4
 800f2d4:	6822      	ldr	r2, [r4, #0]
 800f2d6:	f000 000f 	and.w	r0, r0, #15
 800f2da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f2de:	6020      	str	r0, [r4, #0]
 800f2e0:	e7b5      	b.n	800f24e <__hexnan+0x7a>
 800f2e2:	2508      	movs	r5, #8
 800f2e4:	e7b3      	b.n	800f24e <__hexnan+0x7a>
 800f2e6:	9b01      	ldr	r3, [sp, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d0dd      	beq.n	800f2a8 <__hexnan+0xd4>
 800f2ec:	f1c3 0320 	rsb	r3, r3, #32
 800f2f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f2f4:	40da      	lsrs	r2, r3
 800f2f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f2fa:	4013      	ands	r3, r2
 800f2fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800f300:	e7d2      	b.n	800f2a8 <__hexnan+0xd4>
 800f302:	3f04      	subs	r7, #4
 800f304:	e7d0      	b.n	800f2a8 <__hexnan+0xd4>
 800f306:	2004      	movs	r0, #4
 800f308:	e7d5      	b.n	800f2b6 <__hexnan+0xe2>

0800f30a <__ssputs_r>:
 800f30a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f30e:	688e      	ldr	r6, [r1, #8]
 800f310:	461f      	mov	r7, r3
 800f312:	42be      	cmp	r6, r7
 800f314:	680b      	ldr	r3, [r1, #0]
 800f316:	4682      	mov	sl, r0
 800f318:	460c      	mov	r4, r1
 800f31a:	4690      	mov	r8, r2
 800f31c:	d82d      	bhi.n	800f37a <__ssputs_r+0x70>
 800f31e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f322:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f326:	d026      	beq.n	800f376 <__ssputs_r+0x6c>
 800f328:	6965      	ldr	r5, [r4, #20]
 800f32a:	6909      	ldr	r1, [r1, #16]
 800f32c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f330:	eba3 0901 	sub.w	r9, r3, r1
 800f334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f338:	1c7b      	adds	r3, r7, #1
 800f33a:	444b      	add	r3, r9
 800f33c:	106d      	asrs	r5, r5, #1
 800f33e:	429d      	cmp	r5, r3
 800f340:	bf38      	it	cc
 800f342:	461d      	movcc	r5, r3
 800f344:	0553      	lsls	r3, r2, #21
 800f346:	d527      	bpl.n	800f398 <__ssputs_r+0x8e>
 800f348:	4629      	mov	r1, r5
 800f34a:	f7fd fa2d 	bl	800c7a8 <_malloc_r>
 800f34e:	4606      	mov	r6, r0
 800f350:	b360      	cbz	r0, 800f3ac <__ssputs_r+0xa2>
 800f352:	6921      	ldr	r1, [r4, #16]
 800f354:	464a      	mov	r2, r9
 800f356:	f7fe fe58 	bl	800e00a <memcpy>
 800f35a:	89a3      	ldrh	r3, [r4, #12]
 800f35c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f364:	81a3      	strh	r3, [r4, #12]
 800f366:	6126      	str	r6, [r4, #16]
 800f368:	6165      	str	r5, [r4, #20]
 800f36a:	444e      	add	r6, r9
 800f36c:	eba5 0509 	sub.w	r5, r5, r9
 800f370:	6026      	str	r6, [r4, #0]
 800f372:	60a5      	str	r5, [r4, #8]
 800f374:	463e      	mov	r6, r7
 800f376:	42be      	cmp	r6, r7
 800f378:	d900      	bls.n	800f37c <__ssputs_r+0x72>
 800f37a:	463e      	mov	r6, r7
 800f37c:	6820      	ldr	r0, [r4, #0]
 800f37e:	4632      	mov	r2, r6
 800f380:	4641      	mov	r1, r8
 800f382:	f001 f8fa 	bl	801057a <memmove>
 800f386:	68a3      	ldr	r3, [r4, #8]
 800f388:	1b9b      	subs	r3, r3, r6
 800f38a:	60a3      	str	r3, [r4, #8]
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	4433      	add	r3, r6
 800f390:	6023      	str	r3, [r4, #0]
 800f392:	2000      	movs	r0, #0
 800f394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f398:	462a      	mov	r2, r5
 800f39a:	f000 ffbc 	bl	8010316 <_realloc_r>
 800f39e:	4606      	mov	r6, r0
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d1e0      	bne.n	800f366 <__ssputs_r+0x5c>
 800f3a4:	6921      	ldr	r1, [r4, #16]
 800f3a6:	4650      	mov	r0, sl
 800f3a8:	f7ff fc2c 	bl	800ec04 <_free_r>
 800f3ac:	230c      	movs	r3, #12
 800f3ae:	f8ca 3000 	str.w	r3, [sl]
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3b8:	81a3      	strh	r3, [r4, #12]
 800f3ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3be:	e7e9      	b.n	800f394 <__ssputs_r+0x8a>

0800f3c0 <_svfiprintf_r>:
 800f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c4:	4698      	mov	r8, r3
 800f3c6:	898b      	ldrh	r3, [r1, #12]
 800f3c8:	061b      	lsls	r3, r3, #24
 800f3ca:	b09d      	sub	sp, #116	@ 0x74
 800f3cc:	4607      	mov	r7, r0
 800f3ce:	460d      	mov	r5, r1
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	d510      	bpl.n	800f3f6 <_svfiprintf_r+0x36>
 800f3d4:	690b      	ldr	r3, [r1, #16]
 800f3d6:	b973      	cbnz	r3, 800f3f6 <_svfiprintf_r+0x36>
 800f3d8:	2140      	movs	r1, #64	@ 0x40
 800f3da:	f7fd f9e5 	bl	800c7a8 <_malloc_r>
 800f3de:	6028      	str	r0, [r5, #0]
 800f3e0:	6128      	str	r0, [r5, #16]
 800f3e2:	b930      	cbnz	r0, 800f3f2 <_svfiprintf_r+0x32>
 800f3e4:	230c      	movs	r3, #12
 800f3e6:	603b      	str	r3, [r7, #0]
 800f3e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3ec:	b01d      	add	sp, #116	@ 0x74
 800f3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f2:	2340      	movs	r3, #64	@ 0x40
 800f3f4:	616b      	str	r3, [r5, #20]
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3fa:	2320      	movs	r3, #32
 800f3fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f400:	f8cd 800c 	str.w	r8, [sp, #12]
 800f404:	2330      	movs	r3, #48	@ 0x30
 800f406:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f5a4 <_svfiprintf_r+0x1e4>
 800f40a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f40e:	f04f 0901 	mov.w	r9, #1
 800f412:	4623      	mov	r3, r4
 800f414:	469a      	mov	sl, r3
 800f416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f41a:	b10a      	cbz	r2, 800f420 <_svfiprintf_r+0x60>
 800f41c:	2a25      	cmp	r2, #37	@ 0x25
 800f41e:	d1f9      	bne.n	800f414 <_svfiprintf_r+0x54>
 800f420:	ebba 0b04 	subs.w	fp, sl, r4
 800f424:	d00b      	beq.n	800f43e <_svfiprintf_r+0x7e>
 800f426:	465b      	mov	r3, fp
 800f428:	4622      	mov	r2, r4
 800f42a:	4629      	mov	r1, r5
 800f42c:	4638      	mov	r0, r7
 800f42e:	f7ff ff6c 	bl	800f30a <__ssputs_r>
 800f432:	3001      	adds	r0, #1
 800f434:	f000 80a7 	beq.w	800f586 <_svfiprintf_r+0x1c6>
 800f438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f43a:	445a      	add	r2, fp
 800f43c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f43e:	f89a 3000 	ldrb.w	r3, [sl]
 800f442:	2b00      	cmp	r3, #0
 800f444:	f000 809f 	beq.w	800f586 <_svfiprintf_r+0x1c6>
 800f448:	2300      	movs	r3, #0
 800f44a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f44e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f452:	f10a 0a01 	add.w	sl, sl, #1
 800f456:	9304      	str	r3, [sp, #16]
 800f458:	9307      	str	r3, [sp, #28]
 800f45a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f45e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f460:	4654      	mov	r4, sl
 800f462:	2205      	movs	r2, #5
 800f464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f468:	484e      	ldr	r0, [pc, #312]	@ (800f5a4 <_svfiprintf_r+0x1e4>)
 800f46a:	f7f0 ff51 	bl	8000310 <memchr>
 800f46e:	9a04      	ldr	r2, [sp, #16]
 800f470:	b9d8      	cbnz	r0, 800f4aa <_svfiprintf_r+0xea>
 800f472:	06d0      	lsls	r0, r2, #27
 800f474:	bf44      	itt	mi
 800f476:	2320      	movmi	r3, #32
 800f478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f47c:	0711      	lsls	r1, r2, #28
 800f47e:	bf44      	itt	mi
 800f480:	232b      	movmi	r3, #43	@ 0x2b
 800f482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f486:	f89a 3000 	ldrb.w	r3, [sl]
 800f48a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f48c:	d015      	beq.n	800f4ba <_svfiprintf_r+0xfa>
 800f48e:	9a07      	ldr	r2, [sp, #28]
 800f490:	4654      	mov	r4, sl
 800f492:	2000      	movs	r0, #0
 800f494:	f04f 0c0a 	mov.w	ip, #10
 800f498:	4621      	mov	r1, r4
 800f49a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f49e:	3b30      	subs	r3, #48	@ 0x30
 800f4a0:	2b09      	cmp	r3, #9
 800f4a2:	d94b      	bls.n	800f53c <_svfiprintf_r+0x17c>
 800f4a4:	b1b0      	cbz	r0, 800f4d4 <_svfiprintf_r+0x114>
 800f4a6:	9207      	str	r2, [sp, #28]
 800f4a8:	e014      	b.n	800f4d4 <_svfiprintf_r+0x114>
 800f4aa:	eba0 0308 	sub.w	r3, r0, r8
 800f4ae:	fa09 f303 	lsl.w	r3, r9, r3
 800f4b2:	4313      	orrs	r3, r2
 800f4b4:	9304      	str	r3, [sp, #16]
 800f4b6:	46a2      	mov	sl, r4
 800f4b8:	e7d2      	b.n	800f460 <_svfiprintf_r+0xa0>
 800f4ba:	9b03      	ldr	r3, [sp, #12]
 800f4bc:	1d19      	adds	r1, r3, #4
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	9103      	str	r1, [sp, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	bfbb      	ittet	lt
 800f4c6:	425b      	neglt	r3, r3
 800f4c8:	f042 0202 	orrlt.w	r2, r2, #2
 800f4cc:	9307      	strge	r3, [sp, #28]
 800f4ce:	9307      	strlt	r3, [sp, #28]
 800f4d0:	bfb8      	it	lt
 800f4d2:	9204      	strlt	r2, [sp, #16]
 800f4d4:	7823      	ldrb	r3, [r4, #0]
 800f4d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4d8:	d10a      	bne.n	800f4f0 <_svfiprintf_r+0x130>
 800f4da:	7863      	ldrb	r3, [r4, #1]
 800f4dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4de:	d132      	bne.n	800f546 <_svfiprintf_r+0x186>
 800f4e0:	9b03      	ldr	r3, [sp, #12]
 800f4e2:	1d1a      	adds	r2, r3, #4
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	9203      	str	r2, [sp, #12]
 800f4e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4ec:	3402      	adds	r4, #2
 800f4ee:	9305      	str	r3, [sp, #20]
 800f4f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f5b4 <_svfiprintf_r+0x1f4>
 800f4f4:	7821      	ldrb	r1, [r4, #0]
 800f4f6:	2203      	movs	r2, #3
 800f4f8:	4650      	mov	r0, sl
 800f4fa:	f7f0 ff09 	bl	8000310 <memchr>
 800f4fe:	b138      	cbz	r0, 800f510 <_svfiprintf_r+0x150>
 800f500:	9b04      	ldr	r3, [sp, #16]
 800f502:	eba0 000a 	sub.w	r0, r0, sl
 800f506:	2240      	movs	r2, #64	@ 0x40
 800f508:	4082      	lsls	r2, r0
 800f50a:	4313      	orrs	r3, r2
 800f50c:	3401      	adds	r4, #1
 800f50e:	9304      	str	r3, [sp, #16]
 800f510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f514:	4824      	ldr	r0, [pc, #144]	@ (800f5a8 <_svfiprintf_r+0x1e8>)
 800f516:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f51a:	2206      	movs	r2, #6
 800f51c:	f7f0 fef8 	bl	8000310 <memchr>
 800f520:	2800      	cmp	r0, #0
 800f522:	d036      	beq.n	800f592 <_svfiprintf_r+0x1d2>
 800f524:	4b21      	ldr	r3, [pc, #132]	@ (800f5ac <_svfiprintf_r+0x1ec>)
 800f526:	bb1b      	cbnz	r3, 800f570 <_svfiprintf_r+0x1b0>
 800f528:	9b03      	ldr	r3, [sp, #12]
 800f52a:	3307      	adds	r3, #7
 800f52c:	f023 0307 	bic.w	r3, r3, #7
 800f530:	3308      	adds	r3, #8
 800f532:	9303      	str	r3, [sp, #12]
 800f534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f536:	4433      	add	r3, r6
 800f538:	9309      	str	r3, [sp, #36]	@ 0x24
 800f53a:	e76a      	b.n	800f412 <_svfiprintf_r+0x52>
 800f53c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f540:	460c      	mov	r4, r1
 800f542:	2001      	movs	r0, #1
 800f544:	e7a8      	b.n	800f498 <_svfiprintf_r+0xd8>
 800f546:	2300      	movs	r3, #0
 800f548:	3401      	adds	r4, #1
 800f54a:	9305      	str	r3, [sp, #20]
 800f54c:	4619      	mov	r1, r3
 800f54e:	f04f 0c0a 	mov.w	ip, #10
 800f552:	4620      	mov	r0, r4
 800f554:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f558:	3a30      	subs	r2, #48	@ 0x30
 800f55a:	2a09      	cmp	r2, #9
 800f55c:	d903      	bls.n	800f566 <_svfiprintf_r+0x1a6>
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d0c6      	beq.n	800f4f0 <_svfiprintf_r+0x130>
 800f562:	9105      	str	r1, [sp, #20]
 800f564:	e7c4      	b.n	800f4f0 <_svfiprintf_r+0x130>
 800f566:	fb0c 2101 	mla	r1, ip, r1, r2
 800f56a:	4604      	mov	r4, r0
 800f56c:	2301      	movs	r3, #1
 800f56e:	e7f0      	b.n	800f552 <_svfiprintf_r+0x192>
 800f570:	ab03      	add	r3, sp, #12
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	462a      	mov	r2, r5
 800f576:	4b0e      	ldr	r3, [pc, #56]	@ (800f5b0 <_svfiprintf_r+0x1f0>)
 800f578:	a904      	add	r1, sp, #16
 800f57a:	4638      	mov	r0, r7
 800f57c:	f7fc fed0 	bl	800c320 <_printf_float>
 800f580:	1c42      	adds	r2, r0, #1
 800f582:	4606      	mov	r6, r0
 800f584:	d1d6      	bne.n	800f534 <_svfiprintf_r+0x174>
 800f586:	89ab      	ldrh	r3, [r5, #12]
 800f588:	065b      	lsls	r3, r3, #25
 800f58a:	f53f af2d 	bmi.w	800f3e8 <_svfiprintf_r+0x28>
 800f58e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f590:	e72c      	b.n	800f3ec <_svfiprintf_r+0x2c>
 800f592:	ab03      	add	r3, sp, #12
 800f594:	9300      	str	r3, [sp, #0]
 800f596:	462a      	mov	r2, r5
 800f598:	4b05      	ldr	r3, [pc, #20]	@ (800f5b0 <_svfiprintf_r+0x1f0>)
 800f59a:	a904      	add	r1, sp, #16
 800f59c:	4638      	mov	r0, r7
 800f59e:	f7fd f9f1 	bl	800c984 <_printf_i>
 800f5a2:	e7ed      	b.n	800f580 <_svfiprintf_r+0x1c0>
 800f5a4:	08010a96 	.word	0x08010a96
 800f5a8:	08010aa0 	.word	0x08010aa0
 800f5ac:	0800c321 	.word	0x0800c321
 800f5b0:	0800f30b 	.word	0x0800f30b
 800f5b4:	08010a9c 	.word	0x08010a9c

0800f5b8 <__sfputc_r>:
 800f5b8:	6893      	ldr	r3, [r2, #8]
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	b410      	push	{r4}
 800f5c0:	6093      	str	r3, [r2, #8]
 800f5c2:	da08      	bge.n	800f5d6 <__sfputc_r+0x1e>
 800f5c4:	6994      	ldr	r4, [r2, #24]
 800f5c6:	42a3      	cmp	r3, r4
 800f5c8:	db01      	blt.n	800f5ce <__sfputc_r+0x16>
 800f5ca:	290a      	cmp	r1, #10
 800f5cc:	d103      	bne.n	800f5d6 <__sfputc_r+0x1e>
 800f5ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5d2:	f000 bece 	b.w	8010372 <__swbuf_r>
 800f5d6:	6813      	ldr	r3, [r2, #0]
 800f5d8:	1c58      	adds	r0, r3, #1
 800f5da:	6010      	str	r0, [r2, #0]
 800f5dc:	7019      	strb	r1, [r3, #0]
 800f5de:	4608      	mov	r0, r1
 800f5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5e4:	4770      	bx	lr

0800f5e6 <__sfputs_r>:
 800f5e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e8:	4606      	mov	r6, r0
 800f5ea:	460f      	mov	r7, r1
 800f5ec:	4614      	mov	r4, r2
 800f5ee:	18d5      	adds	r5, r2, r3
 800f5f0:	42ac      	cmp	r4, r5
 800f5f2:	d101      	bne.n	800f5f8 <__sfputs_r+0x12>
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	e007      	b.n	800f608 <__sfputs_r+0x22>
 800f5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5fc:	463a      	mov	r2, r7
 800f5fe:	4630      	mov	r0, r6
 800f600:	f7ff ffda 	bl	800f5b8 <__sfputc_r>
 800f604:	1c43      	adds	r3, r0, #1
 800f606:	d1f3      	bne.n	800f5f0 <__sfputs_r+0xa>
 800f608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f60c <_vfiprintf_r>:
 800f60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f610:	460d      	mov	r5, r1
 800f612:	b09d      	sub	sp, #116	@ 0x74
 800f614:	4614      	mov	r4, r2
 800f616:	4698      	mov	r8, r3
 800f618:	4606      	mov	r6, r0
 800f61a:	b118      	cbz	r0, 800f624 <_vfiprintf_r+0x18>
 800f61c:	6a03      	ldr	r3, [r0, #32]
 800f61e:	b90b      	cbnz	r3, 800f624 <_vfiprintf_r+0x18>
 800f620:	f7fd fdd8 	bl	800d1d4 <__sinit>
 800f624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f626:	07d9      	lsls	r1, r3, #31
 800f628:	d405      	bmi.n	800f636 <_vfiprintf_r+0x2a>
 800f62a:	89ab      	ldrh	r3, [r5, #12]
 800f62c:	059a      	lsls	r2, r3, #22
 800f62e:	d402      	bmi.n	800f636 <_vfiprintf_r+0x2a>
 800f630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f632:	f7fe fce8 	bl	800e006 <__retarget_lock_acquire_recursive>
 800f636:	89ab      	ldrh	r3, [r5, #12]
 800f638:	071b      	lsls	r3, r3, #28
 800f63a:	d501      	bpl.n	800f640 <_vfiprintf_r+0x34>
 800f63c:	692b      	ldr	r3, [r5, #16]
 800f63e:	b99b      	cbnz	r3, 800f668 <_vfiprintf_r+0x5c>
 800f640:	4629      	mov	r1, r5
 800f642:	4630      	mov	r0, r6
 800f644:	f000 fed4 	bl	80103f0 <__swsetup_r>
 800f648:	b170      	cbz	r0, 800f668 <_vfiprintf_r+0x5c>
 800f64a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f64c:	07dc      	lsls	r4, r3, #31
 800f64e:	d504      	bpl.n	800f65a <_vfiprintf_r+0x4e>
 800f650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f654:	b01d      	add	sp, #116	@ 0x74
 800f656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65a:	89ab      	ldrh	r3, [r5, #12]
 800f65c:	0598      	lsls	r0, r3, #22
 800f65e:	d4f7      	bmi.n	800f650 <_vfiprintf_r+0x44>
 800f660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f662:	f7fe fcd1 	bl	800e008 <__retarget_lock_release_recursive>
 800f666:	e7f3      	b.n	800f650 <_vfiprintf_r+0x44>
 800f668:	2300      	movs	r3, #0
 800f66a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f66c:	2320      	movs	r3, #32
 800f66e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f672:	f8cd 800c 	str.w	r8, [sp, #12]
 800f676:	2330      	movs	r3, #48	@ 0x30
 800f678:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f828 <_vfiprintf_r+0x21c>
 800f67c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f680:	f04f 0901 	mov.w	r9, #1
 800f684:	4623      	mov	r3, r4
 800f686:	469a      	mov	sl, r3
 800f688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f68c:	b10a      	cbz	r2, 800f692 <_vfiprintf_r+0x86>
 800f68e:	2a25      	cmp	r2, #37	@ 0x25
 800f690:	d1f9      	bne.n	800f686 <_vfiprintf_r+0x7a>
 800f692:	ebba 0b04 	subs.w	fp, sl, r4
 800f696:	d00b      	beq.n	800f6b0 <_vfiprintf_r+0xa4>
 800f698:	465b      	mov	r3, fp
 800f69a:	4622      	mov	r2, r4
 800f69c:	4629      	mov	r1, r5
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f7ff ffa1 	bl	800f5e6 <__sfputs_r>
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	f000 80a7 	beq.w	800f7f8 <_vfiprintf_r+0x1ec>
 800f6aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6ac:	445a      	add	r2, fp
 800f6ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f000 809f 	beq.w	800f7f8 <_vfiprintf_r+0x1ec>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6c4:	f10a 0a01 	add.w	sl, sl, #1
 800f6c8:	9304      	str	r3, [sp, #16]
 800f6ca:	9307      	str	r3, [sp, #28]
 800f6cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6d2:	4654      	mov	r4, sl
 800f6d4:	2205      	movs	r2, #5
 800f6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6da:	4853      	ldr	r0, [pc, #332]	@ (800f828 <_vfiprintf_r+0x21c>)
 800f6dc:	f7f0 fe18 	bl	8000310 <memchr>
 800f6e0:	9a04      	ldr	r2, [sp, #16]
 800f6e2:	b9d8      	cbnz	r0, 800f71c <_vfiprintf_r+0x110>
 800f6e4:	06d1      	lsls	r1, r2, #27
 800f6e6:	bf44      	itt	mi
 800f6e8:	2320      	movmi	r3, #32
 800f6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6ee:	0713      	lsls	r3, r2, #28
 800f6f0:	bf44      	itt	mi
 800f6f2:	232b      	movmi	r3, #43	@ 0x2b
 800f6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6fe:	d015      	beq.n	800f72c <_vfiprintf_r+0x120>
 800f700:	9a07      	ldr	r2, [sp, #28]
 800f702:	4654      	mov	r4, sl
 800f704:	2000      	movs	r0, #0
 800f706:	f04f 0c0a 	mov.w	ip, #10
 800f70a:	4621      	mov	r1, r4
 800f70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f710:	3b30      	subs	r3, #48	@ 0x30
 800f712:	2b09      	cmp	r3, #9
 800f714:	d94b      	bls.n	800f7ae <_vfiprintf_r+0x1a2>
 800f716:	b1b0      	cbz	r0, 800f746 <_vfiprintf_r+0x13a>
 800f718:	9207      	str	r2, [sp, #28]
 800f71a:	e014      	b.n	800f746 <_vfiprintf_r+0x13a>
 800f71c:	eba0 0308 	sub.w	r3, r0, r8
 800f720:	fa09 f303 	lsl.w	r3, r9, r3
 800f724:	4313      	orrs	r3, r2
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	46a2      	mov	sl, r4
 800f72a:	e7d2      	b.n	800f6d2 <_vfiprintf_r+0xc6>
 800f72c:	9b03      	ldr	r3, [sp, #12]
 800f72e:	1d19      	adds	r1, r3, #4
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	9103      	str	r1, [sp, #12]
 800f734:	2b00      	cmp	r3, #0
 800f736:	bfbb      	ittet	lt
 800f738:	425b      	neglt	r3, r3
 800f73a:	f042 0202 	orrlt.w	r2, r2, #2
 800f73e:	9307      	strge	r3, [sp, #28]
 800f740:	9307      	strlt	r3, [sp, #28]
 800f742:	bfb8      	it	lt
 800f744:	9204      	strlt	r2, [sp, #16]
 800f746:	7823      	ldrb	r3, [r4, #0]
 800f748:	2b2e      	cmp	r3, #46	@ 0x2e
 800f74a:	d10a      	bne.n	800f762 <_vfiprintf_r+0x156>
 800f74c:	7863      	ldrb	r3, [r4, #1]
 800f74e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f750:	d132      	bne.n	800f7b8 <_vfiprintf_r+0x1ac>
 800f752:	9b03      	ldr	r3, [sp, #12]
 800f754:	1d1a      	adds	r2, r3, #4
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	9203      	str	r2, [sp, #12]
 800f75a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f75e:	3402      	adds	r4, #2
 800f760:	9305      	str	r3, [sp, #20]
 800f762:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f838 <_vfiprintf_r+0x22c>
 800f766:	7821      	ldrb	r1, [r4, #0]
 800f768:	2203      	movs	r2, #3
 800f76a:	4650      	mov	r0, sl
 800f76c:	f7f0 fdd0 	bl	8000310 <memchr>
 800f770:	b138      	cbz	r0, 800f782 <_vfiprintf_r+0x176>
 800f772:	9b04      	ldr	r3, [sp, #16]
 800f774:	eba0 000a 	sub.w	r0, r0, sl
 800f778:	2240      	movs	r2, #64	@ 0x40
 800f77a:	4082      	lsls	r2, r0
 800f77c:	4313      	orrs	r3, r2
 800f77e:	3401      	adds	r4, #1
 800f780:	9304      	str	r3, [sp, #16]
 800f782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f786:	4829      	ldr	r0, [pc, #164]	@ (800f82c <_vfiprintf_r+0x220>)
 800f788:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f78c:	2206      	movs	r2, #6
 800f78e:	f7f0 fdbf 	bl	8000310 <memchr>
 800f792:	2800      	cmp	r0, #0
 800f794:	d03f      	beq.n	800f816 <_vfiprintf_r+0x20a>
 800f796:	4b26      	ldr	r3, [pc, #152]	@ (800f830 <_vfiprintf_r+0x224>)
 800f798:	bb1b      	cbnz	r3, 800f7e2 <_vfiprintf_r+0x1d6>
 800f79a:	9b03      	ldr	r3, [sp, #12]
 800f79c:	3307      	adds	r3, #7
 800f79e:	f023 0307 	bic.w	r3, r3, #7
 800f7a2:	3308      	adds	r3, #8
 800f7a4:	9303      	str	r3, [sp, #12]
 800f7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7a8:	443b      	add	r3, r7
 800f7aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7ac:	e76a      	b.n	800f684 <_vfiprintf_r+0x78>
 800f7ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	2001      	movs	r0, #1
 800f7b6:	e7a8      	b.n	800f70a <_vfiprintf_r+0xfe>
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	3401      	adds	r4, #1
 800f7bc:	9305      	str	r3, [sp, #20]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	f04f 0c0a 	mov.w	ip, #10
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7ca:	3a30      	subs	r2, #48	@ 0x30
 800f7cc:	2a09      	cmp	r2, #9
 800f7ce:	d903      	bls.n	800f7d8 <_vfiprintf_r+0x1cc>
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d0c6      	beq.n	800f762 <_vfiprintf_r+0x156>
 800f7d4:	9105      	str	r1, [sp, #20]
 800f7d6:	e7c4      	b.n	800f762 <_vfiprintf_r+0x156>
 800f7d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7dc:	4604      	mov	r4, r0
 800f7de:	2301      	movs	r3, #1
 800f7e0:	e7f0      	b.n	800f7c4 <_vfiprintf_r+0x1b8>
 800f7e2:	ab03      	add	r3, sp, #12
 800f7e4:	9300      	str	r3, [sp, #0]
 800f7e6:	462a      	mov	r2, r5
 800f7e8:	4b12      	ldr	r3, [pc, #72]	@ (800f834 <_vfiprintf_r+0x228>)
 800f7ea:	a904      	add	r1, sp, #16
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	f7fc fd97 	bl	800c320 <_printf_float>
 800f7f2:	4607      	mov	r7, r0
 800f7f4:	1c78      	adds	r0, r7, #1
 800f7f6:	d1d6      	bne.n	800f7a6 <_vfiprintf_r+0x19a>
 800f7f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7fa:	07d9      	lsls	r1, r3, #31
 800f7fc:	d405      	bmi.n	800f80a <_vfiprintf_r+0x1fe>
 800f7fe:	89ab      	ldrh	r3, [r5, #12]
 800f800:	059a      	lsls	r2, r3, #22
 800f802:	d402      	bmi.n	800f80a <_vfiprintf_r+0x1fe>
 800f804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f806:	f7fe fbff 	bl	800e008 <__retarget_lock_release_recursive>
 800f80a:	89ab      	ldrh	r3, [r5, #12]
 800f80c:	065b      	lsls	r3, r3, #25
 800f80e:	f53f af1f 	bmi.w	800f650 <_vfiprintf_r+0x44>
 800f812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f814:	e71e      	b.n	800f654 <_vfiprintf_r+0x48>
 800f816:	ab03      	add	r3, sp, #12
 800f818:	9300      	str	r3, [sp, #0]
 800f81a:	462a      	mov	r2, r5
 800f81c:	4b05      	ldr	r3, [pc, #20]	@ (800f834 <_vfiprintf_r+0x228>)
 800f81e:	a904      	add	r1, sp, #16
 800f820:	4630      	mov	r0, r6
 800f822:	f7fd f8af 	bl	800c984 <_printf_i>
 800f826:	e7e4      	b.n	800f7f2 <_vfiprintf_r+0x1e6>
 800f828:	08010a96 	.word	0x08010a96
 800f82c:	08010aa0 	.word	0x08010aa0
 800f830:	0800c321 	.word	0x0800c321
 800f834:	0800f5e7 	.word	0x0800f5e7
 800f838:	08010a9c 	.word	0x08010a9c

0800f83c <__ascii_mbtowc>:
 800f83c:	b082      	sub	sp, #8
 800f83e:	b901      	cbnz	r1, 800f842 <__ascii_mbtowc+0x6>
 800f840:	a901      	add	r1, sp, #4
 800f842:	b142      	cbz	r2, 800f856 <__ascii_mbtowc+0x1a>
 800f844:	b14b      	cbz	r3, 800f85a <__ascii_mbtowc+0x1e>
 800f846:	7813      	ldrb	r3, [r2, #0]
 800f848:	600b      	str	r3, [r1, #0]
 800f84a:	7812      	ldrb	r2, [r2, #0]
 800f84c:	1e10      	subs	r0, r2, #0
 800f84e:	bf18      	it	ne
 800f850:	2001      	movne	r0, #1
 800f852:	b002      	add	sp, #8
 800f854:	4770      	bx	lr
 800f856:	4610      	mov	r0, r2
 800f858:	e7fb      	b.n	800f852 <__ascii_mbtowc+0x16>
 800f85a:	f06f 0001 	mvn.w	r0, #1
 800f85e:	e7f8      	b.n	800f852 <__ascii_mbtowc+0x16>

0800f860 <__sflush_r>:
 800f860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f868:	0716      	lsls	r6, r2, #28
 800f86a:	4605      	mov	r5, r0
 800f86c:	460c      	mov	r4, r1
 800f86e:	d454      	bmi.n	800f91a <__sflush_r+0xba>
 800f870:	684b      	ldr	r3, [r1, #4]
 800f872:	2b00      	cmp	r3, #0
 800f874:	dc02      	bgt.n	800f87c <__sflush_r+0x1c>
 800f876:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f878:	2b00      	cmp	r3, #0
 800f87a:	dd48      	ble.n	800f90e <__sflush_r+0xae>
 800f87c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f87e:	2e00      	cmp	r6, #0
 800f880:	d045      	beq.n	800f90e <__sflush_r+0xae>
 800f882:	2300      	movs	r3, #0
 800f884:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f888:	682f      	ldr	r7, [r5, #0]
 800f88a:	6a21      	ldr	r1, [r4, #32]
 800f88c:	602b      	str	r3, [r5, #0]
 800f88e:	d030      	beq.n	800f8f2 <__sflush_r+0x92>
 800f890:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f892:	89a3      	ldrh	r3, [r4, #12]
 800f894:	0759      	lsls	r1, r3, #29
 800f896:	d505      	bpl.n	800f8a4 <__sflush_r+0x44>
 800f898:	6863      	ldr	r3, [r4, #4]
 800f89a:	1ad2      	subs	r2, r2, r3
 800f89c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f89e:	b10b      	cbz	r3, 800f8a4 <__sflush_r+0x44>
 800f8a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f8a2:	1ad2      	subs	r2, r2, r3
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f8a8:	6a21      	ldr	r1, [r4, #32]
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	47b0      	blx	r6
 800f8ae:	1c43      	adds	r3, r0, #1
 800f8b0:	89a3      	ldrh	r3, [r4, #12]
 800f8b2:	d106      	bne.n	800f8c2 <__sflush_r+0x62>
 800f8b4:	6829      	ldr	r1, [r5, #0]
 800f8b6:	291d      	cmp	r1, #29
 800f8b8:	d82b      	bhi.n	800f912 <__sflush_r+0xb2>
 800f8ba:	4a2a      	ldr	r2, [pc, #168]	@ (800f964 <__sflush_r+0x104>)
 800f8bc:	410a      	asrs	r2, r1
 800f8be:	07d6      	lsls	r6, r2, #31
 800f8c0:	d427      	bmi.n	800f912 <__sflush_r+0xb2>
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	6062      	str	r2, [r4, #4]
 800f8c6:	04d9      	lsls	r1, r3, #19
 800f8c8:	6922      	ldr	r2, [r4, #16]
 800f8ca:	6022      	str	r2, [r4, #0]
 800f8cc:	d504      	bpl.n	800f8d8 <__sflush_r+0x78>
 800f8ce:	1c42      	adds	r2, r0, #1
 800f8d0:	d101      	bne.n	800f8d6 <__sflush_r+0x76>
 800f8d2:	682b      	ldr	r3, [r5, #0]
 800f8d4:	b903      	cbnz	r3, 800f8d8 <__sflush_r+0x78>
 800f8d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8da:	602f      	str	r7, [r5, #0]
 800f8dc:	b1b9      	cbz	r1, 800f90e <__sflush_r+0xae>
 800f8de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8e2:	4299      	cmp	r1, r3
 800f8e4:	d002      	beq.n	800f8ec <__sflush_r+0x8c>
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	f7ff f98c 	bl	800ec04 <_free_r>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8f0:	e00d      	b.n	800f90e <__sflush_r+0xae>
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	47b0      	blx	r6
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	1c50      	adds	r0, r2, #1
 800f8fc:	d1c9      	bne.n	800f892 <__sflush_r+0x32>
 800f8fe:	682b      	ldr	r3, [r5, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d0c6      	beq.n	800f892 <__sflush_r+0x32>
 800f904:	2b1d      	cmp	r3, #29
 800f906:	d001      	beq.n	800f90c <__sflush_r+0xac>
 800f908:	2b16      	cmp	r3, #22
 800f90a:	d11e      	bne.n	800f94a <__sflush_r+0xea>
 800f90c:	602f      	str	r7, [r5, #0]
 800f90e:	2000      	movs	r0, #0
 800f910:	e022      	b.n	800f958 <__sflush_r+0xf8>
 800f912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f916:	b21b      	sxth	r3, r3
 800f918:	e01b      	b.n	800f952 <__sflush_r+0xf2>
 800f91a:	690f      	ldr	r7, [r1, #16]
 800f91c:	2f00      	cmp	r7, #0
 800f91e:	d0f6      	beq.n	800f90e <__sflush_r+0xae>
 800f920:	0793      	lsls	r3, r2, #30
 800f922:	680e      	ldr	r6, [r1, #0]
 800f924:	bf08      	it	eq
 800f926:	694b      	ldreq	r3, [r1, #20]
 800f928:	600f      	str	r7, [r1, #0]
 800f92a:	bf18      	it	ne
 800f92c:	2300      	movne	r3, #0
 800f92e:	eba6 0807 	sub.w	r8, r6, r7
 800f932:	608b      	str	r3, [r1, #8]
 800f934:	f1b8 0f00 	cmp.w	r8, #0
 800f938:	dde9      	ble.n	800f90e <__sflush_r+0xae>
 800f93a:	6a21      	ldr	r1, [r4, #32]
 800f93c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f93e:	4643      	mov	r3, r8
 800f940:	463a      	mov	r2, r7
 800f942:	4628      	mov	r0, r5
 800f944:	47b0      	blx	r6
 800f946:	2800      	cmp	r0, #0
 800f948:	dc08      	bgt.n	800f95c <__sflush_r+0xfc>
 800f94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f94e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f952:	81a3      	strh	r3, [r4, #12]
 800f954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f95c:	4407      	add	r7, r0
 800f95e:	eba8 0800 	sub.w	r8, r8, r0
 800f962:	e7e7      	b.n	800f934 <__sflush_r+0xd4>
 800f964:	dfbffffe 	.word	0xdfbffffe

0800f968 <_fflush_r>:
 800f968:	b538      	push	{r3, r4, r5, lr}
 800f96a:	690b      	ldr	r3, [r1, #16]
 800f96c:	4605      	mov	r5, r0
 800f96e:	460c      	mov	r4, r1
 800f970:	b913      	cbnz	r3, 800f978 <_fflush_r+0x10>
 800f972:	2500      	movs	r5, #0
 800f974:	4628      	mov	r0, r5
 800f976:	bd38      	pop	{r3, r4, r5, pc}
 800f978:	b118      	cbz	r0, 800f982 <_fflush_r+0x1a>
 800f97a:	6a03      	ldr	r3, [r0, #32]
 800f97c:	b90b      	cbnz	r3, 800f982 <_fflush_r+0x1a>
 800f97e:	f7fd fc29 	bl	800d1d4 <__sinit>
 800f982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d0f3      	beq.n	800f972 <_fflush_r+0xa>
 800f98a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f98c:	07d0      	lsls	r0, r2, #31
 800f98e:	d404      	bmi.n	800f99a <_fflush_r+0x32>
 800f990:	0599      	lsls	r1, r3, #22
 800f992:	d402      	bmi.n	800f99a <_fflush_r+0x32>
 800f994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f996:	f7fe fb36 	bl	800e006 <__retarget_lock_acquire_recursive>
 800f99a:	4628      	mov	r0, r5
 800f99c:	4621      	mov	r1, r4
 800f99e:	f7ff ff5f 	bl	800f860 <__sflush_r>
 800f9a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f9a4:	07da      	lsls	r2, r3, #31
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	d4e4      	bmi.n	800f974 <_fflush_r+0xc>
 800f9aa:	89a3      	ldrh	r3, [r4, #12]
 800f9ac:	059b      	lsls	r3, r3, #22
 800f9ae:	d4e1      	bmi.n	800f974 <_fflush_r+0xc>
 800f9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9b2:	f7fe fb29 	bl	800e008 <__retarget_lock_release_recursive>
 800f9b6:	e7dd      	b.n	800f974 <_fflush_r+0xc>

0800f9b8 <_Balloc>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	69c6      	ldr	r6, [r0, #28]
 800f9bc:	4604      	mov	r4, r0
 800f9be:	460d      	mov	r5, r1
 800f9c0:	b976      	cbnz	r6, 800f9e0 <_Balloc+0x28>
 800f9c2:	2010      	movs	r0, #16
 800f9c4:	f7fc fec6 	bl	800c754 <malloc>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	61e0      	str	r0, [r4, #28]
 800f9cc:	b920      	cbnz	r0, 800f9d8 <_Balloc+0x20>
 800f9ce:	4b18      	ldr	r3, [pc, #96]	@ (800fa30 <_Balloc+0x78>)
 800f9d0:	4818      	ldr	r0, [pc, #96]	@ (800fa34 <_Balloc+0x7c>)
 800f9d2:	216b      	movs	r1, #107	@ 0x6b
 800f9d4:	f000 fe0e 	bl	80105f4 <__assert_func>
 800f9d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9dc:	6006      	str	r6, [r0, #0]
 800f9de:	60c6      	str	r6, [r0, #12]
 800f9e0:	69e6      	ldr	r6, [r4, #28]
 800f9e2:	68f3      	ldr	r3, [r6, #12]
 800f9e4:	b183      	cbz	r3, 800fa08 <_Balloc+0x50>
 800f9e6:	69e3      	ldr	r3, [r4, #28]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f9ee:	b9b8      	cbnz	r0, 800fa20 <_Balloc+0x68>
 800f9f0:	2101      	movs	r1, #1
 800f9f2:	fa01 f605 	lsl.w	r6, r1, r5
 800f9f6:	1d72      	adds	r2, r6, #5
 800f9f8:	0092      	lsls	r2, r2, #2
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f000 fe18 	bl	8010630 <_calloc_r>
 800fa00:	b160      	cbz	r0, 800fa1c <_Balloc+0x64>
 800fa02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fa06:	e00e      	b.n	800fa26 <_Balloc+0x6e>
 800fa08:	2221      	movs	r2, #33	@ 0x21
 800fa0a:	2104      	movs	r1, #4
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f000 fe0f 	bl	8010630 <_calloc_r>
 800fa12:	69e3      	ldr	r3, [r4, #28]
 800fa14:	60f0      	str	r0, [r6, #12]
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1e4      	bne.n	800f9e6 <_Balloc+0x2e>
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}
 800fa20:	6802      	ldr	r2, [r0, #0]
 800fa22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa26:	2300      	movs	r3, #0
 800fa28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa2c:	e7f7      	b.n	800fa1e <_Balloc+0x66>
 800fa2e:	bf00      	nop
 800fa30:	080109b6 	.word	0x080109b6
 800fa34:	08010aa7 	.word	0x08010aa7

0800fa38 <_Bfree>:
 800fa38:	b570      	push	{r4, r5, r6, lr}
 800fa3a:	69c6      	ldr	r6, [r0, #28]
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	460c      	mov	r4, r1
 800fa40:	b976      	cbnz	r6, 800fa60 <_Bfree+0x28>
 800fa42:	2010      	movs	r0, #16
 800fa44:	f7fc fe86 	bl	800c754 <malloc>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	61e8      	str	r0, [r5, #28]
 800fa4c:	b920      	cbnz	r0, 800fa58 <_Bfree+0x20>
 800fa4e:	4b09      	ldr	r3, [pc, #36]	@ (800fa74 <_Bfree+0x3c>)
 800fa50:	4809      	ldr	r0, [pc, #36]	@ (800fa78 <_Bfree+0x40>)
 800fa52:	218f      	movs	r1, #143	@ 0x8f
 800fa54:	f000 fdce 	bl	80105f4 <__assert_func>
 800fa58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa5c:	6006      	str	r6, [r0, #0]
 800fa5e:	60c6      	str	r6, [r0, #12]
 800fa60:	b13c      	cbz	r4, 800fa72 <_Bfree+0x3a>
 800fa62:	69eb      	ldr	r3, [r5, #28]
 800fa64:	6862      	ldr	r2, [r4, #4]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa6c:	6021      	str	r1, [r4, #0]
 800fa6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fa72:	bd70      	pop	{r4, r5, r6, pc}
 800fa74:	080109b6 	.word	0x080109b6
 800fa78:	08010aa7 	.word	0x08010aa7

0800fa7c <__multadd>:
 800fa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa80:	690d      	ldr	r5, [r1, #16]
 800fa82:	4607      	mov	r7, r0
 800fa84:	460c      	mov	r4, r1
 800fa86:	461e      	mov	r6, r3
 800fa88:	f101 0c14 	add.w	ip, r1, #20
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	f8dc 3000 	ldr.w	r3, [ip]
 800fa92:	b299      	uxth	r1, r3
 800fa94:	fb02 6101 	mla	r1, r2, r1, r6
 800fa98:	0c1e      	lsrs	r6, r3, #16
 800fa9a:	0c0b      	lsrs	r3, r1, #16
 800fa9c:	fb02 3306 	mla	r3, r2, r6, r3
 800faa0:	b289      	uxth	r1, r1
 800faa2:	3001      	adds	r0, #1
 800faa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800faa8:	4285      	cmp	r5, r0
 800faaa:	f84c 1b04 	str.w	r1, [ip], #4
 800faae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fab2:	dcec      	bgt.n	800fa8e <__multadd+0x12>
 800fab4:	b30e      	cbz	r6, 800fafa <__multadd+0x7e>
 800fab6:	68a3      	ldr	r3, [r4, #8]
 800fab8:	42ab      	cmp	r3, r5
 800faba:	dc19      	bgt.n	800faf0 <__multadd+0x74>
 800fabc:	6861      	ldr	r1, [r4, #4]
 800fabe:	4638      	mov	r0, r7
 800fac0:	3101      	adds	r1, #1
 800fac2:	f7ff ff79 	bl	800f9b8 <_Balloc>
 800fac6:	4680      	mov	r8, r0
 800fac8:	b928      	cbnz	r0, 800fad6 <__multadd+0x5a>
 800faca:	4602      	mov	r2, r0
 800facc:	4b0c      	ldr	r3, [pc, #48]	@ (800fb00 <__multadd+0x84>)
 800face:	480d      	ldr	r0, [pc, #52]	@ (800fb04 <__multadd+0x88>)
 800fad0:	21ba      	movs	r1, #186	@ 0xba
 800fad2:	f000 fd8f 	bl	80105f4 <__assert_func>
 800fad6:	6922      	ldr	r2, [r4, #16]
 800fad8:	3202      	adds	r2, #2
 800fada:	f104 010c 	add.w	r1, r4, #12
 800fade:	0092      	lsls	r2, r2, #2
 800fae0:	300c      	adds	r0, #12
 800fae2:	f7fe fa92 	bl	800e00a <memcpy>
 800fae6:	4621      	mov	r1, r4
 800fae8:	4638      	mov	r0, r7
 800faea:	f7ff ffa5 	bl	800fa38 <_Bfree>
 800faee:	4644      	mov	r4, r8
 800faf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800faf4:	3501      	adds	r5, #1
 800faf6:	615e      	str	r6, [r3, #20]
 800faf8:	6125      	str	r5, [r4, #16]
 800fafa:	4620      	mov	r0, r4
 800fafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb00:	08010a25 	.word	0x08010a25
 800fb04:	08010aa7 	.word	0x08010aa7

0800fb08 <__s2b>:
 800fb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb0c:	460c      	mov	r4, r1
 800fb0e:	4615      	mov	r5, r2
 800fb10:	461f      	mov	r7, r3
 800fb12:	2209      	movs	r2, #9
 800fb14:	3308      	adds	r3, #8
 800fb16:	4606      	mov	r6, r0
 800fb18:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	2201      	movs	r2, #1
 800fb20:	429a      	cmp	r2, r3
 800fb22:	db09      	blt.n	800fb38 <__s2b+0x30>
 800fb24:	4630      	mov	r0, r6
 800fb26:	f7ff ff47 	bl	800f9b8 <_Balloc>
 800fb2a:	b940      	cbnz	r0, 800fb3e <__s2b+0x36>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	4b19      	ldr	r3, [pc, #100]	@ (800fb94 <__s2b+0x8c>)
 800fb30:	4819      	ldr	r0, [pc, #100]	@ (800fb98 <__s2b+0x90>)
 800fb32:	21d3      	movs	r1, #211	@ 0xd3
 800fb34:	f000 fd5e 	bl	80105f4 <__assert_func>
 800fb38:	0052      	lsls	r2, r2, #1
 800fb3a:	3101      	adds	r1, #1
 800fb3c:	e7f0      	b.n	800fb20 <__s2b+0x18>
 800fb3e:	9b08      	ldr	r3, [sp, #32]
 800fb40:	6143      	str	r3, [r0, #20]
 800fb42:	2d09      	cmp	r5, #9
 800fb44:	f04f 0301 	mov.w	r3, #1
 800fb48:	6103      	str	r3, [r0, #16]
 800fb4a:	dd16      	ble.n	800fb7a <__s2b+0x72>
 800fb4c:	f104 0909 	add.w	r9, r4, #9
 800fb50:	46c8      	mov	r8, r9
 800fb52:	442c      	add	r4, r5
 800fb54:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fb58:	4601      	mov	r1, r0
 800fb5a:	3b30      	subs	r3, #48	@ 0x30
 800fb5c:	220a      	movs	r2, #10
 800fb5e:	4630      	mov	r0, r6
 800fb60:	f7ff ff8c 	bl	800fa7c <__multadd>
 800fb64:	45a0      	cmp	r8, r4
 800fb66:	d1f5      	bne.n	800fb54 <__s2b+0x4c>
 800fb68:	f1a5 0408 	sub.w	r4, r5, #8
 800fb6c:	444c      	add	r4, r9
 800fb6e:	1b2d      	subs	r5, r5, r4
 800fb70:	1963      	adds	r3, r4, r5
 800fb72:	42bb      	cmp	r3, r7
 800fb74:	db04      	blt.n	800fb80 <__s2b+0x78>
 800fb76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb7a:	340a      	adds	r4, #10
 800fb7c:	2509      	movs	r5, #9
 800fb7e:	e7f6      	b.n	800fb6e <__s2b+0x66>
 800fb80:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb84:	4601      	mov	r1, r0
 800fb86:	3b30      	subs	r3, #48	@ 0x30
 800fb88:	220a      	movs	r2, #10
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	f7ff ff76 	bl	800fa7c <__multadd>
 800fb90:	e7ee      	b.n	800fb70 <__s2b+0x68>
 800fb92:	bf00      	nop
 800fb94:	08010a25 	.word	0x08010a25
 800fb98:	08010aa7 	.word	0x08010aa7

0800fb9c <__hi0bits>:
 800fb9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fba0:	4603      	mov	r3, r0
 800fba2:	bf36      	itet	cc
 800fba4:	0403      	lslcc	r3, r0, #16
 800fba6:	2000      	movcs	r0, #0
 800fba8:	2010      	movcc	r0, #16
 800fbaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fbae:	bf3c      	itt	cc
 800fbb0:	021b      	lslcc	r3, r3, #8
 800fbb2:	3008      	addcc	r0, #8
 800fbb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fbb8:	bf3c      	itt	cc
 800fbba:	011b      	lslcc	r3, r3, #4
 800fbbc:	3004      	addcc	r0, #4
 800fbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbc2:	bf3c      	itt	cc
 800fbc4:	009b      	lslcc	r3, r3, #2
 800fbc6:	3002      	addcc	r0, #2
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	db05      	blt.n	800fbd8 <__hi0bits+0x3c>
 800fbcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fbd0:	f100 0001 	add.w	r0, r0, #1
 800fbd4:	bf08      	it	eq
 800fbd6:	2020      	moveq	r0, #32
 800fbd8:	4770      	bx	lr

0800fbda <__lo0bits>:
 800fbda:	6803      	ldr	r3, [r0, #0]
 800fbdc:	4602      	mov	r2, r0
 800fbde:	f013 0007 	ands.w	r0, r3, #7
 800fbe2:	d00b      	beq.n	800fbfc <__lo0bits+0x22>
 800fbe4:	07d9      	lsls	r1, r3, #31
 800fbe6:	d421      	bmi.n	800fc2c <__lo0bits+0x52>
 800fbe8:	0798      	lsls	r0, r3, #30
 800fbea:	bf49      	itett	mi
 800fbec:	085b      	lsrmi	r3, r3, #1
 800fbee:	089b      	lsrpl	r3, r3, #2
 800fbf0:	2001      	movmi	r0, #1
 800fbf2:	6013      	strmi	r3, [r2, #0]
 800fbf4:	bf5c      	itt	pl
 800fbf6:	6013      	strpl	r3, [r2, #0]
 800fbf8:	2002      	movpl	r0, #2
 800fbfa:	4770      	bx	lr
 800fbfc:	b299      	uxth	r1, r3
 800fbfe:	b909      	cbnz	r1, 800fc04 <__lo0bits+0x2a>
 800fc00:	0c1b      	lsrs	r3, r3, #16
 800fc02:	2010      	movs	r0, #16
 800fc04:	b2d9      	uxtb	r1, r3
 800fc06:	b909      	cbnz	r1, 800fc0c <__lo0bits+0x32>
 800fc08:	3008      	adds	r0, #8
 800fc0a:	0a1b      	lsrs	r3, r3, #8
 800fc0c:	0719      	lsls	r1, r3, #28
 800fc0e:	bf04      	itt	eq
 800fc10:	091b      	lsreq	r3, r3, #4
 800fc12:	3004      	addeq	r0, #4
 800fc14:	0799      	lsls	r1, r3, #30
 800fc16:	bf04      	itt	eq
 800fc18:	089b      	lsreq	r3, r3, #2
 800fc1a:	3002      	addeq	r0, #2
 800fc1c:	07d9      	lsls	r1, r3, #31
 800fc1e:	d403      	bmi.n	800fc28 <__lo0bits+0x4e>
 800fc20:	085b      	lsrs	r3, r3, #1
 800fc22:	f100 0001 	add.w	r0, r0, #1
 800fc26:	d003      	beq.n	800fc30 <__lo0bits+0x56>
 800fc28:	6013      	str	r3, [r2, #0]
 800fc2a:	4770      	bx	lr
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	4770      	bx	lr
 800fc30:	2020      	movs	r0, #32
 800fc32:	4770      	bx	lr

0800fc34 <__i2b>:
 800fc34:	b510      	push	{r4, lr}
 800fc36:	460c      	mov	r4, r1
 800fc38:	2101      	movs	r1, #1
 800fc3a:	f7ff febd 	bl	800f9b8 <_Balloc>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	b928      	cbnz	r0, 800fc4e <__i2b+0x1a>
 800fc42:	4b05      	ldr	r3, [pc, #20]	@ (800fc58 <__i2b+0x24>)
 800fc44:	4805      	ldr	r0, [pc, #20]	@ (800fc5c <__i2b+0x28>)
 800fc46:	f240 1145 	movw	r1, #325	@ 0x145
 800fc4a:	f000 fcd3 	bl	80105f4 <__assert_func>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	6144      	str	r4, [r0, #20]
 800fc52:	6103      	str	r3, [r0, #16]
 800fc54:	bd10      	pop	{r4, pc}
 800fc56:	bf00      	nop
 800fc58:	08010a25 	.word	0x08010a25
 800fc5c:	08010aa7 	.word	0x08010aa7

0800fc60 <__multiply>:
 800fc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc64:	4614      	mov	r4, r2
 800fc66:	690a      	ldr	r2, [r1, #16]
 800fc68:	6923      	ldr	r3, [r4, #16]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	bfa8      	it	ge
 800fc6e:	4623      	movge	r3, r4
 800fc70:	460f      	mov	r7, r1
 800fc72:	bfa4      	itt	ge
 800fc74:	460c      	movge	r4, r1
 800fc76:	461f      	movge	r7, r3
 800fc78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fc7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fc80:	68a3      	ldr	r3, [r4, #8]
 800fc82:	6861      	ldr	r1, [r4, #4]
 800fc84:	eb0a 0609 	add.w	r6, sl, r9
 800fc88:	42b3      	cmp	r3, r6
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	bfb8      	it	lt
 800fc8e:	3101      	addlt	r1, #1
 800fc90:	f7ff fe92 	bl	800f9b8 <_Balloc>
 800fc94:	b930      	cbnz	r0, 800fca4 <__multiply+0x44>
 800fc96:	4602      	mov	r2, r0
 800fc98:	4b44      	ldr	r3, [pc, #272]	@ (800fdac <__multiply+0x14c>)
 800fc9a:	4845      	ldr	r0, [pc, #276]	@ (800fdb0 <__multiply+0x150>)
 800fc9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fca0:	f000 fca8 	bl	80105f4 <__assert_func>
 800fca4:	f100 0514 	add.w	r5, r0, #20
 800fca8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fcac:	462b      	mov	r3, r5
 800fcae:	2200      	movs	r2, #0
 800fcb0:	4543      	cmp	r3, r8
 800fcb2:	d321      	bcc.n	800fcf8 <__multiply+0x98>
 800fcb4:	f107 0114 	add.w	r1, r7, #20
 800fcb8:	f104 0214 	add.w	r2, r4, #20
 800fcbc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fcc0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fcc4:	9302      	str	r3, [sp, #8]
 800fcc6:	1b13      	subs	r3, r2, r4
 800fcc8:	3b15      	subs	r3, #21
 800fcca:	f023 0303 	bic.w	r3, r3, #3
 800fcce:	3304      	adds	r3, #4
 800fcd0:	f104 0715 	add.w	r7, r4, #21
 800fcd4:	42ba      	cmp	r2, r7
 800fcd6:	bf38      	it	cc
 800fcd8:	2304      	movcc	r3, #4
 800fcda:	9301      	str	r3, [sp, #4]
 800fcdc:	9b02      	ldr	r3, [sp, #8]
 800fcde:	9103      	str	r1, [sp, #12]
 800fce0:	428b      	cmp	r3, r1
 800fce2:	d80c      	bhi.n	800fcfe <__multiply+0x9e>
 800fce4:	2e00      	cmp	r6, #0
 800fce6:	dd03      	ble.n	800fcf0 <__multiply+0x90>
 800fce8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d05b      	beq.n	800fda8 <__multiply+0x148>
 800fcf0:	6106      	str	r6, [r0, #16]
 800fcf2:	b005      	add	sp, #20
 800fcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf8:	f843 2b04 	str.w	r2, [r3], #4
 800fcfc:	e7d8      	b.n	800fcb0 <__multiply+0x50>
 800fcfe:	f8b1 a000 	ldrh.w	sl, [r1]
 800fd02:	f1ba 0f00 	cmp.w	sl, #0
 800fd06:	d024      	beq.n	800fd52 <__multiply+0xf2>
 800fd08:	f104 0e14 	add.w	lr, r4, #20
 800fd0c:	46a9      	mov	r9, r5
 800fd0e:	f04f 0c00 	mov.w	ip, #0
 800fd12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd16:	f8d9 3000 	ldr.w	r3, [r9]
 800fd1a:	fa1f fb87 	uxth.w	fp, r7
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	fb0a 330b 	mla	r3, sl, fp, r3
 800fd24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fd28:	f8d9 7000 	ldr.w	r7, [r9]
 800fd2c:	4463      	add	r3, ip
 800fd2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fd32:	fb0a c70b 	mla	r7, sl, fp, ip
 800fd36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fd40:	4572      	cmp	r2, lr
 800fd42:	f849 3b04 	str.w	r3, [r9], #4
 800fd46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fd4a:	d8e2      	bhi.n	800fd12 <__multiply+0xb2>
 800fd4c:	9b01      	ldr	r3, [sp, #4]
 800fd4e:	f845 c003 	str.w	ip, [r5, r3]
 800fd52:	9b03      	ldr	r3, [sp, #12]
 800fd54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fd58:	3104      	adds	r1, #4
 800fd5a:	f1b9 0f00 	cmp.w	r9, #0
 800fd5e:	d021      	beq.n	800fda4 <__multiply+0x144>
 800fd60:	682b      	ldr	r3, [r5, #0]
 800fd62:	f104 0c14 	add.w	ip, r4, #20
 800fd66:	46ae      	mov	lr, r5
 800fd68:	f04f 0a00 	mov.w	sl, #0
 800fd6c:	f8bc b000 	ldrh.w	fp, [ip]
 800fd70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fd74:	fb09 770b 	mla	r7, r9, fp, r7
 800fd78:	4457      	add	r7, sl
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fd80:	f84e 3b04 	str.w	r3, [lr], #4
 800fd84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd8c:	f8be 3000 	ldrh.w	r3, [lr]
 800fd90:	fb09 330a 	mla	r3, r9, sl, r3
 800fd94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fd98:	4562      	cmp	r2, ip
 800fd9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd9e:	d8e5      	bhi.n	800fd6c <__multiply+0x10c>
 800fda0:	9f01      	ldr	r7, [sp, #4]
 800fda2:	51eb      	str	r3, [r5, r7]
 800fda4:	3504      	adds	r5, #4
 800fda6:	e799      	b.n	800fcdc <__multiply+0x7c>
 800fda8:	3e01      	subs	r6, #1
 800fdaa:	e79b      	b.n	800fce4 <__multiply+0x84>
 800fdac:	08010a25 	.word	0x08010a25
 800fdb0:	08010aa7 	.word	0x08010aa7

0800fdb4 <__pow5mult>:
 800fdb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdb8:	4615      	mov	r5, r2
 800fdba:	f012 0203 	ands.w	r2, r2, #3
 800fdbe:	4607      	mov	r7, r0
 800fdc0:	460e      	mov	r6, r1
 800fdc2:	d007      	beq.n	800fdd4 <__pow5mult+0x20>
 800fdc4:	4c25      	ldr	r4, [pc, #148]	@ (800fe5c <__pow5mult+0xa8>)
 800fdc6:	3a01      	subs	r2, #1
 800fdc8:	2300      	movs	r3, #0
 800fdca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fdce:	f7ff fe55 	bl	800fa7c <__multadd>
 800fdd2:	4606      	mov	r6, r0
 800fdd4:	10ad      	asrs	r5, r5, #2
 800fdd6:	d03d      	beq.n	800fe54 <__pow5mult+0xa0>
 800fdd8:	69fc      	ldr	r4, [r7, #28]
 800fdda:	b97c      	cbnz	r4, 800fdfc <__pow5mult+0x48>
 800fddc:	2010      	movs	r0, #16
 800fdde:	f7fc fcb9 	bl	800c754 <malloc>
 800fde2:	4602      	mov	r2, r0
 800fde4:	61f8      	str	r0, [r7, #28]
 800fde6:	b928      	cbnz	r0, 800fdf4 <__pow5mult+0x40>
 800fde8:	4b1d      	ldr	r3, [pc, #116]	@ (800fe60 <__pow5mult+0xac>)
 800fdea:	481e      	ldr	r0, [pc, #120]	@ (800fe64 <__pow5mult+0xb0>)
 800fdec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fdf0:	f000 fc00 	bl	80105f4 <__assert_func>
 800fdf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fdf8:	6004      	str	r4, [r0, #0]
 800fdfa:	60c4      	str	r4, [r0, #12]
 800fdfc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fe00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe04:	b94c      	cbnz	r4, 800fe1a <__pow5mult+0x66>
 800fe06:	f240 2171 	movw	r1, #625	@ 0x271
 800fe0a:	4638      	mov	r0, r7
 800fe0c:	f7ff ff12 	bl	800fc34 <__i2b>
 800fe10:	2300      	movs	r3, #0
 800fe12:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe16:	4604      	mov	r4, r0
 800fe18:	6003      	str	r3, [r0, #0]
 800fe1a:	f04f 0900 	mov.w	r9, #0
 800fe1e:	07eb      	lsls	r3, r5, #31
 800fe20:	d50a      	bpl.n	800fe38 <__pow5mult+0x84>
 800fe22:	4631      	mov	r1, r6
 800fe24:	4622      	mov	r2, r4
 800fe26:	4638      	mov	r0, r7
 800fe28:	f7ff ff1a 	bl	800fc60 <__multiply>
 800fe2c:	4631      	mov	r1, r6
 800fe2e:	4680      	mov	r8, r0
 800fe30:	4638      	mov	r0, r7
 800fe32:	f7ff fe01 	bl	800fa38 <_Bfree>
 800fe36:	4646      	mov	r6, r8
 800fe38:	106d      	asrs	r5, r5, #1
 800fe3a:	d00b      	beq.n	800fe54 <__pow5mult+0xa0>
 800fe3c:	6820      	ldr	r0, [r4, #0]
 800fe3e:	b938      	cbnz	r0, 800fe50 <__pow5mult+0x9c>
 800fe40:	4622      	mov	r2, r4
 800fe42:	4621      	mov	r1, r4
 800fe44:	4638      	mov	r0, r7
 800fe46:	f7ff ff0b 	bl	800fc60 <__multiply>
 800fe4a:	6020      	str	r0, [r4, #0]
 800fe4c:	f8c0 9000 	str.w	r9, [r0]
 800fe50:	4604      	mov	r4, r0
 800fe52:	e7e4      	b.n	800fe1e <__pow5mult+0x6a>
 800fe54:	4630      	mov	r0, r6
 800fe56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe5a:	bf00      	nop
 800fe5c:	08010b00 	.word	0x08010b00
 800fe60:	080109b6 	.word	0x080109b6
 800fe64:	08010aa7 	.word	0x08010aa7

0800fe68 <__lshift>:
 800fe68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe6c:	460c      	mov	r4, r1
 800fe6e:	6849      	ldr	r1, [r1, #4]
 800fe70:	6923      	ldr	r3, [r4, #16]
 800fe72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fe76:	68a3      	ldr	r3, [r4, #8]
 800fe78:	4607      	mov	r7, r0
 800fe7a:	4691      	mov	r9, r2
 800fe7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fe80:	f108 0601 	add.w	r6, r8, #1
 800fe84:	42b3      	cmp	r3, r6
 800fe86:	db0b      	blt.n	800fea0 <__lshift+0x38>
 800fe88:	4638      	mov	r0, r7
 800fe8a:	f7ff fd95 	bl	800f9b8 <_Balloc>
 800fe8e:	4605      	mov	r5, r0
 800fe90:	b948      	cbnz	r0, 800fea6 <__lshift+0x3e>
 800fe92:	4602      	mov	r2, r0
 800fe94:	4b28      	ldr	r3, [pc, #160]	@ (800ff38 <__lshift+0xd0>)
 800fe96:	4829      	ldr	r0, [pc, #164]	@ (800ff3c <__lshift+0xd4>)
 800fe98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fe9c:	f000 fbaa 	bl	80105f4 <__assert_func>
 800fea0:	3101      	adds	r1, #1
 800fea2:	005b      	lsls	r3, r3, #1
 800fea4:	e7ee      	b.n	800fe84 <__lshift+0x1c>
 800fea6:	2300      	movs	r3, #0
 800fea8:	f100 0114 	add.w	r1, r0, #20
 800feac:	f100 0210 	add.w	r2, r0, #16
 800feb0:	4618      	mov	r0, r3
 800feb2:	4553      	cmp	r3, sl
 800feb4:	db33      	blt.n	800ff1e <__lshift+0xb6>
 800feb6:	6920      	ldr	r0, [r4, #16]
 800feb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800febc:	f104 0314 	add.w	r3, r4, #20
 800fec0:	f019 091f 	ands.w	r9, r9, #31
 800fec4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fec8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fecc:	d02b      	beq.n	800ff26 <__lshift+0xbe>
 800fece:	f1c9 0e20 	rsb	lr, r9, #32
 800fed2:	468a      	mov	sl, r1
 800fed4:	2200      	movs	r2, #0
 800fed6:	6818      	ldr	r0, [r3, #0]
 800fed8:	fa00 f009 	lsl.w	r0, r0, r9
 800fedc:	4310      	orrs	r0, r2
 800fede:	f84a 0b04 	str.w	r0, [sl], #4
 800fee2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fee6:	459c      	cmp	ip, r3
 800fee8:	fa22 f20e 	lsr.w	r2, r2, lr
 800feec:	d8f3      	bhi.n	800fed6 <__lshift+0x6e>
 800feee:	ebac 0304 	sub.w	r3, ip, r4
 800fef2:	3b15      	subs	r3, #21
 800fef4:	f023 0303 	bic.w	r3, r3, #3
 800fef8:	3304      	adds	r3, #4
 800fefa:	f104 0015 	add.w	r0, r4, #21
 800fefe:	4584      	cmp	ip, r0
 800ff00:	bf38      	it	cc
 800ff02:	2304      	movcc	r3, #4
 800ff04:	50ca      	str	r2, [r1, r3]
 800ff06:	b10a      	cbz	r2, 800ff0c <__lshift+0xa4>
 800ff08:	f108 0602 	add.w	r6, r8, #2
 800ff0c:	3e01      	subs	r6, #1
 800ff0e:	4638      	mov	r0, r7
 800ff10:	612e      	str	r6, [r5, #16]
 800ff12:	4621      	mov	r1, r4
 800ff14:	f7ff fd90 	bl	800fa38 <_Bfree>
 800ff18:	4628      	mov	r0, r5
 800ff1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff22:	3301      	adds	r3, #1
 800ff24:	e7c5      	b.n	800feb2 <__lshift+0x4a>
 800ff26:	3904      	subs	r1, #4
 800ff28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff30:	459c      	cmp	ip, r3
 800ff32:	d8f9      	bhi.n	800ff28 <__lshift+0xc0>
 800ff34:	e7ea      	b.n	800ff0c <__lshift+0xa4>
 800ff36:	bf00      	nop
 800ff38:	08010a25 	.word	0x08010a25
 800ff3c:	08010aa7 	.word	0x08010aa7

0800ff40 <__mcmp>:
 800ff40:	690a      	ldr	r2, [r1, #16]
 800ff42:	4603      	mov	r3, r0
 800ff44:	6900      	ldr	r0, [r0, #16]
 800ff46:	1a80      	subs	r0, r0, r2
 800ff48:	b530      	push	{r4, r5, lr}
 800ff4a:	d10e      	bne.n	800ff6a <__mcmp+0x2a>
 800ff4c:	3314      	adds	r3, #20
 800ff4e:	3114      	adds	r1, #20
 800ff50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ff54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ff58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ff5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ff60:	4295      	cmp	r5, r2
 800ff62:	d003      	beq.n	800ff6c <__mcmp+0x2c>
 800ff64:	d205      	bcs.n	800ff72 <__mcmp+0x32>
 800ff66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff6a:	bd30      	pop	{r4, r5, pc}
 800ff6c:	42a3      	cmp	r3, r4
 800ff6e:	d3f3      	bcc.n	800ff58 <__mcmp+0x18>
 800ff70:	e7fb      	b.n	800ff6a <__mcmp+0x2a>
 800ff72:	2001      	movs	r0, #1
 800ff74:	e7f9      	b.n	800ff6a <__mcmp+0x2a>
	...

0800ff78 <__mdiff>:
 800ff78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff7c:	4689      	mov	r9, r1
 800ff7e:	4606      	mov	r6, r0
 800ff80:	4611      	mov	r1, r2
 800ff82:	4648      	mov	r0, r9
 800ff84:	4614      	mov	r4, r2
 800ff86:	f7ff ffdb 	bl	800ff40 <__mcmp>
 800ff8a:	1e05      	subs	r5, r0, #0
 800ff8c:	d112      	bne.n	800ffb4 <__mdiff+0x3c>
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4630      	mov	r0, r6
 800ff92:	f7ff fd11 	bl	800f9b8 <_Balloc>
 800ff96:	4602      	mov	r2, r0
 800ff98:	b928      	cbnz	r0, 800ffa6 <__mdiff+0x2e>
 800ff9a:	4b3f      	ldr	r3, [pc, #252]	@ (8010098 <__mdiff+0x120>)
 800ff9c:	f240 2137 	movw	r1, #567	@ 0x237
 800ffa0:	483e      	ldr	r0, [pc, #248]	@ (801009c <__mdiff+0x124>)
 800ffa2:	f000 fb27 	bl	80105f4 <__assert_func>
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ffac:	4610      	mov	r0, r2
 800ffae:	b003      	add	sp, #12
 800ffb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb4:	bfbc      	itt	lt
 800ffb6:	464b      	movlt	r3, r9
 800ffb8:	46a1      	movlt	r9, r4
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ffc0:	bfba      	itte	lt
 800ffc2:	461c      	movlt	r4, r3
 800ffc4:	2501      	movlt	r5, #1
 800ffc6:	2500      	movge	r5, #0
 800ffc8:	f7ff fcf6 	bl	800f9b8 <_Balloc>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	b918      	cbnz	r0, 800ffd8 <__mdiff+0x60>
 800ffd0:	4b31      	ldr	r3, [pc, #196]	@ (8010098 <__mdiff+0x120>)
 800ffd2:	f240 2145 	movw	r1, #581	@ 0x245
 800ffd6:	e7e3      	b.n	800ffa0 <__mdiff+0x28>
 800ffd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ffdc:	6926      	ldr	r6, [r4, #16]
 800ffde:	60c5      	str	r5, [r0, #12]
 800ffe0:	f109 0310 	add.w	r3, r9, #16
 800ffe4:	f109 0514 	add.w	r5, r9, #20
 800ffe8:	f104 0e14 	add.w	lr, r4, #20
 800ffec:	f100 0b14 	add.w	fp, r0, #20
 800fff0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fff4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fff8:	9301      	str	r3, [sp, #4]
 800fffa:	46d9      	mov	r9, fp
 800fffc:	f04f 0c00 	mov.w	ip, #0
 8010000:	9b01      	ldr	r3, [sp, #4]
 8010002:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010006:	f853 af04 	ldr.w	sl, [r3, #4]!
 801000a:	9301      	str	r3, [sp, #4]
 801000c:	fa1f f38a 	uxth.w	r3, sl
 8010010:	4619      	mov	r1, r3
 8010012:	b283      	uxth	r3, r0
 8010014:	1acb      	subs	r3, r1, r3
 8010016:	0c00      	lsrs	r0, r0, #16
 8010018:	4463      	add	r3, ip
 801001a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801001e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010022:	b29b      	uxth	r3, r3
 8010024:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010028:	4576      	cmp	r6, lr
 801002a:	f849 3b04 	str.w	r3, [r9], #4
 801002e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010032:	d8e5      	bhi.n	8010000 <__mdiff+0x88>
 8010034:	1b33      	subs	r3, r6, r4
 8010036:	3b15      	subs	r3, #21
 8010038:	f023 0303 	bic.w	r3, r3, #3
 801003c:	3415      	adds	r4, #21
 801003e:	3304      	adds	r3, #4
 8010040:	42a6      	cmp	r6, r4
 8010042:	bf38      	it	cc
 8010044:	2304      	movcc	r3, #4
 8010046:	441d      	add	r5, r3
 8010048:	445b      	add	r3, fp
 801004a:	461e      	mov	r6, r3
 801004c:	462c      	mov	r4, r5
 801004e:	4544      	cmp	r4, r8
 8010050:	d30e      	bcc.n	8010070 <__mdiff+0xf8>
 8010052:	f108 0103 	add.w	r1, r8, #3
 8010056:	1b49      	subs	r1, r1, r5
 8010058:	f021 0103 	bic.w	r1, r1, #3
 801005c:	3d03      	subs	r5, #3
 801005e:	45a8      	cmp	r8, r5
 8010060:	bf38      	it	cc
 8010062:	2100      	movcc	r1, #0
 8010064:	440b      	add	r3, r1
 8010066:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801006a:	b191      	cbz	r1, 8010092 <__mdiff+0x11a>
 801006c:	6117      	str	r7, [r2, #16]
 801006e:	e79d      	b.n	800ffac <__mdiff+0x34>
 8010070:	f854 1b04 	ldr.w	r1, [r4], #4
 8010074:	46e6      	mov	lr, ip
 8010076:	0c08      	lsrs	r0, r1, #16
 8010078:	fa1c fc81 	uxtah	ip, ip, r1
 801007c:	4471      	add	r1, lr
 801007e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010082:	b289      	uxth	r1, r1
 8010084:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010088:	f846 1b04 	str.w	r1, [r6], #4
 801008c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010090:	e7dd      	b.n	801004e <__mdiff+0xd6>
 8010092:	3f01      	subs	r7, #1
 8010094:	e7e7      	b.n	8010066 <__mdiff+0xee>
 8010096:	bf00      	nop
 8010098:	08010a25 	.word	0x08010a25
 801009c:	08010aa7 	.word	0x08010aa7

080100a0 <__ulp>:
 80100a0:	b082      	sub	sp, #8
 80100a2:	ed8d 0b00 	vstr	d0, [sp]
 80100a6:	9a01      	ldr	r2, [sp, #4]
 80100a8:	4b0f      	ldr	r3, [pc, #60]	@ (80100e8 <__ulp+0x48>)
 80100aa:	4013      	ands	r3, r2
 80100ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	dc08      	bgt.n	80100c6 <__ulp+0x26>
 80100b4:	425b      	negs	r3, r3
 80100b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80100ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80100be:	da04      	bge.n	80100ca <__ulp+0x2a>
 80100c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80100c4:	4113      	asrs	r3, r2
 80100c6:	2200      	movs	r2, #0
 80100c8:	e008      	b.n	80100dc <__ulp+0x3c>
 80100ca:	f1a2 0314 	sub.w	r3, r2, #20
 80100ce:	2b1e      	cmp	r3, #30
 80100d0:	bfda      	itte	le
 80100d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80100d6:	40da      	lsrle	r2, r3
 80100d8:	2201      	movgt	r2, #1
 80100da:	2300      	movs	r3, #0
 80100dc:	4619      	mov	r1, r3
 80100de:	4610      	mov	r0, r2
 80100e0:	ec41 0b10 	vmov	d0, r0, r1
 80100e4:	b002      	add	sp, #8
 80100e6:	4770      	bx	lr
 80100e8:	7ff00000 	.word	0x7ff00000

080100ec <__b2d>:
 80100ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f0:	6906      	ldr	r6, [r0, #16]
 80100f2:	f100 0814 	add.w	r8, r0, #20
 80100f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80100fa:	1f37      	subs	r7, r6, #4
 80100fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010100:	4610      	mov	r0, r2
 8010102:	f7ff fd4b 	bl	800fb9c <__hi0bits>
 8010106:	f1c0 0320 	rsb	r3, r0, #32
 801010a:	280a      	cmp	r0, #10
 801010c:	600b      	str	r3, [r1, #0]
 801010e:	491b      	ldr	r1, [pc, #108]	@ (801017c <__b2d+0x90>)
 8010110:	dc15      	bgt.n	801013e <__b2d+0x52>
 8010112:	f1c0 0c0b 	rsb	ip, r0, #11
 8010116:	fa22 f30c 	lsr.w	r3, r2, ip
 801011a:	45b8      	cmp	r8, r7
 801011c:	ea43 0501 	orr.w	r5, r3, r1
 8010120:	bf34      	ite	cc
 8010122:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010126:	2300      	movcs	r3, #0
 8010128:	3015      	adds	r0, #21
 801012a:	fa02 f000 	lsl.w	r0, r2, r0
 801012e:	fa23 f30c 	lsr.w	r3, r3, ip
 8010132:	4303      	orrs	r3, r0
 8010134:	461c      	mov	r4, r3
 8010136:	ec45 4b10 	vmov	d0, r4, r5
 801013a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801013e:	45b8      	cmp	r8, r7
 8010140:	bf3a      	itte	cc
 8010142:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010146:	f1a6 0708 	subcc.w	r7, r6, #8
 801014a:	2300      	movcs	r3, #0
 801014c:	380b      	subs	r0, #11
 801014e:	d012      	beq.n	8010176 <__b2d+0x8a>
 8010150:	f1c0 0120 	rsb	r1, r0, #32
 8010154:	fa23 f401 	lsr.w	r4, r3, r1
 8010158:	4082      	lsls	r2, r0
 801015a:	4322      	orrs	r2, r4
 801015c:	4547      	cmp	r7, r8
 801015e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010162:	bf8c      	ite	hi
 8010164:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010168:	2200      	movls	r2, #0
 801016a:	4083      	lsls	r3, r0
 801016c:	40ca      	lsrs	r2, r1
 801016e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010172:	4313      	orrs	r3, r2
 8010174:	e7de      	b.n	8010134 <__b2d+0x48>
 8010176:	ea42 0501 	orr.w	r5, r2, r1
 801017a:	e7db      	b.n	8010134 <__b2d+0x48>
 801017c:	3ff00000 	.word	0x3ff00000

08010180 <__d2b>:
 8010180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010184:	460f      	mov	r7, r1
 8010186:	2101      	movs	r1, #1
 8010188:	ec59 8b10 	vmov	r8, r9, d0
 801018c:	4616      	mov	r6, r2
 801018e:	f7ff fc13 	bl	800f9b8 <_Balloc>
 8010192:	4604      	mov	r4, r0
 8010194:	b930      	cbnz	r0, 80101a4 <__d2b+0x24>
 8010196:	4602      	mov	r2, r0
 8010198:	4b23      	ldr	r3, [pc, #140]	@ (8010228 <__d2b+0xa8>)
 801019a:	4824      	ldr	r0, [pc, #144]	@ (801022c <__d2b+0xac>)
 801019c:	f240 310f 	movw	r1, #783	@ 0x30f
 80101a0:	f000 fa28 	bl	80105f4 <__assert_func>
 80101a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80101a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101ac:	b10d      	cbz	r5, 80101b2 <__d2b+0x32>
 80101ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80101b2:	9301      	str	r3, [sp, #4]
 80101b4:	f1b8 0300 	subs.w	r3, r8, #0
 80101b8:	d023      	beq.n	8010202 <__d2b+0x82>
 80101ba:	4668      	mov	r0, sp
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	f7ff fd0c 	bl	800fbda <__lo0bits>
 80101c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80101c6:	b1d0      	cbz	r0, 80101fe <__d2b+0x7e>
 80101c8:	f1c0 0320 	rsb	r3, r0, #32
 80101cc:	fa02 f303 	lsl.w	r3, r2, r3
 80101d0:	430b      	orrs	r3, r1
 80101d2:	40c2      	lsrs	r2, r0
 80101d4:	6163      	str	r3, [r4, #20]
 80101d6:	9201      	str	r2, [sp, #4]
 80101d8:	9b01      	ldr	r3, [sp, #4]
 80101da:	61a3      	str	r3, [r4, #24]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	bf0c      	ite	eq
 80101e0:	2201      	moveq	r2, #1
 80101e2:	2202      	movne	r2, #2
 80101e4:	6122      	str	r2, [r4, #16]
 80101e6:	b1a5      	cbz	r5, 8010212 <__d2b+0x92>
 80101e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80101ec:	4405      	add	r5, r0
 80101ee:	603d      	str	r5, [r7, #0]
 80101f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80101f4:	6030      	str	r0, [r6, #0]
 80101f6:	4620      	mov	r0, r4
 80101f8:	b003      	add	sp, #12
 80101fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101fe:	6161      	str	r1, [r4, #20]
 8010200:	e7ea      	b.n	80101d8 <__d2b+0x58>
 8010202:	a801      	add	r0, sp, #4
 8010204:	f7ff fce9 	bl	800fbda <__lo0bits>
 8010208:	9b01      	ldr	r3, [sp, #4]
 801020a:	6163      	str	r3, [r4, #20]
 801020c:	3020      	adds	r0, #32
 801020e:	2201      	movs	r2, #1
 8010210:	e7e8      	b.n	80101e4 <__d2b+0x64>
 8010212:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010216:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801021a:	6038      	str	r0, [r7, #0]
 801021c:	6918      	ldr	r0, [r3, #16]
 801021e:	f7ff fcbd 	bl	800fb9c <__hi0bits>
 8010222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010226:	e7e5      	b.n	80101f4 <__d2b+0x74>
 8010228:	08010a25 	.word	0x08010a25
 801022c:	08010aa7 	.word	0x08010aa7

08010230 <__ratio>:
 8010230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010234:	4688      	mov	r8, r1
 8010236:	4669      	mov	r1, sp
 8010238:	4681      	mov	r9, r0
 801023a:	f7ff ff57 	bl	80100ec <__b2d>
 801023e:	a901      	add	r1, sp, #4
 8010240:	4640      	mov	r0, r8
 8010242:	ec55 4b10 	vmov	r4, r5, d0
 8010246:	f7ff ff51 	bl	80100ec <__b2d>
 801024a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801024e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010252:	1ad2      	subs	r2, r2, r3
 8010254:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010258:	1a5b      	subs	r3, r3, r1
 801025a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801025e:	ec57 6b10 	vmov	r6, r7, d0
 8010262:	2b00      	cmp	r3, #0
 8010264:	bfd6      	itet	le
 8010266:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801026a:	462a      	movgt	r2, r5
 801026c:	463a      	movle	r2, r7
 801026e:	46ab      	mov	fp, r5
 8010270:	46a2      	mov	sl, r4
 8010272:	bfce      	itee	gt
 8010274:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010278:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801027c:	ee00 3a90 	vmovle	s1, r3
 8010280:	ec4b ab17 	vmov	d7, sl, fp
 8010284:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010288:	b003      	add	sp, #12
 801028a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801028e <__copybits>:
 801028e:	3901      	subs	r1, #1
 8010290:	b570      	push	{r4, r5, r6, lr}
 8010292:	1149      	asrs	r1, r1, #5
 8010294:	6914      	ldr	r4, [r2, #16]
 8010296:	3101      	adds	r1, #1
 8010298:	f102 0314 	add.w	r3, r2, #20
 801029c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80102a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80102a4:	1f05      	subs	r5, r0, #4
 80102a6:	42a3      	cmp	r3, r4
 80102a8:	d30c      	bcc.n	80102c4 <__copybits+0x36>
 80102aa:	1aa3      	subs	r3, r4, r2
 80102ac:	3b11      	subs	r3, #17
 80102ae:	f023 0303 	bic.w	r3, r3, #3
 80102b2:	3211      	adds	r2, #17
 80102b4:	42a2      	cmp	r2, r4
 80102b6:	bf88      	it	hi
 80102b8:	2300      	movhi	r3, #0
 80102ba:	4418      	add	r0, r3
 80102bc:	2300      	movs	r3, #0
 80102be:	4288      	cmp	r0, r1
 80102c0:	d305      	bcc.n	80102ce <__copybits+0x40>
 80102c2:	bd70      	pop	{r4, r5, r6, pc}
 80102c4:	f853 6b04 	ldr.w	r6, [r3], #4
 80102c8:	f845 6f04 	str.w	r6, [r5, #4]!
 80102cc:	e7eb      	b.n	80102a6 <__copybits+0x18>
 80102ce:	f840 3b04 	str.w	r3, [r0], #4
 80102d2:	e7f4      	b.n	80102be <__copybits+0x30>

080102d4 <__any_on>:
 80102d4:	f100 0214 	add.w	r2, r0, #20
 80102d8:	6900      	ldr	r0, [r0, #16]
 80102da:	114b      	asrs	r3, r1, #5
 80102dc:	4298      	cmp	r0, r3
 80102de:	b510      	push	{r4, lr}
 80102e0:	db11      	blt.n	8010306 <__any_on+0x32>
 80102e2:	dd0a      	ble.n	80102fa <__any_on+0x26>
 80102e4:	f011 011f 	ands.w	r1, r1, #31
 80102e8:	d007      	beq.n	80102fa <__any_on+0x26>
 80102ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80102ee:	fa24 f001 	lsr.w	r0, r4, r1
 80102f2:	fa00 f101 	lsl.w	r1, r0, r1
 80102f6:	428c      	cmp	r4, r1
 80102f8:	d10b      	bne.n	8010312 <__any_on+0x3e>
 80102fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80102fe:	4293      	cmp	r3, r2
 8010300:	d803      	bhi.n	801030a <__any_on+0x36>
 8010302:	2000      	movs	r0, #0
 8010304:	bd10      	pop	{r4, pc}
 8010306:	4603      	mov	r3, r0
 8010308:	e7f7      	b.n	80102fa <__any_on+0x26>
 801030a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801030e:	2900      	cmp	r1, #0
 8010310:	d0f5      	beq.n	80102fe <__any_on+0x2a>
 8010312:	2001      	movs	r0, #1
 8010314:	e7f6      	b.n	8010304 <__any_on+0x30>

08010316 <_realloc_r>:
 8010316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801031a:	4680      	mov	r8, r0
 801031c:	4615      	mov	r5, r2
 801031e:	460c      	mov	r4, r1
 8010320:	b921      	cbnz	r1, 801032c <_realloc_r+0x16>
 8010322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010326:	4611      	mov	r1, r2
 8010328:	f7fc ba3e 	b.w	800c7a8 <_malloc_r>
 801032c:	b92a      	cbnz	r2, 801033a <_realloc_r+0x24>
 801032e:	f7fe fc69 	bl	800ec04 <_free_r>
 8010332:	2400      	movs	r4, #0
 8010334:	4620      	mov	r0, r4
 8010336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801033a:	f000 f98d 	bl	8010658 <_malloc_usable_size_r>
 801033e:	4285      	cmp	r5, r0
 8010340:	4606      	mov	r6, r0
 8010342:	d802      	bhi.n	801034a <_realloc_r+0x34>
 8010344:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010348:	d8f4      	bhi.n	8010334 <_realloc_r+0x1e>
 801034a:	4629      	mov	r1, r5
 801034c:	4640      	mov	r0, r8
 801034e:	f7fc fa2b 	bl	800c7a8 <_malloc_r>
 8010352:	4607      	mov	r7, r0
 8010354:	2800      	cmp	r0, #0
 8010356:	d0ec      	beq.n	8010332 <_realloc_r+0x1c>
 8010358:	42b5      	cmp	r5, r6
 801035a:	462a      	mov	r2, r5
 801035c:	4621      	mov	r1, r4
 801035e:	bf28      	it	cs
 8010360:	4632      	movcs	r2, r6
 8010362:	f7fd fe52 	bl	800e00a <memcpy>
 8010366:	4621      	mov	r1, r4
 8010368:	4640      	mov	r0, r8
 801036a:	f7fe fc4b 	bl	800ec04 <_free_r>
 801036e:	463c      	mov	r4, r7
 8010370:	e7e0      	b.n	8010334 <_realloc_r+0x1e>

08010372 <__swbuf_r>:
 8010372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010374:	460e      	mov	r6, r1
 8010376:	4614      	mov	r4, r2
 8010378:	4605      	mov	r5, r0
 801037a:	b118      	cbz	r0, 8010384 <__swbuf_r+0x12>
 801037c:	6a03      	ldr	r3, [r0, #32]
 801037e:	b90b      	cbnz	r3, 8010384 <__swbuf_r+0x12>
 8010380:	f7fc ff28 	bl	800d1d4 <__sinit>
 8010384:	69a3      	ldr	r3, [r4, #24]
 8010386:	60a3      	str	r3, [r4, #8]
 8010388:	89a3      	ldrh	r3, [r4, #12]
 801038a:	071a      	lsls	r2, r3, #28
 801038c:	d501      	bpl.n	8010392 <__swbuf_r+0x20>
 801038e:	6923      	ldr	r3, [r4, #16]
 8010390:	b943      	cbnz	r3, 80103a4 <__swbuf_r+0x32>
 8010392:	4621      	mov	r1, r4
 8010394:	4628      	mov	r0, r5
 8010396:	f000 f82b 	bl	80103f0 <__swsetup_r>
 801039a:	b118      	cbz	r0, 80103a4 <__swbuf_r+0x32>
 801039c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80103a0:	4638      	mov	r0, r7
 80103a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103a4:	6823      	ldr	r3, [r4, #0]
 80103a6:	6922      	ldr	r2, [r4, #16]
 80103a8:	1a98      	subs	r0, r3, r2
 80103aa:	6963      	ldr	r3, [r4, #20]
 80103ac:	b2f6      	uxtb	r6, r6
 80103ae:	4283      	cmp	r3, r0
 80103b0:	4637      	mov	r7, r6
 80103b2:	dc05      	bgt.n	80103c0 <__swbuf_r+0x4e>
 80103b4:	4621      	mov	r1, r4
 80103b6:	4628      	mov	r0, r5
 80103b8:	f7ff fad6 	bl	800f968 <_fflush_r>
 80103bc:	2800      	cmp	r0, #0
 80103be:	d1ed      	bne.n	801039c <__swbuf_r+0x2a>
 80103c0:	68a3      	ldr	r3, [r4, #8]
 80103c2:	3b01      	subs	r3, #1
 80103c4:	60a3      	str	r3, [r4, #8]
 80103c6:	6823      	ldr	r3, [r4, #0]
 80103c8:	1c5a      	adds	r2, r3, #1
 80103ca:	6022      	str	r2, [r4, #0]
 80103cc:	701e      	strb	r6, [r3, #0]
 80103ce:	6962      	ldr	r2, [r4, #20]
 80103d0:	1c43      	adds	r3, r0, #1
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d004      	beq.n	80103e0 <__swbuf_r+0x6e>
 80103d6:	89a3      	ldrh	r3, [r4, #12]
 80103d8:	07db      	lsls	r3, r3, #31
 80103da:	d5e1      	bpl.n	80103a0 <__swbuf_r+0x2e>
 80103dc:	2e0a      	cmp	r6, #10
 80103de:	d1df      	bne.n	80103a0 <__swbuf_r+0x2e>
 80103e0:	4621      	mov	r1, r4
 80103e2:	4628      	mov	r0, r5
 80103e4:	f7ff fac0 	bl	800f968 <_fflush_r>
 80103e8:	2800      	cmp	r0, #0
 80103ea:	d0d9      	beq.n	80103a0 <__swbuf_r+0x2e>
 80103ec:	e7d6      	b.n	801039c <__swbuf_r+0x2a>
	...

080103f0 <__swsetup_r>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	4b29      	ldr	r3, [pc, #164]	@ (8010498 <__swsetup_r+0xa8>)
 80103f4:	4605      	mov	r5, r0
 80103f6:	6818      	ldr	r0, [r3, #0]
 80103f8:	460c      	mov	r4, r1
 80103fa:	b118      	cbz	r0, 8010404 <__swsetup_r+0x14>
 80103fc:	6a03      	ldr	r3, [r0, #32]
 80103fe:	b90b      	cbnz	r3, 8010404 <__swsetup_r+0x14>
 8010400:	f7fc fee8 	bl	800d1d4 <__sinit>
 8010404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010408:	0719      	lsls	r1, r3, #28
 801040a:	d422      	bmi.n	8010452 <__swsetup_r+0x62>
 801040c:	06da      	lsls	r2, r3, #27
 801040e:	d407      	bmi.n	8010420 <__swsetup_r+0x30>
 8010410:	2209      	movs	r2, #9
 8010412:	602a      	str	r2, [r5, #0]
 8010414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010418:	81a3      	strh	r3, [r4, #12]
 801041a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801041e:	e033      	b.n	8010488 <__swsetup_r+0x98>
 8010420:	0758      	lsls	r0, r3, #29
 8010422:	d512      	bpl.n	801044a <__swsetup_r+0x5a>
 8010424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010426:	b141      	cbz	r1, 801043a <__swsetup_r+0x4a>
 8010428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801042c:	4299      	cmp	r1, r3
 801042e:	d002      	beq.n	8010436 <__swsetup_r+0x46>
 8010430:	4628      	mov	r0, r5
 8010432:	f7fe fbe7 	bl	800ec04 <_free_r>
 8010436:	2300      	movs	r3, #0
 8010438:	6363      	str	r3, [r4, #52]	@ 0x34
 801043a:	89a3      	ldrh	r3, [r4, #12]
 801043c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010440:	81a3      	strh	r3, [r4, #12]
 8010442:	2300      	movs	r3, #0
 8010444:	6063      	str	r3, [r4, #4]
 8010446:	6923      	ldr	r3, [r4, #16]
 8010448:	6023      	str	r3, [r4, #0]
 801044a:	89a3      	ldrh	r3, [r4, #12]
 801044c:	f043 0308 	orr.w	r3, r3, #8
 8010450:	81a3      	strh	r3, [r4, #12]
 8010452:	6923      	ldr	r3, [r4, #16]
 8010454:	b94b      	cbnz	r3, 801046a <__swsetup_r+0x7a>
 8010456:	89a3      	ldrh	r3, [r4, #12]
 8010458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801045c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010460:	d003      	beq.n	801046a <__swsetup_r+0x7a>
 8010462:	4621      	mov	r1, r4
 8010464:	4628      	mov	r0, r5
 8010466:	f000 f84c 	bl	8010502 <__smakebuf_r>
 801046a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801046e:	f013 0201 	ands.w	r2, r3, #1
 8010472:	d00a      	beq.n	801048a <__swsetup_r+0x9a>
 8010474:	2200      	movs	r2, #0
 8010476:	60a2      	str	r2, [r4, #8]
 8010478:	6962      	ldr	r2, [r4, #20]
 801047a:	4252      	negs	r2, r2
 801047c:	61a2      	str	r2, [r4, #24]
 801047e:	6922      	ldr	r2, [r4, #16]
 8010480:	b942      	cbnz	r2, 8010494 <__swsetup_r+0xa4>
 8010482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010486:	d1c5      	bne.n	8010414 <__swsetup_r+0x24>
 8010488:	bd38      	pop	{r3, r4, r5, pc}
 801048a:	0799      	lsls	r1, r3, #30
 801048c:	bf58      	it	pl
 801048e:	6962      	ldrpl	r2, [r4, #20]
 8010490:	60a2      	str	r2, [r4, #8]
 8010492:	e7f4      	b.n	801047e <__swsetup_r+0x8e>
 8010494:	2000      	movs	r0, #0
 8010496:	e7f7      	b.n	8010488 <__swsetup_r+0x98>
 8010498:	24000188 	.word	0x24000188

0801049c <__ascii_wctomb>:
 801049c:	4603      	mov	r3, r0
 801049e:	4608      	mov	r0, r1
 80104a0:	b141      	cbz	r1, 80104b4 <__ascii_wctomb+0x18>
 80104a2:	2aff      	cmp	r2, #255	@ 0xff
 80104a4:	d904      	bls.n	80104b0 <__ascii_wctomb+0x14>
 80104a6:	228a      	movs	r2, #138	@ 0x8a
 80104a8:	601a      	str	r2, [r3, #0]
 80104aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80104ae:	4770      	bx	lr
 80104b0:	700a      	strb	r2, [r1, #0]
 80104b2:	2001      	movs	r0, #1
 80104b4:	4770      	bx	lr

080104b6 <__swhatbuf_r>:
 80104b6:	b570      	push	{r4, r5, r6, lr}
 80104b8:	460c      	mov	r4, r1
 80104ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104be:	2900      	cmp	r1, #0
 80104c0:	b096      	sub	sp, #88	@ 0x58
 80104c2:	4615      	mov	r5, r2
 80104c4:	461e      	mov	r6, r3
 80104c6:	da0d      	bge.n	80104e4 <__swhatbuf_r+0x2e>
 80104c8:	89a3      	ldrh	r3, [r4, #12]
 80104ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80104ce:	f04f 0100 	mov.w	r1, #0
 80104d2:	bf14      	ite	ne
 80104d4:	2340      	movne	r3, #64	@ 0x40
 80104d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80104da:	2000      	movs	r0, #0
 80104dc:	6031      	str	r1, [r6, #0]
 80104de:	602b      	str	r3, [r5, #0]
 80104e0:	b016      	add	sp, #88	@ 0x58
 80104e2:	bd70      	pop	{r4, r5, r6, pc}
 80104e4:	466a      	mov	r2, sp
 80104e6:	f000 f863 	bl	80105b0 <_fstat_r>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	dbec      	blt.n	80104c8 <__swhatbuf_r+0x12>
 80104ee:	9901      	ldr	r1, [sp, #4]
 80104f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80104f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80104f8:	4259      	negs	r1, r3
 80104fa:	4159      	adcs	r1, r3
 80104fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010500:	e7eb      	b.n	80104da <__swhatbuf_r+0x24>

08010502 <__smakebuf_r>:
 8010502:	898b      	ldrh	r3, [r1, #12]
 8010504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010506:	079d      	lsls	r5, r3, #30
 8010508:	4606      	mov	r6, r0
 801050a:	460c      	mov	r4, r1
 801050c:	d507      	bpl.n	801051e <__smakebuf_r+0x1c>
 801050e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010512:	6023      	str	r3, [r4, #0]
 8010514:	6123      	str	r3, [r4, #16]
 8010516:	2301      	movs	r3, #1
 8010518:	6163      	str	r3, [r4, #20]
 801051a:	b003      	add	sp, #12
 801051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801051e:	ab01      	add	r3, sp, #4
 8010520:	466a      	mov	r2, sp
 8010522:	f7ff ffc8 	bl	80104b6 <__swhatbuf_r>
 8010526:	9f00      	ldr	r7, [sp, #0]
 8010528:	4605      	mov	r5, r0
 801052a:	4639      	mov	r1, r7
 801052c:	4630      	mov	r0, r6
 801052e:	f7fc f93b 	bl	800c7a8 <_malloc_r>
 8010532:	b948      	cbnz	r0, 8010548 <__smakebuf_r+0x46>
 8010534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010538:	059a      	lsls	r2, r3, #22
 801053a:	d4ee      	bmi.n	801051a <__smakebuf_r+0x18>
 801053c:	f023 0303 	bic.w	r3, r3, #3
 8010540:	f043 0302 	orr.w	r3, r3, #2
 8010544:	81a3      	strh	r3, [r4, #12]
 8010546:	e7e2      	b.n	801050e <__smakebuf_r+0xc>
 8010548:	89a3      	ldrh	r3, [r4, #12]
 801054a:	6020      	str	r0, [r4, #0]
 801054c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	9b01      	ldr	r3, [sp, #4]
 8010554:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010558:	b15b      	cbz	r3, 8010572 <__smakebuf_r+0x70>
 801055a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801055e:	4630      	mov	r0, r6
 8010560:	f000 f838 	bl	80105d4 <_isatty_r>
 8010564:	b128      	cbz	r0, 8010572 <__smakebuf_r+0x70>
 8010566:	89a3      	ldrh	r3, [r4, #12]
 8010568:	f023 0303 	bic.w	r3, r3, #3
 801056c:	f043 0301 	orr.w	r3, r3, #1
 8010570:	81a3      	strh	r3, [r4, #12]
 8010572:	89a3      	ldrh	r3, [r4, #12]
 8010574:	431d      	orrs	r5, r3
 8010576:	81a5      	strh	r5, [r4, #12]
 8010578:	e7cf      	b.n	801051a <__smakebuf_r+0x18>

0801057a <memmove>:
 801057a:	4288      	cmp	r0, r1
 801057c:	b510      	push	{r4, lr}
 801057e:	eb01 0402 	add.w	r4, r1, r2
 8010582:	d902      	bls.n	801058a <memmove+0x10>
 8010584:	4284      	cmp	r4, r0
 8010586:	4623      	mov	r3, r4
 8010588:	d807      	bhi.n	801059a <memmove+0x20>
 801058a:	1e43      	subs	r3, r0, #1
 801058c:	42a1      	cmp	r1, r4
 801058e:	d008      	beq.n	80105a2 <memmove+0x28>
 8010590:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010594:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010598:	e7f8      	b.n	801058c <memmove+0x12>
 801059a:	4402      	add	r2, r0
 801059c:	4601      	mov	r1, r0
 801059e:	428a      	cmp	r2, r1
 80105a0:	d100      	bne.n	80105a4 <memmove+0x2a>
 80105a2:	bd10      	pop	{r4, pc}
 80105a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80105a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80105ac:	e7f7      	b.n	801059e <memmove+0x24>
	...

080105b0 <_fstat_r>:
 80105b0:	b538      	push	{r3, r4, r5, lr}
 80105b2:	4d07      	ldr	r5, [pc, #28]	@ (80105d0 <_fstat_r+0x20>)
 80105b4:	2300      	movs	r3, #0
 80105b6:	4604      	mov	r4, r0
 80105b8:	4608      	mov	r0, r1
 80105ba:	4611      	mov	r1, r2
 80105bc:	602b      	str	r3, [r5, #0]
 80105be:	f7f1 fd0f 	bl	8001fe0 <_fstat>
 80105c2:	1c43      	adds	r3, r0, #1
 80105c4:	d102      	bne.n	80105cc <_fstat_r+0x1c>
 80105c6:	682b      	ldr	r3, [r5, #0]
 80105c8:	b103      	cbz	r3, 80105cc <_fstat_r+0x1c>
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	bd38      	pop	{r3, r4, r5, pc}
 80105ce:	bf00      	nop
 80105d0:	24000864 	.word	0x24000864

080105d4 <_isatty_r>:
 80105d4:	b538      	push	{r3, r4, r5, lr}
 80105d6:	4d06      	ldr	r5, [pc, #24]	@ (80105f0 <_isatty_r+0x1c>)
 80105d8:	2300      	movs	r3, #0
 80105da:	4604      	mov	r4, r0
 80105dc:	4608      	mov	r0, r1
 80105de:	602b      	str	r3, [r5, #0]
 80105e0:	f7f1 fd0e 	bl	8002000 <_isatty>
 80105e4:	1c43      	adds	r3, r0, #1
 80105e6:	d102      	bne.n	80105ee <_isatty_r+0x1a>
 80105e8:	682b      	ldr	r3, [r5, #0]
 80105ea:	b103      	cbz	r3, 80105ee <_isatty_r+0x1a>
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	bd38      	pop	{r3, r4, r5, pc}
 80105f0:	24000864 	.word	0x24000864

080105f4 <__assert_func>:
 80105f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105f6:	4614      	mov	r4, r2
 80105f8:	461a      	mov	r2, r3
 80105fa:	4b09      	ldr	r3, [pc, #36]	@ (8010620 <__assert_func+0x2c>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4605      	mov	r5, r0
 8010600:	68d8      	ldr	r0, [r3, #12]
 8010602:	b954      	cbnz	r4, 801061a <__assert_func+0x26>
 8010604:	4b07      	ldr	r3, [pc, #28]	@ (8010624 <__assert_func+0x30>)
 8010606:	461c      	mov	r4, r3
 8010608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801060c:	9100      	str	r1, [sp, #0]
 801060e:	462b      	mov	r3, r5
 8010610:	4905      	ldr	r1, [pc, #20]	@ (8010628 <__assert_func+0x34>)
 8010612:	f000 f829 	bl	8010668 <fiprintf>
 8010616:	f000 f839 	bl	801068c <abort>
 801061a:	4b04      	ldr	r3, [pc, #16]	@ (801062c <__assert_func+0x38>)
 801061c:	e7f4      	b.n	8010608 <__assert_func+0x14>
 801061e:	bf00      	nop
 8010620:	24000188 	.word	0x24000188
 8010624:	08010c3b 	.word	0x08010c3b
 8010628:	08010c0d 	.word	0x08010c0d
 801062c:	08010c00 	.word	0x08010c00

08010630 <_calloc_r>:
 8010630:	b570      	push	{r4, r5, r6, lr}
 8010632:	fba1 5402 	umull	r5, r4, r1, r2
 8010636:	b93c      	cbnz	r4, 8010648 <_calloc_r+0x18>
 8010638:	4629      	mov	r1, r5
 801063a:	f7fc f8b5 	bl	800c7a8 <_malloc_r>
 801063e:	4606      	mov	r6, r0
 8010640:	b928      	cbnz	r0, 801064e <_calloc_r+0x1e>
 8010642:	2600      	movs	r6, #0
 8010644:	4630      	mov	r0, r6
 8010646:	bd70      	pop	{r4, r5, r6, pc}
 8010648:	220c      	movs	r2, #12
 801064a:	6002      	str	r2, [r0, #0]
 801064c:	e7f9      	b.n	8010642 <_calloc_r+0x12>
 801064e:	462a      	mov	r2, r5
 8010650:	4621      	mov	r1, r4
 8010652:	f7fd fc4b 	bl	800deec <memset>
 8010656:	e7f5      	b.n	8010644 <_calloc_r+0x14>

08010658 <_malloc_usable_size_r>:
 8010658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801065c:	1f18      	subs	r0, r3, #4
 801065e:	2b00      	cmp	r3, #0
 8010660:	bfbc      	itt	lt
 8010662:	580b      	ldrlt	r3, [r1, r0]
 8010664:	18c0      	addlt	r0, r0, r3
 8010666:	4770      	bx	lr

08010668 <fiprintf>:
 8010668:	b40e      	push	{r1, r2, r3}
 801066a:	b503      	push	{r0, r1, lr}
 801066c:	4601      	mov	r1, r0
 801066e:	ab03      	add	r3, sp, #12
 8010670:	4805      	ldr	r0, [pc, #20]	@ (8010688 <fiprintf+0x20>)
 8010672:	f853 2b04 	ldr.w	r2, [r3], #4
 8010676:	6800      	ldr	r0, [r0, #0]
 8010678:	9301      	str	r3, [sp, #4]
 801067a:	f7fe ffc7 	bl	800f60c <_vfiprintf_r>
 801067e:	b002      	add	sp, #8
 8010680:	f85d eb04 	ldr.w	lr, [sp], #4
 8010684:	b003      	add	sp, #12
 8010686:	4770      	bx	lr
 8010688:	24000188 	.word	0x24000188

0801068c <abort>:
 801068c:	b508      	push	{r3, lr}
 801068e:	2006      	movs	r0, #6
 8010690:	f000 f82c 	bl	80106ec <raise>
 8010694:	2001      	movs	r0, #1
 8010696:	f7f1 fc6f 	bl	8001f78 <_exit>

0801069a <_raise_r>:
 801069a:	291f      	cmp	r1, #31
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	4605      	mov	r5, r0
 80106a0:	460c      	mov	r4, r1
 80106a2:	d904      	bls.n	80106ae <_raise_r+0x14>
 80106a4:	2316      	movs	r3, #22
 80106a6:	6003      	str	r3, [r0, #0]
 80106a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106ac:	bd38      	pop	{r3, r4, r5, pc}
 80106ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80106b0:	b112      	cbz	r2, 80106b8 <_raise_r+0x1e>
 80106b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106b6:	b94b      	cbnz	r3, 80106cc <_raise_r+0x32>
 80106b8:	4628      	mov	r0, r5
 80106ba:	f000 f831 	bl	8010720 <_getpid_r>
 80106be:	4622      	mov	r2, r4
 80106c0:	4601      	mov	r1, r0
 80106c2:	4628      	mov	r0, r5
 80106c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106c8:	f000 b818 	b.w	80106fc <_kill_r>
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	d00a      	beq.n	80106e6 <_raise_r+0x4c>
 80106d0:	1c59      	adds	r1, r3, #1
 80106d2:	d103      	bne.n	80106dc <_raise_r+0x42>
 80106d4:	2316      	movs	r3, #22
 80106d6:	6003      	str	r3, [r0, #0]
 80106d8:	2001      	movs	r0, #1
 80106da:	e7e7      	b.n	80106ac <_raise_r+0x12>
 80106dc:	2100      	movs	r1, #0
 80106de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80106e2:	4620      	mov	r0, r4
 80106e4:	4798      	blx	r3
 80106e6:	2000      	movs	r0, #0
 80106e8:	e7e0      	b.n	80106ac <_raise_r+0x12>
	...

080106ec <raise>:
 80106ec:	4b02      	ldr	r3, [pc, #8]	@ (80106f8 <raise+0xc>)
 80106ee:	4601      	mov	r1, r0
 80106f0:	6818      	ldr	r0, [r3, #0]
 80106f2:	f7ff bfd2 	b.w	801069a <_raise_r>
 80106f6:	bf00      	nop
 80106f8:	24000188 	.word	0x24000188

080106fc <_kill_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	4d07      	ldr	r5, [pc, #28]	@ (801071c <_kill_r+0x20>)
 8010700:	2300      	movs	r3, #0
 8010702:	4604      	mov	r4, r0
 8010704:	4608      	mov	r0, r1
 8010706:	4611      	mov	r1, r2
 8010708:	602b      	str	r3, [r5, #0]
 801070a:	f7f1 fc25 	bl	8001f58 <_kill>
 801070e:	1c43      	adds	r3, r0, #1
 8010710:	d102      	bne.n	8010718 <_kill_r+0x1c>
 8010712:	682b      	ldr	r3, [r5, #0]
 8010714:	b103      	cbz	r3, 8010718 <_kill_r+0x1c>
 8010716:	6023      	str	r3, [r4, #0]
 8010718:	bd38      	pop	{r3, r4, r5, pc}
 801071a:	bf00      	nop
 801071c:	24000864 	.word	0x24000864

08010720 <_getpid_r>:
 8010720:	f7f1 bc12 	b.w	8001f48 <_getpid>

08010724 <_init>:
 8010724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010726:	bf00      	nop
 8010728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801072a:	bc08      	pop	{r3}
 801072c:	469e      	mov	lr, r3
 801072e:	4770      	bx	lr

08010730 <_fini>:
 8010730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010732:	bf00      	nop
 8010734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010736:	bc08      	pop	{r3}
 8010738:	469e      	mov	lr, r3
 801073a:	4770      	bx	lr
