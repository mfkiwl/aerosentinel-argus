
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b98c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  0801bc60  0801bc60  0001cc60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c730  0801c730  0001d730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c738  0801c738  0001d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801c73c  0801c73c  0001d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000330  24000000  0801c740  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d84  24000330  0801ca70  0001e330  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240020b4  0801ca70  0001f0b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001e330  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034135  00000000  00000000  0001e35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005375  00000000  00000000  00052493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029e8  00000000  00000000  00057808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000020cf  00000000  00000000  0005a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009da0  00000000  00000000  0005c2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000375bb  00000000  00000000  0006605f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018a9e1  00000000  00000000  0009d61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00227ffb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ca2c  00000000  00000000  00228040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  00234a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000330 	.word	0x24000330
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801bc44 	.word	0x0801bc44

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000334 	.word	0x24000334
 800030c:	0801bc44 	.word	0x0801bc44

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <bmi3_init>:
/*!
 * @brief This API is the entry point for bmi3 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi3_init(struct bmi3_dev *dev)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id[2] = { 0 };
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f001 fc5d 	bl	8002364 <null_ptr_check>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10d      	bne.n	8000ad2 <bmi3_init+0x3a>
    {
        dev->chip_id = 0;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI3_SPI_INTF)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7a5b      	ldrb	r3, [r3, #9]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <bmi3_init+0x34>
        {
            dev->dummy_byte = 1;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	72da      	strb	r2, [r3, #11]
 8000aca:	e002      	b.n	8000ad2 <bmi3_init+0x3a>
        }
        else
        {
            dev->dummy_byte = 2;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2202      	movs	r2, #2
 8000ad0:	72da      	strb	r2, [r3, #11]
        }
    }

    if (rslt == BMI3_OK)
 8000ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d118      	bne.n	8000b0c <bmi3_init+0x74>
    {
        /* Perform soft-reset to bring all register values to their default values */
        rslt = bmi3_soft_reset(dev);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 f8d4 	bl	8000c88 <bmi3_soft_reset>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10f      	bne.n	8000b0c <bmi3_init+0x74>
        {
            /* Read chip-id of the BMI3 sensor */
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, chip_id, 2, dev);
 8000aec:	f107 010c 	add.w	r1, r7, #12
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2202      	movs	r2, #2
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f821 	bl	8000b3c <bmi3_get_regs>
 8000afa:	4603      	mov	r3, r0
 8000afc:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <bmi3_init+0x74>
            {
                dev->chip_id = chip_id[0];
 8000b06:	7b3a      	ldrb	r2, [r7, #12]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (rslt == BMI3_OK)
 8000b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10d      	bne.n	8000b30 <bmi3_init+0x98>
    {
        if (((chip_id[1] & BMI3_REV_ID_MASK) >> BMI3_REV_ID_POS) == BMI3_ENABLE)
 8000b14:	7b7b      	ldrb	r3, [r7, #13]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d104      	bne.n	8000b28 <bmi3_init+0x90>
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_14_BIT_MASK;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8000b24:	839a      	strh	r2, [r3, #28]
 8000b26:	e003      	b.n	8000b30 <bmi3_init+0x98>
        }
        else
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_13_BIT_MASK;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b2e:	839a      	strh	r2, [r3, #28]
        }
    }

    return rslt;
 8000b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b0a7      	sub	sp, #156	@ 0x9c
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f001 fc05 	bl	8002364 <null_ptr_check>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 8000b60:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d145      	bne.n	8000bf4 <bmi3_get_regs+0xb8>
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d042      	beq.n	8000bf4 <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7a5b      	ldrb	r3, [r3, #9]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b7c:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691c      	ldr	r4, [r3, #16]
 8000b82:	89bb      	ldrh	r3, [r7, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	7ad2      	ldrb	r2, [r2, #11]
 8000b88:	4413      	add	r3, r2
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f107 0114 	add.w	r1, r7, #20
 8000b94:	7bf8      	ldrb	r0, [r7, #15]
 8000b96:	47a0      	blx	r4
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6852      	ldr	r2, [r2, #4]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	2002      	movs	r0, #2
 8000bac:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d119      	bne.n	8000bec <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8000bb8:	e012      	b.n	8000be0 <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8000bba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	7ad2      	ldrb	r2, [r2, #11]
 8000bc2:	441a      	add	r2, r3
 8000bc4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	440b      	add	r3, r1
 8000bcc:	3298      	adds	r2, #152	@ 0x98
 8000bce:	443a      	add	r2, r7
 8000bd0:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8000bd4:	701a      	strb	r2, [r3, #0]
                index++;
 8000bd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000bda:	3301      	adds	r3, #1
 8000bdc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8000be0:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000be4:	89bb      	ldrh	r3, [r7, #12]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3e7      	bcc.n	8000bba <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8000bea:	e006      	b.n	8000bfa <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 8000bec:	23fe      	movs	r3, #254	@ 0xfe
 8000bee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8000bf2:	e002      	b.n	8000bfa <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000bf4:	23ff      	movs	r3, #255	@ 0xff
 8000bf6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8000bfa:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	379c      	adds	r7, #156	@ 0x9c
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd90      	pop	{r4, r7, pc}

08000c06 <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8000c06:	b590      	push	{r4, r7, lr}
 8000c08:	b087      	sub	sp, #28
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	4603      	mov	r3, r0
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	4613      	mov	r3, r2
 8000c16:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f001 fba3 	bl	8002364 <null_ptr_check>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 8000c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d125      	bne.n	8000c76 <bmi3_set_regs+0x70>
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d022      	beq.n	8000c76 <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7a5b      	ldrb	r3, [r3, #9]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c3e:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695c      	ldr	r4, [r3, #20]
 8000c44:	89ba      	ldrh	r2, [r7, #12]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	7bf8      	ldrb	r0, [r7, #15]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	47a0      	blx	r4
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6852      	ldr	r2, [r2, #4]
 8000c60:	4611      	mov	r1, r2
 8000c62:	2002      	movs	r0, #2
 8000c64:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 8000c70:	23fe      	movs	r3, #254	@ 0xfe
 8000c72:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8000c74:	e001      	b.n	8000c7a <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000c76:	23ff      	movs	r3, #255	@ 0xff
 8000c78:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd90      	pop	{r4, r7, pc}
	...

08000c88 <bmi3_soft_reset>:
/*!
 * @brief This API resets bmi3 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi3_soft_reset(struct bmi3_dev *dev)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to read the dummy byte */
    uint8_t dummy_byte[2] = { 0 };
 8000c90:	2300      	movs	r3, #0
 8000c92:	83bb      	strh	r3, [r7, #28]

    /* Variable to store feature data array */
    uint8_t feature_data[2] = { 0x2c, 0x01 };
 8000c94:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000c98:	833b      	strh	r3, [r7, #24]

    /* Variable to enable feature engine bit */
    uint8_t feature_engine_en[2] = { BMI3_ENABLE, 0 };
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	82bb      	strh	r3, [r7, #20]

    /* Variable to store status value for feature engine enable */
    uint8_t reg_data[2] = { 0 };
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	823b      	strh	r3, [r7, #16]

    /* Array variable to store feature IO status */
    uint8_t feature_io_status[2] = { BMI3_ENABLE, 0 };
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	81bb      	strh	r3, [r7, #12]

    uint8_t loop = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	77bb      	strb	r3, [r7, #30]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f001 fb5a 	bl	8002364 <null_ptr_check>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI3_OK)
 8000cb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d16f      	bne.n	8000d9c <bmi3_soft_reset+0x114>
    {
        /* Reset bmi3 device */
        rslt = bmi3_set_command_register(BMI3_CMD_SOFT_RESET, dev);
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	f64d 60af 	movw	r0, #57007	@ 0xdeaf
 8000cc2:	f000 f873 	bl	8000dac <bmi3_set_command_register>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	77fb      	strb	r3, [r7, #31]
        dev->delay_us(BMI3_SOFT_RESET_DELAY, dev->intf_ptr);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	6852      	ldr	r2, [r2, #4]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cd8:	4798      	blx	r3

        /* Performing a dummy read after a soft-reset */
        if ((rslt == BMI3_OK) && (dev->intf == BMI3_SPI_INTF))
 8000cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <bmi3_soft_reset+0x74>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7a5b      	ldrb	r3, [r3, #9]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d108      	bne.n	8000cfc <bmi3_soft_reset+0x74>
        {
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, dummy_byte, 2, dev);
 8000cea:	f107 011c 	add.w	r1, r7, #28
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ff22 	bl	8000b3c <bmi3_get_regs>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	77fb      	strb	r3, [r7, #31]
        }

        /* Enabling Feature engine */
        if (rslt == BMI3_OK)
 8000cfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d108      	bne.n	8000d16 <bmi3_soft_reset+0x8e>
        {
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO2, feature_data, 2, dev);
 8000d04:	f107 0118 	add.w	r1, r7, #24
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	2012      	movs	r0, #18
 8000d0e:	f7ff ff7a 	bl	8000c06 <bmi3_set_regs>
 8000d12:	4603      	mov	r3, r0
 8000d14:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8000d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d108      	bne.n	8000d30 <bmi3_soft_reset+0xa8>
        {
            /* Enabling feature status bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, feature_io_status, 2, dev);
 8000d1e:	f107 010c 	add.w	r1, r7, #12
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2202      	movs	r2, #2
 8000d26:	2014      	movs	r0, #20
 8000d28:	f7ff ff6d 	bl	8000c06 <bmi3_set_regs>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8000d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d108      	bne.n	8000d4a <bmi3_soft_reset+0xc2>
        {
            /* Enable feature engine bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_CTRL, feature_engine_en, 2, dev);
 8000d38:	f107 0114 	add.w	r1, r7, #20
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	2040      	movs	r0, #64	@ 0x40
 8000d42:	f7ff ff60 	bl	8000c06 <bmi3_set_regs>
 8000d46:	4603      	mov	r3, r0
 8000d48:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8000d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d124      	bne.n	8000d9c <bmi3_soft_reset+0x114>
        {
            /* Checking the status bit for feature engine enable */
            while (loop <= 10)
 8000d52:	e020      	b.n	8000d96 <bmi3_soft_reset+0x10e>
            {
                dev->delay_us(100000, dev->intf_ptr);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6852      	ldr	r2, [r2, #4]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <bmi3_soft_reset+0x120>)
 8000d60:	4798      	blx	r3

                rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO1, reg_data, 2, dev);
 8000d62:	f107 0110 	add.w	r1, r7, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2202      	movs	r2, #2
 8000d6a:	2011      	movs	r0, #17
 8000d6c:	f7ff fee6 	bl	8000b3c <bmi3_get_regs>
 8000d70:	4603      	mov	r3, r0
 8000d72:	77fb      	strb	r3, [r7, #31]

                if (rslt == BMI3_OK)
 8000d74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d109      	bne.n	8000d90 <bmi3_soft_reset+0x108>
                {
                    if (reg_data[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK)
 8000d7c:	7c3b      	ldrb	r3, [r7, #16]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <bmi3_soft_reset+0x104>
                    {
                        rslt = BMI3_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	77fb      	strb	r3, [r7, #31]

                        break;
 8000d8a:	e007      	b.n	8000d9c <bmi3_soft_reset+0x114>
                    }
                    else
                    {
                        rslt = BMI3_E_FEATURE_ENGINE_STATUS;
 8000d8c:	23f2      	movs	r3, #242	@ 0xf2
 8000d8e:	77fb      	strb	r3, [r7, #31]
                    }
                }

                loop++;
 8000d90:	7fbb      	ldrb	r3, [r7, #30]
 8000d92:	3301      	adds	r3, #1
 8000d94:	77bb      	strb	r3, [r7, #30]
            while (loop <= 10)
 8000d96:	7fbb      	ldrb	r3, [r7, #30]
 8000d98:	2b0a      	cmp	r3, #10
 8000d9a:	d9db      	bls.n	8000d54 <bmi3_soft_reset+0xcc>
            }
        }
    }

    return rslt;
 8000d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	000186a0 	.word	0x000186a0

08000dac <bmi3_set_command_register>:

/*!
 * @brief This API writes the available sensor specific commands to the sensor.
 */
int8_t bmi3_set_command_register(uint16_t command, struct bmi3_dev *dev)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store command value */
    uint8_t reg_data[2] = { 0 };
 8000db8:	2300      	movs	r3, #0
 8000dba:	81bb      	strh	r3, [r7, #12]

    reg_data[0] = (uint8_t)(command & BMI3_SET_LOW_BYTE);
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	733b      	strb	r3, [r7, #12]
    reg_data[1] = (uint8_t)((command & BMI3_SET_HIGH_BYTE) >> 8);
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	737b      	strb	r3, [r7, #13]

    /* Set the command in the command register */
    rslt = bmi3_set_regs(BMI3_REG_CMD, reg_data, 2, dev);
 8000dcc:	f107 010c 	add.w	r1, r7, #12
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	207e      	movs	r0, #126	@ 0x7e
 8000dd6:	f7ff ff16 	bl	8000c06 <bmi3_set_regs>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <bmi3_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi3_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	460b      	mov	r3, r1
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f001 fab2 	bl	8002364 <null_ptr_check>
 8000e00:	4603      	mov	r3, r0
 8000e02:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8000e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 80f1 	bne.w	8000ff0 <bmi3_set_sensor_config+0x204>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80ed 	beq.w	8000ff0 <bmi3_set_sensor_config+0x204>
    {
        for (loop = 0; loop < n_sens; loop++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	75bb      	strb	r3, [r7, #22]
 8000e1a:	e0e3      	b.n	8000fe4 <bmi3_set_sensor_config+0x1f8>
        {
            switch (sens_cfg[loop].type)
 8000e1c:	7dbb      	ldrb	r3, [r7, #22]
 8000e1e:	222e      	movs	r2, #46	@ 0x2e
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b0c      	cmp	r3, #12
 8000e2c:	f200 80d4 	bhi.w	8000fd8 <bmi3_set_sensor_config+0x1ec>
 8000e30:	a201      	add	r2, pc, #4	@ (adr r2, 8000e38 <bmi3_set_sensor_config+0x4c>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000e6d 	.word	0x08000e6d
 8000e3c:	08000e89 	.word	0x08000e89
 8000e40:	08000edd 	.word	0x08000edd
 8000e44:	08000ea5 	.word	0x08000ea5
 8000e48:	08000ec1 	.word	0x08000ec1
 8000e4c:	08000f4d 	.word	0x08000f4d
 8000e50:	08000f15 	.word	0x08000f15
 8000e54:	08000f31 	.word	0x08000f31
 8000e58:	08000ef9 	.word	0x08000ef9
 8000e5c:	08000f69 	.word	0x08000f69
 8000e60:	08000f85 	.word	0x08000f85
 8000e64:	08000fa1 	.word	0x08000fa1
 8000e68:	08000fbd 	.word	0x08000fbd
            {
                case BMI3_ACCEL:
                    rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8000e6c:	7dbb      	ldrb	r3, [r7, #22]
 8000e6e:	222e      	movs	r2, #46	@ 0x2e
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fda6 	bl	80019ce <set_accel_config>
 8000e82:	4603      	mov	r3, r0
 8000e84:	75fb      	strb	r3, [r7, #23]
                    break;
 8000e86:	e0aa      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_GYRO:
                    rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8000e88:	7dbb      	ldrb	r3, [r7, #22]
 8000e8a:	222e      	movs	r2, #46	@ 0x2e
 8000e8c:	fb02 f303 	mul.w	r3, r2, r3
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	3302      	adds	r3, #2
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 ff3a 	bl	8001d12 <set_gyro_config>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
                    break;
 8000ea2:	e09c      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ANY_MOTION:
                    rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8000ea4:	7dbb      	ldrb	r3, [r7, #22]
 8000ea6:	222e      	movs	r2, #46	@ 0x2e
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fb65 	bl	8002584 <set_any_motion_config>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	75fb      	strb	r3, [r7, #23]
                    break;
 8000ebe:	e08e      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_NO_MOTION:
                    rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8000ec0:	7dbb      	ldrb	r3, [r7, #22]
 8000ec2:	222e      	movs	r2, #46	@ 0x2e
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fcc1 	bl	8002858 <set_no_motion_config>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
                    break;
 8000eda:	e080      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_SIG_MOTION:
                    rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8000edc:	7dbb      	ldrb	r3, [r7, #22]
 8000ede:	222e      	movs	r2, #46	@ 0x2e
 8000ee0:	fb02 f303 	mul.w	r3, r2, r3
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 ff0f 	bl	8002d10 <set_sig_motion_config>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	75fb      	strb	r3, [r7, #23]
                    break;
 8000ef6:	e072      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_FLAT:
                    rslt = set_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8000ef8:	7dbb      	ldrb	r3, [r7, #22]
 8000efa:	222e      	movs	r2, #46	@ 0x2e
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	3302      	adds	r3, #2
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fdf3 	bl	8002af4 <set_flat_config>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f12:	e064      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_TILT:
                    rslt = set_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 8000f14:	7dbb      	ldrb	r3, [r7, #22]
 8000f16:	222e      	movs	r2, #46	@ 0x2e
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	3302      	adds	r3, #2
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 f81d 	bl	8002f64 <set_tilt_config>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f2e:	e056      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ORIENTATION:
                    rslt = set_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8000f30:	7dbb      	ldrb	r3, [r7, #22]
 8000f32:	222e      	movs	r2, #46	@ 0x2e
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f8fa 	bl	800313a <set_orientation_config>
 8000f46:	4603      	mov	r3, r0
 8000f48:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f4a:	e048      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_STEP_COUNTER:
                    rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8000f4c:	7dbb      	ldrb	r3, [r7, #22]
 8000f4e:	222e      	movs	r2, #46	@ 0x2e
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fbad 	bl	80036bc <set_step_config>
 8000f62:	4603      	mov	r3, r0
 8000f64:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f66:	e03a      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_TAP:
                    rslt = set_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8000f68:	7dbb      	ldrb	r3, [r7, #22]
 8000f6a:	222e      	movs	r2, #46	@ 0x2e
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	3302      	adds	r3, #2
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fedf 	bl	8003d3c <set_tap_config>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f82:	e02c      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_ACCEL:
                    rslt = set_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 8000f84:	7dbb      	ldrb	r3, [r7, #22]
 8000f86:	222e      	movs	r2, #46	@ 0x2e
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	3302      	adds	r3, #2
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 f8cb 	bl	8004130 <set_alternate_accel_config>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f9e:	e01e      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_GYRO:
                    rslt = set_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	222e      	movs	r2, #46	@ 0x2e
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	3302      	adds	r3, #2
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 f946 	bl	8004242 <set_alternate_gyro_config>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	75fb      	strb	r3, [r7, #23]
                    break;
 8000fba:	e010      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = set_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	222e      	movs	r2, #46	@ 0x2e
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 f9c1 	bl	8004354 <set_alternate_auto_config>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	75fb      	strb	r3, [r7, #23]
                    break;
 8000fd6:	e002      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8000fd8:	23fa      	movs	r3, #250	@ 0xfa
 8000fda:	75fb      	strb	r3, [r7, #23]
                    break;
 8000fdc:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 8000fde:	7dbb      	ldrb	r3, [r7, #22]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	75bb      	strb	r3, [r7, #22]
 8000fe4:	7dba      	ldrb	r2, [r7, #22]
 8000fe6:	7afb      	ldrb	r3, [r7, #11]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f4ff af17 	bcc.w	8000e1c <bmi3_set_sensor_config+0x30>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8000fee:	e001      	b.n	8000ff4 <bmi3_set_sensor_config+0x208>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000ff0:	23ff      	movs	r3, #255	@ 0xff
 8000ff2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <bmi3_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi3_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	460b      	mov	r3, r1
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define loop */
    uint8_t loop = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f001 f9a6 	bl	8002364 <null_ptr_check>
 8001018:	4603      	mov	r3, r0
 800101a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 800101c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001020:	2b00      	cmp	r3, #0
 8001022:	f040 80f1 	bne.w	8001208 <bmi3_get_sensor_config+0x208>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80ed 	beq.w	8001208 <bmi3_get_sensor_config+0x208>
    {
        for (loop = 0; loop < n_sens; loop++)
 800102e:	2300      	movs	r3, #0
 8001030:	75bb      	strb	r3, [r7, #22]
 8001032:	e0e3      	b.n	80011fc <bmi3_get_sensor_config+0x1fc>
        {
            switch (sens_cfg[loop].type)
 8001034:	7dbb      	ldrb	r3, [r7, #22]
 8001036:	222e      	movs	r2, #46	@ 0x2e
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b0c      	cmp	r3, #12
 8001044:	f200 80d4 	bhi.w	80011f0 <bmi3_get_sensor_config+0x1f0>
 8001048:	a201      	add	r2, pc, #4	@ (adr r2, 8001050 <bmi3_get_sensor_config+0x50>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001085 	.word	0x08001085
 8001054:	080010a1 	.word	0x080010a1
 8001058:	080010f5 	.word	0x080010f5
 800105c:	080010bd 	.word	0x080010bd
 8001060:	080010d9 	.word	0x080010d9
 8001064:	08001165 	.word	0x08001165
 8001068:	0800112d 	.word	0x0800112d
 800106c:	08001149 	.word	0x08001149
 8001070:	08001111 	.word	0x08001111
 8001074:	08001181 	.word	0x08001181
 8001078:	0800119d 	.word	0x0800119d
 800107c:	080011b9 	.word	0x080011b9
 8001080:	080011d5 	.word	0x080011d5
            {
                case BMI3_ACCEL:
                    rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8001084:	7dbb      	ldrb	r3, [r7, #22]
 8001086:	222e      	movs	r2, #46	@ 0x2e
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	3302      	adds	r3, #2
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fd50 	bl	8001b3a <get_accel_config>
 800109a:	4603      	mov	r3, r0
 800109c:	75fb      	strb	r3, [r7, #23]
                    break;
 800109e:	e0aa      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_GYRO:
                    rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80010a0:	7dbb      	ldrb	r3, [r7, #22]
 80010a2:	222e      	movs	r2, #46	@ 0x2e
 80010a4:	fb02 f303 	mul.w	r3, r2, r3
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	3302      	adds	r3, #2
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 f876 	bl	80021a2 <get_gyro_config>
 80010b6:	4603      	mov	r3, r0
 80010b8:	75fb      	strb	r3, [r7, #23]
                    break;
 80010ba:	e09c      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ANY_MOTION:
                    rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 80010bc:	7dbb      	ldrb	r3, [r7, #22]
 80010be:	222e      	movs	r2, #46	@ 0x2e
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	3302      	adds	r3, #2
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f9c7 	bl	8002460 <get_any_motion_config>
 80010d2:	4603      	mov	r3, r0
 80010d4:	75fb      	strb	r3, [r7, #23]
                    break;
 80010d6:	e08e      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_NO_MOTION:
                    rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 80010d8:	7dbb      	ldrb	r3, [r7, #22]
 80010da:	222e      	movs	r2, #46	@ 0x2e
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	3302      	adds	r3, #2
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fb23 	bl	8002734 <get_no_motion_config>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]
                    break;
 80010f2:	e080      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_SIG_MOTION:
                    rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80010f4:	7dbb      	ldrb	r3, [r7, #22]
 80010f6:	222e      	movs	r2, #46	@ 0x2e
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	3302      	adds	r3, #2
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fd79 	bl	8002bfc <get_sig_motion_config>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
                    break;
 800110e:	e072      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_FLAT:
                    rslt = get_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8001110:	7dbb      	ldrb	r3, [r7, #22]
 8001112:	222e      	movs	r2, #46	@ 0x2e
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	3302      	adds	r3, #2
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fc6f 	bl	8002a04 <get_flat_config>
 8001126:	4603      	mov	r3, r0
 8001128:	75fb      	strb	r3, [r7, #23]
                    break;
 800112a:	e064      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TILT:
                    rslt = get_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	222e      	movs	r2, #46	@ 0x2e
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	3302      	adds	r3, #2
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fea3 	bl	8002e88 <get_tilt_config>
 8001142:	4603      	mov	r3, r0
 8001144:	75fb      	strb	r3, [r7, #23]
                    break;
 8001146:	e056      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ORIENTATION:
                    rslt = get_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8001148:	7dbb      	ldrb	r3, [r7, #22]
 800114a:	222e      	movs	r2, #46	@ 0x2e
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	3302      	adds	r3, #2
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	f001 ff64 	bl	8003026 <get_orientation_config>
 800115e:	4603      	mov	r3, r0
 8001160:	75fb      	strb	r3, [r7, #23]
                    break;
 8001162:	e048      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8001164:	7dbb      	ldrb	r3, [r7, #22]
 8001166:	222e      	movs	r2, #46	@ 0x2e
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	3302      	adds	r3, #2
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f002 f899 	bl	80032ac <get_step_config>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
                    break;
 800117e:	e03a      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TAP:
                    rslt = get_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8001180:	7dbb      	ldrb	r3, [r7, #22]
 8001182:	222e      	movs	r2, #46	@ 0x2e
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	3302      	adds	r3, #2
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fd15 	bl	8003bc0 <get_tap_config>
 8001196:	4603      	mov	r3, r0
 8001198:	75fb      	strb	r3, [r7, #23]
                    break;
 800119a:	e02c      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_ACCEL:
                    rslt = get_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 800119c:	7dbb      	ldrb	r3, [r7, #22]
 800119e:	222e      	movs	r2, #46	@ 0x2e
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	3302      	adds	r3, #2
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f80c 	bl	80041ca <get_alternate_accel_config>
 80011b2:	4603      	mov	r3, r0
 80011b4:	75fb      	strb	r3, [r7, #23]
                    break;
 80011b6:	e01e      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_GYRO:
                    rslt = get_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 80011b8:	7dbb      	ldrb	r3, [r7, #22]
 80011ba:	222e      	movs	r2, #46	@ 0x2e
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	3302      	adds	r3, #2
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 f887 	bl	80042dc <get_alternate_gyro_config>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
                    break;
 80011d2:	e010      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = get_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 80011d4:	7dbb      	ldrb	r3, [r7, #22]
 80011d6:	222e      	movs	r2, #46	@ 0x2e
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	3302      	adds	r3, #2
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 f8ff 	bl	80043e8 <get_alternate_auto_config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
                    break;
 80011ee:	e002      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 80011f0:	23fa      	movs	r3, #250	@ 0xfa
 80011f2:	75fb      	strb	r3, [r7, #23]
                    break;
 80011f4:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 80011f6:	7dbb      	ldrb	r3, [r7, #22]
 80011f8:	3301      	adds	r3, #1
 80011fa:	75bb      	strb	r3, [r7, #22]
 80011fc:	7dba      	ldrb	r2, [r7, #22]
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	429a      	cmp	r2, r3
 8001202:	f4ff af17 	bcc.w	8001034 <bmi3_get_sensor_config+0x34>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001206:	e001      	b.n	800120c <bmi3_get_sensor_config+0x20c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001208:	23ff      	movs	r3, #255	@ 0xff
 800120a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800120c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <bmi3_map_interrupt>:

/*!
 * @brief This API maps/un-maps data interrupts to that of interrupt pins.
 */
int8_t bmi3_map_interrupt(struct bmi3_map_int map_int, struct bmi3_dev *dev)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b08f      	sub	sp, #60	@ 0x3c
 800121c:	af00      	add	r7, sp, #0
 800121e:	463c      	mov	r4, r7
 8001220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store register data */
    uint8_t reg_data[4] = { 0 };
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
    uint16_t no_motion_out, any_motion_out, flat_out, orientation_out, step_detector_out, step_counter_out,
             sig_motion_out, tilt_out;
    uint16_t tap_out, i3c_out, err_status, temp, gyr, acc, fwm, ffull;

    /* Read interrupt map1 and map2 and register */
    rslt = bmi3_get_regs(BMI3_REG_INT_MAP1, reg_data, 4, dev);
 8001228:	f107 0110 	add.w	r1, r7, #16
 800122c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800122e:	2204      	movs	r2, #4
 8001230:	203a      	movs	r0, #58	@ 0x3a
 8001232:	f7ff fc83 	bl	8000b3c <bmi3_get_regs>
 8001236:	4603      	mov	r3, r0
 8001238:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (rslt == BMI3_OK)
 800123c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 8132 	bne.w	80014aa <bmi3_map_interrupt+0x292>
    {
        no_motion_out =
            (BMI3_SET_BIT_POS0(reg_data[0], BMI3_NO_MOTION_OUT, map_int.no_motion_out) & BMI3_NO_MOTION_OUT_MASK);
 8001246:	7c3b      	ldrb	r3, [r7, #16]
 8001248:	b21b      	sxth	r3, r3
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	b21a      	sxth	r2, r3
 8001250:	783b      	ldrb	r3, [r7, #0]
 8001252:	b21b      	sxth	r3, r3
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
        no_motion_out =
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	86bb      	strh	r3, [r7, #52]	@ 0x34
        any_motion_out =
            (BMI3_SET_BITS(reg_data[0], BMI3_ANY_MOTION_OUT, map_int.any_motion_out) & BMI3_ANY_MOTION_OUT_MASK);
 8001266:	7c3b      	ldrb	r3, [r7, #16]
 8001268:	b21b      	sxth	r3, r3
 800126a:	f023 030c 	bic.w	r3, r3, #12
 800126e:	b21a      	sxth	r2, r3
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	b21b      	sxth	r3, r3
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21b      	sxth	r3, r3
 8001280:	b29b      	uxth	r3, r3
        any_motion_out =
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	867b      	strh	r3, [r7, #50]	@ 0x32
        flat_out = (BMI3_SET_BITS(reg_data[0], BMI3_FLAT_OUT, map_int.flat_out) & BMI3_FLAT_OUT_MASK);
 8001288:	7c3b      	ldrb	r3, [r7, #16]
 800128a:	b21b      	sxth	r3, r3
 800128c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001290:	b21a      	sxth	r2, r3
 8001292:	78bb      	ldrb	r3, [r7, #2]
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	b21b      	sxth	r3, r3
 8001298:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012a8:	863b      	strh	r3, [r7, #48]	@ 0x30
        orientation_out =
            (BMI3_SET_BITS(reg_data[0], BMI3_ORIENTATION_OUT, map_int.orientation_out) & BMI3_ORIENTATION_OUT_MASK);
 80012aa:	7c3b      	ldrb	r3, [r7, #16]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	019b      	lsls	r3, r3, #6
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	b29b      	uxth	r3, r3
        orientation_out =
 80012c4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80012c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        step_detector_out =
            (BMI3_SET_BITS(reg_data[1], BMI3_STEP_DETECTOR_OUT,
 80012ca:	7c7b      	ldrb	r3, [r7, #17]
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	793b      	ldrb	r3, [r7, #4]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21b      	sxth	r3, r3
                           map_int.step_detector_out) & BMI3_STEP_DETECTOR_OUT_MASK);
 80012de:	b29b      	uxth	r3, r3
        step_detector_out =
 80012e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80012e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        step_counter_out =
            (BMI3_SET_BITS(reg_data[1], BMI3_STEP_COUNTER_OUT, map_int.step_counter_out) & BMI3_STEP_COUNTER_OUT_MASK);
 80012e6:	7c7b      	ldrb	r3, [r7, #17]
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	029b      	lsls	r3, r3, #10
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	b29b      	uxth	r3, r3
        step_counter_out =
 80012fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001300:	857b      	strh	r3, [r7, #42]	@ 0x2a
        sig_motion_out =
            (BMI3_SET_BITS(reg_data[1], BMI3_SIG_MOTION_OUT, map_int.sig_motion_out) & BMI3_SIG_MOTION_OUT_MASK);
 8001302:	7c7b      	ldrb	r3, [r7, #17]
 8001304:	b21a      	sxth	r2, r3
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	031b      	lsls	r3, r3, #12
 800130a:	b21b      	sxth	r3, r3
 800130c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	b29b      	uxth	r3, r3
        sig_motion_out =
 8001318:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800131c:	853b      	strh	r3, [r7, #40]	@ 0x28
        tilt_out = (BMI3_SET_BITS(reg_data[1], BMI3_TILT_OUT, map_int.tilt_out) & BMI3_TILT_OUT_MASK);
 800131e:	7c7b      	ldrb	r3, [r7, #17]
 8001320:	b21a      	sxth	r2, r3
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	039b      	lsls	r3, r3, #14
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21b      	sxth	r3, r3
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b62      	ldr	r3, [pc, #392]	@ (80014b8 <bmi3_map_interrupt+0x2a0>)
 8001330:	4013      	ands	r3, r2
 8001332:	84fb      	strh	r3, [r7, #38]	@ 0x26

        reg_data[0] = (uint8_t)(no_motion_out | any_motion_out | flat_out | orientation_out);
 8001334:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001336:	b2da      	uxtb	r2, r3
 8001338:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b2da      	uxtb	r2, r3
 8001340:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b2da      	uxtb	r2, r3
 8001348:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b2db      	uxtb	r3, r3
 8001350:	743b      	strb	r3, [r7, #16]
        reg_data[1] = (uint8_t)((step_detector_out | step_counter_out | sig_motion_out | tilt_out) >> 8);
 8001352:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001354:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001356:	4313      	orrs	r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800135c:	4313      	orrs	r3, r2
 800135e:	b29a      	uxth	r2, r3
 8001360:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001362:	4313      	orrs	r3, r2
 8001364:	b29b      	uxth	r3, r3
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	747b      	strb	r3, [r7, #17]

        tap_out = (BMI3_SET_BIT_POS0(reg_data[2], BMI3_TAP_OUT, map_int.tap_out) & BMI3_TAP_OUT_MASK);
 800136e:	7cbb      	ldrb	r3, [r7, #18]
 8001370:	b21b      	sxth	r3, r3
 8001372:	f023 0303 	bic.w	r3, r3, #3
 8001376:	b21a      	sxth	r2, r3
 8001378:	7a3b      	ldrb	r3, [r7, #8]
 800137a:	b21b      	sxth	r3, r3
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21b      	sxth	r3, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        i3c_out = (BMI3_SET_BITS(reg_data[2], BMI3_I3C_OUT, map_int.i3c_out) & BMI3_I3C_OUT_MASK);
 800138e:	7cbb      	ldrb	r3, [r7, #18]
 8001390:	b21b      	sxth	r3, r3
 8001392:	f023 030c 	bic.w	r3, r3, #12
 8001396:	b21a      	sxth	r2, r3
 8001398:	7a7b      	ldrb	r3, [r7, #9]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	b21b      	sxth	r3, r3
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	847b      	strh	r3, [r7, #34]	@ 0x22
        err_status = (BMI3_SET_BITS(reg_data[2], BMI3_ERR_STATUS, map_int.err_status) & BMI3_ERR_STATUS_MASK);
 80013b0:	7cbb      	ldrb	r3, [r7, #18]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	b21b      	sxth	r3, r3
 80013c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80013d0:	843b      	strh	r3, [r7, #32]
        temp = (BMI3_SET_BITS(reg_data[2], BMI3_TEMP_DRDY_INT, map_int.temp_drdy_int) & BMI3_TEMP_DRDY_INT_MASK);
 80013d2:	7cbb      	ldrb	r3, [r7, #18]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80013da:	b21a      	sxth	r2, r3
 80013dc:	7afb      	ldrb	r3, [r7, #11]
 80013de:	019b      	lsls	r3, r3, #6
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80013f0:	83fb      	strh	r3, [r7, #30]
        gyr = (BMI3_SET_BITS(reg_data[3], BMI3_GYR_DRDY_INT, map_int.gyr_drdy_int) & BMI3_GYR_DRDY_INT_MASK);
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b21b      	sxth	r3, r3
 8001406:	b29b      	uxth	r3, r3
 8001408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800140c:	83bb      	strh	r3, [r7, #28]
        acc = (BMI3_SET_BITS(reg_data[3], BMI3_ACC_DRDY_INT, map_int.acc_drdy_int) & BMI3_ACC_DRDY_INT_MASK);
 800140e:	7cfb      	ldrb	r3, [r7, #19]
 8001410:	b21a      	sxth	r2, r3
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	029b      	lsls	r3, r3, #10
 8001416:	b21b      	sxth	r3, r3
 8001418:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001428:	837b      	strh	r3, [r7, #26]
        fwm =
            (BMI3_SET_BITS(reg_data[3], BMI3_FIFO_WATERMARK_INT,
 800142a:	7cfb      	ldrb	r3, [r7, #19]
 800142c:	b21a      	sxth	r2, r3
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	031b      	lsls	r3, r3, #12
 8001432:	b21b      	sxth	r3, r3
 8001434:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b21b      	sxth	r3, r3
                           map_int.fifo_watermark_int) & BMI3_FIFO_WATERMARK_INT_MASK);
 800143e:	b29b      	uxth	r3, r3
        fwm =
 8001440:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001444:	833b      	strh	r3, [r7, #24]
        ffull = (BMI3_SET_BITS(reg_data[3], BMI3_FIFO_FULL_INT, map_int.fifo_full_int) & BMI3_FIFO_FULL_INT_MASK);
 8001446:	7cfb      	ldrb	r3, [r7, #19]
 8001448:	b21a      	sxth	r2, r3
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	039b      	lsls	r3, r3, #14
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21b      	sxth	r3, r3
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <bmi3_map_interrupt+0x2a0>)
 8001458:	4013      	ands	r3, r2
 800145a:	82fb      	strh	r3, [r7, #22]

        reg_data[2] = (uint8_t)(tap_out | i3c_out | err_status | temp);
 800145c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800145e:	b2da      	uxtb	r2, r3
 8001460:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b2da      	uxtb	r2, r3
 8001468:	8c3b      	ldrh	r3, [r7, #32]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b2da      	uxtb	r2, r3
 8001470:	8bfb      	ldrh	r3, [r7, #30]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	74bb      	strb	r3, [r7, #18]
        reg_data[3] = (uint8_t)((gyr | acc | fwm | ffull) >> 8);
 800147a:	8bba      	ldrh	r2, [r7, #28]
 800147c:	8b7b      	ldrh	r3, [r7, #26]
 800147e:	4313      	orrs	r3, r2
 8001480:	b29a      	uxth	r2, r3
 8001482:	8b3b      	ldrh	r3, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	b29a      	uxth	r2, r3
 8001488:	8afb      	ldrh	r3, [r7, #22]
 800148a:	4313      	orrs	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	b29b      	uxth	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	74fb      	strb	r3, [r7, #19]

        rslt = bmi3_set_regs(BMI3_REG_INT_MAP1, reg_data, 4, dev);
 8001496:	f107 0110 	add.w	r1, r7, #16
 800149a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800149c:	2204      	movs	r2, #4
 800149e:	203a      	movs	r0, #58	@ 0x3a
 80014a0:	f7ff fbb1 	bl	8000c06 <bmi3_set_regs>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 80014aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	373c      	adds	r7, #60	@ 0x3c
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	ffffc000 	.word	0xffffc000

080014bc <bmi3_get_sensor_data>:
/*!
 * @brief This API gets the sensor/feature data for accelerometer, gyroscope,
 * step counter, orientation, i3c sync accel, i3c sync gyro and i3c sync temperature.
 */
int8_t bmi3_get_sensor_data(struct bmi3_sensor_data *sensor_data, uint8_t n_sens, struct bmi3_dev *dev)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	460b      	mov	r3, r1
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 ff4a 	bl	8002364 <null_ptr_check>
 80014d0:	4603      	mov	r3, r0
 80014d2:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 80014d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 80bf 	bne.w	800165c <bmi3_get_sensor_data+0x1a0>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80bb 	beq.w	800165c <bmi3_get_sensor_data+0x1a0>
    {
        for (loop = 0; loop < n_sens; loop++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	75bb      	strb	r3, [r7, #22]
 80014ea:	e0af      	b.n	800164c <bmi3_get_sensor_data+0x190>
        {
            switch (sensor_data[loop].type)
 80014ec:	7dba      	ldrb	r2, [r7, #22]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	f200 809a 	bhi.w	8001638 <bmi3_get_sensor_data+0x17c>
 8001504:	a201      	add	r2, pc, #4	@ (adr r2, 800150c <bmi3_get_sensor_data+0x50>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	08001551 	.word	0x08001551
 8001510:	08001573 	.word	0x08001573
 8001514:	08001639 	.word	0x08001639
 8001518:	08001639 	.word	0x08001639
 800151c:	08001639 	.word	0x08001639
 8001520:	08001595 	.word	0x08001595
 8001524:	08001639 	.word	0x08001639
 8001528:	080015b7 	.word	0x080015b7
 800152c:	08001639 	.word	0x08001639
 8001530:	08001639 	.word	0x08001639
 8001534:	08001639 	.word	0x08001639
 8001538:	08001639 	.word	0x08001639
 800153c:	08001639 	.word	0x08001639
 8001540:	08001639 	.word	0x08001639
 8001544:	080015d9 	.word	0x080015d9
 8001548:	080015f9 	.word	0x080015f9
 800154c:	08001619 	.word	0x08001619
            {
                case BMI3_ACCEL:
                    rslt = get_accel_sensor_data(&sensor_data[loop].sens_data.acc, BMI3_REG_ACC_DATA_X, dev);
 8001550:	7dba      	ldrb	r2, [r7, #22]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	3304      	adds	r3, #4
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	2103      	movs	r1, #3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fcdb 	bl	8001f22 <get_accel_sensor_data>
 800156c:	4603      	mov	r3, r0
 800156e:	75fb      	strb	r3, [r7, #23]
                    break;
 8001570:	e065      	b.n	800163e <bmi3_get_sensor_data+0x182>

                case BMI3_GYRO:
                    rslt = get_gyro_sensor_data(&sensor_data[loop].sens_data.gyr, BMI3_REG_GYR_DATA_X, dev);
 8001572:	7dba      	ldrb	r2, [r7, #22]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	461a      	mov	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	3304      	adds	r3, #4
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	2106      	movs	r1, #6
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fd35 	bl	8001ff8 <get_gyro_sensor_data>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
                    break;
 8001592:	e054      	b.n	800163e <bmi3_get_sensor_data+0x182>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_counter_sensor_data(&sensor_data[loop].sens_data.step_counter_output,
 8001594:	7dba      	ldrb	r2, [r7, #22]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	3304      	adds	r3, #4
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	2112      	movs	r1, #18
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fd8e 	bl	80020cc <get_step_counter_sensor_data>
 80015b0:	4603      	mov	r3, r0
 80015b2:	75fb      	strb	r3, [r7, #23]
                                                        BMI3_REG_FEATURE_IO2,
                                                        dev);
                    break;
 80015b4:	e043      	b.n	800163e <bmi3_get_sensor_data+0x182>

                case BMI3_ORIENTATION:
                    rslt = get_orient_output_data(&sensor_data[loop].sens_data.orient_output,
 80015b6:	7dba      	ldrb	r2, [r7, #22]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	3304      	adds	r3, #4
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	2147      	movs	r1, #71	@ 0x47
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fdb8 	bl	8002142 <get_orient_output_data>
 80015d2:	4603      	mov	r3, r0
 80015d4:	75fb      	strb	r3, [r7, #23]
                                                  BMI3_REG_FEATURE_EVENT_EXT,
                                                  dev);
                    break;
 80015d6:	e032      	b.n	800163e <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_ACCEL:
                    rslt = get_i3c_sync_accel_sensor_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 80015d8:	7dba      	ldrb	r2, [r7, #22]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	3304      	adds	r3, #4
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 fca7 	bl	8003f40 <get_i3c_sync_accel_sensor_data>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]
                    break;
 80015f6:	e022      	b.n	800163e <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_GYRO:
                    rslt = get_i3c_sync_gyro_sensor_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 80015f8:	7dba      	ldrb	r2, [r7, #22]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	3304      	adds	r3, #4
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fcf0 	bl	8003ff2 <get_i3c_sync_gyro_sensor_data>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
                    break;
 8001616:	e012      	b.n	800163e <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_TEMP:
                    rslt = get_i3c_sync_temp_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 8001618:	7dba      	ldrb	r2, [r7, #22]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	3304      	adds	r3, #4
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	f002 fd3c 	bl	80040aa <get_i3c_sync_temp_data>
 8001632:	4603      	mov	r3, r0
 8001634:	75fb      	strb	r3, [r7, #23]
                    break;
 8001636:	e002      	b.n	800163e <bmi3_get_sensor_data+0x182>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8001638:	23fa      	movs	r3, #250	@ 0xfa
 800163a:	75fb      	strb	r3, [r7, #23]
                    break;
 800163c:	bf00      	nop
            }

            /* Return error if any of the get sensor data fails */
            if (rslt != BMI3_OK)
 800163e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d108      	bne.n	8001658 <bmi3_get_sensor_data+0x19c>
        for (loop = 0; loop < n_sens; loop++)
 8001646:	7dbb      	ldrb	r3, [r7, #22]
 8001648:	3301      	adds	r3, #1
 800164a:	75bb      	strb	r3, [r7, #22]
 800164c:	7dba      	ldrb	r2, [r7, #22]
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	429a      	cmp	r2, r3
 8001652:	f4ff af4b 	bcc.w	80014ec <bmi3_get_sensor_data+0x30>
    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 8001656:	e003      	b.n	8001660 <bmi3_get_sensor_data+0x1a4>
            {
                break;
 8001658:	bf00      	nop
    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 800165a:	e001      	b.n	8001660 <bmi3_get_sensor_data+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800165c:	23ff      	movs	r3, #255	@ 0xff
 800165e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001660:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <bmi3_set_int_pin_config>:
 *        1) The output configuration of the selected interrupt pin:
 *           INT1 or INT2.
 *        2) The interrupt mode: permanently latched or non-latched.
 */
int8_t bmi3_set_int_pin_config(const struct bmi3_int_pin_config *int_cfg, struct bmi3_dev *dev)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[3] = { 0 };
 8001676:	4b65      	ldr	r3, [pc, #404]	@ (800180c <bmi3_set_int_pin_config+0x1a0>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	813b      	strh	r3, [r7, #8]
 800167c:	2300      	movs	r3, #0
 800167e:	72bb      	strb	r3, [r7, #10]

    /* Variable to store register data */
    uint16_t reg_data = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	82bb      	strh	r3, [r7, #20]

    /* Variable to define type of interrupt pin  */
    uint8_t int_pin = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	74fb      	strb	r3, [r7, #19]

    uint16_t lvl, od, output_en;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001688:	6838      	ldr	r0, [r7, #0]
 800168a:	f000 fe6b 	bl	8002364 <null_ptr_check>
 800168e:	4603      	mov	r3, r0
 8001690:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (int_cfg != NULL))
 8001692:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 80b0 	bne.w	80017fc <bmi3_set_int_pin_config+0x190>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80ac 	beq.w	80017fc <bmi3_set_int_pin_config+0x190>
    {
        /* Copy the pin type to a local variable */
        int_pin = int_cfg->pin_type;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	74fb      	strb	r3, [r7, #19]

        if ((int_pin > BMI3_INT_NONE) && (int_pin < BMI3_INT_PIN_MAX))
 80016aa:	7cfb      	ldrb	r3, [r7, #19]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80a0 	beq.w	80017f2 <bmi3_set_int_pin_config+0x186>
 80016b2:	7cfb      	ldrb	r3, [r7, #19]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	f200 809c 	bhi.w	80017f2 <bmi3_set_int_pin_config+0x186>
        {
            /* Get the previous configuration data */
            rslt = bmi3_get_regs(BMI3_REG_IO_INT_CTRL, data_array, 2, dev);
 80016ba:	f107 0108 	add.w	r1, r7, #8
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2202      	movs	r2, #2
 80016c2:	2038      	movs	r0, #56	@ 0x38
 80016c4:	f7ff fa3a 	bl	8000b3c <bmi3_get_regs>
 80016c8:	4603      	mov	r3, r0
 80016ca:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 80016cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 8091 	bne.w	80017f8 <bmi3_set_int_pin_config+0x18c>
            {
                /* Set interrupt pin 1 configuration */
                if (int_pin == BMI3_INT1)
 80016d6:	7cfb      	ldrb	r3, [r7, #19]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d138      	bne.n	800174e <bmi3_set_int_pin_config+0xe2>
                {
                    reg_data = data_array[0];
 80016dc:	7a3b      	ldrb	r3, [r7, #8]
 80016de:	82bb      	strh	r3, [r7, #20]

                    /* Configure active low or high */
                    lvl = BMI3_SET_BIT_POS0(reg_data, BMI3_INT1_LVL, int_cfg->pin_cfg[0].lvl);
 80016e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	789b      	ldrb	r3, [r3, #2]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	823b      	strh	r3, [r7, #16]

                    /* Configure push-pull or open drain */
                    od = BMI3_SET_BITS(reg_data, BMI3_INT1_OD, int_cfg->pin_cfg[0].od);
 80016fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001700:	f023 0302 	bic.w	r3, r3, #2
 8001704:	b21a      	sxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	78db      	ldrb	r3, [r3, #3]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	b21b      	sxth	r3, r3
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	b21b      	sxth	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b21b      	sxth	r3, r3
 8001718:	81fb      	strh	r3, [r7, #14]

                    /* Configure output enable */
                    output_en = BMI3_SET_BITS(reg_data, BMI3_INT1_OUTPUT_EN, int_cfg->pin_cfg[0].output_en);
 800171a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800171e:	f023 0304 	bic.w	r3, r3, #4
 8001722:	b21a      	sxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	791b      	ldrb	r3, [r3, #4]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	b21b      	sxth	r3, r3
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	b21b      	sxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b21b      	sxth	r3, r3
 8001736:	81bb      	strh	r3, [r7, #12]

                    /* Copy the data to be written in the respective array */
                    data_array[0] = (uint8_t)(lvl | od | output_en);
 8001738:	8a3b      	ldrh	r3, [r7, #16]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b2da      	uxtb	r2, r3
 8001744:	89bb      	ldrh	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b2db      	uxtb	r3, r3
 800174c:	723b      	strb	r3, [r7, #8]
                }

                /* Set interrupt pin 2 configuration */
                if (int_pin == BMI3_INT2)
 800174e:	7cfb      	ldrb	r3, [r7, #19]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d13a      	bne.n	80017ca <bmi3_set_int_pin_config+0x15e>
                {
                    reg_data = ((uint16_t)data_array[1] << 8);
 8001754:	7a7b      	ldrb	r3, [r7, #9]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	82bb      	strh	r3, [r7, #20]

                    /* Configure active low or high */
                    lvl = BMI3_SET_BITS(reg_data, BMI3_INT2_LVL, int_cfg->pin_cfg[1].lvl);
 800175a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800175e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001762:	b21a      	sxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	795b      	ldrb	r3, [r3, #5]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b21b      	sxth	r3, r3
 800176c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b21b      	sxth	r3, r3
 8001776:	823b      	strh	r3, [r7, #16]

                    /* Configure push-pull or open drain */
                    od = BMI3_SET_BITS(reg_data, BMI3_INT2_OD, int_cfg->pin_cfg[1].od);
 8001778:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800177c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001780:	b21a      	sxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	799b      	ldrb	r3, [r3, #6]
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	b21b      	sxth	r3, r3
 800178a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	81fb      	strh	r3, [r7, #14]

                    /* Configure output enable */
                    output_en = BMI3_SET_BITS(reg_data, BMI3_INT2_OUTPUT_EN, int_cfg->pin_cfg[1].output_en);
 8001796:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800179a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800179e:	b21a      	sxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	79db      	ldrb	r3, [r3, #7]
 80017a4:	029b      	lsls	r3, r3, #10
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	81bb      	strh	r3, [r7, #12]

                    /* Copy the data to be written in the respective array */
                    data_array[1] = (uint8_t)((lvl | od | output_en) >> 8);
 80017b4:	8a3a      	ldrh	r2, [r7, #16]
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	89bb      	ldrh	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	727b      	strb	r3, [r7, #9]

                /* Set the configurations simultaneously as
                 * INT1_IO_CTRL, INT2_IO_CTRL, and INT_LATCH lie
                 * in consecutive addresses
                 */
                rslt = bmi3_set_regs(BMI3_REG_IO_INT_CTRL, data_array, 2, dev);
 80017ca:	f107 0108 	add.w	r1, r7, #8
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2202      	movs	r2, #2
 80017d2:	2038      	movs	r0, #56	@ 0x38
 80017d4:	f7ff fa17 	bl	8000c06 <bmi3_set_regs>
 80017d8:	4603      	mov	r3, r0
 80017da:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI3_OK)
 80017dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <bmi3_set_int_pin_config+0x18c>
                {
                    rslt = set_latch_mode(int_cfg, dev);
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fe02 	bl	80023f0 <set_latch_mode>
 80017ec:	4603      	mov	r3, r0
 80017ee:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI3_OK)
 80017f0:	e002      	b.n	80017f8 <bmi3_set_int_pin_config+0x18c>
                }
            }
        }
        else
        {
            rslt = BMI3_E_INVALID_INT_PIN;
 80017f2:	23f9      	movs	r3, #249	@ 0xf9
 80017f4:	75fb      	strb	r3, [r7, #23]
        if ((int_pin > BMI3_INT_NONE) && (int_pin < BMI3_INT_PIN_MAX))
 80017f6:	e003      	b.n	8001800 <bmi3_set_int_pin_config+0x194>
            if (rslt == BMI3_OK)
 80017f8:	bf00      	nop
        if ((int_pin > BMI3_INT_NONE) && (int_pin < BMI3_INT_PIN_MAX))
 80017fa:	e001      	b.n	8001800 <bmi3_set_int_pin_config+0x194>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80017fc:	23ff      	movs	r3, #255	@ 0xff
 80017fe:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	0801bc60 	.word	0x0801bc60

08001810 <bmi3_get_int_pin_config>:
 *        1) The output configuration of the selected interrupt pin:
 *           INT1 or INT2.
 *        2) The interrupt mode: permanently latched or non-latched.
 */
int8_t bmi3_get_int_pin_config(struct bmi3_int_pin_config *int_cfg, struct bmi3_dev *dev)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[3] = { 0 };
 800181a:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <bmi3_get_int_pin_config+0xcc>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	813b      	strh	r3, [r7, #8]
 8001820:	2300      	movs	r3, #0
 8001822:	72bb      	strb	r3, [r7, #10]

    /* Variable to define type of interrupt pin  */
    uint8_t int_pin = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	73bb      	strb	r3, [r7, #14]

    uint16_t reg_data;

    if (int_cfg != NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d04d      	beq.n	80018ca <bmi3_get_int_pin_config+0xba>
    {
        /* Copy the pin type to a local variable */
        int_pin = int_cfg->pin_type;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	73bb      	strb	r3, [r7, #14]

        /* Get the previous configuration data */
        rslt = bmi3_get_regs(BMI3_REG_IO_INT_CTRL, data_array, 3, dev);
 8001834:	f107 0108 	add.w	r1, r7, #8
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2203      	movs	r2, #3
 800183c:	2038      	movs	r0, #56	@ 0x38
 800183e:	f7ff f97d 	bl	8000b3c <bmi3_get_regs>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d13f      	bne.n	80018ce <bmi3_get_int_pin_config+0xbe>
        {
            /* Get interrupt pin 1 configuration */
            if (int_pin == BMI3_INT1)
 800184e:	7bbb      	ldrb	r3, [r7, #14]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d115      	bne.n	8001880 <bmi3_get_int_pin_config+0x70>
            {
                /* Get active low or high */
                int_cfg->pin_cfg[0].lvl = BMI3_GET_BIT_POS0(data_array[0], BMI3_INT1_LVL);
 8001854:	7a3b      	ldrb	r3, [r7, #8]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	709a      	strb	r2, [r3, #2]

                /* Get push-pull or open drain */
                int_cfg->pin_cfg[0].od = BMI3_GET_BITS(data_array[0], BMI3_INT1_OD);
 8001860:	7a3b      	ldrb	r3, [r7, #8]
 8001862:	105b      	asrs	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	70da      	strb	r2, [r3, #3]

                /* Get output enable */
                int_cfg->pin_cfg[0].output_en = BMI3_GET_BITS(data_array[0], BMI3_INT1_OUTPUT_EN);
 8001870:	7a3b      	ldrb	r3, [r7, #8]
 8001872:	109b      	asrs	r3, r3, #2
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	711a      	strb	r2, [r3, #4]
            }

            /* Get interrupt pin 2 configuration */
            if (int_pin == BMI3_INT2)
 8001880:	7bbb      	ldrb	r3, [r7, #14]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d11a      	bne.n	80018bc <bmi3_get_int_pin_config+0xac>
            {
                reg_data = ((uint16_t)data_array[1] << 8);
 8001886:	7a7b      	ldrb	r3, [r7, #9]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	81bb      	strh	r3, [r7, #12]

                /* Get active low or high */
                int_cfg->pin_cfg[1].lvl = BMI3_GET_BITS(reg_data, BMI3_INT2_LVL);
 800188c:	89bb      	ldrh	r3, [r7, #12]
 800188e:	121b      	asrs	r3, r3, #8
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	715a      	strb	r2, [r3, #5]

                /* Get push-pull or open drain */
                int_cfg->pin_cfg[1].od = BMI3_GET_BITS(reg_data, BMI3_INT2_OD);
 800189c:	89bb      	ldrh	r3, [r7, #12]
 800189e:	125b      	asrs	r3, r3, #9
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	719a      	strb	r2, [r3, #6]

                /* Get output enable */
                int_cfg->pin_cfg[1].output_en = BMI3_GET_BITS(reg_data, BMI3_INT2_OUTPUT_EN);
 80018ac:	89bb      	ldrh	r3, [r7, #12]
 80018ae:	129b      	asrs	r3, r3, #10
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	71da      	strb	r2, [r3, #7]
            }

            rslt = get_latch_mode(int_cfg, dev);
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fd70 	bl	80023a4 <get_latch_mode>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e001      	b.n	80018ce <bmi3_get_int_pin_config+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80018ca:	23ff      	movs	r3, #255	@ 0xff
 80018cc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	0801bc60 	.word	0x0801bc60

080018e0 <bmi3_set_fifo_wm>:

/*!
 * @brief This API sets the FIFO water-mark level in words.
 */
int8_t bmi3_set_fifo_wm(uint16_t fifo_wm, struct bmi3_dev *dev)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data[2] = { 0 };
 80018ec:	2300      	movs	r3, #0
 80018ee:	813b      	strh	r3, [r7, #8]

    uint16_t fifo_watermark = fifo_wm & BMI3_FIFO_WATERMARK_MASK;
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018f6:	81fb      	strh	r3, [r7, #14]

    /* Get LSB value of FIFO water-mark */
    data[0] = BMI3_GET_LSB(fifo_watermark);
 80018f8:	89fb      	ldrh	r3, [r7, #14]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	723b      	strb	r3, [r7, #8]

    /* Get MSB value of FIFO water-mark */
    data[1] = BMI3_GET_MSB(fifo_watermark);
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	727b      	strb	r3, [r7, #9]

    /* Set the FIFO water-mark level */
    rslt = bmi3_set_regs(BMI3_REG_FIFO_WATERMARK, data, BMI3_LENGTH_FIFO_WM, dev);
 8001908:	f107 0108 	add.w	r1, r7, #8
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2202      	movs	r2, #2
 8001910:	2035      	movs	r0, #53	@ 0x35
 8001912:	f7ff f978 	bl	8000c06 <bmi3_set_regs>
 8001916:	4603      	mov	r3, r0
 8001918:	737b      	strb	r3, [r7, #13]

    return rslt;
 800191a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <bmi3_set_fifo_config>:

/*!
 * @brief This API sets the FIFO configuration in the sensor.
 */
int8_t bmi3_set_fifo_config(uint16_t config, uint8_t enable, struct bmi3_dev *dev)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	603a      	str	r2, [r7, #0]
 8001930:	80fb      	strh	r3, [r7, #6]
 8001932:	460b      	mov	r3, r1
 8001934:	717b      	strb	r3, [r7, #5]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store fifo config data */
    uint8_t data[2] = { 0 };
 8001936:	2300      	movs	r3, #0
 8001938:	813b      	strh	r3, [r7, #8]

    /* Variable to store data of FIFO configuration register */
    uint16_t fifo_config = config & BMI3_FIFO_CONFIG_MASK;
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8001940:	051b      	lsls	r3, r3, #20
 8001942:	0d1b      	lsrs	r3, r3, #20
 8001944:	81bb      	strh	r3, [r7, #12]

    rslt = bmi3_get_regs(BMI3_REG_FIFO_CONF, data, 2, dev);
 8001946:	f107 0108 	add.w	r1, r7, #8
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2202      	movs	r2, #2
 800194e:	2036      	movs	r0, #54	@ 0x36
 8001950:	f7ff f8f4 	bl	8000b3c <bmi3_get_regs>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 8001958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d130      	bne.n	80019c2 <bmi3_set_fifo_config+0x9c>
    {
        if (enable == BMI3_ENABLE)
 8001960:	797b      	ldrb	r3, [r7, #5]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d10e      	bne.n	8001984 <bmi3_set_fifo_config+0x5e>
        {
            data[0] = data[0] | (uint8_t)fifo_config;
 8001966:	7a3a      	ldrb	r2, [r7, #8]
 8001968:	89bb      	ldrh	r3, [r7, #12]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b2db      	uxtb	r3, r3
 8001970:	723b      	strb	r3, [r7, #8]
            data[1] = data[1] | (uint8_t)(fifo_config >> 8);
 8001972:	7a7a      	ldrb	r2, [r7, #9]
 8001974:	89bb      	ldrh	r3, [r7, #12]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	b29b      	uxth	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b2db      	uxtb	r3, r3
 8001980:	727b      	strb	r3, [r7, #9]
 8001982:	e015      	b.n	80019b0 <bmi3_set_fifo_config+0x8a>
        }
        else
        {
            data[0] = data[0] & (~fifo_config);
 8001984:	7a3b      	ldrb	r3, [r7, #8]
 8001986:	b25a      	sxtb	r2, r3
 8001988:	89bb      	ldrh	r3, [r7, #12]
 800198a:	b25b      	sxtb	r3, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	b25b      	sxtb	r3, r3
 8001990:	4013      	ands	r3, r2
 8001992:	b25b      	sxtb	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	723b      	strb	r3, [r7, #8]
            data[1] = data[1] & (~(fifo_config >> 8));
 8001998:	7a7b      	ldrb	r3, [r7, #9]
 800199a:	b25a      	sxtb	r2, r3
 800199c:	89bb      	ldrh	r3, [r7, #12]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	4013      	ands	r3, r2
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	727b      	strb	r3, [r7, #9]
        }

        rslt = bmi3_set_regs(BMI3_REG_FIFO_CONF, data, 2, dev);
 80019b0:	f107 0108 	add.w	r1, r7, #8
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2202      	movs	r2, #2
 80019b8:	2036      	movs	r0, #54	@ 0x36
 80019ba:	f7ff f924 	bl	8000c06 <bmi3_set_regs>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR, accel mode,
 * bandwidth, average samples and range.
 */
static int8_t set_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 80019d8:	2300      	movs	r3, #0
 80019da:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, acc_mode;

    if (config != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80a3 	beq.w	8001b2a <set_accel_config+0x15c>
    {
        /* Validate bandwidth and averaging samples */
        rslt = validate_bw_avg_acc_mode(&config->bwp, &config->acc_mode, &config->avg_num, dev);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1c58      	adds	r0, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	1c99      	adds	r1, r3, #2
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1d1a      	adds	r2, r3, #4
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f000 f8ee 	bl	8001bd2 <validate_bw_avg_acc_mode>
 80019f6:	4603      	mov	r3, r0
 80019f8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80019fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d108      	bne.n	8001a14 <set_accel_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_acc_odr_range(&config->odr, &config->range, dev);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3303      	adds	r3, #3
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f000 f91c 	bl	8001c48 <validate_acc_odr_range>
 8001a10:	4603      	mov	r3, r0
 8001a12:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11f      	bne.n	8001a5c <set_accel_config+0x8e>
        {
            if (config->acc_mode == BMI3_ACC_MODE_LOW_PWR)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	789b      	ldrb	r3, [r3, #2]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d109      	bne.n	8001a38 <set_accel_config+0x6a>
            {
                rslt = validate_acc_odr_avg(config->odr, config->avg_num);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	791b      	ldrb	r3, [r3, #4]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f002 fd14 	bl	800445c <validate_acc_odr_avg>
 8001a34:	4603      	mov	r3, r0
 8001a36:	75fb      	strb	r3, [r7, #23]
            }

            if ((config->acc_mode == BMI3_ACC_MODE_NORMAL) || (config->acc_mode == BMI3_ACC_MODE_HIGH_PERF))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	789b      	ldrb	r3, [r3, #2]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d003      	beq.n	8001a48 <set_accel_config+0x7a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	789b      	ldrb	r3, [r3, #2]
 8001a44:	2b07      	cmp	r3, #7
 8001a46:	d109      	bne.n	8001a5c <set_accel_config+0x8e>
            {
                if ((config->odr >= BMI3_ACC_ODR_0_78HZ) && (config->odr <= BMI3_ACC_ODR_6_25HZ))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <set_accel_config+0x8e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d801      	bhi.n	8001a5c <set_accel_config+0x8e>
                {
                    rslt = BMI3_E_ACC_INVALID_CFG;
 8001a58:	23fc      	movs	r3, #252	@ 0xfc
 8001a5a:	75fb      	strb	r3, [r7, #23]
                }
            }
        }

        if (rslt == BMI3_OK)
 8001a5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d15f      	bne.n	8001b24 <set_accel_config+0x156>
        {
            /* Set accelerometer ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ACC_ODR, config->odr);
 8001a64:	7a3b      	ldrb	r3, [r7, #8]
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	f023 030f 	bic.w	r3, r3, #15
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	82bb      	strh	r3, [r7, #20]

            /* Set accelerometer range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_ACC_RANGE, config->range);
 8001a80:	7a3b      	ldrb	r3, [r7, #8]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	78db      	ldrb	r3, [r3, #3]
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	827b      	strh	r3, [r7, #18]

            /* Set accelerometer bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_ACC_BW, config->bwp);
 8001a9e:	7a3b      	ldrb	r3, [r7, #8]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001aa6:	b21a      	sxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	785b      	ldrb	r3, [r3, #1]
 8001aac:	01db      	lsls	r3, r3, #7
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	823b      	strh	r3, [r7, #16]

            /* Set accelerometer average number of samples */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ACC_AVG_NUM, config->avg_num);
 8001aba:	7a7b      	ldrb	r3, [r7, #9]
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	791b      	ldrb	r3, [r3, #4]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	81fb      	strh	r3, [r7, #14]

            /* Set accelerometer accel mode */
            acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ACC_MODE, config->acc_mode);
 8001ad2:	7a7b      	ldrb	r3, [r7, #9]
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	789b      	ldrb	r3, [r3, #2]
 8001ada:	031b      	lsls	r3, r3, #12
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001aea:	8abb      	ldrh	r3, [r7, #20]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	8a7b      	ldrh	r3, [r7, #18]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	8a3b      	ldrh	r3, [r7, #16]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | acc_mode) >> 8);
 8001b00:	89fa      	ldrh	r2, [r7, #14]
 8001b02:	89bb      	ldrh	r3, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	727b      	strb	r3, [r7, #9]

            /* Set configurations for accel */
            rslt = bmi3_set_regs(BMI3_REG_ACC_CONF, reg_data, 2, dev);
 8001b10:	f107 0108 	add.w	r1, r7, #8
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2202      	movs	r2, #2
 8001b18:	2020      	movs	r0, #32
 8001b1a:	f7ff f874 	bl	8000c06 <bmi3_set_regs>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]
 8001b22:	e004      	b.n	8001b2e <set_accel_config+0x160>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 8001b24:	23fc      	movs	r3, #252	@ 0xfc
 8001b26:	75fb      	strb	r3, [r7, #23]
 8001b28:	e001      	b.n	8001b2e <set_accel_config+0x160>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001b2a:	23ff      	movs	r3, #255	@ 0xff
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, accel mode, average samples and gravity range.
 */
static int8_t get_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8001b44:	2300      	movs	r3, #0
 8001b46:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d039      	beq.n	8001bc2 <get_accel_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ACC_CONF, data_array, 2, dev);
 8001b4e:	f107 0108 	add.w	r1, r7, #8
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2202      	movs	r2, #2
 8001b56:	2020      	movs	r0, #32
 8001b58:	f7fe fff0 	bl	8000b3c <bmi3_get_regs>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d12e      	bne.n	8001bc6 <get_accel_config+0x8c>
        {
            reg_data = data_array[0];
 8001b68:	7a3b      	ldrb	r3, [r7, #8]
 8001b6a:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ACC_ODR);
 8001b6c:	89bb      	ldrh	r3, [r7, #12]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_ACC_RANGE);
 8001b7a:	89bb      	ldrh	r3, [r7, #12]
 8001b7c:	111b      	asrs	r3, r3, #4
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	70da      	strb	r2, [r3, #3]

            /* Get accelerometer bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_ACC_BW);
 8001b8a:	89bb      	ldrh	r3, [r7, #12]
 8001b8c:	11db      	asrs	r3, r3, #7
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8001b9a:	7a7b      	ldrb	r3, [r7, #9]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer average samples */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_ACC_AVG_NUM);
 8001ba0:	89bb      	ldrh	r3, [r7, #12]
 8001ba2:	121b      	asrs	r3, r3, #8
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	711a      	strb	r2, [r3, #4]

            /* Get accel mode */
            config->acc_mode = BMI3_GET_BITS(reg_data, BMI3_ACC_MODE);
 8001bb0:	89bb      	ldrh	r3, [r7, #12]
 8001bb2:	131b      	asrs	r3, r3, #12
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	709a      	strb	r2, [r3, #2]
 8001bc0:	e001      	b.n	8001bc6 <get_accel_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001bc2:	23ff      	movs	r3, #255	@ 0xff
 8001bc4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <validate_bw_avg_acc_mode>:
/*!
 * @brief This internal API validates bandwidth and accel mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_avg_acc_mode(uint8_t *bandwidth, uint8_t *acc_mode, uint8_t *avg_num, struct bmi3_dev *dev)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (acc_mode != NULL) && (avg_num != NULL))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d026      	beq.n	8001c34 <validate_bw_avg_acc_mode+0x62>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <validate_bw_avg_acc_mode+0x62>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d020      	beq.n	8001c34 <validate_bw_avg_acc_mode+0x62>
    {
        /* Validate and auto-correct accel mode */
        rslt = check_boundary_val(acc_mode, BMI3_ACC_MODE_DISABLE, BMI3_ACC_MODE_HIGH_PERF, dev);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	68b8      	ldr	r0, [r7, #8]
 8001bfa:	f000 f84e 	bl	8001c9a <check_boundary_val>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d117      	bne.n	8001c3a <validate_bw_avg_acc_mode+0x68>
        {
            /* Validate for averaging number of samples */
            rslt = check_boundary_val(avg_num, BMI3_ACC_AVG1, BMI3_ACC_AVG64, dev);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2206      	movs	r2, #6
 8001c0e:	2100      	movs	r1, #0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f842 	bl	8001c9a <check_boundary_val>
 8001c16:	4603      	mov	r3, r0
 8001c18:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10b      	bne.n	8001c3a <validate_bw_avg_acc_mode+0x68>
            {
                /* Validate bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_ACC_BW_ODR_HALF, BMI3_ACC_BW_ODR_QUARTER, dev);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	2100      	movs	r1, #0
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f836 	bl	8001c9a <check_boundary_val>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001c32:	e002      	b.n	8001c3a <validate_bw_avg_acc_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001c34:	23ff      	movs	r3, #255	@ 0xff
 8001c36:	75fb      	strb	r3, [r7, #23]
 8001c38:	e000      	b.n	8001c3c <validate_bw_avg_acc_mode+0x6a>
        if (rslt == BMI3_OK)
 8001c3a:	bf00      	nop
    }

    return rslt;
 8001c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <validate_acc_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_acc_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d017      	beq.n	8001c8a <validate_acc_odr_range+0x42>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d014      	beq.n	8001c8a <validate_acc_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_ACC_ODR_0_78HZ, BMI3_ACC_ODR_6400HZ, dev);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	220e      	movs	r2, #14
 8001c64:	2101      	movs	r1, #1
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f817 	bl	8001c9a <check_boundary_val>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <validate_acc_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_ACC_RANGE_2G, BMI3_ACC_RANGE_16G, dev);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	68b8      	ldr	r0, [r7, #8]
 8001c80:	f000 f80b 	bl	8001c9a <check_boundary_val>
 8001c84:	4603      	mov	r3, r0
 8001c86:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001c88:	e001      	b.n	8001c8e <validate_acc_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001c8a:	23ff      	movs	r3, #255	@ 0xff
 8001c8c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi3_dev *dev)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	72fb      	strb	r3, [r7, #11]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	72bb      	strb	r3, [r7, #10]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fb59 	bl	8002364 <null_ptr_check>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (val != NULL))
 8001cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d121      	bne.n	8001d02 <check_boundary_val+0x68>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01e      	beq.n	8001d02 <check_boundary_val+0x68>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	7afa      	ldrb	r2, [r7, #11]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d909      	bls.n	8001ce2 <check_boundary_val+0x48>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	7afa      	ldrb	r2, [r7, #11]
 8001cd2:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MIN_VALUE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7a1b      	ldrb	r3, [r3, #8]
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	7aba      	ldrb	r2, [r7, #10]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d20c      	bcs.n	8001d06 <check_boundary_val+0x6c>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	7aba      	ldrb	r2, [r7, #10]
 8001cf0:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MAX_VALUE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7a1b      	ldrb	r3, [r3, #8]
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	721a      	strb	r2, [r3, #8]
        if (*val > max)
 8001d00:	e001      	b.n	8001d06 <check_boundary_val+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001d02:	23ff      	movs	r3, #255	@ 0xff
 8001d04:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <set_gyro_config>:
/*!
 * @brief This internal API sets gyroscope configurations like ODR,
 * bandwidth, gyro mode, average samples and dps range.
 */
static int8_t set_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, gyr_mode;

    if (config != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8091 	beq.w	8001e4a <set_gyro_config+0x138>
    {
        /* Validate bandwidth, average samples and mode */
        rslt = validate_bw_avg_gyr_mode(&config->bwp, &config->gyr_mode, &config->avg_num, dev);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	1c58      	adds	r0, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	1c99      	adds	r1, r3, #2
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	1d1a      	adds	r2, r3, #4
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f000 f890 	bl	8001e5a <validate_bw_avg_gyr_mode>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <set_gyro_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_gyr_odr_range(&config->odr, &config->range, dev);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3303      	adds	r3, #3
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f000 f8be 	bl	8001ed0 <validate_gyr_odr_range>
 8001d54:	4603      	mov	r3, r0
 8001d56:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10d      	bne.n	8001d7c <set_gyro_config+0x6a>
        {
            if (config->gyr_mode == BMI3_GYR_MODE_LOW_PWR)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	789b      	ldrb	r3, [r3, #2]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d109      	bne.n	8001d7c <set_gyro_config+0x6a>
            {
                rslt = validate_gyr_odr_avg(config->odr, config->avg_num);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	791b      	ldrb	r3, [r3, #4]
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f002 fc50 	bl	8004618 <validate_gyr_odr_avg>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	75fb      	strb	r3, [r7, #23]
            }
        }

        if (rslt == BMI3_OK)
 8001d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d15f      	bne.n	8001e44 <set_gyro_config+0x132>
        {
            /* Set gyroscope ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_GYR_ODR, config->odr);
 8001d84:	7a3b      	ldrb	r3, [r7, #8]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	f023 030f 	bic.w	r3, r3, #15
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	82bb      	strh	r3, [r7, #20]

            /* Set gyroscope range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_GYR_RANGE, config->range);
 8001da0:	7a3b      	ldrb	r3, [r7, #8]
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	78db      	ldrb	r3, [r3, #3]
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	827b      	strh	r3, [r7, #18]

            /* Set gyroscope bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_GYR_BW, config->bwp);
 8001dbe:	7a3b      	ldrb	r3, [r7, #8]
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	01db      	lsls	r3, r3, #7
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	823b      	strh	r3, [r7, #16]

            /* Set gyroscope average sample */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_GYR_AVG_NUM, config->avg_num);
 8001dda:	7a7b      	ldrb	r3, [r7, #9]
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	81fb      	strh	r3, [r7, #14]

            /* Set gyroscope mode */
            gyr_mode = BMI3_SET_BITS(reg_data[1], BMI3_GYR_MODE, config->gyr_mode);
 8001df2:	7a7b      	ldrb	r3, [r7, #9]
 8001df4:	b21a      	sxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	789b      	ldrb	r3, [r3, #2]
 8001dfa:	031b      	lsls	r3, r3, #12
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001e0a:	8abb      	ldrh	r3, [r7, #20]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	8a7b      	ldrh	r3, [r7, #18]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	8a3b      	ldrh	r3, [r7, #16]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | gyr_mode) >> 8);
 8001e20:	89fa      	ldrh	r2, [r7, #14]
 8001e22:	89bb      	ldrh	r3, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	727b      	strb	r3, [r7, #9]

            /* Set gyro configurations */
            rslt = bmi3_set_regs(BMI3_REG_GYR_CONF, reg_data, 2, dev);
 8001e30:	f107 0108 	add.w	r1, r7, #8
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2202      	movs	r2, #2
 8001e38:	2021      	movs	r0, #33	@ 0x21
 8001e3a:	f7fe fee4 	bl	8000c06 <bmi3_set_regs>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	75fb      	strb	r3, [r7, #23]
 8001e42:	e004      	b.n	8001e4e <set_gyro_config+0x13c>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8001e44:	23fb      	movs	r3, #251	@ 0xfb
 8001e46:	75fb      	strb	r3, [r7, #23]
 8001e48:	e001      	b.n	8001e4e <set_gyro_config+0x13c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e4a:	23ff      	movs	r3, #255	@ 0xff
 8001e4c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <validate_bw_avg_gyr_mode>:
 */
static int8_t validate_bw_avg_gyr_mode(uint8_t *bandwidth,
                                       uint8_t *gyr_mode,
                                       const uint8_t *avg_num,
                                       struct bmi3_dev *dev)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (gyr_mode != NULL) && (avg_num != NULL))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d026      	beq.n	8001ebc <validate_bw_avg_gyr_mode+0x62>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <validate_bw_avg_gyr_mode+0x62>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d020      	beq.n	8001ebc <validate_bw_avg_gyr_mode+0x62>
    {
        /* Validate and auto-correct gyro mode */
        rslt = check_boundary_val(gyr_mode, BMI3_GYR_MODE_DISABLE, BMI3_GYR_MODE_HIGH_PERF, dev);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	2100      	movs	r1, #0
 8001e80:	68b8      	ldr	r0, [r7, #8]
 8001e82:	f7ff ff0a 	bl	8001c9a <check_boundary_val>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d117      	bne.n	8001ec2 <validate_bw_avg_gyr_mode+0x68>
        {
            /* Validate for averaging mode */
            rslt = check_boundary_val(bandwidth, BMI3_GYR_AVG1, BMI3_GYR_AVG64, dev);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2206      	movs	r2, #6
 8001e96:	2100      	movs	r1, #0
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7ff fefe 	bl	8001c9a <check_boundary_val>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10b      	bne.n	8001ec2 <validate_bw_avg_gyr_mode+0x68>
            {
                /* Validate for bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_GYR_BW_ODR_HALF, BMI3_GYR_BW_ODR_QUARTER, dev);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	2100      	movs	r1, #0
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff fef2 	bl	8001c9a <check_boundary_val>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001eba:	e002      	b.n	8001ec2 <validate_bw_avg_gyr_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001ebc:	23ff      	movs	r3, #255	@ 0xff
 8001ebe:	75fb      	strb	r3, [r7, #23]
 8001ec0:	e000      	b.n	8001ec4 <validate_bw_avg_gyr_mode+0x6a>
        if (rslt == BMI3_OK)
 8001ec2:	bf00      	nop
    }

    return rslt;
 8001ec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <validate_gyr_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the gyroscope set by
 * the user.
 */
static int8_t validate_gyr_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d017      	beq.n	8001f12 <validate_gyr_odr_range+0x42>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d014      	beq.n	8001f12 <validate_gyr_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_GYR_ODR_0_78HZ, BMI3_GYR_ODR_6400HZ, dev);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	220e      	movs	r2, #14
 8001eec:	2101      	movs	r1, #1
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7ff fed3 	bl	8001c9a <check_boundary_val>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10a      	bne.n	8001f16 <validate_gyr_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_GYR_RANGE_125DPS, BMI3_GYR_RANGE_2000DPS, dev);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2204      	movs	r2, #4
 8001f04:	2100      	movs	r1, #0
 8001f06:	68b8      	ldr	r0, [r7, #8]
 8001f08:	f7ff fec7 	bl	8001c9a <check_boundary_val>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001f10:	e001      	b.n	8001f16 <validate_gyr_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001f12:	23ff      	movs	r3, #255	@ 0xff
 8001f14:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <get_accel_sensor_data>:

/*!
 * @brief This internal API gets the accelerometer data from the register.
 */
int8_t get_accel_sensor_data(struct bmi3_sens_axes_data *data, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b08e      	sub	sp, #56	@ 0x38
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_ACC_NUM_BYTES] = { 0 };
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
 8001f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]

    /* Stores the accel x, y and z axis data from register */
    uint16_t acc_data[6];

    if (data != NULL)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d04e      	beq.n	8001fe6 <get_accel_sensor_data+0xc4>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, BMI3_ACC_NUM_BYTES, dev);
 8001f48:	f107 0120 	add.w	r1, r7, #32
 8001f4c:	7af8      	ldrb	r0, [r7, #11]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2214      	movs	r2, #20
 8001f52:	f7fe fdf3 	bl	8000b3c <bmi3_get_regs>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8001f5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d143      	bne.n	8001fec <get_accel_sensor_data+0xca>
        {
            acc_data[0] = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8001f64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	82bb      	strh	r3, [r7, #20]
            acc_data[1] = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8001f7a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	82fb      	strh	r3, [r7, #22]
            acc_data[2] = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8001f90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	833b      	strh	r3, [r7, #24]
            acc_data[3] = (reg_data[14] | (uint16_t)reg_data[15] << 8);
 8001fa6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	837b      	strh	r3, [r7, #26]
            acc_data[4] = (reg_data[16] | (uint16_t)reg_data[17] << 8);
 8001fbc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	83bb      	strh	r3, [r7, #28]
            acc_data[5] = reg_data[18];
 8001fd2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fd6:	83fb      	strh	r3, [r7, #30]

            /* Get accelerometer data from the register */
            get_acc_data(data, acc_data);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f92b 	bl	800223a <get_acc_data>
 8001fe4:	e002      	b.n	8001fec <get_accel_sensor_data+0xca>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001fe6:	23ff      	movs	r3, #255	@ 0xff
 8001fe8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8001fec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3738      	adds	r7, #56	@ 0x38
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <get_gyro_sensor_data>:

/*!
 * @brief This internal API gets the gyroscope data from the register.
 */
int8_t get_gyro_sensor_data(struct bmi3_sens_axes_data *data, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	@ 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	460b      	mov	r3, r1
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_GYR_NUM_BYTES] = { 0 };
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
 800200a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	811a      	strh	r2, [r3, #8]

    /* Variable to store x, y and z axis gyro data */
    uint16_t gyr_data[6];

    if (data != NULL)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d04e      	beq.n	80020ba <get_gyro_sensor_data+0xc2>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, BMI3_GYR_NUM_BYTES, dev);
 800201c:	f107 0120 	add.w	r1, r7, #32
 8002020:	7af8      	ldrb	r0, [r7, #11]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	220e      	movs	r2, #14
 8002026:	f7fe fd89 	bl	8000b3c <bmi3_get_regs>
 800202a:	4603      	mov	r3, r0
 800202c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8002030:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002034:	2b00      	cmp	r3, #0
 8002036:	d143      	bne.n	80020c0 <get_gyro_sensor_data+0xc8>
        {
            gyr_data[0] = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8002038:	f897 3020 	ldrb.w	r3, [r7, #32]
 800203c:	b21a      	sxth	r2, r3
 800203e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21b      	sxth	r3, r3
 8002046:	4313      	orrs	r3, r2
 8002048:	b21b      	sxth	r3, r3
 800204a:	b29b      	uxth	r3, r3
 800204c:	82bb      	strh	r3, [r7, #20]
            gyr_data[1] = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 800204e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002052:	b21a      	sxth	r2, r3
 8002054:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b21b      	sxth	r3, r3
 8002060:	b29b      	uxth	r3, r3
 8002062:	82fb      	strh	r3, [r7, #22]
            gyr_data[2] = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8002064:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002068:	b21a      	sxth	r2, r3
 800206a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	b21b      	sxth	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b21b      	sxth	r3, r3
 8002076:	b29b      	uxth	r3, r3
 8002078:	833b      	strh	r3, [r7, #24]
            gyr_data[3] = (reg_data[8] | (uint16_t)reg_data[9] << 8);
 800207a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800207e:	b21a      	sxth	r2, r3
 8002080:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b21b      	sxth	r3, r3
 800208c:	b29b      	uxth	r3, r3
 800208e:	837b      	strh	r3, [r7, #26]
            gyr_data[4] = (reg_data[10] | (uint16_t)reg_data[11] << 8);
 8002090:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002094:	b21a      	sxth	r2, r3
 8002096:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b21b      	sxth	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	83bb      	strh	r3, [r7, #28]
            gyr_data[5] = reg_data[12];
 80020a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020aa:	83fb      	strh	r3, [r7, #30]

            /* Get gyro data from the register */
            get_gyr_data(data, gyr_data);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f90b 	bl	80022ce <get_gyr_data>
 80020b8:	e002      	b.n	80020c0 <get_gyro_sensor_data+0xc8>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80020ba:	23ff      	movs	r3, #255	@ 0xff
 80020bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80020c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3730      	adds	r7, #48	@ 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <get_step_counter_sensor_data>:

/*!
 * @brief This internal API gets the step counter data from the register.
 */
static int8_t get_step_counter_sensor_data(uint32_t *step_count, uint8_t reg_addr, struct bmi3_dev *dev)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	460b      	mov	r3, r1
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[4] = { 0 };
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]

    if (step_count != NULL)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d026      	beq.n	8002132 <get_step_counter_sensor_data+0x66>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, 4, dev);
 80020e4:	f107 0110 	add.w	r1, r7, #16
 80020e8:	7af8      	ldrb	r0, [r7, #11]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2204      	movs	r2, #4
 80020ee:	f7fe fd25 	bl	8000b3c <bmi3_get_regs>
 80020f2:	4603      	mov	r3, r0
 80020f4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80020f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d11b      	bne.n	8002136 <get_step_counter_sensor_data+0x6a>
        {
            /* Get the step counter output in 4 bytes */
            *step_count = (uint32_t) reg_data[0];
 80020fe:	7c3b      	ldrb	r3, [r7, #16]
 8002100:	461a      	mov	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[1] << 8);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	7c7b      	ldrb	r3, [r7, #17]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	431a      	orrs	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[2] << 16);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	7cbb      	ldrb	r3, [r7, #18]
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[3] << 24);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	431a      	orrs	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e001      	b.n	8002136 <get_step_counter_sensor_data+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002132:	23ff      	movs	r3, #255	@ 0xff
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002136:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <get_orient_output_data>:
/*!
 * @brief This internal API gets the output values of orientation: portrait-
 * landscape and face up-down.
 */
static int8_t get_orient_output_data(struct bmi3_orientation_output *orient_out, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	460b      	mov	r3, r1
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[2] = { 0 };
 8002150:	2300      	movs	r3, #0
 8002152:	82bb      	strh	r3, [r7, #20]

    if (orient_out != NULL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d01b      	beq.n	8002192 <get_orient_output_data+0x50>
    {
        /* Read the data from feature engine status register */
        rslt = bmi3_get_regs(reg_addr, reg_data, 2, dev);
 800215a:	f107 0114 	add.w	r1, r7, #20
 800215e:	7af8      	ldrb	r0, [r7, #11]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f7fe fcea 	bl	8000b3c <bmi3_get_regs>
 8002168:	4603      	mov	r3, r0
 800216a:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800216c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d110      	bne.n	8002196 <get_orient_output_data+0x54>
        {
            /* Get the output value of the orientation detection feature */
            orient_out->orientation_portrait_landscape = BMI3_GET_BIT_POS0(reg_data[0],
 8002174:	7d3b      	ldrb	r3, [r7, #20]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	b2da      	uxtb	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	701a      	strb	r2, [r3, #0]
                                                                           BMI3_ORIENTATION_PORTRAIT_LANDSCAPE);

            /* Get the output value of the orientation face up-down feature */
            orient_out->orientation_faceup_down = BMI3_GET_BITS(reg_data[0], BMI3_ORIENTATION_FACEUP_DOWN);
 8002180:	7d3b      	ldrb	r3, [r7, #20]
 8002182:	109b      	asrs	r3, r3, #2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	705a      	strb	r2, [r3, #1]
 8002190:	e001      	b.n	8002196 <get_orient_output_data+0x54>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002192:	23ff      	movs	r3, #255	@ 0xff
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, gyro mode,
 * bandwidth, averaging samples and range.
 */
static int8_t get_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80021ac:	2300      	movs	r3, #0
 80021ae:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d039      	beq.n	800222a <get_gyro_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_GYR_CONF, data_array, 2, dev);
 80021b6:	f107 0108 	add.w	r1, r7, #8
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2202      	movs	r2, #2
 80021be:	2021      	movs	r0, #33	@ 0x21
 80021c0:	f7fe fcbc 	bl	8000b3c <bmi3_get_regs>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80021c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d12e      	bne.n	800222e <get_gyro_config+0x8c>
        {
            reg_data = data_array[0];
 80021d0:	7a3b      	ldrb	r3, [r7, #8]
 80021d2:	81bb      	strh	r3, [r7, #12]

            /* Get gyro ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_GYR_ODR);
 80021d4:	89bb      	ldrh	r3, [r7, #12]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	701a      	strb	r2, [r3, #0]

            /* Get gyro range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_GYR_RANGE);
 80021e2:	89bb      	ldrh	r3, [r7, #12]
 80021e4:	111b      	asrs	r3, r3, #4
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	70da      	strb	r2, [r3, #3]

            /* Get gyro bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_GYR_BW);
 80021f2:	89bb      	ldrh	r3, [r7, #12]
 80021f4:	11db      	asrs	r3, r3, #7
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8002202:	7a7b      	ldrb	r3, [r7, #9]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	81bb      	strh	r3, [r7, #12]

            /* Get gyro average sample */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_GYR_AVG_NUM);
 8002208:	89bb      	ldrh	r3, [r7, #12]
 800220a:	121b      	asrs	r3, r3, #8
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	b2da      	uxtb	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	711a      	strb	r2, [r3, #4]

            /* Get gyro mode */
            config->gyr_mode = BMI3_GET_BITS(reg_data, BMI3_GYR_MODE);
 8002218:	89bb      	ldrh	r3, [r7, #12]
 800221a:	131b      	asrs	r3, r3, #12
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	b2da      	uxtb	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	709a      	strb	r2, [r3, #2]
 8002228:	e001      	b.n	800222e <get_gyro_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800222a:	23ff      	movs	r3, #255	@ 0xff
 800222c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <get_acc_data>:

/*!
 * @brief This internal API gets the accelerometer data.
 */
static void get_acc_data(struct bmi3_sens_axes_data *data, const uint16_t *reg_data)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
    /* Stores accel x-axis data */
    data->x = (int16_t)reg_data[0];
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b21a      	sxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	801a      	strh	r2, [r3, #0]

    /* Stores accel y-axis data */
    data->y = (int16_t)reg_data[1];
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	3302      	adds	r3, #2
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b21a      	sxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	805a      	strh	r2, [r3, #2]

    /* Stores accel z-axis data */
    data->z = (int16_t)reg_data[2];
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	3304      	adds	r3, #4
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b21a      	sxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	809a      	strh	r2, [r3, #4]

    /* Stores sensor time data */
    data->sens_time = (reg_data[3] | ((uint32_t)reg_data[4] << 16));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3306      	adds	r3, #6
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	3308      	adds	r3, #8
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]

    /* Stores saturation x-axis data */
    data->sat_x = (reg_data[5] & BMI3_SATF_ACC_X_MASK);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	330a      	adds	r3, #10
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	b2d9      	uxtb	r1, r3
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	7b13      	ldrb	r3, [r2, #12]
 800228c:	f361 0300 	bfi	r3, r1, #0, #1
 8002290:	7313      	strb	r3, [r2, #12]

    /* Stores saturation y-axis data */
    data->sat_y = (reg_data[5] & BMI3_SATF_ACC_Y_MASK) >> BMI3_SATF_ACC_Y_POS;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	330a      	adds	r3, #10
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	105b      	asrs	r3, r3, #1
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	b2d9      	uxtb	r1, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	7b13      	ldrb	r3, [r2, #12]
 80022a4:	f361 0341 	bfi	r3, r1, #1, #1
 80022a8:	7313      	strb	r3, [r2, #12]

    /* Stores saturation z-axis data */
    data->sat_z = (reg_data[5] & BMI3_SATF_ACC_Z_MASK) >> BMI3_SATF_ACC_Z_POS;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	330a      	adds	r3, #10
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	109b      	asrs	r3, r3, #2
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	b2d9      	uxtb	r1, r3
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	7b13      	ldrb	r3, [r2, #12]
 80022bc:	f361 0382 	bfi	r3, r1, #2, #1
 80022c0:	7313      	strb	r3, [r2, #12]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <get_gyr_data>:

/*!
 * @brief This internal API gets the gyroscope data.
 */
static void get_gyr_data(struct bmi3_sens_axes_data *data, const uint16_t *reg_data)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
    /* Stores accel x-axis data */
    data->x = (int16_t)reg_data[0];
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b21a      	sxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	801a      	strh	r2, [r3, #0]

    /* Stores accel y-axis data */
    data->y = (int16_t)reg_data[1];
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	3302      	adds	r3, #2
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	805a      	strh	r2, [r3, #2]

    /* Stores accel z-axis data */
    data->z = (int16_t)reg_data[2];
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	3304      	adds	r3, #4
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b21a      	sxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	809a      	strh	r2, [r3, #4]

    /* Stores sensor time data */
    data->sens_time = (reg_data[3] | ((uint32_t)reg_data[4] << 16));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	3306      	adds	r3, #6
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3308      	adds	r3, #8
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]

    /* Stores saturation x-axis data */
    data->sat_x = (reg_data[5] & BMI3_SATF_GYR_X_MASK) >> BMI3_SATF_GYR_X_POS;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	330a      	adds	r3, #10
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	10db      	asrs	r3, r3, #3
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	b2d9      	uxtb	r1, r3
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	7b13      	ldrb	r3, [r2, #12]
 8002322:	f361 0300 	bfi	r3, r1, #0, #1
 8002326:	7313      	strb	r3, [r2, #12]

    /* Stores saturation y-axis data */
    data->sat_y = (reg_data[5] & BMI3_SATF_GYR_Y_MASK) >> BMI3_SATF_GYR_Y_POS;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	330a      	adds	r3, #10
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	111b      	asrs	r3, r3, #4
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	b2d9      	uxtb	r1, r3
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	7b13      	ldrb	r3, [r2, #12]
 800233a:	f361 0341 	bfi	r3, r1, #1, #1
 800233e:	7313      	strb	r3, [r2, #12]

    /* Stores saturation z-axis data */
    data->sat_z = (reg_data[5] & BMI3_SATF_GYR_Z_MASK) >> BMI3_SATF_GYR_Z_POS;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	330a      	adds	r3, #10
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	115b      	asrs	r3, r3, #5
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	b2d9      	uxtb	r1, r3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	7b13      	ldrb	r3, [r2, #12]
 8002352:	f361 0382 	bfi	r3, r1, #2, #1
 8002356:	7313      	strb	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <null_ptr_check+0x26>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d007      	beq.n	800238a <null_ptr_check+0x26>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <null_ptr_check+0x26>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 800238a:	23ff      	movs	r3, #255	@ 0xff
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e001      	b.n	8002394 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002394:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <get_latch_mode>:

/*!
 * @brief This internal API gets the latch mode from register address
 */
static int8_t get_latch_mode(struct bmi3_int_pin_config *int_cfg, struct bmi3_dev *dev)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[2] = { 0 };
 80023ae:	2300      	movs	r3, #0
 80023b0:	81bb      	strh	r3, [r7, #12]

    if (int_cfg != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <get_latch_mode+0x3c>
    {
        rslt = bmi3_get_regs(BMI3_REG_INT_CONF, data_array, 2, dev);
 80023b8:	f107 010c 	add.w	r1, r7, #12
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2202      	movs	r2, #2
 80023c0:	2039      	movs	r0, #57	@ 0x39
 80023c2:	f7fe fbbb 	bl	8000b3c <bmi3_get_regs>
 80023c6:	4603      	mov	r3, r0
 80023c8:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d108      	bne.n	80023e4 <get_latch_mode+0x40>
        {
            int_cfg->int_latch = BMI3_GET_BIT_POS0(data_array[0], BMI3_INT_LATCH);
 80023d2:	7b3b      	ldrb	r3, [r7, #12]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	705a      	strb	r2, [r3, #1]
 80023de:	e001      	b.n	80023e4 <get_latch_mode+0x40>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80023e0:	23ff      	movs	r3, #255	@ 0xff
 80023e2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <set_latch_mode>:

/*!
 * @brief This internal API sets the latch mode to register address
 */
static int8_t set_latch_mode(const struct bmi3_int_pin_config *int_cfg, struct bmi3_dev *dev)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[2] = { 0 };
 80023fa:	2300      	movs	r3, #0
 80023fc:	81bb      	strh	r3, [r7, #12]

    if (int_cfg != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d025      	beq.n	8002450 <set_latch_mode+0x60>
    {
        rslt = bmi3_get_regs(BMI3_REG_INT_CONF, data_array, 2, dev);
 8002404:	f107 010c 	add.w	r1, r7, #12
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2202      	movs	r2, #2
 800240c:	2039      	movs	r0, #57	@ 0x39
 800240e:	f7fe fb95 	bl	8000b3c <bmi3_get_regs>
 8002412:	4603      	mov	r3, r0
 8002414:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11a      	bne.n	8002454 <set_latch_mode+0x64>
        {
            /* Configure the interrupt mode */
            data_array[0] = BMI3_SET_BIT_POS0(data_array[0], BMI3_INT_LATCH, int_cfg->int_latch);
 800241e:	7b3b      	ldrb	r3, [r7, #12]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	b25a      	sxtb	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	b25b      	sxtb	r3, r3
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	b25b      	sxtb	r3, r3
 8002434:	4313      	orrs	r3, r2
 8002436:	b25b      	sxtb	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	733b      	strb	r3, [r7, #12]

            rslt = bmi3_set_regs(BMI3_REG_INT_CONF, data_array, 2, dev);
 800243c:	f107 010c 	add.w	r1, r7, #12
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2202      	movs	r2, #2
 8002444:	2039      	movs	r0, #57	@ 0x39
 8002446:	f7fe fbde 	bl	8000c06 <bmi3_set_regs>
 800244a:	4603      	mov	r3, r0
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e001      	b.n	8002454 <set_latch_mode+0x64>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002450:	23ff      	movs	r3, #255	@ 0xff
 8002452:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_any_motion_config(struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	2300      	movs	r3, #0
 8002470:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 8002472:	2305      	movs	r3, #5
 8002474:	81bb      	strh	r3, [r7, #12]

    uint8_t idx = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d078      	beq.n	8002572 <get_any_motion_config+0x112>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002480:	f107 010c 	add.w	r1, r7, #12
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2202      	movs	r2, #2
 8002488:	2041      	movs	r0, #65	@ 0x41
 800248a:	f7fe fbbc 	bl	8000c06 <bmi3_set_regs>
 800248e:	4603      	mov	r3, r0
 8002490:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002492:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d16d      	bne.n	8002576 <get_any_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where any-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 800249a:	f107 0110 	add.w	r1, r7, #16
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2206      	movs	r2, #6
 80024a2:	2042      	movs	r0, #66	@ 0x42
 80024a4:	f7fe fb4a 	bl	8000b3c <bmi3_get_regs>
 80024a8:	4603      	mov	r3, r0
 80024aa:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80024ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d160      	bne.n	8002576 <get_any_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) any_mot_config[idx++];
 80024b4:	7fbb      	ldrb	r3, [r7, #30]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	77ba      	strb	r2, [r7, #30]
 80024ba:	3320      	adds	r3, #32
 80024bc:	443b      	add	r3, r7
 80024be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024c2:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 80024c4:	7fbb      	ldrb	r3, [r7, #30]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	77ba      	strb	r2, [r7, #30]
 80024ca:	3320      	adds	r3, #32
 80024cc:	443b      	add	r3, r7
 80024ce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80024d6:	8bba      	ldrh	r2, [r7, #28]
 80024d8:	8b7b      	ldrh	r3, [r7, #26]
 80024da:	4313      	orrs	r3, r2
 80024dc:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 80024de:	8b3b      	ldrh	r3, [r7, #24]
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 80024ea:	8b3b      	ldrh	r3, [r7, #24]
 80024ec:	131b      	asrs	r3, r3, #12
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis from the word */
                lsb = (uint16_t) any_mot_config[idx++];
 80024fa:	7fbb      	ldrb	r3, [r7, #30]
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	77ba      	strb	r2, [r7, #30]
 8002500:	3320      	adds	r3, #32
 8002502:	443b      	add	r3, r7
 8002504:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002508:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 800250a:	7fbb      	ldrb	r3, [r7, #30]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	77ba      	strb	r2, [r7, #30]
 8002510:	3320      	adds	r3, #32
 8002512:	443b      	add	r3, r7
 8002514:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 800251c:	8bba      	ldrh	r2, [r7, #28]
 800251e:	8b7b      	ldrh	r3, [r7, #26]
 8002520:	4313      	orrs	r3, r2
 8002522:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8002524:	8b3b      	ldrh	r3, [r7, #24]
 8002526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from the same word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002530:	7fbb      	ldrb	r3, [r7, #30]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	77ba      	strb	r2, [r7, #30]
 8002536:	3320      	adds	r3, #32
 8002538:	443b      	add	r3, r7
 800253a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800253e:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002540:	7fbb      	ldrb	r3, [r7, #30]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	77ba      	strb	r2, [r7, #30]
 8002546:	3320      	adds	r3, #32
 8002548:	443b      	add	r3, r7
 800254a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002552:	8bba      	ldrh	r2, [r7, #28]
 8002554:	8b7b      	ldrh	r3, [r7, #26]
 8002556:	4313      	orrs	r3, r2
 8002558:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 800255a:	8b3b      	ldrh	r3, [r7, #24]
 800255c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002560:	b29a      	uxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002566:	8b3b      	ldrh	r3, [r7, #24]
 8002568:	0b5b      	lsrs	r3, r3, #13
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	811a      	strh	r2, [r3, #8]
 8002570:	e001      	b.n	8002576 <get_any_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002572:	23ff      	movs	r3, #255	@ 0xff
 8002574:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002576:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_any_motion_config(const struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	@ 0x38
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 800258e:	2305      	movs	r3, #5
 8002590:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	2300      	movs	r3, #0
 8002598:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	2300      	movs	r3, #0
 80025a0:	823b      	strh	r3, [r7, #16]
    uint16_t acc_ref_up;

    /* Wait time for clearing the event after slope is below threshold */
    uint16_t wait_time;

    if (config != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80b6 	beq.w	8002716 <set_any_motion_config+0x192>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80025aa:	f107 011c 	add.w	r1, r7, #28
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2202      	movs	r2, #2
 80025b2:	2041      	movs	r0, #65	@ 0x41
 80025b4:	f7fe fb27 	bl	8000c06 <bmi3_set_regs>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 80025be:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 80aa 	bne.w	800271c <set_any_motion_config+0x198>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80025c8:	7b3b      	ldrb	r3, [r7, #12]
 80025ca:	b21a      	sxth	r2, r3
 80025cc:	4b56      	ldr	r3, [pc, #344]	@ (8002728 <set_any_motion_config+0x1a4>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	885b      	ldrh	r3, [r3, #2]
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	b21b      	sxth	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 80025e4:	7b7b      	ldrb	r3, [r7, #13]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80025ea:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80025ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002728 <set_any_motion_config+0x1a4>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	885b      	ldrh	r3, [r3, #2]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b21b      	sxth	r3, r3
 8002604:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = ((uint16_t)data_array[1] << 8);
 8002606:	7b7b      	ldrb	r3, [r7, #13]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            acc_ref_up = BMI3_SET_BITS(acc_ref_up, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 800260c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002610:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002614:	b21a      	sxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	791b      	ldrb	r3, [r3, #4]
 800261a:	031b      	lsls	r3, r3, #12
 800261c:	b21b      	sxth	r3, r3
 800261e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002622:	b21b      	sxth	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b21b      	sxth	r3, r3
 8002628:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 800262a:	7bbb      	ldrb	r3, [r7, #14]
 800262c:	b21a      	sxth	r2, r3
 800262e:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <set_any_motion_config+0x1a8>)
 8002630:	4013      	ands	r3, r2
 8002632:	b21a      	sxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	88db      	ldrh	r3, [r3, #6]
 8002638:	b21b      	sxth	r3, r3
 800263a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	b21b      	sxth	r3, r3
 8002644:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002646:	7bbb      	ldrb	r3, [r7, #14]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 800264c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8002650:	4b36      	ldr	r3, [pc, #216]	@ (800272c <set_any_motion_config+0x1a8>)
 8002652:	4013      	ands	r3, r2
 8002654:	b21a      	sxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	88db      	ldrh	r3, [r3, #6]
 800265a:	b21b      	sxth	r3, r3
 800265c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002660:	b21b      	sxth	r3, r3
 8002662:	4313      	orrs	r3, r2
 8002664:	b21b      	sxth	r3, r3
 8002666:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	b21a      	sxth	r2, r3
 800266c:	4b30      	ldr	r3, [pc, #192]	@ (8002730 <set_any_motion_config+0x1ac>)
 800266e:	4013      	ands	r3, r2
 8002670:	b21a      	sxth	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b21b      	sxth	r3, r3
 8002678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800267c:	b21b      	sxth	r3, r3
 800267e:	4313      	orrs	r3, r2
 8002680:	b21b      	sxth	r3, r3
 8002682:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 8002684:	7c3b      	ldrb	r3, [r7, #16]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 800268a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800268e:	4b28      	ldr	r3, [pc, #160]	@ (8002730 <set_any_motion_config+0x1ac>)
 8002690:	4013      	ands	r3, r2
 8002692:	b21a      	sxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b21b      	sxth	r3, r3
 800269a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800269e:	b21b      	sxth	r3, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80026a6:	7c7b      	ldrb	r3, [r7, #17]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80026ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	891b      	ldrh	r3, [r3, #8]
 80026ba:	035b      	lsls	r3, r3, #13
 80026bc:	b21b      	sxth	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	83fb      	strh	r3, [r7, #30]

            any_mot_config[0] = (uint8_t)threshold1;
 80026c4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	753b      	strb	r3, [r7, #20]
            any_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 80026ca:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80026cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	757b      	strb	r3, [r7, #21]
            any_mot_config[2] = (uint8_t)(hysteresis1);
 80026da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	75bb      	strb	r3, [r7, #22]
            any_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 80026e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	75fb      	strb	r3, [r7, #23]
            any_mot_config[4] = (uint8_t)(duration1);
 80026ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	763b      	strb	r3, [r7, #24]
            any_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 80026f0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80026f2:	8bfb      	ldrh	r3, [r7, #30]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	767b      	strb	r3, [r7, #25]

            /* Set the configurations back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 8002700:	f107 0114 	add.w	r1, r7, #20
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2206      	movs	r2, #6
 8002708:	2042      	movs	r0, #66	@ 0x42
 800270a:	f7fe fa7c 	bl	8000c06 <bmi3_set_regs>
 800270e:	4603      	mov	r3, r0
 8002710:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002714:	e002      	b.n	800271c <set_any_motion_config+0x198>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002716:	23ff      	movs	r3, #255	@ 0xff
 8002718:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 800271c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002720:	4618      	mov	r0, r3
 8002722:	3738      	adds	r7, #56	@ 0x38
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	fffff000 	.word	0xfffff000
 800272c:	fffffc00 	.word	0xfffffc00
 8002730:	ffffe000 	.word	0xffffe000

08002734 <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_no_motion_config(struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	2300      	movs	r3, #0
 8002744:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8002746:	2308      	movs	r3, #8
 8002748:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d078      	beq.n	8002846 <get_no_motion_config+0x112>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002754:	f107 010c 	add.w	r1, r7, #12
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	2041      	movs	r0, #65	@ 0x41
 800275e:	f7fe fa52 	bl	8000c06 <bmi3_set_regs>
 8002762:	4603      	mov	r3, r0
 8002764:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002766:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d16d      	bne.n	800284a <get_no_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where no-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 800276e:	f107 0110 	add.w	r1, r7, #16
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2206      	movs	r2, #6
 8002776:	2042      	movs	r0, #66	@ 0x42
 8002778:	f7fe f9e0 	bl	8000b3c <bmi3_get_regs>
 800277c:	4603      	mov	r3, r0
 800277e:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8002780:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d160      	bne.n	800284a <get_no_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 8002788:	7fbb      	ldrb	r3, [r7, #30]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	77ba      	strb	r2, [r7, #30]
 800278e:	3320      	adds	r3, #32
 8002790:	443b      	add	r3, r7
 8002792:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002796:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8002798:	7fbb      	ldrb	r3, [r7, #30]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	77ba      	strb	r2, [r7, #30]
 800279e:	3320      	adds	r3, #32
 80027a0:	443b      	add	r3, r7
 80027a2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 80027aa:	8bba      	ldrh	r2, [r7, #28]
 80027ac:	8b7b      	ldrh	r3, [r7, #26]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 80027b2:	8b3b      	ldrh	r3, [r7, #24]
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 80027be:	8b3b      	ldrh	r3, [r7, #24]
 80027c0:	131b      	asrs	r3, r3, #12
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis */
                lsb = (uint16_t) no_mot_config[idx++];
 80027ce:	7fbb      	ldrb	r3, [r7, #30]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	77ba      	strb	r2, [r7, #30]
 80027d4:	3320      	adds	r3, #32
 80027d6:	443b      	add	r3, r7
 80027d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027dc:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 80027de:	7fbb      	ldrb	r3, [r7, #30]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	77ba      	strb	r2, [r7, #30]
 80027e4:	3320      	adds	r3, #32
 80027e6:	443b      	add	r3, r7
 80027e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 80027f0:	8bba      	ldrh	r2, [r7, #28]
 80027f2:	8b7b      	ldrh	r3, [r7, #26]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 80027f8:	8b3b      	ldrh	r3, [r7, #24]
 80027fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 8002804:	7fbb      	ldrb	r3, [r7, #30]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	77ba      	strb	r2, [r7, #30]
 800280a:	3320      	adds	r3, #32
 800280c:	443b      	add	r3, r7
 800280e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002812:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8002814:	7fbb      	ldrb	r3, [r7, #30]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	77ba      	strb	r2, [r7, #30]
 800281a:	3320      	adds	r3, #32
 800281c:	443b      	add	r3, r7
 800281e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8002826:	8bba      	ldrh	r2, [r7, #28]
 8002828:	8b7b      	ldrh	r3, [r7, #26]
 800282a:	4313      	orrs	r3, r2
 800282c:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 800282e:	8b3b      	ldrh	r3, [r7, #24]
 8002830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002834:	b29a      	uxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 800283a:	8b3b      	ldrh	r3, [r7, #24]
 800283c:	0b5b      	lsrs	r3, r3, #13
 800283e:	b29a      	uxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	811a      	strh	r2, [r3, #8]
 8002844:	e001      	b.n	800284a <get_no_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002846:	23ff      	movs	r3, #255	@ 0xff
 8002848:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800284a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_no_motion_config(const struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08e      	sub	sp, #56	@ 0x38
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8002862:	2308      	movs	r3, #8
 8002864:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	2300      	movs	r3, #0
 800286c:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	2300      	movs	r3, #0
 8002874:	823b      	strh	r3, [r7, #16]

    uint16_t acc_ref_up;

    uint16_t wait_time;

    if (config != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80b3 	beq.w	80029e4 <set_no_motion_config+0x18c>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800287e:	f107 011c 	add.w	r1, r7, #28
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2202      	movs	r2, #2
 8002886:	2041      	movs	r0, #65	@ 0x41
 8002888:	f7fe f9bd 	bl	8000c06 <bmi3_set_regs>
 800288c:	4603      	mov	r3, r0
 800288e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8002892:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 80a7 	bne.w	80029ea <set_no_motion_config+0x192>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 800289c:	7b3b      	ldrb	r3, [r7, #12]
 800289e:	b21a      	sxth	r2, r3
 80028a0:	4b55      	ldr	r3, [pc, #340]	@ (80029f8 <set_no_motion_config+0x1a0>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	b21a      	sxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	885b      	ldrh	r3, [r3, #2]
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	b21b      	sxth	r3, r3
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 80028b8:	7b7b      	ldrb	r3, [r7, #13]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80028be:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80028c2:	4b4d      	ldr	r3, [pc, #308]	@ (80029f8 <set_no_motion_config+0x1a0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	b21a      	sxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	885b      	ldrh	r3, [r3, #2]
 80028cc:	b21b      	sxth	r3, r3
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	4313      	orrs	r3, r2
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = BMI3_SET_BITS(threshold, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 80028da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80028de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028e2:	b21a      	sxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	791b      	ldrb	r3, [r3, #4]
 80028e8:	031b      	lsls	r3, r3, #12
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f0:	b21b      	sxth	r3, r3
 80028f2:	4313      	orrs	r3, r2
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 80028f8:	7bbb      	ldrb	r3, [r7, #14]
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	4b3f      	ldr	r3, [pc, #252]	@ (80029fc <set_no_motion_config+0x1a4>)
 80028fe:	4013      	ands	r3, r2
 8002900:	b21a      	sxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	88db      	ldrh	r3, [r3, #6]
 8002906:	b21b      	sxth	r3, r3
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	b21b      	sxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	b21b      	sxth	r3, r3
 8002912:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002914:	7bbb      	ldrb	r3, [r7, #14]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 800291a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800291e:	4b37      	ldr	r3, [pc, #220]	@ (80029fc <set_no_motion_config+0x1a4>)
 8002920:	4013      	ands	r3, r2
 8002922:	b21a      	sxth	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	88db      	ldrh	r3, [r3, #6]
 8002928:	b21b      	sxth	r3, r3
 800292a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800292e:	b21b      	sxth	r3, r3
 8002930:	4313      	orrs	r3, r2
 8002932:	b21b      	sxth	r3, r3
 8002934:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	b21a      	sxth	r2, r3
 800293a:	4b31      	ldr	r3, [pc, #196]	@ (8002a00 <set_no_motion_config+0x1a8>)
 800293c:	4013      	ands	r3, r2
 800293e:	b21a      	sxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b21b      	sxth	r3, r3
 8002946:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800294a:	b21b      	sxth	r3, r3
 800294c:	4313      	orrs	r3, r2
 800294e:	b21b      	sxth	r3, r3
 8002950:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 8002952:	7c3b      	ldrb	r3, [r7, #16]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 8002958:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800295c:	4b28      	ldr	r3, [pc, #160]	@ (8002a00 <set_no_motion_config+0x1a8>)
 800295e:	4013      	ands	r3, r2
 8002960:	b21a      	sxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b21b      	sxth	r3, r3
 8002968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800296c:	b21b      	sxth	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b21b      	sxth	r3, r3
 8002972:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 8002974:	7c7b      	ldrb	r3, [r7, #17]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 800297a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800297e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002982:	b21a      	sxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	891b      	ldrh	r3, [r3, #8]
 8002988:	035b      	lsls	r3, r3, #13
 800298a:	b21b      	sxth	r3, r3
 800298c:	4313      	orrs	r3, r2
 800298e:	b21b      	sxth	r3, r3
 8002990:	83fb      	strh	r3, [r7, #30]

            no_mot_config[0] = (uint8_t)threshold1;
 8002992:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002994:	b2db      	uxtb	r3, r3
 8002996:	753b      	strb	r3, [r7, #20]
            no_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8002998:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800299a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800299c:	4313      	orrs	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	757b      	strb	r3, [r7, #21]
            no_mot_config[2] = (uint8_t)(hysteresis1);
 80029a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	75bb      	strb	r3, [r7, #22]
            no_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 80029ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	75fb      	strb	r3, [r7, #23]
            no_mot_config[4] = (uint8_t)(duration1);
 80029b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	763b      	strb	r3, [r7, #24]
            no_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 80029be:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80029c0:	8bfb      	ldrh	r3, [r7, #30]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 80029ce:	f107 0114 	add.w	r1, r7, #20
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2206      	movs	r2, #6
 80029d6:	2042      	movs	r0, #66	@ 0x42
 80029d8:	f7fe f915 	bl	8000c06 <bmi3_set_regs>
 80029dc:	4603      	mov	r3, r0
 80029de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80029e2:	e002      	b.n	80029ea <set_no_motion_config+0x192>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80029e4:	23ff      	movs	r3, #255	@ 0xff
 80029e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 80029ea:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3738      	adds	r7, #56	@ 0x38
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	fffff000 	.word	0xfffff000
 80029fc:	fffffc00 	.word	0xfffffc00
 8002a00:	ffffe000 	.word	0xffffe000

08002a04 <get_flat_config>:
/*!
 * @brief This internal API gets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t get_flat_config(struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 8002a12:	230b      	movs	r3, #11
 8002a14:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d061      	beq.n	8002ae4 <get_flat_config+0xe0>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002a20:	f107 0108 	add.w	r1, r7, #8
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2202      	movs	r2, #2
 8002a28:	2041      	movs	r0, #65	@ 0x41
 8002a2a:	f7fe f8ec 	bl	8000c06 <bmi3_set_regs>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d156      	bne.n	8002ae8 <get_flat_config+0xe4>
        {
            /* Get the configuration from the feature engine register where flat feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002a3a:	f107 010c 	add.w	r1, r7, #12
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2204      	movs	r2, #4
 8002a42:	2042      	movs	r0, #66	@ 0x42
 8002a44:	f7fe f87a 	bl	8000b3c <bmi3_get_regs>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d149      	bne.n	8002ae8 <get_flat_config+0xe4>
            {
                /* Get word to calculate theta, blocking and hold time from the same word */
                lsb = (uint16_t) flat_config[idx++];
 8002a54:	7dbb      	ldrb	r3, [r7, #22]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	75ba      	strb	r2, [r7, #22]
 8002a5a:	3318      	adds	r3, #24
 8002a5c:	443b      	add	r3, r7
 8002a5e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002a62:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 8002a64:	7dbb      	ldrb	r3, [r7, #22]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	75ba      	strb	r2, [r7, #22]
 8002a6a:	3318      	adds	r3, #24
 8002a6c:	443b      	add	r3, r7
 8002a6e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	827b      	strh	r3, [r7, #18]
                lsb_msb = (lsb | msb);
 8002a76:	8aba      	ldrh	r2, [r7, #20]
 8002a78:	8a7b      	ldrh	r3, [r7, #18]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	823b      	strh	r3, [r7, #16]

                /* Get theta */
                config->theta = lsb_msb & BMI3_FLAT_THETA_MASK;
 8002a7e:	8a3b      	ldrh	r3, [r7, #16]
 8002a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	801a      	strh	r2, [r3, #0]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_FLAT_BLOCKING_MASK) >> BMI3_FLAT_BLOCKING_POS;
 8002a8a:	8a3b      	ldrh	r3, [r7, #16]
 8002a8c:	119b      	asrs	r3, r3, #6
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	805a      	strh	r2, [r3, #2]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_FLAT_HOLD_TIME_MASK) >> BMI3_FLAT_HOLD_TIME_POS;
 8002a9a:	8a3b      	ldrh	r3, [r7, #16]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) flat_config[idx++];
 8002aa4:	7dbb      	ldrb	r3, [r7, #22]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	75ba      	strb	r2, [r7, #22]
 8002aaa:	3318      	adds	r3, #24
 8002aac:	443b      	add	r3, r7
 8002aae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002ab2:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 8002ab4:	7dbb      	ldrb	r3, [r7, #22]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	75ba      	strb	r2, [r7, #22]
 8002aba:	3318      	adds	r3, #24
 8002abc:	443b      	add	r3, r7
 8002abe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002ac6:	8aba      	ldrh	r2, [r7, #20]
 8002ac8:	8a7b      	ldrh	r3, [r7, #18]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_FLAT_SLOPE_THRES_MASK;
 8002ace:	8a3b      	ldrh	r3, [r7, #16]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	811a      	strh	r2, [r3, #8]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_FLAT_HYST_MASK) >> BMI3_FLAT_HYST_POS;
 8002ad8:	8a3b      	ldrh	r3, [r7, #16]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	809a      	strh	r2, [r3, #4]
 8002ae2:	e001      	b.n	8002ae8 <get_flat_config+0xe4>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002ae4:	23ff      	movs	r3, #255	@ 0xff
 8002ae6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <set_flat_config>:
/*!
 * @brief This internal API sets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t set_flat_config(const struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 8002b02:	230b      	movs	r3, #11
 8002b04:	81bb      	strh	r3, [r7, #12]

    uint16_t theta, blocking, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d06f      	beq.n	8002bec <set_flat_config+0xf8>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002b0c:	f107 010c 	add.w	r1, r7, #12
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2202      	movs	r2, #2
 8002b14:	2041      	movs	r0, #65	@ 0x41
 8002b16:	f7fe f876 	bl	8000c06 <bmi3_set_regs>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002b1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d164      	bne.n	8002bf0 <set_flat_config+0xfc>
        {
            /* Set theta */
            theta = BMI3_SET_BIT_POS0(flat_config[0], BMI3_FLAT_THETA, config->theta);
 8002b26:	7c3b      	ldrb	r3, [r7, #16]
 8002b28:	b21b      	sxth	r3, r3
 8002b2a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b2e:	b21a      	sxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b21b      	sxth	r3, r3
 8002b40:	83bb      	strh	r3, [r7, #28]

            /* Set blocking */
            blocking = BMI3_SET_BITS(flat_config[0], BMI3_FLAT_BLOCKING, config->blocking);
 8002b42:	7c3b      	ldrb	r3, [r7, #16]
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002b4a:	b21a      	sxth	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	885b      	ldrh	r3, [r3, #2]
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	b21b      	sxth	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	b21b      	sxth	r3, r3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b21b      	sxth	r3, r3
 8002b5c:	837b      	strh	r3, [r7, #26]

            /* Set hold time */
            holdtime = ((uint16_t)flat_config[1] << 8);
 8002b5e:	7c7b      	ldrb	r3, [r7, #17]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	833b      	strh	r3, [r7, #24]
            holdtime = BMI3_SET_BITS(holdtime, BMI3_FLAT_HOLD_TIME, config->hold_time);
 8002b64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	b21a      	sxth	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	88db      	ldrh	r3, [r3, #6]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	833b      	strh	r3, [r7, #24]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(flat_config[2], BMI3_FLAT_SLOPE_THRES, config->slope_thres);
 8002b7a:	7cbb      	ldrb	r3, [r7, #18]
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b82:	b21a      	sxth	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	891b      	ldrh	r3, [r3, #8]
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	82fb      	strh	r3, [r7, #22]

            /* Set hysteresis */
            hyst = ((uint16_t)flat_config[3] << 8);
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	82bb      	strh	r3, [r7, #20]
            hyst = BMI3_SET_BITS(hyst, BMI3_FLAT_HYST, config->hysteresis);
 8002b9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	889b      	ldrh	r3, [r3, #4]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	82bb      	strh	r3, [r7, #20]

            flat_config[0] = (uint8_t)(theta | blocking);
 8002bb0:	8bbb      	ldrh	r3, [r7, #28]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	8b7b      	ldrh	r3, [r7, #26]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	743b      	strb	r3, [r7, #16]
            flat_config[1] = (uint8_t)(holdtime >> 8);
 8002bbe:	8b3b      	ldrh	r3, [r7, #24]
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	747b      	strb	r3, [r7, #17]
            flat_config[2] = (uint8_t)(slope_thres);
 8002bc8:	8afb      	ldrh	r3, [r7, #22]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	74bb      	strb	r3, [r7, #18]
            flat_config[3] = (uint8_t)(hyst >> 8);
 8002bce:	8abb      	ldrh	r3, [r7, #20]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002bd8:	f107 0110 	add.w	r1, r7, #16
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2204      	movs	r2, #4
 8002be0:	2042      	movs	r0, #66	@ 0x42
 8002be2:	f7fe f810 	bl	8000c06 <bmi3_set_regs>
 8002be6:	4603      	mov	r3, r0
 8002be8:	77fb      	strb	r3, [r7, #31]
 8002bea:	e001      	b.n	8002bf0 <set_flat_config+0xfc>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002bec:	23ff      	movs	r3, #255	@ 0xff
 8002bee:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t get_sig_motion_config(struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]

    /* Variable to define a word */
    uint16_t lsb_msb;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002c06:	230d      	movs	r3, #13
 8002c08:	81bb      	strh	r3, [r7, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	77bb      	strb	r3, [r7, #30]

    if (config != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d074      	beq.n	8002cfe <get_sig_motion_config+0x102>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002c14:	f107 010c 	add.w	r1, r7, #12
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	2041      	movs	r0, #65	@ 0x41
 8002c1e:	f7fd fff2 	bl	8000c06 <bmi3_set_regs>
 8002c22:	4603      	mov	r3, r0
 8002c24:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002c26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d169      	bne.n	8002d02 <get_sig_motion_config+0x106>
        {
            /* Get the configuration from the feature engine register where sig motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8002c2e:	f107 0110 	add.w	r1, r7, #16
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2206      	movs	r2, #6
 8002c36:	2042      	movs	r0, #66	@ 0x42
 8002c38:	f7fd ff80 	bl	8000b3c <bmi3_get_regs>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8002c40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d15c      	bne.n	8002d02 <get_sig_motion_config+0x106>
            {
                /* Get word to calculate block size */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002c48:	7fbb      	ldrb	r3, [r7, #30]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	77ba      	strb	r2, [r7, #30]
 8002c4e:	3320      	adds	r3, #32
 8002c50:	443b      	add	r3, r7
 8002c52:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c56:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8002c58:	7fbb      	ldrb	r3, [r7, #30]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	77ba      	strb	r2, [r7, #30]
 8002c5e:	3320      	adds	r3, #32
 8002c60:	443b      	add	r3, r7
 8002c62:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002c6a:	8bba      	ldrh	r2, [r7, #28]
 8002c6c:	8b7b      	ldrh	r3, [r7, #26]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	833b      	strh	r3, [r7, #24]

                /* Get block size */
                config->block_size = lsb_msb & BMI3_SIG_BLOCK_SIZE_MASK;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8b3a      	ldrh	r2, [r7, #24]
 8002c76:	801a      	strh	r2, [r3, #0]

                /* Get word to calculate peak 2 peak minimum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002c78:	7fbb      	ldrb	r3, [r7, #30]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	77ba      	strb	r2, [r7, #30]
 8002c7e:	3320      	adds	r3, #32
 8002c80:	443b      	add	r3, r7
 8002c82:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c86:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8002c88:	7fbb      	ldrb	r3, [r7, #30]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	77ba      	strb	r2, [r7, #30]
 8002c8e:	3320      	adds	r3, #32
 8002c90:	443b      	add	r3, r7
 8002c92:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002c9a:	8bba      	ldrh	r2, [r7, #28]
 8002c9c:	8b7b      	ldrh	r3, [r7, #26]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak minimum */
                config->peak_2_peak_min = (lsb_msb & BMI3_SIG_P2P_MIN_MASK);
 8002ca2:	8b3b      	ldrh	r3, [r7, #24]
 8002ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	805a      	strh	r2, [r3, #2]

                /* Get mcr minimum */
                config->mcr_min = (lsb_msb & BMI3_SIG_MCR_MIN_MASK) >> BMI3_SIG_MCR_MIN_POS;
 8002cae:	8b3b      	ldrh	r3, [r7, #24]
 8002cb0:	0a9b      	lsrs	r3, r3, #10
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate peak 2 peak maximum and mcr maximum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002cba:	7fbb      	ldrb	r3, [r7, #30]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	77ba      	strb	r2, [r7, #30]
 8002cc0:	3320      	adds	r3, #32
 8002cc2:	443b      	add	r3, r7
 8002cc4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002cc8:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8002cca:	7fbb      	ldrb	r3, [r7, #30]
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	77ba      	strb	r2, [r7, #30]
 8002cd0:	3320      	adds	r3, #32
 8002cd2:	443b      	add	r3, r7
 8002cd4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002cdc:	8bba      	ldrh	r2, [r7, #28]
 8002cde:	8b7b      	ldrh	r3, [r7, #26]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak maximum */
                config->peak_2_peak_max = (lsb_msb & BMI3_SIG_P2P_MAX_MASK);
 8002ce4:	8b3b      	ldrh	r3, [r7, #24]
 8002ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	80da      	strh	r2, [r3, #6]

                /* Get mcr maximum */
                config->mcr_max = (lsb_msb & BMI3_MCR_MAX_MASK) >> BMI3_MCR_MAX_POS;
 8002cf0:	8b3b      	ldrh	r3, [r7, #24]
 8002cf2:	0a9b      	lsrs	r3, r3, #10
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	721a      	strb	r2, [r3, #8]
 8002cfc:	e001      	b.n	8002d02 <get_sig_motion_config+0x106>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002cfe:	23ff      	movs	r3, #255	@ 0xff
 8002d00:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002d02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t set_sig_motion_config(const struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	@ 0x38
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002d1a:	230d      	movs	r3, #13
 8002d1c:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t sig_mot_config[6] = { 0 };
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	2300      	movs	r3, #0
 8002d24:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	823b      	strh	r3, [r7, #16]

    uint16_t mcr_min;

    uint16_t mcr_max;

    if (config != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 809d 	beq.w	8002e70 <set_sig_motion_config+0x160>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002d36:	f107 011c 	add.w	r1, r7, #28
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	2041      	movs	r0, #65	@ 0x41
 8002d40:	f7fd ff61 	bl	8000c06 <bmi3_set_regs>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8002d4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 8091 	bne.w	8002e76 <set_sig_motion_config+0x166>
        {
            /* Set block size for lsb 8 bits */
            block_size1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	86bb      	strh	r3, [r7, #52]	@ 0x34

            block_size = ((uint16_t)data_array[1] << 8);
 8002d5a:	7b7b      	ldrb	r3, [r7, #13]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set block size for msb 8 bits */
            block_size2 = BMI3_SET_BIT_POS0(block_size, BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set peak to peak minimum for lsb 8 bits */
            p2p_min1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002d66:	7bbb      	ldrb	r3, [r7, #14]
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	4b46      	ldr	r3, [pc, #280]	@ (8002e84 <set_sig_motion_config+0x174>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b21a      	sxth	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	885b      	ldrh	r3, [r3, #2]
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7a:	b21b      	sxth	r3, r3
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            p2p_min = ((uint16_t)data_array[3] << 8);
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set peak to peak minimum for msb 8 bits */
            p2p_min2 = BMI3_SET_BIT_POS0(p2p_min, BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002d88:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8002d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e84 <set_sig_motion_config+0x174>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	b21a      	sxth	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	885b      	ldrh	r3, [r3, #2]
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b21b      	sxth	r3, r3
 8002da2:	857b      	strh	r3, [r7, #42]	@ 0x2a

            mcr_min = ((uint16_t)data_array[3] << 8);
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mcr minimum */
            mcr_min = BMI3_SET_BITS(mcr_min, BMI3_SIG_MCR_MIN, config->mcr_min);
 8002daa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8002dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	791b      	ldrb	r3, [r3, #4]
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	b21b      	sxth	r3, r3
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set peak to peak maximum for lsb 8 bits */
            p2p_max1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002dc2:	7c3b      	ldrb	r3, [r7, #16]
 8002dc4:	b21a      	sxth	r2, r3
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002e84 <set_sig_motion_config+0x174>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	b21a      	sxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	88db      	ldrh	r3, [r3, #6]
 8002dd0:	b21b      	sxth	r3, r3
 8002dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd6:	b21b      	sxth	r3, r3
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	84fb      	strh	r3, [r7, #38]	@ 0x26

            p2p_max = ((uint16_t)data_array[5] << 8);
 8002dde:	7c7b      	ldrb	r3, [r7, #17]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set peak to peak maximum for msb 8 bits */
            p2p_max2 = BMI3_SET_BIT_POS0(p2p_max, BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002de4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002de8:	4b26      	ldr	r3, [pc, #152]	@ (8002e84 <set_sig_motion_config+0x174>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	88db      	ldrh	r3, [r3, #6]
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	b21b      	sxth	r3, r3
 8002dfe:	847b      	strh	r3, [r7, #34]	@ 0x22

            mcr_max = ((uint16_t)data_array[5] << 8);
 8002e00:	7c7b      	ldrb	r3, [r7, #17]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	843b      	strh	r3, [r7, #32]

            /* Set mcr maximum */
            mcr_max = BMI3_SET_BITS(mcr_max, BMI3_MCR_MAX, config->mcr_max);
 8002e06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e0e:	b21a      	sxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7a1b      	ldrb	r3, [r3, #8]
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b21b      	sxth	r3, r3
 8002e1c:	843b      	strh	r3, [r7, #32]

            sig_mot_config[0] = (uint8_t)(block_size1);
 8002e1e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	753b      	strb	r3, [r7, #20]
            sig_mot_config[1] = (uint8_t)(block_size2 >> 8);
 8002e24:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	757b      	strb	r3, [r7, #21]
            sig_mot_config[2] = (uint8_t)(p2p_min1);
 8002e2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	75bb      	strb	r3, [r7, #22]
            sig_mot_config[3] = (uint8_t)((p2p_min2 | mcr_min) >> 8);
 8002e34:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002e36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	75fb      	strb	r3, [r7, #23]
            sig_mot_config[4] = (uint8_t)(p2p_max1);
 8002e44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	763b      	strb	r3, [r7, #24]
            sig_mot_config[5] = (uint8_t)((p2p_max2 | mcr_max) >> 8);
 8002e4a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002e4c:	8c3b      	ldrh	r3, [r7, #32]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8002e5a:	f107 0114 	add.w	r1, r7, #20
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2206      	movs	r2, #6
 8002e62:	2042      	movs	r0, #66	@ 0x42
 8002e64:	f7fd fecf 	bl	8000c06 <bmi3_set_regs>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002e6e:	e002      	b.n	8002e76 <set_sig_motion_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002e70:	23ff      	movs	r3, #255	@ 0xff
 8002e72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8002e76:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3738      	adds	r7, #56	@ 0x38
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	fffffc00 	.word	0xfffffc00

08002e88 <get_tilt_config>:
/*!
 * @brief This internal API gets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t get_tilt_config(struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002e96:	2321      	movs	r3, #33	@ 0x21
 8002e98:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d057      	beq.n	8002f54 <get_tilt_config+0xcc>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002ea4:	f107 0108 	add.w	r1, r7, #8
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	2041      	movs	r0, #65	@ 0x41
 8002eae:	f7fd feaa 	bl	8000c06 <bmi3_set_regs>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d14c      	bne.n	8002f58 <get_tilt_config+0xd0>
        {
            /* Get the configuration from the feature engine register where tilt feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002ebe:	f107 010c 	add.w	r1, r7, #12
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	2042      	movs	r0, #66	@ 0x42
 8002ec8:	f7fd fe38 	bl	8000b3c <bmi3_get_regs>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d13f      	bne.n	8002f58 <get_tilt_config+0xd0>
            {
                /* Get word to calculate segment size and minimum tilt angle from the same word */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002ed8:	7dbb      	ldrb	r3, [r7, #22]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	75ba      	strb	r2, [r7, #22]
 8002ede:	3318      	adds	r3, #24
 8002ee0:	443b      	add	r3, r7
 8002ee2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002ee6:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002ee8:	7dbb      	ldrb	r3, [r7, #22]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	75ba      	strb	r2, [r7, #22]
 8002eee:	3318      	adds	r3, #24
 8002ef0:	443b      	add	r3, r7
 8002ef2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002ef6:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002ef8:	8a7b      	ldrh	r3, [r7, #18]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	823b      	strh	r3, [r7, #16]

                /* Get segment size */
                config->segment_size = lsb_msb & BMI3_TILT_SEGMENT_SIZE_MASK;
 8002f08:	8a3b      	ldrh	r3, [r7, #16]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	801a      	strh	r2, [r3, #0]

                /* Get minimum tilt angle */
                config->min_tilt_angle = (lsb_msb & BMI3_TILT_MIN_TILT_ANGLE_MASK) >> BMI3_TILT_MIN_TILT_ANGLE_POS;
 8002f12:	8a3b      	ldrh	r3, [r7, #16]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate beta accel mean */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002f1c:	7dbb      	ldrb	r3, [r7, #22]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	75ba      	strb	r2, [r7, #22]
 8002f22:	3318      	adds	r3, #24
 8002f24:	443b      	add	r3, r7
 8002f26:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f2a:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002f2c:	7dbb      	ldrb	r3, [r7, #22]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	75ba      	strb	r2, [r7, #22]
 8002f32:	3318      	adds	r3, #24
 8002f34:	443b      	add	r3, r7
 8002f36:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f3a:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002f3c:	8a7b      	ldrh	r3, [r7, #18]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	b21a      	sxth	r2, r3
 8002f42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	b21b      	sxth	r3, r3
 8002f4a:	823b      	strh	r3, [r7, #16]

                /* Get beta accel mean */
                config->beta_acc_mean = lsb_msb & BMI3_TILT_BETA_ACC_MEAN_MASK;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8a3a      	ldrh	r2, [r7, #16]
 8002f50:	809a      	strh	r2, [r3, #4]
 8002f52:	e001      	b.n	8002f58 <get_tilt_config+0xd0>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002f54:	23ff      	movs	r3, #255	@ 0xff
 8002f56:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <set_tilt_config>:
/*!
 * @brief This internal API sets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t set_tilt_config(const struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002f6e:	2321      	movs	r3, #33	@ 0x21
 8002f70:	823b      	strh	r3, [r7, #16]

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]

    uint8_t data_array[4] = { 0 };
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]

    uint16_t min_tilt_angle, beta_acc_mean;

    uint16_t segment_size;

    if (config != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d04a      	beq.n	8003016 <set_tilt_config+0xb2>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002f80:	f107 0110 	add.w	r1, r7, #16
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2202      	movs	r2, #2
 8002f88:	2041      	movs	r0, #65	@ 0x41
 8002f8a:	f7fd fe3c 	bl	8000c06 <bmi3_set_regs>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002f92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d13f      	bne.n	800301a <set_tilt_config+0xb6>
        {
            /* Set segment size */
            segment_size = BMI3_SET_BIT_POS0(data_array[0], BMI3_TILT_SEGMENT_SIZE, config->segment_size);
 8002f9a:	7a3b      	ldrb	r3, [r7, #8]
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fa2:	b21a      	sxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	b21b      	sxth	r3, r3
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	b21b      	sxth	r3, r3
 8002fb2:	83bb      	strh	r3, [r7, #28]

            min_tilt_angle1 = ((uint16_t)data_array[1] << 8);
 8002fb4:	7a7b      	ldrb	r3, [r7, #9]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	837b      	strh	r3, [r7, #26]

            /* Set minimum tilt angle */
            min_tilt_angle = BMI3_SET_BITS(min_tilt_angle1, BMI3_TILT_MIN_TILT_ANGLE, config->min_tilt_angle);
 8002fba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	b21a      	sxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	885b      	ldrh	r3, [r3, #2]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	b21b      	sxth	r3, r3
 8002fce:	833b      	strh	r3, [r7, #24]

            /* Set beta accel mean for lsb 8 bits */
            beta_acc_mean1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	889b      	ldrh	r3, [r3, #4]
 8002fd4:	82fb      	strh	r3, [r7, #22]

            beta_acc_mean = ((uint16_t)data_array[3] << 8);
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	82bb      	strh	r3, [r7, #20]

            /* Set beta accel mean for msb 8 bits */
            beta_acc_mean2 = BMI3_SET_BIT_POS0(beta_acc_mean, BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	889b      	ldrh	r3, [r3, #4]
 8002fe0:	827b      	strh	r3, [r7, #18]

            tilt_config[0] = (uint8_t)segment_size;
 8002fe2:	8bbb      	ldrh	r3, [r7, #28]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	733b      	strb	r3, [r7, #12]
            tilt_config[1] = (uint8_t)(min_tilt_angle >> 8);
 8002fe8:	8b3b      	ldrh	r3, [r7, #24]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	737b      	strb	r3, [r7, #13]
            tilt_config[2] = (uint8_t)(beta_acc_mean1);
 8002ff2:	8afb      	ldrh	r3, [r7, #22]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	73bb      	strb	r3, [r7, #14]
            tilt_config[3] = (uint8_t)(beta_acc_mean2 >> 8);
 8002ff8:	8a7b      	ldrh	r3, [r7, #18]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	73fb      	strb	r3, [r7, #15]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8003002:	f107 010c 	add.w	r1, r7, #12
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2204      	movs	r2, #4
 800300a:	2042      	movs	r0, #66	@ 0x42
 800300c:	f7fd fdfb 	bl	8000c06 <bmi3_set_regs>
 8003010:	4603      	mov	r3, r0
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e001      	b.n	800301a <set_tilt_config+0xb6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003016:	23ff      	movs	r3, #255	@ 0xff
 8003018:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800301a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <get_orientation_config>:
/*!
 * @brief This internal API gets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t get_orientation_config(struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of orient feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8003034:	231c      	movs	r3, #28
 8003036:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d073      	beq.n	800312a <get_orientation_config+0x104>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003042:	f107 0108 	add.w	r1, r7, #8
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2202      	movs	r2, #2
 800304a:	2041      	movs	r0, #65	@ 0x41
 800304c:	f7fd fddb 	bl	8000c06 <bmi3_set_regs>
 8003050:	4603      	mov	r3, r0
 8003052:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003054:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d168      	bne.n	800312e <get_orientation_config+0x108>
        {
            /* Get the configuration from the feature engine register where orientation feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 800305c:	f107 010c 	add.w	r1, r7, #12
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2204      	movs	r2, #4
 8003064:	2042      	movs	r0, #66	@ 0x42
 8003066:	f7fd fd69 	bl	8000b3c <bmi3_get_regs>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 800306e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d15b      	bne.n	800312e <get_orientation_config+0x108>
            {
                /* Get word to calculate upside down enable, mode, blocking, theta and hold time
                 * from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8003076:	7dbb      	ldrb	r3, [r7, #22]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	75ba      	strb	r2, [r7, #22]
 800307c:	3318      	adds	r3, #24
 800307e:	443b      	add	r3, r7
 8003080:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003084:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8003086:	7dbb      	ldrb	r3, [r7, #22]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	75ba      	strb	r2, [r7, #22]
 800308c:	3318      	adds	r3, #24
 800308e:	443b      	add	r3, r7
 8003090:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8003098:	8aba      	ldrh	r2, [r7, #20]
 800309a:	8a7b      	ldrh	r3, [r7, #18]
 800309c:	4313      	orrs	r3, r2
 800309e:	823b      	strh	r3, [r7, #16]

                /* Get upside enable */
                config->ud_en = lsb_msb & BMI3_ORIENT_UD_EN_MASK;
 80030a0:	8a3b      	ldrh	r3, [r7, #16]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	701a      	strb	r2, [r3, #0]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_ORIENT_MODE_MASK) >> BMI3_ORIENT_MODE_POS;
 80030ae:	8a3b      	ldrh	r3, [r7, #16]
 80030b0:	105b      	asrs	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	705a      	strb	r2, [r3, #1]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_ORIENT_BLOCKING_MASK) >> BMI3_ORIENT_BLOCKING_POS;
 80030be:	8a3b      	ldrh	r3, [r7, #16]
 80030c0:	10db      	asrs	r3, r3, #3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	709a      	strb	r2, [r3, #2]

                /* Get theta */
                config->theta = (lsb_msb & BMI3_ORIENT_THETA_MASK) >> BMI3_ORIENT_THETA_POS;
 80030ce:	8a3b      	ldrh	r3, [r7, #16]
 80030d0:	115b      	asrs	r3, r3, #5
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	70da      	strb	r2, [r3, #3]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_ORIENT_HOLD_TIME_MASK) >> BMI3_ORIENT_HOLD_TIME_POS;
 80030de:	8a3b      	ldrh	r3, [r7, #16]
 80030e0:	0adb      	lsrs	r3, r3, #11
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) orient_config[idx++];
 80030ea:	7dbb      	ldrb	r3, [r7, #22]
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	75ba      	strb	r2, [r7, #22]
 80030f0:	3318      	adds	r3, #24
 80030f2:	443b      	add	r3, r7
 80030f4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80030f8:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 80030fa:	7dbb      	ldrb	r3, [r7, #22]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	75ba      	strb	r2, [r7, #22]
 8003100:	3318      	adds	r3, #24
 8003102:	443b      	add	r3, r7
 8003104:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 800310c:	8aba      	ldrh	r2, [r7, #20]
 800310e:	8a7b      	ldrh	r3, [r7, #18]
 8003110:	4313      	orrs	r3, r2
 8003112:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_ORIENT_SLOPE_THRES_MASK;
 8003114:	8a3b      	ldrh	r3, [r7, #16]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	719a      	strb	r2, [r3, #6]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ORIENT_HYST_MASK) >> BMI3_ORIENT_HYST_POS;
 800311c:	8a3b      	ldrh	r3, [r7, #16]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	b29b      	uxth	r3, r3
 8003122:	b2da      	uxtb	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	715a      	strb	r2, [r3, #5]
 8003128:	e001      	b.n	800312e <get_orientation_config+0x108>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800312a:	23ff      	movs	r3, #255	@ 0xff
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800312e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <set_orientation_config>:
/*!
 * @brief This internal API sets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t set_orientation_config(const struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b08a      	sub	sp, #40	@ 0x28
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of orient feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8003148:	231c      	movs	r3, #28
 800314a:	81bb      	strh	r3, [r7, #12]

    uint16_t ud_en, mode, blocking, theta, theta1, holdtime, slope_thres, hyst;

    if (config != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80a3 	beq.w	800329a <set_orientation_config+0x160>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8003154:	f107 010c 	add.w	r1, r7, #12
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2202      	movs	r2, #2
 800315c:	2041      	movs	r0, #65	@ 0x41
 800315e:	f7fd fd52 	bl	8000c06 <bmi3_set_regs>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI3_OK)
 8003168:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800316c:	2b00      	cmp	r3, #0
 800316e:	f040 8097 	bne.w	80032a0 <set_orientation_config+0x166>
        {
            /* Set upside down bit */
            ud_en = BMI3_SET_BIT_POS0(orient_config[0], BMI3_ORIENT_UD_EN, config->ud_en);
 8003172:	7c3b      	ldrb	r3, [r7, #16]
 8003174:	b21b      	sxth	r3, r3
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	b21a      	sxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b21b      	sxth	r3, r3
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	b21b      	sxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b21b      	sxth	r3, r3
 800318c:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set mode */
            mode = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_MODE, config->mode);
 800318e:	7c3b      	ldrb	r3, [r7, #16]
 8003190:	b21b      	sxth	r3, r3
 8003192:	f023 0306 	bic.w	r3, r3, #6
 8003196:	b21a      	sxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	b21b      	sxth	r3, r3
 80031a0:	f003 0306 	and.w	r3, r3, #6
 80031a4:	b21b      	sxth	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set blocking */
            blocking = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_BLOCKING, config->blocking);
 80031ac:	7c3b      	ldrb	r3, [r7, #16]
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	f023 0318 	bic.w	r3, r3, #24
 80031b4:	b21a      	sxth	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	789b      	ldrb	r3, [r3, #2]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	b21b      	sxth	r3, r3
 80031be:	f003 0318 	and.w	r3, r3, #24
 80031c2:	b21b      	sxth	r3, r3
 80031c4:	4313      	orrs	r3, r2
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	843b      	strh	r3, [r7, #32]

            /* Set theta for lsb 8 bits */
            theta1 = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_THETA, config->theta);
 80031ca:	7c3b      	ldrb	r3, [r7, #16]
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	78db      	ldrb	r3, [r3, #3]
 80031d8:	015b      	lsls	r3, r3, #5
 80031da:	b21b      	sxth	r3, r3
 80031dc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80031e0:	b21b      	sxth	r3, r3
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b21b      	sxth	r3, r3
 80031e6:	83fb      	strh	r3, [r7, #30]

            theta = ((uint16_t)orient_config[1] << 8);
 80031e8:	7c7b      	ldrb	r3, [r7, #17]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	83bb      	strh	r3, [r7, #28]

            /* Set theta for msb 8 bits */
            theta = BMI3_SET_BITS(theta, BMI3_ORIENT_THETA, config->theta);
 80031ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031f2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80031f6:	b21a      	sxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	78db      	ldrb	r3, [r3, #3]
 80031fc:	015b      	lsls	r3, r3, #5
 80031fe:	b21b      	sxth	r3, r3
 8003200:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8003204:	b21b      	sxth	r3, r3
 8003206:	4313      	orrs	r3, r2
 8003208:	b21b      	sxth	r3, r3
 800320a:	83bb      	strh	r3, [r7, #28]

            /* Set hold time */
            holdtime = BMI3_SET_BITS(orient_config[1], BMI3_ORIENT_HOLD_TIME, config->hold_time);
 800320c:	7c7b      	ldrb	r3, [r7, #17]
 800320e:	b21a      	sxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	791b      	ldrb	r3, [r3, #4]
 8003214:	02db      	lsls	r3, r3, #11
 8003216:	b21b      	sxth	r3, r3
 8003218:	4313      	orrs	r3, r2
 800321a:	b21b      	sxth	r3, r3
 800321c:	837b      	strh	r3, [r7, #26]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(orient_config[2], BMI3_ORIENT_SLOPE_THRES, config->slope_thres);
 800321e:	7cbb      	ldrb	r3, [r7, #18]
 8003220:	b21b      	sxth	r3, r3
 8003222:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003226:	b21a      	sxth	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	799b      	ldrb	r3, [r3, #6]
 800322c:	b21b      	sxth	r3, r3
 800322e:	4313      	orrs	r3, r2
 8003230:	b21b      	sxth	r3, r3
 8003232:	833b      	strh	r3, [r7, #24]

            /* Set hysteresis */
            hyst = BMI3_SET_BITS(orient_config[3], BMI3_ORIENT_HYST, config->hysteresis);
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	b21a      	sxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	795b      	ldrb	r3, [r3, #5]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	b21b      	sxth	r3, r3
 8003240:	4313      	orrs	r3, r2
 8003242:	b21b      	sxth	r3, r3
 8003244:	82fb      	strh	r3, [r7, #22]

            orient_config[0] = (uint8_t)(ud_en | mode | blocking | theta1);
 8003246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003248:	b2da      	uxtb	r2, r3
 800324a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800324c:	b2db      	uxtb	r3, r3
 800324e:	4313      	orrs	r3, r2
 8003250:	b2da      	uxtb	r2, r3
 8003252:	8c3b      	ldrh	r3, [r7, #32]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4313      	orrs	r3, r2
 8003258:	b2da      	uxtb	r2, r3
 800325a:	8bfb      	ldrh	r3, [r7, #30]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	4313      	orrs	r3, r2
 8003260:	b2db      	uxtb	r3, r3
 8003262:	743b      	strb	r3, [r7, #16]
            orient_config[1] = (uint8_t)((theta | holdtime) >> 8);
 8003264:	8bba      	ldrh	r2, [r7, #28]
 8003266:	8b7b      	ldrh	r3, [r7, #26]
 8003268:	4313      	orrs	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	b29b      	uxth	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	747b      	strb	r3, [r7, #17]
            orient_config[2] = (uint8_t)(slope_thres);
 8003274:	8b3b      	ldrh	r3, [r7, #24]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	74bb      	strb	r3, [r7, #18]
            orient_config[3] = (uint8_t)(hyst >> 8);
 800327a:	8afb      	ldrh	r3, [r7, #22]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	b29b      	uxth	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8003284:	f107 0110 	add.w	r1, r7, #16
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2204      	movs	r2, #4
 800328c:	2042      	movs	r0, #66	@ 0x42
 800328e:	f7fd fcba 	bl	8000c06 <bmi3_set_regs>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003298:	e002      	b.n	80032a0 <set_orientation_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800329a:	23ff      	movs	r3, #255	@ 0xff
 800329c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80032a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3728      	adds	r7, #40	@ 0x28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <get_step_config>:
/*!
 * @brief This internal API gets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t get_step_config(struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08c      	sub	sp, #48	@ 0x30
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	611a      	str	r2, [r3, #16]

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 80032ca:	2310      	movs	r3, #16
 80032cc:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 81e7 	beq.w	80036aa <get_step_config+0x3fe>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80032dc:	f107 010c 	add.w	r1, r7, #12
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2202      	movs	r2, #2
 80032e4:	2041      	movs	r0, #65	@ 0x41
 80032e6:	f7fd fc8e 	bl	8000c06 <bmi3_set_regs>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 80032f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f040 81db 	bne.w	80036b0 <get_step_config+0x404>
        {
            /* Get the configuration from the feature engine register where step counter feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 80032fa:	f107 0110 	add.w	r1, r7, #16
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2218      	movs	r2, #24
 8003302:	2042      	movs	r0, #66	@ 0x42
 8003304:	f7fd fc1a 	bl	8000b3c <bmi3_get_regs>
 8003308:	4603      	mov	r3, r0
 800330a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (rslt == BMI3_OK)
 800330e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 81cc 	bne.w	80036b0 <get_step_config+0x404>
            {
                /* Get word to calculate water-mark level, reset counter from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003318:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003322:	3330      	adds	r3, #48	@ 0x30
 8003324:	443b      	add	r3, r7
 8003326:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800332a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800332c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003336:	3330      	adds	r3, #48	@ 0x30
 8003338:	443b      	add	r3, r7
 800333a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800333e:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003340:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	b21a      	sxth	r2, r3
 8003346:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800334a:	4313      	orrs	r3, r2
 800334c:	b21b      	sxth	r3, r3
 800334e:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get water-mark level */
                config->watermark_level = lsb_msb & BMI3_STEP_WATERMARK_MASK;
 8003350:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003356:	b29a      	uxth	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	801a      	strh	r2, [r3, #0]

                /* Get reset counter */
                config->reset_counter = (lsb_msb & BMI3_STEP_RESET_COUNTER_MASK) >> BMI3_STEP_RESET_COUNTER_POS;
 800335c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800335e:	129b      	asrs	r3, r3, #10
 8003360:	b29b      	uxth	r3, r3
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate minimum distance up */
                lsb = ((uint16_t)step_config[idx++]);
 800336c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003376:	3330      	adds	r3, #48	@ 0x30
 8003378:	443b      	add	r3, r7
 800337a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800337e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003380:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800338a:	3330      	adds	r3, #48	@ 0x30
 800338c:	443b      	add	r3, r7
 800338e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003392:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003394:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	b21a      	sxth	r2, r3
 800339a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800339e:	4313      	orrs	r3, r2
 80033a0:	b21b      	sxth	r3, r3
 80033a2:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get minimum distance up */
                config->env_min_dist_up = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_UP_MASK);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80033a8:	809a      	strh	r2, [r3, #4]

                /* Get word to calculate env coefficient up */
                lsb = ((uint16_t)step_config[idx++]);
 80033aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80033b4:	3330      	adds	r3, #48	@ 0x30
 80033b6:	443b      	add	r3, r7
 80033b8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80033be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80033c8:	3330      	adds	r3, #48	@ 0x30
 80033ca:	443b      	add	r3, r7
 80033cc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033d0:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80033d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	b21a      	sxth	r2, r3
 80033d8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80033dc:	4313      	orrs	r3, r2
 80033de:	b21b      	sxth	r3, r3
 80033e0:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient up */
                config->env_coef_up = (lsb_msb & BMI3_STEP_ENV_COEF_UP_MASK);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80033e6:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate env minimum distance down */
                lsb = ((uint16_t)step_config[idx++]);
 80033e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80033f2:	3330      	adds	r3, #48	@ 0x30
 80033f4:	443b      	add	r3, r7
 80033f6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033fa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80033fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003406:	3330      	adds	r3, #48	@ 0x30
 8003408:	443b      	add	r3, r7
 800340a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800340e:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003410:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	b21a      	sxth	r2, r3
 8003416:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800341a:	4313      	orrs	r3, r2
 800341c:	b21b      	sxth	r3, r3
 800341e:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env minimum distance down */
                config->env_min_dist_down = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_DOWN_MASK);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003424:	811a      	strh	r2, [r3, #8]

                /* Get word to calculate env coefficient down */
                lsb = ((uint16_t)step_config[idx++]);
 8003426:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003430:	3330      	adds	r3, #48	@ 0x30
 8003432:	443b      	add	r3, r7
 8003434:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003438:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800343a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003444:	3330      	adds	r3, #48	@ 0x30
 8003446:	443b      	add	r3, r7
 8003448:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800344c:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800344e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	b21a      	sxth	r2, r3
 8003454:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003458:	4313      	orrs	r3, r2
 800345a:	b21b      	sxth	r3, r3
 800345c:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient down */
                config->env_coef_down = (lsb_msb & BMI3_STEP_ENV_COEF_DOWN_MASK);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003462:	815a      	strh	r2, [r3, #10]

                /* Get word to calculate mean val decay */
                lsb = ((uint16_t)step_config[idx++]);
 8003464:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800346e:	3330      	adds	r3, #48	@ 0x30
 8003470:	443b      	add	r3, r7
 8003472:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003476:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003478:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003482:	3330      	adds	r3, #48	@ 0x30
 8003484:	443b      	add	r3, r7
 8003486:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800348a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800348c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	b21a      	sxth	r2, r3
 8003492:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003496:	4313      	orrs	r3, r2
 8003498:	b21b      	sxth	r3, r3
 800349a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean val decay */
                config->mean_val_decay = (lsb_msb & BMI3_STEP_MEAN_VAL_DECAY_MASK);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80034a0:	819a      	strh	r2, [r3, #12]

                /* Get word to calculate mean step duration */
                lsb = ((uint16_t)step_config[idx++]);
 80034a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80034ac:	3330      	adds	r3, #48	@ 0x30
 80034ae:	443b      	add	r3, r7
 80034b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80034b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80034b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80034c0:	3330      	adds	r3, #48	@ 0x30
 80034c2:	443b      	add	r3, r7
 80034c4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80034c8:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80034ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	b21a      	sxth	r2, r3
 80034d0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean step duration */
                config->mean_step_dur = (lsb_msb & BMI3_STEP_MEAN_STEP_DUR_MASK);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80034de:	81da      	strh	r2, [r3, #14]

                /* Get word to calculate step buffer size, filter cascade enabled and step counter increment
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80034e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80034ea:	3330      	adds	r3, #48	@ 0x30
 80034ec:	443b      	add	r3, r7
 80034ee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80034f2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80034f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80034fe:	3330      	adds	r3, #48	@ 0x30
 8003500:	443b      	add	r3, r7
 8003502:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003506:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003508:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	b21a      	sxth	r2, r3
 800350e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003512:	4313      	orrs	r3, r2
 8003514:	b21b      	sxth	r3, r3
 8003516:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step buffer size */
                config->step_buffer_size = lsb_msb & BMI3_STEP_BUFFER_SIZE_MASK;
 8003518:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	821a      	strh	r2, [r3, #16]

                /* Get filter cascade enable */
                config->filter_cascade_enabled = (lsb_msb & BMI3_STEP_FILTER_CASCADE_ENABLED_MASK) >>
 8003524:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003526:	111b      	asrs	r3, r3, #4
 8003528:	b29b      	uxth	r3, r3
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	825a      	strh	r2, [r3, #18]
                                                 BMI3_STEP_FILTER_CASCADE_ENABLED_POS;

                /* Get step counter increment */
                config->step_counter_increment = (lsb_msb & BMI3_STEP_COUNTER_INCREMENT_MASK) >>
 8003534:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	b29a      	uxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	829a      	strh	r2, [r3, #20]
                                                 BMI3_STEP_COUNTER_INCREMENT_POS;

                /* Get word to calculate peak duration minimum walking and peak duration minimum running */
                lsb = ((uint16_t)step_config[idx++]);
 800353e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003548:	3330      	adds	r3, #48	@ 0x30
 800354a:	443b      	add	r3, r7
 800354c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003550:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003552:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800355c:	3330      	adds	r3, #48	@ 0x30
 800355e:	443b      	add	r3, r7
 8003560:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003564:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003566:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	b21a      	sxth	r2, r3
 800356c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003570:	4313      	orrs	r3, r2
 8003572:	b21b      	sxth	r3, r3
 8003574:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get peak duration minimum walking */
                config->peak_duration_min_walking = lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_WALKING_MASK;
 8003576:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003578:	b2db      	uxtb	r3, r3
 800357a:	b29a      	uxth	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	82da      	strh	r2, [r3, #22]

                /* Get peak duration minimum running */
                config->peak_duration_min_running = (lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_RUNNING_MASK) >>
 8003580:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	b29a      	uxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	831a      	strh	r2, [r3, #24]
                                                    BMI3_STEP_PEAK_DURATION_MIN_RUNNING_POS;

                /* Get word to calculate activity detection factor and activity detection threshold
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 800358a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003594:	3330      	adds	r3, #48	@ 0x30
 8003596:	443b      	add	r3, r7
 8003598:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800359c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800359e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80035a8:	3330      	adds	r3, #48	@ 0x30
 80035aa:	443b      	add	r3, r7
 80035ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80035b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80035b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	b21a      	sxth	r2, r3
 80035b8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80035bc:	4313      	orrs	r3, r2
 80035be:	b21b      	sxth	r3, r3
 80035c0:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get activity detection factor */
                config->activity_detection_factor = lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_FACTOR_MASK;
 80035c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	835a      	strh	r2, [r3, #26]

                /* Get activity detection threshold */
                config->activity_detection_thres = (lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_MASK) >>
 80035ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	839a      	strh	r2, [r3, #28]
                                                   BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_POS;

                /* Get word to calculate step duration max and step duration window from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80035d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80035e2:	3330      	adds	r3, #48	@ 0x30
 80035e4:	443b      	add	r3, r7
 80035e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80035ea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80035ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80035f6:	3330      	adds	r3, #48	@ 0x30
 80035f8:	443b      	add	r3, r7
 80035fa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80035fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003600:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	b21a      	sxth	r2, r3
 8003606:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800360a:	4313      	orrs	r3, r2
 800360c:	b21b      	sxth	r3, r3
 800360e:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration max */
                config->step_duration_max = lsb_msb & BMI3_STEP_DURATION_MAX_MASK;
 8003610:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003612:	b2db      	uxtb	r3, r3
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	83da      	strh	r2, [r3, #30]

                /* Get step duration window */
                config->step_duration_window = (lsb_msb & BMI3_STEP_DURATION_WINDOW_MASK) >>
 800361a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	841a      	strh	r2, [r3, #32]
                                               BMI3_STEP_DURATION_WINDOW_POS;

                /* Get word to calculate step duration pp enabled, duration threshold,
                 * mean crossing pp enabled, mcr threshold, sc_12_res from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003624:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800362e:	3330      	adds	r3, #48	@ 0x30
 8003630:	443b      	add	r3, r7
 8003632:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003636:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003638:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003642:	3330      	adds	r3, #48	@ 0x30
 8003644:	443b      	add	r3, r7
 8003646:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800364a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800364c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	b21a      	sxth	r2, r3
 8003652:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003656:	4313      	orrs	r3, r2
 8003658:	b21b      	sxth	r3, r3
 800365a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration pp enable */
                config->step_duration_pp_enabled = lsb_msb & BMI3_STEP_DURATION_PP_ENABLED_MASK;
 800365c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	845a      	strh	r2, [r3, #34]	@ 0x22

                /* Get step duration threshold */
                config->step_duration_thres = (lsb_msb & BMI3_STEP_DURATION_THRESHOLD_MASK) >>
 8003668:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800366a:	105b      	asrs	r3, r3, #1
 800366c:	b29b      	uxth	r3, r3
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	849a      	strh	r2, [r3, #36]	@ 0x24
                                              BMI3_STEP_DURATION_THRESHOLD_POS;

                /* Get mean crossing pp enabled */
                config->mean_crossing_pp_enabled = (lsb_msb & BMI3_STEP_MEAN_CROSSING_PP_ENABLED_MASK) >>
 8003678:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800367a:	111b      	asrs	r3, r3, #4
 800367c:	b29b      	uxth	r3, r3
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	84da      	strh	r2, [r3, #38]	@ 0x26
                                                   BMI3_STEP_MEAN_CROSSING_PP_ENABLED_POS;

                /* Get mcr threshold */
                config->mcr_threshold = (lsb_msb & BMI3_STEP_MCR_THRESHOLD_MASK) >> BMI3_STEP_MCR_THRESHOLD_POS;
 8003688:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800368a:	115b      	asrs	r3, r3, #5
 800368c:	b29b      	uxth	r3, r3
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	851a      	strh	r2, [r3, #40]	@ 0x28

                /* Get sc_12_res selection */
                config->sc_12_res = (lsb_msb & BMI3_STEP_SC_12_RES_MASK) >> BMI3_STEP_SC_12_RES_POS;
 8003698:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800369a:	129b      	asrs	r3, r3, #10
 800369c:	b29b      	uxth	r3, r3
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036a8:	e002      	b.n	80036b0 <get_step_config+0x404>
            }
        }
    }
    else
    {
        rslt = BMI3_E_INVALID_SENSOR;
 80036aa:	23fa      	movs	r3, #250	@ 0xfa
 80036ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80036b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3730      	adds	r7, #48	@ 0x30
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <set_step_config>:
/*!
 * @brief This internal API sets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t set_step_config(const struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b0a4      	sub	sp, #144	@ 0x90
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 80036c6:	2310      	movs	r3, #16
 80036c8:	873b      	strh	r3, [r7, #56]	@ 0x38

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
 80036ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	609a      	str	r2, [r3, #8]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	611a      	str	r2, [r3, #16]

    uint8_t data_array[24] = { 0 };
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	60da      	str	r2, [r3, #12]
 80036f0:	611a      	str	r2, [r3, #16]
    uint16_t reset_counter, activity_detection_factor, step_duration_max, step_duration_window,
             step_duration_pp_enabled;

    uint16_t step_duration_threshold, mean_crossing_pp_enabled, mcr_threshold1, mcr_threshold2, sc_12_res;

    if (config != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8259 	beq.w	8003bac <set_step_config+0x4f0>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80036fa:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2202      	movs	r2, #2
 8003702:	2041      	movs	r0, #65	@ 0x41
 8003704:	f7fd fa7f 	bl	8000c06 <bmi3_set_regs>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        if (rslt == BMI3_OK)
 800370e:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 824d 	bne.w	8003bb2 <set_step_config+0x4f6>
        {
            /* Set water-mark for lsb 8 bits */
            watermark1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_STEP_WATERMARK, config->watermark_level);
 8003718:	7a3b      	ldrb	r3, [r7, #8]
 800371a:	b21a      	sxth	r2, r3
 800371c:	4bac      	ldr	r3, [pc, #688]	@ (80039d0 <set_step_config+0x314>)
 800371e:	4013      	ands	r3, r2
 8003720:	b21a      	sxth	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b21b      	sxth	r3, r3
 8003728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372c:	b21b      	sxth	r3, r3
 800372e:	4313      	orrs	r3, r2
 8003730:	b21b      	sxth	r3, r3
 8003732:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

            watermark = ((uint16_t)data_array[1] << 8);
 8003736:	7a7b      	ldrb	r3, [r7, #9]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

            /* Set water-mark for msb 8 bits */
            watermark2 = BMI3_SET_BIT_POS0(watermark, BMI3_STEP_WATERMARK, config->watermark_level);
 800373e:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 8003742:	4ba3      	ldr	r3, [pc, #652]	@ (80039d0 <set_step_config+0x314>)
 8003744:	4013      	ands	r3, r2
 8003746:	b21a      	sxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b21b      	sxth	r3, r3
 800374e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003752:	b21b      	sxth	r3, r3
 8003754:	4313      	orrs	r3, r2
 8003756:	b21b      	sxth	r3, r3
 8003758:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

            reset_counter = ((uint16_t)data_array[1] << 8);
 800375c:	7a7b      	ldrb	r3, [r7, #9]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set reset counter */
            reset_counter = BMI3_SET_BITS(reset_counter, BMI3_STEP_RESET_COUNTER, config->reset_counter);
 8003764:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8003768:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800376c:	b21a      	sxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	885b      	ldrh	r3, [r3, #2]
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	b21b      	sxth	r3, r3
 8003776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377a:	b21b      	sxth	r3, r3
 800377c:	4313      	orrs	r3, r2
 800377e:	b21b      	sxth	r3, r3
 8003780:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set env_min_dist_up for lsb 8 bits */
            env_min_dist_up1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	889b      	ldrh	r3, [r3, #4]
 8003788:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

            env_min_dist_up = ((uint16_t)data_array[3] << 8);
 800378c:	7afb      	ldrb	r3, [r7, #11]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

            /* Set env_min_dist_up for msb 8 bits */
            env_min_dist_up2 = BMI3_SET_BIT_POS0(env_min_dist_up, BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	889b      	ldrh	r3, [r3, #4]
 8003798:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

            /* Set env_coef_up for lsb 8 bits */
            env_coef_up1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	88db      	ldrh	r3, [r3, #6]
 80037a0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

            env_coef_up = ((uint16_t)data_array[5] << 8);
 80037a4:	7b7b      	ldrb	r3, [r7, #13]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

            /* Set env_coef_up for msb 8 bits */
            env_coef_up2 = BMI3_SET_BIT_POS0(env_coef_up, BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	88db      	ldrh	r3, [r3, #6]
 80037b0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

            /* Set env_min_dist_down for lsb 8 bits */
            env_min_dist_down1 =
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	891b      	ldrh	r3, [r3, #8]
 80037b8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
                BMI3_SET_BIT_POS0(data_array[6], BMI3_STEP_ENV_MIN_DIST_DOWN, config->env_min_dist_down);

            env_min_dist_down = ((uint16_t)data_array[7] << 8);
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Set env_min_dist_down for msb 8 bits */
            env_min_dist_down2 = BMI3_SET_BIT_POS0(env_min_dist_down,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	891b      	ldrh	r3, [r3, #8]
 80037c8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
                                                   BMI3_STEP_ENV_MIN_DIST_DOWN,
                                                   config->env_min_dist_down);

            /* Set env_coef_down for lsb 8 bits */
            env_coef_down1 = BMI3_SET_BIT_POS0(data_array[8], BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	895b      	ldrh	r3, [r3, #10]
 80037d0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

            env_coef_down = ((uint16_t)data_array[9] << 8);
 80037d4:	7c7b      	ldrb	r3, [r7, #17]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

            /* Set env_coef_down for msb 8 bits */
            env_coef_down2 = BMI3_SET_BIT_POS0(env_coef_down, BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	895b      	ldrh	r3, [r3, #10]
 80037e0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

            /* Set mean_val_decay for lsb 8 bits */
            mean_val_decay1 = BMI3_SET_BIT_POS0(data_array[10], BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	899b      	ldrh	r3, [r3, #12]
 80037e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

            mean_val_decay = ((uint16_t)data_array[11] << 8);
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

            /* Set mean_val_decay for msb 8 bits */
            mean_val_decay2 = BMI3_SET_BIT_POS0(mean_val_decay, BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	899b      	ldrh	r3, [r3, #12]
 80037f8:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

            /* Set mean_step_dur for lsb 8 bits */
            mean_step_dur1 = BMI3_SET_BIT_POS0(data_array[12], BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	89db      	ldrh	r3, [r3, #14]
 8003800:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

            mean_step_dur = ((uint16_t)data_array[13] << 8);
 8003804:	7d7b      	ldrb	r3, [r7, #21]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

            /* Set mean_step_dur for msb 8 bits */
            mean_step_dur2 = BMI3_SET_BIT_POS0(mean_step_dur, BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	89db      	ldrh	r3, [r3, #14]
 8003810:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

            /* Set step buffer size */
            step_buffer_size = BMI3_SET_BIT_POS0(data_array[14], BMI3_STEP_BUFFER_SIZE, config->step_buffer_size);
 8003814:	7dbb      	ldrb	r3, [r7, #22]
 8003816:	b21b      	sxth	r3, r3
 8003818:	f023 030f 	bic.w	r3, r3, #15
 800381c:	b21a      	sxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8a1b      	ldrh	r3, [r3, #16]
 8003822:	b21b      	sxth	r3, r3
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	b21b      	sxth	r3, r3
 800382a:	4313      	orrs	r3, r2
 800382c:	b21b      	sxth	r3, r3
 800382e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

            /* Set filter cascade */
            filter_cascade_enabled = BMI3_SET_BITS(data_array[14],
 8003832:	7dbb      	ldrb	r3, [r7, #22]
 8003834:	b21b      	sxth	r3, r3
 8003836:	f023 0310 	bic.w	r3, r3, #16
 800383a:	b21a      	sxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8a5b      	ldrh	r3, [r3, #18]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	b21b      	sxth	r3, r3
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	b21b      	sxth	r3, r3
 800384a:	4313      	orrs	r3, r2
 800384c:	b21b      	sxth	r3, r3
 800384e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                                   BMI3_STEP_FILTER_CASCADE_ENABLED,
                                                   config->filter_cascade_enabled);

            /* Set step_counter_increment for lsb 8 bits */
            step_counter_increment1 = BMI3_SET_BITS(data_array[14],
 8003852:	7dbb      	ldrb	r3, [r7, #22]
 8003854:	b21b      	sxth	r3, r3
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	b21a      	sxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8a9b      	ldrh	r3, [r3, #20]
 8003860:	015b      	lsls	r3, r3, #5
 8003862:	b21b      	sxth	r3, r3
 8003864:	4313      	orrs	r3, r2
 8003866:	b21b      	sxth	r3, r3
 8003868:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            step_counter_increment2 = ((uint16_t)data_array[15] << 8);
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Set step_counter_increment for msb 8 bits */
            step_counter_increment2 = BMI3_SET_BITS(step_counter_increment2,
 8003874:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	b21a      	sxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8a9b      	ldrh	r3, [r3, #20]
 8003882:	015b      	lsls	r3, r3, #5
 8003884:	b21b      	sxth	r3, r3
 8003886:	4313      	orrs	r3, r2
 8003888:	b21b      	sxth	r3, r3
 800388a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            /* Set peak_duration_min_walking for lsb 8 bits */
            peak_duration_min_walking = BMI3_SET_BIT_POS0(data_array[16],
 800388e:	7e3b      	ldrb	r3, [r7, #24]
 8003890:	b21b      	sxth	r3, r3
 8003892:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003896:	b21a      	sxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8adb      	ldrh	r3, [r3, #22]
 800389c:	b21b      	sxth	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	b21b      	sxth	r3, r3
 80038a2:	4313      	orrs	r3, r2
 80038a4:	b21b      	sxth	r3, r3
 80038a6:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                                                          BMI3_STEP_PEAK_DURATION_MIN_WALKING,
                                                          config->peak_duration_min_walking);

            peak_duration_min_running = ((uint16_t)data_array[17] << 8);
 80038aa:	7e7b      	ldrb	r3, [r7, #25]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

            /* Set peak_duration_min_walking for msb 8 bits */
            peak_duration_min_running = BMI3_SET_BITS(peak_duration_min_running,
 80038b2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	b21a      	sxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8b1b      	ldrh	r3, [r3, #24]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b21b      	sxth	r3, r3
 80038c6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                                      BMI3_STEP_PEAK_DURATION_MIN_RUNNING,
                                                      config->peak_duration_min_running);

            /* Set activity detection fsctor */
            activity_detection_factor = BMI3_SET_BIT_POS0(data_array[18],
 80038ca:	7ebb      	ldrb	r3, [r7, #26]
 80038cc:	b21b      	sxth	r3, r3
 80038ce:	f023 030f 	bic.w	r3, r3, #15
 80038d2:	b21a      	sxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8b5b      	ldrh	r3, [r3, #26]
 80038d8:	b21b      	sxth	r3, r3
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	b21b      	sxth	r3, r3
 80038e0:	4313      	orrs	r3, r2
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                                                          BMI3_STEP_ACTIVITY_DETECTION_FACTOR,
                                                          config->activity_detection_factor);

            /* Set activity_detection_threshold for lsb 8 bits */
            activity_detection_threshold1 = BMI3_SET_BITS(data_array[18],
 80038e8:	7ebb      	ldrb	r3, [r7, #26]
 80038ea:	b21b      	sxth	r3, r3
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	b21a      	sxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8b9b      	ldrh	r3, [r3, #28]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	b21b      	sxth	r3, r3
 80038fe:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            activity_detection_threshold = ((uint16_t)data_array[19] << 8);
 8003902:	7efb      	ldrb	r3, [r7, #27]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

            /* Set activity_detection_threshold for msb 8 bits */
            activity_detection_threshold2 = BMI3_SET_BITS(activity_detection_threshold,
 800390a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	b21a      	sxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8b9b      	ldrh	r3, [r3, #28]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	b21b      	sxth	r3, r3
 800391c:	4313      	orrs	r3, r2
 800391e:	b21b      	sxth	r3, r3
 8003920:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            /* Set maximum step duration */
            step_duration_max = BMI3_SET_BIT_POS0(data_array[20], BMI3_STEP_DURATION_MAX, config->step_duration_max);
 8003924:	7f3b      	ldrb	r3, [r7, #28]
 8003926:	b21b      	sxth	r3, r3
 8003928:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800392c:	b21a      	sxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8bdb      	ldrh	r3, [r3, #30]
 8003932:	b21b      	sxth	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	b21b      	sxth	r3, r3
 8003938:	4313      	orrs	r3, r2
 800393a:	b21b      	sxth	r3, r3
 800393c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

            step_duration_window = ((uint16_t)data_array[21] << 8);
 8003940:	7f7b      	ldrb	r3, [r7, #29]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            /* Set step duration window */
            step_duration_window = BMI3_SET_BITS(step_duration_window,
 8003948:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800394c:	b2db      	uxtb	r3, r3
 800394e:	b21a      	sxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8c1b      	ldrh	r3, [r3, #32]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	b21b      	sxth	r3, r3
 8003958:	4313      	orrs	r3, r2
 800395a:	b21b      	sxth	r3, r3
 800395c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                                                 BMI3_STEP_DURATION_WINDOW,
                                                 config->step_duration_window);

            step_duration_pp_enabled = BMI3_SET_BIT_POS0(data_array[22],
 8003960:	7fbb      	ldrb	r3, [r7, #30]
 8003962:	b21b      	sxth	r3, r3
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	b21a      	sxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800396e:	b21b      	sxth	r3, r3
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	b21b      	sxth	r3, r3
 8003976:	4313      	orrs	r3, r2
 8003978:	b21b      	sxth	r3, r3
 800397a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                                                         BMI3_STEP_DURATION_PP_ENABLED,
                                                         config->step_duration_pp_enabled);

            step_duration_threshold = BMI3_SET_BITS(data_array[22],
 800397e:	7fbb      	ldrb	r3, [r7, #30]
 8003980:	b21b      	sxth	r3, r3
 8003982:	f023 030e 	bic.w	r3, r3, #14
 8003986:	b21a      	sxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	b21b      	sxth	r3, r3
 8003990:	f003 030e 	and.w	r3, r3, #14
 8003994:	b21b      	sxth	r3, r3
 8003996:	4313      	orrs	r3, r2
 8003998:	b21b      	sxth	r3, r3
 800399a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                    BMI3_STEP_DURATION_THRESHOLD,
                                                    config->step_duration_thres);

            mean_crossing_pp_enabled = BMI3_SET_BITS(data_array[22],
 800399e:	7fbb      	ldrb	r3, [r7, #30]
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	f023 0310 	bic.w	r3, r3, #16
 80039a6:	b21a      	sxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	b21b      	sxth	r3, r3
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	b21b      	sxth	r3, r3
 80039b6:	4313      	orrs	r3, r2
 80039b8:	b21b      	sxth	r3, r3
 80039ba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                                                     BMI3_STEP_MEAN_CROSSING_PP_ENABLED,
                                                     config->mean_crossing_pp_enabled);

            /* Set mcr_threshold for lsb 8 bits */
            mcr_threshold1 = BMI3_SET_BITS(data_array[22], BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 80039be:	7fbb      	ldrb	r3, [r7, #30]
 80039c0:	b21b      	sxth	r3, r3
 80039c2:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 80039c6:	b21a      	sxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039cc:	015b      	lsls	r3, r3, #5
 80039ce:	e001      	b.n	80039d4 <set_step_config+0x318>
 80039d0:	fffffc00 	.word	0xfffffc00
 80039d4:	b21b      	sxth	r3, r3
 80039d6:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 80039da:	b21b      	sxth	r3, r3
 80039dc:	4313      	orrs	r3, r2
 80039de:	b21b      	sxth	r3, r3
 80039e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

            mcr_threshold = ((uint16_t)data_array[23] << 8);
 80039e4:	7ffb      	ldrb	r3, [r7, #31]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            /* Set mcr_threshold for msb 8 bits */
            mcr_threshold2 = BMI3_SET_BITS(mcr_threshold, BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 80039ec:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80039f0:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 80039f4:	b21a      	sxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	b21b      	sxth	r3, r3
 80039fe:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 8003a02:	b21b      	sxth	r3, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	b21b      	sxth	r3, r3
 8003a08:	87fb      	strh	r3, [r7, #62]	@ 0x3e

            sc_12_res = ((uint16_t)data_array[23] << 8);
 8003a0a:	7ffb      	ldrb	r3, [r7, #31]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            sc_12_res = BMI3_SET_BITS(sc_12_res, BMI3_STEP_SC_12_RES, config->sc_12_res);
 8003a10:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8003a14:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a18:	b21a      	sxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	b21b      	sxth	r3, r3
 8003a22:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a26:	b21b      	sxth	r3, r3
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	b21b      	sxth	r3, r3
 8003a2c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            step_config[0] = (uint8_t)watermark1;
 8003a2e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f887 3020 	strb.w	r3, [r7, #32]
            step_config[1] = (uint8_t)((watermark2 | reset_counter) >> 8);
 8003a38:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8003a3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            step_config[2] = (uint8_t)env_min_dist_up1;
 8003a4e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            step_config[3] = (uint8_t)(env_min_dist_up2 >> 8);
 8003a58:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            step_config[4] = (uint8_t)env_coef_up1;
 8003a66:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            step_config[5] = (uint8_t)(env_coef_up2 >> 8);
 8003a70:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            step_config[6] = (uint8_t)env_min_dist_down1;
 8003a7e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            step_config[7] = (uint8_t)(env_min_dist_down2 >> 8);
 8003a88:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            step_config[8] = (uint8_t)env_coef_down1;
 8003a96:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            step_config[9] = (uint8_t)(env_coef_down2 >> 8);
 8003aa0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            step_config[10] = (uint8_t)mean_val_decay1;
 8003aae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            step_config[11] = (uint8_t)(mean_val_decay2 >> 8);
 8003ab8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8003abc:	0a1b      	lsrs	r3, r3, #8
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            step_config[12] = (uint8_t)mean_step_dur1;
 8003ac6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            step_config[13] = (uint8_t)(mean_step_dur2 >> 8);
 8003ad0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            step_config[14] = (uint8_t)(step_buffer_size | filter_cascade_enabled | step_counter_increment1);
 8003ade:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	4313      	orrs	r3, r2
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	4313      	orrs	r3, r2
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            step_config[15] = (uint8_t)(step_counter_increment2 >> 8);
 8003afc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003b00:	0a1b      	lsrs	r3, r3, #8
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            step_config[16] = (uint8_t)peak_duration_min_walking;
 8003b0a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            step_config[17] = (uint8_t)(peak_duration_min_running >> 8);
 8003b14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
            step_config[18] = (uint8_t)(activity_detection_factor | activity_detection_threshold1);
 8003b22:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            step_config[19] = (uint8_t)(activity_detection_threshold2 >> 8);
 8003b36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            step_config[20] = (uint8_t)step_duration_max;
 8003b44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            step_config[21] = (uint8_t)(step_duration_window >> 8);
 8003b4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            step_config[22] =
                (uint8_t)(step_duration_pp_enabled | step_duration_threshold | mean_crossing_pp_enabled |
 8003b5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	4313      	orrs	r3, r2
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b2db      	uxtb	r3, r3
            step_config[22] =
 8003b80:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                          mcr_threshold1);
            step_config[23] = (uint8_t)((mcr_threshold2 | sc_12_res) >> 8);
 8003b84:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003b86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            /* Set the configuration back to feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 8003b96:	f107 0120 	add.w	r1, r7, #32
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2218      	movs	r2, #24
 8003b9e:	2042      	movs	r0, #66	@ 0x42
 8003ba0:	f7fd f831 	bl	8000c06 <bmi3_set_regs>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003baa:	e002      	b.n	8003bb2 <set_step_config+0x4f6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003bac:	23ff      	movs	r3, #255	@ 0xff
 8003bae:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return rslt;
 8003bb2:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3790      	adds	r7, #144	@ 0x90
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop

08003bc0 <get_tap_config>:
 * @brief This internal API gets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t get_tap_config(struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003bd2:	231e      	movs	r3, #30
 8003bd4:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80a4 	beq.w	8003d2a <get_tap_config+0x16a>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003be2:	f107 010c 	add.w	r1, r7, #12
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2202      	movs	r2, #2
 8003bea:	2041      	movs	r0, #65	@ 0x41
 8003bec:	f7fd f80b 	bl	8000c06 <bmi3_set_regs>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003bf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 8098 	bne.w	8003d2e <get_tap_config+0x16e>
        {
            /* Get the configuration from the feature engine register where tap feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8003bfe:	f107 0110 	add.w	r1, r7, #16
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2206      	movs	r2, #6
 8003c06:	2042      	movs	r0, #66	@ 0x42
 8003c08:	f7fc ff98 	bl	8000b3c <bmi3_get_regs>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8003c10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f040 808a 	bne.w	8003d2e <get_tap_config+0x16e>
            {
                /* Get word to calculate axis select, wait for time out, max peaks for tap and mode
                 * from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003c1a:	7fbb      	ldrb	r3, [r7, #30]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	77ba      	strb	r2, [r7, #30]
 8003c20:	3320      	adds	r3, #32
 8003c22:	443b      	add	r3, r7
 8003c24:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003c28:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003c2a:	7fbb      	ldrb	r3, [r7, #30]
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	77ba      	strb	r2, [r7, #30]
 8003c30:	3320      	adds	r3, #32
 8003c32:	443b      	add	r3, r7
 8003c34:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003c3c:	8bba      	ldrh	r2, [r7, #28]
 8003c3e:	8b7b      	ldrh	r3, [r7, #26]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	833b      	strh	r3, [r7, #24]

                /* Get axis selection */
                config->axis_sel = lsb_msb & BMI3_TAP_AXIS_SEL_MASK;
 8003c44:	8b3b      	ldrh	r3, [r7, #24]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	701a      	strb	r2, [r3, #0]

                /* Get wait for time out */
                config->wait_for_timeout = (lsb_msb & BMI3_TAP_WAIT_FR_TIME_OUT_MASK) >> BMI3_TAP_WAIT_FR_TIME_OUT_POS;
 8003c52:	8b3b      	ldrh	r3, [r7, #24]
 8003c54:	109b      	asrs	r3, r3, #2
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	705a      	strb	r2, [r3, #1]

                /* Get max peaks for tap */
                config->max_peaks_for_tap = (lsb_msb & BMI3_TAP_MAX_PEAKS_MASK) >> BMI3_TAP_MAX_PEAKS_POS;
 8003c62:	8b3b      	ldrh	r3, [r7, #24]
 8003c64:	10db      	asrs	r3, r3, #3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	709a      	strb	r2, [r3, #2]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_TAP_MODE_MASK) >> BMI3_TAP_MODE_POS;
 8003c72:	8b3b      	ldrh	r3, [r7, #24]
 8003c74:	119b      	asrs	r3, r3, #6
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	70da      	strb	r2, [r3, #3]

                /* Get word to calculate threshold, output configuration from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003c82:	7fbb      	ldrb	r3, [r7, #30]
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	77ba      	strb	r2, [r7, #30]
 8003c88:	3320      	adds	r3, #32
 8003c8a:	443b      	add	r3, r7
 8003c8c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003c90:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003c92:	7fbb      	ldrb	r3, [r7, #30]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	77ba      	strb	r2, [r7, #30]
 8003c98:	3320      	adds	r3, #32
 8003c9a:	443b      	add	r3, r7
 8003c9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003ca4:	8bba      	ldrh	r2, [r7, #28]
 8003ca6:	8b7b      	ldrh	r3, [r7, #26]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	833b      	strh	r3, [r7, #24]

                /* Get tap peak threshold */
                config->tap_peak_thres = lsb_msb & BMI3_TAP_PEAK_THRES_MASK;
 8003cac:	8b3b      	ldrh	r3, [r7, #24]
 8003cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	809a      	strh	r2, [r3, #4]

                /* Get max gesture duration */
                config->max_gest_dur = (lsb_msb & BMI3_TAP_MAX_GEST_DUR_MASK) >> BMI3_TAP_MAX_GEST_DUR_POS;
 8003cb8:	8b3b      	ldrh	r3, [r7, #24]
 8003cba:	0a9b      	lsrs	r3, r3, #10
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	719a      	strb	r2, [r3, #6]

                /* Get word to calculate max_dur_between_peaks, tap_shock_settling_dur, min_quite_dur_between_taps
                 *  and quite_time_after_gest from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003cc4:	7fbb      	ldrb	r3, [r7, #30]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	77ba      	strb	r2, [r7, #30]
 8003cca:	3320      	adds	r3, #32
 8003ccc:	443b      	add	r3, r7
 8003cce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003cd2:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003cd4:	7fbb      	ldrb	r3, [r7, #30]
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	77ba      	strb	r2, [r7, #30]
 8003cda:	3320      	adds	r3, #32
 8003cdc:	443b      	add	r3, r7
 8003cde:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003ce6:	8bba      	ldrh	r2, [r7, #28]
 8003ce8:	8b7b      	ldrh	r3, [r7, #26]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	833b      	strh	r3, [r7, #24]

                /* Get maximum duration between peaks */
                config->max_dur_between_peaks = lsb_msb & BMI3_TAP_MAX_DUR_BW_PEAKS_MASK;
 8003cee:	8b3b      	ldrh	r3, [r7, #24]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	71da      	strb	r2, [r3, #7]

                /* Get tap shock settling duration */
                config->tap_shock_settling_dur = (lsb_msb & BMI3_TAP_SHOCK_SETT_DUR_MASK) >>
 8003cfc:	8b3b      	ldrh	r3, [r7, #24]
 8003cfe:	111b      	asrs	r3, r3, #4
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	721a      	strb	r2, [r3, #8]
                                                 BMI3_TAP_SHOCK_SETT_DUR_POS;

                /* Get minimum quite duration between taps */
                config->min_quite_dur_between_taps = (lsb_msb & BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_MASK) >>
 8003d0c:	8b3b      	ldrh	r3, [r7, #24]
 8003d0e:	121b      	asrs	r3, r3, #8
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	725a      	strb	r2, [r3, #9]
                                                     BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_POS;

                /* Get quite time after gesture */
                config->quite_time_after_gest = (lsb_msb & BMI3_TAP_QUITE_TIME_AFTR_GEST_MASK) >>
 8003d1c:	8b3b      	ldrh	r3, [r7, #24]
 8003d1e:	0b1b      	lsrs	r3, r3, #12
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	729a      	strb	r2, [r3, #10]
 8003d28:	e001      	b.n	8003d2e <get_tap_config+0x16e>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003d2a:	23ff      	movs	r3, #255	@ 0xff
 8003d2c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003d2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <set_tap_config>:
 * @brief This internal API sets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t set_tap_config(const struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	@ 0x30
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003d4e:	231e      	movs	r3, #30
 8003d50:	81bb      	strh	r3, [r7, #12]

    uint16_t axis_sel, wait_fr_time_out, max_peaks_for_tap, mode;
    uint16_t tap_peak_thres, tap_peak_thres1, tap_peak_thres2, max_gest_dur;
    uint16_t max_dur_between_peaks, tap_shock_setting_dur, min_quite_dur_between_taps, quite_time_after_gest;

    if (config != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80e8 	beq.w	8003f2a <set_tap_config+0x1ee>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8003d5a:	f107 010c 	add.w	r1, r7, #12
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2202      	movs	r2, #2
 8003d62:	2041      	movs	r0, #65	@ 0x41
 8003d64:	f7fc ff4f 	bl	8000c06 <bmi3_set_regs>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8003d6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 80dc 	bne.w	8003f30 <set_tap_config+0x1f4>
        {
            /* Set axis_sel */
            axis_sel = BMI3_SET_BIT_POS0(tap_config[0], BMI3_TAP_AXIS_SEL, config->axis_sel);
 8003d78:	7c3b      	ldrb	r3, [r7, #16]
 8003d7a:	b21b      	sxth	r3, r3
 8003d7c:	f023 0303 	bic.w	r3, r3, #3
 8003d80:	b21a      	sxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	b21b      	sxth	r3, r3
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	b21b      	sxth	r3, r3
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	b21b      	sxth	r3, r3
 8003d92:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set wait for time out */
            wait_fr_time_out = BMI3_SET_BITS(tap_config[0], BMI3_TAP_WAIT_FR_TIME_OUT, config->wait_for_timeout);
 8003d94:	7c3b      	ldrb	r3, [r7, #16]
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	b21a      	sxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	b21b      	sxth	r3, r3
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	b21b      	sxth	r3, r3
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set maximum peaks for tap */
            max_peaks_for_tap = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MAX_PEAKS, config->max_peaks_for_tap);
 8003db2:	7c3b      	ldrb	r3, [r7, #16]
 8003db4:	b21b      	sxth	r3, r3
 8003db6:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003dba:	b21a      	sxth	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	789b      	ldrb	r3, [r3, #2]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	b21b      	sxth	r3, r3
 8003dc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	b21b      	sxth	r3, r3
 8003dce:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mode */
            mode = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MODE, config->mode);
 8003dd0:	7c3b      	ldrb	r3, [r7, #16]
 8003dd2:	b21b      	sxth	r3, r3
 8003dd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003dd8:	b21a      	sxth	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	78db      	ldrb	r3, [r3, #3]
 8003dde:	019b      	lsls	r3, r3, #6
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	b21b      	sxth	r3, r3
 8003de6:	4313      	orrs	r3, r2
 8003de8:	b21b      	sxth	r3, r3
 8003dea:	84fb      	strh	r3, [r7, #38]	@ 0x26

            /* Set peak threshold first byte in word */
            tap_peak_thres = BMI3_SET_BIT_POS0(tap_config[2], BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003dec:	7cbb      	ldrb	r3, [r7, #18]
 8003dee:	b21a      	sxth	r2, r3
 8003df0:	4b52      	ldr	r3, [pc, #328]	@ (8003f3c <set_tap_config+0x200>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	889b      	ldrh	r3, [r3, #4]
 8003dfa:	b21b      	sxth	r3, r3
 8003dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e00:	b21b      	sxth	r3, r3
 8003e02:	4313      	orrs	r3, r2
 8003e04:	b21b      	sxth	r3, r3
 8003e06:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Left shift by 8 times so that we can set rest of the values of tap peak threshold conf in word */
            tap_peak_thres1 = ((uint16_t)tap_config[3] << 8);
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set peak threshold second byte in word */
            tap_peak_thres2 = BMI3_SET_BIT_POS0(tap_peak_thres1, BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003e0e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8003e12:	4b4a      	ldr	r3, [pc, #296]	@ (8003f3c <set_tap_config+0x200>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	b21a      	sxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	889b      	ldrh	r3, [r3, #4]
 8003e1c:	b21b      	sxth	r3, r3
 8003e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e22:	b21b      	sxth	r3, r3
 8003e24:	4313      	orrs	r3, r2
 8003e26:	b21b      	sxth	r3, r3
 8003e28:	843b      	strh	r3, [r7, #32]

            max_gest_dur = ((uint16_t)tap_config[3] << 8);
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	83fb      	strh	r3, [r7, #30]

            /* Set max gesture duration */
            max_gest_dur = BMI3_SET_BITS(max_gest_dur, BMI3_TAP_MAX_GEST_DUR, config->max_gest_dur);
 8003e30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e38:	b21a      	sxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	799b      	ldrb	r3, [r3, #6]
 8003e3e:	029b      	lsls	r3, r3, #10
 8003e40:	b21b      	sxth	r3, r3
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	83fb      	strh	r3, [r7, #30]

            /* Set max duration between peaks */
            max_dur_between_peaks = BMI3_SET_BIT_POS0(tap_config[4],
 8003e48:	7d3b      	ldrb	r3, [r7, #20]
 8003e4a:	b21b      	sxth	r3, r3
 8003e4c:	f023 030f 	bic.w	r3, r3, #15
 8003e50:	b21a      	sxth	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	79db      	ldrb	r3, [r3, #7]
 8003e56:	b21b      	sxth	r3, r3
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	b21b      	sxth	r3, r3
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	83bb      	strh	r3, [r7, #28]
                                                      BMI3_TAP_MAX_DUR_BW_PEAKS,
                                                      config->max_dur_between_peaks);

            /* Set shock settling duration */
            tap_shock_setting_dur =
                BMI3_SET_BITS(tap_config[4], BMI3_TAP_SHOCK_SETT_DUR, config->tap_shock_settling_dur);
 8003e64:	7d3b      	ldrb	r3, [r7, #20]
 8003e66:	b21b      	sxth	r3, r3
 8003e68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e6c:	b21a      	sxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7a1b      	ldrb	r3, [r3, #8]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	b21b      	sxth	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b21b      	sxth	r3, r3
            tap_shock_setting_dur =
 8003e7e:	837b      	strh	r3, [r7, #26]

            min_quite_dur_between_taps = ((uint16_t)tap_config[5] << 8);
 8003e80:	7d7b      	ldrb	r3, [r7, #21]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	833b      	strh	r3, [r7, #24]

            /* Set quite duration between taps */
            min_quite_dur_between_taps = BMI3_SET_BITS(min_quite_dur_between_taps,
 8003e86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e8e:	b21a      	sxth	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	7a5b      	ldrb	r3, [r3, #9]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	b21b      	sxth	r3, r3
 8003e98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e9c:	b21b      	sxth	r3, r3
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	b21b      	sxth	r3, r3
 8003ea2:	833b      	strh	r3, [r7, #24]
                                                       BMI3_TAP_MIN_QUITE_DUR_BW_TAPS,
                                                       config->min_quite_dur_between_taps);

            quite_time_after_gest = ((uint16_t)tap_config[5] << 8);
 8003ea4:	7d7b      	ldrb	r3, [r7, #21]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	82fb      	strh	r3, [r7, #22]

            /* Set quite time after gesture */
            quite_time_after_gest = BMI3_SET_BITS(quite_time_after_gest,
 8003eaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb2:	b21a      	sxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7a9b      	ldrb	r3, [r3, #10]
 8003eb8:	031b      	lsls	r3, r3, #12
 8003eba:	b21b      	sxth	r3, r3
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	b21b      	sxth	r3, r3
 8003ec0:	82fb      	strh	r3, [r7, #22]
                                                  BMI3_TAP_QUITE_TIME_AFTR_GEST,
                                                  config->quite_time_after_gest);

            /* Copy all the configurations back to the tap configuration array */
            tap_config[0] = (uint8_t)(axis_sel | wait_fr_time_out | max_peaks_for_tap | mode);
 8003ec2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	743b      	strb	r3, [r7, #16]
            tap_config[2] = (uint8_t)(tap_peak_thres);
 8003ee0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	74bb      	strb	r3, [r7, #18]
            tap_config[3] = (uint8_t)((tap_peak_thres2 | max_gest_dur) >> 8);
 8003ee6:	8c3a      	ldrh	r2, [r7, #32]
 8003ee8:	8bfb      	ldrh	r3, [r7, #30]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	74fb      	strb	r3, [r7, #19]
            tap_config[4] = (uint8_t)(max_dur_between_peaks | tap_shock_setting_dur);
 8003ef6:	8bbb      	ldrh	r3, [r7, #28]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	8b7b      	ldrh	r3, [r7, #26]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4313      	orrs	r3, r2
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	753b      	strb	r3, [r7, #20]
            tap_config[5] = (uint8_t)((min_quite_dur_between_taps | quite_time_after_gest) >> 8);
 8003f04:	8b3a      	ldrh	r2, [r7, #24]
 8003f06:	8afb      	ldrh	r3, [r7, #22]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	757b      	strb	r3, [r7, #21]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8003f14:	f107 0110 	add.w	r1, r7, #16
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2206      	movs	r2, #6
 8003f1c:	2042      	movs	r0, #66	@ 0x42
 8003f1e:	f7fc fe72 	bl	8000c06 <bmi3_set_regs>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003f28:	e002      	b.n	8003f30 <set_tap_config+0x1f4>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003f2a:	23ff      	movs	r3, #255	@ 0xff
 8003f2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8003f30:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3730      	adds	r7, #48	@ 0x30
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	fffffc00 	.word	0xfffffc00

08003f40 <get_i3c_sync_accel_sensor_data>:

/*!
 * @brief This internal API gets the i3c sync accelerometer data from the register.
 */
static int8_t get_i3c_sync_accel_sensor_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_ACC] = { 0 };
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	f107 0310 	add.w	r3, r7, #16
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]

    /* Array to set the base address of i3c sync accel data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_ACC, 0 };
 8003f5a:	2337      	movs	r3, #55	@ 0x37
 8003f5c:	813b      	strh	r3, [r7, #8]

    if (data != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d03e      	beq.n	8003fe2 <get_i3c_sync_accel_sensor_data+0xa2>
    {
        /* Set the i3c sync accelerometer base address to feature engine transmission address to start DMA transaction
         * */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003f64:	f107 0108 	add.w	r1, r7, #8
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	2041      	movs	r0, #65	@ 0x41
 8003f6e:	f7fc fe4a 	bl	8000c06 <bmi3_set_regs>
 8003f72:	4603      	mov	r3, r0
 8003f74:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003f76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d133      	bne.n	8003fe6 <get_i3c_sync_accel_sensor_data+0xa6>
        {
            /* Get the configuration from the feature engine register where i3c sync accel data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_ACC, dev);
 8003f7e:	f107 010c 	add.w	r1, r7, #12
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2210      	movs	r2, #16
 8003f86:	2042      	movs	r0, #66	@ 0x42
 8003f88:	f7fc fdd8 	bl	8000b3c <bmi3_get_regs>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	77fb      	strb	r3, [r7, #31]

            data->sync_x = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8003f90:	7b3b      	ldrb	r3, [r7, #12]
 8003f92:	b21a      	sxth	r2, r3
 8003f94:	7b7b      	ldrb	r3, [r7, #13]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	b21b      	sxth	r3, r3
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	b21b      	sxth	r3, r3
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	801a      	strh	r2, [r3, #0]
            data->sync_y = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8003fa4:	7bbb      	ldrb	r3, [r7, #14]
 8003fa6:	b21a      	sxth	r2, r3
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	b21b      	sxth	r3, r3
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	b21b      	sxth	r3, r3
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	805a      	strh	r2, [r3, #2]
            data->sync_z = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8003fb8:	7c3b      	ldrb	r3, [r7, #16]
 8003fba:	b21a      	sxth	r2, r3
 8003fbc:	7c7b      	ldrb	r3, [r7, #17]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	b21b      	sxth	r3, r3
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	809a      	strh	r2, [r3, #4]
            data->sync_time = (reg_data[14] | (uint16_t)reg_data[15] << 8);
 8003fcc:	7ebb      	ldrb	r3, [r7, #26]
 8003fce:	b21a      	sxth	r2, r3
 8003fd0:	7efb      	ldrb	r3, [r7, #27]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	b21b      	sxth	r3, r3
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	b21b      	sxth	r3, r3
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	811a      	strh	r2, [r3, #8]
 8003fe0:	e001      	b.n	8003fe6 <get_i3c_sync_accel_sensor_data+0xa6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003fe2:	23ff      	movs	r3, #255	@ 0xff
 8003fe4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003fe6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <get_i3c_sync_gyro_sensor_data>:

/*!
 * @brief This internal API gets the i3c sync gyroscope data from the register.
 */
static int8_t get_i3c_sync_gyro_sensor_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b086      	sub	sp, #24
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_GYR] = { 0 };
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	f107 0310 	add.w	r3, r7, #16
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	809a      	strh	r2, [r3, #4]

    /* Array to set the base address of i3c sync gyro data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_GYR, 0 };
 800400a:	233a      	movs	r3, #58	@ 0x3a
 800400c:	813b      	strh	r3, [r7, #8]

    if (data != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d042      	beq.n	800409a <get_i3c_sync_gyro_sensor_data+0xa8>
    {
        /* Set the i3c sync gyroscope base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004014:	f107 0108 	add.w	r1, r7, #8
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2202      	movs	r2, #2
 800401c:	2041      	movs	r0, #65	@ 0x41
 800401e:	f7fc fdf2 	bl	8000c06 <bmi3_set_regs>
 8004022:	4603      	mov	r3, r0
 8004024:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8004026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d137      	bne.n	800409e <get_i3c_sync_gyro_sensor_data+0xac>
        {
            /* Get the configuration from the feature engine register where i3c sync gyro data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_GYR, dev);
 800402e:	f107 010c 	add.w	r1, r7, #12
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	220a      	movs	r2, #10
 8004036:	2042      	movs	r0, #66	@ 0x42
 8004038:	f7fc fd80 	bl	8000b3c <bmi3_get_regs>
 800403c:	4603      	mov	r3, r0
 800403e:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8004040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d12a      	bne.n	800409e <get_i3c_sync_gyro_sensor_data+0xac>
            {
                data->sync_x = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8004048:	7b3b      	ldrb	r3, [r7, #12]
 800404a:	b21a      	sxth	r2, r3
 800404c:	7b7b      	ldrb	r3, [r7, #13]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	b21b      	sxth	r3, r3
 8004052:	4313      	orrs	r3, r2
 8004054:	b21b      	sxth	r3, r3
 8004056:	b29a      	uxth	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	801a      	strh	r2, [r3, #0]
                data->sync_y = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 800405c:	7bbb      	ldrb	r3, [r7, #14]
 800405e:	b21a      	sxth	r2, r3
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	b21b      	sxth	r3, r3
 8004066:	4313      	orrs	r3, r2
 8004068:	b21b      	sxth	r3, r3
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	805a      	strh	r2, [r3, #2]
                data->sync_z = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8004070:	7c3b      	ldrb	r3, [r7, #16]
 8004072:	b21a      	sxth	r2, r3
 8004074:	7c7b      	ldrb	r3, [r7, #17]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	b21b      	sxth	r3, r3
 800407a:	4313      	orrs	r3, r2
 800407c:	b21b      	sxth	r3, r3
 800407e:	b29a      	uxth	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	809a      	strh	r2, [r3, #4]
                data->sync_time = (reg_data[8] | (uint16_t)reg_data[9] << 8);
 8004084:	7d3b      	ldrb	r3, [r7, #20]
 8004086:	b21a      	sxth	r2, r3
 8004088:	7d7b      	ldrb	r3, [r7, #21]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	b21b      	sxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b21b      	sxth	r3, r3
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	811a      	strh	r2, [r3, #8]
 8004098:	e001      	b.n	800409e <get_i3c_sync_gyro_sensor_data+0xac>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800409a:	23ff      	movs	r3, #255	@ 0xff
 800409c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800409e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <get_i3c_sync_temp_data>:

/*!
 * @brief This internal API gets the i3c sync temperature data from the register.
 */
static int8_t get_i3c_sync_temp_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b086      	sub	sp, #24
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_TEMP] = { 0 };
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of i3c sync temperature data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_TEMP, 0 };
 80040b8:	233d      	movs	r3, #61	@ 0x3d
 80040ba:	81bb      	strh	r3, [r7, #12]

    if (data != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02e      	beq.n	8004120 <get_i3c_sync_temp_data+0x76>
    {
        /* Set the i3c sync temperature base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80040c2:	f107 010c 	add.w	r1, r7, #12
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2202      	movs	r2, #2
 80040ca:	2041      	movs	r0, #65	@ 0x41
 80040cc:	f7fc fd9b 	bl	8000c06 <bmi3_set_regs>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80040d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d123      	bne.n	8004124 <get_i3c_sync_temp_data+0x7a>
        {
            /* Get the configuration from the feature engine register where i3c sync temperature data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_TEMP, dev);
 80040dc:	f107 0110 	add.w	r1, r7, #16
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2204      	movs	r2, #4
 80040e4:	2042      	movs	r0, #66	@ 0x42
 80040e6:	f7fc fd29 	bl	8000b3c <bmi3_get_regs>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 80040ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <get_i3c_sync_temp_data+0x7a>
            {
                data->sync_temp = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 80040f6:	7c3b      	ldrb	r3, [r7, #16]
 80040f8:	b21a      	sxth	r2, r3
 80040fa:	7c7b      	ldrb	r3, [r7, #17]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	b21b      	sxth	r3, r3
 8004100:	4313      	orrs	r3, r2
 8004102:	b21b      	sxth	r3, r3
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	80da      	strh	r2, [r3, #6]
                data->sync_time = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 800410a:	7cbb      	ldrb	r3, [r7, #18]
 800410c:	b21a      	sxth	r2, r3
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	b21b      	sxth	r3, r3
 8004114:	4313      	orrs	r3, r2
 8004116:	b21b      	sxth	r3, r3
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	811a      	strh	r2, [r3, #8]
 800411e:	e001      	b.n	8004124 <get_i3c_sync_temp_data+0x7a>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004120:	23ff      	movs	r3, #255	@ 0xff
 8004122:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004124:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <set_alternate_accel_config>:
/*!
 * @brief This internal API sets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t set_alternate_accel_config(const struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 800413a:	2300      	movs	r3, #0
 800413c:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_acc_odr, alt_acc_avg_num, alt_acc_mode;

    if (config != NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d03a      	beq.n	80041ba <set_alternate_accel_config+0x8a>
    {
        /* Set alternate accelerometer ODR */
        alt_acc_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_ACC_ODR, config->alt_acc_odr);
 8004144:	7b3b      	ldrb	r3, [r7, #12]
 8004146:	b21b      	sxth	r3, r3
 8004148:	f023 030f 	bic.w	r3, r3, #15
 800414c:	b21a      	sxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b21b      	sxth	r3, r3
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	b21b      	sxth	r3, r3
 800415a:	4313      	orrs	r3, r2
 800415c:	b21b      	sxth	r3, r3
 800415e:	82bb      	strh	r3, [r7, #20]

        /* Set alternate accelerometer average number of samples */
        alt_acc_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_AVG_NUM, config->alt_acc_avg_num);
 8004160:	7b7b      	ldrb	r3, [r7, #13]
 8004162:	b21a      	sxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	789b      	ldrb	r3, [r3, #2]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	b21b      	sxth	r3, r3
 800416c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004170:	b21b      	sxth	r3, r3
 8004172:	4313      	orrs	r3, r2
 8004174:	b21b      	sxth	r3, r3
 8004176:	827b      	strh	r3, [r7, #18]

        /* Set alternate accelerometer mode */
        alt_acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_MODE, config->alt_acc_mode);
 8004178:	7b7b      	ldrb	r3, [r7, #13]
 800417a:	b21a      	sxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	031b      	lsls	r3, r3, #12
 8004182:	b21b      	sxth	r3, r3
 8004184:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004188:	b21b      	sxth	r3, r3
 800418a:	4313      	orrs	r3, r2
 800418c:	b21b      	sxth	r3, r3
 800418e:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_acc_odr);
 8004190:	8abb      	ldrh	r3, [r7, #20]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_acc_avg_num | alt_acc_mode) >> 8);
 8004196:	8a7a      	ldrh	r2, [r7, #18]
 8004198:	8a3b      	ldrh	r3, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate accel */
        rslt = bmi3_set_regs(BMI3_REG_ALT_ACC_CONF, reg_data, 2, dev);
 80041a6:	f107 010c 	add.w	r1, r7, #12
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2202      	movs	r2, #2
 80041ae:	2028      	movs	r0, #40	@ 0x28
 80041b0:	f7fc fd29 	bl	8000c06 <bmi3_set_regs>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]
 80041b8:	e001      	b.n	80041be <set_alternate_accel_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80041ba:	23ff      	movs	r3, #255	@ 0xff
 80041bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80041be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <get_alternate_accel_config>:
/*!
 * @brief This internal API gets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t get_alternate_accel_config(struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80041d4:	2300      	movs	r3, #0
 80041d6:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d029      	beq.n	8004232 <get_alternate_accel_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_ACC_CONF, data_array, 2, dev);
 80041de:	f107 0108 	add.w	r1, r7, #8
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2202      	movs	r2, #2
 80041e6:	2028      	movs	r0, #40	@ 0x28
 80041e8:	f7fc fca8 	bl	8000b3c <bmi3_get_regs>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80041f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d11e      	bne.n	8004236 <get_alternate_accel_config+0x6c>
        {
            reg_data = data_array[0];
 80041f8:	7a3b      	ldrb	r3, [r7, #8]
 80041fa:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer ODR */
            config->alt_acc_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_ACC_ODR);
 80041fc:	89bb      	ldrh	r3, [r7, #12]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 800420a:	7a7b      	ldrb	r3, [r7, #9]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer average samples */
            config->alt_acc_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_AVG_NUM);
 8004210:	89bb      	ldrh	r3, [r7, #12]
 8004212:	121b      	asrs	r3, r3, #8
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	b2da      	uxtb	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	709a      	strb	r2, [r3, #2]

            /* Get alternate accel mode */
            config->alt_acc_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_MODE);
 8004220:	89bb      	ldrh	r3, [r7, #12]
 8004222:	131b      	asrs	r3, r3, #12
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	b2da      	uxtb	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	705a      	strb	r2, [r3, #1]
 8004230:	e001      	b.n	8004236 <get_alternate_accel_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004232:	23ff      	movs	r3, #255	@ 0xff
 8004234:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <set_alternate_gyro_config>:
/*!
 * @brief This internal API sets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t set_alternate_gyro_config(const struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b086      	sub	sp, #24
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 800424c:	2300      	movs	r3, #0
 800424e:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_gyro_odr, alt_gyro_avg_num, alt_gyro_mode;

    if (config != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03a      	beq.n	80042cc <set_alternate_gyro_config+0x8a>
    {
        /* Set alternate gyro ODR */
        alt_gyro_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_GYR_ODR, config->alt_gyro_odr);
 8004256:	7b3b      	ldrb	r3, [r7, #12]
 8004258:	b21b      	sxth	r3, r3
 800425a:	f023 030f 	bic.w	r3, r3, #15
 800425e:	b21a      	sxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b21b      	sxth	r3, r3
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	b21b      	sxth	r3, r3
 800426c:	4313      	orrs	r3, r2
 800426e:	b21b      	sxth	r3, r3
 8004270:	82bb      	strh	r3, [r7, #20]

        /* Set alternate gyro average number of samples */
        alt_gyro_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_AVG_NUM, config->alt_gyro_avg_num);
 8004272:	7b7b      	ldrb	r3, [r7, #13]
 8004274:	b21a      	sxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	789b      	ldrb	r3, [r3, #2]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	b21b      	sxth	r3, r3
 800427e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004282:	b21b      	sxth	r3, r3
 8004284:	4313      	orrs	r3, r2
 8004286:	b21b      	sxth	r3, r3
 8004288:	827b      	strh	r3, [r7, #18]

        /* Set alternate gyro mode */
        alt_gyro_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_MODE, config->alt_gyro_mode);
 800428a:	7b7b      	ldrb	r3, [r7, #13]
 800428c:	b21a      	sxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	785b      	ldrb	r3, [r3, #1]
 8004292:	031b      	lsls	r3, r3, #12
 8004294:	b21b      	sxth	r3, r3
 8004296:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800429a:	b21b      	sxth	r3, r3
 800429c:	4313      	orrs	r3, r2
 800429e:	b21b      	sxth	r3, r3
 80042a0:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_gyro_odr);
 80042a2:	8abb      	ldrh	r3, [r7, #20]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_gyro_avg_num | alt_gyro_mode) >> 8);
 80042a8:	8a7a      	ldrh	r2, [r7, #18]
 80042aa:	8a3b      	ldrh	r3, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate gyro */
        rslt = bmi3_set_regs(BMI3_REG_ALT_GYR_CONF, reg_data, 2, dev);
 80042b8:	f107 010c 	add.w	r1, r7, #12
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2202      	movs	r2, #2
 80042c0:	2029      	movs	r0, #41	@ 0x29
 80042c2:	f7fc fca0 	bl	8000c06 <bmi3_set_regs>
 80042c6:	4603      	mov	r3, r0
 80042c8:	75fb      	strb	r3, [r7, #23]
 80042ca:	e001      	b.n	80042d0 <set_alternate_gyro_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80042cc:	23ff      	movs	r3, #255	@ 0xff
 80042ce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80042d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <get_alternate_gyro_config>:
/*!
 * @brief This internal API gets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t get_alternate_gyro_config(struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80042e6:	2300      	movs	r3, #0
 80042e8:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d029      	beq.n	8004344 <get_alternate_gyro_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_GYR_CONF, data_array, 2, dev);
 80042f0:	f107 0108 	add.w	r1, r7, #8
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2202      	movs	r2, #2
 80042f8:	2029      	movs	r0, #41	@ 0x29
 80042fa:	f7fc fc1f 	bl	8000b3c <bmi3_get_regs>
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11e      	bne.n	8004348 <get_alternate_gyro_config+0x6c>
        {
            reg_data = data_array[0];
 800430a:	7a3b      	ldrb	r3, [r7, #8]
 800430c:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro ODR */
            config->alt_gyro_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_GYR_ODR);
 800430e:	89bb      	ldrh	r3, [r7, #12]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	b2da      	uxtb	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 800431c:	7a7b      	ldrb	r3, [r7, #9]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro average samples */
            config->alt_gyro_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_AVG_NUM);
 8004322:	89bb      	ldrh	r3, [r7, #12]
 8004324:	121b      	asrs	r3, r3, #8
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	b2da      	uxtb	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	709a      	strb	r2, [r3, #2]

            /* Get alternate gyro mode */
            config->alt_gyro_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_MODE);
 8004332:	89bb      	ldrh	r3, [r7, #12]
 8004334:	131b      	asrs	r3, r3, #12
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	b2da      	uxtb	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	705a      	strb	r2, [r3, #1]
 8004342:	e001      	b.n	8004348 <get_alternate_gyro_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004344:	23ff      	movs	r3, #255	@ 0xff
 8004346:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <set_alternate_auto_config>:

/*!
 * @brief This internal API sets alternate auto configurations for feature interrupts.
 */
static int8_t set_alternate_auto_config(const struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 800435e:	2300      	movs	r3, #0
 8004360:	823b      	strh	r3, [r7, #16]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8004362:	2323      	movs	r3, #35	@ 0x23
 8004364:	81bb      	strh	r3, [r7, #12]

    uint8_t alt_switch, user_switch;

    if (config != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d035      	beq.n	80043d8 <set_alternate_auto_config+0x84>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800436c:	f107 010c 	add.w	r1, r7, #12
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2202      	movs	r2, #2
 8004374:	2041      	movs	r0, #65	@ 0x41
 8004376:	f7fc fc46 	bl	8000c06 <bmi3_set_regs>
 800437a:	4603      	mov	r3, r0
 800437c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800437e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d12a      	bne.n	80043dc <set_alternate_auto_config+0x88>
        {
            /* Set alternate switch config */
            alt_switch = BMI3_SET_BIT_POS0(alt_auto_config[0],
 8004386:	7c3b      	ldrb	r3, [r7, #16]
 8004388:	b25b      	sxtb	r3, r3
 800438a:	f023 030f 	bic.w	r3, r3, #15
 800438e:	b25a      	sxtb	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b25b      	sxtb	r3, r3
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	b25b      	sxtb	r3, r3
 800439c:	4313      	orrs	r3, r2
 800439e:	b25b      	sxtb	r3, r3
 80043a0:	75bb      	strb	r3, [r7, #22]
                                           BMI3_ALT_CONF_ALT_SWITCH,
                                           config->alt_conf_alt_switch_src_select);

            /* Set alternate user config */
            user_switch = BMI3_SET_BITS(alt_auto_config[0],
 80043a2:	7c3b      	ldrb	r3, [r7, #16]
 80043a4:	b25b      	sxtb	r3, r3
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	b25a      	sxtb	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	785b      	ldrb	r3, [r3, #1]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	b25b      	sxtb	r3, r3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	b25b      	sxtb	r3, r3
 80043b8:	757b      	strb	r3, [r7, #21]
                                        BMI3_ALT_CONF_USER_SWITCH,
                                        config->alt_conf_user_switch_src_select);

            alt_auto_config[0] = alt_switch | user_switch;
 80043ba:	7dba      	ldrb	r2, [r7, #22]
 80043bc:	7d7b      	ldrb	r3, [r7, #21]
 80043be:	4313      	orrs	r3, r2
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	743b      	strb	r3, [r7, #16]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 80043c4:	f107 0110 	add.w	r1, r7, #16
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2202      	movs	r2, #2
 80043cc:	2042      	movs	r0, #66	@ 0x42
 80043ce:	f7fc fc1a 	bl	8000c06 <bmi3_set_regs>
 80043d2:	4603      	mov	r3, r0
 80043d4:	75fb      	strb	r3, [r7, #23]
 80043d6:	e001      	b.n	80043dc <set_alternate_auto_config+0x88>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80043d8:	23ff      	movs	r3, #255	@ 0xff
 80043da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80043dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <get_alternate_auto_config>:

/*!
 * @brief This internal API gets alternate auto configurations for feature interrupts.
 */
static int8_t get_alternate_auto_config(struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 80043f2:	2300      	movs	r3, #0
 80043f4:	81bb      	strh	r3, [r7, #12]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 80043f6:	2323      	movs	r3, #35	@ 0x23
 80043f8:	813b      	strh	r3, [r7, #8]

    if (config != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d025      	beq.n	800444c <get_alternate_auto_config+0x64>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004400:	f107 0108 	add.w	r1, r7, #8
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2202      	movs	r2, #2
 8004408:	2041      	movs	r0, #65	@ 0x41
 800440a:	f7fc fbfc 	bl	8000c06 <bmi3_set_regs>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8004412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d11a      	bne.n	8004450 <get_alternate_auto_config+0x68>
        {
            /* Get the configuration from the feature engine register where alternate config feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 800441a:	f107 010c 	add.w	r1, r7, #12
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2202      	movs	r2, #2
 8004422:	2042      	movs	r0, #66	@ 0x42
 8004424:	f7fc fb8a 	bl	8000b3c <bmi3_get_regs>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 800442c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10d      	bne.n	8004450 <get_alternate_auto_config+0x68>
            {
                /* Get alternate switch config */
                config->alt_conf_alt_switch_src_select = alt_auto_config[0] & BMI3_ALT_CONF_ALT_SWITCH_MASK;
 8004434:	7b3b      	ldrb	r3, [r7, #12]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	b2da      	uxtb	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	701a      	strb	r2, [r3, #0]

                /* Get alternate user config */
                config->alt_conf_user_switch_src_select = (alt_auto_config[0] & BMI3_ALT_CONF_USER_SWITCH_MASK) >>
 8004440:	7b3b      	ldrb	r3, [r7, #12]
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	b2da      	uxtb	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	705a      	strb	r2, [r3, #1]
 800444a:	e001      	b.n	8004450 <get_alternate_auto_config+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800444c:	23ff      	movs	r3, #255	@ 0xff
 800444e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <validate_acc_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for accel
 */
static int8_t validate_acc_odr_avg(uint8_t acc_odr, uint8_t acc_avg)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	460a      	mov	r2, r1
 8004466:	71fb      	strb	r3, [r7, #7]
 8004468:	4613      	mov	r3, r2
 800446a:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	613b      	str	r3, [r7, #16]

    switch (acc_odr)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	3b01      	subs	r3, #1
 800447c:	2b09      	cmp	r3, #9
 800447e:	d835      	bhi.n	80044ec <validate_acc_odr_avg+0x90>
 8004480:	a201      	add	r2, pc, #4	@ (adr r2, 8004488 <validate_acc_odr_avg+0x2c>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044b1 	.word	0x080044b1
 800448c:	080044b7 	.word	0x080044b7
 8004490:	080044bd 	.word	0x080044bd
 8004494:	080044c3 	.word	0x080044c3
 8004498:	080044c9 	.word	0x080044c9
 800449c:	080044cf 	.word	0x080044cf
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044db 	.word	0x080044db
 80044a8:	080044e1 	.word	0x080044e1
 80044ac:	080044e7 	.word	0x080044e7
    {
        case BMI3_ACC_ODR_0_78HZ:
            odr = 0.78125;
 80044b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004570 <validate_acc_odr_avg+0x114>)
 80044b2:	617b      	str	r3, [r7, #20]
            break;
 80044b4:	e01b      	b.n	80044ee <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_1_56HZ:
            odr = 1.5625;
 80044b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004574 <validate_acc_odr_avg+0x118>)
 80044b8:	617b      	str	r3, [r7, #20]
            break;
 80044ba:	e018      	b.n	80044ee <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_3_125HZ:
            odr = 3.125;
 80044bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004578 <validate_acc_odr_avg+0x11c>)
 80044be:	617b      	str	r3, [r7, #20]
            break;
 80044c0:	e015      	b.n	80044ee <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_6_25HZ:
            odr = 6.25;
 80044c2:	4b2e      	ldr	r3, [pc, #184]	@ (800457c <validate_acc_odr_avg+0x120>)
 80044c4:	617b      	str	r3, [r7, #20]
            break;
 80044c6:	e012      	b.n	80044ee <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_12_5HZ:
            odr = 12.5;
 80044c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004580 <validate_acc_odr_avg+0x124>)
 80044ca:	617b      	str	r3, [r7, #20]
            break;
 80044cc:	e00f      	b.n	80044ee <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_25HZ:
            odr = 25.0;
 80044ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004584 <validate_acc_odr_avg+0x128>)
 80044d0:	617b      	str	r3, [r7, #20]
            break;
 80044d2:	e00c      	b.n	80044ee <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_50HZ:
            odr = 50.0;
 80044d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004588 <validate_acc_odr_avg+0x12c>)
 80044d6:	617b      	str	r3, [r7, #20]
            break;
 80044d8:	e009      	b.n	80044ee <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_100HZ:
            odr = 100.0;
 80044da:	4b2c      	ldr	r3, [pc, #176]	@ (800458c <validate_acc_odr_avg+0x130>)
 80044dc:	617b      	str	r3, [r7, #20]
            break;
 80044de:	e006      	b.n	80044ee <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_200HZ:
            odr = 200.0;
 80044e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004590 <validate_acc_odr_avg+0x134>)
 80044e2:	617b      	str	r3, [r7, #20]
            break;
 80044e4:	e003      	b.n	80044ee <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_400HZ:
            odr = 400.0;
 80044e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004594 <validate_acc_odr_avg+0x138>)
 80044e8:	617b      	str	r3, [r7, #20]
            break;
 80044ea:	e000      	b.n	80044ee <validate_acc_odr_avg+0x92>
        default:
            break;
 80044ec:	bf00      	nop
    }

    switch (acc_avg)
 80044ee:	79bb      	ldrb	r3, [r7, #6]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d82d      	bhi.n	8004550 <validate_acc_odr_avg+0xf4>
 80044f4:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <validate_acc_odr_avg+0xa0>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	08004519 	.word	0x08004519
 8004500:	08004521 	.word	0x08004521
 8004504:	08004529 	.word	0x08004529
 8004508:	08004531 	.word	0x08004531
 800450c:	08004539 	.word	0x08004539
 8004510:	08004541 	.word	0x08004541
 8004514:	08004549 	.word	0x08004549
    {
        case BMI3_ACC_AVG1:
            avg = 1.0;
 8004518:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800451c:	613b      	str	r3, [r7, #16]
            break;
 800451e:	e018      	b.n	8004552 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG2:
            avg = 2.0;
 8004520:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004524:	613b      	str	r3, [r7, #16]
            break;
 8004526:	e014      	b.n	8004552 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG4:
            avg = 4.0;
 8004528:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800452c:	613b      	str	r3, [r7, #16]
            break;
 800452e:	e010      	b.n	8004552 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG8:
            avg = 8.0;
 8004530:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004534:	613b      	str	r3, [r7, #16]
            break;
 8004536:	e00c      	b.n	8004552 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG16:
            avg = 16.0;
 8004538:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800453c:	613b      	str	r3, [r7, #16]
            break;
 800453e:	e008      	b.n	8004552 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG32:
            avg = 32.0;
 8004540:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8004544:	613b      	str	r3, [r7, #16]
            break;
 8004546:	e004      	b.n	8004552 <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG64:
            avg = 64.0;
 8004548:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 800454c:	613b      	str	r3, [r7, #16]
            break;
 800454e:	e000      	b.n	8004552 <validate_acc_odr_avg+0xf6>
        default:
            break;
 8004550:	bf00      	nop
    }

    rslt = accel_skipped_samples_check(odr, avg);
 8004552:	edd7 0a04 	vldr	s1, [r7, #16]
 8004556:	ed97 0a05 	vldr	s0, [r7, #20]
 800455a:	f000 f81d 	bl	8004598 <accel_skipped_samples_check>
 800455e:	4603      	mov	r3, r0
 8004560:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8004562:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	3f480000 	.word	0x3f480000
 8004574:	3fc80000 	.word	0x3fc80000
 8004578:	40480000 	.word	0x40480000
 800457c:	40c80000 	.word	0x40c80000
 8004580:	41480000 	.word	0x41480000
 8004584:	41c80000 	.word	0x41c80000
 8004588:	42480000 	.word	0x42480000
 800458c:	42c80000 	.word	0x42c80000
 8004590:	43480000 	.word	0x43480000
 8004594:	43c80000 	.word	0x43c80000

08004598 <accel_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for accel
 */
static int8_t accel_skipped_samples_check(float odr, float avg)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	ed87 0a01 	vstr	s0, [r7, #4]
 80045a2:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 80045a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004614 <accel_skipped_samples_check+0x7c>)
 80045a8:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 80045b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80045b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045bc:	dd1f      	ble.n	80045fe <accel_skipped_samples_check+0x66>
 80045be:	edd7 7a00 	vldr	s15, [r7]
 80045c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ca:	dd18      	ble.n	80045fe <accel_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 80045cc:	edd7 6a04 	vldr	s13, [r7, #16]
 80045d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80045d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d8:	edd7 7a00 	vldr	s15, [r7]
 80045dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045e0:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 80045e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	dd02      	ble.n	80045f8 <accel_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80045f6:	e004      	b.n	8004602 <accel_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 80045f8:	23fc      	movs	r3, #252	@ 0xfc
 80045fa:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80045fc:	e001      	b.n	8004602 <accel_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_ACC_INVALID_CFG;
 80045fe:	23fc      	movs	r3, #252	@ 0xfc
 8004600:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004606:	4618      	mov	r0, r3
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	45c80000 	.word	0x45c80000

08004618 <validate_gyr_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for gyro
 */
static int8_t validate_gyr_odr_avg(uint8_t gyr_odr, uint8_t gyr_avg)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	460a      	mov	r2, r1
 8004622:	71fb      	strb	r3, [r7, #7]
 8004624:	4613      	mov	r3, r2
 8004626:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	613b      	str	r3, [r7, #16]

    switch (gyr_odr)
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	3b01      	subs	r3, #1
 8004638:	2b09      	cmp	r3, #9
 800463a:	d835      	bhi.n	80046a8 <validate_gyr_odr_avg+0x90>
 800463c:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <validate_gyr_odr_avg+0x2c>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004673 	.word	0x08004673
 800464c:	08004679 	.word	0x08004679
 8004650:	0800467f 	.word	0x0800467f
 8004654:	08004685 	.word	0x08004685
 8004658:	0800468b 	.word	0x0800468b
 800465c:	08004691 	.word	0x08004691
 8004660:	08004697 	.word	0x08004697
 8004664:	0800469d 	.word	0x0800469d
 8004668:	080046a3 	.word	0x080046a3
    {
        case BMI3_GYR_ODR_0_78HZ:
            odr = 0.78125;
 800466c:	4b2f      	ldr	r3, [pc, #188]	@ (800472c <validate_gyr_odr_avg+0x114>)
 800466e:	617b      	str	r3, [r7, #20]
            break;
 8004670:	e01b      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_1_56HZ:
            odr = 1.5625;
 8004672:	4b2f      	ldr	r3, [pc, #188]	@ (8004730 <validate_gyr_odr_avg+0x118>)
 8004674:	617b      	str	r3, [r7, #20]
            break;
 8004676:	e018      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_3_125HZ:
            odr = 3.125;
 8004678:	4b2e      	ldr	r3, [pc, #184]	@ (8004734 <validate_gyr_odr_avg+0x11c>)
 800467a:	617b      	str	r3, [r7, #20]
            break;
 800467c:	e015      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_6_25HZ:
            odr = 6.25;
 800467e:	4b2e      	ldr	r3, [pc, #184]	@ (8004738 <validate_gyr_odr_avg+0x120>)
 8004680:	617b      	str	r3, [r7, #20]
            break;
 8004682:	e012      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_12_5HZ:
            odr = 12.5;
 8004684:	4b2d      	ldr	r3, [pc, #180]	@ (800473c <validate_gyr_odr_avg+0x124>)
 8004686:	617b      	str	r3, [r7, #20]
            break;
 8004688:	e00f      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_25HZ:
            odr = 25.0;
 800468a:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <validate_gyr_odr_avg+0x128>)
 800468c:	617b      	str	r3, [r7, #20]
            break;
 800468e:	e00c      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_50HZ:
            odr = 50.0;
 8004690:	4b2c      	ldr	r3, [pc, #176]	@ (8004744 <validate_gyr_odr_avg+0x12c>)
 8004692:	617b      	str	r3, [r7, #20]
            break;
 8004694:	e009      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_100HZ:
            odr = 100.0;
 8004696:	4b2c      	ldr	r3, [pc, #176]	@ (8004748 <validate_gyr_odr_avg+0x130>)
 8004698:	617b      	str	r3, [r7, #20]
            break;
 800469a:	e006      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_200HZ:
            odr = 200.0;
 800469c:	4b2b      	ldr	r3, [pc, #172]	@ (800474c <validate_gyr_odr_avg+0x134>)
 800469e:	617b      	str	r3, [r7, #20]
            break;
 80046a0:	e003      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_400HZ:
            odr = 400.0;
 80046a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004750 <validate_gyr_odr_avg+0x138>)
 80046a4:	617b      	str	r3, [r7, #20]
            break;
 80046a6:	e000      	b.n	80046aa <validate_gyr_odr_avg+0x92>
        default:
            break;
 80046a8:	bf00      	nop
    }

    switch (gyr_avg)
 80046aa:	79bb      	ldrb	r3, [r7, #6]
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d82d      	bhi.n	800470c <validate_gyr_odr_avg+0xf4>
 80046b0:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <validate_gyr_odr_avg+0xa0>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046dd 	.word	0x080046dd
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046f5 	.word	0x080046f5
 80046cc:	080046fd 	.word	0x080046fd
 80046d0:	08004705 	.word	0x08004705
    {
        case BMI3_GYR_AVG1:
            avg = 1.0;
 80046d4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80046d8:	613b      	str	r3, [r7, #16]
            break;
 80046da:	e018      	b.n	800470e <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG2:
            avg = 2.0;
 80046dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80046e0:	613b      	str	r3, [r7, #16]
            break;
 80046e2:	e014      	b.n	800470e <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG4:
            avg = 4.0;
 80046e4:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80046e8:	613b      	str	r3, [r7, #16]
            break;
 80046ea:	e010      	b.n	800470e <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG8:
            avg = 8.0;
 80046ec:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80046f0:	613b      	str	r3, [r7, #16]
            break;
 80046f2:	e00c      	b.n	800470e <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG16:
            avg = 16.0;
 80046f4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80046f8:	613b      	str	r3, [r7, #16]
            break;
 80046fa:	e008      	b.n	800470e <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG32:
            avg = 32.0;
 80046fc:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8004700:	613b      	str	r3, [r7, #16]
            break;
 8004702:	e004      	b.n	800470e <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG64:
            avg = 64.0;
 8004704:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8004708:	613b      	str	r3, [r7, #16]
            break;
 800470a:	e000      	b.n	800470e <validate_gyr_odr_avg+0xf6>
        default:
            break;
 800470c:	bf00      	nop
    }

    rslt = gyro_skipped_samples_check(odr, avg);
 800470e:	edd7 0a04 	vldr	s1, [r7, #16]
 8004712:	ed97 0a05 	vldr	s0, [r7, #20]
 8004716:	f000 f81d 	bl	8004754 <gyro_skipped_samples_check>
 800471a:	4603      	mov	r3, r0
 800471c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800471e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	3f480000 	.word	0x3f480000
 8004730:	3fc80000 	.word	0x3fc80000
 8004734:	40480000 	.word	0x40480000
 8004738:	40c80000 	.word	0x40c80000
 800473c:	41480000 	.word	0x41480000
 8004740:	41c80000 	.word	0x41c80000
 8004744:	42480000 	.word	0x42480000
 8004748:	42c80000 	.word	0x42c80000
 800474c:	43480000 	.word	0x43480000
 8004750:	43c80000 	.word	0x43c80000

08004754 <gyro_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for gyro
 */
static int8_t gyro_skipped_samples_check(float odr, float avg)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	ed87 0a01 	vstr	s0, [r7, #4]
 800475e:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 8004762:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <gyro_skipped_samples_check+0x7c>)
 8004764:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 800476c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004770:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004778:	dd1f      	ble.n	80047ba <gyro_skipped_samples_check+0x66>
 800477a:	edd7 7a00 	vldr	s15, [r7]
 800477e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004786:	dd18      	ble.n	80047ba <gyro_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 8004788:	edd7 6a04 	vldr	s13, [r7, #16]
 800478c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004794:	edd7 7a00 	vldr	s15, [r7]
 8004798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800479c:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 80047a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80047a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ac:	dd02      	ble.n	80047b4 <gyro_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80047b2:	e004      	b.n	80047be <gyro_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 80047b4:	23fb      	movs	r3, #251	@ 0xfb
 80047b6:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80047b8:	e001      	b.n	80047be <gyro_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_GYRO_INVALID_CFG;
 80047ba:	23fb      	movs	r3, #251	@ 0xfb
 80047bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80047be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	45c80000 	.word	0x45c80000

080047d4 <bmi323_init>:
/*!
 * @brief This API is the entry point for bmi323 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi323_init(struct bmi3_dev *dev)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fe21 	bl	8005424 <null_ptr_check>
 80047e2:	4603      	mov	r3, r0
 80047e4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI323_OK)
 80047e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <bmi323_init+0x24>
    {
        rslt = bmi3_init(dev);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc f952 	bl	8000a98 <bmi3_init>
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI323_OK)
 80047f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <bmi323_init+0x40>
    {
        /* Validate chip-id */
        if (dev->chip_id == BMI323_CHIP_ID)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b43      	cmp	r3, #67	@ 0x43
 8004806:	d103      	bne.n	8004810 <bmi323_init+0x3c>
        {
            /* Assign resolution to the structure */
            dev->resolution = BMI323_16_BIT_RESOLUTION;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2210      	movs	r2, #16
 800480c:	731a      	strb	r2, [r3, #12]
 800480e:	e001      	b.n	8004814 <bmi323_init+0x40>
        }
        else
        {
            rslt = BMI323_E_DEV_NOT_FOUND;
 8004810:	23fd      	movs	r3, #253	@ 0xfd
 8004812:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rslt == BMI323_OK)
 8004814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <bmi323_init+0x54>
    {
        rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	2001      	movs	r0, #1
 8004820:	f000 f85e 	bl	80048e0 <bmi323_context_switch_selection>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004828:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <bmi323_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi323 sensor.
 */
int8_t bmi323_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	4613      	mov	r3, r2
 8004844:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_regs(reg_addr, data, len, dev);
 8004846:	89ba      	ldrh	r2, [r7, #12]
 8004848:	7bf8      	ldrb	r0, [r7, #15]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	f7fc f9da 	bl	8000c06 <bmi3_set_regs>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8004856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <bmi323_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi323_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	460b      	mov	r3, r1
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_sensor_config(sens_cfg, n_sens, dev);
 8004870:	7afb      	ldrb	r3, [r7, #11]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4619      	mov	r1, r3
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7fc fab8 	bl	8000dec <bmi3_set_sensor_config>
 800487c:	4603      	mov	r3, r0
 800487e:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8004880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <bmi323_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi323_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	460b      	mov	r3, r1
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_get_sensor_config(sens_cfg, n_sens, dev);
 800489a:	7afb      	ldrb	r3, [r7, #11]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	4619      	mov	r1, r3
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7fc fbad 	bl	8001000 <bmi3_get_sensor_config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80048aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <bmi323_map_interrupt>:

/*!
 * @brief This API maps/un-maps data interrupts to that of interrupt pins.
 */
int8_t bmi323_map_interrupt(struct bmi3_map_int map_int, struct bmi3_dev *dev)
{
 80048b6:	b590      	push	{r4, r7, lr}
 80048b8:	b089      	sub	sp, #36	@ 0x24
 80048ba:	af02      	add	r7, sp, #8
 80048bc:	463c      	mov	r4, r7
 80048be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* Variable to define error */
    int8_t rslt;

    /* Read map interrupt data */
    rslt = bmi3_map_interrupt(map_int, dev);
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	463b      	mov	r3, r7
 80048c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048ca:	f7fc fca5 	bl	8001218 <bmi3_map_interrupt>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80048d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd90      	pop	{r4, r7, pc}
	...

080048e0 <bmi323_context_switch_selection>:

/*!
 * @brief This API writes the configurations of context feature for smart phone, wearables and hearables.
 */
int8_t bmi323_context_switch_selection(uint8_t context_sel, struct bmi3_dev *dev)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b0c8      	sub	sp, #288	@ 0x120
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4602      	mov	r2, r0
 80048e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80048ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048f0:	6019      	str	r1, [r3, #0]
 80048f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80048f6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80048fa:	701a      	strb	r2, [r3, #0]
    /* Variable to define error */
    int8_t rslt;

    struct bmi3_sens_config sens_cfg[BMI323_MAX_FEATURE];

    uint8_t index = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    if (context_sel < BMI323_SEL_MAX)
 8004902:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004906:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b02      	cmp	r3, #2
 800490e:	f200 8578 	bhi.w	8005402 <bmi323_context_switch_selection+0xb22>
    {
        /* Set any-motion configuration */
        sens_cfg[0].type = BMI323_ANY_MOTION;
 8004912:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004916:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800491a:	2203      	movs	r2, #3
 800491c:	701a      	strb	r2, [r3, #0]
        sens_cfg[0].cfg.any_motion.slope_thres = any_motion_param_set[context_sel][index++];
 800491e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004922:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800492c:	1c59      	adds	r1, r3, #1
 800492e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004932:	4618      	mov	r0, r3
 8004934:	49e3      	ldr	r1, [pc, #908]	@ (8004cc4 <bmi323_context_switch_selection+0x3e4>)
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	4403      	add	r3, r0
 800493e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004942:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004946:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800494a:	809a      	strh	r2, [r3, #4]
        sens_cfg[0].cfg.any_motion.acc_ref_up = (uint8_t)(any_motion_param_set[context_sel][index++]);
 800494c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004950:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004960:	4618      	mov	r0, r3
 8004962:	49d8      	ldr	r1, [pc, #864]	@ (8004cc4 <bmi323_context_switch_selection+0x3e4>)
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	4403      	add	r3, r0
 800496c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004970:	b2da      	uxtb	r2, r3
 8004972:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004976:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800497a:	719a      	strb	r2, [r3, #6]
        sens_cfg[0].cfg.any_motion.hysteresis = any_motion_param_set[context_sel][index++];
 800497c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004980:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800498a:	1c59      	adds	r1, r3, #1
 800498c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004990:	4618      	mov	r0, r3
 8004992:	49cc      	ldr	r1, [pc, #816]	@ (8004cc4 <bmi323_context_switch_selection+0x3e4>)
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	4403      	add	r3, r0
 800499c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80049a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80049a8:	811a      	strh	r2, [r3, #8]
        sens_cfg[0].cfg.any_motion.duration = any_motion_param_set[context_sel][index++];
 80049aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049ae:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80049b2:	781a      	ldrb	r2, [r3, #0]
 80049b4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80049b8:	1c59      	adds	r1, r3, #1
 80049ba:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80049be:	4618      	mov	r0, r3
 80049c0:	49c0      	ldr	r1, [pc, #768]	@ (8004cc4 <bmi323_context_switch_selection+0x3e4>)
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	4403      	add	r3, r0
 80049ca:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80049ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049d2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80049d6:	805a      	strh	r2, [r3, #2]
        sens_cfg[0].cfg.any_motion.wait_time = any_motion_param_set[context_sel][index++];
 80049d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049dc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80049e6:	1c59      	adds	r1, r3, #1
 80049e8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80049ec:	4618      	mov	r0, r3
 80049ee:	49b5      	ldr	r1, [pc, #724]	@ (8004cc4 <bmi323_context_switch_selection+0x3e4>)
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	4403      	add	r3, r0
 80049f8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80049fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a00:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a04:	815a      	strh	r2, [r3, #10]

        /* Set no-motion configuration */
        index = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[1].type = BMI323_NO_MOTION;
 8004a0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a14:	2204      	movs	r2, #4
 8004a16:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        sens_cfg[1].cfg.no_motion.slope_thres = no_motion_param_set[context_sel][index++];
 8004a1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a1e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004a28:	1c59      	adds	r1, r3, #1
 8004a2a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004a2e:	4618      	mov	r0, r3
 8004a30:	49a5      	ldr	r1, [pc, #660]	@ (8004cc8 <bmi323_context_switch_selection+0x3e8>)
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	4403      	add	r3, r0
 8004a3a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a42:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a46:	865a      	strh	r2, [r3, #50]	@ 0x32
        sens_cfg[1].cfg.no_motion.acc_ref_up = (uint8_t)(no_motion_param_set[context_sel][index++]);
 8004a48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a4c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004a56:	1c59      	adds	r1, r3, #1
 8004a58:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	499a      	ldr	r1, [pc, #616]	@ (8004cc8 <bmi323_context_switch_selection+0x3e8>)
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	4403      	add	r3, r0
 8004a68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a72:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        sens_cfg[1].cfg.no_motion.hysteresis = no_motion_param_set[context_sel][index++];
 8004a7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a7e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004a88:	1c59      	adds	r1, r3, #1
 8004a8a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004a8e:	4618      	mov	r0, r3
 8004a90:	498d      	ldr	r1, [pc, #564]	@ (8004cc8 <bmi323_context_switch_selection+0x3e8>)
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	4403      	add	r3, r0
 8004a9a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004aa2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004aa6:	86da      	strh	r2, [r3, #54]	@ 0x36
        sens_cfg[1].cfg.no_motion.duration = no_motion_param_set[context_sel][index++];
 8004aa8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004aac:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ab6:	1c59      	adds	r1, r3, #1
 8004ab8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004abc:	4618      	mov	r0, r3
 8004abe:	4982      	ldr	r1, [pc, #520]	@ (8004cc8 <bmi323_context_switch_selection+0x3e8>)
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	4403      	add	r3, r0
 8004ac8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004acc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ad0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ad4:	861a      	strh	r2, [r3, #48]	@ 0x30
        sens_cfg[1].cfg.no_motion.wait_time = no_motion_param_set[context_sel][index++];
 8004ad6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ada:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004ade:	781a      	ldrb	r2, [r3, #0]
 8004ae0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ae4:	1c59      	adds	r1, r3, #1
 8004ae6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004aea:	4618      	mov	r0, r3
 8004aec:	4976      	ldr	r1, [pc, #472]	@ (8004cc8 <bmi323_context_switch_selection+0x3e8>)
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	4403      	add	r3, r0
 8004af6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004afa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004afe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004b02:	871a      	strh	r2, [r3, #56]	@ 0x38

        /* Set tap configuration */
        index = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[2].type = BMI323_TAP;
 8004b0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b0e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004b12:	2209      	movs	r2, #9
 8004b14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        sens_cfg[2].cfg.tap.axis_sel = (uint8_t)tap_param_set[context_sel][index++];
 8004b18:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b1c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004b20:	781a      	ldrb	r2, [r3, #0]
 8004b22:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004b26:	1c59      	adds	r1, r3, #1
 8004b28:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	4967      	ldr	r1, [pc, #412]	@ (8004ccc <bmi323_context_switch_selection+0x3ec>)
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4403      	add	r3, r0
 8004b3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004b48:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
        sens_cfg[2].cfg.tap.wait_for_timeout = (uint8_t)tap_param_set[context_sel][index++];
 8004b4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b50:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004b5a:	1c59      	adds	r1, r3, #1
 8004b5c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004b60:	4618      	mov	r0, r3
 8004b62:	495a      	ldr	r1, [pc, #360]	@ (8004ccc <bmi323_context_switch_selection+0x3ec>)
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	4403      	add	r3, r0
 8004b6e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004b7c:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
        sens_cfg[2].cfg.tap.max_peaks_for_tap = (uint8_t)tap_param_set[context_sel][index++];
 8004b80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b84:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004b88:	781a      	ldrb	r2, [r3, #0]
 8004b8a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004b8e:	1c59      	adds	r1, r3, #1
 8004b90:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004b94:	4618      	mov	r0, r3
 8004b96:	494d      	ldr	r1, [pc, #308]	@ (8004ccc <bmi323_context_switch_selection+0x3ec>)
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4403      	add	r3, r0
 8004ba2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004bac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004bb0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        sens_cfg[2].cfg.tap.mode = (uint8_t)tap_param_set[context_sel][index++];
 8004bb4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004bb8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004bc2:	1c59      	adds	r1, r3, #1
 8004bc4:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004bc8:	4618      	mov	r0, r3
 8004bca:	4940      	ldr	r1, [pc, #256]	@ (8004ccc <bmi323_context_switch_selection+0x3ec>)
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4403      	add	r3, r0
 8004bd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004be0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004be4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        sens_cfg[2].cfg.tap.tap_peak_thres = tap_param_set[context_sel][index++];
 8004be8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004bec:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004bf6:	1c59      	adds	r1, r3, #1
 8004bf8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	4933      	ldr	r1, [pc, #204]	@ (8004ccc <bmi323_context_switch_selection+0x3ec>)
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4403      	add	r3, r0
 8004c0a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c12:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        sens_cfg[2].cfg.tap.max_gest_dur = (uint8_t)tap_param_set[context_sel][index++];
 8004c1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c1e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004c28:	1c59      	adds	r1, r3, #1
 8004c2a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004c2e:	4618      	mov	r0, r3
 8004c30:	4926      	ldr	r1, [pc, #152]	@ (8004ccc <bmi323_context_switch_selection+0x3ec>)
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4403      	add	r3, r0
 8004c3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c46:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c4a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        sens_cfg[2].cfg.tap.max_dur_between_peaks = (uint8_t)tap_param_set[context_sel][index++];
 8004c4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c52:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004c5c:	1c59      	adds	r1, r3, #1
 8004c5e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004c62:	4618      	mov	r0, r3
 8004c64:	4919      	ldr	r1, [pc, #100]	@ (8004ccc <bmi323_context_switch_selection+0x3ec>)
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	4403      	add	r3, r0
 8004c70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c7a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c7e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
        sens_cfg[2].cfg.tap.tap_shock_settling_dur = (uint8_t)tap_param_set[context_sel][index++];
 8004c82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c86:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004c8a:	781a      	ldrb	r2, [r3, #0]
 8004c8c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004c90:	1c59      	adds	r1, r3, #1
 8004c92:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004c96:	4618      	mov	r0, r3
 8004c98:	490c      	ldr	r1, [pc, #48]	@ (8004ccc <bmi323_context_switch_selection+0x3ec>)
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4403      	add	r3, r0
 8004ca4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004cb2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
        sens_cfg[2].cfg.tap.min_quite_dur_between_taps = (uint8_t)tap_param_set[context_sel][index++];
 8004cb6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cba:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004cbe:	781a      	ldrb	r2, [r3, #0]
 8004cc0:	e006      	b.n	8004cd0 <bmi323_context_switch_selection+0x3f0>
 8004cc2:	bf00      	nop
 8004cc4:	24000000 	.word	0x24000000
 8004cc8:	24000020 	.word	0x24000020
 8004ccc:	24000040 	.word	0x24000040
 8004cd0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004cd4:	1c59      	adds	r1, r3, #1
 8004cd6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004cda:	4618      	mov	r0, r3
 8004cdc:	49e9      	ldr	r1, [pc, #932]	@ (8005084 <bmi323_context_switch_selection+0x7a4>)
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	4403      	add	r3, r0
 8004ce8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cf2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004cf6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
        sens_cfg[2].cfg.tap.quite_time_after_gest = (uint8_t)tap_param_set[context_sel][index++];
 8004cfa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cfe:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d08:	1c59      	adds	r1, r3, #1
 8004d0a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d0e:	4618      	mov	r0, r3
 8004d10:	49dc      	ldr	r1, [pc, #880]	@ (8005084 <bmi323_context_switch_selection+0x7a4>)
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4403      	add	r3, r0
 8004d1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d26:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d2a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

        /* Set step counter configuration */
        index = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[3].type = BMI323_STEP_COUNTER;
 8004d34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d3c:	2205      	movs	r2, #5
 8004d3e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
        sens_cfg[3].cfg.step_counter.watermark_level = step_counter_param_set[context_sel][index++];
 8004d42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d46:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d4a:	781a      	ldrb	r2, [r3, #0]
 8004d4c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d50:	1c59      	adds	r1, r3, #1
 8004d52:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d56:	4618      	mov	r0, r3
 8004d58:	49cb      	ldr	r1, [pc, #812]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004d5a:	2316      	movs	r3, #22
 8004d5c:	fb02 f303 	mul.w	r3, r2, r3
 8004d60:	4403      	add	r3, r0
 8004d62:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d6a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d6e:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
        sens_cfg[3].cfg.step_counter.reset_counter = step_counter_param_set[context_sel][index++];
 8004d72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d76:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d80:	1c59      	adds	r1, r3, #1
 8004d82:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d86:	4618      	mov	r0, r3
 8004d88:	49bf      	ldr	r1, [pc, #764]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004d8a:	2316      	movs	r3, #22
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
 8004d90:	4403      	add	r3, r0
 8004d92:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d9a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d9e:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        sens_cfg[3].cfg.step_counter.env_min_dist_up = step_counter_param_set[context_sel][index++];
 8004da2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004da6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004db0:	1c59      	adds	r1, r3, #1
 8004db2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004db6:	4618      	mov	r0, r3
 8004db8:	49b3      	ldr	r1, [pc, #716]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004dba:	2316      	movs	r3, #22
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	4403      	add	r3, r0
 8004dc2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004dc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004dce:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        sens_cfg[3].cfg.step_counter.env_coef_up = step_counter_param_set[context_sel][index++];
 8004dd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dd6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004dda:	781a      	ldrb	r2, [r3, #0]
 8004ddc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004de0:	1c59      	adds	r1, r3, #1
 8004de2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004de6:	4618      	mov	r0, r3
 8004de8:	49a7      	ldr	r1, [pc, #668]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004dea:	2316      	movs	r3, #22
 8004dec:	fb02 f303 	mul.w	r3, r2, r3
 8004df0:	4403      	add	r3, r0
 8004df2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004df6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dfa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004dfe:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        sens_cfg[3].cfg.step_counter.env_min_dist_down = step_counter_param_set[context_sel][index++];
 8004e02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e06:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e10:	1c59      	adds	r1, r3, #1
 8004e12:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004e16:	4618      	mov	r0, r3
 8004e18:	499b      	ldr	r1, [pc, #620]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004e1a:	2316      	movs	r3, #22
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	4403      	add	r3, r0
 8004e22:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e2a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e2e:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        sens_cfg[3].cfg.step_counter.env_coef_down = step_counter_param_set[context_sel][index++];
 8004e32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e36:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e3a:	781a      	ldrb	r2, [r3, #0]
 8004e3c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e40:	1c59      	adds	r1, r3, #1
 8004e42:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004e46:	4618      	mov	r0, r3
 8004e48:	498f      	ldr	r1, [pc, #572]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004e4a:	2316      	movs	r3, #22
 8004e4c:	fb02 f303 	mul.w	r3, r2, r3
 8004e50:	4403      	add	r3, r0
 8004e52:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e5a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e5e:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        sens_cfg[3].cfg.step_counter.mean_val_decay = step_counter_param_set[context_sel][index++];
 8004e62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e66:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e6a:	781a      	ldrb	r2, [r3, #0]
 8004e6c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e70:	1c59      	adds	r1, r3, #1
 8004e72:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004e76:	4618      	mov	r0, r3
 8004e78:	4983      	ldr	r1, [pc, #524]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004e7a:	2316      	movs	r3, #22
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	4403      	add	r3, r0
 8004e82:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e8a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e8e:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        sens_cfg[3].cfg.step_counter.mean_step_dur = step_counter_param_set[context_sel][index++];
 8004e92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e96:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ea0:	1c59      	adds	r1, r3, #1
 8004ea2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	4977      	ldr	r1, [pc, #476]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004eaa:	2316      	movs	r3, #22
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
 8004eb0:	4403      	add	r3, r0
 8004eb2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004eb6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004eba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ebe:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
        sens_cfg[3].cfg.step_counter.step_buffer_size = step_counter_param_set[context_sel][index++];
 8004ec2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ec6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004eca:	781a      	ldrb	r2, [r3, #0]
 8004ecc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ed0:	1c59      	adds	r1, r3, #1
 8004ed2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	496b      	ldr	r1, [pc, #428]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004eda:	2316      	movs	r3, #22
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	4403      	add	r3, r0
 8004ee2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ee6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004eea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004eee:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
        sens_cfg[3].cfg.step_counter.filter_cascade_enabled = step_counter_param_set[context_sel][index++];
 8004ef2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ef6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f00:	1c59      	adds	r1, r3, #1
 8004f02:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f06:	4618      	mov	r0, r3
 8004f08:	495f      	ldr	r1, [pc, #380]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004f0a:	2316      	movs	r3, #22
 8004f0c:	fb02 f303 	mul.w	r3, r2, r3
 8004f10:	4403      	add	r3, r0
 8004f12:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004f16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f1a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f1e:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        sens_cfg[3].cfg.step_counter.step_counter_increment = step_counter_param_set[context_sel][index++];
 8004f22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f26:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f30:	1c59      	adds	r1, r3, #1
 8004f32:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f36:	4618      	mov	r0, r3
 8004f38:	4953      	ldr	r1, [pc, #332]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004f3a:	2316      	movs	r3, #22
 8004f3c:	fb02 f303 	mul.w	r3, r2, r3
 8004f40:	4403      	add	r3, r0
 8004f42:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004f46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f4e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        sens_cfg[3].cfg.step_counter.peak_duration_min_walking = step_counter_param_set[context_sel][index++];
 8004f52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f56:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f5a:	781a      	ldrb	r2, [r3, #0]
 8004f5c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f60:	1c59      	adds	r1, r3, #1
 8004f62:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f66:	4618      	mov	r0, r3
 8004f68:	4947      	ldr	r1, [pc, #284]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004f6a:	2316      	movs	r3, #22
 8004f6c:	fb02 f303 	mul.w	r3, r2, r3
 8004f70:	4403      	add	r3, r0
 8004f72:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004f76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f7a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f7e:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
        sens_cfg[3].cfg.step_counter.peak_duration_min_running = step_counter_param_set[context_sel][index++];
 8004f82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f86:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f8a:	781a      	ldrb	r2, [r3, #0]
 8004f8c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f96:	4618      	mov	r0, r3
 8004f98:	493b      	ldr	r1, [pc, #236]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004f9a:	2316      	movs	r3, #22
 8004f9c:	fb02 f303 	mul.w	r3, r2, r3
 8004fa0:	4403      	add	r3, r0
 8004fa2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004fa6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004faa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004fae:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
        sens_cfg[3].cfg.step_counter.activity_detection_factor = step_counter_param_set[context_sel][index++];
 8004fb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fb6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004fba:	781a      	ldrb	r2, [r3, #0]
 8004fbc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004fc0:	1c59      	adds	r1, r3, #1
 8004fc2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	492f      	ldr	r1, [pc, #188]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004fca:	2316      	movs	r3, #22
 8004fcc:	fb02 f303 	mul.w	r3, r2, r3
 8004fd0:	4403      	add	r3, r0
 8004fd2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004fd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fda:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004fde:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
        sens_cfg[3].cfg.step_counter.activity_detection_thres = step_counter_param_set[context_sel][index++];
 8004fe2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fe6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004fea:	781a      	ldrb	r2, [r3, #0]
 8004fec:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ff0:	1c59      	adds	r1, r3, #1
 8004ff2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	4923      	ldr	r1, [pc, #140]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 8004ffa:	2316      	movs	r3, #22
 8004ffc:	fb02 f303 	mul.w	r3, r2, r3
 8005000:	4403      	add	r3, r0
 8005002:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005006:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800500a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800500e:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
        sens_cfg[3].cfg.step_counter.step_duration_max = step_counter_param_set[context_sel][index++];
 8005012:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005016:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800501a:	781a      	ldrb	r2, [r3, #0]
 800501c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005020:	1c59      	adds	r1, r3, #1
 8005022:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005026:	4618      	mov	r0, r3
 8005028:	4917      	ldr	r1, [pc, #92]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 800502a:	2316      	movs	r3, #22
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	4403      	add	r3, r0
 8005032:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005036:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800503a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800503e:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
        sens_cfg[3].cfg.step_counter.step_duration_window = step_counter_param_set[context_sel][index++];
 8005042:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005046:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800504a:	781a      	ldrb	r2, [r3, #0]
 800504c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005050:	1c59      	adds	r1, r3, #1
 8005052:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005056:	4618      	mov	r0, r3
 8005058:	490b      	ldr	r1, [pc, #44]	@ (8005088 <bmi323_context_switch_selection+0x7a8>)
 800505a:	2316      	movs	r3, #22
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	4403      	add	r3, r0
 8005062:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005066:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800506a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800506e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        sens_cfg[3].cfg.step_counter.step_duration_pp_enabled = step_counter_param_set[context_sel][index++];
 8005072:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005076:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005080:	1c59      	adds	r1, r3, #1
 8005082:	e003      	b.n	800508c <bmi323_context_switch_selection+0x7ac>
 8005084:	24000040 	.word	0x24000040
 8005088:	2400007c 	.word	0x2400007c
 800508c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005090:	4618      	mov	r0, r3
 8005092:	49e1      	ldr	r1, [pc, #900]	@ (8005418 <bmi323_context_switch_selection+0xb38>)
 8005094:	2316      	movs	r3, #22
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	4403      	add	r3, r0
 800509c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80050a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050a8:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        sens_cfg[3].cfg.step_counter.step_duration_thres = step_counter_param_set[context_sel][index++];
 80050ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050b0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80050ba:	1c59      	adds	r1, r3, #1
 80050bc:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80050c0:	4618      	mov	r0, r3
 80050c2:	49d5      	ldr	r1, [pc, #852]	@ (8005418 <bmi323_context_switch_selection+0xb38>)
 80050c4:	2316      	movs	r3, #22
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	4403      	add	r3, r0
 80050cc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80050d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
        sens_cfg[3].cfg.step_counter.mean_crossing_pp_enabled = step_counter_param_set[context_sel][index++];
 80050dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050e0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80050f0:	4618      	mov	r0, r3
 80050f2:	49c9      	ldr	r1, [pc, #804]	@ (8005418 <bmi323_context_switch_selection+0xb38>)
 80050f4:	2316      	movs	r3, #22
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	4403      	add	r3, r0
 80050fc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005100:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005104:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005108:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        sens_cfg[3].cfg.step_counter.mcr_threshold = step_counter_param_set[context_sel][index++];
 800510c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005110:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005120:	4618      	mov	r0, r3
 8005122:	49bd      	ldr	r1, [pc, #756]	@ (8005418 <bmi323_context_switch_selection+0xb38>)
 8005124:	2316      	movs	r3, #22
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	4403      	add	r3, r0
 800512c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005130:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005134:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005138:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
        sens_cfg[3].cfg.step_counter.sc_12_res = step_counter_param_set[context_sel][index++];
 800513c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005140:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800514a:	1c59      	adds	r1, r3, #1
 800514c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005150:	4618      	mov	r0, r3
 8005152:	49b1      	ldr	r1, [pc, #708]	@ (8005418 <bmi323_context_switch_selection+0xb38>)
 8005154:	2316      	movs	r3, #22
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	4403      	add	r3, r0
 800515c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005160:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005164:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005168:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6

        /* Set significant motion configuration */
        index = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[4].type = BMI323_SIG_MOTION;
 8005172:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005176:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800517a:	2202      	movs	r2, #2
 800517c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
        sens_cfg[4].cfg.sig_motion.block_size = sig_motion_param_set[context_sel][index++];
 8005180:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005184:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005194:	4618      	mov	r0, r3
 8005196:	49a1      	ldr	r1, [pc, #644]	@ (800541c <bmi323_context_switch_selection+0xb3c>)
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	4403      	add	r3, r0
 80051a0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80051a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80051ac:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        sens_cfg[4].cfg.sig_motion.peak_2_peak_min = sig_motion_param_set[context_sel][index++];
 80051b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051b4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80051be:	1c59      	adds	r1, r3, #1
 80051c0:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80051c4:	4618      	mov	r0, r3
 80051c6:	4995      	ldr	r1, [pc, #596]	@ (800541c <bmi323_context_switch_selection+0xb3c>)
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	4403      	add	r3, r0
 80051d0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80051d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80051dc:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
        sens_cfg[4].cfg.sig_motion.mcr_min = (uint8_t)sig_motion_param_set[context_sel][index++];
 80051e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051e4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80051e8:	781a      	ldrb	r2, [r3, #0]
 80051ea:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80051ee:	1c59      	adds	r1, r3, #1
 80051f0:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80051f4:	4618      	mov	r0, r3
 80051f6:	4989      	ldr	r1, [pc, #548]	@ (800541c <bmi323_context_switch_selection+0xb3c>)
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	4403      	add	r3, r0
 8005200:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005204:	b2da      	uxtb	r2, r3
 8005206:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800520a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800520e:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
        sens_cfg[4].cfg.sig_motion.peak_2_peak_max = sig_motion_param_set[context_sel][index++];
 8005212:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005216:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800521a:	781a      	ldrb	r2, [r3, #0]
 800521c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005220:	1c59      	adds	r1, r3, #1
 8005222:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005226:	4618      	mov	r0, r3
 8005228:	497c      	ldr	r1, [pc, #496]	@ (800541c <bmi323_context_switch_selection+0xb3c>)
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	4403      	add	r3, r0
 8005232:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005236:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800523a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800523e:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        sens_cfg[4].cfg.sig_motion.mcr_max = (uint8_t)sig_motion_param_set[context_sel][index++];
 8005242:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005246:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800524a:	781a      	ldrb	r2, [r3, #0]
 800524c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005250:	1c59      	adds	r1, r3, #1
 8005252:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005256:	4618      	mov	r0, r3
 8005258:	4970      	ldr	r1, [pc, #448]	@ (800541c <bmi323_context_switch_selection+0xb3c>)
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	4403      	add	r3, r0
 8005262:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800526c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005270:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

        /* Set orientation configuration */
        index = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[5].type = BMI323_ORIENTATION;
 800527a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800527e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005282:	2207      	movs	r2, #7
 8005284:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        sens_cfg[5].cfg.orientation.ud_en = (uint8_t)orientation_param_set[context_sel][index++];
 8005288:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800528c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800529c:	4618      	mov	r0, r3
 800529e:	4960      	ldr	r1, [pc, #384]	@ (8005420 <bmi323_context_switch_selection+0xb40>)
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	4403      	add	r3, r0
 80052a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80052b6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        sens_cfg[5].cfg.orientation.mode = (uint8_t)orientation_param_set[context_sel][index++];
 80052ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052be:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80052c8:	1c59      	adds	r1, r3, #1
 80052ca:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80052ce:	4618      	mov	r0, r3
 80052d0:	4953      	ldr	r1, [pc, #332]	@ (8005420 <bmi323_context_switch_selection+0xb40>)
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	4403      	add	r3, r0
 80052da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80052e8:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
        sens_cfg[5].cfg.orientation.blocking = (uint8_t)orientation_param_set[context_sel][index++];
 80052ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052f0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80052f4:	781a      	ldrb	r2, [r3, #0]
 80052f6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005300:	4618      	mov	r0, r3
 8005302:	4947      	ldr	r1, [pc, #284]	@ (8005420 <bmi323_context_switch_selection+0xb40>)
 8005304:	4613      	mov	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	4403      	add	r3, r0
 800530c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005316:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800531a:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        sens_cfg[5].cfg.orientation.theta = (uint8_t)orientation_param_set[context_sel][index++];
 800531e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005322:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005326:	781a      	ldrb	r2, [r3, #0]
 8005328:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800532c:	1c59      	adds	r1, r3, #1
 800532e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005332:	4618      	mov	r0, r3
 8005334:	493a      	ldr	r1, [pc, #232]	@ (8005420 <bmi323_context_switch_selection+0xb40>)
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	4403      	add	r3, r0
 800533e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005348:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800534c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        sens_cfg[5].cfg.orientation.hold_time = (uint8_t)orientation_param_set[context_sel][index++];
 8005350:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005354:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800535e:	1c59      	adds	r1, r3, #1
 8005360:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005364:	4618      	mov	r0, r3
 8005366:	492e      	ldr	r1, [pc, #184]	@ (8005420 <bmi323_context_switch_selection+0xb40>)
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	4403      	add	r3, r0
 8005370:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800537a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800537e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        sens_cfg[5].cfg.orientation.slope_thres = (uint8_t)orientation_param_set[context_sel][index++];
 8005382:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005386:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005390:	1c59      	adds	r1, r3, #1
 8005392:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005396:	4618      	mov	r0, r3
 8005398:	4921      	ldr	r1, [pc, #132]	@ (8005420 <bmi323_context_switch_selection+0xb40>)
 800539a:	4613      	mov	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	4403      	add	r3, r0
 80053a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80053b0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        sens_cfg[5].cfg.orientation.hysteresis = (uint8_t)orientation_param_set[context_sel][index++];
 80053b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053b8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80053bc:	781a      	ldrb	r2, [r3, #0]
 80053be:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80053c2:	1c59      	adds	r1, r3, #1
 80053c4:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80053c8:	4618      	mov	r0, r3
 80053ca:	4915      	ldr	r1, [pc, #84]	@ (8005420 <bmi323_context_switch_selection+0xb40>)
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	4403      	add	r3, r0
 80053d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053de:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80053e2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

        /* Set the context configurations */
        rslt = bmi323_set_sensor_config(sens_cfg, BMI323_MAX_FEATURE, dev);
 80053e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80053ee:	f107 0008 	add.w	r0, r7, #8
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	2106      	movs	r1, #6
 80053f6:	f7ff fa34 	bl	8004862 <bmi323_set_sensor_config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8005400:	e002      	b.n	8005408 <bmi323_context_switch_selection+0xb28>
    }
    else
    {
        rslt = BMI323_E_INVALID_CONTEXT_SEL;
 8005402:	23f3      	movs	r3, #243	@ 0xf3
 8005404:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    }

    return rslt;
 8005408:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 800540c:	4618      	mov	r0, r3
 800540e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	2400007c 	.word	0x2400007c
 800541c:	24000100 	.word	0x24000100
 8005420:	24000120 	.word	0x24000120

08005424 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <null_ptr_check+0x26>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <null_ptr_check+0x26>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <null_ptr_check+0x26>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <null_ptr_check+0x2c>
    {
        rslt = BMI323_E_NULL_PTR;
 800544a:	23ff      	movs	r3, #255	@ 0xff
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	e001      	b.n	8005454 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI323_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <accel_lsb_to_mps2_4g>:

float accel_lsb_to_mps2_2g(int16_t val) {
    return (val / 16384.0f) * GRAVITY_EARTH;
}

float accel_lsb_to_mps2_4g(int16_t val) {
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	80fb      	strh	r3, [r7, #6]
    return (val / 8192.0f) * GRAVITY_EARTH;
 800546e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800547a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8005498 <accel_lsb_to_mps2_4g+0x34>
 800547e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005482:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800549c <accel_lsb_to_mps2_4g+0x38>
 8005486:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800548a:	eeb0 0a67 	vmov.f32	s0, s15
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	46000000 	.word	0x46000000
 800549c:	411ce80a 	.word	0x411ce80a

080054a0 <gyro_lsb_to_dps_2000>:

float gyro_lsb_to_dps_1000(int16_t val) {
    return val / 32.8f;
}

float gyro_lsb_to_dps_2000(int16_t val) {
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	80fb      	strh	r3, [r7, #6]
    return val / 16.4f;
 80054aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054b6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80054d0 <gyro_lsb_to_dps_2000+0x30>
 80054ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80054be:	eef0 7a66 	vmov.f32	s15, s13
}
 80054c2:	eeb0 0a67 	vmov.f32	s0, s15
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	41833333 	.word	0x41833333

080054d4 <bmi3_interface_init>:

int8_t bmi3_interface_init(struct bmi3_dev *bmi, uint8_t intf)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMI3_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	73fb      	strb	r3, [r7, #15]

	/* Bus configuration : I2C */
	if (intf == BMI3_I2C_INTF)
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d10f      	bne.n	800550a <bmi3_interface_init+0x36>
	{
		printf("I2C Interface \n");
 80054ea:	4817      	ldr	r0, [pc, #92]	@ (8005548 <bmi3_interface_init+0x74>)
 80054ec:	f013 f826 	bl	801853c <puts>

		/* To initialize the user I2C function */
		bmi323_dev_addr = BMI3_ADDR_I2C_SEC;
 80054f0:	4b16      	ldr	r3, [pc, #88]	@ (800554c <bmi3_interface_init+0x78>)
 80054f2:	2269      	movs	r2, #105	@ 0x69
 80054f4:	701a      	strb	r2, [r3, #0]
		bmi->intf = BMI3_I2C_INTF;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	725a      	strb	r2, [r3, #9]
		bmi->read = (bmi3_read_fptr_t)BMI323_SensorAPI_I2Cx_Read;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a14      	ldr	r2, [pc, #80]	@ (8005550 <bmi3_interface_init+0x7c>)
 8005500:	611a      	str	r2, [r3, #16]
		bmi->write = (bmi3_write_fptr_t)BMI323_SensorAPI_I2Cx_Write;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a13      	ldr	r2, [pc, #76]	@ (8005554 <bmi3_interface_init+0x80>)
 8005506:	615a      	str	r2, [r3, #20]
 8005508:	e00e      	b.n	8005528 <bmi3_interface_init+0x54>
	}
	/* Bus configuration : SPI */
	else if (intf == BMI3_SPI_INTF)
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10b      	bne.n	8005528 <bmi3_interface_init+0x54>
	{
		printf("SPI Interface \n");
 8005510:	4811      	ldr	r0, [pc, #68]	@ (8005558 <bmi3_interface_init+0x84>)
 8005512:	f013 f813 	bl	801853c <puts>
		bmi->intf = BMI3_SPI_INTF;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	725a      	strb	r2, [r3, #9]
		bmi->read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a0f      	ldr	r2, [pc, #60]	@ (800555c <bmi3_interface_init+0x88>)
 8005520:	611a      	str	r2, [r3, #16]
		bmi->write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a0e      	ldr	r2, [pc, #56]	@ (8005560 <bmi3_interface_init+0x8c>)
 8005526:	615a      	str	r2, [r3, #20]
	}


	/* Assign device address to interface pointer */
	bmi->intf_ptr = &bmi323_dev_addr;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a08      	ldr	r2, [pc, #32]	@ (800554c <bmi3_interface_init+0x78>)
 800552c:	605a      	str	r2, [r3, #4]

	/* Configure delay in microseconds */
	bmi->delay_us = bst_delay_us;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a0c      	ldr	r2, [pc, #48]	@ (8005564 <bmi3_interface_init+0x90>)
 8005532:	619a      	str	r2, [r3, #24]

	/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
	bmi->read_write_len = READ_WRITE_LEN;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	81da      	strh	r2, [r3, #14]

	return rslt;
 800553a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	0801bc64 	.word	0x0801bc64
 800554c:	2400036c 	.word	0x2400036c
 8005550:	08005b9d 	.word	0x08005b9d
 8005554:	08005c09 	.word	0x08005c09
 8005558:	0801bc74 	.word	0x0801bc74
 800555c:	08005c65 	.word	0x08005c65
 8005560:	08005ce5 	.word	0x08005ce5
 8005564:	08005b55 	.word	0x08005b55

08005568 <Init_BMI323>:

int8_t Init_BMI323()
{ // START INIT
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	71fb      	strb	r3, [r7, #7]
	uint8_t chipid;


	rslt = bmi3_interface_init(dev, BMI3_SPI_INTF);
 8005572:	4b32      	ldr	r3, [pc, #200]	@ (800563c <Init_BMI323+0xd4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ffab 	bl	80054d4 <bmi3_interface_init>
 800557e:	4603      	mov	r3, r0
 8005580:	71fb      	strb	r3, [r7, #7]

	printf("bmi3_interface_init : %d \n",rslt);
 8005582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005586:	4619      	mov	r1, r3
 8005588:	482d      	ldr	r0, [pc, #180]	@ (8005640 <Init_BMI323+0xd8>)
 800558a:	f012 ff6f 	bl	801846c <iprintf>

	//bmi3_soft_reset(dev);
	//HAL_Delay(100);
	bst_delay_us(100000, dev->intf_ptr);
 800558e:	4b2b      	ldr	r3, [pc, #172]	@ (800563c <Init_BMI323+0xd4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4619      	mov	r1, r3
 8005596:	482b      	ldr	r0, [pc, #172]	@ (8005644 <Init_BMI323+0xdc>)
 8005598:	f000 fadc 	bl	8005b54 <bst_delay_us>

	/* Initialize bmi323. */
	rslt = bmi323_init(dev);
 800559c:	4b27      	ldr	r3, [pc, #156]	@ (800563c <Init_BMI323+0xd4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff f917 	bl	80047d4 <bmi323_init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	71fb      	strb	r3, [r7, #7]
	printf("bmi323_init: %d \n",rslt);
 80055aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ae:	4619      	mov	r1, r3
 80055b0:	4825      	ldr	r0, [pc, #148]	@ (8005648 <Init_BMI323+0xe0>)
 80055b2:	f012 ff5b 	bl	801846c <iprintf>

	if (rslt != BMI3_OK)
 80055b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <Init_BMI323+0x68>
	{
		printf("bmi323_init() failed, error code: %d\r\n", rslt);
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	4619      	mov	r1, r3
 80055c4:	4821      	ldr	r0, [pc, #132]	@ (800564c <Init_BMI323+0xe4>)
 80055c6:	f012 ff51 	bl	801846c <iprintf>
		return rslt;
 80055ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ce:	e030      	b.n	8005632 <Init_BMI323+0xca>
	}
	else
	{
		printf("BMI323 initialized successfully\r\n");
 80055d0:	481f      	ldr	r0, [pc, #124]	@ (8005650 <Init_BMI323+0xe8>)
 80055d2:	f012 ffb3 	bl	801853c <puts>
	}

	rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, &chipid, 1, dev);
 80055d6:	4b19      	ldr	r3, [pc, #100]	@ (800563c <Init_BMI323+0xd4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	1db9      	adds	r1, r7, #6
 80055dc:	2201      	movs	r2, #1
 80055de:	2000      	movs	r0, #0
 80055e0:	f7fb faac 	bl	8000b3c <bmi3_get_regs>
 80055e4:	4603      	mov	r3, r0
 80055e6:	71fb      	strb	r3, [r7, #7]
	if (rslt != BMI3_OK)
 80055e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <Init_BMI323+0x9a>
	{
		printf("read chip ID failed, error code: %d\r\n", rslt);
 80055f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f4:	4619      	mov	r1, r3
 80055f6:	4817      	ldr	r0, [pc, #92]	@ (8005654 <Init_BMI323+0xec>)
 80055f8:	f012 ff38 	bl	801846c <iprintf>
		return rslt;
 80055fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005600:	e017      	b.n	8005632 <Init_BMI323+0xca>
	}

	printf("Chip ID:0x%02x\r\n", chipid);
 8005602:	79bb      	ldrb	r3, [r7, #6]
 8005604:	4619      	mov	r1, r3
 8005606:	4814      	ldr	r0, [pc, #80]	@ (8005658 <Init_BMI323+0xf0>)
 8005608:	f012 ff30 	bl	801846c <iprintf>
	printf("Result of self-test error is %d\n", st_result_status.self_test_err_rslt);
	printf("Result of ST_result is %d\n", st_result_status.self_test_rslt);
#endif

	#if defined(ACC_GYRO)
	Open_BMI323_ACC(dev);
 800560c:	4b0b      	ldr	r3, [pc, #44]	@ (800563c <Init_BMI323+0xd4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 f823 	bl	800565c <Open_BMI323_ACC>
	Open_BMI323_GYRO(dev);
 8005616:	4b09      	ldr	r3, [pc, #36]	@ (800563c <Init_BMI323+0xd4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f89e 	bl	800575c <Open_BMI323_GYRO>
	#endif

	#if defined(FIFO_POLL)
	Open_BMI323_FIFO(dev);
	#elif defined(FIFO_WM_INT)
	Open_BMI323_FIFO(dev);
 8005620:	4b06      	ldr	r3, [pc, #24]	@ (800563c <Init_BMI323+0xd4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 f917 	bl	8005858 <Open_BMI323_FIFO>
	Enable_MCU_INT2_Pin();
 800562a:	f000 fa25 	bl	8005a78 <Enable_MCU_INT2_Pin>

	#if !defined(FIFO_WM_INT)
	Disable_MCU_INT2_Pin();
	#endif

	return rslt;
 800562e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	2400014c 	.word	0x2400014c
 8005640:	0801bc84 	.word	0x0801bc84
 8005644:	000186a0 	.word	0x000186a0
 8005648:	0801bca0 	.word	0x0801bca0
 800564c:	0801bcb4 	.word	0x0801bcb4
 8005650:	0801bcdc 	.word	0x0801bcdc
 8005654:	0801bd00 	.word	0x0801bd00
 8005658:	0801bd28 	.word	0x0801bd28

0800565c <Open_BMI323_ACC>:

int8_t Open_BMI323_ACC()
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08c      	sub	sp, #48	@ 0x30
 8005660:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8005668:	463b      	mov	r3, r7
 800566a:	222e      	movs	r2, #46	@ 0x2e
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f013 f864 	bl	801873c <memset>

	config.type = BMI3_ACCEL;
 8005674:	2300      	movs	r3, #0
 8005676:	703b      	strb	r3, [r7, #0]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005678:	4b2f      	ldr	r3, [pc, #188]	@ (8005738 <Open_BMI323_ACC+0xdc>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	463b      	mov	r3, r7
 800567e:	2101      	movs	r1, #1
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff f903 	bl	800488c <bmi323_get_sensor_config>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (rslt == BMI3_OK)
 800568c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005690:	2b00      	cmp	r3, #0
 8005692:	d14b      	bne.n	800572c <Open_BMI323_ACC+0xd0>
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_LOW_PWR;
	#else
		/* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
		config.cfg.acc.bwp = BMI3_ACC_BW_ODR_HALF;
 8005694:	2300      	movs	r3, #0
 8005696:	70fb      	strb	r3, [r7, #3]

		/* Set number of average samples for accel. */
		config.cfg.acc.avg_num = BMI3_ACC_AVG4;
 8005698:	2302      	movs	r3, #2
 800569a:	71bb      	strb	r3, [r7, #6]

		/* Enable the accel mode where averaging of samples
		* will be done based on above set bandwidth and ODR.
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_HIGH_PERF;
 800569c:	2307      	movs	r3, #7
 800569e:	713b      	strb	r3, [r7, #4]
	#endif


		config.cfg.acc.odr      = BMI3_ACC_ODR_50HZ;
 80056a0:	2307      	movs	r3, #7
 80056a2:	70bb      	strb	r3, [r7, #2]

		/* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
		config.cfg.acc.range     = BMI3_ACC_RANGE_4G;
 80056a4:	2301      	movs	r3, #1
 80056a6:	717b      	strb	r3, [r7, #5]

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80056a8:	4b23      	ldr	r3, [pc, #140]	@ (8005738 <Open_BMI323_ACC+0xdc>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	463b      	mov	r3, r7
 80056ae:	2101      	movs	r1, #1
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f8d6 	bl	8004862 <bmi323_set_sensor_config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (rslt != BMI3_OK)
 80056bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d006      	beq.n	80056d2 <Open_BMI323_ACC+0x76>
		{
			printf("Open ACC failed, rslt=%d\r\n", rslt);
 80056c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80056c8:	4619      	mov	r1, r3
 80056ca:	481c      	ldr	r0, [pc, #112]	@ (800573c <Open_BMI323_ACC+0xe0>)
 80056cc:	f012 fece 	bl	801846c <iprintf>
 80056d0:	e02c      	b.n	800572c <Open_BMI323_ACC+0xd0>
		}
		else
		{
			printf("Open ACC set successfully\r\n");
 80056d2:	481b      	ldr	r0, [pc, #108]	@ (8005740 <Open_BMI323_ACC+0xe4>)
 80056d4:	f012 ff32 	bl	801853c <puts>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 80056d8:	4b17      	ldr	r3, [pc, #92]	@ (8005738 <Open_BMI323_ACC+0xdc>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	463b      	mov	r3, r7
 80056de:	2101      	movs	r1, #1
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff f8d3 	bl	800488c <bmi323_get_sensor_config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (rslt == BMI3_OK)
 80056ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d11b      	bne.n	800572c <Open_BMI323_ACC+0xd0>
			{
				printf("Get ACC configuration successful\r\n");
 80056f4:	4813      	ldr	r0, [pc, #76]	@ (8005744 <Open_BMI323_ACC+0xe8>)
 80056f6:	f012 ff21 	bl	801853c <puts>
				printf("acc_mode = %d\r\n", config.cfg.acc.acc_mode);
 80056fa:	793b      	ldrb	r3, [r7, #4]
 80056fc:	4619      	mov	r1, r3
 80056fe:	4812      	ldr	r0, [pc, #72]	@ (8005748 <Open_BMI323_ACC+0xec>)
 8005700:	f012 feb4 	bl	801846c <iprintf>
				printf("bwp = %d\r\n", config.cfg.acc.bwp);
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	4619      	mov	r1, r3
 8005708:	4810      	ldr	r0, [pc, #64]	@ (800574c <Open_BMI323_ACC+0xf0>)
 800570a:	f012 feaf 	bl	801846c <iprintf>
				printf("odr = %d\r\n", config.cfg.acc.odr);
 800570e:	78bb      	ldrb	r3, [r7, #2]
 8005710:	4619      	mov	r1, r3
 8005712:	480f      	ldr	r0, [pc, #60]	@ (8005750 <Open_BMI323_ACC+0xf4>)
 8005714:	f012 feaa 	bl	801846c <iprintf>
				printf("Range = %d\r\n", config.cfg.acc.range);
 8005718:	797b      	ldrb	r3, [r7, #5]
 800571a:	4619      	mov	r1, r3
 800571c:	480d      	ldr	r0, [pc, #52]	@ (8005754 <Open_BMI323_ACC+0xf8>)
 800571e:	f012 fea5 	bl	801846c <iprintf>
				printf("avg_num = %d\r\n", config.cfg.acc.avg_num);
 8005722:	79bb      	ldrb	r3, [r7, #6]
 8005724:	4619      	mov	r1, r3
 8005726:	480c      	ldr	r0, [pc, #48]	@ (8005758 <Open_BMI323_ACC+0xfc>)
 8005728:	f012 fea0 	bl	801846c <iprintf>
			}
		}
	}

	return rslt;
 800572c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005730:	4618      	mov	r0, r3
 8005732:	3730      	adds	r7, #48	@ 0x30
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	2400014c 	.word	0x2400014c
 800573c:	0801bd3c 	.word	0x0801bd3c
 8005740:	0801bd58 	.word	0x0801bd58
 8005744:	0801bd74 	.word	0x0801bd74
 8005748:	0801bd98 	.word	0x0801bd98
 800574c:	0801bda8 	.word	0x0801bda8
 8005750:	0801bdb4 	.word	0x0801bdb4
 8005754:	0801bdc0 	.word	0x0801bdc0
 8005758:	0801bdd0 	.word	0x0801bdd0

0800575c <Open_BMI323_GYRO>:

	return rslt;
}

int8_t Open_BMI323_GYRO()
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	@ 0x30
 8005760:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8005768:	463b      	mov	r3, r7
 800576a:	222e      	movs	r2, #46	@ 0x2e
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f012 ffe4 	bl	801873c <memset>

	config.type = BMI3_GYRO;
 8005774:	2301      	movs	r3, #1
 8005776:	703b      	strb	r3, [r7, #0]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005778:	4b2e      	ldr	r3, [pc, #184]	@ (8005834 <Open_BMI323_GYRO+0xd8>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	463b      	mov	r3, r7
 800577e:	2101      	movs	r1, #1
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff f883 	bl	800488c <bmi323_get_sensor_config>
 8005786:	4603      	mov	r3, r0
 8005788:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (rslt == BMI3_OK)
 800578c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005790:	2b00      	cmp	r3, #0
 8005792:	d148      	bne.n	8005826 <Open_BMI323_GYRO+0xca>
	{
		config.cfg.gyr.odr = BMI3_GYR_ODR_50HZ;
 8005794:	2307      	movs	r3, #7
 8005796:	70bb      	strb	r3, [r7, #2]
		/* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
		config.cfg.gyr.range = BMI3_GYR_RANGE_2000DPS;
 8005798:	2304      	movs	r3, #4
 800579a:	717b      	strb	r3, [r7, #5]
		/*	The Gyroscope bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR
		*	Value	Name	  Description
		*	  0   odr_half	 BW = gyr_odr/2
		*	  1  odr_quarter BW = gyr_odr/4
		*/
		config.cfg.gyr.bwp = BMI3_GYR_BW_ODR_HALF;
 800579c:	2300      	movs	r3, #0
 800579e:	70fb      	strb	r3, [r7, #3]
		/* By default the gyro is disabled. Gyro is enabled by selecting the mode. */
		config.cfg.gyr.gyr_mode = BMI3_GYR_MODE_HIGH_PERF;
 80057a0:	2307      	movs	r3, #7
 80057a2:	713b      	strb	r3, [r7, #4]
		*  011     avg_8   Averaging of 8 samples
		*  100     avg_16  Averaging of 16 samples
		*  101     avg_32  Averaging of 32 samples
		*  110     avg_64  Averaging of 64 samples
		*/
		config.cfg.gyr.avg_num = BMI3_GYR_AVG4;
 80057a4:	2302      	movs	r3, #2
 80057a6:	71bb      	strb	r3, [r7, #6]
	#endif

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80057a8:	4b22      	ldr	r3, [pc, #136]	@ (8005834 <Open_BMI323_GYRO+0xd8>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	463b      	mov	r3, r7
 80057ae:	2101      	movs	r1, #1
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff f856 	bl	8004862 <bmi323_set_sensor_config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (rslt != BMI3_OK)
 80057bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <Open_BMI323_GYRO+0x70>
		{
			printf("Open GYRO failed\r\n");
 80057c4:	481c      	ldr	r0, [pc, #112]	@ (8005838 <Open_BMI323_GYRO+0xdc>)
 80057c6:	f012 feb9 	bl	801853c <puts>
 80057ca:	e02c      	b.n	8005826 <Open_BMI323_GYRO+0xca>
		}
		else
		{
			printf("Open GYRO successfully\r\n");
 80057cc:	481b      	ldr	r0, [pc, #108]	@ (800583c <Open_BMI323_GYRO+0xe0>)
 80057ce:	f012 feb5 	bl	801853c <puts>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 80057d2:	4b18      	ldr	r3, [pc, #96]	@ (8005834 <Open_BMI323_GYRO+0xd8>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	463b      	mov	r3, r7
 80057d8:	2101      	movs	r1, #1
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff f856 	bl	800488c <bmi323_get_sensor_config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (rslt == BMI3_OK)
 80057e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d11b      	bne.n	8005826 <Open_BMI323_GYRO+0xca>
			{
				printf("Get BMI2_GYRO Configuration successful\r\n");
 80057ee:	4814      	ldr	r0, [pc, #80]	@ (8005840 <Open_BMI323_GYRO+0xe4>)
 80057f0:	f012 fea4 	bl	801853c <puts>
				printf("gyr_mode = %d\r\n", config.cfg.gyr.gyr_mode);
 80057f4:	793b      	ldrb	r3, [r7, #4]
 80057f6:	4619      	mov	r1, r3
 80057f8:	4812      	ldr	r0, [pc, #72]	@ (8005844 <Open_BMI323_GYRO+0xe8>)
 80057fa:	f012 fe37 	bl	801846c <iprintf>
				printf("ODR = %d\r\n", config.cfg.gyr.odr);
 80057fe:	78bb      	ldrb	r3, [r7, #2]
 8005800:	4619      	mov	r1, r3
 8005802:	4811      	ldr	r0, [pc, #68]	@ (8005848 <Open_BMI323_GYRO+0xec>)
 8005804:	f012 fe32 	bl	801846c <iprintf>
				printf("Range = %d\r\n", config.cfg.gyr.range);
 8005808:	797b      	ldrb	r3, [r7, #5]
 800580a:	4619      	mov	r1, r3
 800580c:	480f      	ldr	r0, [pc, #60]	@ (800584c <Open_BMI323_GYRO+0xf0>)
 800580e:	f012 fe2d 	bl	801846c <iprintf>
				printf("bwp = %d\r\n", config.cfg.gyr.bwp);
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	4619      	mov	r1, r3
 8005816:	480e      	ldr	r0, [pc, #56]	@ (8005850 <Open_BMI323_GYRO+0xf4>)
 8005818:	f012 fe28 	bl	801846c <iprintf>
				printf("avg_num = %d\r\n", config.cfg.gyr.avg_num);
 800581c:	79bb      	ldrb	r3, [r7, #6]
 800581e:	4619      	mov	r1, r3
 8005820:	480c      	ldr	r0, [pc, #48]	@ (8005854 <Open_BMI323_GYRO+0xf8>)
 8005822:	f012 fe23 	bl	801846c <iprintf>
			}
		}
	}

	return rslt;
 8005826:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800582a:	4618      	mov	r0, r3
 800582c:	3730      	adds	r7, #48	@ 0x30
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	2400014c 	.word	0x2400014c
 8005838:	0801be2c 	.word	0x0801be2c
 800583c:	0801be40 	.word	0x0801be40
 8005840:	0801be58 	.word	0x0801be58
 8005844:	0801be80 	.word	0x0801be80
 8005848:	0801be90 	.word	0x0801be90
 800584c:	0801bdc0 	.word	0x0801bdc0
 8005850:	0801bda8 	.word	0x0801bda8
 8005854:	0801bdd0 	.word	0x0801bdd0

08005858 <Open_BMI323_FIFO>:

	return rslt;
}

int8_t Open_BMI323_FIFO()
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	@ 0x28
 800585c:	af02      	add	r7, sp, #8
	int8_t rslt = BMI3_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	77fb      	strb	r3, [r7, #31]

	#if defined(FIFO_WM_INT)
	struct bmi3_int_pin_config int_cfg;
	struct bmi3_map_int map_int = { 0 };
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	60da      	str	r2, [r3, #12]
	#endif
	/* Array to define set FIFO flush */
    	uint8_t data[2] = { BMI323_ENABLE, 0 };
 800586e:	2301      	movs	r3, #1
 8005870:	803b      	strh	r3, [r7, #0]

	/* Set the FIFO flush in FIFO control register to clear the FIFO data */
    	rslt = bmi323_set_regs(BMI3_REG_FIFO_CTRL, data, 2, dev);
 8005872:	4b3c      	ldr	r3, [pc, #240]	@ (8005964 <Open_BMI323_FIFO+0x10c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4639      	mov	r1, r7
 8005878:	2202      	movs	r2, #2
 800587a:	2037      	movs	r0, #55	@ 0x37
 800587c:	f7fe ffda 	bl	8004834 <bmi323_set_regs>
 8005880:	4603      	mov	r3, r0
 8005882:	77fb      	strb	r3, [r7, #31]
    	printf("bmi323_set_regs: %d \n", rslt);
 8005884:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005888:	4619      	mov	r1, r3
 800588a:	4837      	ldr	r0, [pc, #220]	@ (8005968 <Open_BMI323_FIFO+0x110>)
 800588c:	f012 fdee 	bl	801846c <iprintf>

	/* Clear FIFO configuration register */
	rslt = bmi3_set_fifo_config(BMI3_FIFO_ALL_EN, BMI3_DISABLE, dev);
 8005890:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <Open_BMI323_FIFO+0x10c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	2100      	movs	r1, #0
 8005898:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800589c:	f7fc f843 	bl	8001926 <bmi3_set_fifo_config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	77fb      	strb	r3, [r7, #31]
	printf("bmi323_set_fifo_config: %d \n", rslt);
 80058a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058a8:	4619      	mov	r1, r3
 80058aa:	4830      	ldr	r0, [pc, #192]	@ (800596c <Open_BMI323_FIFO+0x114>)
 80058ac:	f012 fdde 	bl	801846c <iprintf>

	/*Example: 100Hz ODR, read data per second*/
	/* Set FIFO configuration by enabling accelerometer and gyroscope*/
	printf("FIFO Header is disabled\r\n");
 80058b0:	482f      	ldr	r0, [pc, #188]	@ (8005970 <Open_BMI323_FIFO+0x118>)
 80058b2:	f012 fe43 	bl	801853c <puts>
			printf("bmi3_set_fifo_wm error, error code: %d\r\n", rslt);
		}
		rslt = bmi3_set_fifo_config(BMI3_FIFO_GYR_EN , BMI3_ENABLE, dev);
		#elif defined(ACC_GYRO)
		/* Set the water-mark level */
		rslt = bmi3_set_fifo_wm(300, dev);//12*50=600, 100HZ ODR, read data every second
 80058b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005964 <Open_BMI323_FIFO+0x10c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4619      	mov	r1, r3
 80058bc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80058c0:	f7fc f80e 	bl	80018e0 <bmi3_set_fifo_wm>
 80058c4:	4603      	mov	r3, r0
 80058c6:	77fb      	strb	r3, [r7, #31]
		if (rslt != BMI3_OK)
 80058c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <Open_BMI323_FIFO+0x84>
		{
			printf("bmi3_set_fifo_wm error, error code: %d\r\n", rslt);
 80058d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058d4:	4619      	mov	r1, r3
 80058d6:	4827      	ldr	r0, [pc, #156]	@ (8005974 <Open_BMI323_FIFO+0x11c>)
 80058d8:	f012 fdc8 	bl	801846c <iprintf>
		}
		rslt = bmi3_set_fifo_config(BMI3_FIFO_ACC_EN | BMI3_FIFO_GYR_EN , BMI3_ENABLE, dev);
 80058dc:	4b21      	ldr	r3, [pc, #132]	@ (8005964 <Open_BMI323_FIFO+0x10c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	2101      	movs	r1, #1
 80058e4:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80058e8:	f7fc f81d 	bl	8001926 <bmi3_set_fifo_config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	77fb      	strb	r3, [r7, #31]
		#endif
		if (rslt != BMI3_OK)
 80058f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <Open_BMI323_FIFO+0xa6>
		{
			printf("Set fifo config failed\r\n");
 80058f8:	481f      	ldr	r0, [pc, #124]	@ (8005978 <Open_BMI323_FIFO+0x120>)
 80058fa:	f012 fe1f 	bl	801853c <puts>
		}
	#endif

	#if defined(FIFO_WM_INT)
	bmi3_get_int_pin_config(&int_cfg, dev);
 80058fe:	4b19      	ldr	r3, [pc, #100]	@ (8005964 <Open_BMI323_FIFO+0x10c>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	f107 0314 	add.w	r3, r7, #20
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7fb ff81 	bl	8001810 <bmi3_get_int_pin_config>

	int_cfg.pin_type = BMI3_INT2;
 800590e:	2302      	movs	r3, #2
 8005910:	753b      	strb	r3, [r7, #20]
	int_cfg.pin_cfg[1].lvl = BMI3_INT_ACTIVE_HIGH;
 8005912:	2301      	movs	r3, #1
 8005914:	767b      	strb	r3, [r7, #25]
	int_cfg.pin_cfg[1].od = BMI3_INT_PUSH_PULL;;
 8005916:	2300      	movs	r3, #0
 8005918:	76bb      	strb	r3, [r7, #26]
	int_cfg.pin_cfg[1].output_en= BMI3_INT_OUTPUT_ENABLE;
 800591a:	2301      	movs	r3, #1
 800591c:	76fb      	strb	r3, [r7, #27]

	bmi3_set_int_pin_config(&int_cfg, dev);
 800591e:	4b11      	ldr	r3, [pc, #68]	@ (8005964 <Open_BMI323_FIFO+0x10c>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	f107 0314 	add.w	r3, r7, #20
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f7fb fe9f 	bl	800166c <bmi3_set_int_pin_config>

	/* Map the FIFO water-mark interrupt to INT1 */
	/* Note: User can map the interrupt to INT1 or INT2 */
	map_int.fifo_watermark_int = BMI3_INT2;
 800592e:	2302      	movs	r3, #2
 8005930:	74bb      	strb	r3, [r7, #18]

	/* Map the interrupt configuration */
	rslt = bmi323_map_interrupt(map_int, dev);
 8005932:	4b0c      	ldr	r3, [pc, #48]	@ (8005964 <Open_BMI323_FIFO+0x10c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800593c:	f7fe ffbb 	bl	80048b6 <bmi323_map_interrupt>
 8005940:	4603      	mov	r3, r0
 8005942:	77fb      	strb	r3, [r7, #31]
	printf("bmi323_map_interrupt: %d \n", rslt);
 8005944:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005948:	4619      	mov	r1, r3
 800594a:	480c      	ldr	r0, [pc, #48]	@ (800597c <Open_BMI323_FIFO+0x124>)
 800594c:	f012 fd8e 	bl	801846c <iprintf>
	#endif

	/* Update FIFO structure */
	fifoframe.data = fifo_data;
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <Open_BMI323_FIFO+0x128>)
 8005952:	4a0c      	ldr	r2, [pc, #48]	@ (8005984 <Open_BMI323_FIFO+0x12c>)
 8005954:	601a      	str	r2, [r3, #0]

	return rslt;
 8005956:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	2400014c 	.word	0x2400014c
 8005968:	0801bef0 	.word	0x0801bef0
 800596c:	0801bf08 	.word	0x0801bf08
 8005970:	0801bf28 	.word	0x0801bf28
 8005974:	0801bf44 	.word	0x0801bf44
 8005978:	0801bf70 	.word	0x0801bf70
 800597c:	0801bf88 	.word	0x0801bf88
 8005980:	24000b70 	.word	0x24000b70
 8005984:	24000370 	.word	0x24000370

08005988 <bmi323_data_poll>:
}



// Function to get and return the sensor data
IMU_6_Axis_Data bmi323_data_poll() {
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	b094      	sub	sp, #80	@ 0x50
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
    IMU_6_Axis_Data imu_data = {0};
 8005990:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	609a      	str	r2, [r3, #8]
 800599c:	60da      	str	r2, [r3, #12]
 800599e:	611a      	str	r2, [r3, #16]
 80059a0:	615a      	str	r2, [r3, #20]
    struct bmi3_sensor_data sensor_data[2];

    // Set the types of data we want to read
    sensor_data[0].type = BMI3_ACCEL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	733b      	strb	r3, [r7, #12]
    sensor_data[1].type = BMI3_GYRO;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3020 	strb.w	r3, [r7, #32]

    // Get the sensor data
    int8_t rslt = bmi3_get_sensor_data(sensor_data, 2, dev);
 80059ac:	4b30      	ldr	r3, [pc, #192]	@ (8005a70 <bmi323_data_poll+0xe8>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	f107 030c 	add.w	r3, r7, #12
 80059b4:	2102      	movs	r1, #2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fb fd80 	bl	80014bc <bmi3_get_sensor_data>
 80059bc:	4603      	mov	r3, r0
 80059be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (rslt == BMI3_OK) {
 80059c2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d13d      	bne.n	8005a46 <bmi323_data_poll+0xbe>
        // Use the appropriate conversion functions
        // Replace these with the actual functions based on your configuration

        // Fill accelerometer data
        if (sensor_data[0].type == BMI3_ACCEL) {
 80059ca:	7b3b      	ldrb	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d11a      	bne.n	8005a06 <bmi323_data_poll+0x7e>
            imu_data.acceleration[0] = accel_lsb_to_mps2_4g(sensor_data[0].sens_data.acc.x);  // Assuming ±4g range
 80059d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fd45 	bl	8005464 <accel_lsb_to_mps2_4g>
 80059da:	eef0 7a40 	vmov.f32	s15, s0
 80059de:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            imu_data.acceleration[1] = accel_lsb_to_mps2_4g(sensor_data[0].sens_data.acc.y);  // Assuming ±4g range
 80059e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fd3c 	bl	8005464 <accel_lsb_to_mps2_4g>
 80059ec:	eef0 7a40 	vmov.f32	s15, s0
 80059f0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            imu_data.acceleration[2] = accel_lsb_to_mps2_4g(sensor_data[0].sens_data.acc.z);  // Assuming ±4g range
 80059f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fd33 	bl	8005464 <accel_lsb_to_mps2_4g>
 80059fe:	eef0 7a40 	vmov.f32	s15, s0
 8005a02:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        }

        // Fill gyroscope data
        if (sensor_data[1].type == BMI3_GYRO) {
 8005a06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d121      	bne.n	8005a52 <bmi323_data_poll+0xca>
            imu_data.gyroscope[0] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.x);  // Assuming ±2000°/s range
 8005a0e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fd44 	bl	80054a0 <gyro_lsb_to_dps_2000>
 8005a18:	eef0 7a40 	vmov.f32	s15, s0
 8005a1c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            imu_data.gyroscope[1] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.y);  // Assuming ±2000°/s range
 8005a20:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fd3b 	bl	80054a0 <gyro_lsb_to_dps_2000>
 8005a2a:	eef0 7a40 	vmov.f32	s15, s0
 8005a2e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            imu_data.gyroscope[2] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.z);  // Assuming ±2000°/s range
 8005a32:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fd32 	bl	80054a0 <gyro_lsb_to_dps_2000>
 8005a3c:	eef0 7a40 	vmov.f32	s15, s0
 8005a40:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8005a44:	e005      	b.n	8005a52 <bmi323_data_poll+0xca>
        }
    } else {
        printf("Failed to get sensor data. Error code: %d\n", rslt);
 8005a46:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4809      	ldr	r0, [pc, #36]	@ (8005a74 <bmi323_data_poll+0xec>)
 8005a4e:	f012 fd0d 	bl	801846c <iprintf>
    }

    return imu_data;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	461d      	mov	r5, r3
 8005a56:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8005a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a62:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	3750      	adds	r7, #80	@ 0x50
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	2400014c 	.word	0x2400014c
 8005a74:	0801c138 	.word	0x0801c138

08005a78 <Enable_MCU_INT2_Pin>:
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
}

void Enable_MCU_INT2_Pin(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a7e:	1d3b      	adds	r3, r7, #4
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	609a      	str	r2, [r3, #8]
 8005a88:	60da      	str	r2, [r3, #12]
 8005a8a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005a8c:	4b13      	ldr	r3, [pc, #76]	@ (8005adc <Enable_MCU_INT2_Pin+0x64>)
 8005a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a92:	4a12      	ldr	r2, [pc, #72]	@ (8005adc <Enable_MCU_INT2_Pin+0x64>)
 8005a94:	f043 0301 	orr.w	r3, r3, #1
 8005a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005adc <Enable_MCU_INT2_Pin+0x64>)
 8005a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
	
	/*Configure GPIO pin : INT1_Pin PA10*/
	GPIO_InitStruct.Pin = INT1_Pin;
 8005aaa:	2308      	movs	r3, #8
 8005aac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005aae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005ab2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	4619      	mov	r1, r3
 8005abc:	4808      	ldr	r0, [pc, #32]	@ (8005ae0 <Enable_MCU_INT2_Pin+0x68>)
 8005abe:	f005 fab7 	bl	800b030 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2105      	movs	r1, #5
 8005ac6:	200a      	movs	r0, #10
 8005ac8:	f004 fc93 	bl	800a3f2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005acc:	200a      	movs	r0, #10
 8005ace:	f004 fcaa 	bl	800a426 <HAL_NVIC_EnableIRQ>
}
 8005ad2:	bf00      	nop
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	58021000 	.word	0x58021000

08005ae4 <HAL_GPIO_EXTI_Callback>:
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9)//PA9
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af4:	d106      	bne.n	8005b04 <HAL_GPIO_EXTI_Callback+0x20>
	{
		#if defined(USE_SHUTTLE30)
		int3_flag = 1;
 8005af6:	4b11      	ldr	r3, [pc, #68]	@ (8005b3c <HAL_GPIO_EXTI_Callback+0x58>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	701a      	strb	r2, [r3, #0]
		PDEBUG("INT3 Triggered\r\n");
 8005afc:	4810      	ldr	r0, [pc, #64]	@ (8005b40 <HAL_GPIO_EXTI_Callback+0x5c>)
 8005afe:	f000 f844 	bl	8005b8a <PDEBUG>
	}
	else if(GPIO_Pin == GPIO_PIN_5)//DRDY_BMM150
	{
		PDEBUG("DRDY_BMM150 Triggered\r\n");
	}
}
 8005b02:	e017      	b.n	8005b34 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == GPIO_PIN_10)//PA10
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b0a:	d106      	bne.n	8005b1a <HAL_GPIO_EXTI_Callback+0x36>
		int2_flag = 1;
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <HAL_GPIO_EXTI_Callback+0x60>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
		PDEBUG("INT2 Triggered\r\n");
 8005b12:	480d      	ldr	r0, [pc, #52]	@ (8005b48 <HAL_GPIO_EXTI_Callback+0x64>)
 8005b14:	f000 f839 	bl	8005b8a <PDEBUG>
}
 8005b18:	e00c      	b.n	8005b34 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == GPIO_PIN_3)//PB3
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d103      	bne.n	8005b28 <HAL_GPIO_EXTI_Callback+0x44>
		int1_flag = 1;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <HAL_GPIO_EXTI_Callback+0x68>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
}
 8005b26:	e005      	b.n	8005b34 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == GPIO_PIN_5)//DRDY_BMM150
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d102      	bne.n	8005b34 <HAL_GPIO_EXTI_Callback+0x50>
		PDEBUG("DRDY_BMM150 Triggered\r\n");
 8005b2e:	4808      	ldr	r0, [pc, #32]	@ (8005b50 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005b30:	f000 f82b 	bl	8005b8a <PDEBUG>
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	24001586 	.word	0x24001586
 8005b40:	0801c164 	.word	0x0801c164
 8005b44:	24001585 	.word	0x24001585
 8005b48:	0801c178 	.word	0x0801c178
 8005b4c:	24001584 	.word	0x24001584
 8005b50:	0801c18c 	.word	0x0801c18c

08005b54 <bst_delay_us>:

void bst_delay_us(uint32_t period, void *intf_ptr)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8005b5e:	e008      	b.n	8005b72 <bst_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e002      	b.n	8005b6c <bst_delay_us+0x18>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b53      	cmp	r3, #83	@ 0x53
 8005b70:	d9f9      	bls.n	8005b66 <bst_delay_us+0x12>
	while(period--)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	1e5a      	subs	r2, r3, #1
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f1      	bne.n	8005b60 <bst_delay_us+0xc>
		{
			;
		}
	}
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <PDEBUG>:

char chBuffer[512];
void PDEBUG(char *format, ...)
{
 8005b8a:	b40f      	push	{r0, r1, r2, r3}
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
    //sprintf(timestamp, "[%d]", xTaskGetTickCount()); //xTaskGetTickCountFromISR()
    //printf((uint8_t *)timestamp, strlen(timestamp));
    //UART_Printf((uint8_t *)chBuffer,strlen(chBuffer));
    //va_end(ap);
#endif
}
 8005b90:	bf00      	nop
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	b004      	add	sp, #16
 8005b9a:	4770      	bx	lr

08005b9c <BMI323_SensorAPI_I2Cx_Read>:
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, length+1, BUS_TIMEOUT);
	return 0;
}

int8_t BMI323_SensorAPI_I2Cx_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &reg_addr, 1, BUS_TIMEOUT);
 8005bba:	f107 020f 	add.w	r2, r7, #15
 8005bbe:	8ab9      	ldrh	r1, [r7, #20]
 8005bc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	480c      	ldr	r0, [pc, #48]	@ (8005bfc <BMI323_SensorAPI_I2Cx_Read+0x60>)
 8005bca:	f005 fcc1 	bl	800b550 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, GRXBuffer, length+2, BUS_TIMEOUT);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8ab9      	ldrh	r1, [r7, #20]
 8005bd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005bdc:	9200      	str	r2, [sp, #0]
 8005bde:	4a08      	ldr	r2, [pc, #32]	@ (8005c00 <BMI323_SensorAPI_I2Cx_Read+0x64>)
 8005be0:	4806      	ldr	r0, [pc, #24]	@ (8005bfc <BMI323_SensorAPI_I2Cx_Read+0x60>)
 8005be2:	f005 fdcd 	bl	800b780 <HAL_I2C_Master_Receive>
	memcpy(reg_data, GRXBuffer+2, length);
 8005be6:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <BMI323_SensorAPI_I2Cx_Read+0x68>)
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4619      	mov	r1, r3
 8005bec:	68b8      	ldr	r0, [r7, #8]
 8005bee:	f012 fe24 	bl	801883a <memcpy>
	return 0;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	24001668 	.word	0x24001668
 8005c00:	24000d84 	.word	0x24000d84
 8005c04:	24000d86 	.word	0x24000d86

08005c08 <BMI323_SensorAPI_I2Cx_Write>:

int8_t BMI323_SensorAPI_I2Cx_Write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = reg_addr;
 8005c26:	4a0c      	ldr	r2, [pc, #48]	@ (8005c58 <BMI323_SensorAPI_I2Cx_Write+0x50>)
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], reg_data, length);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	480a      	ldr	r0, [pc, #40]	@ (8005c5c <BMI323_SensorAPI_I2Cx_Write+0x54>)
 8005c32:	f012 fe02 	bl	801883a <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, length+1, BUS_TIMEOUT);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	8ab9      	ldrh	r1, [r7, #20]
 8005c40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c44:	9200      	str	r2, [sp, #0]
 8005c46:	4a04      	ldr	r2, [pc, #16]	@ (8005c58 <BMI323_SensorAPI_I2Cx_Write+0x50>)
 8005c48:	4805      	ldr	r0, [pc, #20]	@ (8005c60 <BMI323_SensorAPI_I2Cx_Write+0x58>)
 8005c4a:	f005 fc81 	bl	800b550 <HAL_I2C_Master_Transmit>
	return 0;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	24000b84 	.word	0x24000b84
 8005c5c:	24000b85 	.word	0x24000b85
 8005c60:	24001668 	.word	0x24001668

08005c64 <SensorAPI_SPIx_Read>:

int8_t SensorAPI_SPIx_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	4b14      	ldr	r3, [pc, #80]	@ (8005cd0 <SensorAPI_SPIx_Read+0x6c>)
 8005c7e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8005c80:	2200      	movs	r2, #0
 8005c82:	2110      	movs	r1, #16
 8005c84:	4813      	ldr	r0, [pc, #76]	@ (8005cd4 <SensorAPI_SPIx_Read+0x70>)
 8005c86:	f005 fb93 	bl	800b3b0 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3301      	adds	r3, #1
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c96:	9200      	str	r2, [sp, #0]
 8005c98:	4a0f      	ldr	r2, [pc, #60]	@ (8005cd8 <SensorAPI_SPIx_Read+0x74>)
 8005c9a:	490d      	ldr	r1, [pc, #52]	@ (8005cd0 <SensorAPI_SPIx_Read+0x6c>)
 8005c9c:	480f      	ldr	r0, [pc, #60]	@ (8005cdc <SensorAPI_SPIx_Read+0x78>)
 8005c9e:	f00c fae1 	bl	8012264 <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8005ca2:	bf00      	nop
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8005cdc <SensorAPI_SPIx_Read+0x78>)
 8005ca6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d0f9      	beq.n	8005ca4 <SensorAPI_SPIx_Read+0x40>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2110      	movs	r1, #16
 8005cb4:	4807      	ldr	r0, [pc, #28]	@ (8005cd4 <SensorAPI_SPIx_Read+0x70>)
 8005cb6:	f005 fb7b 	bl	800b3b0 <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 8005cba:	4b09      	ldr	r3, [pc, #36]	@ (8005ce0 <SensorAPI_SPIx_Read+0x7c>)
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	68b8      	ldr	r0, [r7, #8]
 8005cc2:	f012 fdba 	bl	801883a <memcpy>

    return 0;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	24000b84 	.word	0x24000b84
 8005cd4:	58020000 	.word	0x58020000
 8005cd8:	24000d84 	.word	0x24000d84
 8005cdc:	240017e0 	.word	0x240017e0
 8005ce0:	24000d85 	.word	0x24000d85

08005ce4 <SensorAPI_SPIx_Write>:

int8_t SensorAPI_SPIx_Write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	4b13      	ldr	r3, [pc, #76]	@ (8005d4c <SensorAPI_SPIx_Write+0x68>)
 8005cfe:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	4812      	ldr	r0, [pc, #72]	@ (8005d50 <SensorAPI_SPIx_Write+0x6c>)
 8005d06:	f012 fd98 	bl	801883a <memcpy>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2110      	movs	r1, #16
 8005d0e:	4811      	ldr	r0, [pc, #68]	@ (8005d54 <SensorAPI_SPIx_Write+0x70>)
 8005d10:	f005 fb4e 	bl	800b3b0 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3301      	adds	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d20:	490a      	ldr	r1, [pc, #40]	@ (8005d4c <SensorAPI_SPIx_Write+0x68>)
 8005d22:	480d      	ldr	r0, [pc, #52]	@ (8005d58 <SensorAPI_SPIx_Write+0x74>)
 8005d24:	f00c f8b0 	bl	8011e88 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8005d28:	bf00      	nop
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <SensorAPI_SPIx_Write+0x74>)
 8005d2c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d0f9      	beq.n	8005d2a <SensorAPI_SPIx_Write+0x46>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 8005d36:	2201      	movs	r2, #1
 8005d38:	2110      	movs	r1, #16
 8005d3a:	4806      	ldr	r0, [pc, #24]	@ (8005d54 <SensorAPI_SPIx_Write+0x70>)
 8005d3c:	f005 fb38 	bl	800b3b0 <HAL_GPIO_WritePin>

    return 0;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	24000b84 	.word	0x24000b84
 8005d50:	24000b85 	.word	0x24000b85
 8005d54:	58020000 	.word	0x58020000
 8005d58:	240017e0 	.word	0x240017e0

08005d5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005d64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005d68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d013      	beq.n	8005d9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005d74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005d78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8005d7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005d84:	e000      	b.n	8005d88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8005d86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005d88:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f9      	beq.n	8005d86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005d92:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005d9c:	687b      	ldr	r3, [r7, #4]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b086      	sub	sp, #24
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
	int i=0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	e009      	b.n	8005dd4 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	60ba      	str	r2, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff ffc7 	bl	8005d5c <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	dbf1      	blt.n	8005dc0 <_write+0x16>
	}
	return len;
 8005ddc:	687b      	ldr	r3, [r7, #4]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8005dea:	f001 faef 	bl	80073cc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005dee:	f002 fdfb 	bl	80089e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005df2:	f000 f83d 	bl	8005e70 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005df6:	f000 f8ad 	bl	8005f54 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005dfa:	f001 f989 	bl	8007110 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8005dfe:	f000 fa7f 	bl	8006300 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8005e02:	f000 f8d7 	bl	8005fb4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8005e06:	f000 f9bb 	bl	8006180 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005e0a:	f000 f9f9 	bl	8006200 <MX_I2C2_Init>
  MX_I2C4_Init();
 8005e0e:	f000 fa37 	bl	8006280 <MX_I2C4_Init>
  MX_SPI1_Init();
 8005e12:	f000 fa93 	bl	800633c <MX_SPI1_Init>
  MX_SPI2_Init();
 8005e16:	f000 fae7 	bl	80063e8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005e1a:	f000 fb91 	bl	8006540 <MX_TIM1_Init>
  MX_TIM2_Init();
 8005e1e:	f000 fc53 	bl	80066c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005e22:	f000 fcab 	bl	800677c <MX_TIM3_Init>
  MX_TIM4_Init();
 8005e26:	f000 fd03 	bl	8006830 <MX_TIM4_Init>
  MX_TIM5_Init();
 8005e2a:	f000 fd5b 	bl	80068e4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8005e2e:	f000 fdb3 	bl	8006998 <MX_TIM8_Init>
  MX_TIM12_Init();
 8005e32:	f000 fe41 	bl	8006ab8 <MX_TIM12_Init>
  MX_TIM15_Init();
 8005e36:	f000 fe99 	bl	8006b6c <MX_TIM15_Init>
  MX_UART4_Init();
 8005e3a:	f000 ff1d 	bl	8006c78 <MX_UART4_Init>
  MX_UART5_Init();
 8005e3e:	f000 ff67 	bl	8006d10 <MX_UART5_Init>
  MX_UART7_Init();
 8005e42:	f000 ffb1 	bl	8006da8 <MX_UART7_Init>
  MX_UART8_Init();
 8005e46:	f000 fffb 	bl	8006e40 <MX_UART8_Init>
  MX_USART1_Init();
 8005e4a:	f001 f847 	bl	8006edc <MX_USART1_Init>
  MX_USART2_Init();
 8005e4e:	f001 f8a3 	bl	8006f98 <MX_USART2_Init>
  MX_USART3_Init();
 8005e52:	f001 f8ff 	bl	8007054 <MX_USART3_Init>
  MX_ADC2_Init();
 8005e56:	f000 f929 	bl	80060ac <MX_ADC2_Init>
  MX_SPI4_Init();
 8005e5a:	f000 fb1b 	bl	8006494 <MX_SPI4_Init>
  MX_FATFS_Init();
 8005e5e:	f011 fa05 	bl	801726c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c4);
  SensorManager_Init();
 8005e62:	f002 fcdb 	bl	800881c <SensorManager_Init>

  TestTelemetry();
 8005e66:	f002 fd43 	bl	80088f0 <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005e6a:	bf00      	nop
 8005e6c:	e7fd      	b.n	8005e6a <main+0x84>
	...

08005e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b09c      	sub	sp, #112	@ 0x70
 8005e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e7a:	224c      	movs	r2, #76	@ 0x4c
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f012 fc5c 	bl	801873c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	2220      	movs	r2, #32
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f012 fc56 	bl	801873c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005e90:	2002      	movs	r0, #2
 8005e92:	f006 ff71 	bl	800cd78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e96:	2300      	movs	r3, #0
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f50 <SystemClock_Config+0xe0>)
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8005f50 <SystemClock_Config+0xe0>)
 8005ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ea8:	6193      	str	r3, [r2, #24]
 8005eaa:	4b29      	ldr	r3, [pc, #164]	@ (8005f50 <SystemClock_Config+0xe0>)
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005eb6:	bf00      	nop
 8005eb8:	4b25      	ldr	r3, [pc, #148]	@ (8005f50 <SystemClock_Config+0xe0>)
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec4:	d1f8      	bne.n	8005eb8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005eca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005ed8:	2304      	movs	r3, #4
 8005eda:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8005edc:	2310      	movs	r3, #16
 8005ede:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005eec:	230c      	movs	r3, #12
 8005eee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005efc:	4618      	mov	r0, r3
 8005efe:	f006 ff75 	bl	800cdec <HAL_RCC_OscConfig>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8005f08:	f001 fa8c 	bl	8007424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f0c:	233f      	movs	r3, #63	@ 0x3f
 8005f0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f10:	2303      	movs	r3, #3
 8005f12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005f20:	2340      	movs	r3, #64	@ 0x40
 8005f22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f28:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005f2a:	2340      	movs	r3, #64	@ 0x40
 8005f2c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	2101      	movs	r1, #1
 8005f32:	4618      	mov	r0, r3
 8005f34:	f007 fb34 	bl	800d5a0 <HAL_RCC_ClockConfig>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8005f3e:	f001 fa71 	bl	8007424 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8005f42:	f007 fce3 	bl	800d90c <HAL_RCC_EnableCSS>
}
 8005f46:	bf00      	nop
 8005f48:	3770      	adds	r7, #112	@ 0x70
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	58024800 	.word	0x58024800

08005f54 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b0ae      	sub	sp, #184	@ 0xb8
 8005f58:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	22b8      	movs	r2, #184	@ 0xb8
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f012 fbeb 	bl	801873c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005f66:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8005f72:	2304      	movs	r3, #4
 8005f74:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8005f76:	2310      	movs	r3, #16
 8005f78:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8005f7a:	2305      	movs	r3, #5
 8005f7c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005f82:	2302      	movs	r3, #2
 8005f84:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8005f86:	23c0      	movs	r3, #192	@ 0xc0
 8005f88:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f98:	463b      	mov	r3, r7
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f007 feb8 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8005fa6:	f001 fa3d 	bl	8007424 <Error_Handler>
  }
}
 8005faa:	bf00      	nop
 8005fac:	37b8      	adds	r7, #184	@ 0xb8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	@ 0x30
 8005fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
 8005fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	2224      	movs	r2, #36	@ 0x24
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f012 fbb5 	bl	801873c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005fd2:	4b32      	ldr	r3, [pc, #200]	@ (800609c <MX_ADC1_Init+0xe8>)
 8005fd4:	4a32      	ldr	r2, [pc, #200]	@ (80060a0 <MX_ADC1_Init+0xec>)
 8005fd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8005fd8:	4b30      	ldr	r3, [pc, #192]	@ (800609c <MX_ADC1_Init+0xe8>)
 8005fda:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005fde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8005fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800609c <MX_ADC1_Init+0xe8>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800609c <MX_ADC1_Init+0xe8>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005fec:	4b2b      	ldr	r3, [pc, #172]	@ (800609c <MX_ADC1_Init+0xe8>)
 8005fee:	2204      	movs	r2, #4
 8005ff0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800609c <MX_ADC1_Init+0xe8>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005ff8:	4b28      	ldr	r3, [pc, #160]	@ (800609c <MX_ADC1_Init+0xe8>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005ffe:	4b27      	ldr	r3, [pc, #156]	@ (800609c <MX_ADC1_Init+0xe8>)
 8006000:	2201      	movs	r2, #1
 8006002:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006004:	4b25      	ldr	r3, [pc, #148]	@ (800609c <MX_ADC1_Init+0xe8>)
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800600c:	4b23      	ldr	r3, [pc, #140]	@ (800609c <MX_ADC1_Init+0xe8>)
 800600e:	2200      	movs	r2, #0
 8006010:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006012:	4b22      	ldr	r3, [pc, #136]	@ (800609c <MX_ADC1_Init+0xe8>)
 8006014:	2200      	movs	r2, #0
 8006016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8006018:	4b20      	ldr	r3, [pc, #128]	@ (800609c <MX_ADC1_Init+0xe8>)
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800601e:	4b1f      	ldr	r3, [pc, #124]	@ (800609c <MX_ADC1_Init+0xe8>)
 8006020:	2200      	movs	r2, #0
 8006022:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8006024:	4b1d      	ldr	r3, [pc, #116]	@ (800609c <MX_ADC1_Init+0xe8>)
 8006026:	2200      	movs	r2, #0
 8006028:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800602a:	4b1c      	ldr	r3, [pc, #112]	@ (800609c <MX_ADC1_Init+0xe8>)
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8006032:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <MX_ADC1_Init+0xe8>)
 8006034:	2201      	movs	r2, #1
 8006036:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006038:	4818      	ldr	r0, [pc, #96]	@ (800609c <MX_ADC1_Init+0xe8>)
 800603a:	f002 ffd1 	bl	8008fe0 <HAL_ADC_Init>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8006044:	f001 f9ee 	bl	8007424 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006048:	2300      	movs	r3, #0
 800604a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800604c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006050:	4619      	mov	r1, r3
 8006052:	4812      	ldr	r0, [pc, #72]	@ (800609c <MX_ADC1_Init+0xe8>)
 8006054:	f004 f810 	bl	800a078 <HAL_ADCEx_MultiModeConfigChannel>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800605e:	f001 f9e1 	bl	8007424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006062:	4b10      	ldr	r3, [pc, #64]	@ (80060a4 <MX_ADC1_Init+0xf0>)
 8006064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006066:	2306      	movs	r3, #6
 8006068:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800606a:	2300      	movs	r3, #0
 800606c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800606e:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <MX_ADC1_Init+0xf4>)
 8006070:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006072:	2304      	movs	r3, #4
 8006074:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800607a:	2300      	movs	r3, #0
 800607c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006080:	463b      	mov	r3, r7
 8006082:	4619      	mov	r1, r3
 8006084:	4805      	ldr	r0, [pc, #20]	@ (800609c <MX_ADC1_Init+0xe8>)
 8006086:	f003 f9b3 	bl	80093f0 <HAL_ADC_ConfigChannel>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006090:	f001 f9c8 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006094:	bf00      	nop
 8006096:	3730      	adds	r7, #48	@ 0x30
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	24001588 	.word	0x24001588
 80060a0:	40022000 	.word	0x40022000
 80060a4:	10c00010 	.word	0x10c00010
 80060a8:	47ff0000 	.word	0x47ff0000

080060ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	@ 0x28
 80060b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	2224      	movs	r2, #36	@ 0x24
 80060b6:	2100      	movs	r1, #0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f012 fb3f 	bl	801873c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80060be:	4b2c      	ldr	r3, [pc, #176]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006174 <MX_ADC2_Init+0xc8>)
 80060c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80060c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80060ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80060cc:	4b28      	ldr	r3, [pc, #160]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80060d2:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80060d8:	4b25      	ldr	r3, [pc, #148]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060da:	2204      	movs	r2, #4
 80060dc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80060de:	4b24      	ldr	r3, [pc, #144]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80060e4:	4b22      	ldr	r3, [pc, #136]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80060ea:	4b21      	ldr	r3, [pc, #132]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80060f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <MX_ADC2_Init+0xc4>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80060fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006170 <MX_ADC2_Init+0xc4>)
 8006100:	2200      	movs	r2, #0
 8006102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8006104:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <MX_ADC2_Init+0xc4>)
 8006106:	2200      	movs	r2, #0
 8006108:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800610a:	4b19      	ldr	r3, [pc, #100]	@ (8006170 <MX_ADC2_Init+0xc4>)
 800610c:	2200      	movs	r2, #0
 800610e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8006110:	4b17      	ldr	r3, [pc, #92]	@ (8006170 <MX_ADC2_Init+0xc4>)
 8006112:	2200      	movs	r2, #0
 8006114:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8006116:	4b16      	ldr	r3, [pc, #88]	@ (8006170 <MX_ADC2_Init+0xc4>)
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800611e:	4b14      	ldr	r3, [pc, #80]	@ (8006170 <MX_ADC2_Init+0xc4>)
 8006120:	2201      	movs	r2, #1
 8006122:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006124:	4812      	ldr	r0, [pc, #72]	@ (8006170 <MX_ADC2_Init+0xc4>)
 8006126:	f002 ff5b 	bl	8008fe0 <HAL_ADC_Init>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8006130:	f001 f978 	bl	8007424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006134:	4b10      	ldr	r3, [pc, #64]	@ (8006178 <MX_ADC2_Init+0xcc>)
 8006136:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006138:	2306      	movs	r3, #6
 800613a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8006140:	4b0e      	ldr	r3, [pc, #56]	@ (800617c <MX_ADC2_Init+0xd0>)
 8006142:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006144:	2304      	movs	r3, #4
 8006146:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800614c:	2300      	movs	r3, #0
 800614e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4806      	ldr	r0, [pc, #24]	@ (8006170 <MX_ADC2_Init+0xc4>)
 8006158:	f003 f94a 	bl	80093f0 <HAL_ADC_ConfigChannel>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8006162:	f001 f95f 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006166:	bf00      	nop
 8006168:	3728      	adds	r7, #40	@ 0x28
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	240015f8 	.word	0x240015f8
 8006174:	40022100 	.word	0x40022100
 8006178:	14f00020 	.word	0x14f00020
 800617c:	47ff0000 	.word	0x47ff0000

08006180 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006184:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <MX_I2C1_Init+0x74>)
 8006186:	4a1c      	ldr	r2, [pc, #112]	@ (80061f8 <MX_I2C1_Init+0x78>)
 8006188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800618a:	4b1a      	ldr	r3, [pc, #104]	@ (80061f4 <MX_I2C1_Init+0x74>)
 800618c:	4a1b      	ldr	r2, [pc, #108]	@ (80061fc <MX_I2C1_Init+0x7c>)
 800618e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006190:	4b18      	ldr	r3, [pc, #96]	@ (80061f4 <MX_I2C1_Init+0x74>)
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006196:	4b17      	ldr	r3, [pc, #92]	@ (80061f4 <MX_I2C1_Init+0x74>)
 8006198:	2201      	movs	r2, #1
 800619a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800619c:	4b15      	ldr	r3, [pc, #84]	@ (80061f4 <MX_I2C1_Init+0x74>)
 800619e:	2200      	movs	r2, #0
 80061a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80061a2:	4b14      	ldr	r3, [pc, #80]	@ (80061f4 <MX_I2C1_Init+0x74>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80061a8:	4b12      	ldr	r3, [pc, #72]	@ (80061f4 <MX_I2C1_Init+0x74>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061ae:	4b11      	ldr	r3, [pc, #68]	@ (80061f4 <MX_I2C1_Init+0x74>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061b4:	4b0f      	ldr	r3, [pc, #60]	@ (80061f4 <MX_I2C1_Init+0x74>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80061ba:	480e      	ldr	r0, [pc, #56]	@ (80061f4 <MX_I2C1_Init+0x74>)
 80061bc:	f005 f92c 	bl	800b418 <HAL_I2C_Init>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80061c6:	f001 f92d 	bl	8007424 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80061ca:	2100      	movs	r1, #0
 80061cc:	4809      	ldr	r0, [pc, #36]	@ (80061f4 <MX_I2C1_Init+0x74>)
 80061ce:	f006 fd3b 	bl	800cc48 <HAL_I2CEx_ConfigAnalogFilter>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80061d8:	f001 f924 	bl	8007424 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80061dc:	2100      	movs	r1, #0
 80061de:	4805      	ldr	r0, [pc, #20]	@ (80061f4 <MX_I2C1_Init+0x74>)
 80061e0:	f006 fd7d 	bl	800ccde <HAL_I2CEx_ConfigDigitalFilter>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80061ea:	f001 f91b 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80061ee:	bf00      	nop
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	24001668 	.word	0x24001668
 80061f8:	40005400 	.word	0x40005400
 80061fc:	20303e5d 	.word	0x20303e5d

08006200 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006204:	4b1b      	ldr	r3, [pc, #108]	@ (8006274 <MX_I2C2_Init+0x74>)
 8006206:	4a1c      	ldr	r2, [pc, #112]	@ (8006278 <MX_I2C2_Init+0x78>)
 8006208:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800620a:	4b1a      	ldr	r3, [pc, #104]	@ (8006274 <MX_I2C2_Init+0x74>)
 800620c:	4a1b      	ldr	r2, [pc, #108]	@ (800627c <MX_I2C2_Init+0x7c>)
 800620e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006210:	4b18      	ldr	r3, [pc, #96]	@ (8006274 <MX_I2C2_Init+0x74>)
 8006212:	2200      	movs	r2, #0
 8006214:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006216:	4b17      	ldr	r3, [pc, #92]	@ (8006274 <MX_I2C2_Init+0x74>)
 8006218:	2201      	movs	r2, #1
 800621a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800621c:	4b15      	ldr	r3, [pc, #84]	@ (8006274 <MX_I2C2_Init+0x74>)
 800621e:	2200      	movs	r2, #0
 8006220:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006222:	4b14      	ldr	r3, [pc, #80]	@ (8006274 <MX_I2C2_Init+0x74>)
 8006224:	2200      	movs	r2, #0
 8006226:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006228:	4b12      	ldr	r3, [pc, #72]	@ (8006274 <MX_I2C2_Init+0x74>)
 800622a:	2200      	movs	r2, #0
 800622c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800622e:	4b11      	ldr	r3, [pc, #68]	@ (8006274 <MX_I2C2_Init+0x74>)
 8006230:	2200      	movs	r2, #0
 8006232:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006234:	4b0f      	ldr	r3, [pc, #60]	@ (8006274 <MX_I2C2_Init+0x74>)
 8006236:	2200      	movs	r2, #0
 8006238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800623a:	480e      	ldr	r0, [pc, #56]	@ (8006274 <MX_I2C2_Init+0x74>)
 800623c:	f005 f8ec 	bl	800b418 <HAL_I2C_Init>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006246:	f001 f8ed 	bl	8007424 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800624a:	2100      	movs	r1, #0
 800624c:	4809      	ldr	r0, [pc, #36]	@ (8006274 <MX_I2C2_Init+0x74>)
 800624e:	f006 fcfb 	bl	800cc48 <HAL_I2CEx_ConfigAnalogFilter>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006258:	f001 f8e4 	bl	8007424 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800625c:	2100      	movs	r1, #0
 800625e:	4805      	ldr	r0, [pc, #20]	@ (8006274 <MX_I2C2_Init+0x74>)
 8006260:	f006 fd3d 	bl	800ccde <HAL_I2CEx_ConfigDigitalFilter>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800626a:	f001 f8db 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	240016bc 	.word	0x240016bc
 8006278:	40005800 	.word	0x40005800
 800627c:	20303e5d 	.word	0x20303e5d

08006280 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8006284:	4b1b      	ldr	r3, [pc, #108]	@ (80062f4 <MX_I2C4_Init+0x74>)
 8006286:	4a1c      	ldr	r2, [pc, #112]	@ (80062f8 <MX_I2C4_Init+0x78>)
 8006288:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00B0DBFF;
 800628a:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <MX_I2C4_Init+0x74>)
 800628c:	4a1b      	ldr	r2, [pc, #108]	@ (80062fc <MX_I2C4_Init+0x7c>)
 800628e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8006290:	4b18      	ldr	r3, [pc, #96]	@ (80062f4 <MX_I2C4_Init+0x74>)
 8006292:	2200      	movs	r2, #0
 8006294:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006296:	4b17      	ldr	r3, [pc, #92]	@ (80062f4 <MX_I2C4_Init+0x74>)
 8006298:	2201      	movs	r2, #1
 800629a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800629c:	4b15      	ldr	r3, [pc, #84]	@ (80062f4 <MX_I2C4_Init+0x74>)
 800629e:	2200      	movs	r2, #0
 80062a0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80062a2:	4b14      	ldr	r3, [pc, #80]	@ (80062f4 <MX_I2C4_Init+0x74>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80062a8:	4b12      	ldr	r3, [pc, #72]	@ (80062f4 <MX_I2C4_Init+0x74>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80062ae:	4b11      	ldr	r3, [pc, #68]	@ (80062f4 <MX_I2C4_Init+0x74>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80062b4:	4b0f      	ldr	r3, [pc, #60]	@ (80062f4 <MX_I2C4_Init+0x74>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80062ba:	480e      	ldr	r0, [pc, #56]	@ (80062f4 <MX_I2C4_Init+0x74>)
 80062bc:	f005 f8ac 	bl	800b418 <HAL_I2C_Init>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80062c6:	f001 f8ad 	bl	8007424 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80062ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80062ce:	4809      	ldr	r0, [pc, #36]	@ (80062f4 <MX_I2C4_Init+0x74>)
 80062d0:	f006 fcba 	bl	800cc48 <HAL_I2CEx_ConfigAnalogFilter>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80062da:	f001 f8a3 	bl	8007424 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80062de:	2100      	movs	r1, #0
 80062e0:	4804      	ldr	r0, [pc, #16]	@ (80062f4 <MX_I2C4_Init+0x74>)
 80062e2:	f006 fcfc 	bl	800ccde <HAL_I2CEx_ConfigDigitalFilter>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80062ec:	f001 f89a 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80062f0:	bf00      	nop
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	24001710 	.word	0x24001710
 80062f8:	58001c00 	.word	0x58001c00
 80062fc:	00b0dbff 	.word	0x00b0dbff

08006300 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8006304:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <MX_SDMMC1_SD_Init+0x34>)
 8006306:	4a0c      	ldr	r2, [pc, #48]	@ (8006338 <MX_SDMMC1_SD_Init+0x38>)
 8006308:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800630a:	4b0a      	ldr	r3, [pc, #40]	@ (8006334 <MX_SDMMC1_SD_Init+0x34>)
 800630c:	2200      	movs	r2, #0
 800630e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006310:	4b08      	ldr	r3, [pc, #32]	@ (8006334 <MX_SDMMC1_SD_Init+0x34>)
 8006312:	2200      	movs	r2, #0
 8006314:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8006316:	4b07      	ldr	r3, [pc, #28]	@ (8006334 <MX_SDMMC1_SD_Init+0x34>)
 8006318:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800631c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800631e:	4b05      	ldr	r3, [pc, #20]	@ (8006334 <MX_SDMMC1_SD_Init+0x34>)
 8006320:	2200      	movs	r2, #0
 8006322:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8006324:	4b03      	ldr	r3, [pc, #12]	@ (8006334 <MX_SDMMC1_SD_Init+0x34>)
 8006326:	2200      	movs	r2, #0
 8006328:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800632a:	bf00      	nop
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	24001764 	.word	0x24001764
 8006338:	52007000 	.word	0x52007000

0800633c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006340:	4b27      	ldr	r3, [pc, #156]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006342:	4a28      	ldr	r2, [pc, #160]	@ (80063e4 <MX_SPI1_Init+0xa8>)
 8006344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006346:	4b26      	ldr	r3, [pc, #152]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006348:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800634c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800634e:	4b24      	ldr	r3, [pc, #144]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006350:	2200      	movs	r2, #0
 8006352:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006354:	4b22      	ldr	r3, [pc, #136]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006356:	2207      	movs	r2, #7
 8006358:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800635a:	4b21      	ldr	r3, [pc, #132]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 800635c:	2200      	movs	r2, #0
 800635e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006360:	4b1f      	ldr	r3, [pc, #124]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006362:	2200      	movs	r2, #0
 8006364:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006366:	4b1e      	ldr	r3, [pc, #120]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006368:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800636c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800636e:	4b1c      	ldr	r3, [pc, #112]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006370:	2200      	movs	r2, #0
 8006372:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006374:	4b1a      	ldr	r3, [pc, #104]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006376:	2200      	movs	r2, #0
 8006378:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800637a:	4b19      	ldr	r3, [pc, #100]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 800637c:	2200      	movs	r2, #0
 800637e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006380:	4b17      	ldr	r3, [pc, #92]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006382:	2200      	movs	r2, #0
 8006384:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8006386:	4b16      	ldr	r3, [pc, #88]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006388:	2200      	movs	r2, #0
 800638a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800638c:	4b14      	ldr	r3, [pc, #80]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 800638e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006392:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006394:	4b12      	ldr	r3, [pc, #72]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 8006396:	2200      	movs	r2, #0
 8006398:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800639a:	4b11      	ldr	r3, [pc, #68]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 800639c:	2200      	movs	r2, #0
 800639e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80063a0:	4b0f      	ldr	r3, [pc, #60]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80063a6:	4b0e      	ldr	r3, [pc, #56]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80063ac:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80063b2:	4b0b      	ldr	r3, [pc, #44]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80063b8:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80063be:	4b08      	ldr	r3, [pc, #32]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80063c4:	4b06      	ldr	r3, [pc, #24]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80063ca:	4805      	ldr	r0, [pc, #20]	@ (80063e0 <MX_SPI1_Init+0xa4>)
 80063cc:	f00b fc38 	bl	8011c40 <HAL_SPI_Init>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80063d6:	f001 f825 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80063da:	bf00      	nop
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	240017e0 	.word	0x240017e0
 80063e4:	40013000 	.word	0x40013000

080063e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80063ec:	4b27      	ldr	r3, [pc, #156]	@ (800648c <MX_SPI2_Init+0xa4>)
 80063ee:	4a28      	ldr	r2, [pc, #160]	@ (8006490 <MX_SPI2_Init+0xa8>)
 80063f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80063f2:	4b26      	ldr	r3, [pc, #152]	@ (800648c <MX_SPI2_Init+0xa4>)
 80063f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80063f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80063fa:	4b24      	ldr	r3, [pc, #144]	@ (800648c <MX_SPI2_Init+0xa4>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_7BIT;
 8006400:	4b22      	ldr	r3, [pc, #136]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006402:	2206      	movs	r2, #6
 8006404:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006406:	4b21      	ldr	r3, [pc, #132]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006408:	2200      	movs	r2, #0
 800640a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800640c:	4b1f      	ldr	r3, [pc, #124]	@ (800648c <MX_SPI2_Init+0xa4>)
 800640e:	2200      	movs	r2, #0
 8006410:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006412:	4b1e      	ldr	r3, [pc, #120]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006414:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006418:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800641a:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <MX_SPI2_Init+0xa4>)
 800641c:	2200      	movs	r2, #0
 800641e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006420:	4b1a      	ldr	r3, [pc, #104]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006422:	2200      	movs	r2, #0
 8006424:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006426:	4b19      	ldr	r3, [pc, #100]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006428:	2200      	movs	r2, #0
 800642a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800642c:	4b17      	ldr	r3, [pc, #92]	@ (800648c <MX_SPI2_Init+0xa4>)
 800642e:	2200      	movs	r2, #0
 8006430:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8006432:	4b16      	ldr	r3, [pc, #88]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006434:	2200      	movs	r2, #0
 8006436:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006438:	4b14      	ldr	r3, [pc, #80]	@ (800648c <MX_SPI2_Init+0xa4>)
 800643a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800643e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006440:	4b12      	ldr	r3, [pc, #72]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006442:	2200      	movs	r2, #0
 8006444:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006446:	4b11      	ldr	r3, [pc, #68]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006448:	2200      	movs	r2, #0
 800644a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800644c:	4b0f      	ldr	r3, [pc, #60]	@ (800648c <MX_SPI2_Init+0xa4>)
 800644e:	2200      	movs	r2, #0
 8006450:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006452:	4b0e      	ldr	r3, [pc, #56]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006454:	2200      	movs	r2, #0
 8006456:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006458:	4b0c      	ldr	r3, [pc, #48]	@ (800648c <MX_SPI2_Init+0xa4>)
 800645a:	2200      	movs	r2, #0
 800645c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800645e:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006460:	2200      	movs	r2, #0
 8006462:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006464:	4b09      	ldr	r3, [pc, #36]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006466:	2200      	movs	r2, #0
 8006468:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800646a:	4b08      	ldr	r3, [pc, #32]	@ (800648c <MX_SPI2_Init+0xa4>)
 800646c:	2200      	movs	r2, #0
 800646e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006470:	4b06      	ldr	r3, [pc, #24]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006472:	2200      	movs	r2, #0
 8006474:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006476:	4805      	ldr	r0, [pc, #20]	@ (800648c <MX_SPI2_Init+0xa4>)
 8006478:	f00b fbe2 	bl	8011c40 <HAL_SPI_Init>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8006482:	f000 ffcf 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006486:	bf00      	nop
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	24001868 	.word	0x24001868
 8006490:	40003800 	.word	0x40003800

08006494 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8006498:	4b27      	ldr	r3, [pc, #156]	@ (8006538 <MX_SPI4_Init+0xa4>)
 800649a:	4a28      	ldr	r2, [pc, #160]	@ (800653c <MX_SPI4_Init+0xa8>)
 800649c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800649e:	4b26      	ldr	r3, [pc, #152]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80064a4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80064a6:	4b24      	ldr	r3, [pc, #144]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80064ac:	4b22      	ldr	r3, [pc, #136]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064ae:	2203      	movs	r2, #3
 80064b0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80064b2:	4b21      	ldr	r3, [pc, #132]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80064b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80064be:	4b1e      	ldr	r3, [pc, #120]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80064c4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80064d2:	4b19      	ldr	r3, [pc, #100]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064d8:	4b17      	ldr	r3, [pc, #92]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064da:	2200      	movs	r2, #0
 80064dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80064de:	4b16      	ldr	r3, [pc, #88]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80064e4:	4b14      	ldr	r3, [pc, #80]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80064ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80064ec:	4b12      	ldr	r3, [pc, #72]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80064f2:	4b11      	ldr	r3, [pc, #68]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80064f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006538 <MX_SPI4_Init+0xa4>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80064fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006538 <MX_SPI4_Init+0xa4>)
 8006500:	2200      	movs	r2, #0
 8006502:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006504:	4b0c      	ldr	r3, [pc, #48]	@ (8006538 <MX_SPI4_Init+0xa4>)
 8006506:	2200      	movs	r2, #0
 8006508:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800650a:	4b0b      	ldr	r3, [pc, #44]	@ (8006538 <MX_SPI4_Init+0xa4>)
 800650c:	2200      	movs	r2, #0
 800650e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006510:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <MX_SPI4_Init+0xa4>)
 8006512:	2200      	movs	r2, #0
 8006514:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006516:	4b08      	ldr	r3, [pc, #32]	@ (8006538 <MX_SPI4_Init+0xa4>)
 8006518:	2200      	movs	r2, #0
 800651a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800651c:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <MX_SPI4_Init+0xa4>)
 800651e:	2200      	movs	r2, #0
 8006520:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8006522:	4805      	ldr	r0, [pc, #20]	@ (8006538 <MX_SPI4_Init+0xa4>)
 8006524:	f00b fb8c 	bl	8011c40 <HAL_SPI_Init>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800652e:	f000 ff79 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	240018f0 	.word	0x240018f0
 800653c:	40013400 	.word	0x40013400

08006540 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b09c      	sub	sp, #112	@ 0x70
 8006544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006546:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	605a      	str	r2, [r3, #4]
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006554:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	605a      	str	r2, [r3, #4]
 800655e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006560:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	605a      	str	r2, [r3, #4]
 800656a:	609a      	str	r2, [r3, #8]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	611a      	str	r2, [r3, #16]
 8006570:	615a      	str	r2, [r3, #20]
 8006572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006574:	1d3b      	adds	r3, r7, #4
 8006576:	2234      	movs	r2, #52	@ 0x34
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f012 f8de 	bl	801873c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006580:	4b4f      	ldr	r3, [pc, #316]	@ (80066c0 <MX_TIM1_Init+0x180>)
 8006582:	4a50      	ldr	r2, [pc, #320]	@ (80066c4 <MX_TIM1_Init+0x184>)
 8006584:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006586:	4b4e      	ldr	r3, [pc, #312]	@ (80066c0 <MX_TIM1_Init+0x180>)
 8006588:	2200      	movs	r2, #0
 800658a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800658c:	4b4c      	ldr	r3, [pc, #304]	@ (80066c0 <MX_TIM1_Init+0x180>)
 800658e:	2200      	movs	r2, #0
 8006590:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006592:	4b4b      	ldr	r3, [pc, #300]	@ (80066c0 <MX_TIM1_Init+0x180>)
 8006594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006598:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800659a:	4b49      	ldr	r3, [pc, #292]	@ (80066c0 <MX_TIM1_Init+0x180>)
 800659c:	2200      	movs	r2, #0
 800659e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80065a0:	4b47      	ldr	r3, [pc, #284]	@ (80066c0 <MX_TIM1_Init+0x180>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065a6:	4b46      	ldr	r3, [pc, #280]	@ (80066c0 <MX_TIM1_Init+0x180>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80065ac:	4844      	ldr	r0, [pc, #272]	@ (80066c0 <MX_TIM1_Init+0x180>)
 80065ae:	f00c fa7c 	bl	8012aaa <HAL_TIM_Base_Init>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80065b8:	f000 ff34 	bl	8007424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80065bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80065c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80065c6:	4619      	mov	r1, r3
 80065c8:	483d      	ldr	r0, [pc, #244]	@ (80066c0 <MX_TIM1_Init+0x180>)
 80065ca:	f00c fc31 	bl	8012e30 <HAL_TIM_ConfigClockSource>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80065d4:	f000 ff26 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80065d8:	4839      	ldr	r0, [pc, #228]	@ (80066c0 <MX_TIM1_Init+0x180>)
 80065da:	f00c fabd 	bl	8012b58 <HAL_TIM_PWM_Init>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80065e4:	f000 ff1e 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065e8:	2300      	movs	r3, #0
 80065ea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80065ec:	2300      	movs	r3, #0
 80065ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80065f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80065f8:	4619      	mov	r1, r3
 80065fa:	4831      	ldr	r0, [pc, #196]	@ (80066c0 <MX_TIM1_Init+0x180>)
 80065fc:	f00d f936 	bl	801386c <HAL_TIMEx_MasterConfigSynchronization>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8006606:	f000 ff0d 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800660a:	2360      	movs	r3, #96	@ 0x60
 800660c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006612:	2300      	movs	r3, #0
 8006614:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006616:	2300      	movs	r3, #0
 8006618:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800661a:	2300      	movs	r3, #0
 800661c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800661e:	2300      	movs	r3, #0
 8006620:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006622:	2300      	movs	r3, #0
 8006624:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006626:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800662a:	2200      	movs	r2, #0
 800662c:	4619      	mov	r1, r3
 800662e:	4824      	ldr	r0, [pc, #144]	@ (80066c0 <MX_TIM1_Init+0x180>)
 8006630:	f00c faea 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800663a:	f000 fef3 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800663e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006642:	2204      	movs	r2, #4
 8006644:	4619      	mov	r1, r3
 8006646:	481e      	ldr	r0, [pc, #120]	@ (80066c0 <MX_TIM1_Init+0x180>)
 8006648:	f00c fade 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8006652:	f000 fee7 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006656:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800665a:	2208      	movs	r2, #8
 800665c:	4619      	mov	r1, r3
 800665e:	4818      	ldr	r0, [pc, #96]	@ (80066c0 <MX_TIM1_Init+0x180>)
 8006660:	f00c fad2 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800666a:	f000 fedb 	bl	8007424 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800666e:	2300      	movs	r3, #0
 8006670:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006686:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800668c:	2300      	movs	r3, #0
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006690:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006694:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800669a:	2300      	movs	r3, #0
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4807      	ldr	r0, [pc, #28]	@ (80066c0 <MX_TIM1_Init+0x180>)
 80066a4:	f00d f97e 	bl	80139a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80066ae:	f000 feb9 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80066b2:	4803      	ldr	r0, [pc, #12]	@ (80066c0 <MX_TIM1_Init+0x180>)
 80066b4:	f001 fb2c 	bl	8007d10 <HAL_TIM_MspPostInit>

}
 80066b8:	bf00      	nop
 80066ba:	3770      	adds	r7, #112	@ 0x70
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	24001978 	.word	0x24001978
 80066c4:	40010000 	.word	0x40010000

080066c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	@ 0x28
 80066cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066ce:	f107 031c 	add.w	r3, r7, #28
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	605a      	str	r2, [r3, #4]
 80066d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066da:	463b      	mov	r3, r7
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	609a      	str	r2, [r3, #8]
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	611a      	str	r2, [r3, #16]
 80066e8:	615a      	str	r2, [r3, #20]
 80066ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80066ec:	4b22      	ldr	r3, [pc, #136]	@ (8006778 <MX_TIM2_Init+0xb0>)
 80066ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80066f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80066f4:	4b20      	ldr	r3, [pc, #128]	@ (8006778 <MX_TIM2_Init+0xb0>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006778 <MX_TIM2_Init+0xb0>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006700:	4b1d      	ldr	r3, [pc, #116]	@ (8006778 <MX_TIM2_Init+0xb0>)
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006708:	4b1b      	ldr	r3, [pc, #108]	@ (8006778 <MX_TIM2_Init+0xb0>)
 800670a:	2200      	movs	r2, #0
 800670c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800670e:	4b1a      	ldr	r3, [pc, #104]	@ (8006778 <MX_TIM2_Init+0xb0>)
 8006710:	2200      	movs	r2, #0
 8006712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006714:	4818      	ldr	r0, [pc, #96]	@ (8006778 <MX_TIM2_Init+0xb0>)
 8006716:	f00c fa1f 	bl	8012b58 <HAL_TIM_PWM_Init>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8006720:	f000 fe80 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006724:	2300      	movs	r3, #0
 8006726:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006728:	2300      	movs	r3, #0
 800672a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800672c:	f107 031c 	add.w	r3, r7, #28
 8006730:	4619      	mov	r1, r3
 8006732:	4811      	ldr	r0, [pc, #68]	@ (8006778 <MX_TIM2_Init+0xb0>)
 8006734:	f00d f89a 	bl	801386c <HAL_TIMEx_MasterConfigSynchronization>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800673e:	f000 fe71 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006742:	2360      	movs	r3, #96	@ 0x60
 8006744:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800674a:	2300      	movs	r3, #0
 800674c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800674e:	2300      	movs	r3, #0
 8006750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006752:	463b      	mov	r3, r7
 8006754:	2200      	movs	r2, #0
 8006756:	4619      	mov	r1, r3
 8006758:	4807      	ldr	r0, [pc, #28]	@ (8006778 <MX_TIM2_Init+0xb0>)
 800675a:	f00c fa55 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8006764:	f000 fe5e 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006768:	4803      	ldr	r0, [pc, #12]	@ (8006778 <MX_TIM2_Init+0xb0>)
 800676a:	f001 fad1 	bl	8007d10 <HAL_TIM_MspPostInit>

}
 800676e:	bf00      	nop
 8006770:	3728      	adds	r7, #40	@ 0x28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	240019c4 	.word	0x240019c4

0800677c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	@ 0x28
 8006780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006782:	f107 031c 	add.w	r3, r7, #28
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	605a      	str	r2, [r3, #4]
 800678c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800678e:	463b      	mov	r3, r7
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	611a      	str	r2, [r3, #16]
 800679c:	615a      	str	r2, [r3, #20]
 800679e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80067a0:	4b21      	ldr	r3, [pc, #132]	@ (8006828 <MX_TIM3_Init+0xac>)
 80067a2:	4a22      	ldr	r2, [pc, #136]	@ (800682c <MX_TIM3_Init+0xb0>)
 80067a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80067a6:	4b20      	ldr	r3, [pc, #128]	@ (8006828 <MX_TIM3_Init+0xac>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006828 <MX_TIM3_Init+0xac>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80067b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006828 <MX_TIM3_Init+0xac>)
 80067b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006828 <MX_TIM3_Init+0xac>)
 80067bc:	2200      	movs	r2, #0
 80067be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067c0:	4b19      	ldr	r3, [pc, #100]	@ (8006828 <MX_TIM3_Init+0xac>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80067c6:	4818      	ldr	r0, [pc, #96]	@ (8006828 <MX_TIM3_Init+0xac>)
 80067c8:	f00c f9c6 	bl	8012b58 <HAL_TIM_PWM_Init>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80067d2:	f000 fe27 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067da:	2300      	movs	r3, #0
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80067de:	f107 031c 	add.w	r3, r7, #28
 80067e2:	4619      	mov	r1, r3
 80067e4:	4810      	ldr	r0, [pc, #64]	@ (8006828 <MX_TIM3_Init+0xac>)
 80067e6:	f00d f841 	bl	801386c <HAL_TIMEx_MasterConfigSynchronization>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80067f0:	f000 fe18 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067f4:	2360      	movs	r3, #96	@ 0x60
 80067f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006804:	463b      	mov	r3, r7
 8006806:	2200      	movs	r2, #0
 8006808:	4619      	mov	r1, r3
 800680a:	4807      	ldr	r0, [pc, #28]	@ (8006828 <MX_TIM3_Init+0xac>)
 800680c:	f00c f9fc 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8006816:	f000 fe05 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800681a:	4803      	ldr	r0, [pc, #12]	@ (8006828 <MX_TIM3_Init+0xac>)
 800681c:	f001 fa78 	bl	8007d10 <HAL_TIM_MspPostInit>

}
 8006820:	bf00      	nop
 8006822:	3728      	adds	r7, #40	@ 0x28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	24001a10 	.word	0x24001a10
 800682c:	40000400 	.word	0x40000400

08006830 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	@ 0x28
 8006834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006836:	f107 031c 	add.w	r3, r7, #28
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	605a      	str	r2, [r3, #4]
 8006840:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006842:	463b      	mov	r3, r7
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	609a      	str	r2, [r3, #8]
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	611a      	str	r2, [r3, #16]
 8006850:	615a      	str	r2, [r3, #20]
 8006852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006854:	4b21      	ldr	r3, [pc, #132]	@ (80068dc <MX_TIM4_Init+0xac>)
 8006856:	4a22      	ldr	r2, [pc, #136]	@ (80068e0 <MX_TIM4_Init+0xb0>)
 8006858:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800685a:	4b20      	ldr	r3, [pc, #128]	@ (80068dc <MX_TIM4_Init+0xac>)
 800685c:	2200      	movs	r2, #0
 800685e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006860:	4b1e      	ldr	r3, [pc, #120]	@ (80068dc <MX_TIM4_Init+0xac>)
 8006862:	2200      	movs	r2, #0
 8006864:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006866:	4b1d      	ldr	r3, [pc, #116]	@ (80068dc <MX_TIM4_Init+0xac>)
 8006868:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800686c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800686e:	4b1b      	ldr	r3, [pc, #108]	@ (80068dc <MX_TIM4_Init+0xac>)
 8006870:	2200      	movs	r2, #0
 8006872:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006874:	4b19      	ldr	r3, [pc, #100]	@ (80068dc <MX_TIM4_Init+0xac>)
 8006876:	2200      	movs	r2, #0
 8006878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800687a:	4818      	ldr	r0, [pc, #96]	@ (80068dc <MX_TIM4_Init+0xac>)
 800687c:	f00c f96c 	bl	8012b58 <HAL_TIM_PWM_Init>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8006886:	f000 fdcd 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800688e:	2300      	movs	r3, #0
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006892:	f107 031c 	add.w	r3, r7, #28
 8006896:	4619      	mov	r1, r3
 8006898:	4810      	ldr	r0, [pc, #64]	@ (80068dc <MX_TIM4_Init+0xac>)
 800689a:	f00c ffe7 	bl	801386c <HAL_TIMEx_MasterConfigSynchronization>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80068a4:	f000 fdbe 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068a8:	2360      	movs	r3, #96	@ 0x60
 80068aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068b8:	463b      	mov	r3, r7
 80068ba:	2200      	movs	r2, #0
 80068bc:	4619      	mov	r1, r3
 80068be:	4807      	ldr	r0, [pc, #28]	@ (80068dc <MX_TIM4_Init+0xac>)
 80068c0:	f00c f9a2 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80068ca:	f000 fdab 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80068ce:	4803      	ldr	r0, [pc, #12]	@ (80068dc <MX_TIM4_Init+0xac>)
 80068d0:	f001 fa1e 	bl	8007d10 <HAL_TIM_MspPostInit>

}
 80068d4:	bf00      	nop
 80068d6:	3728      	adds	r7, #40	@ 0x28
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	24001a5c 	.word	0x24001a5c
 80068e0:	40000800 	.word	0x40000800

080068e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08a      	sub	sp, #40	@ 0x28
 80068e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068ea:	f107 031c 	add.w	r3, r7, #28
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	605a      	str	r2, [r3, #4]
 80068f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80068f6:	463b      	mov	r3, r7
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	609a      	str	r2, [r3, #8]
 8006900:	60da      	str	r2, [r3, #12]
 8006902:	611a      	str	r2, [r3, #16]
 8006904:	615a      	str	r2, [r3, #20]
 8006906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006908:	4b21      	ldr	r3, [pc, #132]	@ (8006990 <MX_TIM5_Init+0xac>)
 800690a:	4a22      	ldr	r2, [pc, #136]	@ (8006994 <MX_TIM5_Init+0xb0>)
 800690c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800690e:	4b20      	ldr	r3, [pc, #128]	@ (8006990 <MX_TIM5_Init+0xac>)
 8006910:	2200      	movs	r2, #0
 8006912:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006914:	4b1e      	ldr	r3, [pc, #120]	@ (8006990 <MX_TIM5_Init+0xac>)
 8006916:	2200      	movs	r2, #0
 8006918:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800691a:	4b1d      	ldr	r3, [pc, #116]	@ (8006990 <MX_TIM5_Init+0xac>)
 800691c:	f04f 32ff 	mov.w	r2, #4294967295
 8006920:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006922:	4b1b      	ldr	r3, [pc, #108]	@ (8006990 <MX_TIM5_Init+0xac>)
 8006924:	2200      	movs	r2, #0
 8006926:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006928:	4b19      	ldr	r3, [pc, #100]	@ (8006990 <MX_TIM5_Init+0xac>)
 800692a:	2200      	movs	r2, #0
 800692c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800692e:	4818      	ldr	r0, [pc, #96]	@ (8006990 <MX_TIM5_Init+0xac>)
 8006930:	f00c f912 	bl	8012b58 <HAL_TIM_PWM_Init>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800693a:	f000 fd73 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006942:	2300      	movs	r3, #0
 8006944:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006946:	f107 031c 	add.w	r3, r7, #28
 800694a:	4619      	mov	r1, r3
 800694c:	4810      	ldr	r0, [pc, #64]	@ (8006990 <MX_TIM5_Init+0xac>)
 800694e:	f00c ff8d 	bl	801386c <HAL_TIMEx_MasterConfigSynchronization>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8006958:	f000 fd64 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800695c:	2360      	movs	r3, #96	@ 0x60
 800695e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006964:	2300      	movs	r3, #0
 8006966:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006968:	2300      	movs	r3, #0
 800696a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800696c:	463b      	mov	r3, r7
 800696e:	2200      	movs	r2, #0
 8006970:	4619      	mov	r1, r3
 8006972:	4807      	ldr	r0, [pc, #28]	@ (8006990 <MX_TIM5_Init+0xac>)
 8006974:	f00c f948 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800697e:	f000 fd51 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8006982:	4803      	ldr	r0, [pc, #12]	@ (8006990 <MX_TIM5_Init+0xac>)
 8006984:	f001 f9c4 	bl	8007d10 <HAL_TIM_MspPostInit>

}
 8006988:	bf00      	nop
 800698a:	3728      	adds	r7, #40	@ 0x28
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	24001aa8 	.word	0x24001aa8
 8006994:	40000c00 	.word	0x40000c00

08006998 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b098      	sub	sp, #96	@ 0x60
 800699c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800699e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	605a      	str	r2, [r3, #4]
 80069a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80069aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	605a      	str	r2, [r3, #4]
 80069b4:	609a      	str	r2, [r3, #8]
 80069b6:	60da      	str	r2, [r3, #12]
 80069b8:	611a      	str	r2, [r3, #16]
 80069ba:	615a      	str	r2, [r3, #20]
 80069bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80069be:	1d3b      	adds	r3, r7, #4
 80069c0:	2234      	movs	r2, #52	@ 0x34
 80069c2:	2100      	movs	r1, #0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f011 feb9 	bl	801873c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80069ca:	4b39      	ldr	r3, [pc, #228]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 80069cc:	4a39      	ldr	r2, [pc, #228]	@ (8006ab4 <MX_TIM8_Init+0x11c>)
 80069ce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80069d0:	4b37      	ldr	r3, [pc, #220]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069d6:	4b36      	ldr	r3, [pc, #216]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 80069d8:	2200      	movs	r2, #0
 80069da:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80069dc:	4b34      	ldr	r3, [pc, #208]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 80069de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069e2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069e4:	4b32      	ldr	r3, [pc, #200]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80069ea:	4b31      	ldr	r3, [pc, #196]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069f0:	4b2f      	ldr	r3, [pc, #188]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80069f6:	482e      	ldr	r0, [pc, #184]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 80069f8:	f00c f8ae 	bl	8012b58 <HAL_TIM_PWM_Init>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8006a02:	f000 fd0f 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a06:	2300      	movs	r3, #0
 8006a08:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006a12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006a16:	4619      	mov	r1, r3
 8006a18:	4825      	ldr	r0, [pc, #148]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 8006a1a:	f00c ff27 	bl	801386c <HAL_TIMEx_MasterConfigSynchronization>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8006a24:	f000 fcfe 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a28:	2360      	movs	r3, #96	@ 0x60
 8006a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a30:	2300      	movs	r3, #0
 8006a32:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006a34:	2300      	movs	r3, #0
 8006a36:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006a40:	2300      	movs	r3, #0
 8006a42:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4818      	ldr	r0, [pc, #96]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 8006a4e:	f00c f8db 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8006a58:	f000 fce4 	bl	8007424 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006a8c:	1d3b      	adds	r3, r7, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4807      	ldr	r0, [pc, #28]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 8006a92:	f00c ff87 	bl	80139a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8006a9c:	f000 fcc2 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8006aa0:	4803      	ldr	r0, [pc, #12]	@ (8006ab0 <MX_TIM8_Init+0x118>)
 8006aa2:	f001 f935 	bl	8007d10 <HAL_TIM_MspPostInit>

}
 8006aa6:	bf00      	nop
 8006aa8:	3760      	adds	r7, #96	@ 0x60
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	24001af4 	.word	0x24001af4
 8006ab4:	40010400 	.word	0x40010400

08006ab8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	@ 0x28
 8006abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006abe:	f107 031c 	add.w	r3, r7, #28
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	605a      	str	r2, [r3, #4]
 8006ac8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006aca:	463b      	mov	r3, r7
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	611a      	str	r2, [r3, #16]
 8006ad8:	615a      	str	r2, [r3, #20]
 8006ada:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8006adc:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006ade:	4a22      	ldr	r2, [pc, #136]	@ (8006b68 <MX_TIM12_Init+0xb0>)
 8006ae0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8006ae2:	4b20      	ldr	r3, [pc, #128]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8006aee:	4b1d      	ldr	r3, [pc, #116]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006af0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006af4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006af6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006afc:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8006b02:	4818      	ldr	r0, [pc, #96]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006b04:	f00c f828 	bl	8012b58 <HAL_TIM_PWM_Init>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8006b0e:	f000 fc89 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8006b1a:	f107 031c 	add.w	r3, r7, #28
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4810      	ldr	r0, [pc, #64]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006b22:	f00c fea3 	bl	801386c <HAL_TIMEx_MasterConfigSynchronization>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8006b2c:	f000 fc7a 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b30:	2360      	movs	r3, #96	@ 0x60
 8006b32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b40:	463b      	mov	r3, r7
 8006b42:	2200      	movs	r2, #0
 8006b44:	4619      	mov	r1, r3
 8006b46:	4807      	ldr	r0, [pc, #28]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006b48:	f00c f85e 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8006b52:	f000 fc67 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8006b56:	4803      	ldr	r0, [pc, #12]	@ (8006b64 <MX_TIM12_Init+0xac>)
 8006b58:	f001 f8da 	bl	8007d10 <HAL_TIM_MspPostInit>

}
 8006b5c:	bf00      	nop
 8006b5e:	3728      	adds	r7, #40	@ 0x28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	24001b40 	.word	0x24001b40
 8006b68:	40001800 	.word	0x40001800

08006b6c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b098      	sub	sp, #96	@ 0x60
 8006b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	605a      	str	r2, [r3, #4]
 8006b7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	605a      	str	r2, [r3, #4]
 8006b88:	609a      	str	r2, [r3, #8]
 8006b8a:	60da      	str	r2, [r3, #12]
 8006b8c:	611a      	str	r2, [r3, #16]
 8006b8e:	615a      	str	r2, [r3, #20]
 8006b90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006b92:	1d3b      	adds	r3, r7, #4
 8006b94:	2234      	movs	r2, #52	@ 0x34
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f011 fdcf 	bl	801873c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8006b9e:	4b34      	ldr	r3, [pc, #208]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006ba0:	4a34      	ldr	r2, [pc, #208]	@ (8006c74 <MX_TIM15_Init+0x108>)
 8006ba2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8006ba4:	4b32      	ldr	r3, [pc, #200]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006baa:	4b31      	ldr	r3, [pc, #196]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8006bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006bb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006bb6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8006bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006bca:	4829      	ldr	r0, [pc, #164]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006bcc:	f00b ffc4 	bl	8012b58 <HAL_TIM_PWM_Init>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8006bd6:	f000 fc25 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006be2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006be6:	4619      	mov	r1, r3
 8006be8:	4821      	ldr	r0, [pc, #132]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006bea:	f00c fe3f 	bl	801386c <HAL_TIMEx_MasterConfigSynchronization>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8006bf4:	f000 fc16 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006bf8:	2360      	movs	r3, #96	@ 0x60
 8006bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c00:	2300      	movs	r3, #0
 8006c02:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006c04:	2300      	movs	r3, #0
 8006c06:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006c10:	2300      	movs	r3, #0
 8006c12:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4814      	ldr	r0, [pc, #80]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006c1e:	f00b fff3 	bl	8012c08 <HAL_TIM_PWM_ConfigChannel>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8006c28:	f000 fbfc 	bl	8007424 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006c40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8006c4e:	1d3b      	adds	r3, r7, #4
 8006c50:	4619      	mov	r1, r3
 8006c52:	4807      	ldr	r0, [pc, #28]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006c54:	f00c fea6 	bl	80139a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8006c5e:	f000 fbe1 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8006c62:	4803      	ldr	r0, [pc, #12]	@ (8006c70 <MX_TIM15_Init+0x104>)
 8006c64:	f001 f854 	bl	8007d10 <HAL_TIM_MspPostInit>

}
 8006c68:	bf00      	nop
 8006c6a:	3760      	adds	r7, #96	@ 0x60
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	24001b8c 	.word	0x24001b8c
 8006c74:	40014000 	.word	0x40014000

08006c78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006c7c:	4b22      	ldr	r3, [pc, #136]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006c7e:	4a23      	ldr	r2, [pc, #140]	@ (8006d0c <MX_UART4_Init+0x94>)
 8006c80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8006c82:	4b21      	ldr	r3, [pc, #132]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006c88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006c90:	4b1d      	ldr	r3, [pc, #116]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006c96:	4b1c      	ldr	r3, [pc, #112]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006c9e:	220c      	movs	r2, #12
 8006ca0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ca2:	4b19      	ldr	r3, [pc, #100]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ca8:	4b17      	ldr	r3, [pc, #92]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006cae:	4b16      	ldr	r3, [pc, #88]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006cb4:	4b14      	ldr	r3, [pc, #80]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006cba:	4b13      	ldr	r3, [pc, #76]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006cc0:	4811      	ldr	r0, [pc, #68]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006cc2:	f00c fefb 	bl	8013abc <HAL_UART_Init>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8006ccc:	f000 fbaa 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	480d      	ldr	r0, [pc, #52]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006cd4:	f00e fc40 	bl	8015558 <HAL_UARTEx_SetTxFifoThreshold>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8006cde:	f000 fba1 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4808      	ldr	r0, [pc, #32]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006ce6:	f00e fc75 	bl	80155d4 <HAL_UARTEx_SetRxFifoThreshold>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8006cf0:	f000 fb98 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8006cf4:	4804      	ldr	r0, [pc, #16]	@ (8006d08 <MX_UART4_Init+0x90>)
 8006cf6:	f00e fbf6 	bl	80154e6 <HAL_UARTEx_DisableFifoMode>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8006d00:	f000 fb90 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006d04:	bf00      	nop
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	24001bd8 	.word	0x24001bd8
 8006d0c:	40004c00 	.word	0x40004c00

08006d10 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006d14:	4b22      	ldr	r3, [pc, #136]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d16:	4a23      	ldr	r2, [pc, #140]	@ (8006da4 <MX_UART5_Init+0x94>)
 8006d18:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006d1a:	4b21      	ldr	r3, [pc, #132]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006d20:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006d22:	4b1f      	ldr	r3, [pc, #124]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006d34:	4b1a      	ldr	r3, [pc, #104]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d36:	220c      	movs	r2, #12
 8006d38:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d3a:	4b19      	ldr	r3, [pc, #100]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d40:	4b17      	ldr	r3, [pc, #92]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006d46:	4b16      	ldr	r3, [pc, #88]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006d4c:	4b14      	ldr	r3, [pc, #80]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d52:	4b13      	ldr	r3, [pc, #76]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006d58:	4811      	ldr	r0, [pc, #68]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d5a:	f00c feaf 	bl	8013abc <HAL_UART_Init>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8006d64:	f000 fb5e 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d68:	2100      	movs	r1, #0
 8006d6a:	480d      	ldr	r0, [pc, #52]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d6c:	f00e fbf4 	bl	8015558 <HAL_UARTEx_SetTxFifoThreshold>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8006d76:	f000 fb55 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4808      	ldr	r0, [pc, #32]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d7e:	f00e fc29 	bl	80155d4 <HAL_UARTEx_SetRxFifoThreshold>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8006d88:	f000 fb4c 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8006d8c:	4804      	ldr	r0, [pc, #16]	@ (8006da0 <MX_UART5_Init+0x90>)
 8006d8e:	f00e fbaa 	bl	80154e6 <HAL_UARTEx_DisableFifoMode>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8006d98:	f000 fb44 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006d9c:	bf00      	nop
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	24001c6c 	.word	0x24001c6c
 8006da4:	40005000 	.word	0x40005000

08006da8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006dac:	4b22      	ldr	r3, [pc, #136]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006dae:	4a23      	ldr	r2, [pc, #140]	@ (8006e3c <MX_UART7_Init+0x94>)
 8006db0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8006db2:	4b21      	ldr	r3, [pc, #132]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006db8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006dba:	4b1f      	ldr	r3, [pc, #124]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006dce:	220c      	movs	r2, #12
 8006dd0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006dd2:	4b19      	ldr	r3, [pc, #100]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006dd8:	4b17      	ldr	r3, [pc, #92]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006dde:	4b16      	ldr	r3, [pc, #88]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006de4:	4b14      	ldr	r3, [pc, #80]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006dea:	4b13      	ldr	r3, [pc, #76]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006df0:	4811      	ldr	r0, [pc, #68]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006df2:	f00c fe63 	bl	8013abc <HAL_UART_Init>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8006dfc:	f000 fb12 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006e00:	2100      	movs	r1, #0
 8006e02:	480d      	ldr	r0, [pc, #52]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006e04:	f00e fba8 	bl	8015558 <HAL_UARTEx_SetTxFifoThreshold>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8006e0e:	f000 fb09 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006e12:	2100      	movs	r1, #0
 8006e14:	4808      	ldr	r0, [pc, #32]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006e16:	f00e fbdd 	bl	80155d4 <HAL_UARTEx_SetRxFifoThreshold>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8006e20:	f000 fb00 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8006e24:	4804      	ldr	r0, [pc, #16]	@ (8006e38 <MX_UART7_Init+0x90>)
 8006e26:	f00e fb5e 	bl	80154e6 <HAL_UARTEx_DisableFifoMode>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8006e30:	f000 faf8 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8006e34:	bf00      	nop
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	24001d00 	.word	0x24001d00
 8006e3c:	40007800 	.word	0x40007800

08006e40 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8006e44:	4b23      	ldr	r3, [pc, #140]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e46:	4a24      	ldr	r2, [pc, #144]	@ (8006ed8 <MX_UART8_Init+0x98>)
 8006e48:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8006e4a:	4b22      	ldr	r3, [pc, #136]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006e50:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8006e52:	4b20      	ldr	r3, [pc, #128]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8006e58:	4b1e      	ldr	r3, [pc, #120]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8006e64:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e66:	220c      	movs	r2, #12
 8006e68:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8006e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e6c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006e70:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e72:	4b18      	ldr	r3, [pc, #96]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e78:	4b16      	ldr	r3, [pc, #88]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006e7e:	4b15      	ldr	r3, [pc, #84]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006e84:	4b13      	ldr	r3, [pc, #76]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8006e8a:	4812      	ldr	r0, [pc, #72]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e8c:	f00c fe16 	bl	8013abc <HAL_UART_Init>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8006e96:	f000 fac5 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	480d      	ldr	r0, [pc, #52]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006e9e:	f00e fb5b 	bl	8015558 <HAL_UARTEx_SetTxFifoThreshold>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8006ea8:	f000 fabc 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006eac:	2100      	movs	r1, #0
 8006eae:	4809      	ldr	r0, [pc, #36]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006eb0:	f00e fb90 	bl	80155d4 <HAL_UARTEx_SetRxFifoThreshold>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8006eba:	f000 fab3 	bl	8007424 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8006ebe:	4805      	ldr	r0, [pc, #20]	@ (8006ed4 <MX_UART8_Init+0x94>)
 8006ec0:	f00e fb11 	bl	80154e6 <HAL_UARTEx_DisableFifoMode>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8006eca:	f000 faab 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8006ece:	bf00      	nop
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	24001d94 	.word	0x24001d94
 8006ed8:	40007c00 	.word	0x40007c00

08006edc <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8006ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8006f94 <MX_USART1_Init+0xb8>)
 8006ee4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8006ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006ee8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006eec:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8006eee:	4b28      	ldr	r3, [pc, #160]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8006ef4:	4b26      	ldr	r3, [pc, #152]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8006efa:	4b25      	ldr	r3, [pc, #148]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8006f00:	4b23      	ldr	r3, [pc, #140]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f02:	220c      	movs	r2, #12
 8006f04:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8006f06:	4b22      	ldr	r3, [pc, #136]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8006f0c:	4b20      	ldr	r3, [pc, #128]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8006f12:	4b1f      	ldr	r3, [pc, #124]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8006f18:	4b1d      	ldr	r3, [pc, #116]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8006f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8006f24:	481a      	ldr	r0, [pc, #104]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f26:	f00e fbe1 	bl	80156ec <HAL_USART_Init>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8006f30:	f000 fa78 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f34:	2100      	movs	r1, #0
 8006f36:	4816      	ldr	r0, [pc, #88]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f38:	f00f fb08 	bl	801654c <HAL_USARTEx_SetTxFifoThreshold>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8006f42:	f000 fa6f 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f46:	2100      	movs	r1, #0
 8006f48:	4811      	ldr	r0, [pc, #68]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f4a:	f00f fb3d 	bl	80165c8 <HAL_USARTEx_SetRxFifoThreshold>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8006f54:	f000 fa66 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8006f58:	2100      	movs	r1, #0
 8006f5a:	480d      	ldr	r0, [pc, #52]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f5c:	f00f fa80 	bl	8016460 <HAL_USARTEx_ConfigNSS>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8006f66:	f000 fa5d 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8006f6a:	4809      	ldr	r0, [pc, #36]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f6c:	f00f fab5 	bl	80164da <HAL_USARTEx_DisableFifoMode>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8006f76:	f000 fa55 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8006f7a:	4805      	ldr	r0, [pc, #20]	@ (8006f90 <MX_USART1_Init+0xb4>)
 8006f7c:	f00f fa1b 	bl	80163b6 <HAL_USARTEx_EnableSlaveMode>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <MX_USART1_Init+0xae>
  {
    Error_Handler();
 8006f86:	f000 fa4d 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	24001e28 	.word	0x24001e28
 8006f94:	40011000 	.word	0x40011000

08006f98 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8006f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800704c <MX_USART2_Init+0xb4>)
 8006f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8007050 <MX_USART2_Init+0xb8>)
 8006fa0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8006fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006fa8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8006faa:	4b28      	ldr	r3, [pc, #160]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8006fb0:	4b26      	ldr	r3, [pc, #152]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8006fb6:	4b25      	ldr	r3, [pc, #148]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8006fbc:	4b23      	ldr	r3, [pc, #140]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fbe:	220c      	movs	r2, #12
 8006fc0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8006fc2:	4b22      	ldr	r3, [pc, #136]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8006fc8:	4b20      	ldr	r3, [pc, #128]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8006fce:	4b1f      	ldr	r3, [pc, #124]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8006fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 8006fda:	4b1c      	ldr	r3, [pc, #112]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fdc:	2201      	movs	r2, #1
 8006fde:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8006fe0:	481a      	ldr	r0, [pc, #104]	@ (800704c <MX_USART2_Init+0xb4>)
 8006fe2:	f00e fb83 	bl	80156ec <HAL_USART_Init>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8006fec:	f000 fa1a 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4816      	ldr	r0, [pc, #88]	@ (800704c <MX_USART2_Init+0xb4>)
 8006ff4:	f00f faaa 	bl	801654c <HAL_USARTEx_SetTxFifoThreshold>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8006ffe:	f000 fa11 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007002:	2100      	movs	r1, #0
 8007004:	4811      	ldr	r0, [pc, #68]	@ (800704c <MX_USART2_Init+0xb4>)
 8007006:	f00f fadf 	bl	80165c8 <HAL_USARTEx_SetRxFifoThreshold>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8007010:	f000 fa08 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart2, USART_NSS_HARD) != HAL_OK)
 8007014:	2100      	movs	r1, #0
 8007016:	480d      	ldr	r0, [pc, #52]	@ (800704c <MX_USART2_Init+0xb4>)
 8007018:	f00f fa22 	bl	8016460 <HAL_USARTEx_ConfigNSS>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <MX_USART2_Init+0x8e>
  {
    Error_Handler();
 8007022:	f000 f9ff 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8007026:	4809      	ldr	r0, [pc, #36]	@ (800704c <MX_USART2_Init+0xb4>)
 8007028:	f00f fa57 	bl	80164da <HAL_USARTEx_DisableFifoMode>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <MX_USART2_Init+0x9e>
  {
    Error_Handler();
 8007032:	f000 f9f7 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 8007036:	4805      	ldr	r0, [pc, #20]	@ (800704c <MX_USART2_Init+0xb4>)
 8007038:	f00f f9bd 	bl	80163b6 <HAL_USARTEx_EnableSlaveMode>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <MX_USART2_Init+0xae>
  {
    Error_Handler();
 8007042:	f000 f9ef 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007046:	bf00      	nop
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	24001e88 	.word	0x24001e88
 8007050:	40004400 	.word	0x40004400

08007054 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8007058:	4b2b      	ldr	r3, [pc, #172]	@ (8007108 <MX_USART3_Init+0xb4>)
 800705a:	4a2c      	ldr	r2, [pc, #176]	@ (800710c <MX_USART3_Init+0xb8>)
 800705c:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 800705e:	4b2a      	ldr	r3, [pc, #168]	@ (8007108 <MX_USART3_Init+0xb4>)
 8007060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007064:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8007066:	4b28      	ldr	r3, [pc, #160]	@ (8007108 <MX_USART3_Init+0xb4>)
 8007068:	2200      	movs	r2, #0
 800706a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 800706c:	4b26      	ldr	r3, [pc, #152]	@ (8007108 <MX_USART3_Init+0xb4>)
 800706e:	2200      	movs	r2, #0
 8007070:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8007072:	4b25      	ldr	r3, [pc, #148]	@ (8007108 <MX_USART3_Init+0xb4>)
 8007074:	2200      	movs	r2, #0
 8007076:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8007078:	4b23      	ldr	r3, [pc, #140]	@ (8007108 <MX_USART3_Init+0xb4>)
 800707a:	220c      	movs	r2, #12
 800707c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800707e:	4b22      	ldr	r3, [pc, #136]	@ (8007108 <MX_USART3_Init+0xb4>)
 8007080:	2200      	movs	r2, #0
 8007082:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8007084:	4b20      	ldr	r3, [pc, #128]	@ (8007108 <MX_USART3_Init+0xb4>)
 8007086:	2200      	movs	r2, #0
 8007088:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800708a:	4b1f      	ldr	r3, [pc, #124]	@ (8007108 <MX_USART3_Init+0xb4>)
 800708c:	2200      	movs	r2, #0
 800708e:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8007090:	4b1d      	ldr	r3, [pc, #116]	@ (8007108 <MX_USART3_Init+0xb4>)
 8007092:	2200      	movs	r2, #0
 8007094:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8007096:	4b1c      	ldr	r3, [pc, #112]	@ (8007108 <MX_USART3_Init+0xb4>)
 8007098:	2201      	movs	r2, #1
 800709a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 800709c:	481a      	ldr	r0, [pc, #104]	@ (8007108 <MX_USART3_Init+0xb4>)
 800709e:	f00e fb25 	bl	80156ec <HAL_USART_Init>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80070a8:	f000 f9bc 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070ac:	2100      	movs	r1, #0
 80070ae:	4816      	ldr	r0, [pc, #88]	@ (8007108 <MX_USART3_Init+0xb4>)
 80070b0:	f00f fa4c 	bl	801654c <HAL_USARTEx_SetTxFifoThreshold>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 80070ba:	f000 f9b3 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070be:	2100      	movs	r1, #0
 80070c0:	4811      	ldr	r0, [pc, #68]	@ (8007108 <MX_USART3_Init+0xb4>)
 80070c2:	f00f fa81 	bl	80165c8 <HAL_USARTEx_SetRxFifoThreshold>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 80070cc:	f000 f9aa 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 80070d0:	2100      	movs	r1, #0
 80070d2:	480d      	ldr	r0, [pc, #52]	@ (8007108 <MX_USART3_Init+0xb4>)
 80070d4:	f00f f9c4 	bl	8016460 <HAL_USARTEx_ConfigNSS>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 80070de:	f000 f9a1 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80070e2:	4809      	ldr	r0, [pc, #36]	@ (8007108 <MX_USART3_Init+0xb4>)
 80070e4:	f00f f9f9 	bl	80164da <HAL_USARTEx_DisableFifoMode>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 80070ee:	f000 f999 	bl	8007424 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 80070f2:	4805      	ldr	r0, [pc, #20]	@ (8007108 <MX_USART3_Init+0xb4>)
 80070f4:	f00f f95f 	bl	80163b6 <HAL_USARTEx_EnableSlaveMode>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 80070fe:	f000 f991 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007102:	bf00      	nop
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	24001ee8 	.word	0x24001ee8
 800710c:	40004800 	.word	0x40004800

08007110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08c      	sub	sp, #48	@ 0x30
 8007114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007116:	f107 031c 	add.w	r3, r7, #28
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	605a      	str	r2, [r3, #4]
 8007120:	609a      	str	r2, [r3, #8]
 8007122:	60da      	str	r2, [r3, #12]
 8007124:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007126:	4ba3      	ldr	r3, [pc, #652]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 8007128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800712c:	4aa1      	ldr	r2, [pc, #644]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 800712e:	f043 0304 	orr.w	r3, r3, #4
 8007132:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007136:	4b9f      	ldr	r3, [pc, #636]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 8007138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007144:	4b9b      	ldr	r3, [pc, #620]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 8007146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800714a:	4a9a      	ldr	r2, [pc, #616]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 800714c:	f043 0310 	orr.w	r3, r3, #16
 8007150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007154:	4b97      	ldr	r3, [pc, #604]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 8007156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007162:	4b94      	ldr	r3, [pc, #592]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 8007164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007168:	4a92      	ldr	r2, [pc, #584]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 800716a:	f043 0302 	orr.w	r3, r3, #2
 800716e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007172:	4b90      	ldr	r3, [pc, #576]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 8007174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007180:	4b8c      	ldr	r3, [pc, #560]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 8007182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007186:	4a8b      	ldr	r2, [pc, #556]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007190:	4b88      	ldr	r3, [pc, #544]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 8007192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800719e:	4b85      	ldr	r3, [pc, #532]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 80071a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071a4:	4a83      	ldr	r2, [pc, #524]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 80071a6:	f043 0308 	orr.w	r3, r3, #8
 80071aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80071ae:	4b81      	ldr	r3, [pc, #516]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 80071b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80071bc:	4b7d      	ldr	r3, [pc, #500]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 80071be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071c2:	4a7c      	ldr	r2, [pc, #496]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 80071c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80071cc:	4b79      	ldr	r3, [pc, #484]	@ (80073b4 <MX_GPIO_Init+0x2a4>)
 80071ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d6:	607b      	str	r3, [r7, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80071da:	2200      	movs	r2, #0
 80071dc:	2110      	movs	r1, #16
 80071de:	4876      	ldr	r0, [pc, #472]	@ (80073b8 <MX_GPIO_Init+0x2a8>)
 80071e0:	f004 f8e6 	bl	800b3b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80071e4:	2200      	movs	r2, #0
 80071e6:	2101      	movs	r1, #1
 80071e8:	4874      	ldr	r0, [pc, #464]	@ (80073bc <MX_GPIO_Init+0x2ac>)
 80071ea:	f004 f8e1 	bl	800b3b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 80071ee:	2200      	movs	r2, #0
 80071f0:	2110      	movs	r1, #16
 80071f2:	4873      	ldr	r0, [pc, #460]	@ (80073c0 <MX_GPIO_Init+0x2b0>)
 80071f4:	f004 f8dc 	bl	800b3b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 80071f8:	2200      	movs	r2, #0
 80071fa:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80071fe:	4871      	ldr	r0, [pc, #452]	@ (80073c4 <MX_GPIO_Init+0x2b4>)
 8007200:	f004 f8d6 	bl	800b3b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8007204:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8007208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800720a:	2300      	movs	r3, #0
 800720c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800720e:	2300      	movs	r3, #0
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007212:	f107 031c 	add.w	r3, r7, #28
 8007216:	4619      	mov	r1, r3
 8007218:	4868      	ldr	r0, [pc, #416]	@ (80073bc <MX_GPIO_Init+0x2ac>)
 800721a:	f003 ff09 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 800721e:	2308      	movs	r3, #8
 8007220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007222:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007228:	2300      	movs	r3, #0
 800722a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 800722c:	f107 031c 	add.w	r3, r7, #28
 8007230:	4619      	mov	r1, r3
 8007232:	4861      	ldr	r0, [pc, #388]	@ (80073b8 <MX_GPIO_Init+0x2a8>)
 8007234:	f003 fefc 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8007238:	2310      	movs	r3, #16
 800723a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800723c:	2301      	movs	r3, #1
 800723e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007244:	2300      	movs	r3, #0
 8007246:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8007248:	f107 031c 	add.w	r3, r7, #28
 800724c:	4619      	mov	r1, r3
 800724e:	485a      	ldr	r0, [pc, #360]	@ (80073b8 <MX_GPIO_Init+0x2a8>)
 8007250:	f003 feee 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin;
 8007254:	2310      	movs	r3, #16
 8007256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007258:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800725c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725e:	2300      	movs	r3, #0
 8007260:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT2_GPIO_Port, &GPIO_InitStruct);
 8007262:	f107 031c 	add.w	r3, r7, #28
 8007266:	4619      	mov	r1, r3
 8007268:	4857      	ldr	r0, [pc, #348]	@ (80073c8 <MX_GPIO_Init+0x2b8>)
 800726a:	f003 fee1 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800726e:	2302      	movs	r3, #2
 8007270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007272:	2303      	movs	r3, #3
 8007274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007276:	2300      	movs	r3, #0
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800727a:	f107 031c 	add.w	r3, r7, #28
 800727e:	4619      	mov	r1, r3
 8007280:	4851      	ldr	r0, [pc, #324]	@ (80073c8 <MX_GPIO_Init+0x2b8>)
 8007282:	f003 fed5 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007286:	2301      	movs	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800728a:	2301      	movs	r3, #1
 800728c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800728e:	2300      	movs	r3, #0
 8007290:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007292:	2300      	movs	r3, #0
 8007294:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007296:	f107 031c 	add.w	r3, r7, #28
 800729a:	4619      	mov	r1, r3
 800729c:	4847      	ldr	r0, [pc, #284]	@ (80073bc <MX_GPIO_Init+0x2ac>)
 800729e:	f003 fec7 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072a2:	2308      	movs	r3, #8
 80072a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072a6:	2303      	movs	r3, #3
 80072a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072ae:	f107 031c 	add.w	r3, r7, #28
 80072b2:	4619      	mov	r1, r3
 80072b4:	4841      	ldr	r0, [pc, #260]	@ (80073bc <MX_GPIO_Init+0x2ac>)
 80072b6:	f003 febb 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 80072ba:	2310      	movs	r3, #16
 80072bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072be:	2301      	movs	r3, #1
 80072c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c6:	2300      	movs	r3, #0
 80072c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 80072ca:	f107 031c 	add.w	r3, r7, #28
 80072ce:	4619      	mov	r1, r3
 80072d0:	483b      	ldr	r0, [pc, #236]	@ (80073c0 <MX_GPIO_Init+0x2b0>)
 80072d2:	f003 fead 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80072d6:	2304      	movs	r3, #4
 80072d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072da:	2303      	movs	r3, #3
 80072dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072e2:	f107 031c 	add.w	r3, r7, #28
 80072e6:	4619      	mov	r1, r3
 80072e8:	4836      	ldr	r0, [pc, #216]	@ (80073c4 <MX_GPIO_Init+0x2b4>)
 80072ea:	f003 fea1 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 80072ee:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80072f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072f4:	2300      	movs	r3, #0
 80072f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072fc:	f107 031c 	add.w	r3, r7, #28
 8007300:	4619      	mov	r1, r3
 8007302:	482d      	ldr	r0, [pc, #180]	@ (80073b8 <MX_GPIO_Init+0x2a8>)
 8007304:	f003 fe94 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800730c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800730e:	2301      	movs	r3, #1
 8007310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007312:	2300      	movs	r3, #0
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007316:	2300      	movs	r3, #0
 8007318:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800731a:	f107 031c 	add.w	r3, r7, #28
 800731e:	4619      	mov	r1, r3
 8007320:	4828      	ldr	r0, [pc, #160]	@ (80073c4 <MX_GPIO_Init+0x2b4>)
 8007322:	f003 fe85 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800732a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800732c:	2303      	movs	r3, #3
 800732e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007330:	2300      	movs	r3, #0
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007334:	f107 031c 	add.w	r3, r7, #28
 8007338:	4619      	mov	r1, r3
 800733a:	481f      	ldr	r0, [pc, #124]	@ (80073b8 <MX_GPIO_Init+0x2a8>)
 800733c:	f003 fe78 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007340:	2308      	movs	r3, #8
 8007342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007344:	2303      	movs	r3, #3
 8007346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007348:	2300      	movs	r3, #0
 800734a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800734c:	f107 031c 	add.w	r3, r7, #28
 8007350:	4619      	mov	r1, r3
 8007352:	481b      	ldr	r0, [pc, #108]	@ (80073c0 <MX_GPIO_Init+0x2b0>)
 8007354:	f003 fe6c 	bl	800b030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = SPI2_CSB_Pin;
 8007358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800735c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800735e:	2301      	movs	r3, #1
 8007360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007366:	2302      	movs	r3, #2
 8007368:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CSB_GPIO_Port, &GPIO_InitStruct);
 800736a:	f107 031c 	add.w	r3, r7, #28
 800736e:	4619      	mov	r1, r3
 8007370:	4814      	ldr	r0, [pc, #80]	@ (80073c4 <MX_GPIO_Init+0x2b4>)
 8007372:	f003 fe5d 	bl	800b030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8007376:	2200      	movs	r2, #0
 8007378:	2100      	movs	r1, #0
 800737a:	2009      	movs	r0, #9
 800737c:	f003 f839 	bl	800a3f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8007380:	2009      	movs	r0, #9
 8007382:	f003 f850 	bl	800a426 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	200a      	movs	r0, #10
 800738c:	f003 f831 	bl	800a3f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8007390:	200a      	movs	r0, #10
 8007392:	f003 f848 	bl	800a426 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 8007396:	2200      	movs	r2, #0
 8007398:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800739c:	4809      	ldr	r0, [pc, #36]	@ (80073c4 <MX_GPIO_Init+0x2b4>)
 800739e:	f004 f807 	bl	800b3b0 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 80073a2:	2200      	movs	r2, #0
 80073a4:	2110      	movs	r1, #16
 80073a6:	4806      	ldr	r0, [pc, #24]	@ (80073c0 <MX_GPIO_Init+0x2b0>)
 80073a8:	f004 f802 	bl	800b3b0 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80073ac:	bf00      	nop
 80073ae:	3730      	adds	r7, #48	@ 0x30
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	58024400 	.word	0x58024400
 80073b8:	58021000 	.word	0x58021000
 80073bc:	58020800 	.word	0x58020800
 80073c0:	58020000 	.word	0x58020000
 80073c4:	58020400 	.word	0x58020400
 80073c8:	58020c00 	.word	0x58020c00

080073cc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80073d2:	463b      	mov	r3, r7
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	605a      	str	r2, [r3, #4]
 80073da:	609a      	str	r2, [r3, #8]
 80073dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80073de:	f003 f83d 	bl	800a45c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80073ee:	231f      	movs	r3, #31
 80073f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80073f2:	2387      	movs	r3, #135	@ 0x87
 80073f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80073fa:	2300      	movs	r3, #0
 80073fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80073fe:	2301      	movs	r3, #1
 8007400:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007402:	2301      	movs	r3, #1
 8007404:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007406:	2300      	movs	r3, #0
 8007408:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800740e:	463b      	mov	r3, r7
 8007410:	4618      	mov	r0, r3
 8007412:	f003 f85b 	bl	800a4cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007416:	2004      	movs	r0, #4
 8007418:	f003 f838 	bl	800a48c <HAL_MPU_Enable>

}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007428:	b672      	cpsid	i
}
 800742a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800742c:	bf00      	nop
 800742e:	e7fd      	b.n	800742c <Error_Handler+0x8>

08007430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007436:	4b0a      	ldr	r3, [pc, #40]	@ (8007460 <HAL_MspInit+0x30>)
 8007438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800743c:	4a08      	ldr	r2, [pc, #32]	@ (8007460 <HAL_MspInit+0x30>)
 800743e:	f043 0302 	orr.w	r3, r3, #2
 8007442:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007446:	4b06      	ldr	r3, [pc, #24]	@ (8007460 <HAL_MspInit+0x30>)
 8007448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	58024400 	.word	0x58024400

08007464 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08c      	sub	sp, #48	@ 0x30
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800746c:	f107 031c 	add.w	r3, r7, #28
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	609a      	str	r2, [r3, #8]
 8007478:	60da      	str	r2, [r3, #12]
 800747a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a39      	ldr	r2, [pc, #228]	@ (8007568 <HAL_ADC_MspInit+0x104>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d133      	bne.n	80074ee <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8007486:	4b39      	ldr	r3, [pc, #228]	@ (800756c <HAL_ADC_MspInit+0x108>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3301      	adds	r3, #1
 800748c:	4a37      	ldr	r2, [pc, #220]	@ (800756c <HAL_ADC_MspInit+0x108>)
 800748e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8007490:	4b36      	ldr	r3, [pc, #216]	@ (800756c <HAL_ADC_MspInit+0x108>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d10e      	bne.n	80074b6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8007498:	4b35      	ldr	r3, [pc, #212]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 800749a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800749e:	4a34      	ldr	r2, [pc, #208]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 80074a0:	f043 0320 	orr.w	r3, r3, #32
 80074a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80074a8:	4b31      	ldr	r3, [pc, #196]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 80074aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	61bb      	str	r3, [r7, #24]
 80074b4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074b6:	4b2e      	ldr	r3, [pc, #184]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 80074b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074bc:	4a2c      	ldr	r2, [pc, #176]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 80074be:	f043 0304 	orr.w	r3, r3, #4
 80074c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 80074c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80074d4:	2330      	movs	r3, #48	@ 0x30
 80074d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074d8:	2303      	movs	r3, #3
 80074da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074e0:	f107 031c 	add.w	r3, r7, #28
 80074e4:	4619      	mov	r1, r3
 80074e6:	4823      	ldr	r0, [pc, #140]	@ (8007574 <HAL_ADC_MspInit+0x110>)
 80074e8:	f003 fda2 	bl	800b030 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80074ec:	e037      	b.n	800755e <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a21      	ldr	r2, [pc, #132]	@ (8007578 <HAL_ADC_MspInit+0x114>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d132      	bne.n	800755e <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80074f8:	4b1c      	ldr	r3, [pc, #112]	@ (800756c <HAL_ADC_MspInit+0x108>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3301      	adds	r3, #1
 80074fe:	4a1b      	ldr	r2, [pc, #108]	@ (800756c <HAL_ADC_MspInit+0x108>)
 8007500:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8007502:	4b1a      	ldr	r3, [pc, #104]	@ (800756c <HAL_ADC_MspInit+0x108>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d10e      	bne.n	8007528 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800750a:	4b19      	ldr	r3, [pc, #100]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 800750c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007510:	4a17      	ldr	r2, [pc, #92]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 8007512:	f043 0320 	orr.w	r3, r3, #32
 8007516:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800751a:	4b15      	ldr	r3, [pc, #84]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 800751c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007528:	4b11      	ldr	r3, [pc, #68]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 800752a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800752e:	4a10      	ldr	r2, [pc, #64]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 8007530:	f043 0302 	orr.w	r3, r3, #2
 8007534:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007538:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <HAL_ADC_MspInit+0x10c>)
 800753a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007546:	2303      	movs	r3, #3
 8007548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800754a:	2303      	movs	r3, #3
 800754c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754e:	2300      	movs	r3, #0
 8007550:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007552:	f107 031c 	add.w	r3, r7, #28
 8007556:	4619      	mov	r1, r3
 8007558:	4808      	ldr	r0, [pc, #32]	@ (800757c <HAL_ADC_MspInit+0x118>)
 800755a:	f003 fd69 	bl	800b030 <HAL_GPIO_Init>
}
 800755e:	bf00      	nop
 8007560:	3730      	adds	r7, #48	@ 0x30
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40022000 	.word	0x40022000
 800756c:	24001f48 	.word	0x24001f48
 8007570:	58024400 	.word	0x58024400
 8007574:	58020800 	.word	0x58020800
 8007578:	40022100 	.word	0x40022100
 800757c:	58020400 	.word	0x58020400

08007580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b0bc      	sub	sp, #240	@ 0xf0
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007588:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007598:	f107 0320 	add.w	r3, r7, #32
 800759c:	22b8      	movs	r2, #184	@ 0xb8
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f011 f8cb 	bl	801873c <memset>
  if(hi2c->Instance==I2C1)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a7c      	ldr	r2, [pc, #496]	@ (800779c <HAL_I2C_MspInit+0x21c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d147      	bne.n	8007640 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80075b0:	f04f 0208 	mov.w	r2, #8
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80075bc:	2300      	movs	r3, #0
 80075be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80075c2:	f107 0320 	add.w	r3, r7, #32
 80075c6:	4618      	mov	r0, r3
 80075c8:	f006 fba2 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80075d2:	f7ff ff27 	bl	8007424 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075d6:	4b72      	ldr	r3, [pc, #456]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 80075d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075dc:	4a70      	ldr	r2, [pc, #448]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 80075de:	f043 0302 	orr.w	r3, r3, #2
 80075e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80075e6:	4b6e      	ldr	r3, [pc, #440]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 80075e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80075f4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80075f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075fc:	2312      	movs	r3, #18
 80075fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007602:	2300      	movs	r3, #0
 8007604:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007608:	2300      	movs	r3, #0
 800760a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800760e:	2304      	movs	r3, #4
 8007610:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007614:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007618:	4619      	mov	r1, r3
 800761a:	4862      	ldr	r0, [pc, #392]	@ (80077a4 <HAL_I2C_MspInit+0x224>)
 800761c:	f003 fd08 	bl	800b030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007620:	4b5f      	ldr	r3, [pc, #380]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 8007622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007626:	4a5e      	ldr	r2, [pc, #376]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 8007628:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800762c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007630:	4b5b      	ldr	r3, [pc, #364]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 8007632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007636:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800763e:	e0a8      	b.n	8007792 <HAL_I2C_MspInit+0x212>
  else if(hi2c->Instance==I2C2)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a58      	ldr	r2, [pc, #352]	@ (80077a8 <HAL_I2C_MspInit+0x228>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d147      	bne.n	80076da <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800764a:	f04f 0208 	mov.w	r2, #8
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8007656:	2300      	movs	r3, #0
 8007658:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800765c:	f107 0320 	add.w	r3, r7, #32
 8007660:	4618      	mov	r0, r3
 8007662:	f006 fb55 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 800766c:	f7ff feda 	bl	8007424 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007670:	4b4b      	ldr	r3, [pc, #300]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 8007672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007676:	4a4a      	ldr	r2, [pc, #296]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 8007678:	f043 0302 	orr.w	r3, r3, #2
 800767c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007680:	4b47      	ldr	r3, [pc, #284]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 8007682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800768e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007696:	2312      	movs	r3, #18
 8007698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769c:	2300      	movs	r3, #0
 800769e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076a2:	2300      	movs	r3, #0
 80076a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80076a8:	2304      	movs	r3, #4
 80076aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80076b2:	4619      	mov	r1, r3
 80076b4:	483b      	ldr	r0, [pc, #236]	@ (80077a4 <HAL_I2C_MspInit+0x224>)
 80076b6:	f003 fcbb 	bl	800b030 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80076ba:	4b39      	ldr	r3, [pc, #228]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 80076bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076c0:	4a37      	ldr	r2, [pc, #220]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 80076c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80076c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80076ca:	4b35      	ldr	r3, [pc, #212]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 80076cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076d4:	613b      	str	r3, [r7, #16]
 80076d6:	693b      	ldr	r3, [r7, #16]
}
 80076d8:	e05b      	b.n	8007792 <HAL_I2C_MspInit+0x212>
  else if(hi2c->Instance==I2C4)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a33      	ldr	r2, [pc, #204]	@ (80077ac <HAL_I2C_MspInit+0x22c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d156      	bne.n	8007792 <HAL_I2C_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80076e4:	f04f 0210 	mov.w	r2, #16
 80076e8:	f04f 0300 	mov.w	r3, #0
 80076ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80076f0:	2300      	movs	r3, #0
 80076f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076f6:	f107 0320 	add.w	r3, r7, #32
 80076fa:	4618      	mov	r0, r3
 80076fc:	f006 fb08 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8007706:	f7ff fe8d 	bl	8007424 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800770a:	4b25      	ldr	r3, [pc, #148]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 800770c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007710:	4a23      	ldr	r2, [pc, #140]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 8007712:	f043 0308 	orr.w	r3, r3, #8
 8007716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800771a:	4b21      	ldr	r3, [pc, #132]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 800771c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8007728:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800772c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007730:	2312      	movs	r3, #18
 8007732:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007736:	2300      	movs	r3, #0
 8007738:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800773c:	2303      	movs	r3, #3
 800773e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007742:	2304      	movs	r3, #4
 8007744:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007748:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800774c:	4619      	mov	r1, r3
 800774e:	4818      	ldr	r0, [pc, #96]	@ (80077b0 <HAL_I2C_MspInit+0x230>)
 8007750:	f003 fc6e 	bl	800b030 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007754:	4b12      	ldr	r3, [pc, #72]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 8007756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800775a:	4a11      	ldr	r2, [pc, #68]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 800775c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007760:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007764:	4b0e      	ldr	r3, [pc, #56]	@ (80077a0 <HAL_I2C_MspInit+0x220>)
 8007766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800776a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776e:	60bb      	str	r3, [r7, #8]
 8007770:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8007772:	2200      	movs	r2, #0
 8007774:	2100      	movs	r1, #0
 8007776:	205f      	movs	r0, #95	@ 0x5f
 8007778:	f002 fe3b 	bl	800a3f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800777c:	205f      	movs	r0, #95	@ 0x5f
 800777e:	f002 fe52 	bl	800a426 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8007782:	2200      	movs	r2, #0
 8007784:	2100      	movs	r1, #0
 8007786:	2060      	movs	r0, #96	@ 0x60
 8007788:	f002 fe33 	bl	800a3f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800778c:	2060      	movs	r0, #96	@ 0x60
 800778e:	f002 fe4a 	bl	800a426 <HAL_NVIC_EnableIRQ>
}
 8007792:	bf00      	nop
 8007794:	37f0      	adds	r7, #240	@ 0xf0
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	40005400 	.word	0x40005400
 80077a0:	58024400 	.word	0x58024400
 80077a4:	58020400 	.word	0x58020400
 80077a8:	40005800 	.word	0x40005800
 80077ac:	58001c00 	.word	0x58001c00
 80077b0:	58020c00 	.word	0x58020c00

080077b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b0ba      	sub	sp, #232	@ 0xe8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	609a      	str	r2, [r3, #8]
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80077cc:	f107 0318 	add.w	r3, r7, #24
 80077d0:	22b8      	movs	r2, #184	@ 0xb8
 80077d2:	2100      	movs	r1, #0
 80077d4:	4618      	mov	r0, r3
 80077d6:	f010 ffb1 	bl	801873c <memset>
  if(hsd->Instance==SDMMC1)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a38      	ldr	r2, [pc, #224]	@ (80078c0 <HAL_SD_MspInit+0x10c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d169      	bne.n	80078b8 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80077e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80077f4:	f107 0318 	add.w	r3, r7, #24
 80077f8:	4618      	mov	r0, r3
 80077fa:	f006 fa89 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8007804:	f7ff fe0e 	bl	8007424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007808:	4b2e      	ldr	r3, [pc, #184]	@ (80078c4 <HAL_SD_MspInit+0x110>)
 800780a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800780e:	4a2d      	ldr	r2, [pc, #180]	@ (80078c4 <HAL_SD_MspInit+0x110>)
 8007810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007814:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8007818:	4b2a      	ldr	r3, [pc, #168]	@ (80078c4 <HAL_SD_MspInit+0x110>)
 800781a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800781e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007826:	4b27      	ldr	r3, [pc, #156]	@ (80078c4 <HAL_SD_MspInit+0x110>)
 8007828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800782c:	4a25      	ldr	r2, [pc, #148]	@ (80078c4 <HAL_SD_MspInit+0x110>)
 800782e:	f043 0308 	orr.w	r3, r3, #8
 8007832:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007836:	4b23      	ldr	r3, [pc, #140]	@ (80078c4 <HAL_SD_MspInit+0x110>)
 8007838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007844:	4b1f      	ldr	r3, [pc, #124]	@ (80078c4 <HAL_SD_MspInit+0x110>)
 8007846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800784a:	4a1e      	ldr	r2, [pc, #120]	@ (80078c4 <HAL_SD_MspInit+0x110>)
 800784c:	f043 0304 	orr.w	r3, r3, #4
 8007850:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007854:	4b1b      	ldr	r3, [pc, #108]	@ (80078c4 <HAL_SD_MspInit+0x110>)
 8007856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007862:	2304      	movs	r3, #4
 8007864:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007868:	2302      	movs	r3, #2
 800786a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786e:	2300      	movs	r3, #0
 8007870:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007874:	2303      	movs	r3, #3
 8007876:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800787a:	230c      	movs	r3, #12
 800787c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007880:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007884:	4619      	mov	r1, r3
 8007886:	4810      	ldr	r0, [pc, #64]	@ (80078c8 <HAL_SD_MspInit+0x114>)
 8007888:	f003 fbd2 	bl	800b030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 800788c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8007890:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007894:	2302      	movs	r3, #2
 8007896:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789a:	2300      	movs	r3, #0
 800789c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078a0:	2303      	movs	r3, #3
 80078a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80078a6:	230c      	movs	r3, #12
 80078a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80078b0:	4619      	mov	r1, r3
 80078b2:	4806      	ldr	r0, [pc, #24]	@ (80078cc <HAL_SD_MspInit+0x118>)
 80078b4:	f003 fbbc 	bl	800b030 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80078b8:	bf00      	nop
 80078ba:	37e8      	adds	r7, #232	@ 0xe8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	52007000 	.word	0x52007000
 80078c4:	58024400 	.word	0x58024400
 80078c8:	58020c00 	.word	0x58020c00
 80078cc:	58020800 	.word	0x58020800

080078d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b0be      	sub	sp, #248	@ 0xf8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	609a      	str	r2, [r3, #8]
 80078e4:	60da      	str	r2, [r3, #12]
 80078e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80078e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80078ec:	22b8      	movs	r2, #184	@ 0xb8
 80078ee:	2100      	movs	r1, #0
 80078f0:	4618      	mov	r0, r3
 80078f2:	f010 ff23 	bl	801873c <memset>
  if(hspi->Instance==SPI1)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a97      	ldr	r2, [pc, #604]	@ (8007b58 <HAL_SPI_MspInit+0x288>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d16a      	bne.n	80079d6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8007900:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800790c:	2300      	movs	r3, #0
 800790e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007912:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007916:	4618      	mov	r0, r3
 8007918:	f006 f9fa 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8007922:	f7ff fd7f 	bl	8007424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007926:	4b8d      	ldr	r3, [pc, #564]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800792c:	4a8b      	ldr	r2, [pc, #556]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 800792e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007932:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007936:	4b89      	ldr	r3, [pc, #548]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800793c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007944:	4b85      	ldr	r3, [pc, #532]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800794a:	4a84      	ldr	r2, [pc, #528]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 800794c:	f043 0302 	orr.w	r3, r3, #2
 8007950:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007954:	4b81      	ldr	r3, [pc, #516]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	623b      	str	r3, [r7, #32]
 8007960:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007962:	4b7e      	ldr	r3, [pc, #504]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007968:	4a7c      	ldr	r2, [pc, #496]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 800796a:	f043 0301 	orr.w	r3, r3, #1
 800796e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007972:	4b7a      	ldr	r3, [pc, #488]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007980:	2310      	movs	r3, #16
 8007982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007986:	2302      	movs	r3, #2
 8007988:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798c:	2300      	movs	r3, #0
 800798e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007992:	2300      	movs	r3, #0
 8007994:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007998:	2305      	movs	r3, #5
 800799a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800799e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80079a2:	4619      	mov	r1, r3
 80079a4:	486e      	ldr	r0, [pc, #440]	@ (8007b60 <HAL_SPI_MspInit+0x290>)
 80079a6:	f003 fb43 	bl	800b030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80079aa:	23a0      	movs	r3, #160	@ 0xa0
 80079ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079b0:	2302      	movs	r3, #2
 80079b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079bc:	2300      	movs	r3, #0
 80079be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80079c2:	2305      	movs	r3, #5
 80079c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80079cc:	4619      	mov	r1, r3
 80079ce:	4865      	ldr	r0, [pc, #404]	@ (8007b64 <HAL_SPI_MspInit+0x294>)
 80079d0:	f003 fb2e 	bl	800b030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80079d4:	e0bb      	b.n	8007b4e <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a63      	ldr	r2, [pc, #396]	@ (8007b68 <HAL_SPI_MspInit+0x298>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d16b      	bne.n	8007ab8 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80079e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80079f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80079f6:	4618      	mov	r0, r3
 80079f8:	f006 f98a 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8007a02:	f7ff fd0f 	bl	8007424 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007a06:	4b55      	ldr	r3, [pc, #340]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a0c:	4a53      	ldr	r2, [pc, #332]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007a16:	4b51      	ldr	r3, [pc, #324]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a24:	4b4d      	ldr	r3, [pc, #308]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a2a:	4a4c      	ldr	r2, [pc, #304]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a34:	4b49      	ldr	r3, [pc, #292]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a42:	4b46      	ldr	r3, [pc, #280]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a48:	4a44      	ldr	r2, [pc, #272]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007a4a:	f043 0304 	orr.w	r3, r3, #4
 8007a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a52:	4b42      	ldr	r3, [pc, #264]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	613b      	str	r3, [r7, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a7a:	2305      	movs	r3, #5
 8007a7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4837      	ldr	r0, [pc, #220]	@ (8007b64 <HAL_SPI_MspInit+0x294>)
 8007a88:	f003 fad2 	bl	800b030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8007a8c:	2306      	movs	r3, #6
 8007a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a92:	2302      	movs	r3, #2
 8007a94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007aa4:	2305      	movs	r3, #5
 8007aa6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007aaa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007aae:	4619      	mov	r1, r3
 8007ab0:	482e      	ldr	r0, [pc, #184]	@ (8007b6c <HAL_SPI_MspInit+0x29c>)
 8007ab2:	f003 fabd 	bl	800b030 <HAL_GPIO_Init>
}
 8007ab6:	e04a      	b.n	8007b4e <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a2c      	ldr	r2, [pc, #176]	@ (8007b70 <HAL_SPI_MspInit+0x2a0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d145      	bne.n	8007b4e <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8007ac2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007ac6:	f04f 0300 	mov.w	r3, #0
 8007aca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ad4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f006 f919 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 8007ae4:	f7ff fc9e 	bl	8007424 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007aee:	4a1b      	ldr	r2, [pc, #108]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007af0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007af4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007af8:	4b18      	ldr	r3, [pc, #96]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007b06:	4b15      	ldr	r3, [pc, #84]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b0c:	4a13      	ldr	r2, [pc, #76]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007b0e:	f043 0310 	orr.w	r3, r3, #16
 8007b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b16:	4b11      	ldr	r3, [pc, #68]	@ (8007b5c <HAL_SPI_MspInit+0x28c>)
 8007b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	60bb      	str	r3, [r7, #8]
 8007b22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8007b24:	2364      	movs	r3, #100	@ 0x64
 8007b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b36:	2300      	movs	r3, #0
 8007b38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007b3c:	2305      	movs	r3, #5
 8007b3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007b46:	4619      	mov	r1, r3
 8007b48:	480a      	ldr	r0, [pc, #40]	@ (8007b74 <HAL_SPI_MspInit+0x2a4>)
 8007b4a:	f003 fa71 	bl	800b030 <HAL_GPIO_Init>
}
 8007b4e:	bf00      	nop
 8007b50:	37f8      	adds	r7, #248	@ 0xf8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	40013000 	.word	0x40013000
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	58020400 	.word	0x58020400
 8007b64:	58020000 	.word	0x58020000
 8007b68:	40003800 	.word	0x40003800
 8007b6c:	58020800 	.word	0x58020800
 8007b70:	40013400 	.word	0x40013400
 8007b74:	58021000 	.word	0x58021000

08007b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a0b      	ldr	r2, [pc, #44]	@ (8007bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d10e      	bne.n	8007ba8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb8 <HAL_TIM_Base_MspInit+0x40>)
 8007b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b90:	4a09      	ldr	r2, [pc, #36]	@ (8007bb8 <HAL_TIM_Base_MspInit+0x40>)
 8007b92:	f043 0301 	orr.w	r3, r3, #1
 8007b96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007b9a:	4b07      	ldr	r3, [pc, #28]	@ (8007bb8 <HAL_TIM_Base_MspInit+0x40>)
 8007b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	40010000 	.word	0x40010000
 8007bb8:	58024400 	.word	0x58024400

08007bbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b08b      	sub	sp, #44	@ 0x2c
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bcc:	d10f      	bne.n	8007bee <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007bce:	4b49      	ldr	r3, [pc, #292]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bd4:	4a47      	ldr	r2, [pc, #284]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007bde:	4b45      	ldr	r3, [pc, #276]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8007bec:	e07c      	b.n	8007ce8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM3)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a41      	ldr	r2, [pc, #260]	@ (8007cf8 <HAL_TIM_PWM_MspInit+0x13c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d10f      	bne.n	8007c18 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bfe:	4a3d      	ldr	r2, [pc, #244]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c00:	f043 0302 	orr.w	r3, r3, #2
 8007c04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c08:	4b3a      	ldr	r3, [pc, #232]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	623b      	str	r3, [r7, #32]
 8007c14:	6a3b      	ldr	r3, [r7, #32]
}
 8007c16:	e067      	b.n	8007ce8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a37      	ldr	r2, [pc, #220]	@ (8007cfc <HAL_TIM_PWM_MspInit+0x140>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d10f      	bne.n	8007c42 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c22:	4b34      	ldr	r3, [pc, #208]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c28:	4a32      	ldr	r2, [pc, #200]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c2a:	f043 0304 	orr.w	r3, r3, #4
 8007c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c32:	4b30      	ldr	r3, [pc, #192]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	61fb      	str	r3, [r7, #28]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
}
 8007c40:	e052      	b.n	8007ce8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a2e      	ldr	r2, [pc, #184]	@ (8007d00 <HAL_TIM_PWM_MspInit+0x144>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d10f      	bne.n	8007c6c <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007c4c:	4b29      	ldr	r3, [pc, #164]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c52:	4a28      	ldr	r2, [pc, #160]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c54:	f043 0308 	orr.w	r3, r3, #8
 8007c58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c5c:	4b25      	ldr	r3, [pc, #148]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	61bb      	str	r3, [r7, #24]
 8007c68:	69bb      	ldr	r3, [r7, #24]
}
 8007c6a:	e03d      	b.n	8007ce8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a24      	ldr	r2, [pc, #144]	@ (8007d04 <HAL_TIM_PWM_MspInit+0x148>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d10f      	bne.n	8007c96 <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007c76:	4b1f      	ldr	r3, [pc, #124]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c7e:	f043 0302 	orr.w	r3, r3, #2
 8007c82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007c86:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	697b      	ldr	r3, [r7, #20]
}
 8007c94:	e028      	b.n	8007ce8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d08 <HAL_TIM_PWM_MspInit+0x14c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d10f      	bne.n	8007cc0 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8007ca0:	4b14      	ldr	r3, [pc, #80]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ca6:	4a13      	ldr	r2, [pc, #76]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007cb0:	4b10      	ldr	r3, [pc, #64]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cba:	613b      	str	r3, [r7, #16]
 8007cbc:	693b      	ldr	r3, [r7, #16]
}
 8007cbe:	e013      	b.n	8007ce8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a11      	ldr	r2, [pc, #68]	@ (8007d0c <HAL_TIM_PWM_MspInit+0x150>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10e      	bne.n	8007ce8 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007cca:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cd0:	4a08      	ldr	r2, [pc, #32]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007cda:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <HAL_TIM_PWM_MspInit+0x138>)
 8007cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
}
 8007ce8:	bf00      	nop
 8007cea:	372c      	adds	r7, #44	@ 0x2c
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40010400 	.word	0x40010400
 8007d08:	40001800 	.word	0x40001800
 8007d0c:	40014000 	.word	0x40014000

08007d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b090      	sub	sp, #64	@ 0x40
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	605a      	str	r2, [r3, #4]
 8007d22:	609a      	str	r2, [r3, #8]
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a95      	ldr	r2, [pc, #596]	@ (8007f84 <HAL_TIM_MspPostInit+0x274>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d120      	bne.n	8007d74 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007d32:	4b95      	ldr	r3, [pc, #596]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d38:	4a93      	ldr	r2, [pc, #588]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007d3a:	f043 0310 	orr.w	r3, r3, #16
 8007d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d42:	4b91      	ldr	r3, [pc, #580]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 8007d50:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8007d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d56:	2302      	movs	r3, #2
 8007d58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007d62:	2301      	movs	r3, #1
 8007d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4887      	ldr	r0, [pc, #540]	@ (8007f8c <HAL_TIM_MspPostInit+0x27c>)
 8007d6e:	f003 f95f 	bl	800b030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8007d72:	e103      	b.n	8007f7c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM2)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d7c:	d120      	bne.n	8007dc0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d7e:	4b82      	ldr	r3, [pc, #520]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d84:	4a80      	ldr	r2, [pc, #512]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d8e:	4b7e      	ldr	r3, [pc, #504]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007d9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007da2:	2302      	movs	r3, #2
 8007da4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007daa:	2300      	movs	r3, #0
 8007dac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007dae:	2301      	movs	r3, #1
 8007db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007db2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007db6:	4619      	mov	r1, r3
 8007db8:	4875      	ldr	r0, [pc, #468]	@ (8007f90 <HAL_TIM_MspPostInit+0x280>)
 8007dba:	f003 f939 	bl	800b030 <HAL_GPIO_Init>
}
 8007dbe:	e0dd      	b.n	8007f7c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM3)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a73      	ldr	r2, [pc, #460]	@ (8007f94 <HAL_TIM_MspPostInit+0x284>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d11f      	bne.n	8007e0a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dca:	4b6f      	ldr	r3, [pc, #444]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dd0:	4a6d      	ldr	r2, [pc, #436]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007dd2:	f043 0301 	orr.w	r3, r3, #1
 8007dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007dda:	4b6b      	ldr	r3, [pc, #428]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	623b      	str	r3, [r7, #32]
 8007de6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007de8:	2340      	movs	r3, #64	@ 0x40
 8007dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dec:	2302      	movs	r3, #2
 8007dee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007df4:	2300      	movs	r3, #0
 8007df6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e00:	4619      	mov	r1, r3
 8007e02:	4863      	ldr	r0, [pc, #396]	@ (8007f90 <HAL_TIM_MspPostInit+0x280>)
 8007e04:	f003 f914 	bl	800b030 <HAL_GPIO_Init>
}
 8007e08:	e0b8      	b.n	8007f7c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM4)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a62      	ldr	r2, [pc, #392]	@ (8007f98 <HAL_TIM_MspPostInit+0x288>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d11f      	bne.n	8007e54 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e14:	4b5c      	ldr	r3, [pc, #368]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007e1c:	f043 0302 	orr.w	r3, r3, #2
 8007e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e24:	4b58      	ldr	r3, [pc, #352]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007e32:	2340      	movs	r3, #64	@ 0x40
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e36:	2302      	movs	r3, #2
 8007e38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007e42:	2302      	movs	r3, #2
 8007e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4853      	ldr	r0, [pc, #332]	@ (8007f9c <HAL_TIM_MspPostInit+0x28c>)
 8007e4e:	f003 f8ef 	bl	800b030 <HAL_GPIO_Init>
}
 8007e52:	e093      	b.n	8007f7c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM5)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a51      	ldr	r2, [pc, #324]	@ (8007fa0 <HAL_TIM_MspPostInit+0x290>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d11f      	bne.n	8007e9e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e64:	4a48      	ldr	r2, [pc, #288]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e6e:	4b46      	ldr	r3, [pc, #280]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	61bb      	str	r3, [r7, #24]
 8007e7a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e80:	2302      	movs	r3, #2
 8007e82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e84:	2300      	movs	r3, #0
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e94:	4619      	mov	r1, r3
 8007e96:	483e      	ldr	r0, [pc, #248]	@ (8007f90 <HAL_TIM_MspPostInit+0x280>)
 8007e98:	f003 f8ca 	bl	800b030 <HAL_GPIO_Init>
}
 8007e9c:	e06e      	b.n	8007f7c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM8)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a40      	ldr	r2, [pc, #256]	@ (8007fa4 <HAL_TIM_MspPostInit+0x294>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d11f      	bne.n	8007ee8 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ea8:	4b37      	ldr	r3, [pc, #220]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007eae:	4a36      	ldr	r2, [pc, #216]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007eb0:	f043 0304 	orr.w	r3, r3, #4
 8007eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007eb8:	4b33      	ldr	r3, [pc, #204]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007ec6:	2340      	movs	r3, #64	@ 0x40
 8007ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007eda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4831      	ldr	r0, [pc, #196]	@ (8007fa8 <HAL_TIM_MspPostInit+0x298>)
 8007ee2:	f003 f8a5 	bl	800b030 <HAL_GPIO_Init>
}
 8007ee6:	e049      	b.n	8007f7c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM12)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a2f      	ldr	r2, [pc, #188]	@ (8007fac <HAL_TIM_MspPostInit+0x29c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d120      	bne.n	8007f34 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ef2:	4b25      	ldr	r3, [pc, #148]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ef8:	4a23      	ldr	r2, [pc, #140]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007efa:	f043 0302 	orr.w	r3, r3, #2
 8007efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007f02:	4b21      	ldr	r3, [pc, #132]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	613b      	str	r3, [r7, #16]
 8007f0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007f10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f16:	2302      	movs	r3, #2
 8007f18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8007f22:	2302      	movs	r3, #2
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	481b      	ldr	r0, [pc, #108]	@ (8007f9c <HAL_TIM_MspPostInit+0x28c>)
 8007f2e:	f003 f87f 	bl	800b030 <HAL_GPIO_Init>
}
 8007f32:	e023      	b.n	8007f7c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM15)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb0 <HAL_TIM_MspPostInit+0x2a0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d11e      	bne.n	8007f7c <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f3e:	4b12      	ldr	r3, [pc, #72]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f44:	4a10      	ldr	r2, [pc, #64]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f88 <HAL_TIM_MspPostInit+0x278>)
 8007f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f60:	2302      	movs	r3, #2
 8007f62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f74:	4619      	mov	r1, r3
 8007f76:	4806      	ldr	r0, [pc, #24]	@ (8007f90 <HAL_TIM_MspPostInit+0x280>)
 8007f78:	f003 f85a 	bl	800b030 <HAL_GPIO_Init>
}
 8007f7c:	bf00      	nop
 8007f7e:	3740      	adds	r7, #64	@ 0x40
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40010000 	.word	0x40010000
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	58021000 	.word	0x58021000
 8007f90:	58020000 	.word	0x58020000
 8007f94:	40000400 	.word	0x40000400
 8007f98:	40000800 	.word	0x40000800
 8007f9c:	58020400 	.word	0x58020400
 8007fa0:	40000c00 	.word	0x40000c00
 8007fa4:	40010400 	.word	0x40010400
 8007fa8:	58020800 	.word	0x58020800
 8007fac:	40001800 	.word	0x40001800
 8007fb0:	40014000 	.word	0x40014000

08007fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b0c0      	sub	sp, #256	@ 0x100
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fbc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	609a      	str	r2, [r3, #8]
 8007fc8:	60da      	str	r2, [r3, #12]
 8007fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007fcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007fd0:	22b8      	movs	r2, #184	@ 0xb8
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f010 fbb1 	bl	801873c <memset>
  if(huart->Instance==UART4)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4ac3      	ldr	r2, [pc, #780]	@ (80082ec <HAL_UART_MspInit+0x338>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d16b      	bne.n	80080bc <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007fe4:	f04f 0202 	mov.w	r2, #2
 8007fe8:	f04f 0300 	mov.w	r3, #0
 8007fec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ff6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f005 fe88 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008006:	f7ff fa0d 	bl	8007424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800800a:	4bb9      	ldr	r3, [pc, #740]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800800c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008010:	4ab7      	ldr	r2, [pc, #732]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008012:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008016:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800801a:	4bb5      	ldr	r3, [pc, #724]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800801c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008020:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008028:	4bb1      	ldr	r3, [pc, #708]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800802a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800802e:	4ab0      	ldr	r2, [pc, #704]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008030:	f043 0302 	orr.w	r3, r3, #2
 8008034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008038:	4bad      	ldr	r3, [pc, #692]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800803a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008046:	4baa      	ldr	r3, [pc, #680]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800804c:	4aa8      	ldr	r2, [pc, #672]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800804e:	f043 0308 	orr.w	r3, r3, #8
 8008052:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008056:	4ba6      	ldr	r3, [pc, #664]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24
 8008062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008064:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008068:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800806c:	2302      	movs	r3, #2
 800806e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008072:	2300      	movs	r3, #0
 8008074:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008078:	2300      	movs	r3, #0
 800807a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800807e:	2308      	movs	r3, #8
 8008080:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008084:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8008088:	4619      	mov	r1, r3
 800808a:	489a      	ldr	r0, [pc, #616]	@ (80082f4 <HAL_UART_MspInit+0x340>)
 800808c:	f002 ffd0 	bl	800b030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008090:	2301      	movs	r3, #1
 8008092:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008096:	2302      	movs	r3, #2
 8008098:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800809c:	2300      	movs	r3, #0
 800809e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080a2:	2300      	movs	r3, #0
 80080a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80080a8:	2308      	movs	r3, #8
 80080aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080ae:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80080b2:	4619      	mov	r1, r3
 80080b4:	4890      	ldr	r0, [pc, #576]	@ (80082f8 <HAL_UART_MspInit+0x344>)
 80080b6:	f002 ffbb 	bl	800b030 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80080ba:	e111      	b.n	80082e0 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART5)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a8e      	ldr	r2, [pc, #568]	@ (80082fc <HAL_UART_MspInit+0x348>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d147      	bne.n	8008156 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80080c6:	f04f 0202 	mov.w	r2, #2
 80080ca:	f04f 0300 	mov.w	r3, #0
 80080ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80080dc:	4618      	mov	r0, r3
 80080de:	f005 fe17 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <HAL_UART_MspInit+0x138>
      Error_Handler();
 80080e8:	f7ff f99c 	bl	8007424 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80080ec:	4b80      	ldr	r3, [pc, #512]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 80080ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080f2:	4a7f      	ldr	r2, [pc, #508]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 80080f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80080fc:	4b7c      	ldr	r3, [pc, #496]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 80080fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008106:	623b      	str	r3, [r7, #32]
 8008108:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800810a:	4b79      	ldr	r3, [pc, #484]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800810c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008110:	4a77      	ldr	r2, [pc, #476]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008112:	f043 0302 	orr.w	r3, r3, #2
 8008116:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800811a:	4b75      	ldr	r3, [pc, #468]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800811c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8008128:	f242 0320 	movw	r3, #8224	@ 0x2020
 800812c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008130:	2302      	movs	r3, #2
 8008132:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008136:	2300      	movs	r3, #0
 8008138:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800813c:	2300      	movs	r3, #0
 800813e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8008142:	230e      	movs	r3, #14
 8008144:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008148:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800814c:	4619      	mov	r1, r3
 800814e:	4869      	ldr	r0, [pc, #420]	@ (80082f4 <HAL_UART_MspInit+0x340>)
 8008150:	f002 ff6e 	bl	800b030 <HAL_GPIO_Init>
}
 8008154:	e0c4      	b.n	80082e0 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART7)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a69      	ldr	r2, [pc, #420]	@ (8008300 <HAL_UART_MspInit+0x34c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d147      	bne.n	80081f0 <HAL_UART_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8008160:	f04f 0202 	mov.w	r2, #2
 8008164:	f04f 0300 	mov.w	r3, #0
 8008168:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800816c:	2300      	movs	r3, #0
 800816e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008172:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008176:	4618      	mov	r0, r3
 8008178:	f005 fdca 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8008182:	f7ff f94f 	bl	8007424 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8008186:	4b5a      	ldr	r3, [pc, #360]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800818c:	4a58      	ldr	r2, [pc, #352]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800818e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008192:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008196:	4b56      	ldr	r3, [pc, #344]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800819c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80081a0:	61bb      	str	r3, [r7, #24]
 80081a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80081a4:	4b52      	ldr	r3, [pc, #328]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 80081a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081aa:	4a51      	ldr	r2, [pc, #324]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 80081ac:	f043 0310 	orr.w	r3, r3, #16
 80081b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80081b4:	4b4e      	ldr	r3, [pc, #312]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 80081b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081ba:	f003 0310 	and.w	r3, r3, #16
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80081c2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80081c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081ca:	2302      	movs	r3, #2
 80081cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80081dc:	2307      	movs	r3, #7
 80081de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80081e2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80081e6:	4619      	mov	r1, r3
 80081e8:	4846      	ldr	r0, [pc, #280]	@ (8008304 <HAL_UART_MspInit+0x350>)
 80081ea:	f002 ff21 	bl	800b030 <HAL_GPIO_Init>
}
 80081ee:	e077      	b.n	80082e0 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART8)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a44      	ldr	r2, [pc, #272]	@ (8008308 <HAL_UART_MspInit+0x354>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d172      	bne.n	80082e0 <HAL_UART_MspInit+0x32c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80081fa:	f04f 0202 	mov.w	r2, #2
 80081fe:	f04f 0300 	mov.w	r3, #0
 8008202:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008206:	2300      	movs	r3, #0
 8008208:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800820c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008210:	4618      	mov	r0, r3
 8008212:	f005 fd7d 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800821c:	f7ff f902 	bl	8007424 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8008220:	4b33      	ldr	r3, [pc, #204]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008226:	4a32      	ldr	r2, [pc, #200]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008228:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800822c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008230:	4b2f      	ldr	r3, [pc, #188]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008236:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800823e:	4b2c      	ldr	r3, [pc, #176]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008244:	4a2a      	ldr	r2, [pc, #168]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008246:	f043 0310 	orr.w	r3, r3, #16
 800824a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800824e:	4b28      	ldr	r3, [pc, #160]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800825c:	4b24      	ldr	r3, [pc, #144]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800825e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008262:	4a23      	ldr	r2, [pc, #140]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 8008264:	f043 0308 	orr.w	r3, r3, #8
 8008268:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800826c:	4b20      	ldr	r3, [pc, #128]	@ (80082f0 <HAL_UART_MspInit+0x33c>)
 800826e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008272:	f003 0308 	and.w	r3, r3, #8
 8008276:	60bb      	str	r3, [r7, #8]
 8008278:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800827a:	2303      	movs	r3, #3
 800827c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008280:	2302      	movs	r3, #2
 8008282:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008286:	2300      	movs	r3, #0
 8008288:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800828c:	2300      	movs	r3, #0
 800828e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8008292:	2308      	movs	r3, #8
 8008294:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008298:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800829c:	4619      	mov	r1, r3
 800829e:	4819      	ldr	r0, [pc, #100]	@ (8008304 <HAL_UART_MspInit+0x350>)
 80082a0:	f002 fec6 	bl	800b030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 80082a4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80082a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ac:	2302      	movs	r3, #2
 80082ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80082be:	2308      	movs	r3, #8
 80082c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082c4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80082c8:	4619      	mov	r1, r3
 80082ca:	480b      	ldr	r0, [pc, #44]	@ (80082f8 <HAL_UART_MspInit+0x344>)
 80082cc:	f002 feb0 	bl	800b030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80082d0:	2200      	movs	r2, #0
 80082d2:	2100      	movs	r1, #0
 80082d4:	2053      	movs	r0, #83	@ 0x53
 80082d6:	f002 f88c 	bl	800a3f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80082da:	2053      	movs	r0, #83	@ 0x53
 80082dc:	f002 f8a3 	bl	800a426 <HAL_NVIC_EnableIRQ>
}
 80082e0:	bf00      	nop
 80082e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	40004c00 	.word	0x40004c00
 80082f0:	58024400 	.word	0x58024400
 80082f4:	58020400 	.word	0x58020400
 80082f8:	58020c00 	.word	0x58020c00
 80082fc:	40005000 	.word	0x40005000
 8008300:	40007800 	.word	0x40007800
 8008304:	58021000 	.word	0x58021000
 8008308:	40007c00 	.word	0x40007c00

0800830c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b0bc      	sub	sp, #240	@ 0xf0
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008314:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	609a      	str	r2, [r3, #8]
 8008320:	60da      	str	r2, [r3, #12]
 8008322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008324:	f107 0320 	add.w	r3, r7, #32
 8008328:	22b8      	movs	r2, #184	@ 0xb8
 800832a:	2100      	movs	r1, #0
 800832c:	4618      	mov	r0, r3
 800832e:	f010 fa05 	bl	801873c <memset>
  if(husart->Instance==USART1)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a73      	ldr	r2, [pc, #460]	@ (8008504 <HAL_USART_MspInit+0x1f8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d147      	bne.n	80083cc <HAL_USART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800833c:	f04f 0201 	mov.w	r2, #1
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008348:	2300      	movs	r3, #0
 800834a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800834e:	f107 0320 	add.w	r3, r7, #32
 8008352:	4618      	mov	r0, r3
 8008354:	f005 fcdc 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800835e:	f7ff f861 	bl	8007424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008362:	4b69      	ldr	r3, [pc, #420]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 8008364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008368:	4a67      	ldr	r2, [pc, #412]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 800836a:	f043 0310 	orr.w	r3, r3, #16
 800836e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008372:	4b65      	ldr	r3, [pc, #404]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 8008374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008380:	4b61      	ldr	r3, [pc, #388]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 8008382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008386:	4a60      	ldr	r2, [pc, #384]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 8008388:	f043 0301 	orr.w	r3, r3, #1
 800838c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008390:	4b5d      	ldr	r3, [pc, #372]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 8008392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 800839e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80083a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083a6:	2302      	movs	r3, #2
 80083a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083b2:	2300      	movs	r3, #0
 80083b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80083b8:	2307      	movs	r3, #7
 80083ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80083c2:	4619      	mov	r1, r3
 80083c4:	4851      	ldr	r0, [pc, #324]	@ (800850c <HAL_USART_MspInit+0x200>)
 80083c6:	f002 fe33 	bl	800b030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80083ca:	e097      	b.n	80084fc <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART2)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a4f      	ldr	r2, [pc, #316]	@ (8008510 <HAL_USART_MspInit+0x204>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d146      	bne.n	8008464 <HAL_USART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80083d6:	f04f 0202 	mov.w	r2, #2
 80083da:	f04f 0300 	mov.w	r3, #0
 80083de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80083e2:	2300      	movs	r3, #0
 80083e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80083e8:	f107 0320 	add.w	r3, r7, #32
 80083ec:	4618      	mov	r0, r3
 80083ee:	f005 fc8f 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <HAL_USART_MspInit+0xf0>
      Error_Handler();
 80083f8:	f7ff f814 	bl	8007424 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80083fc:	4b42      	ldr	r3, [pc, #264]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 80083fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008402:	4a41      	ldr	r2, [pc, #260]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 8008404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008408:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800840c:	4b3e      	ldr	r3, [pc, #248]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 800840e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800841a:	4b3b      	ldr	r3, [pc, #236]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 800841c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008420:	4a39      	ldr	r2, [pc, #228]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 8008422:	f043 0308 	orr.w	r3, r3, #8
 8008426:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800842a:	4b37      	ldr	r3, [pc, #220]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 800842c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	613b      	str	r3, [r7, #16]
 8008436:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 8008438:	23e8      	movs	r3, #232	@ 0xe8
 800843a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800843e:	2302      	movs	r3, #2
 8008440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008444:	2300      	movs	r3, #0
 8008446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800844a:	2300      	movs	r3, #0
 800844c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008450:	2307      	movs	r3, #7
 8008452:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008456:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800845a:	4619      	mov	r1, r3
 800845c:	482d      	ldr	r0, [pc, #180]	@ (8008514 <HAL_USART_MspInit+0x208>)
 800845e:	f002 fde7 	bl	800b030 <HAL_GPIO_Init>
}
 8008462:	e04b      	b.n	80084fc <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART3)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a2b      	ldr	r2, [pc, #172]	@ (8008518 <HAL_USART_MspInit+0x20c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d146      	bne.n	80084fc <HAL_USART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800846e:	f04f 0202 	mov.w	r2, #2
 8008472:	f04f 0300 	mov.w	r3, #0
 8008476:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800847a:	2300      	movs	r3, #0
 800847c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008480:	f107 0320 	add.w	r3, r7, #32
 8008484:	4618      	mov	r0, r3
 8008486:	f005 fc43 	bl	800dd10 <HAL_RCCEx_PeriphCLKConfig>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <HAL_USART_MspInit+0x188>
      Error_Handler();
 8008490:	f7fe ffc8 	bl	8007424 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008494:	4b1c      	ldr	r3, [pc, #112]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 8008496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800849a:	4a1b      	ldr	r2, [pc, #108]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 800849c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80084a4:	4b18      	ldr	r3, [pc, #96]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 80084a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80084b2:	4b15      	ldr	r3, [pc, #84]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 80084b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084b8:	4a13      	ldr	r2, [pc, #76]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 80084ba:	f043 0308 	orr.w	r3, r3, #8
 80084be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80084c2:	4b11      	ldr	r3, [pc, #68]	@ (8008508 <HAL_USART_MspInit+0x1fc>)
 80084c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	60bb      	str	r3, [r7, #8]
 80084ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 80084d0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80084d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084d8:	2302      	movs	r3, #2
 80084da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084e4:	2300      	movs	r3, #0
 80084e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80084ea:	2307      	movs	r3, #7
 80084ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80084f4:	4619      	mov	r1, r3
 80084f6:	4807      	ldr	r0, [pc, #28]	@ (8008514 <HAL_USART_MspInit+0x208>)
 80084f8:	f002 fd9a 	bl	800b030 <HAL_GPIO_Init>
}
 80084fc:	bf00      	nop
 80084fe:	37f0      	adds	r7, #240	@ 0xf0
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40011000 	.word	0x40011000
 8008508:	58024400 	.word	0x58024400
 800850c:	58020000 	.word	0x58020000
 8008510:	40004400 	.word	0x40004400
 8008514:	58020c00 	.word	0x58020c00
 8008518:	40004800 	.word	0x40004800

0800851c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8008520:	f005 fbda 	bl	800dcd8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <NMI_Handler+0x8>

08008528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800852c:	bf00      	nop
 800852e:	e7fd      	b.n	800852c <HardFault_Handler+0x4>

08008530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008530:	b480      	push	{r7}
 8008532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008534:	bf00      	nop
 8008536:	e7fd      	b.n	8008534 <MemManage_Handler+0x4>

08008538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800853c:	bf00      	nop
 800853e:	e7fd      	b.n	800853c <BusFault_Handler+0x4>

08008540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <UsageFault_Handler+0x4>

08008548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800854c:	bf00      	nop
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008556:	b480      	push	{r7}
 8008558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800855a:	bf00      	nop
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008568:	bf00      	nop
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008576:	f000 faa9 	bl	8008acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800857a:	bf00      	nop
 800857c:	bd80      	pop	{r7, pc}

0800857e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8008582:	2008      	movs	r0, #8
 8008584:	f002 ff2d 	bl	800b3e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008588:	bf00      	nop
 800858a:	bd80      	pop	{r7, pc}

0800858c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8008590:	2010      	movs	r0, #16
 8008592:	f002 ff26 	bl	800b3e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008596:	bf00      	nop
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80085a0:	4802      	ldr	r0, [pc, #8]	@ (80085ac <UART8_IRQHandler+0x10>)
 80085a2:	f00b fadb 	bl	8013b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80085a6:	bf00      	nop
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	24001d94 	.word	0x24001d94

080085b0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80085b4:	4802      	ldr	r0, [pc, #8]	@ (80085c0 <I2C4_EV_IRQHandler+0x10>)
 80085b6:	f003 f9d9 	bl	800b96c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80085ba:	bf00      	nop
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	24001710 	.word	0x24001710

080085c4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80085c8:	4802      	ldr	r0, [pc, #8]	@ (80085d4 <I2C4_ER_IRQHandler+0x10>)
 80085ca:	f003 f9e9 	bl	800b9a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80085ce:	bf00      	nop
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	24001710 	.word	0x24001710

080085d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  return 1;
 80085dc:	2301      	movs	r3, #1
}
 80085de:	4618      	mov	r0, r3
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <_kill>:

int _kill(int pid, int sig)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80085f2:	f010 f8f5 	bl	80187e0 <__errno>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2216      	movs	r2, #22
 80085fa:	601a      	str	r2, [r3, #0]
  return -1;
 80085fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <_exit>:

void _exit (int status)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008610:	f04f 31ff 	mov.w	r1, #4294967295
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff ffe7 	bl	80085e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800861a:	bf00      	nop
 800861c:	e7fd      	b.n	800861a <_exit+0x12>

0800861e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b086      	sub	sp, #24
 8008622:	af00      	add	r7, sp, #0
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	e00a      	b.n	8008646 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008630:	f3af 8000 	nop.w
 8008634:	4601      	mov	r1, r0
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	60ba      	str	r2, [r7, #8]
 800863c:	b2ca      	uxtb	r2, r1
 800863e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	3301      	adds	r3, #1
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	429a      	cmp	r2, r3
 800864c:	dbf0      	blt.n	8008630 <_read+0x12>
  }

  return len;
 800864e:	687b      	ldr	r3, [r7, #4]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008680:	605a      	str	r2, [r3, #4]
  return 0;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <_isatty>:

int _isatty(int file)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008698:	2301      	movs	r3, #1
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086c8:	4a14      	ldr	r2, [pc, #80]	@ (800871c <_sbrk+0x5c>)
 80086ca:	4b15      	ldr	r3, [pc, #84]	@ (8008720 <_sbrk+0x60>)
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80086d4:	4b13      	ldr	r3, [pc, #76]	@ (8008724 <_sbrk+0x64>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086dc:	4b11      	ldr	r3, [pc, #68]	@ (8008724 <_sbrk+0x64>)
 80086de:	4a12      	ldr	r2, [pc, #72]	@ (8008728 <_sbrk+0x68>)
 80086e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80086e2:	4b10      	ldr	r3, [pc, #64]	@ (8008724 <_sbrk+0x64>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4413      	add	r3, r2
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d207      	bcs.n	8008700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80086f0:	f010 f876 	bl	80187e0 <__errno>
 80086f4:	4603      	mov	r3, r0
 80086f6:	220c      	movs	r2, #12
 80086f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80086fa:	f04f 33ff 	mov.w	r3, #4294967295
 80086fe:	e009      	b.n	8008714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008700:	4b08      	ldr	r3, [pc, #32]	@ (8008724 <_sbrk+0x64>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008706:	4b07      	ldr	r3, [pc, #28]	@ (8008724 <_sbrk+0x64>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	4a05      	ldr	r2, [pc, #20]	@ (8008724 <_sbrk+0x64>)
 8008710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008712:	68fb      	ldr	r3, [r7, #12]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	24050000 	.word	0x24050000
 8008720:	00000400 	.word	0x00000400
 8008724:	24001f4c 	.word	0x24001f4c
 8008728:	240020b8 	.word	0x240020b8

0800872c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008730:	4b32      	ldr	r3, [pc, #200]	@ (80087fc <SystemInit+0xd0>)
 8008732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008736:	4a31      	ldr	r2, [pc, #196]	@ (80087fc <SystemInit+0xd0>)
 8008738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800873c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008740:	4b2f      	ldr	r3, [pc, #188]	@ (8008800 <SystemInit+0xd4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	2b06      	cmp	r3, #6
 800874a:	d807      	bhi.n	800875c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800874c:	4b2c      	ldr	r3, [pc, #176]	@ (8008800 <SystemInit+0xd4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f023 030f 	bic.w	r3, r3, #15
 8008754:	4a2a      	ldr	r2, [pc, #168]	@ (8008800 <SystemInit+0xd4>)
 8008756:	f043 0307 	orr.w	r3, r3, #7
 800875a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800875c:	4b29      	ldr	r3, [pc, #164]	@ (8008804 <SystemInit+0xd8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a28      	ldr	r2, [pc, #160]	@ (8008804 <SystemInit+0xd8>)
 8008762:	f043 0301 	orr.w	r3, r3, #1
 8008766:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008768:	4b26      	ldr	r3, [pc, #152]	@ (8008804 <SystemInit+0xd8>)
 800876a:	2200      	movs	r2, #0
 800876c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800876e:	4b25      	ldr	r3, [pc, #148]	@ (8008804 <SystemInit+0xd8>)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4924      	ldr	r1, [pc, #144]	@ (8008804 <SystemInit+0xd8>)
 8008774:	4b24      	ldr	r3, [pc, #144]	@ (8008808 <SystemInit+0xdc>)
 8008776:	4013      	ands	r3, r2
 8008778:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800877a:	4b21      	ldr	r3, [pc, #132]	@ (8008800 <SystemInit+0xd4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d007      	beq.n	8008796 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008786:	4b1e      	ldr	r3, [pc, #120]	@ (8008800 <SystemInit+0xd4>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f023 030f 	bic.w	r3, r3, #15
 800878e:	4a1c      	ldr	r2, [pc, #112]	@ (8008800 <SystemInit+0xd4>)
 8008790:	f043 0307 	orr.w	r3, r3, #7
 8008794:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008796:	4b1b      	ldr	r3, [pc, #108]	@ (8008804 <SystemInit+0xd8>)
 8008798:	2200      	movs	r2, #0
 800879a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800879c:	4b19      	ldr	r3, [pc, #100]	@ (8008804 <SystemInit+0xd8>)
 800879e:	2200      	movs	r2, #0
 80087a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80087a2:	4b18      	ldr	r3, [pc, #96]	@ (8008804 <SystemInit+0xd8>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80087a8:	4b16      	ldr	r3, [pc, #88]	@ (8008804 <SystemInit+0xd8>)
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <SystemInit+0xe0>)
 80087ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80087ae:	4b15      	ldr	r3, [pc, #84]	@ (8008804 <SystemInit+0xd8>)
 80087b0:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <SystemInit+0xe4>)
 80087b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80087b4:	4b13      	ldr	r3, [pc, #76]	@ (8008804 <SystemInit+0xd8>)
 80087b6:	4a17      	ldr	r2, [pc, #92]	@ (8008814 <SystemInit+0xe8>)
 80087b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80087ba:	4b12      	ldr	r3, [pc, #72]	@ (8008804 <SystemInit+0xd8>)
 80087bc:	2200      	movs	r2, #0
 80087be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80087c0:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <SystemInit+0xd8>)
 80087c2:	4a14      	ldr	r2, [pc, #80]	@ (8008814 <SystemInit+0xe8>)
 80087c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80087c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008804 <SystemInit+0xd8>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80087cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <SystemInit+0xd8>)
 80087ce:	4a11      	ldr	r2, [pc, #68]	@ (8008814 <SystemInit+0xe8>)
 80087d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80087d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008804 <SystemInit+0xd8>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80087d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008804 <SystemInit+0xd8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a09      	ldr	r2, [pc, #36]	@ (8008804 <SystemInit+0xd8>)
 80087de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80087e4:	4b07      	ldr	r3, [pc, #28]	@ (8008804 <SystemInit+0xd8>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80087ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008818 <SystemInit+0xec>)
 80087ec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80087f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80087f2:	bf00      	nop
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	e000ed00 	.word	0xe000ed00
 8008800:	52002000 	.word	0x52002000
 8008804:	58024400 	.word	0x58024400
 8008808:	eaf6ed7f 	.word	0xeaf6ed7f
 800880c:	02020200 	.word	0x02020200
 8008810:	01ff0000 	.word	0x01ff0000
 8008814:	01010280 	.word	0x01010280
 8008818:	52004000 	.word	0x52004000

0800881c <SensorManager_Init>:
    //"GPS",
    //"LIS2MDLTR",
    // "MS560702BA03"
};

telemetry_init_status SensorManager_Init(void) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0

    size_t num_sensors = sizeof(init_functions) / sizeof(init_functions[0]);
 8008822:	2301      	movs	r3, #1
 8008824:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8008826:	2301      	movs	r3, #1
 8008828:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 800882a:	2300      	movs	r3, #0
 800882c:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 800882e:	2300      	movs	r3, #0
 8008830:	60bb      	str	r3, [r7, #8]
 8008832:	e01a      	b.n	800886a <SensorManager_Init+0x4e>
        int8_t status = init_functions[i]();
 8008834:	4a1b      	ldr	r2, [pc, #108]	@ (80088a4 <SensorManager_Init+0x88>)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800883c:	4798      	blx	r3
 800883e:	4603      	mov	r3, r0
 8008840:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 8008842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <SensorManager_Init+0x44>
            printf("%s initialization failed.\n", sensor_names[i]);
 800884a:	4a17      	ldr	r2, [pc, #92]	@ (80088a8 <SensorManager_Init+0x8c>)
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008852:	4619      	mov	r1, r3
 8008854:	4815      	ldr	r0, [pc, #84]	@ (80088ac <SensorManager_Init+0x90>)
 8008856:	f00f fe09 	bl	801846c <iprintf>
            all_success = false;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
 800885e:	e001      	b.n	8008864 <SensorManager_Init+0x48>
        } else {
            any_success = true;
 8008860:	2301      	movs	r3, #1
 8008862:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	3301      	adds	r3, #1
 8008868:	60bb      	str	r3, [r7, #8]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	d3e0      	bcc.n	8008834 <SensorManager_Init+0x18>
        }
    }

    if (all_success) {
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <SensorManager_Init+0x66>
        printf("All sensors initialized successfully.\n");
 8008878:	480d      	ldr	r0, [pc, #52]	@ (80088b0 <SensorManager_Init+0x94>)
 800887a:	f00f fe5f 	bl	801853c <puts>
        return TELEMETRY_INIT_SUCCESS;
 800887e:	2300      	movs	r3, #0
 8008880:	e00b      	b.n	800889a <SensorManager_Init+0x7e>
    } else if (any_success) {
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <SensorManager_Init+0x76>
        printf("Partial initialization success.\n");
 8008888:	480a      	ldr	r0, [pc, #40]	@ (80088b4 <SensorManager_Init+0x98>)
 800888a:	f00f fe57 	bl	801853c <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 800888e:	2301      	movs	r3, #1
 8008890:	e003      	b.n	800889a <SensorManager_Init+0x7e>
    } else {
        printf("All sensors initialization failed.\n");
 8008892:	4809      	ldr	r0, [pc, #36]	@ (80088b8 <SensorManager_Init+0x9c>)
 8008894:	f00f fe52 	bl	801853c <puts>
        return TELEMETRY_INIT_FAILURE;
 8008898:	2302      	movs	r3, #2
    }
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	24000158 	.word	0x24000158
 80088a8:	2400015c 	.word	0x2400015c
 80088ac:	0801c1ac 	.word	0x0801c1ac
 80088b0:	0801c1c8 	.word	0x0801c1c8
 80088b4:	0801c1f0 	.word	0x0801c1f0
 80088b8:	0801c210 	.word	0x0801c210

080088bc <delay_us_func>:
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);
//    MS560702BA03_ReadData(&data->ms560702ba03_data);
}

void delay_us_func(uint32_t period)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 80088c4:	e008      	b.n	80088d8 <delay_us_func+0x1c>
	{
		for(i = 0; i < 96; i++)
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	e002      	b.n	80088d2 <delay_us_func+0x16>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3301      	adds	r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b5f      	cmp	r3, #95	@ 0x5f
 80088d6:	d9f9      	bls.n	80088cc <delay_us_func+0x10>
	while(period--)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	1e5a      	subs	r2, r3, #1
 80088dc:	607a      	str	r2, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f1      	bne.n	80088c6 <delay_us_func+0xa>
		{
			;
		}
	}
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <TestTelemetry>:

void TestTelemetry(){
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08c      	sub	sp, #48	@ 0x30
 80088f4:	af04      	add	r7, sp, #16
    // Call the function multiple times to see if data changes
	for(int i = 0; i < 20 ; i++){
 80088f6:	2300      	movs	r3, #0
 80088f8:	61fb      	str	r3, [r7, #28]
 80088fa:	e039      	b.n	8008970 <TestTelemetry+0x80>
	IMU_6_Axis_Data sensor_data = bmi323_data_poll();
 80088fc:	1d3b      	adds	r3, r7, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fd f842 	bl	8005988 <bmi323_data_poll>
	   printf("Accelerometer Data:\n");
 8008904:	481e      	ldr	r0, [pc, #120]	@ (8008980 <TestTelemetry+0x90>)
 8008906:	f00f fe19 	bl	801853c <puts>
	    printf("X: %f m/s^2, Y: %f m/s^2, Z: %f m/s^2\n", sensor_data.acceleration[0], sensor_data.acceleration[1], sensor_data.acceleration[2]);
 800890a:	edd7 7a01 	vldr	s15, [r7, #4]
 800890e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8008912:	edd7 7a02 	vldr	s15, [r7, #8]
 8008916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800891a:	edd7 6a03 	vldr	s13, [r7, #12]
 800891e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8008922:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008926:	ed8d 7b00 	vstr	d7, [sp]
 800892a:	ec53 2b15 	vmov	r2, r3, d5
 800892e:	4815      	ldr	r0, [pc, #84]	@ (8008984 <TestTelemetry+0x94>)
 8008930:	f00f fd9c 	bl	801846c <iprintf>
	    printf("Gyroscope Data:\n");
 8008934:	4814      	ldr	r0, [pc, #80]	@ (8008988 <TestTelemetry+0x98>)
 8008936:	f00f fe01 	bl	801853c <puts>
	    printf("X: %f dps, Y: %f dps, Z: %f dps\n", sensor_data.gyroscope[0], sensor_data.gyroscope[1], sensor_data.gyroscope[2]);
 800893a:	edd7 7a04 	vldr	s15, [r7, #16]
 800893e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8008942:	edd7 7a05 	vldr	s15, [r7, #20]
 8008946:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800894a:	edd7 6a06 	vldr	s13, [r7, #24]
 800894e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8008952:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008956:	ed8d 7b00 	vstr	d7, [sp]
 800895a:	ec53 2b15 	vmov	r2, r3, d5
 800895e:	480b      	ldr	r0, [pc, #44]	@ (800898c <TestTelemetry+0x9c>)
 8008960:	f00f fd84 	bl	801846c <iprintf>
        delay_us_func(150000);
 8008964:	480a      	ldr	r0, [pc, #40]	@ (8008990 <TestTelemetry+0xa0>)
 8008966:	f7ff ffa9 	bl	80088bc <delay_us_func>
	for(int i = 0; i < 20 ; i++){
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	3301      	adds	r3, #1
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	2b13      	cmp	r3, #19
 8008974:	ddc2      	ble.n	80088fc <TestTelemetry+0xc>
	}
	}
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	3720      	adds	r7, #32
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	0801c234 	.word	0x0801c234
 8008984:	0801c248 	.word	0x0801c248
 8008988:	0801c270 	.word	0x0801c270
 800898c:	0801c280 	.word	0x0801c280
 8008990:	000249f0 	.word	0x000249f0

08008994 <Reset_Handler>:
 8008994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80089cc <LoopFillZerobss+0xe>
 8008998:	f7ff fec8 	bl	800872c <SystemInit>
 800899c:	480c      	ldr	r0, [pc, #48]	@ (80089d0 <LoopFillZerobss+0x12>)
 800899e:	490d      	ldr	r1, [pc, #52]	@ (80089d4 <LoopFillZerobss+0x16>)
 80089a0:	4a0d      	ldr	r2, [pc, #52]	@ (80089d8 <LoopFillZerobss+0x1a>)
 80089a2:	2300      	movs	r3, #0
 80089a4:	e002      	b.n	80089ac <LoopCopyDataInit>

080089a6 <CopyDataInit>:
 80089a6:	58d4      	ldr	r4, [r2, r3]
 80089a8:	50c4      	str	r4, [r0, r3]
 80089aa:	3304      	adds	r3, #4

080089ac <LoopCopyDataInit>:
 80089ac:	18c4      	adds	r4, r0, r3
 80089ae:	428c      	cmp	r4, r1
 80089b0:	d3f9      	bcc.n	80089a6 <CopyDataInit>
 80089b2:	4a0a      	ldr	r2, [pc, #40]	@ (80089dc <LoopFillZerobss+0x1e>)
 80089b4:	4c0a      	ldr	r4, [pc, #40]	@ (80089e0 <LoopFillZerobss+0x22>)
 80089b6:	2300      	movs	r3, #0
 80089b8:	e001      	b.n	80089be <LoopFillZerobss>

080089ba <FillZerobss>:
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	3204      	adds	r2, #4

080089be <LoopFillZerobss>:
 80089be:	42a2      	cmp	r2, r4
 80089c0:	d3fb      	bcc.n	80089ba <FillZerobss>
 80089c2:	f00f ff13 	bl	80187ec <__libc_init_array>
 80089c6:	f7fd fa0e 	bl	8005de6 <main>
 80089ca:	4770      	bx	lr
 80089cc:	24050000 	.word	0x24050000
 80089d0:	24000000 	.word	0x24000000
 80089d4:	24000330 	.word	0x24000330
 80089d8:	0801c740 	.word	0x0801c740
 80089dc:	24000330 	.word	0x24000330
 80089e0:	240020b4 	.word	0x240020b4

080089e4 <ADC3_IRQHandler>:
 80089e4:	e7fe      	b.n	80089e4 <ADC3_IRQHandler>
	...

080089e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089ee:	2003      	movs	r0, #3
 80089f0:	f001 fcf4 	bl	800a3dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089f4:	f004 ff9a 	bl	800d92c <HAL_RCC_GetSysClockFreq>
 80089f8:	4602      	mov	r2, r0
 80089fa:	4b15      	ldr	r3, [pc, #84]	@ (8008a50 <HAL_Init+0x68>)
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	4913      	ldr	r1, [pc, #76]	@ (8008a54 <HAL_Init+0x6c>)
 8008a06:	5ccb      	ldrb	r3, [r1, r3]
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a12:	4b0f      	ldr	r3, [pc, #60]	@ (8008a50 <HAL_Init+0x68>)
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8008a54 <HAL_Init+0x6c>)
 8008a1c:	5cd3      	ldrb	r3, [r2, r3]
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
 8008a28:	4a0b      	ldr	r2, [pc, #44]	@ (8008a58 <HAL_Init+0x70>)
 8008a2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8008a5c <HAL_Init+0x74>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008a32:	200f      	movs	r0, #15
 8008a34:	f000 f814 	bl	8008a60 <HAL_InitTick>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e002      	b.n	8008a48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008a42:	f7fe fcf5 	bl	8007430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	58024400 	.word	0x58024400
 8008a54:	0801c2a4 	.word	0x0801c2a4
 8008a58:	24000154 	.word	0x24000154
 8008a5c:	24000150 	.word	0x24000150

08008a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008a68:	4b15      	ldr	r3, [pc, #84]	@ (8008ac0 <HAL_InitTick+0x60>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e021      	b.n	8008ab8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008a74:	4b13      	ldr	r3, [pc, #76]	@ (8008ac4 <HAL_InitTick+0x64>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	4b11      	ldr	r3, [pc, #68]	@ (8008ac0 <HAL_InitTick+0x60>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f001 fcd9 	bl	800a442 <HAL_SYSTICK_Config>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e00e      	b.n	8008ab8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b0f      	cmp	r3, #15
 8008a9e:	d80a      	bhi.n	8008ab6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	f001 fca3 	bl	800a3f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008aac:	4a06      	ldr	r2, [pc, #24]	@ (8008ac8 <HAL_InitTick+0x68>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e000      	b.n	8008ab8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	24000164 	.word	0x24000164
 8008ac4:	24000150 	.word	0x24000150
 8008ac8:	24000160 	.word	0x24000160

08008acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008ad0:	4b06      	ldr	r3, [pc, #24]	@ (8008aec <HAL_IncTick+0x20>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b06      	ldr	r3, [pc, #24]	@ (8008af0 <HAL_IncTick+0x24>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4413      	add	r3, r2
 8008adc:	4a04      	ldr	r2, [pc, #16]	@ (8008af0 <HAL_IncTick+0x24>)
 8008ade:	6013      	str	r3, [r2, #0]
}
 8008ae0:	bf00      	nop
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	24000164 	.word	0x24000164
 8008af0:	24001f50 	.word	0x24001f50

08008af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0
  return uwTick;
 8008af8:	4b03      	ldr	r3, [pc, #12]	@ (8008b08 <HAL_GetTick+0x14>)
 8008afa:	681b      	ldr	r3, [r3, #0]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	24001f50 	.word	0x24001f50

08008b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b14:	f7ff ffee 	bl	8008af4 <HAL_GetTick>
 8008b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b24:	d005      	beq.n	8008b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008b26:	4b0a      	ldr	r3, [pc, #40]	@ (8008b50 <HAL_Delay+0x44>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008b32:	bf00      	nop
 8008b34:	f7ff ffde 	bl	8008af4 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d8f7      	bhi.n	8008b34 <HAL_Delay+0x28>
  {
  }
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	24000164 	.word	0x24000164

08008b54 <LL_ADC_SetCommonClock>:
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	609a      	str	r2, [r3, #8]
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <LL_ADC_SetCommonPathInternalCh>:
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	609a      	str	r2, [r3, #8]
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <LL_ADC_GetCommonPathInternalCh>:
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <LL_ADC_SetOffset>:
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3360      	adds	r3, #96	@ 0x60
 8008bce:	461a      	mov	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4a10      	ldr	r2, [pc, #64]	@ (8008c1c <LL_ADC_SetOffset+0x60>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10b      	bne.n	8008bf8 <LL_ADC_SetOffset+0x3c>
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	e00b      	b.n	8008c10 <LL_ADC_SetOffset+0x54>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	bf00      	nop
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	58026000 	.word	0x58026000

08008c20 <LL_ADC_GetOffsetChannel>:
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3360      	adds	r3, #96	@ 0x60
 8008c2e:	461a      	mov	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <LL_ADC_SetDataRightShift>:
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	611a      	str	r2, [r3, #16]
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
	...

08008c80 <LL_ADC_SetOffsetSignedSaturation>:
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008cc0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00e      	beq.n	8008cb2 <LL_ADC_SetOffsetSignedSaturation+0x32>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3360      	adds	r3, #96	@ 0x60
 8008c98:	461a      	mov	r2, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	58026000 	.word	0x58026000

08008cc4 <LL_ADC_SetOffsetSaturation>:
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8008d04 <LL_ADC_SetOffsetSaturation+0x40>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d10e      	bne.n	8008cf6 <LL_ADC_SetOffsetSaturation+0x32>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3360      	adds	r3, #96	@ 0x60
 8008cdc:	461a      	mov	r2, r3
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	617b      	str	r3, [r7, #20]
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	bf00      	nop
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	58026000 	.word	0x58026000

08008d08 <LL_ADC_SetOffsetSign>:
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4a0c      	ldr	r2, [pc, #48]	@ (8008d48 <LL_ADC_SetOffsetSign+0x40>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d10e      	bne.n	8008d3a <LL_ADC_SetOffsetSign+0x32>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3360      	adds	r3, #96	@ 0x60
 8008d20:	461a      	mov	r2, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	431a      	orrs	r2, r3
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	bf00      	nop
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	58026000 	.word	0x58026000

08008d4c <LL_ADC_SetOffsetState>:
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3360      	adds	r3, #96	@ 0x60
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4a0c      	ldr	r2, [pc, #48]	@ (8008d9c <LL_ADC_SetOffsetState+0x50>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d108      	bne.n	8008d80 <LL_ADC_SetOffsetState+0x34>
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	e007      	b.n	8008d90 <LL_ADC_SetOffsetState+0x44>
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	58026000 	.word	0x58026000

08008da0 <LL_ADC_REG_SetSequencerRanks>:
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3330      	adds	r3, #48	@ 0x30
 8008db0:	461a      	mov	r2, r3
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	0a1b      	lsrs	r3, r3, #8
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	f003 030c 	and.w	r3, r3, #12
 8008dbc:	4413      	add	r3, r2
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f003 031f 	and.w	r3, r3, #31
 8008dca:	211f      	movs	r1, #31
 8008dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd0:	43db      	mvns	r3, r3
 8008dd2:	401a      	ands	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	0e9b      	lsrs	r3, r3, #26
 8008dd8:	f003 011f 	and.w	r1, r3, #31
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 031f 	and.w	r3, r3, #31
 8008de2:	fa01 f303 	lsl.w	r3, r1, r3
 8008de6:	431a      	orrs	r2, r3
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	bf00      	nop
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <LL_ADC_SetChannelSamplingTime>:
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3314      	adds	r3, #20
 8008e08:	461a      	mov	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	0e5b      	lsrs	r3, r3, #25
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	4413      	add	r3, r2
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	0d1b      	lsrs	r3, r3, #20
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	2107      	movs	r1, #7
 8008e26:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2a:	43db      	mvns	r3, r3
 8008e2c:	401a      	ands	r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	0d1b      	lsrs	r3, r3, #20
 8008e32:	f003 031f 	and.w	r3, r3, #31
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
	...

08008e50 <LL_ADC_SetChannelSingleDiff>:
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ec8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d115      	bne.n	8008e90 <LL_ADC_SetChannelSingleDiff+0x40>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e70:	43db      	mvns	r3, r3
 8008e72:	401a      	ands	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f003 0318 	and.w	r3, r3, #24
 8008e7a:	4914      	ldr	r1, [pc, #80]	@ (8008ecc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008e7c:	40d9      	lsrs	r1, r3
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	400b      	ands	r3, r1
 8008e82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e86:	431a      	orrs	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8008e8e:	e014      	b.n	8008eba <LL_ADC_SetChannelSingleDiff+0x6a>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e9c:	43db      	mvns	r3, r3
 8008e9e:	401a      	ands	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f003 0318 	and.w	r3, r3, #24
 8008ea6:	4909      	ldr	r1, [pc, #36]	@ (8008ecc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008ea8:	40d9      	lsrs	r1, r3
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	400b      	ands	r3, r1
 8008eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	58026000 	.word	0x58026000
 8008ecc:	000fffff 	.word	0x000fffff

08008ed0 <LL_ADC_DisableDeepPowerDown>:
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	4b04      	ldr	r3, [pc, #16]	@ (8008ef0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8008ede:	4013      	ands	r3, r2
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6093      	str	r3, [r2, #8]
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	5fffffc0 	.word	0x5fffffc0

08008ef4 <LL_ADC_IsDeepPowerDownEnabled>:
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f08:	d101      	bne.n	8008f0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e000      	b.n	8008f10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <LL_ADC_EnableInternalRegulator>:
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	4b05      	ldr	r3, [pc, #20]	@ (8008f40 <LL_ADC_EnableInternalRegulator+0x24>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	609a      	str	r2, [r3, #8]
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	6fffffc0 	.word	0x6fffffc0

08008f44 <LL_ADC_IsInternalRegulatorEnabled>:
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f58:	d101      	bne.n	8008f5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e000      	b.n	8008f60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <LL_ADC_IsEnabled>:
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d101      	bne.n	8008f84 <LL_ADC_IsEnabled+0x18>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <LL_ADC_IsEnabled+0x1a>
 8008f84:	2300      	movs	r3, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <LL_ADC_REG_IsConversionOngoing>:
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	d101      	bne.n	8008faa <LL_ADC_REG_IsConversionOngoing+0x18>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e000      	b.n	8008fac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008faa:	2300      	movs	r3, #0
 8008fac:	4618      	mov	r0, r3
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <LL_ADC_INJ_IsConversionOngoing>:
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 0308 	and.w	r3, r3, #8
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d101      	bne.n	8008fd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
	...

08008fe0 <HAL_ADC_Init>:
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b089      	sub	sp, #36	@ 0x24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	77fb      	strb	r3, [r7, #31]
 8008fec:	2300      	movs	r3, #0
 8008fee:	60bb      	str	r3, [r7, #8]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_ADC_Init+0x1a>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e1ee      	b.n	80093d8 <HAL_ADC_Init+0x3f8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <HAL_ADC_Init+0x3c>
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7fe fa2b 	bl	8007464 <HAL_ADC_MspInit>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	665a      	str	r2, [r3, #100]	@ 0x64
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff ff67 	bl	8008ef4 <LL_ADC_IsDeepPowerDownEnabled>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d004      	beq.n	8009036 <HAL_ADC_Init+0x56>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff ff4d 	bl	8008ed0 <LL_ADC_DisableDeepPowerDown>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff ff82 	bl	8008f44 <LL_ADC_IsInternalRegulatorEnabled>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d114      	bne.n	8009070 <HAL_ADC_Init+0x90>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff ff66 	bl	8008f1c <LL_ADC_EnableInternalRegulator>
 8009050:	4b8e      	ldr	r3, [pc, #568]	@ (800928c <HAL_ADC_Init+0x2ac>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	099b      	lsrs	r3, r3, #6
 8009056:	4a8e      	ldr	r2, [pc, #568]	@ (8009290 <HAL_ADC_Init+0x2b0>)
 8009058:	fba2 2303 	umull	r2, r3, r2, r3
 800905c:	099b      	lsrs	r3, r3, #6
 800905e:	3301      	adds	r3, #1
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	e002      	b.n	800906a <HAL_ADC_Init+0x8a>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	3b01      	subs	r3, #1
 8009068:	60bb      	str	r3, [r7, #8]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1f9      	bne.n	8009064 <HAL_ADC_Init+0x84>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff ff65 	bl	8008f44 <LL_ADC_IsInternalRegulatorEnabled>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10d      	bne.n	800909c <HAL_ADC_Init+0xbc>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009084:	f043 0210 	orr.w	r2, r3, #16
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	661a      	str	r2, [r3, #96]	@ 0x60
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009090:	f043 0201 	orr.w	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	665a      	str	r2, [r3, #100]	@ 0x64
 8009098:	2301      	movs	r3, #1
 800909a:	77fb      	strb	r3, [r7, #31]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7ff ff76 	bl	8008f92 <LL_ADC_REG_IsConversionOngoing>
 80090a6:	6178      	str	r0, [r7, #20]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090ac:	f003 0310 	and.w	r3, r3, #16
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f040 8188 	bne.w	80093c6 <HAL_ADC_Init+0x3e6>
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f040 8184 	bne.w	80093c6 <HAL_ADC_Init+0x3e6>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090c2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80090c6:	f043 0202 	orr.w	r2, r3, #2
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7ff ff4a 	bl	8008f6c <LL_ADC_IsEnabled>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d136      	bne.n	800914c <HAL_ADC_Init+0x16c>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a6c      	ldr	r2, [pc, #432]	@ (8009294 <HAL_ADC_Init+0x2b4>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d004      	beq.n	80090f2 <HAL_ADC_Init+0x112>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a6a      	ldr	r2, [pc, #424]	@ (8009298 <HAL_ADC_Init+0x2b8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d10e      	bne.n	8009110 <HAL_ADC_Init+0x130>
 80090f2:	4868      	ldr	r0, [pc, #416]	@ (8009294 <HAL_ADC_Init+0x2b4>)
 80090f4:	f7ff ff3a 	bl	8008f6c <LL_ADC_IsEnabled>
 80090f8:	4604      	mov	r4, r0
 80090fa:	4867      	ldr	r0, [pc, #412]	@ (8009298 <HAL_ADC_Init+0x2b8>)
 80090fc:	f7ff ff36 	bl	8008f6c <LL_ADC_IsEnabled>
 8009100:	4603      	mov	r3, r0
 8009102:	4323      	orrs	r3, r4
 8009104:	2b00      	cmp	r3, #0
 8009106:	bf0c      	ite	eq
 8009108:	2301      	moveq	r3, #1
 800910a:	2300      	movne	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	e008      	b.n	8009122 <HAL_ADC_Init+0x142>
 8009110:	4862      	ldr	r0, [pc, #392]	@ (800929c <HAL_ADC_Init+0x2bc>)
 8009112:	f7ff ff2b 	bl	8008f6c <LL_ADC_IsEnabled>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	bf0c      	ite	eq
 800911c:	2301      	moveq	r3, #1
 800911e:	2300      	movne	r3, #0
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d012      	beq.n	800914c <HAL_ADC_Init+0x16c>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a5a      	ldr	r2, [pc, #360]	@ (8009294 <HAL_ADC_Init+0x2b4>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d004      	beq.n	800913a <HAL_ADC_Init+0x15a>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a58      	ldr	r2, [pc, #352]	@ (8009298 <HAL_ADC_Init+0x2b8>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d101      	bne.n	800913e <HAL_ADC_Init+0x15e>
 800913a:	4a59      	ldr	r2, [pc, #356]	@ (80092a0 <HAL_ADC_Init+0x2c0>)
 800913c:	e000      	b.n	8009140 <HAL_ADC_Init+0x160>
 800913e:	4a59      	ldr	r2, [pc, #356]	@ (80092a4 <HAL_ADC_Init+0x2c4>)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f7ff fd04 	bl	8008b54 <LL_ADC_SetCommonClock>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a52      	ldr	r2, [pc, #328]	@ (800929c <HAL_ADC_Init+0x2bc>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d129      	bne.n	80091aa <HAL_ADC_Init+0x1ca>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7e5b      	ldrb	r3, [r3, #25]
 800915a:	035a      	lsls	r2, r3, #13
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b08      	cmp	r3, #8
 800916e:	d013      	beq.n	8009198 <HAL_ADC_Init+0x1b8>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2b0c      	cmp	r3, #12
 8009176:	d00d      	beq.n	8009194 <HAL_ADC_Init+0x1b4>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	2b1c      	cmp	r3, #28
 800917e:	d007      	beq.n	8009190 <HAL_ADC_Init+0x1b0>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	2b18      	cmp	r3, #24
 8009186:	d101      	bne.n	800918c <HAL_ADC_Init+0x1ac>
 8009188:	2318      	movs	r3, #24
 800918a:	e006      	b.n	800919a <HAL_ADC_Init+0x1ba>
 800918c:	2300      	movs	r3, #0
 800918e:	e004      	b.n	800919a <HAL_ADC_Init+0x1ba>
 8009190:	2310      	movs	r3, #16
 8009192:	e002      	b.n	800919a <HAL_ADC_Init+0x1ba>
 8009194:	2308      	movs	r3, #8
 8009196:	e000      	b.n	800919a <HAL_ADC_Init+0x1ba>
 8009198:	2300      	movs	r3, #0
 800919a:	431a      	orrs	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091a2:	041b      	lsls	r3, r3, #16
 80091a4:	4313      	orrs	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
 80091a8:	e00e      	b.n	80091c8 <HAL_ADC_Init+0x1e8>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7e5b      	ldrb	r3, [r3, #25]
 80091ae:	035a      	lsls	r2, r3, #13
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091c2:	041b      	lsls	r3, r3, #16
 80091c4:	4313      	orrs	r3, r2
 80091c6:	61bb      	str	r3, [r7, #24]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d106      	bne.n	80091e0 <HAL_ADC_Init+0x200>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d6:	3b01      	subs	r3, #1
 80091d8:	045b      	lsls	r3, r3, #17
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	4313      	orrs	r3, r2
 80091de:	61bb      	str	r3, [r7, #24]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d009      	beq.n	80091fc <HAL_ADC_Init+0x21c>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f4:	4313      	orrs	r3, r2
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	61bb      	str	r3, [r7, #24]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a26      	ldr	r2, [pc, #152]	@ (800929c <HAL_ADC_Init+0x2bc>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d115      	bne.n	8009232 <HAL_ADC_Init+0x252>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	4b26      	ldr	r3, [pc, #152]	@ (80092a8 <HAL_ADC_Init+0x2c8>)
 800920e:	4013      	ands	r3, r2
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	69b9      	ldr	r1, [r7, #24]
 8009216:	430b      	orrs	r3, r1
 8009218:	60d3      	str	r3, [r2, #12]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	611a      	str	r2, [r3, #16]
 8009230:	e009      	b.n	8009246 <HAL_ADC_Init+0x266>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	4b1c      	ldr	r3, [pc, #112]	@ (80092ac <HAL_ADC_Init+0x2cc>)
 800923a:	4013      	ands	r3, r2
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6812      	ldr	r2, [r2, #0]
 8009240:	69b9      	ldr	r1, [r7, #24]
 8009242:	430b      	orrs	r3, r1
 8009244:	60d3      	str	r3, [r2, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff fea1 	bl	8008f92 <LL_ADC_REG_IsConversionOngoing>
 8009250:	6138      	str	r0, [r7, #16]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff feae 	bl	8008fb8 <LL_ADC_INJ_IsConversionOngoing>
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f040 808e 	bne.w	8009382 <HAL_ADC_Init+0x3a2>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	f040 808a 	bne.w	8009382 <HAL_ADC_Init+0x3a2>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a0a      	ldr	r2, [pc, #40]	@ (800929c <HAL_ADC_Init+0x2bc>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d11b      	bne.n	80092b0 <HAL_ADC_Init+0x2d0>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	7e1b      	ldrb	r3, [r3, #24]
 800927c:	039a      	lsls	r2, r3, #14
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	4313      	orrs	r3, r2
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	e018      	b.n	80092be <HAL_ADC_Init+0x2de>
 800928c:	24000150 	.word	0x24000150
 8009290:	053e2d63 	.word	0x053e2d63
 8009294:	40022000 	.word	0x40022000
 8009298:	40022100 	.word	0x40022100
 800929c:	58026000 	.word	0x58026000
 80092a0:	40022300 	.word	0x40022300
 80092a4:	58026300 	.word	0x58026300
 80092a8:	fff04007 	.word	0xfff04007
 80092ac:	fff0c003 	.word	0xfff0c003
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	7e1b      	ldrb	r3, [r3, #24]
 80092b4:	039a      	lsls	r2, r3, #14
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ba:	4313      	orrs	r3, r2
 80092bc:	61bb      	str	r3, [r7, #24]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	4b46      	ldr	r3, [pc, #280]	@ (80093e0 <HAL_ADC_Init+0x400>)
 80092c6:	4013      	ands	r3, r2
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	6812      	ldr	r2, [r2, #0]
 80092cc:	69b9      	ldr	r1, [r7, #24]
 80092ce:	430b      	orrs	r3, r1
 80092d0:	60d3      	str	r3, [r2, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d137      	bne.n	800934c <HAL_ADC_Init+0x36c>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a3f      	ldr	r2, [pc, #252]	@ (80093e4 <HAL_ADC_Init+0x404>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d116      	bne.n	800931a <HAL_ADC_Init+0x33a>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691a      	ldr	r2, [r3, #16]
 80092f2:	4b3d      	ldr	r3, [pc, #244]	@ (80093e8 <HAL_ADC_Init+0x408>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80092fe:	4311      	orrs	r1, r2
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009304:	4311      	orrs	r1, r2
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800930a:	430a      	orrs	r2, r1
 800930c:	431a      	orrs	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0201 	orr.w	r2, r2, #1
 8009316:	611a      	str	r2, [r3, #16]
 8009318:	e020      	b.n	800935c <HAL_ADC_Init+0x37c>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691a      	ldr	r2, [r3, #16]
 8009320:	4b32      	ldr	r3, [pc, #200]	@ (80093ec <HAL_ADC_Init+0x40c>)
 8009322:	4013      	ands	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009328:	3a01      	subs	r2, #1
 800932a:	0411      	lsls	r1, r2, #16
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009330:	4311      	orrs	r1, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009336:	4311      	orrs	r1, r2
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800933c:	430a      	orrs	r2, r1
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f042 0201 	orr.w	r2, r2, #1
 8009348:	611a      	str	r2, [r3, #16]
 800934a:	e007      	b.n	800935c <HAL_ADC_Init+0x37c>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	691a      	ldr	r2, [r3, #16]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 0201 	bic.w	r2, r2, #1
 800935a:	611a      	str	r2, [r3, #16]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	611a      	str	r2, [r3, #16]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a1b      	ldr	r2, [pc, #108]	@ (80093e4 <HAL_ADC_Init+0x404>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d002      	beq.n	8009382 <HAL_ADC_Init+0x3a2>
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fd67 	bl	8009e50 <ADC_ConfigureBoostMode>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d10c      	bne.n	80093a4 <HAL_ADC_Init+0x3c4>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009390:	f023 010f 	bic.w	r1, r3, #15
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	1e5a      	subs	r2, r3, #1
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80093a2:	e007      	b.n	80093b4 <HAL_ADC_Init+0x3d4>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 020f 	bic.w	r2, r2, #15
 80093b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	f043 0201 	orr.w	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	661a      	str	r2, [r3, #96]	@ 0x60
 80093c4:	e007      	b.n	80093d6 <HAL_ADC_Init+0x3f6>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ca:	f043 0210 	orr.w	r2, r3, #16
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80093d2:	2301      	movs	r3, #1
 80093d4:	77fb      	strb	r3, [r7, #31]
 80093d6:	7ffb      	ldrb	r3, [r7, #31]
 80093d8:	4618      	mov	r0, r3
 80093da:	3724      	adds	r7, #36	@ 0x24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd90      	pop	{r4, r7, pc}
 80093e0:	ffffbffc 	.word	0xffffbffc
 80093e4:	58026000 	.word	0x58026000
 80093e8:	fc00f81f 	.word	0xfc00f81f
 80093ec:	fc00f81e 	.word	0xfc00f81e

080093f0 <HAL_ADC_ConfigChannel>:
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b0b9      	sub	sp, #228	@ 0xe4
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
 80093fa:	2300      	movs	r3, #0
 80093fc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8009400:	2300      	movs	r3, #0
 8009402:	60bb      	str	r3, [r7, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800940a:	2b01      	cmp	r3, #1
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4aab      	ldr	r2, [pc, #684]	@ (80096c0 <HAL_ADC_ConfigChannel+0x2d0>)
 8009412:	4293      	cmp	r3, r2
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800941a:	2b01      	cmp	r3, #1
 800941c:	d102      	bne.n	8009424 <HAL_ADC_ConfigChannel+0x34>
 800941e:	2302      	movs	r3, #2
 8009420:	f000 bcfe 	b.w	8009e20 <HAL_ADC_ConfigChannel+0xa30>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff fdae 	bl	8008f92 <LL_ADC_REG_IsConversionOngoing>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	f040 84e2 	bne.w	8009e02 <HAL_ADC_ConfigChannel+0xa12>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	db38      	blt.n	80094b8 <HAL_ADC_ConfigChannel+0xc8>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a9e      	ldr	r2, [pc, #632]	@ (80096c4 <HAL_ADC_ConfigChannel+0x2d4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d033      	beq.n	80094b8 <HAL_ADC_ConfigChannel+0xc8>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009458:	2b00      	cmp	r3, #0
 800945a:	d108      	bne.n	800946e <HAL_ADC_ConfigChannel+0x7e>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	0e9b      	lsrs	r3, r3, #26
 8009462:	f003 031f 	and.w	r3, r3, #31
 8009466:	2201      	movs	r2, #1
 8009468:	fa02 f303 	lsl.w	r3, r2, r3
 800946c:	e01d      	b.n	80094aa <HAL_ADC_ConfigChannel+0xba>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800947a:	fa93 f3a3 	rbit	r3, r3
 800947e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009486:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800948a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_ADC_ConfigChannel+0xa6>
 8009492:	2320      	movs	r3, #32
 8009494:	e004      	b.n	80094a0 <HAL_ADC_ConfigChannel+0xb0>
 8009496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800949a:	fab3 f383 	clz	r3, r3
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	2201      	movs	r2, #1
 80094a6:	fa02 f303 	lsl.w	r3, r2, r3
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	69d1      	ldr	r1, [r2, #28]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	6812      	ldr	r2, [r2, #0]
 80094b4:	430b      	orrs	r3, r1
 80094b6:	61d3      	str	r3, [r2, #28]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	6859      	ldr	r1, [r3, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	461a      	mov	r2, r3
 80094c6:	f7ff fc6b 	bl	8008da0 <LL_ADC_REG_SetSequencerRanks>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff fd5f 	bl	8008f92 <LL_ADC_REG_IsConversionOngoing>
 80094d4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fd6b 	bl	8008fb8 <LL_ADC_INJ_IsConversionOngoing>
 80094e2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
 80094e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f040 8270 	bne.w	80099d0 <HAL_ADC_ConfigChannel+0x5e0>
 80094f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f040 826b 	bne.w	80099d0 <HAL_ADC_ConfigChannel+0x5e0>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6818      	ldr	r0, [r3, #0]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	6819      	ldr	r1, [r3, #0]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	461a      	mov	r2, r3
 8009508:	f7ff fc76 	bl	8008df8 <LL_ADC_SetChannelSamplingTime>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a6c      	ldr	r2, [pc, #432]	@ (80096c4 <HAL_ADC_ConfigChannel+0x2d4>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d10d      	bne.n	8009532 <HAL_ADC_ConfigChannel+0x142>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	695a      	ldr	r2, [r3, #20]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	08db      	lsrs	r3, r3, #3
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	fa02 f303 	lsl.w	r3, r2, r3
 800952c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009530:	e032      	b.n	8009598 <HAL_ADC_ConfigChannel+0x1a8>
 8009532:	4b65      	ldr	r3, [pc, #404]	@ (80096c8 <HAL_ADC_ConfigChannel+0x2d8>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800953a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800953e:	d10b      	bne.n	8009558 <HAL_ADC_ConfigChannel+0x168>
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	695a      	ldr	r2, [r3, #20]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	089b      	lsrs	r3, r3, #2
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	fa02 f303 	lsl.w	r3, r2, r3
 8009556:	e01d      	b.n	8009594 <HAL_ADC_ConfigChannel+0x1a4>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f003 0310 	and.w	r3, r3, #16
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10b      	bne.n	800957e <HAL_ADC_ConfigChannel+0x18e>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	695a      	ldr	r2, [r3, #20]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	089b      	lsrs	r3, r3, #2
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	fa02 f303 	lsl.w	r3, r2, r3
 800957c:	e00a      	b.n	8009594 <HAL_ADC_ConfigChannel+0x1a4>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	695a      	ldr	r2, [r3, #20]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	089b      	lsrs	r3, r3, #2
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	fa02 f303 	lsl.w	r3, r2, r3
 8009594:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	2b04      	cmp	r3, #4
 800959e:	d048      	beq.n	8009632 <HAL_ADC_ConfigChannel+0x242>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6818      	ldr	r0, [r3, #0]
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	6919      	ldr	r1, [r3, #16]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095b0:	f7ff fb04 	bl	8008bbc <LL_ADC_SetOffset>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a42      	ldr	r2, [pc, #264]	@ (80096c4 <HAL_ADC_ConfigChannel+0x2d4>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d119      	bne.n	80095f2 <HAL_ADC_ConfigChannel+0x202>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	6919      	ldr	r1, [r3, #16]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	461a      	mov	r2, r3
 80095cc:	f7ff fb9c 	bl	8008d08 <LL_ADC_SetOffsetSign>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	6919      	ldr	r1, [r3, #16]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d102      	bne.n	80095e8 <HAL_ADC_ConfigChannel+0x1f8>
 80095e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80095e6:	e000      	b.n	80095ea <HAL_ADC_ConfigChannel+0x1fa>
 80095e8:	2300      	movs	r3, #0
 80095ea:	461a      	mov	r2, r3
 80095ec:	f7ff fb6a 	bl	8008cc4 <LL_ADC_SetOffsetSaturation>
 80095f0:	e1ee      	b.n	80099d0 <HAL_ADC_ConfigChannel+0x5e0>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6818      	ldr	r0, [r3, #0]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	6919      	ldr	r1, [r3, #16]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009600:	2b01      	cmp	r3, #1
 8009602:	d102      	bne.n	800960a <HAL_ADC_ConfigChannel+0x21a>
 8009604:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009608:	e000      	b.n	800960c <HAL_ADC_ConfigChannel+0x21c>
 800960a:	2300      	movs	r3, #0
 800960c:	461a      	mov	r2, r3
 800960e:	f7ff fb37 	bl	8008c80 <LL_ADC_SetOffsetSignedSaturation>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6818      	ldr	r0, [r3, #0]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	6919      	ldr	r1, [r3, #16]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	7e1b      	ldrb	r3, [r3, #24]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d102      	bne.n	8009628 <HAL_ADC_ConfigChannel+0x238>
 8009622:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009626:	e000      	b.n	800962a <HAL_ADC_ConfigChannel+0x23a>
 8009628:	2300      	movs	r3, #0
 800962a:	461a      	mov	r2, r3
 800962c:	f7ff fb0e 	bl	8008c4c <LL_ADC_SetDataRightShift>
 8009630:	e1ce      	b.n	80099d0 <HAL_ADC_ConfigChannel+0x5e0>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a23      	ldr	r2, [pc, #140]	@ (80096c4 <HAL_ADC_ConfigChannel+0x2d4>)
 8009638:	4293      	cmp	r3, r2
 800963a:	f040 8181 	bne.w	8009940 <HAL_ADC_ConfigChannel+0x550>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2100      	movs	r1, #0
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff faeb 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 800964a:	4603      	mov	r3, r0
 800964c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10a      	bne.n	800966a <HAL_ADC_ConfigChannel+0x27a>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff fae0 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 8009660:	4603      	mov	r3, r0
 8009662:	0e9b      	lsrs	r3, r3, #26
 8009664:	f003 021f 	and.w	r2, r3, #31
 8009668:	e01e      	b.n	80096a8 <HAL_ADC_ConfigChannel+0x2b8>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff fad5 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 8009676:	4603      	mov	r3, r0
 8009678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800967c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009680:	fa93 f3a3 	rbit	r3, r3
 8009684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800968c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009690:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <HAL_ADC_ConfigChannel+0x2ac>
 8009698:	2320      	movs	r3, #32
 800969a:	e004      	b.n	80096a6 <HAL_ADC_ConfigChannel+0x2b6>
 800969c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80096a0:	fab3 f383 	clz	r3, r3
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <HAL_ADC_ConfigChannel+0x2dc>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	0e9b      	lsrs	r3, r3, #26
 80096ba:	f003 031f 	and.w	r3, r3, #31
 80096be:	e01e      	b.n	80096fe <HAL_ADC_ConfigChannel+0x30e>
 80096c0:	47ff0000 	.word	0x47ff0000
 80096c4:	58026000 	.word	0x58026000
 80096c8:	5c001000 	.word	0x5c001000
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096d8:	fa93 f3a3 	rbit	r3, r3
 80096dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <HAL_ADC_ConfigChannel+0x304>
 80096f0:	2320      	movs	r3, #32
 80096f2:	e004      	b.n	80096fe <HAL_ADC_ConfigChannel+0x30e>
 80096f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80096f8:	fab3 f383 	clz	r3, r3
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	429a      	cmp	r2, r3
 8009700:	d106      	bne.n	8009710 <HAL_ADC_ConfigChannel+0x320>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2200      	movs	r2, #0
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fb1e 	bl	8008d4c <LL_ADC_SetOffsetState>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2101      	movs	r1, #1
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff fa82 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 800971c:	4603      	mov	r3, r0
 800971e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <HAL_ADC_ConfigChannel+0x34c>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2101      	movs	r1, #1
 800972c:	4618      	mov	r0, r3
 800972e:	f7ff fa77 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 8009732:	4603      	mov	r3, r0
 8009734:	0e9b      	lsrs	r3, r3, #26
 8009736:	f003 021f 	and.w	r2, r3, #31
 800973a:	e01e      	b.n	800977a <HAL_ADC_ConfigChannel+0x38a>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2101      	movs	r1, #1
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff fa6c 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 8009748:	4603      	mov	r3, r0
 800974a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800974e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009752:	fa93 f3a3 	rbit	r3, r3
 8009756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800975a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800975e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <HAL_ADC_ConfigChannel+0x37e>
 800976a:	2320      	movs	r3, #32
 800976c:	e004      	b.n	8009778 <HAL_ADC_ConfigChannel+0x388>
 800976e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009772:	fab3 f383 	clz	r3, r3
 8009776:	b2db      	uxtb	r3, r3
 8009778:	461a      	mov	r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009782:	2b00      	cmp	r3, #0
 8009784:	d105      	bne.n	8009792 <HAL_ADC_ConfigChannel+0x3a2>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	0e9b      	lsrs	r3, r3, #26
 800978c:	f003 031f 	and.w	r3, r3, #31
 8009790:	e018      	b.n	80097c4 <HAL_ADC_ConfigChannel+0x3d4>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800979a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800979e:	fa93 f3a3 	rbit	r3, r3
 80097a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80097a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80097aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <HAL_ADC_ConfigChannel+0x3ca>
 80097b6:	2320      	movs	r3, #32
 80097b8:	e004      	b.n	80097c4 <HAL_ADC_ConfigChannel+0x3d4>
 80097ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097be:	fab3 f383 	clz	r3, r3
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d106      	bne.n	80097d6 <HAL_ADC_ConfigChannel+0x3e6>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2200      	movs	r2, #0
 80097ce:	2101      	movs	r1, #1
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff fabb 	bl	8008d4c <LL_ADC_SetOffsetState>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2102      	movs	r1, #2
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff fa1f 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 80097e2:	4603      	mov	r3, r0
 80097e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10a      	bne.n	8009802 <HAL_ADC_ConfigChannel+0x412>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2102      	movs	r1, #2
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff fa14 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 80097f8:	4603      	mov	r3, r0
 80097fa:	0e9b      	lsrs	r3, r3, #26
 80097fc:	f003 021f 	and.w	r2, r3, #31
 8009800:	e01e      	b.n	8009840 <HAL_ADC_ConfigChannel+0x450>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2102      	movs	r1, #2
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff fa09 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 800980e:	4603      	mov	r3, r0
 8009810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009814:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009818:	fa93 f3a3 	rbit	r3, r3
 800981c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009820:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009824:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <HAL_ADC_ConfigChannel+0x444>
 8009830:	2320      	movs	r3, #32
 8009832:	e004      	b.n	800983e <HAL_ADC_ConfigChannel+0x44e>
 8009834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009838:	fab3 f383 	clz	r3, r3
 800983c:	b2db      	uxtb	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009848:	2b00      	cmp	r3, #0
 800984a:	d105      	bne.n	8009858 <HAL_ADC_ConfigChannel+0x468>
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	0e9b      	lsrs	r3, r3, #26
 8009852:	f003 031f 	and.w	r3, r3, #31
 8009856:	e014      	b.n	8009882 <HAL_ADC_ConfigChannel+0x492>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800985e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009860:	fa93 f3a3 	rbit	r3, r3
 8009864:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009866:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800986c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <HAL_ADC_ConfigChannel+0x488>
 8009874:	2320      	movs	r3, #32
 8009876:	e004      	b.n	8009882 <HAL_ADC_ConfigChannel+0x492>
 8009878:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800987c:	fab3 f383 	clz	r3, r3
 8009880:	b2db      	uxtb	r3, r3
 8009882:	429a      	cmp	r2, r3
 8009884:	d106      	bne.n	8009894 <HAL_ADC_ConfigChannel+0x4a4>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	2102      	movs	r1, #2
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff fa5c 	bl	8008d4c <LL_ADC_SetOffsetState>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2103      	movs	r1, #3
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff f9c0 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10a      	bne.n	80098c0 <HAL_ADC_ConfigChannel+0x4d0>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2103      	movs	r1, #3
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff f9b5 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 80098b6:	4603      	mov	r3, r0
 80098b8:	0e9b      	lsrs	r3, r3, #26
 80098ba:	f003 021f 	and.w	r2, r3, #31
 80098be:	e017      	b.n	80098f0 <HAL_ADC_ConfigChannel+0x500>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2103      	movs	r1, #3
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7ff f9aa 	bl	8008c20 <LL_ADC_GetOffsetChannel>
 80098cc:	4603      	mov	r3, r0
 80098ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80098d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098d2:	fa93 f3a3 	rbit	r3, r3
 80098d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098da:	677b      	str	r3, [r7, #116]	@ 0x74
 80098dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <HAL_ADC_ConfigChannel+0x4f6>
 80098e2:	2320      	movs	r3, #32
 80098e4:	e003      	b.n	80098ee <HAL_ADC_ConfigChannel+0x4fe>
 80098e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098e8:	fab3 f383 	clz	r3, r3
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d105      	bne.n	8009908 <HAL_ADC_ConfigChannel+0x518>
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	0e9b      	lsrs	r3, r3, #26
 8009902:	f003 031f 	and.w	r3, r3, #31
 8009906:	e011      	b.n	800992c <HAL_ADC_ConfigChannel+0x53c>
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	667b      	str	r3, [r7, #100]	@ 0x64
 800990e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009910:	fa93 f3a3 	rbit	r3, r3
 8009914:	663b      	str	r3, [r7, #96]	@ 0x60
 8009916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009918:	66bb      	str	r3, [r7, #104]	@ 0x68
 800991a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <HAL_ADC_ConfigChannel+0x534>
 8009920:	2320      	movs	r3, #32
 8009922:	e003      	b.n	800992c <HAL_ADC_ConfigChannel+0x53c>
 8009924:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009926:	fab3 f383 	clz	r3, r3
 800992a:	b2db      	uxtb	r3, r3
 800992c:	429a      	cmp	r2, r3
 800992e:	d14f      	bne.n	80099d0 <HAL_ADC_ConfigChannel+0x5e0>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2200      	movs	r2, #0
 8009936:	2103      	movs	r1, #3
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fa07 	bl	8008d4c <LL_ADC_SetOffsetState>
 800993e:	e047      	b.n	80099d0 <HAL_ADC_ConfigChannel+0x5e0>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009946:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	069b      	lsls	r3, r3, #26
 8009950:	429a      	cmp	r2, r3
 8009952:	d107      	bne.n	8009964 <HAL_ADC_ConfigChannel+0x574>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009962:	661a      	str	r2, [r3, #96]	@ 0x60
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800996a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	069b      	lsls	r3, r3, #26
 8009974:	429a      	cmp	r2, r3
 8009976:	d107      	bne.n	8009988 <HAL_ADC_ConfigChannel+0x598>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009986:	665a      	str	r2, [r3, #100]	@ 0x64
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800998e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	069b      	lsls	r3, r3, #26
 8009998:	429a      	cmp	r2, r3
 800999a:	d107      	bne.n	80099ac <HAL_ADC_ConfigChannel+0x5bc>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80099aa:	669a      	str	r2, [r3, #104]	@ 0x68
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	069b      	lsls	r3, r3, #26
 80099bc:	429a      	cmp	r2, r3
 80099be:	d107      	bne.n	80099d0 <HAL_ADC_ConfigChannel+0x5e0>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80099ce:	66da      	str	r2, [r3, #108]	@ 0x6c
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff fac9 	bl	8008f6c <LL_ADC_IsEnabled>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f040 8219 	bne.w	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	6819      	ldr	r1, [r3, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f7ff fa2e 	bl	8008e50 <LL_ADC_SetChannelSingleDiff>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	4aa1      	ldr	r2, [pc, #644]	@ (8009c80 <HAL_ADC_ConfigChannel+0x890>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	f040 812e 	bne.w	8009c5c <HAL_ADC_ConfigChannel+0x86c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10b      	bne.n	8009a28 <HAL_ADC_ConfigChannel+0x638>
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	0e9b      	lsrs	r3, r3, #26
 8009a16:	3301      	adds	r3, #1
 8009a18:	f003 031f 	and.w	r3, r3, #31
 8009a1c:	2b09      	cmp	r3, #9
 8009a1e:	bf94      	ite	ls
 8009a20:	2301      	movls	r3, #1
 8009a22:	2300      	movhi	r3, #0
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	e019      	b.n	8009a5c <HAL_ADC_ConfigChannel+0x66c>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a30:	fa93 f3a3 	rbit	r3, r3
 8009a34:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <HAL_ADC_ConfigChannel+0x654>
 8009a40:	2320      	movs	r3, #32
 8009a42:	e003      	b.n	8009a4c <HAL_ADC_ConfigChannel+0x65c>
 8009a44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a46:	fab3 f383 	clz	r3, r3
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	f003 031f 	and.w	r3, r3, #31
 8009a52:	2b09      	cmp	r3, #9
 8009a54:	bf94      	ite	ls
 8009a56:	2301      	movls	r3, #1
 8009a58:	2300      	movhi	r3, #0
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d079      	beq.n	8009b54 <HAL_ADC_ConfigChannel+0x764>
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d107      	bne.n	8009a7c <HAL_ADC_ConfigChannel+0x68c>
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	0e9b      	lsrs	r3, r3, #26
 8009a72:	3301      	adds	r3, #1
 8009a74:	069b      	lsls	r3, r3, #26
 8009a76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009a7a:	e015      	b.n	8009aa8 <HAL_ADC_ConfigChannel+0x6b8>
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a84:	fa93 f3a3 	rbit	r3, r3
 8009a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <HAL_ADC_ConfigChannel+0x6a8>
 8009a94:	2320      	movs	r3, #32
 8009a96:	e003      	b.n	8009aa0 <HAL_ADC_ConfigChannel+0x6b0>
 8009a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a9a:	fab3 f383 	clz	r3, r3
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	069b      	lsls	r3, r3, #26
 8009aa4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d109      	bne.n	8009ac8 <HAL_ADC_ConfigChannel+0x6d8>
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	0e9b      	lsrs	r3, r3, #26
 8009aba:	3301      	adds	r3, #1
 8009abc:	f003 031f 	and.w	r3, r3, #31
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac6:	e017      	b.n	8009af8 <HAL_ADC_ConfigChannel+0x708>
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ad0:	fa93 f3a3 	rbit	r3, r3
 8009ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d101      	bne.n	8009ae4 <HAL_ADC_ConfigChannel+0x6f4>
 8009ae0:	2320      	movs	r3, #32
 8009ae2:	e003      	b.n	8009aec <HAL_ADC_ConfigChannel+0x6fc>
 8009ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ae6:	fab3 f383 	clz	r3, r3
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	3301      	adds	r3, #1
 8009aee:	f003 031f 	and.w	r3, r3, #31
 8009af2:	2101      	movs	r1, #1
 8009af4:	fa01 f303 	lsl.w	r3, r1, r3
 8009af8:	ea42 0103 	orr.w	r1, r2, r3
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10a      	bne.n	8009b1e <HAL_ADC_ConfigChannel+0x72e>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	0e9b      	lsrs	r3, r3, #26
 8009b0e:	3301      	adds	r3, #1
 8009b10:	f003 021f 	and.w	r2, r3, #31
 8009b14:	4613      	mov	r3, r2
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	4413      	add	r3, r2
 8009b1a:	051b      	lsls	r3, r3, #20
 8009b1c:	e018      	b.n	8009b50 <HAL_ADC_ConfigChannel+0x760>
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b26:	fa93 f3a3 	rbit	r3, r3
 8009b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_ADC_ConfigChannel+0x74a>
 8009b36:	2320      	movs	r3, #32
 8009b38:	e003      	b.n	8009b42 <HAL_ADC_ConfigChannel+0x752>
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3c:	fab3 f383 	clz	r3, r3
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	3301      	adds	r3, #1
 8009b44:	f003 021f 	and.w	r2, r3, #31
 8009b48:	4613      	mov	r3, r2
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	4413      	add	r3, r2
 8009b4e:	051b      	lsls	r3, r3, #20
 8009b50:	430b      	orrs	r3, r1
 8009b52:	e07e      	b.n	8009c52 <HAL_ADC_ConfigChannel+0x862>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d107      	bne.n	8009b70 <HAL_ADC_ConfigChannel+0x780>
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	0e9b      	lsrs	r3, r3, #26
 8009b66:	3301      	adds	r3, #1
 8009b68:	069b      	lsls	r3, r3, #26
 8009b6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009b6e:	e015      	b.n	8009b9c <HAL_ADC_ConfigChannel+0x7ac>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b78:	fa93 f3a3 	rbit	r3, r3
 8009b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <HAL_ADC_ConfigChannel+0x79c>
 8009b88:	2320      	movs	r3, #32
 8009b8a:	e003      	b.n	8009b94 <HAL_ADC_ConfigChannel+0x7a4>
 8009b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8e:	fab3 f383 	clz	r3, r3
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	3301      	adds	r3, #1
 8009b96:	069b      	lsls	r3, r3, #26
 8009b98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d109      	bne.n	8009bbc <HAL_ADC_ConfigChannel+0x7cc>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	0e9b      	lsrs	r3, r3, #26
 8009bae:	3301      	adds	r3, #1
 8009bb0:	f003 031f 	and.w	r3, r3, #31
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009bba:	e017      	b.n	8009bec <HAL_ADC_ConfigChannel+0x7fc>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	61fb      	str	r3, [r7, #28]
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	fa93 f3a3 	rbit	r3, r3
 8009bc8:	61bb      	str	r3, [r7, #24]
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	623b      	str	r3, [r7, #32]
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <HAL_ADC_ConfigChannel+0x7e8>
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	e003      	b.n	8009be0 <HAL_ADC_ConfigChannel+0x7f0>
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	fab3 f383 	clz	r3, r3
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	3301      	adds	r3, #1
 8009be2:	f003 031f 	and.w	r3, r3, #31
 8009be6:	2101      	movs	r1, #1
 8009be8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bec:	ea42 0103 	orr.w	r1, r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10d      	bne.n	8009c18 <HAL_ADC_ConfigChannel+0x828>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	0e9b      	lsrs	r3, r3, #26
 8009c02:	3301      	adds	r3, #1
 8009c04:	f003 021f 	and.w	r2, r3, #31
 8009c08:	4613      	mov	r3, r2
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	4413      	add	r3, r2
 8009c0e:	3b1e      	subs	r3, #30
 8009c10:	051b      	lsls	r3, r3, #20
 8009c12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009c16:	e01b      	b.n	8009c50 <HAL_ADC_ConfigChannel+0x860>
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	613b      	str	r3, [r7, #16]
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	fa93 f3a3 	rbit	r3, r3
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	617b      	str	r3, [r7, #20]
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <HAL_ADC_ConfigChannel+0x844>
 8009c30:	2320      	movs	r3, #32
 8009c32:	e003      	b.n	8009c3c <HAL_ADC_ConfigChannel+0x84c>
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	fab3 f383 	clz	r3, r3
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	f003 021f 	and.w	r2, r3, #31
 8009c42:	4613      	mov	r3, r2
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	4413      	add	r3, r2
 8009c48:	3b1e      	subs	r3, #30
 8009c4a:	051b      	lsls	r3, r3, #20
 8009c4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009c50:	430b      	orrs	r3, r1
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	6892      	ldr	r2, [r2, #8]
 8009c56:	4619      	mov	r1, r3
 8009c58:	f7ff f8ce 	bl	8008df8 <LL_ADC_SetChannelSamplingTime>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f280 80d7 	bge.w	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a06      	ldr	r2, [pc, #24]	@ (8009c84 <HAL_ADC_ConfigChannel+0x894>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d004      	beq.n	8009c7a <HAL_ADC_ConfigChannel+0x88a>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a04      	ldr	r2, [pc, #16]	@ (8009c88 <HAL_ADC_ConfigChannel+0x898>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d10a      	bne.n	8009c90 <HAL_ADC_ConfigChannel+0x8a0>
 8009c7a:	4b04      	ldr	r3, [pc, #16]	@ (8009c8c <HAL_ADC_ConfigChannel+0x89c>)
 8009c7c:	e009      	b.n	8009c92 <HAL_ADC_ConfigChannel+0x8a2>
 8009c7e:	bf00      	nop
 8009c80:	47ff0000 	.word	0x47ff0000
 8009c84:	40022000 	.word	0x40022000
 8009c88:	40022100 	.word	0x40022100
 8009c8c:	40022300 	.word	0x40022300
 8009c90:	4b65      	ldr	r3, [pc, #404]	@ (8009e28 <HAL_ADC_ConfigChannel+0xa38>)
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe ff84 	bl	8008ba0 <LL_ADC_GetCommonPathInternalCh>
 8009c98:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a62      	ldr	r2, [pc, #392]	@ (8009e2c <HAL_ADC_ConfigChannel+0xa3c>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d004      	beq.n	8009cb0 <HAL_ADC_ConfigChannel+0x8c0>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a61      	ldr	r2, [pc, #388]	@ (8009e30 <HAL_ADC_ConfigChannel+0xa40>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d10e      	bne.n	8009cce <HAL_ADC_ConfigChannel+0x8de>
 8009cb0:	485e      	ldr	r0, [pc, #376]	@ (8009e2c <HAL_ADC_ConfigChannel+0xa3c>)
 8009cb2:	f7ff f95b 	bl	8008f6c <LL_ADC_IsEnabled>
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	485d      	ldr	r0, [pc, #372]	@ (8009e30 <HAL_ADC_ConfigChannel+0xa40>)
 8009cba:	f7ff f957 	bl	8008f6c <LL_ADC_IsEnabled>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	4323      	orrs	r3, r4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bf0c      	ite	eq
 8009cc6:	2301      	moveq	r3, #1
 8009cc8:	2300      	movne	r3, #0
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	e008      	b.n	8009ce0 <HAL_ADC_ConfigChannel+0x8f0>
 8009cce:	4859      	ldr	r0, [pc, #356]	@ (8009e34 <HAL_ADC_ConfigChannel+0xa44>)
 8009cd0:	f7ff f94c 	bl	8008f6c <LL_ADC_IsEnabled>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bf0c      	ite	eq
 8009cda:	2301      	moveq	r3, #1
 8009cdc:	2300      	movne	r3, #0
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 8084 	beq.w	8009dee <HAL_ADC_ConfigChannel+0x9fe>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a53      	ldr	r2, [pc, #332]	@ (8009e38 <HAL_ADC_ConfigChannel+0xa48>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d132      	bne.n	8009d56 <HAL_ADC_ConfigChannel+0x966>
 8009cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d12c      	bne.n	8009d56 <HAL_ADC_ConfigChannel+0x966>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a4c      	ldr	r2, [pc, #304]	@ (8009e34 <HAL_ADC_ConfigChannel+0xa44>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	f040 8086 	bne.w	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a47      	ldr	r2, [pc, #284]	@ (8009e2c <HAL_ADC_ConfigChannel+0xa3c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d004      	beq.n	8009d1c <HAL_ADC_ConfigChannel+0x92c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a46      	ldr	r2, [pc, #280]	@ (8009e30 <HAL_ADC_ConfigChannel+0xa40>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d101      	bne.n	8009d20 <HAL_ADC_ConfigChannel+0x930>
 8009d1c:	4a47      	ldr	r2, [pc, #284]	@ (8009e3c <HAL_ADC_ConfigChannel+0xa4c>)
 8009d1e:	e000      	b.n	8009d22 <HAL_ADC_ConfigChannel+0x932>
 8009d20:	4a41      	ldr	r2, [pc, #260]	@ (8009e28 <HAL_ADC_ConfigChannel+0xa38>)
 8009d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	f7fe ff24 	bl	8008b7a <LL_ADC_SetCommonPathInternalCh>
 8009d32:	4b43      	ldr	r3, [pc, #268]	@ (8009e40 <HAL_ADC_ConfigChannel+0xa50>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	099b      	lsrs	r3, r3, #6
 8009d38:	4a42      	ldr	r2, [pc, #264]	@ (8009e44 <HAL_ADC_ConfigChannel+0xa54>)
 8009d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d3e:	099b      	lsrs	r3, r3, #6
 8009d40:	3301      	adds	r3, #1
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	60bb      	str	r3, [r7, #8]
 8009d46:	e002      	b.n	8009d4e <HAL_ADC_ConfigChannel+0x95e>
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	60bb      	str	r3, [r7, #8]
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1f9      	bne.n	8009d48 <HAL_ADC_ConfigChannel+0x958>
 8009d54:	e05e      	b.n	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a3b      	ldr	r2, [pc, #236]	@ (8009e48 <HAL_ADC_ConfigChannel+0xa58>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d120      	bne.n	8009da2 <HAL_ADC_ConfigChannel+0x9b2>
 8009d60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009d64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d11a      	bne.n	8009da2 <HAL_ADC_ConfigChannel+0x9b2>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a30      	ldr	r2, [pc, #192]	@ (8009e34 <HAL_ADC_ConfigChannel+0xa44>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d14e      	bne.n	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8009e2c <HAL_ADC_ConfigChannel+0xa3c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d004      	beq.n	8009d8a <HAL_ADC_ConfigChannel+0x99a>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a2a      	ldr	r2, [pc, #168]	@ (8009e30 <HAL_ADC_ConfigChannel+0xa40>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d101      	bne.n	8009d8e <HAL_ADC_ConfigChannel+0x99e>
 8009d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8009e3c <HAL_ADC_ConfigChannel+0xa4c>)
 8009d8c:	e000      	b.n	8009d90 <HAL_ADC_ConfigChannel+0x9a0>
 8009d8e:	4a26      	ldr	r2, [pc, #152]	@ (8009e28 <HAL_ADC_ConfigChannel+0xa38>)
 8009d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009d94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	f7fe feed 	bl	8008b7a <LL_ADC_SetCommonPathInternalCh>
 8009da0:	e038      	b.n	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a29      	ldr	r2, [pc, #164]	@ (8009e4c <HAL_ADC_ConfigChannel+0xa5c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d133      	bne.n	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d12d      	bne.n	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8009e34 <HAL_ADC_ConfigChannel+0xa44>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d128      	bne.n	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a19      	ldr	r2, [pc, #100]	@ (8009e2c <HAL_ADC_ConfigChannel+0xa3c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d004      	beq.n	8009dd6 <HAL_ADC_ConfigChannel+0x9e6>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a17      	ldr	r2, [pc, #92]	@ (8009e30 <HAL_ADC_ConfigChannel+0xa40>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d101      	bne.n	8009dda <HAL_ADC_ConfigChannel+0x9ea>
 8009dd6:	4a19      	ldr	r2, [pc, #100]	@ (8009e3c <HAL_ADC_ConfigChannel+0xa4c>)
 8009dd8:	e000      	b.n	8009ddc <HAL_ADC_ConfigChannel+0x9ec>
 8009dda:	4a13      	ldr	r2, [pc, #76]	@ (8009e28 <HAL_ADC_ConfigChannel+0xa38>)
 8009ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009de0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009de4:	4619      	mov	r1, r3
 8009de6:	4610      	mov	r0, r2
 8009de8:	f7fe fec7 	bl	8008b7a <LL_ADC_SetCommonPathInternalCh>
 8009dec:	e012      	b.n	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009df2:	f043 0220 	orr.w	r2, r3, #32
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	661a      	str	r2, [r3, #96]	@ 0x60
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8009e00:	e008      	b.n	8009e14 <HAL_ADC_ConfigChannel+0xa24>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e06:	f043 0220 	orr.w	r2, r3, #32
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009e1c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8009e20:	4618      	mov	r0, r3
 8009e22:	37e4      	adds	r7, #228	@ 0xe4
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd90      	pop	{r4, r7, pc}
 8009e28:	58026300 	.word	0x58026300
 8009e2c:	40022000 	.word	0x40022000
 8009e30:	40022100 	.word	0x40022100
 8009e34:	58026000 	.word	0x58026000
 8009e38:	c7520000 	.word	0xc7520000
 8009e3c:	40022300 	.word	0x40022300
 8009e40:	24000150 	.word	0x24000150
 8009e44:	053e2d63 	.word	0x053e2d63
 8009e48:	c3210000 	.word	0xc3210000
 8009e4c:	cb840000 	.word	0xcb840000

08009e50 <ADC_ConfigureBoostMode>:
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a6c      	ldr	r2, [pc, #432]	@ (800a010 <ADC_ConfigureBoostMode+0x1c0>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d004      	beq.n	8009e6c <ADC_ConfigureBoostMode+0x1c>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a6b      	ldr	r2, [pc, #428]	@ (800a014 <ADC_ConfigureBoostMode+0x1c4>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d109      	bne.n	8009e80 <ADC_ConfigureBoostMode+0x30>
 8009e6c:	4b6a      	ldr	r3, [pc, #424]	@ (800a018 <ADC_ConfigureBoostMode+0x1c8>)
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bf14      	ite	ne
 8009e78:	2301      	movne	r3, #1
 8009e7a:	2300      	moveq	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	e008      	b.n	8009e92 <ADC_ConfigureBoostMode+0x42>
 8009e80:	4b66      	ldr	r3, [pc, #408]	@ (800a01c <ADC_ConfigureBoostMode+0x1cc>)
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bf14      	ite	ne
 8009e8c:	2301      	movne	r3, #1
 8009e8e:	2300      	moveq	r3, #0
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d01c      	beq.n	8009ed0 <ADC_ConfigureBoostMode+0x80>
 8009e96:	f003 fec3 	bl	800dc20 <HAL_RCC_GetHCLKFreq>
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ea4:	d010      	beq.n	8009ec8 <ADC_ConfigureBoostMode+0x78>
 8009ea6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009eaa:	d873      	bhi.n	8009f94 <ADC_ConfigureBoostMode+0x144>
 8009eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eb0:	d002      	beq.n	8009eb8 <ADC_ConfigureBoostMode+0x68>
 8009eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eb6:	d16d      	bne.n	8009f94 <ADC_ConfigureBoostMode+0x144>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	0c1b      	lsrs	r3, r3, #16
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec4:	60fb      	str	r3, [r7, #12]
 8009ec6:	e068      	b.n	8009f9a <ADC_ConfigureBoostMode+0x14a>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	089b      	lsrs	r3, r3, #2
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	e064      	b.n	8009f9a <ADC_ConfigureBoostMode+0x14a>
 8009ed0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009ed4:	f04f 0100 	mov.w	r1, #0
 8009ed8:	f005 f8ba 	bl	800f050 <HAL_RCCEx_GetPeriphCLKFreq>
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8009ee6:	d051      	beq.n	8009f8c <ADC_ConfigureBoostMode+0x13c>
 8009ee8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8009eec:	d854      	bhi.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009eee:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8009ef2:	d047      	beq.n	8009f84 <ADC_ConfigureBoostMode+0x134>
 8009ef4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8009ef8:	d84e      	bhi.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009efa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8009efe:	d03d      	beq.n	8009f7c <ADC_ConfigureBoostMode+0x12c>
 8009f00:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8009f04:	d848      	bhi.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009f06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f0a:	d033      	beq.n	8009f74 <ADC_ConfigureBoostMode+0x124>
 8009f0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f10:	d842      	bhi.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009f12:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8009f16:	d029      	beq.n	8009f6c <ADC_ConfigureBoostMode+0x11c>
 8009f18:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8009f1c:	d83c      	bhi.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009f1e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009f22:	d01a      	beq.n	8009f5a <ADC_ConfigureBoostMode+0x10a>
 8009f24:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009f28:	d836      	bhi.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009f2a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009f2e:	d014      	beq.n	8009f5a <ADC_ConfigureBoostMode+0x10a>
 8009f30:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009f34:	d830      	bhi.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f3a:	d00e      	beq.n	8009f5a <ADC_ConfigureBoostMode+0x10a>
 8009f3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f40:	d82a      	bhi.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009f42:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009f46:	d008      	beq.n	8009f5a <ADC_ConfigureBoostMode+0x10a>
 8009f48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009f4c:	d824      	bhi.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009f4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f52:	d002      	beq.n	8009f5a <ADC_ConfigureBoostMode+0x10a>
 8009f54:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009f58:	d11e      	bne.n	8009f98 <ADC_ConfigureBoostMode+0x148>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	0c9b      	lsrs	r3, r3, #18
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f68:	60fb      	str	r3, [r7, #12]
 8009f6a:	e016      	b.n	8009f9a <ADC_ConfigureBoostMode+0x14a>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	091b      	lsrs	r3, r3, #4
 8009f70:	60fb      	str	r3, [r7, #12]
 8009f72:	e012      	b.n	8009f9a <ADC_ConfigureBoostMode+0x14a>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	095b      	lsrs	r3, r3, #5
 8009f78:	60fb      	str	r3, [r7, #12]
 8009f7a:	e00e      	b.n	8009f9a <ADC_ConfigureBoostMode+0x14a>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	099b      	lsrs	r3, r3, #6
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	e00a      	b.n	8009f9a <ADC_ConfigureBoostMode+0x14a>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	09db      	lsrs	r3, r3, #7
 8009f88:	60fb      	str	r3, [r7, #12]
 8009f8a:	e006      	b.n	8009f9a <ADC_ConfigureBoostMode+0x14a>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	0a1b      	lsrs	r3, r3, #8
 8009f90:	60fb      	str	r3, [r7, #12]
 8009f92:	e002      	b.n	8009f9a <ADC_ConfigureBoostMode+0x14a>
 8009f94:	bf00      	nop
 8009f96:	e000      	b.n	8009f9a <ADC_ConfigureBoostMode+0x14a>
 8009f98:	bf00      	nop
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	085b      	lsrs	r3, r3, #1
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	4a1f      	ldr	r2, [pc, #124]	@ (800a020 <ADC_ConfigureBoostMode+0x1d0>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d808      	bhi.n	8009fba <ADC_ConfigureBoostMode+0x16a>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	689a      	ldr	r2, [r3, #8]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009fb6:	609a      	str	r2, [r3, #8]
 8009fb8:	e025      	b.n	800a006 <ADC_ConfigureBoostMode+0x1b6>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	4a19      	ldr	r2, [pc, #100]	@ (800a024 <ADC_ConfigureBoostMode+0x1d4>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d80a      	bhi.n	8009fd8 <ADC_ConfigureBoostMode+0x188>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fd4:	609a      	str	r2, [r3, #8]
 8009fd6:	e016      	b.n	800a006 <ADC_ConfigureBoostMode+0x1b6>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4a13      	ldr	r2, [pc, #76]	@ (800a028 <ADC_ConfigureBoostMode+0x1d8>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d80a      	bhi.n	8009ff6 <ADC_ConfigureBoostMode+0x1a6>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ff2:	609a      	str	r2, [r3, #8]
 8009ff4:	e007      	b.n	800a006 <ADC_ConfigureBoostMode+0x1b6>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a004:	609a      	str	r2, [r3, #8]
 800a006:	bf00      	nop
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	40022000 	.word	0x40022000
 800a014:	40022100 	.word	0x40022100
 800a018:	40022300 	.word	0x40022300
 800a01c:	58026300 	.word	0x58026300
 800a020:	005f5e10 	.word	0x005f5e10
 800a024:	00bebc20 	.word	0x00bebc20
 800a028:	017d7840 	.word	0x017d7840

0800a02c <LL_ADC_IsEnabled>:
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d101      	bne.n	800a044 <LL_ADC_IsEnabled+0x18>
 800a040:	2301      	movs	r3, #1
 800a042:	e000      	b.n	800a046 <LL_ADC_IsEnabled+0x1a>
 800a044:	2300      	movs	r3, #0
 800a046:	4618      	mov	r0, r3
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <LL_ADC_REG_IsConversionOngoing>:
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f003 0304 	and.w	r3, r3, #4
 800a062:	2b04      	cmp	r3, #4
 800a064:	d101      	bne.n	800a06a <LL_ADC_REG_IsConversionOngoing+0x18>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a06a:	2300      	movs	r3, #0
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <HAL_ADCEx_MultiModeConfigChannel>:
 800a078:	b590      	push	{r4, r7, lr}
 800a07a:	b0a3      	sub	sp, #140	@ 0x8c
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
 800a082:	2300      	movs	r3, #0
 800a084:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d101      	bne.n	800a096 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a092:	2302      	movs	r3, #2
 800a094:	e0c1      	b.n	800a21a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a09e:	2300      	movs	r3, #0
 800a0a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a5e      	ldr	r2, [pc, #376]	@ (800a224 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d102      	bne.n	800a0b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800a0b0:	4b5d      	ldr	r3, [pc, #372]	@ (800a228 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e001      	b.n	800a0ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10b      	bne.n	800a0d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0c4:	f043 0220 	orr.w	r2, r3, #32
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	661a      	str	r2, [r3, #96]	@ 0x60
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e0a0      	b.n	800a21a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7ff ffb9 	bl	800a052 <LL_ADC_REG_IsConversionOngoing>
 800a0e0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7ff ffb2 	bl	800a052 <LL_ADC_REG_IsConversionOngoing>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f040 8081 	bne.w	800a1f8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
 800a0f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d17c      	bne.n	800a1f8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a48      	ldr	r2, [pc, #288]	@ (800a224 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d004      	beq.n	800a112 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a46      	ldr	r2, [pc, #280]	@ (800a228 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d101      	bne.n	800a116 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800a112:	4b46      	ldr	r3, [pc, #280]	@ (800a22c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800a114:	e000      	b.n	800a118 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a116:	4b46      	ldr	r3, [pc, #280]	@ (800a230 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800a118:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d039      	beq.n	800a196 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 800a122:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	431a      	orrs	r2, r3
 800a130:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a132:	609a      	str	r2, [r3, #8]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a3a      	ldr	r2, [pc, #232]	@ (800a224 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d004      	beq.n	800a148 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a39      	ldr	r2, [pc, #228]	@ (800a228 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d10e      	bne.n	800a166 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800a148:	4836      	ldr	r0, [pc, #216]	@ (800a224 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a14a:	f7ff ff6f 	bl	800a02c <LL_ADC_IsEnabled>
 800a14e:	4604      	mov	r4, r0
 800a150:	4835      	ldr	r0, [pc, #212]	@ (800a228 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a152:	f7ff ff6b 	bl	800a02c <LL_ADC_IsEnabled>
 800a156:	4603      	mov	r3, r0
 800a158:	4323      	orrs	r3, r4
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bf0c      	ite	eq
 800a15e:	2301      	moveq	r3, #1
 800a160:	2300      	movne	r3, #0
 800a162:	b2db      	uxtb	r3, r3
 800a164:	e008      	b.n	800a178 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a166:	4833      	ldr	r0, [pc, #204]	@ (800a234 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800a168:	f7ff ff60 	bl	800a02c <LL_ADC_IsEnabled>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bf0c      	ite	eq
 800a172:	2301      	moveq	r3, #1
 800a174:	2300      	movne	r3, #0
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d047      	beq.n	800a20c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800a17c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	4b2d      	ldr	r3, [pc, #180]	@ (800a238 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800a182:	4013      	ands	r3, r2
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	6811      	ldr	r1, [r2, #0]
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	6892      	ldr	r2, [r2, #8]
 800a18c:	430a      	orrs	r2, r1
 800a18e:	431a      	orrs	r2, r3
 800a190:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a192:	609a      	str	r2, [r3, #8]
 800a194:	e03a      	b.n	800a20c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800a196:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a19e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1a0:	609a      	str	r2, [r3, #8]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a1f      	ldr	r2, [pc, #124]	@ (800a224 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d004      	beq.n	800a1b6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a228 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d10e      	bne.n	800a1d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800a1b6:	481b      	ldr	r0, [pc, #108]	@ (800a224 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a1b8:	f7ff ff38 	bl	800a02c <LL_ADC_IsEnabled>
 800a1bc:	4604      	mov	r4, r0
 800a1be:	481a      	ldr	r0, [pc, #104]	@ (800a228 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a1c0:	f7ff ff34 	bl	800a02c <LL_ADC_IsEnabled>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	4323      	orrs	r3, r4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bf0c      	ite	eq
 800a1cc:	2301      	moveq	r3, #1
 800a1ce:	2300      	movne	r3, #0
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	e008      	b.n	800a1e6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800a1d4:	4817      	ldr	r0, [pc, #92]	@ (800a234 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800a1d6:	f7ff ff29 	bl	800a02c <LL_ADC_IsEnabled>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bf0c      	ite	eq
 800a1e0:	2301      	moveq	r3, #1
 800a1e2:	2300      	movne	r3, #0
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d010      	beq.n	800a20c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800a1ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	4b12      	ldr	r3, [pc, #72]	@ (800a238 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a1f4:	6093      	str	r3, [r2, #8]
 800a1f6:	e009      	b.n	800a20c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1fc:	f043 0220 	orr.w	r2, r3, #32
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	661a      	str	r2, [r3, #96]	@ 0x60
 800a204:	2301      	movs	r3, #1
 800a206:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800a20a:	e000      	b.n	800a20e <HAL_ADCEx_MultiModeConfigChannel+0x196>
 800a20c:	bf00      	nop
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a216:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a21a:	4618      	mov	r0, r3
 800a21c:	378c      	adds	r7, #140	@ 0x8c
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd90      	pop	{r4, r7, pc}
 800a222:	bf00      	nop
 800a224:	40022000 	.word	0x40022000
 800a228:	40022100 	.word	0x40022100
 800a22c:	40022300 	.word	0x40022300
 800a230:	58026300 	.word	0x58026300
 800a234:	58026000 	.word	0x58026000
 800a238:	fffff0e0 	.word	0xfffff0e0

0800a23c <__NVIC_SetPriorityGrouping>:
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	4b0b      	ldr	r3, [pc, #44]	@ (800a27c <__NVIC_SetPriorityGrouping+0x40>)
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	60bb      	str	r3, [r7, #8]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a258:	4013      	ands	r3, r2
 800a25a:	60bb      	str	r3, [r7, #8]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	021a      	lsls	r2, r3, #8
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	431a      	orrs	r2, r3
 800a264:	4b06      	ldr	r3, [pc, #24]	@ (800a280 <__NVIC_SetPriorityGrouping+0x44>)
 800a266:	4313      	orrs	r3, r2
 800a268:	60bb      	str	r3, [r7, #8]
 800a26a:	4a04      	ldr	r2, [pc, #16]	@ (800a27c <__NVIC_SetPriorityGrouping+0x40>)
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	60d3      	str	r3, [r2, #12]
 800a270:	bf00      	nop
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	e000ed00 	.word	0xe000ed00
 800a280:	05fa0000 	.word	0x05fa0000

0800a284 <__NVIC_GetPriorityGrouping>:
 800a284:	b480      	push	{r7}
 800a286:	af00      	add	r7, sp, #0
 800a288:	4b04      	ldr	r3, [pc, #16]	@ (800a29c <__NVIC_GetPriorityGrouping+0x18>)
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	0a1b      	lsrs	r3, r3, #8
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	4618      	mov	r0, r3
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	e000ed00 	.word	0xe000ed00

0800a2a0 <__NVIC_EnableIRQ>:
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	80fb      	strh	r3, [r7, #6]
 800a2aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	db0b      	blt.n	800a2ca <__NVIC_EnableIRQ+0x2a>
 800a2b2:	88fb      	ldrh	r3, [r7, #6]
 800a2b4:	f003 021f 	and.w	r2, r3, #31
 800a2b8:	4907      	ldr	r1, [pc, #28]	@ (800a2d8 <__NVIC_EnableIRQ+0x38>)
 800a2ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2be:	095b      	lsrs	r3, r3, #5
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	fa00 f202 	lsl.w	r2, r0, r2
 800a2c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a2ca:	bf00      	nop
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	e000e100 	.word	0xe000e100

0800a2dc <__NVIC_SetPriority>:
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	6039      	str	r1, [r7, #0]
 800a2e6:	80fb      	strh	r3, [r7, #6]
 800a2e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	db0a      	blt.n	800a306 <__NVIC_SetPriority+0x2a>
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	490c      	ldr	r1, [pc, #48]	@ (800a328 <__NVIC_SetPriority+0x4c>)
 800a2f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2fa:	0112      	lsls	r2, r2, #4
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	440b      	add	r3, r1
 800a300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800a304:	e00a      	b.n	800a31c <__NVIC_SetPriority+0x40>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	4908      	ldr	r1, [pc, #32]	@ (800a32c <__NVIC_SetPriority+0x50>)
 800a30c:	88fb      	ldrh	r3, [r7, #6]
 800a30e:	f003 030f 	and.w	r3, r3, #15
 800a312:	3b04      	subs	r3, #4
 800a314:	0112      	lsls	r2, r2, #4
 800a316:	b2d2      	uxtb	r2, r2
 800a318:	440b      	add	r3, r1
 800a31a:	761a      	strb	r2, [r3, #24]
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	e000e100 	.word	0xe000e100
 800a32c:	e000ed00 	.word	0xe000ed00

0800a330 <NVIC_EncodePriority>:
 800a330:	b480      	push	{r7}
 800a332:	b089      	sub	sp, #36	@ 0x24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f003 0307 	and.w	r3, r3, #7
 800a342:	61fb      	str	r3, [r7, #28]
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	f1c3 0307 	rsb	r3, r3, #7
 800a34a:	2b04      	cmp	r3, #4
 800a34c:	bf28      	it	cs
 800a34e:	2304      	movcs	r3, #4
 800a350:	61bb      	str	r3, [r7, #24]
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	3304      	adds	r3, #4
 800a356:	2b06      	cmp	r3, #6
 800a358:	d902      	bls.n	800a360 <NVIC_EncodePriority+0x30>
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	3b03      	subs	r3, #3
 800a35e:	e000      	b.n	800a362 <NVIC_EncodePriority+0x32>
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]
 800a364:	f04f 32ff 	mov.w	r2, #4294967295
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	fa02 f303 	lsl.w	r3, r2, r3
 800a36e:	43da      	mvns	r2, r3
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	401a      	ands	r2, r3
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	409a      	lsls	r2, r3
 800a378:	f04f 31ff 	mov.w	r1, #4294967295
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	fa01 f303 	lsl.w	r3, r1, r3
 800a382:	43d9      	mvns	r1, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	400b      	ands	r3, r1
 800a388:	4313      	orrs	r3, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	3724      	adds	r7, #36	@ 0x24
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
	...

0800a398 <SysTick_Config>:
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3a8:	d301      	bcc.n	800a3ae <SysTick_Config+0x16>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e00f      	b.n	800a3ce <SysTick_Config+0x36>
 800a3ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a3d8 <SysTick_Config+0x40>)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	6053      	str	r3, [r2, #4]
 800a3b6:	210f      	movs	r1, #15
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3bc:	f7ff ff8e 	bl	800a2dc <__NVIC_SetPriority>
 800a3c0:	4b05      	ldr	r3, [pc, #20]	@ (800a3d8 <SysTick_Config+0x40>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	609a      	str	r2, [r3, #8]
 800a3c6:	4b04      	ldr	r3, [pc, #16]	@ (800a3d8 <SysTick_Config+0x40>)
 800a3c8:	2207      	movs	r2, #7
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	e000e010 	.word	0xe000e010

0800a3dc <HAL_NVIC_SetPriorityGrouping>:
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff ff29 	bl	800a23c <__NVIC_SetPriorityGrouping>
 800a3ea:	bf00      	nop
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <HAL_NVIC_SetPriority>:
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b086      	sub	sp, #24
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	607a      	str	r2, [r7, #4]
 800a3fe:	81fb      	strh	r3, [r7, #14]
 800a400:	f7ff ff40 	bl	800a284 <__NVIC_GetPriorityGrouping>
 800a404:	6178      	str	r0, [r7, #20]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	68b9      	ldr	r1, [r7, #8]
 800a40a:	6978      	ldr	r0, [r7, #20]
 800a40c:	f7ff ff90 	bl	800a330 <NVIC_EncodePriority>
 800a410:	4602      	mov	r2, r0
 800a412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a416:	4611      	mov	r1, r2
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff ff5f 	bl	800a2dc <__NVIC_SetPriority>
 800a41e:	bf00      	nop
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <HAL_NVIC_EnableIRQ>:
 800a426:	b580      	push	{r7, lr}
 800a428:	b082      	sub	sp, #8
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	4603      	mov	r3, r0
 800a42e:	80fb      	strh	r3, [r7, #6]
 800a430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff ff33 	bl	800a2a0 <__NVIC_EnableIRQ>
 800a43a:	bf00      	nop
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <HAL_SYSTICK_Config>:
 800a442:	b580      	push	{r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff ffa4 	bl	800a398 <SysTick_Config>
 800a450:	4603      	mov	r3, r0
 800a452:	4618      	mov	r0, r3
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
	...

0800a45c <HAL_MPU_Disable>:
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
 800a460:	f3bf 8f5f 	dmb	sy
 800a464:	bf00      	nop
 800a466:	4b07      	ldr	r3, [pc, #28]	@ (800a484 <HAL_MPU_Disable+0x28>)
 800a468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46a:	4a06      	ldr	r2, [pc, #24]	@ (800a484 <HAL_MPU_Disable+0x28>)
 800a46c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a470:	6253      	str	r3, [r2, #36]	@ 0x24
 800a472:	4b05      	ldr	r3, [pc, #20]	@ (800a488 <HAL_MPU_Disable+0x2c>)
 800a474:	2200      	movs	r2, #0
 800a476:	605a      	str	r2, [r3, #4]
 800a478:	bf00      	nop
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	e000ed00 	.word	0xe000ed00
 800a488:	e000ed90 	.word	0xe000ed90

0800a48c <HAL_MPU_Enable>:
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	4a0b      	ldr	r2, [pc, #44]	@ (800a4c4 <HAL_MPU_Enable+0x38>)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f043 0301 	orr.w	r3, r3, #1
 800a49c:	6053      	str	r3, [r2, #4]
 800a49e:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c8 <HAL_MPU_Enable+0x3c>)
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a2:	4a09      	ldr	r2, [pc, #36]	@ (800a4c8 <HAL_MPU_Enable+0x3c>)
 800a4a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4a8:	6253      	str	r3, [r2, #36]	@ 0x24
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	bf00      	nop
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	e000ed90 	.word	0xe000ed90
 800a4c8:	e000ed00 	.word	0xe000ed00

0800a4cc <HAL_MPU_ConfigRegion>:
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	785a      	ldrb	r2, [r3, #1]
 800a4d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a548 <HAL_MPU_ConfigRegion+0x7c>)
 800a4da:	609a      	str	r2, [r3, #8]
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a548 <HAL_MPU_ConfigRegion+0x7c>)
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	4a19      	ldr	r2, [pc, #100]	@ (800a548 <HAL_MPU_ConfigRegion+0x7c>)
 800a4e2:	f023 0301 	bic.w	r3, r3, #1
 800a4e6:	6113      	str	r3, [r2, #16]
 800a4e8:	4a17      	ldr	r2, [pc, #92]	@ (800a548 <HAL_MPU_ConfigRegion+0x7c>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	60d3      	str	r3, [r2, #12]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	7b1b      	ldrb	r3, [r3, #12]
 800a4f4:	071a      	lsls	r2, r3, #28
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	7adb      	ldrb	r3, [r3, #11]
 800a4fa:	061b      	lsls	r3, r3, #24
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	7a9b      	ldrb	r3, [r3, #10]
 800a502:	04db      	lsls	r3, r3, #19
 800a504:	431a      	orrs	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	7b5b      	ldrb	r3, [r3, #13]
 800a50a:	049b      	lsls	r3, r3, #18
 800a50c:	431a      	orrs	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	7b9b      	ldrb	r3, [r3, #14]
 800a512:	045b      	lsls	r3, r3, #17
 800a514:	431a      	orrs	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	7bdb      	ldrb	r3, [r3, #15]
 800a51a:	041b      	lsls	r3, r3, #16
 800a51c:	431a      	orrs	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	7a5b      	ldrb	r3, [r3, #9]
 800a522:	021b      	lsls	r3, r3, #8
 800a524:	431a      	orrs	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	7a1b      	ldrb	r3, [r3, #8]
 800a52a:	005b      	lsls	r3, r3, #1
 800a52c:	4313      	orrs	r3, r2
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	7812      	ldrb	r2, [r2, #0]
 800a532:	4611      	mov	r1, r2
 800a534:	4a04      	ldr	r2, [pc, #16]	@ (800a548 <HAL_MPU_ConfigRegion+0x7c>)
 800a536:	430b      	orrs	r3, r1
 800a538:	6113      	str	r3, [r2, #16]
 800a53a:	bf00      	nop
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	e000ed90 	.word	0xe000ed90

0800a54c <HAL_DMA_Abort>:
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	f7fe face 	bl	8008af4 <HAL_GetTick>
 800a558:	6138      	str	r0, [r7, #16]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <HAL_DMA_Abort+0x18>
 800a560:	2301      	movs	r3, #1
 800a562:	e2dc      	b.n	800ab1e <HAL_DMA_Abort+0x5d2>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d008      	beq.n	800a582 <HAL_DMA_Abort+0x36>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2280      	movs	r2, #128	@ 0x80
 800a574:	655a      	str	r2, [r3, #84]	@ 0x54
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800a57e:	2301      	movs	r3, #1
 800a580:	e2cd      	b.n	800ab1e <HAL_DMA_Abort+0x5d2>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a76      	ldr	r2, [pc, #472]	@ (800a760 <HAL_DMA_Abort+0x214>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d04a      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a74      	ldr	r2, [pc, #464]	@ (800a764 <HAL_DMA_Abort+0x218>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d045      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a73      	ldr	r2, [pc, #460]	@ (800a768 <HAL_DMA_Abort+0x21c>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d040      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a71      	ldr	r2, [pc, #452]	@ (800a76c <HAL_DMA_Abort+0x220>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d03b      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a70      	ldr	r2, [pc, #448]	@ (800a770 <HAL_DMA_Abort+0x224>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d036      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a6e      	ldr	r2, [pc, #440]	@ (800a774 <HAL_DMA_Abort+0x228>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d031      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a6d      	ldr	r2, [pc, #436]	@ (800a778 <HAL_DMA_Abort+0x22c>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d02c      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a6b      	ldr	r2, [pc, #428]	@ (800a77c <HAL_DMA_Abort+0x230>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d027      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a6a      	ldr	r2, [pc, #424]	@ (800a780 <HAL_DMA_Abort+0x234>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d022      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a68      	ldr	r2, [pc, #416]	@ (800a784 <HAL_DMA_Abort+0x238>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d01d      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a67      	ldr	r2, [pc, #412]	@ (800a788 <HAL_DMA_Abort+0x23c>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d018      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a65      	ldr	r2, [pc, #404]	@ (800a78c <HAL_DMA_Abort+0x240>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d013      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a64      	ldr	r2, [pc, #400]	@ (800a790 <HAL_DMA_Abort+0x244>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d00e      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a62      	ldr	r2, [pc, #392]	@ (800a794 <HAL_DMA_Abort+0x248>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d009      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a61      	ldr	r2, [pc, #388]	@ (800a798 <HAL_DMA_Abort+0x24c>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d004      	beq.n	800a622 <HAL_DMA_Abort+0xd6>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a5f      	ldr	r2, [pc, #380]	@ (800a79c <HAL_DMA_Abort+0x250>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d101      	bne.n	800a626 <HAL_DMA_Abort+0xda>
 800a622:	2301      	movs	r3, #1
 800a624:	e000      	b.n	800a628 <HAL_DMA_Abort+0xdc>
 800a626:	2300      	movs	r3, #0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d013      	beq.n	800a654 <HAL_DMA_Abort+0x108>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 021e 	bic.w	r2, r2, #30
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695a      	ldr	r2, [r3, #20]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a64a:	615a      	str	r2, [r3, #20]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	617b      	str	r3, [r7, #20]
 800a652:	e00a      	b.n	800a66a <HAL_DMA_Abort+0x11e>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f022 020e 	bic.w	r2, r2, #14
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a3c      	ldr	r2, [pc, #240]	@ (800a760 <HAL_DMA_Abort+0x214>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d072      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a3a      	ldr	r2, [pc, #232]	@ (800a764 <HAL_DMA_Abort+0x218>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d06d      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a39      	ldr	r2, [pc, #228]	@ (800a768 <HAL_DMA_Abort+0x21c>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d068      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a37      	ldr	r2, [pc, #220]	@ (800a76c <HAL_DMA_Abort+0x220>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d063      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a36      	ldr	r2, [pc, #216]	@ (800a770 <HAL_DMA_Abort+0x224>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d05e      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a34      	ldr	r2, [pc, #208]	@ (800a774 <HAL_DMA_Abort+0x228>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d059      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a33      	ldr	r2, [pc, #204]	@ (800a778 <HAL_DMA_Abort+0x22c>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d054      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a31      	ldr	r2, [pc, #196]	@ (800a77c <HAL_DMA_Abort+0x230>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d04f      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a30      	ldr	r2, [pc, #192]	@ (800a780 <HAL_DMA_Abort+0x234>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d04a      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a2e      	ldr	r2, [pc, #184]	@ (800a784 <HAL_DMA_Abort+0x238>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d045      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a2d      	ldr	r2, [pc, #180]	@ (800a788 <HAL_DMA_Abort+0x23c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d040      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a2b      	ldr	r2, [pc, #172]	@ (800a78c <HAL_DMA_Abort+0x240>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d03b      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a2a      	ldr	r2, [pc, #168]	@ (800a790 <HAL_DMA_Abort+0x244>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d036      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a28      	ldr	r2, [pc, #160]	@ (800a794 <HAL_DMA_Abort+0x248>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d031      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a27      	ldr	r2, [pc, #156]	@ (800a798 <HAL_DMA_Abort+0x24c>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d02c      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a25      	ldr	r2, [pc, #148]	@ (800a79c <HAL_DMA_Abort+0x250>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d027      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a24      	ldr	r2, [pc, #144]	@ (800a7a0 <HAL_DMA_Abort+0x254>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d022      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a22      	ldr	r2, [pc, #136]	@ (800a7a4 <HAL_DMA_Abort+0x258>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d01d      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a21      	ldr	r2, [pc, #132]	@ (800a7a8 <HAL_DMA_Abort+0x25c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d018      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a1f      	ldr	r2, [pc, #124]	@ (800a7ac <HAL_DMA_Abort+0x260>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d013      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a1e      	ldr	r2, [pc, #120]	@ (800a7b0 <HAL_DMA_Abort+0x264>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d00e      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a1c      	ldr	r2, [pc, #112]	@ (800a7b4 <HAL_DMA_Abort+0x268>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d009      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a1b      	ldr	r2, [pc, #108]	@ (800a7b8 <HAL_DMA_Abort+0x26c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d004      	beq.n	800a75a <HAL_DMA_Abort+0x20e>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a19      	ldr	r2, [pc, #100]	@ (800a7bc <HAL_DMA_Abort+0x270>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d132      	bne.n	800a7c0 <HAL_DMA_Abort+0x274>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e031      	b.n	800a7c2 <HAL_DMA_Abort+0x276>
 800a75e:	bf00      	nop
 800a760:	40020010 	.word	0x40020010
 800a764:	40020028 	.word	0x40020028
 800a768:	40020040 	.word	0x40020040
 800a76c:	40020058 	.word	0x40020058
 800a770:	40020070 	.word	0x40020070
 800a774:	40020088 	.word	0x40020088
 800a778:	400200a0 	.word	0x400200a0
 800a77c:	400200b8 	.word	0x400200b8
 800a780:	40020410 	.word	0x40020410
 800a784:	40020428 	.word	0x40020428
 800a788:	40020440 	.word	0x40020440
 800a78c:	40020458 	.word	0x40020458
 800a790:	40020470 	.word	0x40020470
 800a794:	40020488 	.word	0x40020488
 800a798:	400204a0 	.word	0x400204a0
 800a79c:	400204b8 	.word	0x400204b8
 800a7a0:	58025408 	.word	0x58025408
 800a7a4:	5802541c 	.word	0x5802541c
 800a7a8:	58025430 	.word	0x58025430
 800a7ac:	58025444 	.word	0x58025444
 800a7b0:	58025458 	.word	0x58025458
 800a7b4:	5802546c 	.word	0x5802546c
 800a7b8:	58025480 	.word	0x58025480
 800a7bc:	58025494 	.word	0x58025494
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d007      	beq.n	800a7d6 <HAL_DMA_Abort+0x28a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a6d      	ldr	r2, [pc, #436]	@ (800a990 <HAL_DMA_Abort+0x444>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d04a      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a6b      	ldr	r2, [pc, #428]	@ (800a994 <HAL_DMA_Abort+0x448>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d045      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a6a      	ldr	r2, [pc, #424]	@ (800a998 <HAL_DMA_Abort+0x44c>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d040      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a68      	ldr	r2, [pc, #416]	@ (800a99c <HAL_DMA_Abort+0x450>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d03b      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a67      	ldr	r2, [pc, #412]	@ (800a9a0 <HAL_DMA_Abort+0x454>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d036      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a65      	ldr	r2, [pc, #404]	@ (800a9a4 <HAL_DMA_Abort+0x458>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d031      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a64      	ldr	r2, [pc, #400]	@ (800a9a8 <HAL_DMA_Abort+0x45c>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d02c      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a62      	ldr	r2, [pc, #392]	@ (800a9ac <HAL_DMA_Abort+0x460>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d027      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a61      	ldr	r2, [pc, #388]	@ (800a9b0 <HAL_DMA_Abort+0x464>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d022      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a5f      	ldr	r2, [pc, #380]	@ (800a9b4 <HAL_DMA_Abort+0x468>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d01d      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a5e      	ldr	r2, [pc, #376]	@ (800a9b8 <HAL_DMA_Abort+0x46c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d018      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a5c      	ldr	r2, [pc, #368]	@ (800a9bc <HAL_DMA_Abort+0x470>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d013      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a5b      	ldr	r2, [pc, #364]	@ (800a9c0 <HAL_DMA_Abort+0x474>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d00e      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a59      	ldr	r2, [pc, #356]	@ (800a9c4 <HAL_DMA_Abort+0x478>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d009      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a58      	ldr	r2, [pc, #352]	@ (800a9c8 <HAL_DMA_Abort+0x47c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d004      	beq.n	800a876 <HAL_DMA_Abort+0x32a>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a56      	ldr	r2, [pc, #344]	@ (800a9cc <HAL_DMA_Abort+0x480>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d108      	bne.n	800a888 <HAL_DMA_Abort+0x33c>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f022 0201 	bic.w	r2, r2, #1
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	e007      	b.n	800a898 <HAL_DMA_Abort+0x34c>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 0201 	bic.w	r2, r2, #1
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	e013      	b.n	800a8c2 <HAL_DMA_Abort+0x376>
 800a89a:	f7fe f92b 	bl	8008af4 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	2b05      	cmp	r3, #5
 800a8a6:	d90c      	bls.n	800a8c2 <HAL_DMA_Abort+0x376>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	655a      	str	r2, [r3, #84]	@ 0x54
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2203      	movs	r2, #3
 800a8b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e12d      	b.n	800ab1e <HAL_DMA_Abort+0x5d2>
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1e5      	bne.n	800a89a <HAL_DMA_Abort+0x34e>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a2f      	ldr	r2, [pc, #188]	@ (800a990 <HAL_DMA_Abort+0x444>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d04a      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a2d      	ldr	r2, [pc, #180]	@ (800a994 <HAL_DMA_Abort+0x448>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d045      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a2c      	ldr	r2, [pc, #176]	@ (800a998 <HAL_DMA_Abort+0x44c>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d040      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a2a      	ldr	r2, [pc, #168]	@ (800a99c <HAL_DMA_Abort+0x450>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d03b      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a29      	ldr	r2, [pc, #164]	@ (800a9a0 <HAL_DMA_Abort+0x454>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d036      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a27      	ldr	r2, [pc, #156]	@ (800a9a4 <HAL_DMA_Abort+0x458>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d031      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a26      	ldr	r2, [pc, #152]	@ (800a9a8 <HAL_DMA_Abort+0x45c>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d02c      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a24      	ldr	r2, [pc, #144]	@ (800a9ac <HAL_DMA_Abort+0x460>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d027      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a23      	ldr	r2, [pc, #140]	@ (800a9b0 <HAL_DMA_Abort+0x464>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d022      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a21      	ldr	r2, [pc, #132]	@ (800a9b4 <HAL_DMA_Abort+0x468>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d01d      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a20      	ldr	r2, [pc, #128]	@ (800a9b8 <HAL_DMA_Abort+0x46c>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d018      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a1e      	ldr	r2, [pc, #120]	@ (800a9bc <HAL_DMA_Abort+0x470>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d013      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a1d      	ldr	r2, [pc, #116]	@ (800a9c0 <HAL_DMA_Abort+0x474>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d00e      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a1b      	ldr	r2, [pc, #108]	@ (800a9c4 <HAL_DMA_Abort+0x478>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d009      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a1a      	ldr	r2, [pc, #104]	@ (800a9c8 <HAL_DMA_Abort+0x47c>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d004      	beq.n	800a96e <HAL_DMA_Abort+0x422>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a18      	ldr	r2, [pc, #96]	@ (800a9cc <HAL_DMA_Abort+0x480>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d101      	bne.n	800a972 <HAL_DMA_Abort+0x426>
 800a96e:	2301      	movs	r3, #1
 800a970:	e000      	b.n	800a974 <HAL_DMA_Abort+0x428>
 800a972:	2300      	movs	r3, #0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d02b      	beq.n	800a9d0 <HAL_DMA_Abort+0x484>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a97c:	60bb      	str	r3, [r7, #8]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a982:	f003 031f 	and.w	r3, r3, #31
 800a986:	223f      	movs	r2, #63	@ 0x3f
 800a988:	409a      	lsls	r2, r3
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	609a      	str	r2, [r3, #8]
 800a98e:	e02a      	b.n	800a9e6 <HAL_DMA_Abort+0x49a>
 800a990:	40020010 	.word	0x40020010
 800a994:	40020028 	.word	0x40020028
 800a998:	40020040 	.word	0x40020040
 800a99c:	40020058 	.word	0x40020058
 800a9a0:	40020070 	.word	0x40020070
 800a9a4:	40020088 	.word	0x40020088
 800a9a8:	400200a0 	.word	0x400200a0
 800a9ac:	400200b8 	.word	0x400200b8
 800a9b0:	40020410 	.word	0x40020410
 800a9b4:	40020428 	.word	0x40020428
 800a9b8:	40020440 	.word	0x40020440
 800a9bc:	40020458 	.word	0x40020458
 800a9c0:	40020470 	.word	0x40020470
 800a9c4:	40020488 	.word	0x40020488
 800a9c8:	400204a0 	.word	0x400204a0
 800a9cc:	400204b8 	.word	0x400204b8
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9d4:	60fb      	str	r3, [r7, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9da:	f003 031f 	and.w	r3, r3, #31
 800a9de:	2201      	movs	r2, #1
 800a9e0:	409a      	lsls	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	605a      	str	r2, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a4f      	ldr	r2, [pc, #316]	@ (800ab28 <HAL_DMA_Abort+0x5dc>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d072      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a4d      	ldr	r2, [pc, #308]	@ (800ab2c <HAL_DMA_Abort+0x5e0>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d06d      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a4c      	ldr	r2, [pc, #304]	@ (800ab30 <HAL_DMA_Abort+0x5e4>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d068      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a4a      	ldr	r2, [pc, #296]	@ (800ab34 <HAL_DMA_Abort+0x5e8>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d063      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a49      	ldr	r2, [pc, #292]	@ (800ab38 <HAL_DMA_Abort+0x5ec>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d05e      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a47      	ldr	r2, [pc, #284]	@ (800ab3c <HAL_DMA_Abort+0x5f0>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d059      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a46      	ldr	r2, [pc, #280]	@ (800ab40 <HAL_DMA_Abort+0x5f4>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d054      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a44      	ldr	r2, [pc, #272]	@ (800ab44 <HAL_DMA_Abort+0x5f8>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d04f      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a43      	ldr	r2, [pc, #268]	@ (800ab48 <HAL_DMA_Abort+0x5fc>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d04a      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a41      	ldr	r2, [pc, #260]	@ (800ab4c <HAL_DMA_Abort+0x600>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d045      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a40      	ldr	r2, [pc, #256]	@ (800ab50 <HAL_DMA_Abort+0x604>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d040      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a3e      	ldr	r2, [pc, #248]	@ (800ab54 <HAL_DMA_Abort+0x608>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d03b      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a3d      	ldr	r2, [pc, #244]	@ (800ab58 <HAL_DMA_Abort+0x60c>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d036      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a3b      	ldr	r2, [pc, #236]	@ (800ab5c <HAL_DMA_Abort+0x610>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d031      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a3a      	ldr	r2, [pc, #232]	@ (800ab60 <HAL_DMA_Abort+0x614>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d02c      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a38      	ldr	r2, [pc, #224]	@ (800ab64 <HAL_DMA_Abort+0x618>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d027      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a37      	ldr	r2, [pc, #220]	@ (800ab68 <HAL_DMA_Abort+0x61c>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d022      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a35      	ldr	r2, [pc, #212]	@ (800ab6c <HAL_DMA_Abort+0x620>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d01d      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a34      	ldr	r2, [pc, #208]	@ (800ab70 <HAL_DMA_Abort+0x624>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d018      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a32      	ldr	r2, [pc, #200]	@ (800ab74 <HAL_DMA_Abort+0x628>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d013      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a31      	ldr	r2, [pc, #196]	@ (800ab78 <HAL_DMA_Abort+0x62c>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d00e      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a2f      	ldr	r2, [pc, #188]	@ (800ab7c <HAL_DMA_Abort+0x630>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d009      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a2e      	ldr	r2, [pc, #184]	@ (800ab80 <HAL_DMA_Abort+0x634>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d004      	beq.n	800aad6 <HAL_DMA_Abort+0x58a>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a2c      	ldr	r2, [pc, #176]	@ (800ab84 <HAL_DMA_Abort+0x638>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d101      	bne.n	800aada <HAL_DMA_Abort+0x58e>
 800aad6:	2301      	movs	r3, #1
 800aad8:	e000      	b.n	800aadc <HAL_DMA_Abort+0x590>
 800aada:	2300      	movs	r3, #0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d015      	beq.n	800ab0c <HAL_DMA_Abort+0x5c0>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00c      	beq.n	800ab0c <HAL_DMA_Abort+0x5c0>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aafc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ab0a:	605a      	str	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3718      	adds	r7, #24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	40020010 	.word	0x40020010
 800ab2c:	40020028 	.word	0x40020028
 800ab30:	40020040 	.word	0x40020040
 800ab34:	40020058 	.word	0x40020058
 800ab38:	40020070 	.word	0x40020070
 800ab3c:	40020088 	.word	0x40020088
 800ab40:	400200a0 	.word	0x400200a0
 800ab44:	400200b8 	.word	0x400200b8
 800ab48:	40020410 	.word	0x40020410
 800ab4c:	40020428 	.word	0x40020428
 800ab50:	40020440 	.word	0x40020440
 800ab54:	40020458 	.word	0x40020458
 800ab58:	40020470 	.word	0x40020470
 800ab5c:	40020488 	.word	0x40020488
 800ab60:	400204a0 	.word	0x400204a0
 800ab64:	400204b8 	.word	0x400204b8
 800ab68:	58025408 	.word	0x58025408
 800ab6c:	5802541c 	.word	0x5802541c
 800ab70:	58025430 	.word	0x58025430
 800ab74:	58025444 	.word	0x58025444
 800ab78:	58025458 	.word	0x58025458
 800ab7c:	5802546c 	.word	0x5802546c
 800ab80:	58025480 	.word	0x58025480
 800ab84:	58025494 	.word	0x58025494

0800ab88 <HAL_DMA_Abort_IT>:
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <HAL_DMA_Abort_IT+0x12>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e237      	b.n	800b00a <HAL_DMA_Abort_IT+0x482>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d004      	beq.n	800abb0 <HAL_DMA_Abort_IT+0x28>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2280      	movs	r2, #128	@ 0x80
 800abaa:	655a      	str	r2, [r3, #84]	@ 0x54
 800abac:	2301      	movs	r3, #1
 800abae:	e22c      	b.n	800b00a <HAL_DMA_Abort_IT+0x482>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a5c      	ldr	r2, [pc, #368]	@ (800ad28 <HAL_DMA_Abort_IT+0x1a0>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d04a      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a5b      	ldr	r2, [pc, #364]	@ (800ad2c <HAL_DMA_Abort_IT+0x1a4>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d045      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a59      	ldr	r2, [pc, #356]	@ (800ad30 <HAL_DMA_Abort_IT+0x1a8>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d040      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a58      	ldr	r2, [pc, #352]	@ (800ad34 <HAL_DMA_Abort_IT+0x1ac>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d03b      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a56      	ldr	r2, [pc, #344]	@ (800ad38 <HAL_DMA_Abort_IT+0x1b0>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d036      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a55      	ldr	r2, [pc, #340]	@ (800ad3c <HAL_DMA_Abort_IT+0x1b4>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d031      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a53      	ldr	r2, [pc, #332]	@ (800ad40 <HAL_DMA_Abort_IT+0x1b8>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d02c      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a52      	ldr	r2, [pc, #328]	@ (800ad44 <HAL_DMA_Abort_IT+0x1bc>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d027      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a50      	ldr	r2, [pc, #320]	@ (800ad48 <HAL_DMA_Abort_IT+0x1c0>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d022      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a4f      	ldr	r2, [pc, #316]	@ (800ad4c <HAL_DMA_Abort_IT+0x1c4>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d01d      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a4d      	ldr	r2, [pc, #308]	@ (800ad50 <HAL_DMA_Abort_IT+0x1c8>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d018      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a4c      	ldr	r2, [pc, #304]	@ (800ad54 <HAL_DMA_Abort_IT+0x1cc>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d013      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a4a      	ldr	r2, [pc, #296]	@ (800ad58 <HAL_DMA_Abort_IT+0x1d0>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d00e      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a49      	ldr	r2, [pc, #292]	@ (800ad5c <HAL_DMA_Abort_IT+0x1d4>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d009      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a47      	ldr	r2, [pc, #284]	@ (800ad60 <HAL_DMA_Abort_IT+0x1d8>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d004      	beq.n	800ac50 <HAL_DMA_Abort_IT+0xc8>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a46      	ldr	r2, [pc, #280]	@ (800ad64 <HAL_DMA_Abort_IT+0x1dc>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d101      	bne.n	800ac54 <HAL_DMA_Abort_IT+0xcc>
 800ac50:	2301      	movs	r3, #1
 800ac52:	e000      	b.n	800ac56 <HAL_DMA_Abort_IT+0xce>
 800ac54:	2300      	movs	r3, #0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 8086 	beq.w	800ad68 <HAL_DMA_Abort_IT+0x1e0>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2204      	movs	r2, #4
 800ac60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a2f      	ldr	r2, [pc, #188]	@ (800ad28 <HAL_DMA_Abort_IT+0x1a0>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d04a      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a2e      	ldr	r2, [pc, #184]	@ (800ad2c <HAL_DMA_Abort_IT+0x1a4>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d045      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a2c      	ldr	r2, [pc, #176]	@ (800ad30 <HAL_DMA_Abort_IT+0x1a8>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d040      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a2b      	ldr	r2, [pc, #172]	@ (800ad34 <HAL_DMA_Abort_IT+0x1ac>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d03b      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a29      	ldr	r2, [pc, #164]	@ (800ad38 <HAL_DMA_Abort_IT+0x1b0>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d036      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a28      	ldr	r2, [pc, #160]	@ (800ad3c <HAL_DMA_Abort_IT+0x1b4>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d031      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a26      	ldr	r2, [pc, #152]	@ (800ad40 <HAL_DMA_Abort_IT+0x1b8>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d02c      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a25      	ldr	r2, [pc, #148]	@ (800ad44 <HAL_DMA_Abort_IT+0x1bc>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d027      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a23      	ldr	r2, [pc, #140]	@ (800ad48 <HAL_DMA_Abort_IT+0x1c0>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d022      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a22      	ldr	r2, [pc, #136]	@ (800ad4c <HAL_DMA_Abort_IT+0x1c4>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d01d      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a20      	ldr	r2, [pc, #128]	@ (800ad50 <HAL_DMA_Abort_IT+0x1c8>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d018      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a1f      	ldr	r2, [pc, #124]	@ (800ad54 <HAL_DMA_Abort_IT+0x1cc>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d013      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad58 <HAL_DMA_Abort_IT+0x1d0>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d00e      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a1c      	ldr	r2, [pc, #112]	@ (800ad5c <HAL_DMA_Abort_IT+0x1d4>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d009      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a1a      	ldr	r2, [pc, #104]	@ (800ad60 <HAL_DMA_Abort_IT+0x1d8>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d004      	beq.n	800ad04 <HAL_DMA_Abort_IT+0x17c>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a19      	ldr	r2, [pc, #100]	@ (800ad64 <HAL_DMA_Abort_IT+0x1dc>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d108      	bne.n	800ad16 <HAL_DMA_Abort_IT+0x18e>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 0201 	bic.w	r2, r2, #1
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	e178      	b.n	800b008 <HAL_DMA_Abort_IT+0x480>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f022 0201 	bic.w	r2, r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	e16f      	b.n	800b008 <HAL_DMA_Abort_IT+0x480>
 800ad28:	40020010 	.word	0x40020010
 800ad2c:	40020028 	.word	0x40020028
 800ad30:	40020040 	.word	0x40020040
 800ad34:	40020058 	.word	0x40020058
 800ad38:	40020070 	.word	0x40020070
 800ad3c:	40020088 	.word	0x40020088
 800ad40:	400200a0 	.word	0x400200a0
 800ad44:	400200b8 	.word	0x400200b8
 800ad48:	40020410 	.word	0x40020410
 800ad4c:	40020428 	.word	0x40020428
 800ad50:	40020440 	.word	0x40020440
 800ad54:	40020458 	.word	0x40020458
 800ad58:	40020470 	.word	0x40020470
 800ad5c:	40020488 	.word	0x40020488
 800ad60:	400204a0 	.word	0x400204a0
 800ad64:	400204b8 	.word	0x400204b8
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 020e 	bic.w	r2, r2, #14
 800ad76:	601a      	str	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a6c      	ldr	r2, [pc, #432]	@ (800af30 <HAL_DMA_Abort_IT+0x3a8>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d04a      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a6b      	ldr	r2, [pc, #428]	@ (800af34 <HAL_DMA_Abort_IT+0x3ac>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d045      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a69      	ldr	r2, [pc, #420]	@ (800af38 <HAL_DMA_Abort_IT+0x3b0>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d040      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a68      	ldr	r2, [pc, #416]	@ (800af3c <HAL_DMA_Abort_IT+0x3b4>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d03b      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a66      	ldr	r2, [pc, #408]	@ (800af40 <HAL_DMA_Abort_IT+0x3b8>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d036      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a65      	ldr	r2, [pc, #404]	@ (800af44 <HAL_DMA_Abort_IT+0x3bc>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d031      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a63      	ldr	r2, [pc, #396]	@ (800af48 <HAL_DMA_Abort_IT+0x3c0>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d02c      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a62      	ldr	r2, [pc, #392]	@ (800af4c <HAL_DMA_Abort_IT+0x3c4>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d027      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a60      	ldr	r2, [pc, #384]	@ (800af50 <HAL_DMA_Abort_IT+0x3c8>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d022      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a5f      	ldr	r2, [pc, #380]	@ (800af54 <HAL_DMA_Abort_IT+0x3cc>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d01d      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a5d      	ldr	r2, [pc, #372]	@ (800af58 <HAL_DMA_Abort_IT+0x3d0>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d018      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a5c      	ldr	r2, [pc, #368]	@ (800af5c <HAL_DMA_Abort_IT+0x3d4>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d013      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a5a      	ldr	r2, [pc, #360]	@ (800af60 <HAL_DMA_Abort_IT+0x3d8>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d00e      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a59      	ldr	r2, [pc, #356]	@ (800af64 <HAL_DMA_Abort_IT+0x3dc>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d009      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a57      	ldr	r2, [pc, #348]	@ (800af68 <HAL_DMA_Abort_IT+0x3e0>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d004      	beq.n	800ae18 <HAL_DMA_Abort_IT+0x290>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a56      	ldr	r2, [pc, #344]	@ (800af6c <HAL_DMA_Abort_IT+0x3e4>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d108      	bne.n	800ae2a <HAL_DMA_Abort_IT+0x2a2>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f022 0201 	bic.w	r2, r2, #1
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	e007      	b.n	800ae3a <HAL_DMA_Abort_IT+0x2b2>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f022 0201 	bic.w	r2, r2, #1
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a3c      	ldr	r2, [pc, #240]	@ (800af30 <HAL_DMA_Abort_IT+0x3a8>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d072      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a3a      	ldr	r2, [pc, #232]	@ (800af34 <HAL_DMA_Abort_IT+0x3ac>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d06d      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a39      	ldr	r2, [pc, #228]	@ (800af38 <HAL_DMA_Abort_IT+0x3b0>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d068      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a37      	ldr	r2, [pc, #220]	@ (800af3c <HAL_DMA_Abort_IT+0x3b4>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d063      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a36      	ldr	r2, [pc, #216]	@ (800af40 <HAL_DMA_Abort_IT+0x3b8>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d05e      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a34      	ldr	r2, [pc, #208]	@ (800af44 <HAL_DMA_Abort_IT+0x3bc>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d059      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a33      	ldr	r2, [pc, #204]	@ (800af48 <HAL_DMA_Abort_IT+0x3c0>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d054      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a31      	ldr	r2, [pc, #196]	@ (800af4c <HAL_DMA_Abort_IT+0x3c4>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d04f      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a30      	ldr	r2, [pc, #192]	@ (800af50 <HAL_DMA_Abort_IT+0x3c8>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d04a      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a2e      	ldr	r2, [pc, #184]	@ (800af54 <HAL_DMA_Abort_IT+0x3cc>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d045      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a2d      	ldr	r2, [pc, #180]	@ (800af58 <HAL_DMA_Abort_IT+0x3d0>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d040      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a2b      	ldr	r2, [pc, #172]	@ (800af5c <HAL_DMA_Abort_IT+0x3d4>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d03b      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a2a      	ldr	r2, [pc, #168]	@ (800af60 <HAL_DMA_Abort_IT+0x3d8>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d036      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a28      	ldr	r2, [pc, #160]	@ (800af64 <HAL_DMA_Abort_IT+0x3dc>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d031      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a27      	ldr	r2, [pc, #156]	@ (800af68 <HAL_DMA_Abort_IT+0x3e0>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d02c      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a25      	ldr	r2, [pc, #148]	@ (800af6c <HAL_DMA_Abort_IT+0x3e4>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d027      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a24      	ldr	r2, [pc, #144]	@ (800af70 <HAL_DMA_Abort_IT+0x3e8>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d022      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a22      	ldr	r2, [pc, #136]	@ (800af74 <HAL_DMA_Abort_IT+0x3ec>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d01d      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a21      	ldr	r2, [pc, #132]	@ (800af78 <HAL_DMA_Abort_IT+0x3f0>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d018      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a1f      	ldr	r2, [pc, #124]	@ (800af7c <HAL_DMA_Abort_IT+0x3f4>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d013      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a1e      	ldr	r2, [pc, #120]	@ (800af80 <HAL_DMA_Abort_IT+0x3f8>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d00e      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a1c      	ldr	r2, [pc, #112]	@ (800af84 <HAL_DMA_Abort_IT+0x3fc>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d009      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a1b      	ldr	r2, [pc, #108]	@ (800af88 <HAL_DMA_Abort_IT+0x400>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d004      	beq.n	800af2a <HAL_DMA_Abort_IT+0x3a2>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a19      	ldr	r2, [pc, #100]	@ (800af8c <HAL_DMA_Abort_IT+0x404>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d132      	bne.n	800af90 <HAL_DMA_Abort_IT+0x408>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e031      	b.n	800af92 <HAL_DMA_Abort_IT+0x40a>
 800af2e:	bf00      	nop
 800af30:	40020010 	.word	0x40020010
 800af34:	40020028 	.word	0x40020028
 800af38:	40020040 	.word	0x40020040
 800af3c:	40020058 	.word	0x40020058
 800af40:	40020070 	.word	0x40020070
 800af44:	40020088 	.word	0x40020088
 800af48:	400200a0 	.word	0x400200a0
 800af4c:	400200b8 	.word	0x400200b8
 800af50:	40020410 	.word	0x40020410
 800af54:	40020428 	.word	0x40020428
 800af58:	40020440 	.word	0x40020440
 800af5c:	40020458 	.word	0x40020458
 800af60:	40020470 	.word	0x40020470
 800af64:	40020488 	.word	0x40020488
 800af68:	400204a0 	.word	0x400204a0
 800af6c:	400204b8 	.word	0x400204b8
 800af70:	58025408 	.word	0x58025408
 800af74:	5802541c 	.word	0x5802541c
 800af78:	58025430 	.word	0x58025430
 800af7c:	58025444 	.word	0x58025444
 800af80:	58025458 	.word	0x58025458
 800af84:	5802546c 	.word	0x5802546c
 800af88:	58025480 	.word	0x58025480
 800af8c:	58025494 	.word	0x58025494
 800af90:	2300      	movs	r3, #0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d028      	beq.n	800afe8 <HAL_DMA_Abort_IT+0x460>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afb0:	f003 031f 	and.w	r3, r3, #31
 800afb4:	2201      	movs	r2, #1
 800afb6:	409a      	lsls	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	605a      	str	r2, [r3, #4]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800afc4:	605a      	str	r2, [r3, #4]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00c      	beq.n	800afe8 <HAL_DMA_Abort_IT+0x460>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800afe6:	605a      	str	r2, [r3, #4]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800affc:	2b00      	cmp	r3, #0
 800affe:	d003      	beq.n	800b008 <HAL_DMA_Abort_IT+0x480>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	4798      	blx	r3
 800b008:	2300      	movs	r3, #0
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop

0800b014 <HAL_DMA_GetState>:
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b022:	b2db      	uxtb	r3, r3
 800b024:	4618      	mov	r0, r3
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <HAL_GPIO_Init>:
 800b030:	b480      	push	{r7}
 800b032:	b089      	sub	sp, #36	@ 0x24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
 800b03a:	2300      	movs	r3, #0
 800b03c:	61fb      	str	r3, [r7, #28]
 800b03e:	4b86      	ldr	r3, [pc, #536]	@ (800b258 <HAL_GPIO_Init+0x228>)
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	e18c      	b.n	800b35e <HAL_GPIO_Init+0x32e>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	2101      	movs	r1, #1
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	fa01 f303 	lsl.w	r3, r1, r3
 800b050:	4013      	ands	r3, r2
 800b052:	613b      	str	r3, [r7, #16]
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 817e 	beq.w	800b358 <HAL_GPIO_Init+0x328>
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f003 0303 	and.w	r3, r3, #3
 800b064:	2b01      	cmp	r3, #1
 800b066:	d005      	beq.n	800b074 <HAL_GPIO_Init+0x44>
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f003 0303 	and.w	r3, r3, #3
 800b070:	2b02      	cmp	r3, #2
 800b072:	d130      	bne.n	800b0d6 <HAL_GPIO_Init+0xa6>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	61bb      	str	r3, [r7, #24]
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	005b      	lsls	r3, r3, #1
 800b07e:	2203      	movs	r2, #3
 800b080:	fa02 f303 	lsl.w	r3, r2, r3
 800b084:	43db      	mvns	r3, r3
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	4013      	ands	r3, r2
 800b08a:	61bb      	str	r3, [r7, #24]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	68da      	ldr	r2, [r3, #12]
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	fa02 f303 	lsl.w	r3, r2, r3
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	61bb      	str	r3, [r7, #24]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	609a      	str	r2, [r3, #8]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	61bb      	str	r3, [r7, #24]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b2:	43db      	mvns	r3, r3
 800b0b4:	69ba      	ldr	r2, [r7, #24]
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	61bb      	str	r3, [r7, #24]
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	091b      	lsrs	r3, r3, #4
 800b0c0:	f003 0201 	and.w	r2, r3, #1
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ca:	69ba      	ldr	r2, [r7, #24]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	61bb      	str	r3, [r7, #24]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	605a      	str	r2, [r3, #4]
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f003 0303 	and.w	r3, r3, #3
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d017      	beq.n	800b112 <HAL_GPIO_Init+0xe2>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	61bb      	str	r3, [r7, #24]
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	2203      	movs	r2, #3
 800b0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f2:	43db      	mvns	r3, r3
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	61bb      	str	r3, [r7, #24]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	689a      	ldr	r2, [r3, #8]
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	fa02 f303 	lsl.w	r3, r2, r3
 800b106:	69ba      	ldr	r2, [r7, #24]
 800b108:	4313      	orrs	r3, r2
 800b10a:	61bb      	str	r3, [r7, #24]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	60da      	str	r2, [r3, #12]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d123      	bne.n	800b166 <HAL_GPIO_Init+0x136>
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	08da      	lsrs	r2, r3, #3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3208      	adds	r2, #8
 800b126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12a:	61bb      	str	r3, [r7, #24]
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	f003 0307 	and.w	r3, r3, #7
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	220f      	movs	r2, #15
 800b136:	fa02 f303 	lsl.w	r3, r2, r3
 800b13a:	43db      	mvns	r3, r3
 800b13c:	69ba      	ldr	r2, [r7, #24]
 800b13e:	4013      	ands	r3, r2
 800b140:	61bb      	str	r3, [r7, #24]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	691a      	ldr	r2, [r3, #16]
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	f003 0307 	and.w	r3, r3, #7
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	fa02 f303 	lsl.w	r3, r2, r3
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	4313      	orrs	r3, r2
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	08da      	lsrs	r2, r3, #3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3208      	adds	r2, #8
 800b160:	69b9      	ldr	r1, [r7, #24]
 800b162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	61bb      	str	r3, [r7, #24]
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	2203      	movs	r2, #3
 800b172:	fa02 f303 	lsl.w	r3, r2, r3
 800b176:	43db      	mvns	r3, r3
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	4013      	ands	r3, r2
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	f003 0203 	and.w	r2, r3, #3
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	fa02 f303 	lsl.w	r3, r2, r3
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	4313      	orrs	r3, r2
 800b192:	61bb      	str	r3, [r7, #24]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 80d8 	beq.w	800b358 <HAL_GPIO_Init+0x328>
 800b1a8:	4b2c      	ldr	r3, [pc, #176]	@ (800b25c <HAL_GPIO_Init+0x22c>)
 800b1aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b1ae:	4a2b      	ldr	r2, [pc, #172]	@ (800b25c <HAL_GPIO_Init+0x22c>)
 800b1b0:	f043 0302 	orr.w	r3, r3, #2
 800b1b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b1b8:	4b28      	ldr	r3, [pc, #160]	@ (800b25c <HAL_GPIO_Init+0x22c>)
 800b1ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b1be:	f003 0302 	and.w	r3, r3, #2
 800b1c2:	60fb      	str	r3, [r7, #12]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4a26      	ldr	r2, [pc, #152]	@ (800b260 <HAL_GPIO_Init+0x230>)
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	089b      	lsrs	r3, r3, #2
 800b1cc:	3302      	adds	r3, #2
 800b1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1d2:	61bb      	str	r3, [r7, #24]
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	f003 0303 	and.w	r3, r3, #3
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	220f      	movs	r2, #15
 800b1de:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e2:	43db      	mvns	r3, r3
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	61bb      	str	r3, [r7, #24]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b264 <HAL_GPIO_Init+0x234>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d04a      	beq.n	800b288 <HAL_GPIO_Init+0x258>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b268 <HAL_GPIO_Init+0x238>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d02b      	beq.n	800b252 <HAL_GPIO_Init+0x222>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b26c <HAL_GPIO_Init+0x23c>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d025      	beq.n	800b24e <HAL_GPIO_Init+0x21e>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a1a      	ldr	r2, [pc, #104]	@ (800b270 <HAL_GPIO_Init+0x240>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d01f      	beq.n	800b24a <HAL_GPIO_Init+0x21a>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a19      	ldr	r2, [pc, #100]	@ (800b274 <HAL_GPIO_Init+0x244>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d019      	beq.n	800b246 <HAL_GPIO_Init+0x216>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a18      	ldr	r2, [pc, #96]	@ (800b278 <HAL_GPIO_Init+0x248>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d013      	beq.n	800b242 <HAL_GPIO_Init+0x212>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a17      	ldr	r2, [pc, #92]	@ (800b27c <HAL_GPIO_Init+0x24c>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d00d      	beq.n	800b23e <HAL_GPIO_Init+0x20e>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a16      	ldr	r2, [pc, #88]	@ (800b280 <HAL_GPIO_Init+0x250>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d007      	beq.n	800b23a <HAL_GPIO_Init+0x20a>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a15      	ldr	r2, [pc, #84]	@ (800b284 <HAL_GPIO_Init+0x254>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d101      	bne.n	800b236 <HAL_GPIO_Init+0x206>
 800b232:	2309      	movs	r3, #9
 800b234:	e029      	b.n	800b28a <HAL_GPIO_Init+0x25a>
 800b236:	230a      	movs	r3, #10
 800b238:	e027      	b.n	800b28a <HAL_GPIO_Init+0x25a>
 800b23a:	2307      	movs	r3, #7
 800b23c:	e025      	b.n	800b28a <HAL_GPIO_Init+0x25a>
 800b23e:	2306      	movs	r3, #6
 800b240:	e023      	b.n	800b28a <HAL_GPIO_Init+0x25a>
 800b242:	2305      	movs	r3, #5
 800b244:	e021      	b.n	800b28a <HAL_GPIO_Init+0x25a>
 800b246:	2304      	movs	r3, #4
 800b248:	e01f      	b.n	800b28a <HAL_GPIO_Init+0x25a>
 800b24a:	2303      	movs	r3, #3
 800b24c:	e01d      	b.n	800b28a <HAL_GPIO_Init+0x25a>
 800b24e:	2302      	movs	r3, #2
 800b250:	e01b      	b.n	800b28a <HAL_GPIO_Init+0x25a>
 800b252:	2301      	movs	r3, #1
 800b254:	e019      	b.n	800b28a <HAL_GPIO_Init+0x25a>
 800b256:	bf00      	nop
 800b258:	58000080 	.word	0x58000080
 800b25c:	58024400 	.word	0x58024400
 800b260:	58000400 	.word	0x58000400
 800b264:	58020000 	.word	0x58020000
 800b268:	58020400 	.word	0x58020400
 800b26c:	58020800 	.word	0x58020800
 800b270:	58020c00 	.word	0x58020c00
 800b274:	58021000 	.word	0x58021000
 800b278:	58021400 	.word	0x58021400
 800b27c:	58021800 	.word	0x58021800
 800b280:	58021c00 	.word	0x58021c00
 800b284:	58022400 	.word	0x58022400
 800b288:	2300      	movs	r3, #0
 800b28a:	69fa      	ldr	r2, [r7, #28]
 800b28c:	f002 0203 	and.w	r2, r2, #3
 800b290:	0092      	lsls	r2, r2, #2
 800b292:	4093      	lsls	r3, r2
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	4313      	orrs	r3, r2
 800b298:	61bb      	str	r3, [r7, #24]
 800b29a:	4938      	ldr	r1, [pc, #224]	@ (800b37c <HAL_GPIO_Init+0x34c>)
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	089b      	lsrs	r3, r3, #2
 800b2a0:	3302      	adds	r3, #2
 800b2a2:	69ba      	ldr	r2, [r7, #24]
 800b2a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b2a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	61bb      	str	r3, [r7, #24]
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	43db      	mvns	r3, r3
 800b2b4:	69ba      	ldr	r2, [r7, #24]
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	61bb      	str	r3, [r7, #24]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <HAL_GPIO_Init+0x29e>
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	61bb      	str	r3, [r7, #24]
 800b2ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	61bb      	str	r3, [r7, #24]
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	43db      	mvns	r3, r3
 800b2e2:	69ba      	ldr	r2, [r7, #24]
 800b2e4:	4013      	ands	r3, r2
 800b2e6:	61bb      	str	r3, [r7, #24]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <HAL_GPIO_Init+0x2cc>
 800b2f4:	69ba      	ldr	r2, [r7, #24]
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	61bb      	str	r3, [r7, #24]
 800b2fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	6053      	str	r3, [r2, #4]
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	61bb      	str	r3, [r7, #24]
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	43db      	mvns	r3, r3
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	4013      	ands	r3, r2
 800b312:	61bb      	str	r3, [r7, #24]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <HAL_GPIO_Init+0x2f8>
 800b320:	69ba      	ldr	r2, [r7, #24]
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	4313      	orrs	r3, r2
 800b326:	61bb      	str	r3, [r7, #24]
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	69ba      	ldr	r2, [r7, #24]
 800b32c:	605a      	str	r2, [r3, #4]
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	61bb      	str	r3, [r7, #24]
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	43db      	mvns	r3, r3
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	4013      	ands	r3, r2
 800b33c:	61bb      	str	r3, [r7, #24]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b346:	2b00      	cmp	r3, #0
 800b348:	d003      	beq.n	800b352 <HAL_GPIO_Init+0x322>
 800b34a:	69ba      	ldr	r2, [r7, #24]
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	4313      	orrs	r3, r2
 800b350:	61bb      	str	r3, [r7, #24]
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	69ba      	ldr	r2, [r7, #24]
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	3301      	adds	r3, #1
 800b35c:	61fb      	str	r3, [r7, #28]
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	fa22 f303 	lsr.w	r3, r2, r3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f47f ae6b 	bne.w	800b044 <HAL_GPIO_Init+0x14>
 800b36e:	bf00      	nop
 800b370:	bf00      	nop
 800b372:	3724      	adds	r7, #36	@ 0x24
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	58000400 	.word	0x58000400

0800b380 <HAL_GPIO_ReadPin>:
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	807b      	strh	r3, [r7, #2]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691a      	ldr	r2, [r3, #16]
 800b390:	887b      	ldrh	r3, [r7, #2]
 800b392:	4013      	ands	r3, r2
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <HAL_GPIO_ReadPin+0x1e>
 800b398:	2301      	movs	r3, #1
 800b39a:	73fb      	strb	r3, [r7, #15]
 800b39c:	e001      	b.n	800b3a2 <HAL_GPIO_ReadPin+0x22>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	73fb      	strb	r3, [r7, #15]
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3714      	adds	r7, #20
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <HAL_GPIO_WritePin>:
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	807b      	strh	r3, [r7, #2]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	707b      	strb	r3, [r7, #1]
 800b3c0:	787b      	ldrb	r3, [r7, #1]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <HAL_GPIO_WritePin+0x1e>
 800b3c6:	887a      	ldrh	r2, [r7, #2]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	619a      	str	r2, [r3, #24]
 800b3cc:	e003      	b.n	800b3d6 <HAL_GPIO_WritePin+0x26>
 800b3ce:	887b      	ldrh	r3, [r7, #2]
 800b3d0:	041a      	lsls	r2, r3, #16
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	619a      	str	r2, [r3, #24]
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <HAL_GPIO_EXTI_IRQHandler>:
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b082      	sub	sp, #8
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	80fb      	strh	r3, [r7, #6]
 800b3ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b3f4:	88fb      	ldrh	r3, [r7, #6]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d008      	beq.n	800b40e <HAL_GPIO_EXTI_IRQHandler+0x2c>
 800b3fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b400:	88fb      	ldrh	r3, [r7, #6]
 800b402:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800b406:	88fb      	ldrh	r3, [r7, #6]
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fa fb6b 	bl	8005ae4 <HAL_GPIO_EXTI_Callback>
 800b40e:	bf00      	nop
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <HAL_I2C_Init>:
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <HAL_I2C_Init+0x12>
 800b426:	2301      	movs	r3, #1
 800b428:	e08b      	b.n	800b542 <HAL_I2C_Init+0x12a>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	d106      	bne.n	800b444 <HAL_I2C_Init+0x2c>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7fc f89e 	bl	8007580 <HAL_I2C_MspInit>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2224      	movs	r2, #36	@ 0x24
 800b448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f022 0201 	bic.w	r2, r2, #1
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b468:	611a      	str	r2, [r3, #16]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	689a      	ldr	r2, [r3, #8]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b478:	609a      	str	r2, [r3, #8]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d107      	bne.n	800b492 <HAL_I2C_Init+0x7a>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689a      	ldr	r2, [r3, #8]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b48e:	609a      	str	r2, [r3, #8]
 800b490:	e006      	b.n	800b4a0 <HAL_I2C_Init+0x88>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	689a      	ldr	r2, [r3, #8]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b49e:	609a      	str	r2, [r3, #8]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d108      	bne.n	800b4ba <HAL_I2C_Init+0xa2>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4b6:	605a      	str	r2, [r3, #4]
 800b4b8:	e007      	b.n	800b4ca <HAL_I2C_Init+0xb2>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b4c8:	605a      	str	r2, [r3, #4]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6859      	ldr	r1, [r3, #4]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	4b1d      	ldr	r3, [pc, #116]	@ (800b54c <HAL_I2C_Init+0x134>)
 800b4d6:	430b      	orrs	r3, r1
 800b4d8:	6053      	str	r3, [r2, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	68da      	ldr	r2, [r3, #12]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b4e8:	60da      	str	r2, [r3, #12]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	691a      	ldr	r2, [r3, #16]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	ea42 0103 	orr.w	r1, r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	021a      	lsls	r2, r3, #8
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	430a      	orrs	r2, r1
 800b502:	60da      	str	r2, [r3, #12]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	69d9      	ldr	r1, [r3, #28]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a1a      	ldr	r2, [r3, #32]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	430a      	orrs	r2, r1
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f042 0201 	orr.w	r2, r2, #1
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	645a      	str	r2, [r3, #68]	@ 0x44
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2220      	movs	r2, #32
 800b52e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	631a      	str	r2, [r3, #48]	@ 0x30
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b540:	2300      	movs	r3, #0
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	02008000 	.word	0x02008000

0800b550 <HAL_I2C_Master_Transmit>:
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af02      	add	r7, sp, #8
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	461a      	mov	r2, r3
 800b55c:	460b      	mov	r3, r1
 800b55e:	817b      	strh	r3, [r7, #10]
 800b560:	4613      	mov	r3, r2
 800b562:	813b      	strh	r3, [r7, #8]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b20      	cmp	r3, #32
 800b56e:	f040 80fd 	bne.w	800b76c <HAL_I2C_Master_Transmit+0x21c>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d101      	bne.n	800b580 <HAL_I2C_Master_Transmit+0x30>
 800b57c:	2302      	movs	r3, #2
 800b57e:	e0f6      	b.n	800b76e <HAL_I2C_Master_Transmit+0x21e>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b588:	f7fd fab4 	bl	8008af4 <HAL_GetTick>
 800b58c:	6138      	str	r0, [r7, #16]
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	2319      	movs	r3, #25
 800b594:	2201      	movs	r2, #1
 800b596:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f001 f875 	bl	800c68a <I2C_WaitOnFlagUntilTimeout>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <HAL_I2C_Master_Transmit+0x5a>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e0e1      	b.n	800b76e <HAL_I2C_Master_Transmit+0x21e>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2221      	movs	r2, #33	@ 0x21
 800b5ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2210      	movs	r2, #16
 800b5b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	645a      	str	r2, [r3, #68]	@ 0x44
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	893a      	ldrh	r2, [r7, #8]
 800b5ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	635a      	str	r2, [r3, #52]	@ 0x34
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	2bff      	cmp	r3, #255	@ 0xff
 800b5da:	d906      	bls.n	800b5ea <HAL_I2C_Master_Transmit+0x9a>
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	22ff      	movs	r2, #255	@ 0xff
 800b5e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b5e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b5e6:	617b      	str	r3, [r7, #20]
 800b5e8:	e007      	b.n	800b5fa <HAL_I2C_Master_Transmit+0xaa>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b5f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d024      	beq.n	800b64c <HAL_I2C_Master_Transmit+0xfc>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b606:	781a      	ldrb	r2, [r3, #0]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	625a      	str	r2, [r3, #36]	@ 0x24
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	3b01      	subs	r3, #1
 800b620:	b29a      	uxth	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b62a:	3b01      	subs	r3, #1
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b636:	b2db      	uxtb	r3, r3
 800b638:	3301      	adds	r3, #1
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	8979      	ldrh	r1, [r7, #10]
 800b63e:	4b4e      	ldr	r3, [pc, #312]	@ (800b778 <HAL_I2C_Master_Transmit+0x228>)
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f001 fa6f 	bl	800cb28 <I2C_TransferConfig>
 800b64a:	e066      	b.n	800b71a <HAL_I2C_Master_Transmit+0x1ca>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b650:	b2da      	uxtb	r2, r3
 800b652:	8979      	ldrh	r1, [r7, #10]
 800b654:	4b48      	ldr	r3, [pc, #288]	@ (800b778 <HAL_I2C_Master_Transmit+0x228>)
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f001 fa64 	bl	800cb28 <I2C_TransferConfig>
 800b660:	e05b      	b.n	800b71a <HAL_I2C_Master_Transmit+0x1ca>
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	6a39      	ldr	r1, [r7, #32]
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f001 f868 	bl	800c73c <I2C_WaitOnTXISFlagUntilTimeout>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <HAL_I2C_Master_Transmit+0x126>
 800b672:	2301      	movs	r3, #1
 800b674:	e07b      	b.n	800b76e <HAL_I2C_Master_Transmit+0x21e>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b67a:	781a      	ldrb	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	629a      	str	r2, [r3, #40]	@ 0x28
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	625a      	str	r2, [r3, #36]	@ 0x24
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b690:	b29b      	uxth	r3, r3
 800b692:	3b01      	subs	r3, #1
 800b694:	b29a      	uxth	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d034      	beq.n	800b71a <HAL_I2C_Master_Transmit+0x1ca>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d130      	bne.n	800b71a <HAL_I2C_Master_Transmit+0x1ca>
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2180      	movs	r1, #128	@ 0x80
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f000 ffe1 	bl	800c68a <I2C_WaitOnFlagUntilTimeout>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <HAL_I2C_Master_Transmit+0x182>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e04d      	b.n	800b76e <HAL_I2C_Master_Transmit+0x21e>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	2bff      	cmp	r3, #255	@ 0xff
 800b6da:	d90e      	bls.n	800b6fa <HAL_I2C_Master_Transmit+0x1aa>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	22ff      	movs	r2, #255	@ 0xff
 800b6e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6e6:	b2da      	uxtb	r2, r3
 800b6e8:	8979      	ldrh	r1, [r7, #10]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f001 fa18 	bl	800cb28 <I2C_TransferConfig>
 800b6f8:	e00f      	b.n	800b71a <HAL_I2C_Master_Transmit+0x1ca>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	8979      	ldrh	r1, [r7, #10]
 800b70c:	2300      	movs	r3, #0
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f001 fa07 	bl	800cb28 <I2C_TransferConfig>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b71e:	b29b      	uxth	r3, r3
 800b720:	2b00      	cmp	r3, #0
 800b722:	d19e      	bne.n	800b662 <HAL_I2C_Master_Transmit+0x112>
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	6a39      	ldr	r1, [r7, #32]
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f001 f84e 	bl	800c7ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <HAL_I2C_Master_Transmit+0x1e8>
 800b734:	2301      	movs	r3, #1
 800b736:	e01a      	b.n	800b76e <HAL_I2C_Master_Transmit+0x21e>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2220      	movs	r2, #32
 800b73e:	61da      	str	r2, [r3, #28]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6859      	ldr	r1, [r3, #4]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	4b0c      	ldr	r3, [pc, #48]	@ (800b77c <HAL_I2C_Master_Transmit+0x22c>)
 800b74c:	400b      	ands	r3, r1
 800b74e:	6053      	str	r3, [r2, #4]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2220      	movs	r2, #32
 800b754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b768:	2300      	movs	r3, #0
 800b76a:	e000      	b.n	800b76e <HAL_I2C_Master_Transmit+0x21e>
 800b76c:	2302      	movs	r3, #2
 800b76e:	4618      	mov	r0, r3
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	80002000 	.word	0x80002000
 800b77c:	fe00e800 	.word	0xfe00e800

0800b780 <HAL_I2C_Master_Receive>:
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af02      	add	r7, sp, #8
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	607a      	str	r2, [r7, #4]
 800b78a:	461a      	mov	r2, r3
 800b78c:	460b      	mov	r3, r1
 800b78e:	817b      	strh	r3, [r7, #10]
 800b790:	4613      	mov	r3, r2
 800b792:	813b      	strh	r3, [r7, #8]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	f040 80db 	bne.w	800b958 <HAL_I2C_Master_Receive+0x1d8>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d101      	bne.n	800b7b0 <HAL_I2C_Master_Receive+0x30>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e0d4      	b.n	800b95a <HAL_I2C_Master_Receive+0x1da>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7b8:	f7fd f99c 	bl	8008af4 <HAL_GetTick>
 800b7bc:	6178      	str	r0, [r7, #20]
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	2319      	movs	r3, #25
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f000 ff5d 	bl	800c68a <I2C_WaitOnFlagUntilTimeout>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d001      	beq.n	800b7da <HAL_I2C_Master_Receive+0x5a>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e0bf      	b.n	800b95a <HAL_I2C_Master_Receive+0x1da>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2222      	movs	r2, #34	@ 0x22
 800b7de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2210      	movs	r2, #16
 800b7e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	645a      	str	r2, [r3, #68]	@ 0x44
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	893a      	ldrh	r2, [r7, #8]
 800b7fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	635a      	str	r2, [r3, #52]	@ 0x34
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b806:	b29b      	uxth	r3, r3
 800b808:	2bff      	cmp	r3, #255	@ 0xff
 800b80a:	d90e      	bls.n	800b82a <HAL_I2C_Master_Receive+0xaa>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	22ff      	movs	r2, #255	@ 0xff
 800b810:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b816:	b2da      	uxtb	r2, r3
 800b818:	8979      	ldrh	r1, [r7, #10]
 800b81a:	4b52      	ldr	r3, [pc, #328]	@ (800b964 <HAL_I2C_Master_Receive+0x1e4>)
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f001 f980 	bl	800cb28 <I2C_TransferConfig>
 800b828:	e06d      	b.n	800b906 <HAL_I2C_Master_Receive+0x186>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b82e:	b29a      	uxth	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b838:	b2da      	uxtb	r2, r3
 800b83a:	8979      	ldrh	r1, [r7, #10]
 800b83c:	4b49      	ldr	r3, [pc, #292]	@ (800b964 <HAL_I2C_Master_Receive+0x1e4>)
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f001 f96f 	bl	800cb28 <I2C_TransferConfig>
 800b84a:	e05c      	b.n	800b906 <HAL_I2C_Master_Receive+0x186>
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	6a39      	ldr	r1, [r7, #32]
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 fffd 	bl	800c850 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <HAL_I2C_Master_Receive+0xe0>
 800b85c:	2301      	movs	r3, #1
 800b85e:	e07c      	b.n	800b95a <HAL_I2C_Master_Receive+0x1da>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86a:	b2d2      	uxtb	r2, r2
 800b86c:	701a      	strb	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	625a      	str	r2, [r3, #36]	@ 0x24
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b87c:	3b01      	subs	r3, #1
 800b87e:	b29a      	uxth	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b888:	b29b      	uxth	r3, r3
 800b88a:	3b01      	subs	r3, #1
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b896:	b29b      	uxth	r3, r3
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d034      	beq.n	800b906 <HAL_I2C_Master_Receive+0x186>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d130      	bne.n	800b906 <HAL_I2C_Master_Receive+0x186>
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	6a3b      	ldr	r3, [r7, #32]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2180      	movs	r1, #128	@ 0x80
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f000 feeb 	bl	800c68a <I2C_WaitOnFlagUntilTimeout>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <HAL_I2C_Master_Receive+0x13e>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e04d      	b.n	800b95a <HAL_I2C_Master_Receive+0x1da>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	2bff      	cmp	r3, #255	@ 0xff
 800b8c6:	d90e      	bls.n	800b8e6 <HAL_I2C_Master_Receive+0x166>
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	22ff      	movs	r2, #255	@ 0xff
 800b8cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	8979      	ldrh	r1, [r7, #10]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f001 f922 	bl	800cb28 <I2C_TransferConfig>
 800b8e4:	e00f      	b.n	800b906 <HAL_I2C_Master_Receive+0x186>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	8979      	ldrh	r1, [r7, #10]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f001 f911 	bl	800cb28 <I2C_TransferConfig>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d19d      	bne.n	800b84c <HAL_I2C_Master_Receive+0xcc>
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	6a39      	ldr	r1, [r7, #32]
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 ff58 	bl	800c7ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <HAL_I2C_Master_Receive+0x1a4>
 800b920:	2301      	movs	r3, #1
 800b922:	e01a      	b.n	800b95a <HAL_I2C_Master_Receive+0x1da>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2220      	movs	r2, #32
 800b92a:	61da      	str	r2, [r3, #28]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6859      	ldr	r1, [r3, #4]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	4b0c      	ldr	r3, [pc, #48]	@ (800b968 <HAL_I2C_Master_Receive+0x1e8>)
 800b938:	400b      	ands	r3, r1
 800b93a:	6053      	str	r3, [r2, #4]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2220      	movs	r2, #32
 800b940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b954:	2300      	movs	r3, #0
 800b956:	e000      	b.n	800b95a <HAL_I2C_Master_Receive+0x1da>
 800b958:	2302      	movs	r3, #2
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	80002400 	.word	0x80002400
 800b968:	fe00e800 	.word	0xfe00e800

0800b96c <HAL_I2C_EV_IRQHandler>:
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	60fb      	str	r3, [r7, #12]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	60bb      	str	r3, [r7, #8]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d005      	beq.n	800b998 <HAL_I2C_EV_IRQHandler+0x2c>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b990:	68ba      	ldr	r2, [r7, #8]
 800b992:	68f9      	ldr	r1, [r7, #12]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	4798      	blx	r3
 800b998:	bf00      	nop
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <HAL_I2C_ER_IRQHandler>:
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	617b      	str	r3, [r7, #20]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	613b      	str	r3, [r7, #16]
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00f      	beq.n	800b9e2 <HAL_I2C_ER_IRQHandler+0x42>
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00a      	beq.n	800b9e2 <HAL_I2C_ER_IRQHandler+0x42>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9d0:	f043 0201 	orr.w	r2, r3, #1
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	645a      	str	r2, [r3, #68]	@ 0x44
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9e0:	61da      	str	r2, [r3, #28]
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00f      	beq.n	800ba0c <HAL_I2C_ER_IRQHandler+0x6c>
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <HAL_I2C_ER_IRQHandler+0x6c>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9fa:	f043 0208 	orr.w	r2, r3, #8
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	645a      	str	r2, [r3, #68]	@ 0x44
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ba0a:	61da      	str	r2, [r3, #28]
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00f      	beq.n	800ba36 <HAL_I2C_ER_IRQHandler+0x96>
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00a      	beq.n	800ba36 <HAL_I2C_ER_IRQHandler+0x96>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba24:	f043 0202 	orr.w	r2, r3, #2
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	645a      	str	r2, [r3, #68]	@ 0x44
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba34:	61da      	str	r2, [r3, #28]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f003 030b 	and.w	r3, r3, #11
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <HAL_I2C_ER_IRQHandler+0xae>
 800ba46:	68f9      	ldr	r1, [r7, #12]
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fcc5 	bl	800c3d8 <I2C_ITError>
 800ba4e:	bf00      	nop
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <HAL_I2C_SlaveTxCpltCallback>:
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <HAL_I2C_SlaveRxCpltCallback>:
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	bf00      	nop
 800ba74:	370c      	adds	r7, #12
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <HAL_I2C_AddrCallback>:
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	460b      	mov	r3, r1
 800ba88:	70fb      	strb	r3, [r7, #3]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	803b      	strh	r3, [r7, #0]
 800ba8e:	bf00      	nop
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <HAL_I2C_ListenCpltCallback>:
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	bf00      	nop
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <HAL_I2C_ErrorCallback>:
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	bf00      	nop
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <HAL_I2C_AbortCpltCallback>:
 800bac2:	b480      	push	{r7}
 800bac4:	b083      	sub	sp, #12
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	bf00      	nop
 800bacc:	370c      	adds	r7, #12
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <I2C_Slave_ISR_IT>:
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b086      	sub	sp, #24
 800bada:	af00      	add	r7, sp, #0
 800badc:	60f8      	str	r0, [r7, #12]
 800bade:	60b9      	str	r1, [r7, #8]
 800bae0:	607a      	str	r2, [r7, #4]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	613b      	str	r3, [r7, #16]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d101      	bne.n	800bafa <I2C_Slave_ISR_IT+0x24>
 800baf6:	2302      	movs	r3, #2
 800baf8:	e0e2      	b.n	800bcc0 <I2C_Slave_ISR_IT+0x1ea>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d009      	beq.n	800bb20 <I2C_Slave_ISR_IT+0x4a>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f003 0320 	and.w	r3, r3, #32
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d004      	beq.n	800bb20 <I2C_Slave_ISR_IT+0x4a>
 800bb16:	6939      	ldr	r1, [r7, #16]
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f000 f9b5 	bl	800be88 <I2C_ITSlaveCplt>
 800bb1e:	e0ca      	b.n	800bcb6 <I2C_Slave_ISR_IT+0x1e0>
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	f003 0310 	and.w	r3, r3, #16
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d04b      	beq.n	800bbc2 <I2C_Slave_ISR_IT+0xec>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f003 0310 	and.w	r3, r3, #16
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d046      	beq.n	800bbc2 <I2C_Slave_ISR_IT+0xec>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d128      	bne.n	800bb90 <I2C_Slave_ISR_IT+0xba>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b28      	cmp	r3, #40	@ 0x28
 800bb48:	d108      	bne.n	800bb5c <I2C_Slave_ISR_IT+0x86>
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb50:	d104      	bne.n	800bb5c <I2C_Slave_ISR_IT+0x86>
 800bb52:	6939      	ldr	r1, [r7, #16]
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f000 fbeb 	bl	800c330 <I2C_ITListenCplt>
 800bb5a:	e031      	b.n	800bbc0 <I2C_Slave_ISR_IT+0xea>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b29      	cmp	r3, #41	@ 0x29
 800bb66:	d10e      	bne.n	800bb86 <I2C_Slave_ISR_IT+0xb0>
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bb6e:	d00a      	beq.n	800bb86 <I2C_Slave_ISR_IT+0xb0>
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2210      	movs	r2, #16
 800bb76:	61da      	str	r2, [r3, #28]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 fd44 	bl	800c606 <I2C_Flush_TXDR>
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 f926 	bl	800bdd0 <I2C_ITSlaveSeqCplt>
 800bb84:	e01c      	b.n	800bbc0 <I2C_Slave_ISR_IT+0xea>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2210      	movs	r2, #16
 800bb8c:	61da      	str	r2, [r3, #28]
 800bb8e:	e08f      	b.n	800bcb0 <I2C_Slave_ISR_IT+0x1da>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2210      	movs	r2, #16
 800bb96:	61da      	str	r2, [r3, #28]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb9c:	f043 0204 	orr.w	r2, r3, #4
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	645a      	str	r2, [r3, #68]	@ 0x44
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <I2C_Slave_ISR_IT+0xdc>
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbb0:	d17e      	bne.n	800bcb0 <I2C_Slave_ISR_IT+0x1da>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 fc0d 	bl	800c3d8 <I2C_ITError>
 800bbbe:	e077      	b.n	800bcb0 <I2C_Slave_ISR_IT+0x1da>
 800bbc0:	e076      	b.n	800bcb0 <I2C_Slave_ISR_IT+0x1da>
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	f003 0304 	and.w	r3, r3, #4
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d02f      	beq.n	800bc2c <I2C_Slave_ISR_IT+0x156>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d02a      	beq.n	800bc2c <I2C_Slave_ISR_IT+0x156>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d018      	beq.n	800bc12 <I2C_Slave_ISR_IT+0x13c>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbea:	b2d2      	uxtb	r2, r2
 800bbec:	701a      	strb	r2, [r3, #0]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	625a      	str	r2, [r3, #36]	@ 0x24
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d14b      	bne.n	800bcb4 <I2C_Slave_ISR_IT+0x1de>
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bc22:	d047      	beq.n	800bcb4 <I2C_Slave_ISR_IT+0x1de>
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f000 f8d3 	bl	800bdd0 <I2C_ITSlaveSeqCplt>
 800bc2a:	e043      	b.n	800bcb4 <I2C_Slave_ISR_IT+0x1de>
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	f003 0308 	and.w	r3, r3, #8
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d009      	beq.n	800bc4a <I2C_Slave_ISR_IT+0x174>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f003 0308 	and.w	r3, r3, #8
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d004      	beq.n	800bc4a <I2C_Slave_ISR_IT+0x174>
 800bc40:	6939      	ldr	r1, [r7, #16]
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f000 f840 	bl	800bcc8 <I2C_ITAddrCplt>
 800bc48:	e035      	b.n	800bcb6 <I2C_Slave_ISR_IT+0x1e0>
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	f003 0302 	and.w	r3, r3, #2
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d030      	beq.n	800bcb6 <I2C_Slave_ISR_IT+0x1e0>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f003 0302 	and.w	r3, r3, #2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d02b      	beq.n	800bcb6 <I2C_Slave_ISR_IT+0x1e0>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d018      	beq.n	800bc9a <I2C_Slave_ISR_IT+0x1c4>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6c:	781a      	ldrb	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	629a      	str	r2, [r3, #40]	@ 0x28
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc78:	1c5a      	adds	r2, r3, #1
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	3b01      	subs	r3, #1
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc90:	3b01      	subs	r3, #1
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bc98:	e00d      	b.n	800bcb6 <I2C_Slave_ISR_IT+0x1e0>
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bca0:	d002      	beq.n	800bca8 <I2C_Slave_ISR_IT+0x1d2>
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d106      	bne.n	800bcb6 <I2C_Slave_ISR_IT+0x1e0>
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f000 f891 	bl	800bdd0 <I2C_ITSlaveSeqCplt>
 800bcae:	e002      	b.n	800bcb6 <I2C_Slave_ISR_IT+0x1e0>
 800bcb0:	bf00      	nop
 800bcb2:	e000      	b.n	800bcb6 <I2C_Slave_ISR_IT+0x1e0>
 800bcb4:	bf00      	nop
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <I2C_ITAddrCplt>:
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bcde:	2b28      	cmp	r3, #40	@ 0x28
 800bce0:	d16a      	bne.n	800bdb8 <I2C_ITAddrCplt+0xf0>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	0c1b      	lsrs	r3, r3, #16
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	73fb      	strb	r3, [r7, #15]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	0c1b      	lsrs	r3, r3, #16
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800bd00:	81bb      	strh	r3, [r7, #12]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd0e:	817b      	strh	r3, [r7, #10]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800bd1c:	813b      	strh	r3, [r7, #8]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d138      	bne.n	800bd98 <I2C_ITAddrCplt+0xd0>
 800bd26:	897b      	ldrh	r3, [r7, #10]
 800bd28:	09db      	lsrs	r3, r3, #7
 800bd2a:	b29a      	uxth	r2, r3
 800bd2c:	89bb      	ldrh	r3, [r7, #12]
 800bd2e:	4053      	eors	r3, r2
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f003 0306 	and.w	r3, r3, #6
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d11c      	bne.n	800bd74 <I2C_ITAddrCplt+0xac>
 800bd3a:	897b      	ldrh	r3, [r7, #10]
 800bd3c:	81bb      	strh	r3, [r7, #12]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	649a      	str	r2, [r3, #72]	@ 0x48
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	d13b      	bne.n	800bdc8 <I2C_ITAddrCplt+0x100>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	649a      	str	r2, [r3, #72]	@ 0x48
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2208      	movs	r2, #8
 800bd5c:	61da      	str	r2, [r3, #28]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd66:	89ba      	ldrh	r2, [r7, #12]
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff fe86 	bl	800ba7e <HAL_I2C_AddrCallback>
 800bd72:	e029      	b.n	800bdc8 <I2C_ITAddrCplt+0x100>
 800bd74:	893b      	ldrh	r3, [r7, #8]
 800bd76:	81bb      	strh	r3, [r7, #12]
 800bd78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 ff05 	bl	800cb8c <I2C_Disable_IRQ>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd8a:	89ba      	ldrh	r2, [r7, #12]
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff fe74 	bl	800ba7e <HAL_I2C_AddrCallback>
 800bd96:	e017      	b.n	800bdc8 <I2C_ITAddrCplt+0x100>
 800bd98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fef5 	bl	800cb8c <I2C_Disable_IRQ>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdaa:	89ba      	ldrh	r2, [r7, #12]
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7ff fe64 	bl	800ba7e <HAL_I2C_AddrCallback>
 800bdb6:	e007      	b.n	800bdc8 <I2C_ITAddrCplt+0x100>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2208      	movs	r2, #8
 800bdbe:	61da      	str	r2, [r3, #28]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdc8:	bf00      	nop
 800bdca:	3710      	adds	r7, #16
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <I2C_ITSlaveSeqCplt>:
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d008      	beq.n	800be04 <I2C_ITSlaveSeqCplt+0x34>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800be00:	601a      	str	r2, [r3, #0]
 800be02:	e00c      	b.n	800be1e <I2C_ITSlaveSeqCplt+0x4e>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d007      	beq.n	800be1e <I2C_ITSlaveSeqCplt+0x4e>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b29      	cmp	r3, #41	@ 0x29
 800be28:	d112      	bne.n	800be50 <I2C_ITSlaveSeqCplt+0x80>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2228      	movs	r2, #40	@ 0x28
 800be2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2221      	movs	r2, #33	@ 0x21
 800be36:	631a      	str	r2, [r3, #48]	@ 0x30
 800be38:	2101      	movs	r1, #1
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fea6 	bl	800cb8c <I2C_Disable_IRQ>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff fe04 	bl	800ba56 <HAL_I2C_SlaveTxCpltCallback>
 800be4e:	e017      	b.n	800be80 <I2C_ITSlaveSeqCplt+0xb0>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be56:	b2db      	uxtb	r3, r3
 800be58:	2b2a      	cmp	r3, #42	@ 0x2a
 800be5a:	d111      	bne.n	800be80 <I2C_ITSlaveSeqCplt+0xb0>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2228      	movs	r2, #40	@ 0x28
 800be60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2222      	movs	r2, #34	@ 0x22
 800be68:	631a      	str	r2, [r3, #48]	@ 0x30
 800be6a:	2102      	movs	r1, #2
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fe8d 	bl	800cb8c <I2C_Disable_IRQ>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff fdf5 	bl	800ba6a <HAL_I2C_SlaveRxCpltCallback>
 800be80:	bf00      	nop
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <I2C_ITSlaveCplt>:
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	613b      	str	r3, [r7, #16]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800beaa:	72fb      	strb	r3, [r7, #11]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2220      	movs	r2, #32
 800beb2:	61da      	str	r2, [r3, #28]
 800beb4:	7afb      	ldrb	r3, [r7, #11]
 800beb6:	2b21      	cmp	r3, #33	@ 0x21
 800beb8:	d002      	beq.n	800bec0 <I2C_ITSlaveCplt+0x38>
 800beba:	7afb      	ldrb	r3, [r7, #11]
 800bebc:	2b29      	cmp	r3, #41	@ 0x29
 800bebe:	d108      	bne.n	800bed2 <I2C_ITSlaveCplt+0x4a>
 800bec0:	f248 0101 	movw	r1, #32769	@ 0x8001
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fe61 	bl	800cb8c <I2C_Disable_IRQ>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2221      	movs	r2, #33	@ 0x21
 800bece:	631a      	str	r2, [r3, #48]	@ 0x30
 800bed0:	e019      	b.n	800bf06 <I2C_ITSlaveCplt+0x7e>
 800bed2:	7afb      	ldrb	r3, [r7, #11]
 800bed4:	2b22      	cmp	r3, #34	@ 0x22
 800bed6:	d002      	beq.n	800bede <I2C_ITSlaveCplt+0x56>
 800bed8:	7afb      	ldrb	r3, [r7, #11]
 800beda:	2b2a      	cmp	r3, #42	@ 0x2a
 800bedc:	d108      	bne.n	800bef0 <I2C_ITSlaveCplt+0x68>
 800bede:	f248 0102 	movw	r1, #32770	@ 0x8002
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fe52 	bl	800cb8c <I2C_Disable_IRQ>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2222      	movs	r2, #34	@ 0x22
 800beec:	631a      	str	r2, [r3, #48]	@ 0x30
 800beee:	e00a      	b.n	800bf06 <I2C_ITSlaveCplt+0x7e>
 800bef0:	7afb      	ldrb	r3, [r7, #11]
 800bef2:	2b28      	cmp	r3, #40	@ 0x28
 800bef4:	d107      	bne.n	800bf06 <I2C_ITSlaveCplt+0x7e>
 800bef6:	f248 0103 	movw	r1, #32771	@ 0x8003
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fe46 	bl	800cb8c <I2C_Disable_IRQ>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bf14:	605a      	str	r2, [r3, #4]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6859      	ldr	r1, [r3, #4]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	4b7f      	ldr	r3, [pc, #508]	@ (800c120 <I2C_ITSlaveCplt+0x298>)
 800bf22:	400b      	ands	r3, r1
 800bf24:	6053      	str	r3, [r2, #4]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fb6d 	bl	800c606 <I2C_Flush_TXDR>
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d07a      	beq.n	800c02c <I2C_ITSlaveCplt+0x1a4>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 8111 	beq.w	800c172 <I2C_ITSlaveCplt+0x2ea>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a73      	ldr	r2, [pc, #460]	@ (800c124 <I2C_ITSlaveCplt+0x29c>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d059      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a71      	ldr	r2, [pc, #452]	@ (800c128 <I2C_ITSlaveCplt+0x2a0>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d053      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a6f      	ldr	r2, [pc, #444]	@ (800c12c <I2C_ITSlaveCplt+0x2a4>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d04d      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a6d      	ldr	r2, [pc, #436]	@ (800c130 <I2C_ITSlaveCplt+0x2a8>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d047      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a6b      	ldr	r2, [pc, #428]	@ (800c134 <I2C_ITSlaveCplt+0x2ac>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d041      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a69      	ldr	r2, [pc, #420]	@ (800c138 <I2C_ITSlaveCplt+0x2b0>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d03b      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a67      	ldr	r2, [pc, #412]	@ (800c13c <I2C_ITSlaveCplt+0x2b4>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d035      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a65      	ldr	r2, [pc, #404]	@ (800c140 <I2C_ITSlaveCplt+0x2b8>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d02f      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a63      	ldr	r2, [pc, #396]	@ (800c144 <I2C_ITSlaveCplt+0x2bc>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d029      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a61      	ldr	r2, [pc, #388]	@ (800c148 <I2C_ITSlaveCplt+0x2c0>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d023      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a5f      	ldr	r2, [pc, #380]	@ (800c14c <I2C_ITSlaveCplt+0x2c4>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d01d      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a5d      	ldr	r2, [pc, #372]	@ (800c150 <I2C_ITSlaveCplt+0x2c8>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d017      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a5b      	ldr	r2, [pc, #364]	@ (800c154 <I2C_ITSlaveCplt+0x2cc>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d011      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a59      	ldr	r2, [pc, #356]	@ (800c158 <I2C_ITSlaveCplt+0x2d0>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d00b      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a57      	ldr	r2, [pc, #348]	@ (800c15c <I2C_ITSlaveCplt+0x2d4>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d005      	beq.n	800c010 <I2C_ITSlaveCplt+0x188>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a55      	ldr	r2, [pc, #340]	@ (800c160 <I2C_ITSlaveCplt+0x2d8>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d105      	bne.n	800c01c <I2C_ITSlaveCplt+0x194>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	e004      	b.n	800c026 <I2C_ITSlaveCplt+0x19e>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	b29b      	uxth	r3, r3
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800c02a:	e0a2      	b.n	800c172 <I2C_ITSlaveCplt+0x2ea>
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c032:	2b00      	cmp	r3, #0
 800c034:	f000 809d 	beq.w	800c172 <I2C_ITSlaveCplt+0x2ea>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 8090 	beq.w	800c172 <I2C_ITSlaveCplt+0x2ea>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a32      	ldr	r2, [pc, #200]	@ (800c124 <I2C_ITSlaveCplt+0x29c>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d059      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a30      	ldr	r2, [pc, #192]	@ (800c128 <I2C_ITSlaveCplt+0x2a0>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d053      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a2e      	ldr	r2, [pc, #184]	@ (800c12c <I2C_ITSlaveCplt+0x2a4>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d04d      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a2c      	ldr	r2, [pc, #176]	@ (800c130 <I2C_ITSlaveCplt+0x2a8>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d047      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a2a      	ldr	r2, [pc, #168]	@ (800c134 <I2C_ITSlaveCplt+0x2ac>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d041      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a28      	ldr	r2, [pc, #160]	@ (800c138 <I2C_ITSlaveCplt+0x2b0>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d03b      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a26      	ldr	r2, [pc, #152]	@ (800c13c <I2C_ITSlaveCplt+0x2b4>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d035      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a24      	ldr	r2, [pc, #144]	@ (800c140 <I2C_ITSlaveCplt+0x2b8>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d02f      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a22      	ldr	r2, [pc, #136]	@ (800c144 <I2C_ITSlaveCplt+0x2bc>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d029      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a20      	ldr	r2, [pc, #128]	@ (800c148 <I2C_ITSlaveCplt+0x2c0>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d023      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a1e      	ldr	r2, [pc, #120]	@ (800c14c <I2C_ITSlaveCplt+0x2c4>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d01d      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a1c      	ldr	r2, [pc, #112]	@ (800c150 <I2C_ITSlaveCplt+0x2c8>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d017      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a1a      	ldr	r2, [pc, #104]	@ (800c154 <I2C_ITSlaveCplt+0x2cc>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d011      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a18      	ldr	r2, [pc, #96]	@ (800c158 <I2C_ITSlaveCplt+0x2d0>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d00b      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a16      	ldr	r2, [pc, #88]	@ (800c15c <I2C_ITSlaveCplt+0x2d4>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d005      	beq.n	800c112 <I2C_ITSlaveCplt+0x28a>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a14      	ldr	r2, [pc, #80]	@ (800c160 <I2C_ITSlaveCplt+0x2d8>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d128      	bne.n	800c164 <I2C_ITSlaveCplt+0x2dc>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	e027      	b.n	800c16e <I2C_ITSlaveCplt+0x2e6>
 800c11e:	bf00      	nop
 800c120:	fe00e800 	.word	0xfe00e800
 800c124:	40020010 	.word	0x40020010
 800c128:	40020028 	.word	0x40020028
 800c12c:	40020040 	.word	0x40020040
 800c130:	40020058 	.word	0x40020058
 800c134:	40020070 	.word	0x40020070
 800c138:	40020088 	.word	0x40020088
 800c13c:	400200a0 	.word	0x400200a0
 800c140:	400200b8 	.word	0x400200b8
 800c144:	40020410 	.word	0x40020410
 800c148:	40020428 	.word	0x40020428
 800c14c:	40020440 	.word	0x40020440
 800c150:	40020458 	.word	0x40020458
 800c154:	40020470 	.word	0x40020470
 800c158:	40020488 	.word	0x40020488
 800c15c:	400204a0 	.word	0x400204a0
 800c160:	400204b8 	.word	0x400204b8
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f003 0304 	and.w	r3, r3, #4
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d020      	beq.n	800c1be <I2C_ITSlaveCplt+0x336>
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	f023 0304 	bic.w	r3, r3, #4
 800c182:	617b      	str	r3, [r7, #20]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c18e:	b2d2      	uxtb	r2, r2
 800c190:	701a      	strb	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c196:	1c5a      	adds	r2, r3, #1
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00c      	beq.n	800c1be <I2C_ITSlaveCplt+0x336>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d005      	beq.n	800c1d4 <I2C_ITSlaveCplt+0x34c>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1cc:	f043 0204 	orr.w	r2, r3, #4
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	645a      	str	r2, [r3, #68]	@ 0x44
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	f003 0310 	and.w	r3, r3, #16
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d049      	beq.n	800c272 <I2C_ITSlaveCplt+0x3ea>
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	f003 0310 	and.w	r3, r3, #16
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d044      	beq.n	800c272 <I2C_ITSlaveCplt+0x3ea>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d128      	bne.n	800c244 <I2C_ITSlaveCplt+0x3bc>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b28      	cmp	r3, #40	@ 0x28
 800c1fc:	d108      	bne.n	800c210 <I2C_ITSlaveCplt+0x388>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c204:	d104      	bne.n	800c210 <I2C_ITSlaveCplt+0x388>
 800c206:	6979      	ldr	r1, [r7, #20]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f891 	bl	800c330 <I2C_ITListenCplt>
 800c20e:	e030      	b.n	800c272 <I2C_ITSlaveCplt+0x3ea>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b29      	cmp	r3, #41	@ 0x29
 800c21a:	d10e      	bne.n	800c23a <I2C_ITSlaveCplt+0x3b2>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c222:	d00a      	beq.n	800c23a <I2C_ITSlaveCplt+0x3b2>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2210      	movs	r2, #16
 800c22a:	61da      	str	r2, [r3, #28]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f9ea 	bl	800c606 <I2C_Flush_TXDR>
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff fdcc 	bl	800bdd0 <I2C_ITSlaveSeqCplt>
 800c238:	e01b      	b.n	800c272 <I2C_ITSlaveCplt+0x3ea>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2210      	movs	r2, #16
 800c240:	61da      	str	r2, [r3, #28]
 800c242:	e016      	b.n	800c272 <I2C_ITSlaveCplt+0x3ea>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2210      	movs	r2, #16
 800c24a:	61da      	str	r2, [r3, #28]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c250:	f043 0204 	orr.w	r2, r3, #4
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	645a      	str	r2, [r3, #68]	@ 0x44
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <I2C_ITSlaveCplt+0x3de>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c264:	d105      	bne.n	800c272 <I2C_ITSlaveCplt+0x3ea>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f8b3 	bl	800c3d8 <I2C_ITError>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	635a      	str	r2, [r3, #52]	@ 0x34
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c284:	2b00      	cmp	r3, #0
 800c286:	d010      	beq.n	800c2aa <I2C_ITSlaveCplt+0x422>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f8a2 	bl	800c3d8 <I2C_ITError>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b28      	cmp	r3, #40	@ 0x28
 800c29e:	d141      	bne.n	800c324 <I2C_ITSlaveCplt+0x49c>
 800c2a0:	6979      	ldr	r1, [r7, #20]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 f844 	bl	800c330 <I2C_ITListenCplt>
 800c2a8:	e03c      	b.n	800c324 <I2C_ITSlaveCplt+0x49c>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c2b2:	d014      	beq.n	800c2de <I2C_ITSlaveCplt+0x456>
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff fd8b 	bl	800bdd0 <I2C_ITSlaveSeqCplt>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800c32c <I2C_ITSlaveCplt+0x4a4>)
 800c2be:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2220      	movs	r2, #32
 800c2c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff fbdf 	bl	800ba9a <HAL_I2C_ListenCpltCallback>
 800c2dc:	e022      	b.n	800c324 <I2C_ITSlaveCplt+0x49c>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b22      	cmp	r3, #34	@ 0x22
 800c2e8:	d10e      	bne.n	800c308 <I2C_ITSlaveCplt+0x480>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2220      	movs	r2, #32
 800c2ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	631a      	str	r2, [r3, #48]	@ 0x30
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7ff fbb2 	bl	800ba6a <HAL_I2C_SlaveRxCpltCallback>
 800c306:	e00d      	b.n	800c324 <I2C_ITSlaveCplt+0x49c>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2220      	movs	r2, #32
 800c30c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	631a      	str	r2, [r3, #48]	@ 0x30
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff fb99 	bl	800ba56 <HAL_I2C_SlaveTxCpltCallback>
 800c324:	bf00      	nop
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	ffff0000 	.word	0xffff0000

0800c330 <I2C_ITListenCplt>:
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a25      	ldr	r2, [pc, #148]	@ (800c3d4 <I2C_ITListenCplt+0xa4>)
 800c33e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	631a      	str	r2, [r3, #48]	@ 0x30
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2220      	movs	r2, #32
 800c34a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	635a      	str	r2, [r3, #52]	@ 0x34
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	f003 0304 	and.w	r3, r3, #4
 800c362:	2b00      	cmp	r3, #0
 800c364:	d022      	beq.n	800c3ac <I2C_ITListenCplt+0x7c>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c370:	b2d2      	uxtb	r2, r2
 800c372:	701a      	strb	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c378:	1c5a      	adds	r2, r3, #1
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c382:	2b00      	cmp	r3, #0
 800c384:	d012      	beq.n	800c3ac <I2C_ITListenCplt+0x7c>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c38a:	3b01      	subs	r3, #1
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c396:	b29b      	uxth	r3, r3
 800c398:	3b01      	subs	r3, #1
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3a4:	f043 0204 	orr.w	r2, r3, #4
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	645a      	str	r2, [r3, #68]	@ 0x44
 800c3ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fbeb 	bl	800cb8c <I2C_Disable_IRQ>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2210      	movs	r2, #16
 800c3bc:	61da      	str	r2, [r3, #28]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7ff fb67 	bl	800ba9a <HAL_I2C_ListenCpltCallback>
 800c3cc:	bf00      	nop
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	ffff0000 	.word	0xffff0000

0800c3d8 <I2C_ITError>:
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3e8:	73fb      	strb	r3, [r7, #15]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a6d      	ldr	r2, [pc, #436]	@ (800c5ac <I2C_ITError+0x1d4>)
 800c3f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	431a      	orrs	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	645a      	str	r2, [r3, #68]	@ 0x44
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	2b28      	cmp	r3, #40	@ 0x28
 800c40e:	d005      	beq.n	800c41c <I2C_ITError+0x44>
 800c410:	7bfb      	ldrb	r3, [r7, #15]
 800c412:	2b29      	cmp	r3, #41	@ 0x29
 800c414:	d002      	beq.n	800c41c <I2C_ITError+0x44>
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	2b2a      	cmp	r3, #42	@ 0x2a
 800c41a:	d10b      	bne.n	800c434 <I2C_ITError+0x5c>
 800c41c:	2103      	movs	r1, #3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fbb4 	bl	800cb8c <I2C_Disable_IRQ>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2228      	movs	r2, #40	@ 0x28
 800c428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a60      	ldr	r2, [pc, #384]	@ (800c5b0 <I2C_ITError+0x1d8>)
 800c430:	635a      	str	r2, [r3, #52]	@ 0x34
 800c432:	e030      	b.n	800c496 <I2C_ITError+0xbe>
 800c434:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fba7 	bl	800cb8c <I2C_Disable_IRQ>
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 f8e1 	bl	800c606 <I2C_Flush_TXDR>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b60      	cmp	r3, #96	@ 0x60
 800c44e:	d01f      	beq.n	800c490 <I2C_ITError+0xb8>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2220      	movs	r2, #32
 800c454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	f003 0320 	and.w	r3, r3, #32
 800c462:	2b20      	cmp	r3, #32
 800c464:	d114      	bne.n	800c490 <I2C_ITError+0xb8>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	699b      	ldr	r3, [r3, #24]
 800c46c:	f003 0310 	and.w	r3, r3, #16
 800c470:	2b10      	cmp	r3, #16
 800c472:	d109      	bne.n	800c488 <I2C_ITError+0xb0>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2210      	movs	r2, #16
 800c47a:	61da      	str	r2, [r3, #28]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c480:	f043 0204 	orr.w	r2, r3, #4
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	645a      	str	r2, [r3, #68]	@ 0x44
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2220      	movs	r2, #32
 800c48e:	61da      	str	r2, [r3, #28]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	635a      	str	r2, [r3, #52]	@ 0x34
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c49a:	60bb      	str	r3, [r7, #8]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d039      	beq.n	800c518 <I2C_ITError+0x140>
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	2b11      	cmp	r3, #17
 800c4a8:	d002      	beq.n	800c4b0 <I2C_ITError+0xd8>
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b21      	cmp	r3, #33	@ 0x21
 800c4ae:	d133      	bne.n	800c518 <I2C_ITError+0x140>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4be:	d107      	bne.n	800c4d0 <I2C_ITError+0xf8>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fe fd9d 	bl	800b014 <HAL_DMA_GetState>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d017      	beq.n	800c510 <I2C_ITError+0x138>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e4:	4a33      	ldr	r2, [pc, #204]	@ (800c5b4 <I2C_ITError+0x1dc>)
 800c4e6:	651a      	str	r2, [r3, #80]	@ 0x50
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fe fb47 	bl	800ab88 <HAL_DMA_Abort_IT>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d04d      	beq.n	800c59c <I2C_ITError+0x1c4>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c50a:	4610      	mov	r0, r2
 800c50c:	4798      	blx	r3
 800c50e:	e045      	b.n	800c59c <I2C_ITError+0x1c4>
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f851 	bl	800c5b8 <I2C_TreatErrorCallback>
 800c516:	e041      	b.n	800c59c <I2C_ITError+0x1c4>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d039      	beq.n	800c594 <I2C_ITError+0x1bc>
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	2b12      	cmp	r3, #18
 800c524:	d002      	beq.n	800c52c <I2C_ITError+0x154>
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2b22      	cmp	r3, #34	@ 0x22
 800c52a:	d133      	bne.n	800c594 <I2C_ITError+0x1bc>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c53a:	d107      	bne.n	800c54c <I2C_ITError+0x174>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c550:	4618      	mov	r0, r3
 800c552:	f7fe fd5f 	bl	800b014 <HAL_DMA_GetState>
 800c556:	4603      	mov	r3, r0
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d017      	beq.n	800c58c <I2C_ITError+0x1b4>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c560:	4a14      	ldr	r2, [pc, #80]	@ (800c5b4 <I2C_ITError+0x1dc>)
 800c562:	651a      	str	r2, [r3, #80]	@ 0x50
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c570:	4618      	mov	r0, r3
 800c572:	f7fe fb09 	bl	800ab88 <HAL_DMA_Abort_IT>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d011      	beq.n	800c5a0 <I2C_ITError+0x1c8>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c586:	4610      	mov	r0, r2
 800c588:	4798      	blx	r3
 800c58a:	e009      	b.n	800c5a0 <I2C_ITError+0x1c8>
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f813 	bl	800c5b8 <I2C_TreatErrorCallback>
 800c592:	e005      	b.n	800c5a0 <I2C_ITError+0x1c8>
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f80f 	bl	800c5b8 <I2C_TreatErrorCallback>
 800c59a:	e002      	b.n	800c5a2 <I2C_ITError+0x1ca>
 800c59c:	bf00      	nop
 800c59e:	e000      	b.n	800c5a2 <I2C_ITError+0x1ca>
 800c5a0:	bf00      	nop
 800c5a2:	bf00      	nop
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	ffff0000 	.word	0xffff0000
 800c5b0:	0800bad7 	.word	0x0800bad7
 800c5b4:	0800c64f 	.word	0x0800c64f

0800c5b8 <I2C_TreatErrorCallback>:
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b60      	cmp	r3, #96	@ 0x60
 800c5ca:	d10e      	bne.n	800c5ea <I2C_TreatErrorCallback+0x32>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7ff fa6d 	bl	800bac2 <HAL_I2C_AbortCpltCallback>
 800c5e8:	e009      	b.n	800c5fe <I2C_TreatErrorCallback+0x46>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7ff fa58 	bl	800baae <HAL_I2C_ErrorCallback>
 800c5fe:	bf00      	nop
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <I2C_Flush_TXDR>:
 800c606:	b480      	push	{r7}
 800c608:	b083      	sub	sp, #12
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	699b      	ldr	r3, [r3, #24]
 800c614:	f003 0302 	and.w	r3, r3, #2
 800c618:	2b02      	cmp	r3, #2
 800c61a:	d103      	bne.n	800c624 <I2C_Flush_TXDR+0x1e>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2200      	movs	r2, #0
 800c622:	629a      	str	r2, [r3, #40]	@ 0x28
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	f003 0301 	and.w	r3, r3, #1
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d007      	beq.n	800c642 <I2C_Flush_TXDR+0x3c>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	699a      	ldr	r2, [r3, #24]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f042 0201 	orr.w	r2, r2, #1
 800c640:	619a      	str	r2, [r3, #24]
 800c642:	bf00      	nop
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <I2C_DMAAbort>:
 800c64e:	b580      	push	{r7, lr}
 800c650:	b084      	sub	sp, #16
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c65a:	60fb      	str	r3, [r7, #12]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c660:	2b00      	cmp	r3, #0
 800c662:	d003      	beq.n	800c66c <I2C_DMAAbort+0x1e>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c668:	2200      	movs	r2, #0
 800c66a:	651a      	str	r2, [r3, #80]	@ 0x50
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c670:	2b00      	cmp	r3, #0
 800c672:	d003      	beq.n	800c67c <I2C_DMAAbort+0x2e>
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c678:	2200      	movs	r2, #0
 800c67a:	651a      	str	r2, [r3, #80]	@ 0x50
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f7ff ff9b 	bl	800c5b8 <I2C_TreatErrorCallback>
 800c682:	bf00      	nop
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <I2C_WaitOnFlagUntilTimeout>:
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b084      	sub	sp, #16
 800c68e:	af00      	add	r7, sp, #0
 800c690:	60f8      	str	r0, [r7, #12]
 800c692:	60b9      	str	r1, [r7, #8]
 800c694:	603b      	str	r3, [r7, #0]
 800c696:	4613      	mov	r3, r2
 800c698:	71fb      	strb	r3, [r7, #7]
 800c69a:	e03b      	b.n	800c714 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800c69c:	69ba      	ldr	r2, [r7, #24]
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f000 f961 	bl	800c968 <I2C_IsErrorOccurred>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <I2C_WaitOnFlagUntilTimeout+0x26>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e041      	b.n	800c734 <I2C_WaitOnFlagUntilTimeout+0xaa>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b6:	d02d      	beq.n	800c714 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800c6b8:	f7fc fa1c 	bl	8008af4 <HAL_GetTick>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d302      	bcc.n	800c6ce <I2C_WaitOnFlagUntilTimeout+0x44>
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d122      	bne.n	800c714 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	699a      	ldr	r2, [r3, #24]
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	bf0c      	ite	eq
 800c6de:	2301      	moveq	r3, #1
 800c6e0:	2300      	movne	r3, #0
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	79fb      	ldrb	r3, [r7, #7]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d113      	bne.n	800c714 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6f0:	f043 0220 	orr.w	r2, r3, #32
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	645a      	str	r2, [r3, #68]	@ 0x44
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2220      	movs	r2, #32
 800c6fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c710:	2301      	movs	r3, #1
 800c712:	e00f      	b.n	800c734 <I2C_WaitOnFlagUntilTimeout+0xaa>
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	699a      	ldr	r2, [r3, #24]
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	4013      	ands	r3, r2
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	429a      	cmp	r2, r3
 800c722:	bf0c      	ite	eq
 800c724:	2301      	moveq	r3, #1
 800c726:	2300      	movne	r3, #0
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	461a      	mov	r2, r3
 800c72c:	79fb      	ldrb	r3, [r7, #7]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d0b4      	beq.n	800c69c <I2C_WaitOnFlagUntilTimeout+0x12>
 800c732:	2300      	movs	r3, #0
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <I2C_WaitOnTXISFlagUntilTimeout>:
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
 800c748:	e033      	b.n	800c7b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f000 f90a 	bl	800c968 <I2C_IsErrorOccurred>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d001      	beq.n	800c75e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 800c75a:	2301      	movs	r3, #1
 800c75c:	e031      	b.n	800c7c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c764:	d025      	beq.n	800c7b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800c766:	f7fc f9c5 	bl	8008af4 <HAL_GetTick>
 800c76a:	4602      	mov	r2, r0
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	429a      	cmp	r2, r3
 800c774:	d302      	bcc.n	800c77c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d11a      	bne.n	800c7b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	699b      	ldr	r3, [r3, #24]
 800c782:	f003 0302 	and.w	r3, r3, #2
 800c786:	2b02      	cmp	r3, #2
 800c788:	d013      	beq.n	800c7b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c78e:	f043 0220 	orr.w	r2, r3, #32
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	645a      	str	r2, [r3, #68]	@ 0x44
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2220      	movs	r2, #32
 800c79a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e007      	b.n	800c7c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	f003 0302 	and.w	r3, r3, #2
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d1c4      	bne.n	800c74a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <I2C_WaitOnSTOPFlagUntilTimeout>:
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b084      	sub	sp, #16
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	60f8      	str	r0, [r7, #12]
 800c7d2:	60b9      	str	r1, [r7, #8]
 800c7d4:	607a      	str	r2, [r7, #4]
 800c7d6:	e02f      	b.n	800c838 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	68b9      	ldr	r1, [r7, #8]
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 f8c3 	bl	800c968 <I2C_IsErrorOccurred>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e02d      	b.n	800c848 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 800c7ec:	f7fc f982 	bl	8008af4 <HAL_GetTick>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	1ad3      	subs	r3, r2, r3
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d302      	bcc.n	800c802 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d11a      	bne.n	800c838 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	f003 0320 	and.w	r3, r3, #32
 800c80c:	2b20      	cmp	r3, #32
 800c80e:	d013      	beq.n	800c838 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c814:	f043 0220 	orr.w	r2, r3, #32
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	645a      	str	r2, [r3, #68]	@ 0x44
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2220      	movs	r2, #32
 800c820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c834:	2301      	movs	r3, #1
 800c836:	e007      	b.n	800c848 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	f003 0320 	and.w	r3, r3, #32
 800c842:	2b20      	cmp	r3, #32
 800c844:	d1c8      	bne.n	800c7d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 800c846:	2300      	movs	r3, #0
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <I2C_WaitOnRXNEFlagUntilTimeout>:
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	2300      	movs	r3, #0
 800c85e:	75fb      	strb	r3, [r7, #23]
 800c860:	e071      	b.n	800c946 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	68b9      	ldr	r1, [r7, #8]
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f000 f87e 	bl	800c968 <I2C_IsErrorOccurred>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
 800c872:	2301      	movs	r3, #1
 800c874:	75fb      	strb	r3, [r7, #23]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	699b      	ldr	r3, [r3, #24]
 800c87c:	f003 0320 	and.w	r3, r3, #32
 800c880:	2b20      	cmp	r3, #32
 800c882:	d13b      	bne.n	800c8fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c884:	7dfb      	ldrb	r3, [r7, #23]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d138      	bne.n	800c8fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	f003 0304 	and.w	r3, r3, #4
 800c894:	2b04      	cmp	r3, #4
 800c896:	d105      	bne.n	800c8a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d001      	beq.n	800c8a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	75fb      	strb	r3, [r7, #23]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	f003 0310 	and.w	r3, r3, #16
 800c8ae:	2b10      	cmp	r3, #16
 800c8b0:	d121      	bne.n	800c8f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2210      	movs	r2, #16
 800c8b8:	61da      	str	r2, [r3, #28]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2204      	movs	r2, #4
 800c8be:	645a      	str	r2, [r3, #68]	@ 0x44
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2220      	movs	r2, #32
 800c8c6:	61da      	str	r2, [r3, #28]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	6859      	ldr	r1, [r3, #4]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	4b24      	ldr	r3, [pc, #144]	@ (800c964 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800c8d4:	400b      	ands	r3, r1
 800c8d6:	6053      	str	r3, [r2, #4]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2220      	movs	r2, #32
 800c8dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	75fb      	strb	r3, [r7, #23]
 800c8f4:	e002      	b.n	800c8fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	645a      	str	r2, [r3, #68]	@ 0x44
 800c8fc:	f7fc f8fa 	bl	8008af4 <HAL_GetTick>
 800c900:	4602      	mov	r2, r0
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d302      	bcc.n	800c912 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d119      	bne.n	800c946 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d116      	bne.n	800c946 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	699b      	ldr	r3, [r3, #24]
 800c91e:	f003 0304 	and.w	r3, r3, #4
 800c922:	2b04      	cmp	r3, #4
 800c924:	d00f      	beq.n	800c946 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c92a:	f043 0220 	orr.w	r2, r3, #32
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	645a      	str	r2, [r3, #68]	@ 0x44
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2220      	movs	r2, #32
 800c936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c942:	2301      	movs	r3, #1
 800c944:	75fb      	strb	r3, [r7, #23]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	699b      	ldr	r3, [r3, #24]
 800c94c:	f003 0304 	and.w	r3, r3, #4
 800c950:	2b04      	cmp	r3, #4
 800c952:	d002      	beq.n	800c95a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800c954:	7dfb      	ldrb	r3, [r7, #23]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d083      	beq.n	800c862 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
 800c95c:	4618      	mov	r0, r3
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	fe00e800 	.word	0xfe00e800

0800c968 <I2C_IsErrorOccurred>:
 800c968:	b580      	push	{r7, lr}
 800c96a:	b08a      	sub	sp, #40	@ 0x28
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	2300      	movs	r3, #0
 800c976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	61bb      	str	r3, [r7, #24]
 800c982:	2300      	movs	r3, #0
 800c984:	623b      	str	r3, [r7, #32]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	61fb      	str	r3, [r7, #28]
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	f003 0310 	and.w	r3, r3, #16
 800c990:	2b00      	cmp	r3, #0
 800c992:	d068      	beq.n	800ca66 <I2C_IsErrorOccurred+0xfe>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2210      	movs	r2, #16
 800c99a:	61da      	str	r2, [r3, #28]
 800c99c:	e049      	b.n	800ca32 <I2C_IsErrorOccurred+0xca>
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a4:	d045      	beq.n	800ca32 <I2C_IsErrorOccurred+0xca>
 800c9a6:	f7fc f8a5 	bl	8008af4 <HAL_GetTick>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d302      	bcc.n	800c9bc <I2C_IsErrorOccurred+0x54>
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d13a      	bne.n	800ca32 <I2C_IsErrorOccurred+0xca>
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9c6:	617b      	str	r3, [r7, #20]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c9ce:	74fb      	strb	r3, [r7, #19]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9de:	d121      	bne.n	800ca24 <I2C_IsErrorOccurred+0xbc>
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c9e6:	d01d      	beq.n	800ca24 <I2C_IsErrorOccurred+0xbc>
 800c9e8:	7cfb      	ldrb	r3, [r7, #19]
 800c9ea:	2b20      	cmp	r3, #32
 800c9ec:	d01a      	beq.n	800ca24 <I2C_IsErrorOccurred+0xbc>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c9fc:	605a      	str	r2, [r3, #4]
 800c9fe:	f7fc f879 	bl	8008af4 <HAL_GetTick>
 800ca02:	61f8      	str	r0, [r7, #28]
 800ca04:	e00e      	b.n	800ca24 <I2C_IsErrorOccurred+0xbc>
 800ca06:	f7fc f875 	bl	8008af4 <HAL_GetTick>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	2b19      	cmp	r3, #25
 800ca12:	d907      	bls.n	800ca24 <I2C_IsErrorOccurred+0xbc>
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	f043 0320 	orr.w	r3, r3, #32
 800ca1a:	623b      	str	r3, [r7, #32]
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca22:	e006      	b.n	800ca32 <I2C_IsErrorOccurred+0xca>
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	f003 0320 	and.w	r3, r3, #32
 800ca2e:	2b20      	cmp	r3, #32
 800ca30:	d1e9      	bne.n	800ca06 <I2C_IsErrorOccurred+0x9e>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	f003 0320 	and.w	r3, r3, #32
 800ca3c:	2b20      	cmp	r3, #32
 800ca3e:	d003      	beq.n	800ca48 <I2C_IsErrorOccurred+0xe0>
 800ca40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d0aa      	beq.n	800c99e <I2C_IsErrorOccurred+0x36>
 800ca48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d103      	bne.n	800ca58 <I2C_IsErrorOccurred+0xf0>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2220      	movs	r2, #32
 800ca56:	61da      	str	r2, [r3, #28]
 800ca58:	6a3b      	ldr	r3, [r7, #32]
 800ca5a:	f043 0304 	orr.w	r3, r3, #4
 800ca5e:	623b      	str	r3, [r7, #32]
 800ca60:	2301      	movs	r3, #1
 800ca62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	61bb      	str	r3, [r7, #24]
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d00b      	beq.n	800ca90 <I2C_IsErrorOccurred+0x128>
 800ca78:	6a3b      	ldr	r3, [r7, #32]
 800ca7a:	f043 0301 	orr.w	r3, r3, #1
 800ca7e:	623b      	str	r3, [r7, #32]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca88:	61da      	str	r2, [r3, #28]
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00b      	beq.n	800cab2 <I2C_IsErrorOccurred+0x14a>
 800ca9a:	6a3b      	ldr	r3, [r7, #32]
 800ca9c:	f043 0308 	orr.w	r3, r3, #8
 800caa0:	623b      	str	r3, [r7, #32]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800caaa:	61da      	str	r2, [r3, #28]
 800caac:	2301      	movs	r3, #1
 800caae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00b      	beq.n	800cad4 <I2C_IsErrorOccurred+0x16c>
 800cabc:	6a3b      	ldr	r3, [r7, #32]
 800cabe:	f043 0302 	orr.w	r3, r3, #2
 800cac2:	623b      	str	r3, [r7, #32]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cacc:	61da      	str	r2, [r3, #28]
 800cace:	2301      	movs	r3, #1
 800cad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d01c      	beq.n	800cb16 <I2C_IsErrorOccurred+0x1ae>
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f7ff fd92 	bl	800c606 <I2C_Flush_TXDR>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6859      	ldr	r1, [r3, #4]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	4b0d      	ldr	r3, [pc, #52]	@ (800cb24 <I2C_IsErrorOccurred+0x1bc>)
 800caee:	400b      	ands	r3, r1
 800caf0:	6053      	str	r3, [r2, #4]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	431a      	orrs	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	645a      	str	r2, [r3, #68]	@ 0x44
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2220      	movs	r2, #32
 800cb02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cb16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3728      	adds	r7, #40	@ 0x28
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	fe00e800 	.word	0xfe00e800

0800cb28 <I2C_TransferConfig>:
 800cb28:	b480      	push	{r7}
 800cb2a:	b087      	sub	sp, #28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	607b      	str	r3, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	817b      	strh	r3, [r7, #10]
 800cb36:	4613      	mov	r3, r2
 800cb38:	727b      	strb	r3, [r7, #9]
 800cb3a:	897b      	ldrh	r3, [r7, #10]
 800cb3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800cb40:	7a7b      	ldrb	r3, [r7, #9]
 800cb42:	041b      	lsls	r3, r3, #16
 800cb44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cb48:	431a      	orrs	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	431a      	orrs	r2, r3
 800cb4e:	6a3b      	ldr	r3, [r7, #32]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb56:	617b      	str	r3, [r7, #20]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	685a      	ldr	r2, [r3, #4]
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	0d5b      	lsrs	r3, r3, #21
 800cb62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800cb66:	4b08      	ldr	r3, [pc, #32]	@ (800cb88 <I2C_TransferConfig+0x60>)
 800cb68:	430b      	orrs	r3, r1
 800cb6a:	43db      	mvns	r3, r3
 800cb6c:	ea02 0103 	and.w	r1, r2, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	697a      	ldr	r2, [r7, #20]
 800cb76:	430a      	orrs	r2, r1
 800cb78:	605a      	str	r2, [r3, #4]
 800cb7a:	bf00      	nop
 800cb7c:	371c      	adds	r7, #28
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	03ff63ff 	.word	0x03ff63ff

0800cb8c <I2C_Disable_IRQ>:
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	460b      	mov	r3, r1
 800cb96:	807b      	strh	r3, [r7, #2]
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	887b      	ldrh	r3, [r7, #2]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00f      	beq.n	800cbc6 <I2C_Disable_IRQ+0x3a>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800cbac:	60fb      	str	r3, [r7, #12]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cbba:	2b28      	cmp	r3, #40	@ 0x28
 800cbbc:	d003      	beq.n	800cbc6 <I2C_Disable_IRQ+0x3a>
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800cbc4:	60fb      	str	r3, [r7, #12]
 800cbc6:	887b      	ldrh	r3, [r7, #2]
 800cbc8:	f003 0302 	and.w	r3, r3, #2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00f      	beq.n	800cbf0 <I2C_Disable_IRQ+0x64>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cbe4:	2b28      	cmp	r3, #40	@ 0x28
 800cbe6:	d003      	beq.n	800cbf0 <I2C_Disable_IRQ+0x64>
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800cbee:	60fb      	str	r3, [r7, #12]
 800cbf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	da03      	bge.n	800cc00 <I2C_Disable_IRQ+0x74>
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	887b      	ldrh	r3, [r7, #2]
 800cc02:	2b10      	cmp	r3, #16
 800cc04:	d103      	bne.n	800cc0e <I2C_Disable_IRQ+0x82>
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	887b      	ldrh	r3, [r7, #2]
 800cc10:	2b20      	cmp	r3, #32
 800cc12:	d103      	bne.n	800cc1c <I2C_Disable_IRQ+0x90>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f043 0320 	orr.w	r3, r3, #32
 800cc1a:	60fb      	str	r3, [r7, #12]
 800cc1c:	887b      	ldrh	r3, [r7, #2]
 800cc1e:	2b40      	cmp	r3, #64	@ 0x40
 800cc20:	d103      	bne.n	800cc2a <I2C_Disable_IRQ+0x9e>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6819      	ldr	r1, [r3, #0]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	43da      	mvns	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	400a      	ands	r2, r1
 800cc3a:	601a      	str	r2, [r3, #0]
 800cc3c:	bf00      	nop
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <HAL_I2CEx_ConfigAnalogFilter>:
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b20      	cmp	r3, #32
 800cc5c:	d138      	bne.n	800ccd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d101      	bne.n	800cc6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cc68:	2302      	movs	r3, #2
 800cc6a:	e032      	b.n	800ccd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2224      	movs	r2, #36	@ 0x24
 800cc78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f022 0201 	bic.w	r2, r2, #1
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cc9a:	601a      	str	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6819      	ldr	r1, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	683a      	ldr	r2, [r7, #0]
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f042 0201 	orr.w	r2, r2, #1
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2220      	movs	r2, #32
 800ccc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cccc:	2300      	movs	r3, #0
 800ccce:	e000      	b.n	800ccd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <HAL_I2CEx_ConfigDigitalFilter>:
 800ccde:	b480      	push	{r7}
 800cce0:	b085      	sub	sp, #20
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b20      	cmp	r3, #32
 800ccf2:	d139      	bne.n	800cd68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d101      	bne.n	800cd02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ccfe:	2302      	movs	r3, #2
 800cd00:	e033      	b.n	800cd6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2224      	movs	r2, #36	@ 0x24
 800cd0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f022 0201 	bic.w	r2, r2, #1
 800cd20:	601a      	str	r2, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	60fb      	str	r3, [r7, #12]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	021b      	lsls	r3, r3, #8
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f042 0201 	orr.w	r2, r2, #1
 800cd52:	601a      	str	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2220      	movs	r2, #32
 800cd58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cd64:	2300      	movs	r3, #0
 800cd66:	e000      	b.n	800cd6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cd68:	2302      	movs	r3, #2
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
	...

0800cd78 <HAL_PWREx_ConfigSupply>:
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	4b19      	ldr	r3, [pc, #100]	@ (800cde8 <HAL_PWREx_ConfigSupply+0x70>)
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	f003 0304 	and.w	r3, r3, #4
 800cd88:	2b04      	cmp	r3, #4
 800cd8a:	d00a      	beq.n	800cda2 <HAL_PWREx_ConfigSupply+0x2a>
 800cd8c:	4b16      	ldr	r3, [pc, #88]	@ (800cde8 <HAL_PWREx_ConfigSupply+0x70>)
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	f003 0307 	and.w	r3, r3, #7
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d001      	beq.n	800cd9e <HAL_PWREx_ConfigSupply+0x26>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e01f      	b.n	800cdde <HAL_PWREx_ConfigSupply+0x66>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	e01d      	b.n	800cdde <HAL_PWREx_ConfigSupply+0x66>
 800cda2:	4b11      	ldr	r3, [pc, #68]	@ (800cde8 <HAL_PWREx_ConfigSupply+0x70>)
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	f023 0207 	bic.w	r2, r3, #7
 800cdaa:	490f      	ldr	r1, [pc, #60]	@ (800cde8 <HAL_PWREx_ConfigSupply+0x70>)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	60cb      	str	r3, [r1, #12]
 800cdb2:	f7fb fe9f 	bl	8008af4 <HAL_GetTick>
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	e009      	b.n	800cdce <HAL_PWREx_ConfigSupply+0x56>
 800cdba:	f7fb fe9b 	bl	8008af4 <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cdc8:	d901      	bls.n	800cdce <HAL_PWREx_ConfigSupply+0x56>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e007      	b.n	800cdde <HAL_PWREx_ConfigSupply+0x66>
 800cdce:	4b06      	ldr	r3, [pc, #24]	@ (800cde8 <HAL_PWREx_ConfigSupply+0x70>)
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cdd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cdda:	d1ee      	bne.n	800cdba <HAL_PWREx_ConfigSupply+0x42>
 800cddc:	2300      	movs	r3, #0
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	58024800 	.word	0x58024800

0800cdec <HAL_RCC_OscConfig>:
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b08c      	sub	sp, #48	@ 0x30
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d101      	bne.n	800cdfe <HAL_RCC_OscConfig+0x12>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e3c8      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 0301 	and.w	r3, r3, #1
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f000 8087 	beq.w	800cf1a <HAL_RCC_OscConfig+0x12e>
 800ce0c:	4b88      	ldr	r3, [pc, #544]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce16:	4b86      	ldr	r3, [pc, #536]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce1e:	2b10      	cmp	r3, #16
 800ce20:	d007      	beq.n	800ce32 <HAL_RCC_OscConfig+0x46>
 800ce22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce24:	2b18      	cmp	r3, #24
 800ce26:	d110      	bne.n	800ce4a <HAL_RCC_OscConfig+0x5e>
 800ce28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2a:	f003 0303 	and.w	r3, r3, #3
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d10b      	bne.n	800ce4a <HAL_RCC_OscConfig+0x5e>
 800ce32:	4b7f      	ldr	r3, [pc, #508]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d06c      	beq.n	800cf18 <HAL_RCC_OscConfig+0x12c>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d168      	bne.n	800cf18 <HAL_RCC_OscConfig+0x12c>
 800ce46:	2301      	movs	r3, #1
 800ce48:	e3a2      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce52:	d106      	bne.n	800ce62 <HAL_RCC_OscConfig+0x76>
 800ce54:	4b76      	ldr	r3, [pc, #472]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a75      	ldr	r2, [pc, #468]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	e02e      	b.n	800cec0 <HAL_RCC_OscConfig+0xd4>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10c      	bne.n	800ce84 <HAL_RCC_OscConfig+0x98>
 800ce6a:	4b71      	ldr	r3, [pc, #452]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a70      	ldr	r2, [pc, #448]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce74:	6013      	str	r3, [r2, #0]
 800ce76:	4b6e      	ldr	r3, [pc, #440]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a6d      	ldr	r2, [pc, #436]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ce80:	6013      	str	r3, [r2, #0]
 800ce82:	e01d      	b.n	800cec0 <HAL_RCC_OscConfig+0xd4>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce8c:	d10c      	bne.n	800cea8 <HAL_RCC_OscConfig+0xbc>
 800ce8e:	4b68      	ldr	r3, [pc, #416]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a67      	ldr	r2, [pc, #412]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ce98:	6013      	str	r3, [r2, #0]
 800ce9a:	4b65      	ldr	r3, [pc, #404]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a64      	ldr	r2, [pc, #400]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cea4:	6013      	str	r3, [r2, #0]
 800cea6:	e00b      	b.n	800cec0 <HAL_RCC_OscConfig+0xd4>
 800cea8:	4b61      	ldr	r3, [pc, #388]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a60      	ldr	r2, [pc, #384]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ceae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ceb2:	6013      	str	r3, [r2, #0]
 800ceb4:	4b5e      	ldr	r3, [pc, #376]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a5d      	ldr	r2, [pc, #372]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800ceba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cebe:	6013      	str	r3, [r2, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d013      	beq.n	800cef0 <HAL_RCC_OscConfig+0x104>
 800cec8:	f7fb fe14 	bl	8008af4 <HAL_GetTick>
 800cecc:	6278      	str	r0, [r7, #36]	@ 0x24
 800cece:	e008      	b.n	800cee2 <HAL_RCC_OscConfig+0xf6>
 800ced0:	f7fb fe10 	bl	8008af4 <HAL_GetTick>
 800ced4:	4602      	mov	r2, r0
 800ced6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced8:	1ad3      	subs	r3, r2, r3
 800ceda:	2b64      	cmp	r3, #100	@ 0x64
 800cedc:	d901      	bls.n	800cee2 <HAL_RCC_OscConfig+0xf6>
 800cede:	2303      	movs	r3, #3
 800cee0:	e356      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800cee2:	4b53      	ldr	r3, [pc, #332]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d0f0      	beq.n	800ced0 <HAL_RCC_OscConfig+0xe4>
 800ceee:	e014      	b.n	800cf1a <HAL_RCC_OscConfig+0x12e>
 800cef0:	f7fb fe00 	bl	8008af4 <HAL_GetTick>
 800cef4:	6278      	str	r0, [r7, #36]	@ 0x24
 800cef6:	e008      	b.n	800cf0a <HAL_RCC_OscConfig+0x11e>
 800cef8:	f7fb fdfc 	bl	8008af4 <HAL_GetTick>
 800cefc:	4602      	mov	r2, r0
 800cefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	2b64      	cmp	r3, #100	@ 0x64
 800cf04:	d901      	bls.n	800cf0a <HAL_RCC_OscConfig+0x11e>
 800cf06:	2303      	movs	r3, #3
 800cf08:	e342      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800cf0a:	4b49      	ldr	r3, [pc, #292]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1f0      	bne.n	800cef8 <HAL_RCC_OscConfig+0x10c>
 800cf16:	e000      	b.n	800cf1a <HAL_RCC_OscConfig+0x12e>
 800cf18:	bf00      	nop
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0302 	and.w	r3, r3, #2
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f000 808c 	beq.w	800d040 <HAL_RCC_OscConfig+0x254>
 800cf28:	4b41      	ldr	r3, [pc, #260]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf30:	623b      	str	r3, [r7, #32]
 800cf32:	4b3f      	ldr	r3, [pc, #252]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cf34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf36:	61fb      	str	r3, [r7, #28]
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d007      	beq.n	800cf4e <HAL_RCC_OscConfig+0x162>
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	2b18      	cmp	r3, #24
 800cf42:	d137      	bne.n	800cfb4 <HAL_RCC_OscConfig+0x1c8>
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	f003 0303 	and.w	r3, r3, #3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d132      	bne.n	800cfb4 <HAL_RCC_OscConfig+0x1c8>
 800cf4e:	4b38      	ldr	r3, [pc, #224]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 0304 	and.w	r3, r3, #4
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d005      	beq.n	800cf66 <HAL_RCC_OscConfig+0x17a>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <HAL_RCC_OscConfig+0x17a>
 800cf62:	2301      	movs	r3, #1
 800cf64:	e314      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800cf66:	4b32      	ldr	r3, [pc, #200]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f023 0219 	bic.w	r2, r3, #25
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	492f      	ldr	r1, [pc, #188]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cf74:	4313      	orrs	r3, r2
 800cf76:	600b      	str	r3, [r1, #0]
 800cf78:	f7fb fdbc 	bl	8008af4 <HAL_GetTick>
 800cf7c:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf7e:	e008      	b.n	800cf92 <HAL_RCC_OscConfig+0x1a6>
 800cf80:	f7fb fdb8 	bl	8008af4 <HAL_GetTick>
 800cf84:	4602      	mov	r2, r0
 800cf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d901      	bls.n	800cf92 <HAL_RCC_OscConfig+0x1a6>
 800cf8e:	2303      	movs	r3, #3
 800cf90:	e2fe      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800cf92:	4b27      	ldr	r3, [pc, #156]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 0304 	and.w	r3, r3, #4
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d0f0      	beq.n	800cf80 <HAL_RCC_OscConfig+0x194>
 800cf9e:	4b24      	ldr	r3, [pc, #144]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	691b      	ldr	r3, [r3, #16]
 800cfaa:	061b      	lsls	r3, r3, #24
 800cfac:	4920      	ldr	r1, [pc, #128]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	604b      	str	r3, [r1, #4]
 800cfb2:	e045      	b.n	800d040 <HAL_RCC_OscConfig+0x254>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d026      	beq.n	800d00a <HAL_RCC_OscConfig+0x21e>
 800cfbc:	4b1c      	ldr	r3, [pc, #112]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f023 0219 	bic.w	r2, r3, #25
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	4919      	ldr	r1, [pc, #100]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	600b      	str	r3, [r1, #0]
 800cfce:	f7fb fd91 	bl	8008af4 <HAL_GetTick>
 800cfd2:	6278      	str	r0, [r7, #36]	@ 0x24
 800cfd4:	e008      	b.n	800cfe8 <HAL_RCC_OscConfig+0x1fc>
 800cfd6:	f7fb fd8d 	bl	8008af4 <HAL_GetTick>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d901      	bls.n	800cfe8 <HAL_RCC_OscConfig+0x1fc>
 800cfe4:	2303      	movs	r3, #3
 800cfe6:	e2d3      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800cfe8:	4b11      	ldr	r3, [pc, #68]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f003 0304 	and.w	r3, r3, #4
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d0f0      	beq.n	800cfd6 <HAL_RCC_OscConfig+0x1ea>
 800cff4:	4b0e      	ldr	r3, [pc, #56]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	061b      	lsls	r3, r3, #24
 800d002:	490b      	ldr	r1, [pc, #44]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800d004:	4313      	orrs	r3, r2
 800d006:	604b      	str	r3, [r1, #4]
 800d008:	e01a      	b.n	800d040 <HAL_RCC_OscConfig+0x254>
 800d00a:	4b09      	ldr	r3, [pc, #36]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a08      	ldr	r2, [pc, #32]	@ (800d030 <HAL_RCC_OscConfig+0x244>)
 800d010:	f023 0301 	bic.w	r3, r3, #1
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	f7fb fd6d 	bl	8008af4 <HAL_GetTick>
 800d01a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d01c:	e00a      	b.n	800d034 <HAL_RCC_OscConfig+0x248>
 800d01e:	f7fb fd69 	bl	8008af4 <HAL_GetTick>
 800d022:	4602      	mov	r2, r0
 800d024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d903      	bls.n	800d034 <HAL_RCC_OscConfig+0x248>
 800d02c:	2303      	movs	r3, #3
 800d02e:	e2af      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d030:	58024400 	.word	0x58024400
 800d034:	4b96      	ldr	r3, [pc, #600]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f003 0304 	and.w	r3, r3, #4
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d1ee      	bne.n	800d01e <HAL_RCC_OscConfig+0x232>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f003 0310 	and.w	r3, r3, #16
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d06a      	beq.n	800d122 <HAL_RCC_OscConfig+0x336>
 800d04c:	4b90      	ldr	r3, [pc, #576]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d054:	61bb      	str	r3, [r7, #24]
 800d056:	4b8e      	ldr	r3, [pc, #568]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d05a:	617b      	str	r3, [r7, #20]
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	2b08      	cmp	r3, #8
 800d060:	d007      	beq.n	800d072 <HAL_RCC_OscConfig+0x286>
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	2b18      	cmp	r3, #24
 800d066:	d11b      	bne.n	800d0a0 <HAL_RCC_OscConfig+0x2b4>
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f003 0303 	and.w	r3, r3, #3
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d116      	bne.n	800d0a0 <HAL_RCC_OscConfig+0x2b4>
 800d072:	4b87      	ldr	r3, [pc, #540]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d005      	beq.n	800d08a <HAL_RCC_OscConfig+0x29e>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	69db      	ldr	r3, [r3, #28]
 800d082:	2b80      	cmp	r3, #128	@ 0x80
 800d084:	d001      	beq.n	800d08a <HAL_RCC_OscConfig+0x29e>
 800d086:	2301      	movs	r3, #1
 800d088:	e282      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d08a:	4b81      	ldr	r3, [pc, #516]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	061b      	lsls	r3, r3, #24
 800d098:	497d      	ldr	r1, [pc, #500]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d09a:	4313      	orrs	r3, r2
 800d09c:	60cb      	str	r3, [r1, #12]
 800d09e:	e040      	b.n	800d122 <HAL_RCC_OscConfig+0x336>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	69db      	ldr	r3, [r3, #28]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d023      	beq.n	800d0f0 <HAL_RCC_OscConfig+0x304>
 800d0a8:	4b79      	ldr	r3, [pc, #484]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a78      	ldr	r2, [pc, #480]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d0ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0b2:	6013      	str	r3, [r2, #0]
 800d0b4:	f7fb fd1e 	bl	8008af4 <HAL_GetTick>
 800d0b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d0ba:	e008      	b.n	800d0ce <HAL_RCC_OscConfig+0x2e2>
 800d0bc:	f7fb fd1a 	bl	8008af4 <HAL_GetTick>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c4:	1ad3      	subs	r3, r2, r3
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	d901      	bls.n	800d0ce <HAL_RCC_OscConfig+0x2e2>
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	e260      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d0ce:	4b70      	ldr	r3, [pc, #448]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d0f0      	beq.n	800d0bc <HAL_RCC_OscConfig+0x2d0>
 800d0da:	4b6d      	ldr	r3, [pc, #436]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a1b      	ldr	r3, [r3, #32]
 800d0e6:	061b      	lsls	r3, r3, #24
 800d0e8:	4969      	ldr	r1, [pc, #420]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	60cb      	str	r3, [r1, #12]
 800d0ee:	e018      	b.n	800d122 <HAL_RCC_OscConfig+0x336>
 800d0f0:	4b67      	ldr	r3, [pc, #412]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a66      	ldr	r2, [pc, #408]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d0f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0fa:	6013      	str	r3, [r2, #0]
 800d0fc:	f7fb fcfa 	bl	8008af4 <HAL_GetTick>
 800d100:	6278      	str	r0, [r7, #36]	@ 0x24
 800d102:	e008      	b.n	800d116 <HAL_RCC_OscConfig+0x32a>
 800d104:	f7fb fcf6 	bl	8008af4 <HAL_GetTick>
 800d108:	4602      	mov	r2, r0
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	1ad3      	subs	r3, r2, r3
 800d10e:	2b02      	cmp	r3, #2
 800d110:	d901      	bls.n	800d116 <HAL_RCC_OscConfig+0x32a>
 800d112:	2303      	movs	r3, #3
 800d114:	e23c      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d116:	4b5e      	ldr	r3, [pc, #376]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1f0      	bne.n	800d104 <HAL_RCC_OscConfig+0x318>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 0308 	and.w	r3, r3, #8
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d036      	beq.n	800d19c <HAL_RCC_OscConfig+0x3b0>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	695b      	ldr	r3, [r3, #20]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d019      	beq.n	800d16a <HAL_RCC_OscConfig+0x37e>
 800d136:	4b56      	ldr	r3, [pc, #344]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d13a:	4a55      	ldr	r2, [pc, #340]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d13c:	f043 0301 	orr.w	r3, r3, #1
 800d140:	6753      	str	r3, [r2, #116]	@ 0x74
 800d142:	f7fb fcd7 	bl	8008af4 <HAL_GetTick>
 800d146:	6278      	str	r0, [r7, #36]	@ 0x24
 800d148:	e008      	b.n	800d15c <HAL_RCC_OscConfig+0x370>
 800d14a:	f7fb fcd3 	bl	8008af4 <HAL_GetTick>
 800d14e:	4602      	mov	r2, r0
 800d150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	2b02      	cmp	r3, #2
 800d156:	d901      	bls.n	800d15c <HAL_RCC_OscConfig+0x370>
 800d158:	2303      	movs	r3, #3
 800d15a:	e219      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d15c:	4b4c      	ldr	r3, [pc, #304]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d15e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d160:	f003 0302 	and.w	r3, r3, #2
 800d164:	2b00      	cmp	r3, #0
 800d166:	d0f0      	beq.n	800d14a <HAL_RCC_OscConfig+0x35e>
 800d168:	e018      	b.n	800d19c <HAL_RCC_OscConfig+0x3b0>
 800d16a:	4b49      	ldr	r3, [pc, #292]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d16c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d16e:	4a48      	ldr	r2, [pc, #288]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d170:	f023 0301 	bic.w	r3, r3, #1
 800d174:	6753      	str	r3, [r2, #116]	@ 0x74
 800d176:	f7fb fcbd 	bl	8008af4 <HAL_GetTick>
 800d17a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d17c:	e008      	b.n	800d190 <HAL_RCC_OscConfig+0x3a4>
 800d17e:	f7fb fcb9 	bl	8008af4 <HAL_GetTick>
 800d182:	4602      	mov	r2, r0
 800d184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d901      	bls.n	800d190 <HAL_RCC_OscConfig+0x3a4>
 800d18c:	2303      	movs	r3, #3
 800d18e:	e1ff      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d190:	4b3f      	ldr	r3, [pc, #252]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d194:	f003 0302 	and.w	r3, r3, #2
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1f0      	bne.n	800d17e <HAL_RCC_OscConfig+0x392>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 0320 	and.w	r3, r3, #32
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d036      	beq.n	800d216 <HAL_RCC_OscConfig+0x42a>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	699b      	ldr	r3, [r3, #24]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d019      	beq.n	800d1e4 <HAL_RCC_OscConfig+0x3f8>
 800d1b0:	4b37      	ldr	r3, [pc, #220]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a36      	ldr	r2, [pc, #216]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d1b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	f7fb fc9a 	bl	8008af4 <HAL_GetTick>
 800d1c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1c2:	e008      	b.n	800d1d6 <HAL_RCC_OscConfig+0x3ea>
 800d1c4:	f7fb fc96 	bl	8008af4 <HAL_GetTick>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d901      	bls.n	800d1d6 <HAL_RCC_OscConfig+0x3ea>
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e1dc      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d1d6:	4b2e      	ldr	r3, [pc, #184]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d0f0      	beq.n	800d1c4 <HAL_RCC_OscConfig+0x3d8>
 800d1e2:	e018      	b.n	800d216 <HAL_RCC_OscConfig+0x42a>
 800d1e4:	4b2a      	ldr	r3, [pc, #168]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a29      	ldr	r2, [pc, #164]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d1ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1ee:	6013      	str	r3, [r2, #0]
 800d1f0:	f7fb fc80 	bl	8008af4 <HAL_GetTick>
 800d1f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1f6:	e008      	b.n	800d20a <HAL_RCC_OscConfig+0x41e>
 800d1f8:	f7fb fc7c 	bl	8008af4 <HAL_GetTick>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	2b02      	cmp	r3, #2
 800d204:	d901      	bls.n	800d20a <HAL_RCC_OscConfig+0x41e>
 800d206:	2303      	movs	r3, #3
 800d208:	e1c2      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d20a:	4b21      	ldr	r3, [pc, #132]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1f0      	bne.n	800d1f8 <HAL_RCC_OscConfig+0x40c>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f003 0304 	and.w	r3, r3, #4
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 8086 	beq.w	800d330 <HAL_RCC_OscConfig+0x544>
 800d224:	4b1b      	ldr	r3, [pc, #108]	@ (800d294 <HAL_RCC_OscConfig+0x4a8>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a1a      	ldr	r2, [pc, #104]	@ (800d294 <HAL_RCC_OscConfig+0x4a8>)
 800d22a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d22e:	6013      	str	r3, [r2, #0]
 800d230:	f7fb fc60 	bl	8008af4 <HAL_GetTick>
 800d234:	6278      	str	r0, [r7, #36]	@ 0x24
 800d236:	e008      	b.n	800d24a <HAL_RCC_OscConfig+0x45e>
 800d238:	f7fb fc5c 	bl	8008af4 <HAL_GetTick>
 800d23c:	4602      	mov	r2, r0
 800d23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	2b64      	cmp	r3, #100	@ 0x64
 800d244:	d901      	bls.n	800d24a <HAL_RCC_OscConfig+0x45e>
 800d246:	2303      	movs	r3, #3
 800d248:	e1a2      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d24a:	4b12      	ldr	r3, [pc, #72]	@ (800d294 <HAL_RCC_OscConfig+0x4a8>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d252:	2b00      	cmp	r3, #0
 800d254:	d0f0      	beq.n	800d238 <HAL_RCC_OscConfig+0x44c>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d106      	bne.n	800d26c <HAL_RCC_OscConfig+0x480>
 800d25e:	4b0c      	ldr	r3, [pc, #48]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d262:	4a0b      	ldr	r2, [pc, #44]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d264:	f043 0301 	orr.w	r3, r3, #1
 800d268:	6713      	str	r3, [r2, #112]	@ 0x70
 800d26a:	e032      	b.n	800d2d2 <HAL_RCC_OscConfig+0x4e6>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d111      	bne.n	800d298 <HAL_RCC_OscConfig+0x4ac>
 800d274:	4b06      	ldr	r3, [pc, #24]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d278:	4a05      	ldr	r2, [pc, #20]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d27a:	f023 0301 	bic.w	r3, r3, #1
 800d27e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d280:	4b03      	ldr	r3, [pc, #12]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d284:	4a02      	ldr	r2, [pc, #8]	@ (800d290 <HAL_RCC_OscConfig+0x4a4>)
 800d286:	f023 0304 	bic.w	r3, r3, #4
 800d28a:	6713      	str	r3, [r2, #112]	@ 0x70
 800d28c:	e021      	b.n	800d2d2 <HAL_RCC_OscConfig+0x4e6>
 800d28e:	bf00      	nop
 800d290:	58024400 	.word	0x58024400
 800d294:	58024800 	.word	0x58024800
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	2b05      	cmp	r3, #5
 800d29e:	d10c      	bne.n	800d2ba <HAL_RCC_OscConfig+0x4ce>
 800d2a0:	4b83      	ldr	r3, [pc, #524]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d2a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2a4:	4a82      	ldr	r2, [pc, #520]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d2a6:	f043 0304 	orr.w	r3, r3, #4
 800d2aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800d2ac:	4b80      	ldr	r3, [pc, #512]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d2ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2b0:	4a7f      	ldr	r2, [pc, #508]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d2b2:	f043 0301 	orr.w	r3, r3, #1
 800d2b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d2b8:	e00b      	b.n	800d2d2 <HAL_RCC_OscConfig+0x4e6>
 800d2ba:	4b7d      	ldr	r3, [pc, #500]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d2bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2be:	4a7c      	ldr	r2, [pc, #496]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d2c0:	f023 0301 	bic.w	r3, r3, #1
 800d2c4:	6713      	str	r3, [r2, #112]	@ 0x70
 800d2c6:	4b7a      	ldr	r3, [pc, #488]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d2c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2ca:	4a79      	ldr	r2, [pc, #484]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d2cc:	f023 0304 	bic.w	r3, r3, #4
 800d2d0:	6713      	str	r3, [r2, #112]	@ 0x70
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d015      	beq.n	800d306 <HAL_RCC_OscConfig+0x51a>
 800d2da:	f7fb fc0b 	bl	8008af4 <HAL_GetTick>
 800d2de:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2e0:	e00a      	b.n	800d2f8 <HAL_RCC_OscConfig+0x50c>
 800d2e2:	f7fb fc07 	bl	8008af4 <HAL_GetTick>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d901      	bls.n	800d2f8 <HAL_RCC_OscConfig+0x50c>
 800d2f4:	2303      	movs	r3, #3
 800d2f6:	e14b      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d2f8:	4b6d      	ldr	r3, [pc, #436]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d2fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2fc:	f003 0302 	and.w	r3, r3, #2
 800d300:	2b00      	cmp	r3, #0
 800d302:	d0ee      	beq.n	800d2e2 <HAL_RCC_OscConfig+0x4f6>
 800d304:	e014      	b.n	800d330 <HAL_RCC_OscConfig+0x544>
 800d306:	f7fb fbf5 	bl	8008af4 <HAL_GetTick>
 800d30a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d30c:	e00a      	b.n	800d324 <HAL_RCC_OscConfig+0x538>
 800d30e:	f7fb fbf1 	bl	8008af4 <HAL_GetTick>
 800d312:	4602      	mov	r2, r0
 800d314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d901      	bls.n	800d324 <HAL_RCC_OscConfig+0x538>
 800d320:	2303      	movs	r3, #3
 800d322:	e135      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d324:	4b62      	ldr	r3, [pc, #392]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d328:	f003 0302 	and.w	r3, r3, #2
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1ee      	bne.n	800d30e <HAL_RCC_OscConfig+0x522>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 812a 	beq.w	800d58e <HAL_RCC_OscConfig+0x7a2>
 800d33a:	4b5d      	ldr	r3, [pc, #372]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d342:	2b18      	cmp	r3, #24
 800d344:	f000 80ba 	beq.w	800d4bc <HAL_RCC_OscConfig+0x6d0>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	f040 8095 	bne.w	800d47c <HAL_RCC_OscConfig+0x690>
 800d352:	4b57      	ldr	r3, [pc, #348]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a56      	ldr	r2, [pc, #344]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d358:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	f7fb fbc9 	bl	8008af4 <HAL_GetTick>
 800d362:	6278      	str	r0, [r7, #36]	@ 0x24
 800d364:	e008      	b.n	800d378 <HAL_RCC_OscConfig+0x58c>
 800d366:	f7fb fbc5 	bl	8008af4 <HAL_GetTick>
 800d36a:	4602      	mov	r2, r0
 800d36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36e:	1ad3      	subs	r3, r2, r3
 800d370:	2b02      	cmp	r3, #2
 800d372:	d901      	bls.n	800d378 <HAL_RCC_OscConfig+0x58c>
 800d374:	2303      	movs	r3, #3
 800d376:	e10b      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d378:	4b4d      	ldr	r3, [pc, #308]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1f0      	bne.n	800d366 <HAL_RCC_OscConfig+0x57a>
 800d384:	4b4a      	ldr	r3, [pc, #296]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d386:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d388:	4b4a      	ldr	r3, [pc, #296]	@ (800d4b4 <HAL_RCC_OscConfig+0x6c8>)
 800d38a:	4013      	ands	r3, r2
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d394:	0112      	lsls	r2, r2, #4
 800d396:	430a      	orrs	r2, r1
 800d398:	4945      	ldr	r1, [pc, #276]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d39a:	4313      	orrs	r3, r2
 800d39c:	628b      	str	r3, [r1, #40]	@ 0x28
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	025b      	lsls	r3, r3, #9
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	431a      	orrs	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	041b      	lsls	r3, r3, #16
 800d3bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d3c0:	431a      	orrs	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3c6:	3b01      	subs	r3, #1
 800d3c8:	061b      	lsls	r3, r3, #24
 800d3ca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d3ce:	4938      	ldr	r1, [pc, #224]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	630b      	str	r3, [r1, #48]	@ 0x30
 800d3d4:	4b36      	ldr	r3, [pc, #216]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d8:	4a35      	ldr	r2, [pc, #212]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d3da:	f023 0301 	bic.w	r3, r3, #1
 800d3de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d3e0:	4b33      	ldr	r3, [pc, #204]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d3e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3e4:	4b34      	ldr	r3, [pc, #208]	@ (800d4b8 <HAL_RCC_OscConfig+0x6cc>)
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d3ec:	00d2      	lsls	r2, r2, #3
 800d3ee:	4930      	ldr	r1, [pc, #192]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	634b      	str	r3, [r1, #52]	@ 0x34
 800d3f4:	4b2e      	ldr	r3, [pc, #184]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f8:	f023 020c 	bic.w	r2, r3, #12
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d400:	492b      	ldr	r1, [pc, #172]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d402:	4313      	orrs	r3, r2
 800d404:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d406:	4b2a      	ldr	r3, [pc, #168]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d40a:	f023 0202 	bic.w	r2, r3, #2
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d412:	4927      	ldr	r1, [pc, #156]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d414:	4313      	orrs	r3, r2
 800d416:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d418:	4b25      	ldr	r3, [pc, #148]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d41c:	4a24      	ldr	r2, [pc, #144]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d41e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d424:	4b22      	ldr	r3, [pc, #136]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d428:	4a21      	ldr	r2, [pc, #132]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d42a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d42e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d430:	4b1f      	ldr	r3, [pc, #124]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d434:	4a1e      	ldr	r2, [pc, #120]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d43a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d43c:	4b1c      	ldr	r3, [pc, #112]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d440:	4a1b      	ldr	r2, [pc, #108]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d442:	f043 0301 	orr.w	r3, r3, #1
 800d446:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d448:	4b19      	ldr	r3, [pc, #100]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a18      	ldr	r2, [pc, #96]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d44e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d452:	6013      	str	r3, [r2, #0]
 800d454:	f7fb fb4e 	bl	8008af4 <HAL_GetTick>
 800d458:	6278      	str	r0, [r7, #36]	@ 0x24
 800d45a:	e008      	b.n	800d46e <HAL_RCC_OscConfig+0x682>
 800d45c:	f7fb fb4a 	bl	8008af4 <HAL_GetTick>
 800d460:	4602      	mov	r2, r0
 800d462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	2b02      	cmp	r3, #2
 800d468:	d901      	bls.n	800d46e <HAL_RCC_OscConfig+0x682>
 800d46a:	2303      	movs	r3, #3
 800d46c:	e090      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d46e:	4b10      	ldr	r3, [pc, #64]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d476:	2b00      	cmp	r3, #0
 800d478:	d0f0      	beq.n	800d45c <HAL_RCC_OscConfig+0x670>
 800d47a:	e088      	b.n	800d58e <HAL_RCC_OscConfig+0x7a2>
 800d47c:	4b0c      	ldr	r3, [pc, #48]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a0b      	ldr	r2, [pc, #44]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	f7fb fb34 	bl	8008af4 <HAL_GetTick>
 800d48c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d48e:	e008      	b.n	800d4a2 <HAL_RCC_OscConfig+0x6b6>
 800d490:	f7fb fb30 	bl	8008af4 <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d901      	bls.n	800d4a2 <HAL_RCC_OscConfig+0x6b6>
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e076      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d4a2:	4b03      	ldr	r3, [pc, #12]	@ (800d4b0 <HAL_RCC_OscConfig+0x6c4>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1f0      	bne.n	800d490 <HAL_RCC_OscConfig+0x6a4>
 800d4ae:	e06e      	b.n	800d58e <HAL_RCC_OscConfig+0x7a2>
 800d4b0:	58024400 	.word	0x58024400
 800d4b4:	fffffc0c 	.word	0xfffffc0c
 800d4b8:	ffff0007 	.word	0xffff0007
 800d4bc:	4b36      	ldr	r3, [pc, #216]	@ (800d598 <HAL_RCC_OscConfig+0x7ac>)
 800d4be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c0:	613b      	str	r3, [r7, #16]
 800d4c2:	4b35      	ldr	r3, [pc, #212]	@ (800d598 <HAL_RCC_OscConfig+0x7ac>)
 800d4c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d031      	beq.n	800d534 <HAL_RCC_OscConfig+0x748>
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	f003 0203 	and.w	r2, r3, #3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d12a      	bne.n	800d534 <HAL_RCC_OscConfig+0x748>
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	091b      	lsrs	r3, r3, #4
 800d4e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d122      	bne.n	800d534 <HAL_RCC_OscConfig+0x748>
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d11a      	bne.n	800d534 <HAL_RCC_OscConfig+0x748>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	0a5b      	lsrs	r3, r3, #9
 800d502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d50a:	3b01      	subs	r3, #1
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d111      	bne.n	800d534 <HAL_RCC_OscConfig+0x748>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	0c1b      	lsrs	r3, r3, #16
 800d514:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d51c:	3b01      	subs	r3, #1
 800d51e:	429a      	cmp	r2, r3
 800d520:	d108      	bne.n	800d534 <HAL_RCC_OscConfig+0x748>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	0e1b      	lsrs	r3, r3, #24
 800d526:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d52e:	3b01      	subs	r3, #1
 800d530:	429a      	cmp	r2, r3
 800d532:	d001      	beq.n	800d538 <HAL_RCC_OscConfig+0x74c>
 800d534:	2301      	movs	r3, #1
 800d536:	e02b      	b.n	800d590 <HAL_RCC_OscConfig+0x7a4>
 800d538:	4b17      	ldr	r3, [pc, #92]	@ (800d598 <HAL_RCC_OscConfig+0x7ac>)
 800d53a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d53c:	08db      	lsrs	r3, r3, #3
 800d53e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d542:	613b      	str	r3, [r7, #16]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d01f      	beq.n	800d58e <HAL_RCC_OscConfig+0x7a2>
 800d54e:	4b12      	ldr	r3, [pc, #72]	@ (800d598 <HAL_RCC_OscConfig+0x7ac>)
 800d550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d552:	4a11      	ldr	r2, [pc, #68]	@ (800d598 <HAL_RCC_OscConfig+0x7ac>)
 800d554:	f023 0301 	bic.w	r3, r3, #1
 800d558:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d55a:	f7fb facb 	bl	8008af4 <HAL_GetTick>
 800d55e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d560:	bf00      	nop
 800d562:	f7fb fac7 	bl	8008af4 <HAL_GetTick>
 800d566:	4602      	mov	r2, r0
 800d568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d0f9      	beq.n	800d562 <HAL_RCC_OscConfig+0x776>
 800d56e:	4b0a      	ldr	r3, [pc, #40]	@ (800d598 <HAL_RCC_OscConfig+0x7ac>)
 800d570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d572:	4b0a      	ldr	r3, [pc, #40]	@ (800d59c <HAL_RCC_OscConfig+0x7b0>)
 800d574:	4013      	ands	r3, r2
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d57a:	00d2      	lsls	r2, r2, #3
 800d57c:	4906      	ldr	r1, [pc, #24]	@ (800d598 <HAL_RCC_OscConfig+0x7ac>)
 800d57e:	4313      	orrs	r3, r2
 800d580:	634b      	str	r3, [r1, #52]	@ 0x34
 800d582:	4b05      	ldr	r3, [pc, #20]	@ (800d598 <HAL_RCC_OscConfig+0x7ac>)
 800d584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d586:	4a04      	ldr	r2, [pc, #16]	@ (800d598 <HAL_RCC_OscConfig+0x7ac>)
 800d588:	f043 0301 	orr.w	r3, r3, #1
 800d58c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d58e:	2300      	movs	r3, #0
 800d590:	4618      	mov	r0, r3
 800d592:	3730      	adds	r7, #48	@ 0x30
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	58024400 	.word	0x58024400
 800d59c:	ffff0007 	.word	0xffff0007

0800d5a0 <HAL_RCC_ClockConfig>:
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <HAL_RCC_ClockConfig+0x14>
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e19c      	b.n	800d8ee <HAL_RCC_ClockConfig+0x34e>
 800d5b4:	4b8a      	ldr	r3, [pc, #552]	@ (800d7e0 <HAL_RCC_ClockConfig+0x240>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f003 030f 	and.w	r3, r3, #15
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d910      	bls.n	800d5e4 <HAL_RCC_ClockConfig+0x44>
 800d5c2:	4b87      	ldr	r3, [pc, #540]	@ (800d7e0 <HAL_RCC_ClockConfig+0x240>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f023 020f 	bic.w	r2, r3, #15
 800d5ca:	4985      	ldr	r1, [pc, #532]	@ (800d7e0 <HAL_RCC_ClockConfig+0x240>)
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	600b      	str	r3, [r1, #0]
 800d5d2:	4b83      	ldr	r3, [pc, #524]	@ (800d7e0 <HAL_RCC_ClockConfig+0x240>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	683a      	ldr	r2, [r7, #0]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d001      	beq.n	800d5e4 <HAL_RCC_ClockConfig+0x44>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e184      	b.n	800d8ee <HAL_RCC_ClockConfig+0x34e>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d010      	beq.n	800d612 <HAL_RCC_ClockConfig+0x72>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	691a      	ldr	r2, [r3, #16]
 800d5f4:	4b7b      	ldr	r3, [pc, #492]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d5f6:	699b      	ldr	r3, [r3, #24]
 800d5f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d908      	bls.n	800d612 <HAL_RCC_ClockConfig+0x72>
 800d600:	4b78      	ldr	r3, [pc, #480]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	4975      	ldr	r1, [pc, #468]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d60e:	4313      	orrs	r3, r2
 800d610:	618b      	str	r3, [r1, #24]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f003 0308 	and.w	r3, r3, #8
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d010      	beq.n	800d640 <HAL_RCC_ClockConfig+0xa0>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	695a      	ldr	r2, [r3, #20]
 800d622:	4b70      	ldr	r3, [pc, #448]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d624:	69db      	ldr	r3, [r3, #28]
 800d626:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d908      	bls.n	800d640 <HAL_RCC_ClockConfig+0xa0>
 800d62e:	4b6d      	ldr	r3, [pc, #436]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	496a      	ldr	r1, [pc, #424]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d63c:	4313      	orrs	r3, r2
 800d63e:	61cb      	str	r3, [r1, #28]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f003 0310 	and.w	r3, r3, #16
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d010      	beq.n	800d66e <HAL_RCC_ClockConfig+0xce>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	699a      	ldr	r2, [r3, #24]
 800d650:	4b64      	ldr	r3, [pc, #400]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d652:	69db      	ldr	r3, [r3, #28]
 800d654:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d658:	429a      	cmp	r2, r3
 800d65a:	d908      	bls.n	800d66e <HAL_RCC_ClockConfig+0xce>
 800d65c:	4b61      	ldr	r3, [pc, #388]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	495e      	ldr	r1, [pc, #376]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	61cb      	str	r3, [r1, #28]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 0320 	and.w	r3, r3, #32
 800d676:	2b00      	cmp	r3, #0
 800d678:	d010      	beq.n	800d69c <HAL_RCC_ClockConfig+0xfc>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	69da      	ldr	r2, [r3, #28]
 800d67e:	4b59      	ldr	r3, [pc, #356]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d686:	429a      	cmp	r2, r3
 800d688:	d908      	bls.n	800d69c <HAL_RCC_ClockConfig+0xfc>
 800d68a:	4b56      	ldr	r3, [pc, #344]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d68c:	6a1b      	ldr	r3, [r3, #32]
 800d68e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	69db      	ldr	r3, [r3, #28]
 800d696:	4953      	ldr	r1, [pc, #332]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d698:	4313      	orrs	r3, r2
 800d69a:	620b      	str	r3, [r1, #32]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 0302 	and.w	r3, r3, #2
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d010      	beq.n	800d6ca <HAL_RCC_ClockConfig+0x12a>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	68da      	ldr	r2, [r3, #12]
 800d6ac:	4b4d      	ldr	r3, [pc, #308]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d6ae:	699b      	ldr	r3, [r3, #24]
 800d6b0:	f003 030f 	and.w	r3, r3, #15
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d908      	bls.n	800d6ca <HAL_RCC_ClockConfig+0x12a>
 800d6b8:	4b4a      	ldr	r3, [pc, #296]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	f023 020f 	bic.w	r2, r3, #15
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	4947      	ldr	r1, [pc, #284]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	618b      	str	r3, [r1, #24]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d055      	beq.n	800d782 <HAL_RCC_ClockConfig+0x1e2>
 800d6d6:	4b43      	ldr	r3, [pc, #268]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	4940      	ldr	r1, [pc, #256]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	618b      	str	r3, [r1, #24]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d107      	bne.n	800d700 <HAL_RCC_ClockConfig+0x160>
 800d6f0:	4b3c      	ldr	r3, [pc, #240]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d121      	bne.n	800d740 <HAL_RCC_ClockConfig+0x1a0>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e0f6      	b.n	800d8ee <HAL_RCC_ClockConfig+0x34e>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	2b03      	cmp	r3, #3
 800d706:	d107      	bne.n	800d718 <HAL_RCC_ClockConfig+0x178>
 800d708:	4b36      	ldr	r3, [pc, #216]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d710:	2b00      	cmp	r3, #0
 800d712:	d115      	bne.n	800d740 <HAL_RCC_ClockConfig+0x1a0>
 800d714:	2301      	movs	r3, #1
 800d716:	e0ea      	b.n	800d8ee <HAL_RCC_ClockConfig+0x34e>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d107      	bne.n	800d730 <HAL_RCC_ClockConfig+0x190>
 800d720:	4b30      	ldr	r3, [pc, #192]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d109      	bne.n	800d740 <HAL_RCC_ClockConfig+0x1a0>
 800d72c:	2301      	movs	r3, #1
 800d72e:	e0de      	b.n	800d8ee <HAL_RCC_ClockConfig+0x34e>
 800d730:	4b2c      	ldr	r3, [pc, #176]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f003 0304 	and.w	r3, r3, #4
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d101      	bne.n	800d740 <HAL_RCC_ClockConfig+0x1a0>
 800d73c:	2301      	movs	r3, #1
 800d73e:	e0d6      	b.n	800d8ee <HAL_RCC_ClockConfig+0x34e>
 800d740:	4b28      	ldr	r3, [pc, #160]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	f023 0207 	bic.w	r2, r3, #7
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	4925      	ldr	r1, [pc, #148]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	610b      	str	r3, [r1, #16]
 800d752:	f7fb f9cf 	bl	8008af4 <HAL_GetTick>
 800d756:	6178      	str	r0, [r7, #20]
 800d758:	e00a      	b.n	800d770 <HAL_RCC_ClockConfig+0x1d0>
 800d75a:	f7fb f9cb 	bl	8008af4 <HAL_GetTick>
 800d75e:	4602      	mov	r2, r0
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	1ad3      	subs	r3, r2, r3
 800d764:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d768:	4293      	cmp	r3, r2
 800d76a:	d901      	bls.n	800d770 <HAL_RCC_ClockConfig+0x1d0>
 800d76c:	2303      	movs	r3, #3
 800d76e:	e0be      	b.n	800d8ee <HAL_RCC_ClockConfig+0x34e>
 800d770:	4b1c      	ldr	r3, [pc, #112]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	429a      	cmp	r2, r3
 800d780:	d1eb      	bne.n	800d75a <HAL_RCC_ClockConfig+0x1ba>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 0302 	and.w	r3, r3, #2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d010      	beq.n	800d7b0 <HAL_RCC_ClockConfig+0x210>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	68da      	ldr	r2, [r3, #12]
 800d792:	4b14      	ldr	r3, [pc, #80]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d794:	699b      	ldr	r3, [r3, #24]
 800d796:	f003 030f 	and.w	r3, r3, #15
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d208      	bcs.n	800d7b0 <HAL_RCC_ClockConfig+0x210>
 800d79e:	4b11      	ldr	r3, [pc, #68]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	f023 020f 	bic.w	r2, r3, #15
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	490e      	ldr	r1, [pc, #56]	@ (800d7e4 <HAL_RCC_ClockConfig+0x244>)
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	618b      	str	r3, [r1, #24]
 800d7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e0 <HAL_RCC_ClockConfig+0x240>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f003 030f 	and.w	r3, r3, #15
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d214      	bcs.n	800d7e8 <HAL_RCC_ClockConfig+0x248>
 800d7be:	4b08      	ldr	r3, [pc, #32]	@ (800d7e0 <HAL_RCC_ClockConfig+0x240>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f023 020f 	bic.w	r2, r3, #15
 800d7c6:	4906      	ldr	r1, [pc, #24]	@ (800d7e0 <HAL_RCC_ClockConfig+0x240>)
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	600b      	str	r3, [r1, #0]
 800d7ce:	4b04      	ldr	r3, [pc, #16]	@ (800d7e0 <HAL_RCC_ClockConfig+0x240>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 030f 	and.w	r3, r3, #15
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d005      	beq.n	800d7e8 <HAL_RCC_ClockConfig+0x248>
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e086      	b.n	800d8ee <HAL_RCC_ClockConfig+0x34e>
 800d7e0:	52002000 	.word	0x52002000
 800d7e4:	58024400 	.word	0x58024400
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 0304 	and.w	r3, r3, #4
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d010      	beq.n	800d816 <HAL_RCC_ClockConfig+0x276>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	691a      	ldr	r2, [r3, #16]
 800d7f8:	4b3f      	ldr	r3, [pc, #252]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d7fa:	699b      	ldr	r3, [r3, #24]
 800d7fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d800:	429a      	cmp	r2, r3
 800d802:	d208      	bcs.n	800d816 <HAL_RCC_ClockConfig+0x276>
 800d804:	4b3c      	ldr	r3, [pc, #240]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	4939      	ldr	r1, [pc, #228]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d812:	4313      	orrs	r3, r2
 800d814:	618b      	str	r3, [r1, #24]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 0308 	and.w	r3, r3, #8
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d010      	beq.n	800d844 <HAL_RCC_ClockConfig+0x2a4>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	695a      	ldr	r2, [r3, #20]
 800d826:	4b34      	ldr	r3, [pc, #208]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d82e:	429a      	cmp	r2, r3
 800d830:	d208      	bcs.n	800d844 <HAL_RCC_ClockConfig+0x2a4>
 800d832:	4b31      	ldr	r3, [pc, #196]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	695b      	ldr	r3, [r3, #20]
 800d83e:	492e      	ldr	r1, [pc, #184]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d840:	4313      	orrs	r3, r2
 800d842:	61cb      	str	r3, [r1, #28]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f003 0310 	and.w	r3, r3, #16
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d010      	beq.n	800d872 <HAL_RCC_ClockConfig+0x2d2>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	699a      	ldr	r2, [r3, #24]
 800d854:	4b28      	ldr	r3, [pc, #160]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d856:	69db      	ldr	r3, [r3, #28]
 800d858:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d208      	bcs.n	800d872 <HAL_RCC_ClockConfig+0x2d2>
 800d860:	4b25      	ldr	r3, [pc, #148]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d862:	69db      	ldr	r3, [r3, #28]
 800d864:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	4922      	ldr	r1, [pc, #136]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d86e:	4313      	orrs	r3, r2
 800d870:	61cb      	str	r3, [r1, #28]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 0320 	and.w	r3, r3, #32
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d010      	beq.n	800d8a0 <HAL_RCC_ClockConfig+0x300>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	69da      	ldr	r2, [r3, #28]
 800d882:	4b1d      	ldr	r3, [pc, #116]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d208      	bcs.n	800d8a0 <HAL_RCC_ClockConfig+0x300>
 800d88e:	4b1a      	ldr	r3, [pc, #104]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	69db      	ldr	r3, [r3, #28]
 800d89a:	4917      	ldr	r1, [pc, #92]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d89c:	4313      	orrs	r3, r2
 800d89e:	620b      	str	r3, [r1, #32]
 800d8a0:	f000 f844 	bl	800d92c <HAL_RCC_GetSysClockFreq>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	4b14      	ldr	r3, [pc, #80]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	0a1b      	lsrs	r3, r3, #8
 800d8ac:	f003 030f 	and.w	r3, r3, #15
 800d8b0:	4912      	ldr	r1, [pc, #72]	@ (800d8fc <HAL_RCC_ClockConfig+0x35c>)
 800d8b2:	5ccb      	ldrb	r3, [r1, r3]
 800d8b4:	f003 031f 	and.w	r3, r3, #31
 800d8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d8bc:	613b      	str	r3, [r7, #16]
 800d8be:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f8 <HAL_RCC_ClockConfig+0x358>)
 800d8c0:	699b      	ldr	r3, [r3, #24]
 800d8c2:	f003 030f 	and.w	r3, r3, #15
 800d8c6:	4a0d      	ldr	r2, [pc, #52]	@ (800d8fc <HAL_RCC_ClockConfig+0x35c>)
 800d8c8:	5cd3      	ldrb	r3, [r2, r3]
 800d8ca:	f003 031f 	and.w	r3, r3, #31
 800d8ce:	693a      	ldr	r2, [r7, #16]
 800d8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d8d4:	4a0a      	ldr	r2, [pc, #40]	@ (800d900 <HAL_RCC_ClockConfig+0x360>)
 800d8d6:	6013      	str	r3, [r2, #0]
 800d8d8:	4a0a      	ldr	r2, [pc, #40]	@ (800d904 <HAL_RCC_ClockConfig+0x364>)
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	6013      	str	r3, [r2, #0]
 800d8de:	4b0a      	ldr	r3, [pc, #40]	@ (800d908 <HAL_RCC_ClockConfig+0x368>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fb f8bc 	bl	8008a60 <HAL_InitTick>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	73fb      	strb	r3, [r7, #15]
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	58024400 	.word	0x58024400
 800d8fc:	0801c2a4 	.word	0x0801c2a4
 800d900:	24000154 	.word	0x24000154
 800d904:	24000150 	.word	0x24000150
 800d908:	24000160 	.word	0x24000160

0800d90c <HAL_RCC_EnableCSS>:
 800d90c:	b480      	push	{r7}
 800d90e:	af00      	add	r7, sp, #0
 800d910:	4b05      	ldr	r3, [pc, #20]	@ (800d928 <HAL_RCC_EnableCSS+0x1c>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a04      	ldr	r2, [pc, #16]	@ (800d928 <HAL_RCC_EnableCSS+0x1c>)
 800d916:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d91a:	6013      	str	r3, [r2, #0]
 800d91c:	bf00      	nop
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	58024400 	.word	0x58024400

0800d92c <HAL_RCC_GetSysClockFreq>:
 800d92c:	b480      	push	{r7}
 800d92e:	b089      	sub	sp, #36	@ 0x24
 800d930:	af00      	add	r7, sp, #0
 800d932:	4bb3      	ldr	r3, [pc, #716]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d934:	691b      	ldr	r3, [r3, #16]
 800d936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d93a:	2b18      	cmp	r3, #24
 800d93c:	f200 8155 	bhi.w	800dbea <HAL_RCC_GetSysClockFreq+0x2be>
 800d940:	a201      	add	r2, pc, #4	@ (adr r2, 800d948 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d946:	bf00      	nop
 800d948:	0800d9ad 	.word	0x0800d9ad
 800d94c:	0800dbeb 	.word	0x0800dbeb
 800d950:	0800dbeb 	.word	0x0800dbeb
 800d954:	0800dbeb 	.word	0x0800dbeb
 800d958:	0800dbeb 	.word	0x0800dbeb
 800d95c:	0800dbeb 	.word	0x0800dbeb
 800d960:	0800dbeb 	.word	0x0800dbeb
 800d964:	0800dbeb 	.word	0x0800dbeb
 800d968:	0800d9d3 	.word	0x0800d9d3
 800d96c:	0800dbeb 	.word	0x0800dbeb
 800d970:	0800dbeb 	.word	0x0800dbeb
 800d974:	0800dbeb 	.word	0x0800dbeb
 800d978:	0800dbeb 	.word	0x0800dbeb
 800d97c:	0800dbeb 	.word	0x0800dbeb
 800d980:	0800dbeb 	.word	0x0800dbeb
 800d984:	0800dbeb 	.word	0x0800dbeb
 800d988:	0800d9d9 	.word	0x0800d9d9
 800d98c:	0800dbeb 	.word	0x0800dbeb
 800d990:	0800dbeb 	.word	0x0800dbeb
 800d994:	0800dbeb 	.word	0x0800dbeb
 800d998:	0800dbeb 	.word	0x0800dbeb
 800d99c:	0800dbeb 	.word	0x0800dbeb
 800d9a0:	0800dbeb 	.word	0x0800dbeb
 800d9a4:	0800dbeb 	.word	0x0800dbeb
 800d9a8:	0800d9df 	.word	0x0800d9df
 800d9ac:	4b94      	ldr	r3, [pc, #592]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f003 0320 	and.w	r3, r3, #32
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d009      	beq.n	800d9cc <HAL_RCC_GetSysClockFreq+0xa0>
 800d9b8:	4b91      	ldr	r3, [pc, #580]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	08db      	lsrs	r3, r3, #3
 800d9be:	f003 0303 	and.w	r3, r3, #3
 800d9c2:	4a90      	ldr	r2, [pc, #576]	@ (800dc04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d9c8:	61bb      	str	r3, [r7, #24]
 800d9ca:	e111      	b.n	800dbf0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d9cc:	4b8d      	ldr	r3, [pc, #564]	@ (800dc04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d9ce:	61bb      	str	r3, [r7, #24]
 800d9d0:	e10e      	b.n	800dbf0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d9d2:	4b8d      	ldr	r3, [pc, #564]	@ (800dc08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d9d4:	61bb      	str	r3, [r7, #24]
 800d9d6:	e10b      	b.n	800dbf0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d9d8:	4b8c      	ldr	r3, [pc, #560]	@ (800dc0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d9da:	61bb      	str	r3, [r7, #24]
 800d9dc:	e108      	b.n	800dbf0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d9de:	4b88      	ldr	r3, [pc, #544]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9e2:	f003 0303 	and.w	r3, r3, #3
 800d9e6:	617b      	str	r3, [r7, #20]
 800d9e8:	4b85      	ldr	r3, [pc, #532]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ec:	091b      	lsrs	r3, r3, #4
 800d9ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9f2:	613b      	str	r3, [r7, #16]
 800d9f4:	4b82      	ldr	r3, [pc, #520]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f8:	f003 0301 	and.w	r3, r3, #1
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	4b80      	ldr	r3, [pc, #512]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da02:	08db      	lsrs	r3, r3, #3
 800da04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	fb02 f303 	mul.w	r3, r2, r3
 800da0e:	ee07 3a90 	vmov	s15, r3
 800da12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da16:	edc7 7a02 	vstr	s15, [r7, #8]
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f000 80e1 	beq.w	800dbe4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	2b02      	cmp	r3, #2
 800da26:	f000 8083 	beq.w	800db30 <HAL_RCC_GetSysClockFreq+0x204>
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	f200 80a1 	bhi.w	800db74 <HAL_RCC_GetSysClockFreq+0x248>
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d003      	beq.n	800da40 <HAL_RCC_GetSysClockFreq+0x114>
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d056      	beq.n	800daec <HAL_RCC_GetSysClockFreq+0x1c0>
 800da3e:	e099      	b.n	800db74 <HAL_RCC_GetSysClockFreq+0x248>
 800da40:	4b6f      	ldr	r3, [pc, #444]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f003 0320 	and.w	r3, r3, #32
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d02d      	beq.n	800daa8 <HAL_RCC_GetSysClockFreq+0x17c>
 800da4c:	4b6c      	ldr	r3, [pc, #432]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	08db      	lsrs	r3, r3, #3
 800da52:	f003 0303 	and.w	r3, r3, #3
 800da56:	4a6b      	ldr	r2, [pc, #428]	@ (800dc04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800da58:	fa22 f303 	lsr.w	r3, r2, r3
 800da5c:	607b      	str	r3, [r7, #4]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	ee07 3a90 	vmov	s15, r3
 800da64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	ee07 3a90 	vmov	s15, r3
 800da6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da76:	4b62      	ldr	r3, [pc, #392]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da7e:	ee07 3a90 	vmov	s15, r3
 800da82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da86:	ed97 6a02 	vldr	s12, [r7, #8]
 800da8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800dc10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800da8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daa2:	edc7 7a07 	vstr	s15, [r7, #28]
 800daa6:	e087      	b.n	800dbb8 <HAL_RCC_GetSysClockFreq+0x28c>
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	ee07 3a90 	vmov	s15, r3
 800daae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800dc14 <HAL_RCC_GetSysClockFreq+0x2e8>
 800dab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daba:	4b51      	ldr	r3, [pc, #324]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dac2:	ee07 3a90 	vmov	s15, r3
 800dac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daca:	ed97 6a02 	vldr	s12, [r7, #8]
 800dace:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800dc10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dae6:	edc7 7a07 	vstr	s15, [r7, #28]
 800daea:	e065      	b.n	800dbb8 <HAL_RCC_GetSysClockFreq+0x28c>
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	ee07 3a90 	vmov	s15, r3
 800daf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daf6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800dc18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dafe:	4b40      	ldr	r3, [pc, #256]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db06:	ee07 3a90 	vmov	s15, r3
 800db0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800db12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800dc10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800db16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db2a:	edc7 7a07 	vstr	s15, [r7, #28]
 800db2e:	e043      	b.n	800dbb8 <HAL_RCC_GetSysClockFreq+0x28c>
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	ee07 3a90 	vmov	s15, r3
 800db36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800dc1c <HAL_RCC_GetSysClockFreq+0x2f0>
 800db3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db42:	4b2f      	ldr	r3, [pc, #188]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db4a:	ee07 3a90 	vmov	s15, r3
 800db4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db52:	ed97 6a02 	vldr	s12, [r7, #8]
 800db56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800dc10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800db5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db6e:	edc7 7a07 	vstr	s15, [r7, #28]
 800db72:	e021      	b.n	800dbb8 <HAL_RCC_GetSysClockFreq+0x28c>
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	ee07 3a90 	vmov	s15, r3
 800db7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800dc18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800db82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db86:	4b1e      	ldr	r3, [pc, #120]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db8e:	ee07 3a90 	vmov	s15, r3
 800db92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db96:	ed97 6a02 	vldr	s12, [r7, #8]
 800db9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800dc10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800db9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbb2:	edc7 7a07 	vstr	s15, [r7, #28]
 800dbb6:	bf00      	nop
 800dbb8:	4b11      	ldr	r3, [pc, #68]	@ (800dc00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbbc:	0a5b      	lsrs	r3, r3, #9
 800dbbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	603b      	str	r3, [r7, #0]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	ee07 3a90 	vmov	s15, r3
 800dbcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dbd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbdc:	ee17 3a90 	vmov	r3, s15
 800dbe0:	61bb      	str	r3, [r7, #24]
 800dbe2:	e005      	b.n	800dbf0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	61bb      	str	r3, [r7, #24]
 800dbe8:	e002      	b.n	800dbf0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800dbea:	4b07      	ldr	r3, [pc, #28]	@ (800dc08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dbec:	61bb      	str	r3, [r7, #24]
 800dbee:	bf00      	nop
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3724      	adds	r7, #36	@ 0x24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	58024400 	.word	0x58024400
 800dc04:	03d09000 	.word	0x03d09000
 800dc08:	003d0900 	.word	0x003d0900
 800dc0c:	02dc6c00 	.word	0x02dc6c00
 800dc10:	46000000 	.word	0x46000000
 800dc14:	4c742400 	.word	0x4c742400
 800dc18:	4a742400 	.word	0x4a742400
 800dc1c:	4c371b00 	.word	0x4c371b00

0800dc20 <HAL_RCC_GetHCLKFreq>:
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	f7ff fe81 	bl	800d92c <HAL_RCC_GetSysClockFreq>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	4b10      	ldr	r3, [pc, #64]	@ (800dc70 <HAL_RCC_GetHCLKFreq+0x50>)
 800dc2e:	699b      	ldr	r3, [r3, #24]
 800dc30:	0a1b      	lsrs	r3, r3, #8
 800dc32:	f003 030f 	and.w	r3, r3, #15
 800dc36:	490f      	ldr	r1, [pc, #60]	@ (800dc74 <HAL_RCC_GetHCLKFreq+0x54>)
 800dc38:	5ccb      	ldrb	r3, [r1, r3]
 800dc3a:	f003 031f 	and.w	r3, r3, #31
 800dc3e:	fa22 f303 	lsr.w	r3, r2, r3
 800dc42:	607b      	str	r3, [r7, #4]
 800dc44:	4b0a      	ldr	r3, [pc, #40]	@ (800dc70 <HAL_RCC_GetHCLKFreq+0x50>)
 800dc46:	699b      	ldr	r3, [r3, #24]
 800dc48:	f003 030f 	and.w	r3, r3, #15
 800dc4c:	4a09      	ldr	r2, [pc, #36]	@ (800dc74 <HAL_RCC_GetHCLKFreq+0x54>)
 800dc4e:	5cd3      	ldrb	r3, [r2, r3]
 800dc50:	f003 031f 	and.w	r3, r3, #31
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	fa22 f303 	lsr.w	r3, r2, r3
 800dc5a:	4a07      	ldr	r2, [pc, #28]	@ (800dc78 <HAL_RCC_GetHCLKFreq+0x58>)
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	4a07      	ldr	r2, [pc, #28]	@ (800dc7c <HAL_RCC_GetHCLKFreq+0x5c>)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6013      	str	r3, [r2, #0]
 800dc64:	4b04      	ldr	r3, [pc, #16]	@ (800dc78 <HAL_RCC_GetHCLKFreq+0x58>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	58024400 	.word	0x58024400
 800dc74:	0801c2a4 	.word	0x0801c2a4
 800dc78:	24000154 	.word	0x24000154
 800dc7c:	24000150 	.word	0x24000150

0800dc80 <HAL_RCC_GetPCLK1Freq>:
 800dc80:	b580      	push	{r7, lr}
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	f7ff ffcc 	bl	800dc20 <HAL_RCC_GetHCLKFreq>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	4b06      	ldr	r3, [pc, #24]	@ (800dca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dc8c:	69db      	ldr	r3, [r3, #28]
 800dc8e:	091b      	lsrs	r3, r3, #4
 800dc90:	f003 0307 	and.w	r3, r3, #7
 800dc94:	4904      	ldr	r1, [pc, #16]	@ (800dca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800dc96:	5ccb      	ldrb	r3, [r1, r3]
 800dc98:	f003 031f 	and.w	r3, r3, #31
 800dc9c:	fa22 f303 	lsr.w	r3, r2, r3
 800dca0:	4618      	mov	r0, r3
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	58024400 	.word	0x58024400
 800dca8:	0801c2a4 	.word	0x0801c2a4

0800dcac <HAL_RCC_GetPCLK2Freq>:
 800dcac:	b580      	push	{r7, lr}
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	f7ff ffb6 	bl	800dc20 <HAL_RCC_GetHCLKFreq>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	4b06      	ldr	r3, [pc, #24]	@ (800dcd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dcb8:	69db      	ldr	r3, [r3, #28]
 800dcba:	0a1b      	lsrs	r3, r3, #8
 800dcbc:	f003 0307 	and.w	r3, r3, #7
 800dcc0:	4904      	ldr	r1, [pc, #16]	@ (800dcd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dcc2:	5ccb      	ldrb	r3, [r1, r3]
 800dcc4:	f003 031f 	and.w	r3, r3, #31
 800dcc8:	fa22 f303 	lsr.w	r3, r2, r3
 800dccc:	4618      	mov	r0, r3
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	58024400 	.word	0x58024400
 800dcd4:	0801c2a4 	.word	0x0801c2a4

0800dcd8 <HAL_RCC_NMI_IRQHandler>:
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	4b07      	ldr	r3, [pc, #28]	@ (800dcfc <HAL_RCC_NMI_IRQHandler+0x24>)
 800dcde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dce8:	d105      	bne.n	800dcf6 <HAL_RCC_NMI_IRQHandler+0x1e>
 800dcea:	f000 f809 	bl	800dd00 <HAL_RCC_CSSCallback>
 800dcee:	4b03      	ldr	r3, [pc, #12]	@ (800dcfc <HAL_RCC_NMI_IRQHandler+0x24>)
 800dcf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dcf4:	669a      	str	r2, [r3, #104]	@ 0x68
 800dcf6:	bf00      	nop
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	58024400 	.word	0x58024400

0800dd00 <HAL_RCC_CSSCallback>:
 800dd00:	b480      	push	{r7}
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	bf00      	nop
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
	...

0800dd10 <HAL_RCCEx_PeriphCLKConfig>:
 800dd10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd14:	b0c6      	sub	sp, #280	@ 0x118
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dd22:	2300      	movs	r3, #0
 800dd24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800dd28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800dd34:	2500      	movs	r5, #0
 800dd36:	ea54 0305 	orrs.w	r3, r4, r5
 800dd3a:	d049      	beq.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800dd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dd46:	d02f      	beq.n	800dda8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800dd48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dd4c:	d828      	bhi.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dd4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd52:	d01a      	beq.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800dd54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd58:	d822      	bhi.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d003      	beq.n	800dd66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800dd5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd62:	d007      	beq.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dd64:	e01c      	b.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dd66:	4bab      	ldr	r3, [pc, #684]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd6a:	4aaa      	ldr	r2, [pc, #680]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dd6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd70:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd72:	e01a      	b.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd78:	3308      	adds	r3, #8
 800dd7a:	2102      	movs	r1, #2
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f002 fa49 	bl	8010214 <RCCEx_PLL2_Config>
 800dd82:	4603      	mov	r3, r0
 800dd84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dd88:	e00f      	b.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dd8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd8e:	3328      	adds	r3, #40	@ 0x28
 800dd90:	2102      	movs	r1, #2
 800dd92:	4618      	mov	r0, r3
 800dd94:	f002 faf0 	bl	8010378 <RCCEx_PLL3_Config>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dd9e:	e004      	b.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dda0:	2301      	movs	r3, #1
 800dda2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dda6:	e000      	b.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dda8:	bf00      	nop
 800ddaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10a      	bne.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800ddb2:	4b98      	ldr	r3, [pc, #608]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ddb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddb6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ddba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddc0:	4a94      	ldr	r2, [pc, #592]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ddc2:	430b      	orrs	r3, r1
 800ddc4:	6513      	str	r3, [r2, #80]	@ 0x50
 800ddc6:	e003      	b.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800ddc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ddcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ddd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800dddc:	f04f 0900 	mov.w	r9, #0
 800dde0:	ea58 0309 	orrs.w	r3, r8, r9
 800dde4:	d047      	beq.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800dde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddec:	2b04      	cmp	r3, #4
 800ddee:	d82a      	bhi.n	800de46 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ddf0:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ddf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf6:	bf00      	nop
 800ddf8:	0800de0d 	.word	0x0800de0d
 800ddfc:	0800de1b 	.word	0x0800de1b
 800de00:	0800de31 	.word	0x0800de31
 800de04:	0800de4f 	.word	0x0800de4f
 800de08:	0800de4f 	.word	0x0800de4f
 800de0c:	4b81      	ldr	r3, [pc, #516]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de10:	4a80      	ldr	r2, [pc, #512]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800de18:	e01a      	b.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800de1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de1e:	3308      	adds	r3, #8
 800de20:	2100      	movs	r1, #0
 800de22:	4618      	mov	r0, r3
 800de24:	f002 f9f6 	bl	8010214 <RCCEx_PLL2_Config>
 800de28:	4603      	mov	r3, r0
 800de2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800de2e:	e00f      	b.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800de30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de34:	3328      	adds	r3, #40	@ 0x28
 800de36:	2100      	movs	r1, #0
 800de38:	4618      	mov	r0, r3
 800de3a:	f002 fa9d 	bl	8010378 <RCCEx_PLL3_Config>
 800de3e:	4603      	mov	r3, r0
 800de40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800de44:	e004      	b.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800de46:	2301      	movs	r3, #1
 800de48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800de4c:	e000      	b.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800de4e:	bf00      	nop
 800de50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10a      	bne.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800de58:	4b6e      	ldr	r3, [pc, #440]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de5c:	f023 0107 	bic.w	r1, r3, #7
 800de60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de66:	4a6b      	ldr	r2, [pc, #428]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de68:	430b      	orrs	r3, r1
 800de6a:	6513      	str	r3, [r2, #80]	@ 0x50
 800de6c:	e003      	b.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800de6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800de76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800de82:	f04f 0b00 	mov.w	fp, #0
 800de86:	ea5a 030b 	orrs.w	r3, sl, fp
 800de8a:	d05b      	beq.n	800df44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800de8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800de94:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800de98:	d03b      	beq.n	800df12 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800de9a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800de9e:	d834      	bhi.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dea4:	d037      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800dea6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800deaa:	d82e      	bhi.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800deac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800deb0:	d033      	beq.n	800df1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800deb2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800deb6:	d828      	bhi.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800deb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800debc:	d01a      	beq.n	800def4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800debe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dec2:	d822      	bhi.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d003      	beq.n	800ded0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800dec8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800decc:	d007      	beq.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800dece:	e01c      	b.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ded0:	4b50      	ldr	r3, [pc, #320]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ded2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded4:	4a4f      	ldr	r2, [pc, #316]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ded6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800deda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dedc:	e01e      	b.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800dede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dee2:	3308      	adds	r3, #8
 800dee4:	2100      	movs	r1, #0
 800dee6:	4618      	mov	r0, r3
 800dee8:	f002 f994 	bl	8010214 <RCCEx_PLL2_Config>
 800deec:	4603      	mov	r3, r0
 800deee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800def2:	e013      	b.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800def4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800def8:	3328      	adds	r3, #40	@ 0x28
 800defa:	2100      	movs	r1, #0
 800defc:	4618      	mov	r0, r3
 800defe:	f002 fa3b 	bl	8010378 <RCCEx_PLL3_Config>
 800df02:	4603      	mov	r3, r0
 800df04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800df08:	e008      	b.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800df0a:	2301      	movs	r3, #1
 800df0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800df10:	e004      	b.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800df12:	bf00      	nop
 800df14:	e002      	b.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800df16:	bf00      	nop
 800df18:	e000      	b.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800df1a:	bf00      	nop
 800df1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10b      	bne.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800df24:	4b3b      	ldr	r3, [pc, #236]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df28:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800df2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800df34:	4a37      	ldr	r2, [pc, #220]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df36:	430b      	orrs	r3, r1
 800df38:	6593      	str	r3, [r2, #88]	@ 0x58
 800df3a:	e003      	b.n	800df44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800df3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800df44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800df50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800df54:	2300      	movs	r3, #0
 800df56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800df5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800df5e:	460b      	mov	r3, r1
 800df60:	4313      	orrs	r3, r2
 800df62:	d05d      	beq.n	800e020 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800df64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800df6c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800df70:	d03b      	beq.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800df72:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800df76:	d834      	bhi.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800df78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800df7c:	d037      	beq.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800df7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800df82:	d82e      	bhi.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800df84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800df88:	d033      	beq.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800df8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800df8e:	d828      	bhi.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800df90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800df94:	d01a      	beq.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800df96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800df9a:	d822      	bhi.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d003      	beq.n	800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800dfa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfa4:	d007      	beq.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800dfa6:	e01c      	b.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dfa8:	4b1a      	ldr	r3, [pc, #104]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfac:	4a19      	ldr	r2, [pc, #100]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dfae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dfb4:	e01e      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfba:	3308      	adds	r3, #8
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f002 f928 	bl	8010214 <RCCEx_PLL2_Config>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dfca:	e013      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dfcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfd0:	3328      	adds	r3, #40	@ 0x28
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f002 f9cf 	bl	8010378 <RCCEx_PLL3_Config>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dfe0:	e008      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dfe8:	e004      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dfea:	bf00      	nop
 800dfec:	e002      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dfee:	bf00      	nop
 800dff0:	e000      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dff2:	bf00      	nop
 800dff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d10d      	bne.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800dffc:	4b05      	ldr	r3, [pc, #20]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e000:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e008:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e00c:	4a01      	ldr	r2, [pc, #4]	@ (800e014 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e00e:	430b      	orrs	r3, r1
 800e010:	6593      	str	r3, [r2, #88]	@ 0x58
 800e012:	e005      	b.n	800e020 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800e014:	58024400 	.word	0x58024400
 800e018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e01c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e028:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e02c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e030:	2300      	movs	r3, #0
 800e032:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e036:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e03a:	460b      	mov	r3, r1
 800e03c:	4313      	orrs	r3, r2
 800e03e:	d03a      	beq.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800e040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e046:	2b30      	cmp	r3, #48	@ 0x30
 800e048:	d01f      	beq.n	800e08a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800e04a:	2b30      	cmp	r3, #48	@ 0x30
 800e04c:	d819      	bhi.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e04e:	2b20      	cmp	r3, #32
 800e050:	d00c      	beq.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e052:	2b20      	cmp	r3, #32
 800e054:	d815      	bhi.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e056:	2b00      	cmp	r3, #0
 800e058:	d019      	beq.n	800e08e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e05a:	2b10      	cmp	r3, #16
 800e05c:	d111      	bne.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e05e:	4baa      	ldr	r3, [pc, #680]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e062:	4aa9      	ldr	r2, [pc, #676]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e068:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e06a:	e011      	b.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800e06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e070:	3308      	adds	r3, #8
 800e072:	2102      	movs	r1, #2
 800e074:	4618      	mov	r0, r3
 800e076:	f002 f8cd 	bl	8010214 <RCCEx_PLL2_Config>
 800e07a:	4603      	mov	r3, r0
 800e07c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e080:	e006      	b.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800e082:	2301      	movs	r3, #1
 800e084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e088:	e002      	b.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800e08a:	bf00      	nop
 800e08c:	e000      	b.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800e08e:	bf00      	nop
 800e090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10a      	bne.n	800e0ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
 800e098:	4b9b      	ldr	r3, [pc, #620]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e09a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e09c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0a6:	4a98      	ldr	r2, [pc, #608]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e0a8:	430b      	orrs	r3, r1
 800e0aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e0ac:	e003      	b.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800e0ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e0c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e0cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	d051      	beq.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800e0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e0e0:	d035      	beq.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800e0e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e0e6:	d82e      	bhi.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e0e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e0ec:	d031      	beq.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800e0ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e0f2:	d828      	bhi.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e0f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e0f8:	d01a      	beq.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e0fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e0fe:	d822      	bhi.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e100:	2b00      	cmp	r3, #0
 800e102:	d003      	beq.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800e104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e108:	d007      	beq.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800e10a:	e01c      	b.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e10c:	4b7e      	ldr	r3, [pc, #504]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e110:	4a7d      	ldr	r2, [pc, #500]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e116:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e118:	e01c      	b.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e11e:	3308      	adds	r3, #8
 800e120:	2100      	movs	r1, #0
 800e122:	4618      	mov	r0, r3
 800e124:	f002 f876 	bl	8010214 <RCCEx_PLL2_Config>
 800e128:	4603      	mov	r3, r0
 800e12a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e12e:	e011      	b.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e134:	3328      	adds	r3, #40	@ 0x28
 800e136:	2100      	movs	r1, #0
 800e138:	4618      	mov	r0, r3
 800e13a:	f002 f91d 	bl	8010378 <RCCEx_PLL3_Config>
 800e13e:	4603      	mov	r3, r0
 800e140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e144:	e006      	b.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e146:	2301      	movs	r3, #1
 800e148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e14c:	e002      	b.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e14e:	bf00      	nop
 800e150:	e000      	b.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e152:	bf00      	nop
 800e154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10a      	bne.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x462>
 800e15c:	4b6a      	ldr	r3, [pc, #424]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e15e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e160:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e16a:	4a67      	ldr	r2, [pc, #412]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e16c:	430b      	orrs	r3, r1
 800e16e:	6513      	str	r3, [r2, #80]	@ 0x50
 800e170:	e003      	b.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800e172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e176:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e182:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e186:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e18a:	2300      	movs	r3, #0
 800e18c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e190:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e194:	460b      	mov	r3, r1
 800e196:	4313      	orrs	r3, r2
 800e198:	d053      	beq.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800e19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e19e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e1a4:	d033      	beq.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800e1a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e1aa:	d82c      	bhi.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e1ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e1b0:	d02f      	beq.n	800e212 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800e1b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e1b6:	d826      	bhi.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e1b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e1bc:	d02b      	beq.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e1be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e1c2:	d820      	bhi.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e1c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e1c8:	d012      	beq.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800e1ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e1ce:	d81a      	bhi.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d022      	beq.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e1d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1d8:	d115      	bne.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1de:	3308      	adds	r3, #8
 800e1e0:	2101      	movs	r1, #1
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f002 f816 	bl	8010214 <RCCEx_PLL2_Config>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e1ee:	e015      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1f4:	3328      	adds	r3, #40	@ 0x28
 800e1f6:	2101      	movs	r1, #1
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f002 f8bd 	bl	8010378 <RCCEx_PLL3_Config>
 800e1fe:	4603      	mov	r3, r0
 800e200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e204:	e00a      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e206:	2301      	movs	r3, #1
 800e208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e20c:	e006      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e20e:	bf00      	nop
 800e210:	e004      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e212:	bf00      	nop
 800e214:	e002      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e216:	bf00      	nop
 800e218:	e000      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e21a:	bf00      	nop
 800e21c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e220:	2b00      	cmp	r3, #0
 800e222:	d10a      	bne.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800e224:	4b38      	ldr	r3, [pc, #224]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e228:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e232:	4a35      	ldr	r2, [pc, #212]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e234:	430b      	orrs	r3, r1
 800e236:	6513      	str	r3, [r2, #80]	@ 0x50
 800e238:	e003      	b.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800e23a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e23e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e24e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e252:	2300      	movs	r3, #0
 800e254:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e258:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e25c:	460b      	mov	r3, r1
 800e25e:	4313      	orrs	r3, r2
 800e260:	d058      	beq.n	800e314 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e266:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e26a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e26e:	d033      	beq.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e270:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e274:	d82c      	bhi.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e27a:	d02f      	beq.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e27c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e280:	d826      	bhi.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e282:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e286:	d02b      	beq.n	800e2e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e288:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e28c:	d820      	bhi.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e28e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e292:	d012      	beq.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800e294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e298:	d81a      	bhi.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d022      	beq.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e29e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2a2:	d115      	bne.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2a8:	3308      	adds	r3, #8
 800e2aa:	2101      	movs	r1, #1
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f001 ffb1 	bl	8010214 <RCCEx_PLL2_Config>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e2b8:	e015      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2be:	3328      	adds	r3, #40	@ 0x28
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f002 f858 	bl	8010378 <RCCEx_PLL3_Config>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e2ce:	e00a      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e2d6:	e006      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e2d8:	bf00      	nop
 800e2da:	e004      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e2dc:	bf00      	nop
 800e2de:	e002      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e2e0:	bf00      	nop
 800e2e2:	e000      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e2e4:	bf00      	nop
 800e2e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10e      	bne.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800e2ee:	4b06      	ldr	r3, [pc, #24]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e2f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2f2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e2fe:	4a02      	ldr	r2, [pc, #8]	@ (800e308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e300:	430b      	orrs	r3, r1
 800e302:	6593      	str	r3, [r2, #88]	@ 0x58
 800e304:	e006      	b.n	800e314 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e306:	bf00      	nop
 800e308:	58024400 	.word	0x58024400
 800e30c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e310:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e324:	2300      	movs	r3, #0
 800e326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e32a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e32e:	460b      	mov	r3, r1
 800e330:	4313      	orrs	r3, r2
 800e332:	d037      	beq.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800e334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e33a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e33e:	d00e      	beq.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e344:	d816      	bhi.n	800e374 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e346:	2b00      	cmp	r3, #0
 800e348:	d018      	beq.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800e34a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e34e:	d111      	bne.n	800e374 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e350:	4bc4      	ldr	r3, [pc, #784]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e354:	4ac3      	ldr	r2, [pc, #780]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e35a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e35c:	e00f      	b.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e362:	3308      	adds	r3, #8
 800e364:	2101      	movs	r1, #1
 800e366:	4618      	mov	r0, r3
 800e368:	f001 ff54 	bl	8010214 <RCCEx_PLL2_Config>
 800e36c:	4603      	mov	r3, r0
 800e36e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e372:	e004      	b.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e374:	2301      	movs	r3, #1
 800e376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e37a:	e000      	b.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e37c:	bf00      	nop
 800e37e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e382:	2b00      	cmp	r3, #0
 800e384:	d10a      	bne.n	800e39c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800e386:	4bb7      	ldr	r3, [pc, #732]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e38a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e394:	4ab3      	ldr	r2, [pc, #716]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e396:	430b      	orrs	r3, r1
 800e398:	6513      	str	r3, [r2, #80]	@ 0x50
 800e39a:	e003      	b.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800e39c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e3b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e3ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e3be:	460b      	mov	r3, r1
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	d039      	beq.n	800e438 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800e3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e3ca:	2b03      	cmp	r3, #3
 800e3cc:	d81c      	bhi.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e3ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e3d4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d4:	0800e411 	.word	0x0800e411
 800e3d8:	0800e3e5 	.word	0x0800e3e5
 800e3dc:	0800e3f3 	.word	0x0800e3f3
 800e3e0:	0800e411 	.word	0x0800e411
 800e3e4:	4b9f      	ldr	r3, [pc, #636]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3e8:	4a9e      	ldr	r2, [pc, #632]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e3ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e3f0:	e00f      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800e3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3f6:	3308      	adds	r3, #8
 800e3f8:	2102      	movs	r1, #2
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f001 ff0a 	bl	8010214 <RCCEx_PLL2_Config>
 800e400:	4603      	mov	r3, r0
 800e402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e406:	e004      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800e408:	2301      	movs	r3, #1
 800e40a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e40e:	e000      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800e410:	bf00      	nop
 800e412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10a      	bne.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0x720>
 800e41a:	4b92      	ldr	r3, [pc, #584]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e41c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e41e:	f023 0103 	bic.w	r1, r3, #3
 800e422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e428:	4a8e      	ldr	r2, [pc, #568]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e42a:	430b      	orrs	r3, r1
 800e42c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e42e:	e003      	b.n	800e438 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800e430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e440:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e444:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e448:	2300      	movs	r3, #0
 800e44a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e44e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e452:	460b      	mov	r3, r1
 800e454:	4313      	orrs	r3, r2
 800e456:	f000 8099 	beq.w	800e58c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e45a:	4b83      	ldr	r3, [pc, #524]	@ (800e668 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	4a82      	ldr	r2, [pc, #520]	@ (800e668 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e464:	6013      	str	r3, [r2, #0]
 800e466:	f7fa fb45 	bl	8008af4 <HAL_GetTick>
 800e46a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 800e46e:	e00b      	b.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x778>
 800e470:	f7fa fb40 	bl	8008af4 <HAL_GetTick>
 800e474:	4602      	mov	r2, r0
 800e476:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	2b64      	cmp	r3, #100	@ 0x64
 800e47e:	d903      	bls.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x778>
 800e480:	2303      	movs	r3, #3
 800e482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e486:	e005      	b.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x784>
 800e488:	4b77      	ldr	r3, [pc, #476]	@ (800e668 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e490:	2b00      	cmp	r3, #0
 800e492:	d0ed      	beq.n	800e470 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800e494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d173      	bne.n	800e584 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800e49c:	4b71      	ldr	r3, [pc, #452]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e49e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e4a8:	4053      	eors	r3, r2
 800e4aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d015      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800e4b2:	4b6c      	ldr	r3, [pc, #432]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e4ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e4be:	4b69      	ldr	r3, [pc, #420]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4c2:	4a68      	ldr	r2, [pc, #416]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e4c8:	6713      	str	r3, [r2, #112]	@ 0x70
 800e4ca:	4b66      	ldr	r3, [pc, #408]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4ce:	4a65      	ldr	r2, [pc, #404]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e4d4:	6713      	str	r3, [r2, #112]	@ 0x70
 800e4d6:	4a63      	ldr	r2, [pc, #396]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e4dc:	6713      	str	r3, [r2, #112]	@ 0x70
 800e4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e4e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4ea:	d118      	bne.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800e4ec:	f7fa fb02 	bl	8008af4 <HAL_GetTick>
 800e4f0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 800e4f4:	e00d      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800e4f6:	f7fa fafd 	bl	8008af4 <HAL_GetTick>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e500:	1ad2      	subs	r2, r2, r3
 800e502:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e506:	429a      	cmp	r2, r3
 800e508:	d903      	bls.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800e50a:	2303      	movs	r3, #3
 800e50c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e510:	e005      	b.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800e512:	4b54      	ldr	r3, [pc, #336]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e516:	f003 0302 	and.w	r3, r3, #2
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0eb      	beq.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 800e51e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e522:	2b00      	cmp	r3, #0
 800e524:	d129      	bne.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800e526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e52a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e52e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e536:	d10e      	bne.n	800e556 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e538:	4b4a      	ldr	r3, [pc, #296]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e53a:	691b      	ldr	r3, [r3, #16]
 800e53c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e544:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e548:	091a      	lsrs	r2, r3, #4
 800e54a:	4b48      	ldr	r3, [pc, #288]	@ (800e66c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e54c:	4013      	ands	r3, r2
 800e54e:	4a45      	ldr	r2, [pc, #276]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e550:	430b      	orrs	r3, r1
 800e552:	6113      	str	r3, [r2, #16]
 800e554:	e005      	b.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e556:	4b43      	ldr	r3, [pc, #268]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	4a42      	ldr	r2, [pc, #264]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e55c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e560:	6113      	str	r3, [r2, #16]
 800e562:	4b40      	ldr	r3, [pc, #256]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e564:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e56a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e56e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e572:	4a3c      	ldr	r2, [pc, #240]	@ (800e664 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e574:	430b      	orrs	r3, r1
 800e576:	6713      	str	r3, [r2, #112]	@ 0x70
 800e578:	e008      	b.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e57a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e57e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e582:	e003      	b.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e588:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	f002 0301 	and.w	r3, r2, #1
 800e598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e59c:	2300      	movs	r3, #0
 800e59e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e5a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	f000 808f 	beq.w	800e6cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800e5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5b4:	2b28      	cmp	r3, #40	@ 0x28
 800e5b6:	d871      	bhi.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e5b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5be:	bf00      	nop
 800e5c0:	0800e6a5 	.word	0x0800e6a5
 800e5c4:	0800e69d 	.word	0x0800e69d
 800e5c8:	0800e69d 	.word	0x0800e69d
 800e5cc:	0800e69d 	.word	0x0800e69d
 800e5d0:	0800e69d 	.word	0x0800e69d
 800e5d4:	0800e69d 	.word	0x0800e69d
 800e5d8:	0800e69d 	.word	0x0800e69d
 800e5dc:	0800e69d 	.word	0x0800e69d
 800e5e0:	0800e671 	.word	0x0800e671
 800e5e4:	0800e69d 	.word	0x0800e69d
 800e5e8:	0800e69d 	.word	0x0800e69d
 800e5ec:	0800e69d 	.word	0x0800e69d
 800e5f0:	0800e69d 	.word	0x0800e69d
 800e5f4:	0800e69d 	.word	0x0800e69d
 800e5f8:	0800e69d 	.word	0x0800e69d
 800e5fc:	0800e69d 	.word	0x0800e69d
 800e600:	0800e687 	.word	0x0800e687
 800e604:	0800e69d 	.word	0x0800e69d
 800e608:	0800e69d 	.word	0x0800e69d
 800e60c:	0800e69d 	.word	0x0800e69d
 800e610:	0800e69d 	.word	0x0800e69d
 800e614:	0800e69d 	.word	0x0800e69d
 800e618:	0800e69d 	.word	0x0800e69d
 800e61c:	0800e69d 	.word	0x0800e69d
 800e620:	0800e6a5 	.word	0x0800e6a5
 800e624:	0800e69d 	.word	0x0800e69d
 800e628:	0800e69d 	.word	0x0800e69d
 800e62c:	0800e69d 	.word	0x0800e69d
 800e630:	0800e69d 	.word	0x0800e69d
 800e634:	0800e69d 	.word	0x0800e69d
 800e638:	0800e69d 	.word	0x0800e69d
 800e63c:	0800e69d 	.word	0x0800e69d
 800e640:	0800e6a5 	.word	0x0800e6a5
 800e644:	0800e69d 	.word	0x0800e69d
 800e648:	0800e69d 	.word	0x0800e69d
 800e64c:	0800e69d 	.word	0x0800e69d
 800e650:	0800e69d 	.word	0x0800e69d
 800e654:	0800e69d 	.word	0x0800e69d
 800e658:	0800e69d 	.word	0x0800e69d
 800e65c:	0800e69d 	.word	0x0800e69d
 800e660:	0800e6a5 	.word	0x0800e6a5
 800e664:	58024400 	.word	0x58024400
 800e668:	58024800 	.word	0x58024800
 800e66c:	00ffffcf 	.word	0x00ffffcf
 800e670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e674:	3308      	adds	r3, #8
 800e676:	2101      	movs	r1, #1
 800e678:	4618      	mov	r0, r3
 800e67a:	f001 fdcb 	bl	8010214 <RCCEx_PLL2_Config>
 800e67e:	4603      	mov	r3, r0
 800e680:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e684:	e00f      	b.n	800e6a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
 800e686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e68a:	3328      	adds	r3, #40	@ 0x28
 800e68c:	2101      	movs	r1, #1
 800e68e:	4618      	mov	r0, r3
 800e690:	f001 fe72 	bl	8010378 <RCCEx_PLL3_Config>
 800e694:	4603      	mov	r3, r0
 800e696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e69a:	e004      	b.n	800e6a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
 800e69c:	2301      	movs	r3, #1
 800e69e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e6a2:	e000      	b.n	800e6a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
 800e6a4:	bf00      	nop
 800e6a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10a      	bne.n	800e6c4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 800e6ae:	4bbf      	ldr	r3, [pc, #764]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e6b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6bc:	4abb      	ldr	r2, [pc, #748]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e6be:	430b      	orrs	r3, r1
 800e6c0:	6553      	str	r3, [r2, #84]	@ 0x54
 800e6c2:	e003      	b.n	800e6cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800e6c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d4:	f002 0302 	and.w	r3, r2, #2
 800e6d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e6dc:	2300      	movs	r3, #0
 800e6de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e6e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	d041      	beq.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800e6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6f2:	2b05      	cmp	r3, #5
 800e6f4:	d824      	bhi.n	800e740 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800e6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e6fc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800e6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6fc:	0800e749 	.word	0x0800e749
 800e700:	0800e715 	.word	0x0800e715
 800e704:	0800e72b 	.word	0x0800e72b
 800e708:	0800e749 	.word	0x0800e749
 800e70c:	0800e749 	.word	0x0800e749
 800e710:	0800e749 	.word	0x0800e749
 800e714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e718:	3308      	adds	r3, #8
 800e71a:	2101      	movs	r1, #1
 800e71c:	4618      	mov	r0, r3
 800e71e:	f001 fd79 	bl	8010214 <RCCEx_PLL2_Config>
 800e722:	4603      	mov	r3, r0
 800e724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e728:	e00f      	b.n	800e74a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e72e:	3328      	adds	r3, #40	@ 0x28
 800e730:	2101      	movs	r1, #1
 800e732:	4618      	mov	r0, r3
 800e734:	f001 fe20 	bl	8010378 <RCCEx_PLL3_Config>
 800e738:	4603      	mov	r3, r0
 800e73a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e73e:	e004      	b.n	800e74a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e740:	2301      	movs	r3, #1
 800e742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e746:	e000      	b.n	800e74a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e748:	bf00      	nop
 800e74a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10a      	bne.n	800e768 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800e752:	4b96      	ldr	r3, [pc, #600]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e756:	f023 0107 	bic.w	r1, r3, #7
 800e75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e75e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e760:	4a92      	ldr	r2, [pc, #584]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e762:	430b      	orrs	r3, r1
 800e764:	6553      	str	r3, [r2, #84]	@ 0x54
 800e766:	e003      	b.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800e768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e76c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e778:	f002 0304 	and.w	r3, r2, #4
 800e77c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e780:	2300      	movs	r3, #0
 800e782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e786:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e78a:	460b      	mov	r3, r1
 800e78c:	4313      	orrs	r3, r2
 800e78e:	d044      	beq.n	800e81a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e798:	2b05      	cmp	r3, #5
 800e79a:	d825      	bhi.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800e79c:	a201      	add	r2, pc, #4	@ (adr r2, 800e7a4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800e79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a2:	bf00      	nop
 800e7a4:	0800e7f1 	.word	0x0800e7f1
 800e7a8:	0800e7bd 	.word	0x0800e7bd
 800e7ac:	0800e7d3 	.word	0x0800e7d3
 800e7b0:	0800e7f1 	.word	0x0800e7f1
 800e7b4:	0800e7f1 	.word	0x0800e7f1
 800e7b8:	0800e7f1 	.word	0x0800e7f1
 800e7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7c0:	3308      	adds	r3, #8
 800e7c2:	2101      	movs	r1, #1
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f001 fd25 	bl	8010214 <RCCEx_PLL2_Config>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e7d0:	e00f      	b.n	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800e7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d6:	3328      	adds	r3, #40	@ 0x28
 800e7d8:	2101      	movs	r1, #1
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f001 fdcc 	bl	8010378 <RCCEx_PLL3_Config>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e7e6:	e004      	b.n	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e7ee:	e000      	b.n	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800e7f0:	bf00      	nop
 800e7f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d10b      	bne.n	800e812 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800e7fa:	4b6c      	ldr	r3, [pc, #432]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e7fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7fe:	f023 0107 	bic.w	r1, r3, #7
 800e802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e80a:	4a68      	ldr	r2, [pc, #416]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e80c:	430b      	orrs	r3, r1
 800e80e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e810:	e003      	b.n	800e81a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e816:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	f002 0320 	and.w	r3, r2, #32
 800e826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e82a:	2300      	movs	r3, #0
 800e82c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e830:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e834:	460b      	mov	r3, r1
 800e836:	4313      	orrs	r3, r2
 800e838:	d055      	beq.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800e83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e83e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e846:	d033      	beq.n	800e8b0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800e848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e84c:	d82c      	bhi.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e84e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e852:	d02f      	beq.n	800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e858:	d826      	bhi.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e85a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e85e:	d02b      	beq.n	800e8b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e860:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e864:	d820      	bhi.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e86a:	d012      	beq.n	800e892 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800e86c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e870:	d81a      	bhi.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e872:	2b00      	cmp	r3, #0
 800e874:	d022      	beq.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e87a:	d115      	bne.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e880:	3308      	adds	r3, #8
 800e882:	2100      	movs	r1, #0
 800e884:	4618      	mov	r0, r3
 800e886:	f001 fcc5 	bl	8010214 <RCCEx_PLL2_Config>
 800e88a:	4603      	mov	r3, r0
 800e88c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e890:	e015      	b.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e896:	3328      	adds	r3, #40	@ 0x28
 800e898:	2102      	movs	r1, #2
 800e89a:	4618      	mov	r0, r3
 800e89c:	f001 fd6c 	bl	8010378 <RCCEx_PLL3_Config>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e8a6:	e00a      	b.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e8ae:	e006      	b.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e8b0:	bf00      	nop
 800e8b2:	e004      	b.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e8b4:	bf00      	nop
 800e8b6:	e002      	b.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e8b8:	bf00      	nop
 800e8ba:	e000      	b.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e8bc:	bf00      	nop
 800e8be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d10b      	bne.n	800e8de <HAL_RCCEx_PeriphCLKConfig+0xbce>
 800e8c6:	4b39      	ldr	r3, [pc, #228]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8d6:	4a35      	ldr	r2, [pc, #212]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e8d8:	430b      	orrs	r3, r1
 800e8da:	6553      	str	r3, [r2, #84]	@ 0x54
 800e8dc:	e003      	b.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800e8de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e8f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e8fc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e900:	460b      	mov	r3, r1
 800e902:	4313      	orrs	r3, r2
 800e904:	d058      	beq.n	800e9b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e90a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e90e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e912:	d033      	beq.n	800e97c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800e914:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e918:	d82c      	bhi.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e91a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e91e:	d02f      	beq.n	800e980 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e924:	d826      	bhi.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e926:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e92a:	d02b      	beq.n	800e984 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800e92c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e930:	d820      	bhi.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e936:	d012      	beq.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800e938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e93c:	d81a      	bhi.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d022      	beq.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e946:	d115      	bne.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e94c:	3308      	adds	r3, #8
 800e94e:	2100      	movs	r1, #0
 800e950:	4618      	mov	r0, r3
 800e952:	f001 fc5f 	bl	8010214 <RCCEx_PLL2_Config>
 800e956:	4603      	mov	r3, r0
 800e958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e95c:	e015      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e962:	3328      	adds	r3, #40	@ 0x28
 800e964:	2102      	movs	r1, #2
 800e966:	4618      	mov	r0, r3
 800e968:	f001 fd06 	bl	8010378 <RCCEx_PLL3_Config>
 800e96c:	4603      	mov	r3, r0
 800e96e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e972:	e00a      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e974:	2301      	movs	r3, #1
 800e976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e97a:	e006      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e97c:	bf00      	nop
 800e97e:	e004      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e980:	bf00      	nop
 800e982:	e002      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e984:	bf00      	nop
 800e986:	e000      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e988:	bf00      	nop
 800e98a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10e      	bne.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
 800e992:	4b06      	ldr	r3, [pc, #24]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e996:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e99e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e9a2:	4a02      	ldr	r2, [pc, #8]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e9a4:	430b      	orrs	r3, r1
 800e9a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800e9a8:	e006      	b.n	800e9b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e9aa:	bf00      	nop
 800e9ac:	58024400 	.word	0x58024400
 800e9b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e9c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e9ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	d055      	beq.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800e9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e9e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e9e4:	d033      	beq.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800e9e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e9ea:	d82c      	bhi.n	800ea46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e9ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9f0:	d02f      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800e9f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9f6:	d826      	bhi.n	800ea46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e9f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e9fc:	d02b      	beq.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800e9fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ea02:	d820      	bhi.n	800ea46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ea04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ea08:	d012      	beq.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ea0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ea0e:	d81a      	bhi.n	800ea46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d022      	beq.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ea14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea18:	d115      	bne.n	800ea46 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ea1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea1e:	3308      	adds	r3, #8
 800ea20:	2100      	movs	r1, #0
 800ea22:	4618      	mov	r0, r3
 800ea24:	f001 fbf6 	bl	8010214 <RCCEx_PLL2_Config>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ea2e:	e015      	b.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800ea30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea34:	3328      	adds	r3, #40	@ 0x28
 800ea36:	2102      	movs	r1, #2
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f001 fc9d 	bl	8010378 <RCCEx_PLL3_Config>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ea44:	e00a      	b.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800ea46:	2301      	movs	r3, #1
 800ea48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ea4c:	e006      	b.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800ea4e:	bf00      	nop
 800ea50:	e004      	b.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800ea52:	bf00      	nop
 800ea54:	e002      	b.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800ea56:	bf00      	nop
 800ea58:	e000      	b.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800ea5a:	bf00      	nop
 800ea5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10b      	bne.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800ea64:	4ba0      	ldr	r3, [pc, #640]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ea66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ea6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ea74:	4a9c      	ldr	r2, [pc, #624]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ea76:	430b      	orrs	r3, r1
 800ea78:	6593      	str	r3, [r2, #88]	@ 0x58
 800ea7a:	e003      	b.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800ea7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ea84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8c:	f002 0308 	and.w	r3, r2, #8
 800ea90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ea94:	2300      	movs	r3, #0
 800ea96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ea9a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	d01e      	beq.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800eaa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eaac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eab0:	d10c      	bne.n	800eacc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800eab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eab6:	3328      	adds	r3, #40	@ 0x28
 800eab8:	2102      	movs	r1, #2
 800eaba:	4618      	mov	r0, r3
 800eabc:	f001 fc5c 	bl	8010378 <RCCEx_PLL3_Config>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d002      	beq.n	800eacc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800eac6:	2301      	movs	r3, #1
 800eac8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800eacc:	4b86      	ldr	r3, [pc, #536]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ead0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ead4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ead8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eadc:	4a82      	ldr	r2, [pc, #520]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eade:	430b      	orrs	r3, r1
 800eae0:	6553      	str	r3, [r2, #84]	@ 0x54
 800eae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaea:	f002 0310 	and.w	r3, r2, #16
 800eaee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eaf8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800eafc:	460b      	mov	r3, r1
 800eafe:	4313      	orrs	r3, r2
 800eb00:	d01e      	beq.n	800eb40 <HAL_RCCEx_PeriphCLKConfig+0xe30>
 800eb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eb0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb0e:	d10c      	bne.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 800eb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb14:	3328      	adds	r3, #40	@ 0x28
 800eb16:	2102      	movs	r1, #2
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f001 fc2d 	bl	8010378 <RCCEx_PLL3_Config>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d002      	beq.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 800eb24:	2301      	movs	r3, #1
 800eb26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800eb2a:	4b6f      	ldr	r3, [pc, #444]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800eb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eb3a:	4a6b      	ldr	r2, [pc, #428]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb3c:	430b      	orrs	r3, r1
 800eb3e:	6593      	str	r3, [r2, #88]	@ 0x58
 800eb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800eb4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eb4e:	2300      	movs	r3, #0
 800eb50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eb52:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800eb56:	460b      	mov	r3, r1
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	d03e      	beq.n	800ebda <HAL_RCCEx_PeriphCLKConfig+0xeca>
 800eb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eb64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eb68:	d022      	beq.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800eb6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eb6e:	d81b      	bhi.n	800eba8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d003      	beq.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800eb74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb78:	d00b      	beq.n	800eb92 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800eb7a:	e015      	b.n	800eba8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800eb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb80:	3308      	adds	r3, #8
 800eb82:	2100      	movs	r1, #0
 800eb84:	4618      	mov	r0, r3
 800eb86:	f001 fb45 	bl	8010214 <RCCEx_PLL2_Config>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eb90:	e00f      	b.n	800ebb2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800eb92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb96:	3328      	adds	r3, #40	@ 0x28
 800eb98:	2102      	movs	r1, #2
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f001 fbec 	bl	8010378 <RCCEx_PLL3_Config>
 800eba0:	4603      	mov	r3, r0
 800eba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eba6:	e004      	b.n	800ebb2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800eba8:	2301      	movs	r3, #1
 800ebaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ebae:	e000      	b.n	800ebb2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800ebb0:	bf00      	nop
 800ebb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d10b      	bne.n	800ebd2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
 800ebba:	4b4b      	ldr	r3, [pc, #300]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ebbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ebc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ebca:	4a47      	ldr	r2, [pc, #284]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ebcc:	430b      	orrs	r3, r1
 800ebce:	6593      	str	r3, [r2, #88]	@ 0x58
 800ebd0:	e003      	b.n	800ebda <HAL_RCCEx_PeriphCLKConfig+0xeca>
 800ebd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ebda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ebe6:	673b      	str	r3, [r7, #112]	@ 0x70
 800ebe8:	2300      	movs	r3, #0
 800ebea:	677b      	str	r3, [r7, #116]	@ 0x74
 800ebec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	d03b      	beq.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 800ebf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ec02:	d01f      	beq.n	800ec44 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ec04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ec08:	d818      	bhi.n	800ec3c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ec0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec0e:	d003      	beq.n	800ec18 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ec10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ec14:	d007      	beq.n	800ec26 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ec16:	e011      	b.n	800ec3c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ec18:	4b33      	ldr	r3, [pc, #204]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec1c:	4a32      	ldr	r2, [pc, #200]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ec22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ec24:	e00f      	b.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 800ec26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec2a:	3328      	adds	r3, #40	@ 0x28
 800ec2c:	2101      	movs	r1, #1
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f001 fba2 	bl	8010378 <RCCEx_PLL3_Config>
 800ec34:	4603      	mov	r3, r0
 800ec36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ec3a:	e004      	b.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ec42:	e000      	b.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 800ec44:	bf00      	nop
 800ec46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10b      	bne.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0xf56>
 800ec4e:	4b26      	ldr	r3, [pc, #152]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ec56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec5e:	4a22      	ldr	r2, [pc, #136]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec60:	430b      	orrs	r3, r1
 800ec62:	6553      	str	r3, [r2, #84]	@ 0x54
 800ec64:	e003      	b.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 800ec66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ec6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ec7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ec80:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ec84:	460b      	mov	r3, r1
 800ec86:	4313      	orrs	r3, r2
 800ec88:	d034      	beq.n	800ecf4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ec8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d003      	beq.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ec94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec98:	d007      	beq.n	800ecaa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ec9a:	e011      	b.n	800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 800ec9c:	4b12      	ldr	r3, [pc, #72]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eca0:	4a11      	ldr	r2, [pc, #68]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eca6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800eca8:	e00e      	b.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800ecaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecae:	3308      	adds	r3, #8
 800ecb0:	2102      	movs	r1, #2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f001 faae 	bl	8010214 <RCCEx_PLL2_Config>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ecbe:	e003      	b.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ecc6:	bf00      	nop
 800ecc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d10d      	bne.n	800ecec <HAL_RCCEx_PeriphCLKConfig+0xfdc>
 800ecd0:	4b05      	ldr	r3, [pc, #20]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ecd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ecd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecde:	4a02      	ldr	r2, [pc, #8]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ece0:	430b      	orrs	r3, r1
 800ece2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ece4:	e006      	b.n	800ecf4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ece6:	bf00      	nop
 800ece8:	58024400 	.word	0x58024400
 800ecec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ecf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ed00:	663b      	str	r3, [r7, #96]	@ 0x60
 800ed02:	2300      	movs	r3, #0
 800ed04:	667b      	str	r3, [r7, #100]	@ 0x64
 800ed06:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	d00c      	beq.n	800ed2a <HAL_RCCEx_PeriphCLKConfig+0x101a>
 800ed10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed14:	3328      	adds	r3, #40	@ 0x28
 800ed16:	2102      	movs	r1, #2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f001 fb2d 	bl	8010378 <RCCEx_PLL3_Config>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d002      	beq.n	800ed2a <HAL_RCCEx_PeriphCLKConfig+0x101a>
 800ed24:	2301      	movs	r3, #1
 800ed26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ed2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ed36:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ed38:	2300      	movs	r3, #0
 800ed3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed3c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ed40:	460b      	mov	r3, r1
 800ed42:	4313      	orrs	r3, r2
 800ed44:	d036      	beq.n	800edb4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 800ed46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed50:	d018      	beq.n	800ed84 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ed52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed56:	d811      	bhi.n	800ed7c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ed58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed5c:	d014      	beq.n	800ed88 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ed5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed62:	d80b      	bhi.n	800ed7c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d011      	beq.n	800ed8c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ed68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed6c:	d106      	bne.n	800ed7c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ed6e:	4bb7      	ldr	r3, [pc, #732]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed72:	4ab6      	ldr	r2, [pc, #728]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed78:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ed7a:	e008      	b.n	800ed8e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ed82:	e004      	b.n	800ed8e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ed84:	bf00      	nop
 800ed86:	e002      	b.n	800ed8e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ed88:	bf00      	nop
 800ed8a:	e000      	b.n	800ed8e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ed8c:	bf00      	nop
 800ed8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10a      	bne.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x109c>
 800ed96:	4bad      	ldr	r3, [pc, #692]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ed9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eda2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eda4:	4aa9      	ldr	r2, [pc, #676]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eda6:	430b      	orrs	r3, r1
 800eda8:	6553      	str	r3, [r2, #84]	@ 0x54
 800edaa:	e003      	b.n	800edb4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 800edac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800edb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800edc0:	653b      	str	r3, [r7, #80]	@ 0x50
 800edc2:	2300      	movs	r3, #0
 800edc4:	657b      	str	r3, [r7, #84]	@ 0x54
 800edc6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800edca:	460b      	mov	r3, r1
 800edcc:	4313      	orrs	r3, r2
 800edce:	d009      	beq.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
 800edd0:	4b9e      	ldr	r3, [pc, #632]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800edd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800edd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edde:	4a9b      	ldr	r2, [pc, #620]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ede0:	430b      	orrs	r3, r1
 800ede2:	6513      	str	r3, [r2, #80]	@ 0x50
 800ede4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ede8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edec:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800edf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800edf2:	2300      	movs	r3, #0
 800edf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800edf6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800edfa:	460b      	mov	r3, r1
 800edfc:	4313      	orrs	r3, r2
 800edfe:	d009      	beq.n	800ee14 <HAL_RCCEx_PeriphCLKConfig+0x1104>
 800ee00:	4b92      	ldr	r3, [pc, #584]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee04:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ee08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee0e:	4a8f      	ldr	r2, [pc, #572]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee10:	430b      	orrs	r3, r1
 800ee12:	6513      	str	r3, [r2, #80]	@ 0x50
 800ee14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ee20:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee22:	2300      	movs	r3, #0
 800ee24:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee26:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ee2a:	460b      	mov	r3, r1
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	d00e      	beq.n	800ee4e <HAL_RCCEx_PeriphCLKConfig+0x113e>
 800ee30:	4b86      	ldr	r3, [pc, #536]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee32:	691b      	ldr	r3, [r3, #16]
 800ee34:	4a85      	ldr	r2, [pc, #532]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ee3a:	6113      	str	r3, [r2, #16]
 800ee3c:	4b83      	ldr	r3, [pc, #524]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee3e:	6919      	ldr	r1, [r3, #16]
 800ee40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ee48:	4a80      	ldr	r2, [pc, #512]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee4a:	430b      	orrs	r3, r1
 800ee4c:	6113      	str	r3, [r2, #16]
 800ee4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee56:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ee5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee60:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ee64:	460b      	mov	r3, r1
 800ee66:	4313      	orrs	r3, r2
 800ee68:	d009      	beq.n	800ee7e <HAL_RCCEx_PeriphCLKConfig+0x116e>
 800ee6a:	4b78      	ldr	r3, [pc, #480]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee6e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ee72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee78:	4a74      	ldr	r2, [pc, #464]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee7a:	430b      	orrs	r3, r1
 800ee7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ee7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee86:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ee8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee90:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ee94:	460b      	mov	r3, r1
 800ee96:	4313      	orrs	r3, r2
 800ee98:	d00a      	beq.n	800eeb0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
 800ee9a:	4b6c      	ldr	r3, [pc, #432]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee9e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800eea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eeaa:	4a68      	ldr	r2, [pc, #416]	@ (800f04c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eeac:	430b      	orrs	r3, r1
 800eeae:	6553      	str	r3, [r2, #84]	@ 0x54
 800eeb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb8:	2100      	movs	r1, #0
 800eeba:	62b9      	str	r1, [r7, #40]	@ 0x28
 800eebc:	f003 0301 	and.w	r3, r3, #1
 800eec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eec2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800eec6:	460b      	mov	r3, r1
 800eec8:	4313      	orrs	r3, r2
 800eeca:	d011      	beq.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 800eecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eed0:	3308      	adds	r3, #8
 800eed2:	2100      	movs	r1, #0
 800eed4:	4618      	mov	r0, r3
 800eed6:	f001 f99d 	bl	8010214 <RCCEx_PLL2_Config>
 800eeda:	4603      	mov	r3, r0
 800eedc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d003      	beq.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 800eee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eeec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800eef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	2100      	movs	r1, #0
 800eefa:	6239      	str	r1, [r7, #32]
 800eefc:	f003 0302 	and.w	r3, r3, #2
 800ef00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ef06:	460b      	mov	r3, r1
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	d011      	beq.n	800ef30 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 800ef0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef10:	3308      	adds	r3, #8
 800ef12:	2101      	movs	r1, #1
 800ef14:	4618      	mov	r0, r3
 800ef16:	f001 f97d 	bl	8010214 <RCCEx_PLL2_Config>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ef20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d003      	beq.n	800ef30 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 800ef28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ef30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef38:	2100      	movs	r1, #0
 800ef3a:	61b9      	str	r1, [r7, #24]
 800ef3c:	f003 0304 	and.w	r3, r3, #4
 800ef40:	61fb      	str	r3, [r7, #28]
 800ef42:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ef46:	460b      	mov	r3, r1
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	d011      	beq.n	800ef70 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800ef4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef50:	3308      	adds	r3, #8
 800ef52:	2102      	movs	r1, #2
 800ef54:	4618      	mov	r0, r3
 800ef56:	f001 f95d 	bl	8010214 <RCCEx_PLL2_Config>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ef60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d003      	beq.n	800ef70 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800ef68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ef70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef78:	2100      	movs	r1, #0
 800ef7a:	6139      	str	r1, [r7, #16]
 800ef7c:	f003 0308 	and.w	r3, r3, #8
 800ef80:	617b      	str	r3, [r7, #20]
 800ef82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ef86:	460b      	mov	r3, r1
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	d011      	beq.n	800efb0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 800ef8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef90:	3328      	adds	r3, #40	@ 0x28
 800ef92:	2100      	movs	r1, #0
 800ef94:	4618      	mov	r0, r3
 800ef96:	f001 f9ef 	bl	8010378 <RCCEx_PLL3_Config>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800efa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d003      	beq.n	800efb0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 800efa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800efb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	2100      	movs	r1, #0
 800efba:	60b9      	str	r1, [r7, #8]
 800efbc:	f003 0310 	and.w	r3, r3, #16
 800efc0:	60fb      	str	r3, [r7, #12]
 800efc2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800efc6:	460b      	mov	r3, r1
 800efc8:	4313      	orrs	r3, r2
 800efca:	d011      	beq.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800efcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efd0:	3328      	adds	r3, #40	@ 0x28
 800efd2:	2101      	movs	r1, #1
 800efd4:	4618      	mov	r0, r3
 800efd6:	f001 f9cf 	bl	8010378 <RCCEx_PLL3_Config>
 800efda:	4603      	mov	r3, r0
 800efdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800efe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d003      	beq.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800efe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800eff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff8:	2100      	movs	r1, #0
 800effa:	6039      	str	r1, [r7, #0]
 800effc:	f003 0320 	and.w	r3, r3, #32
 800f000:	607b      	str	r3, [r7, #4]
 800f002:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f006:	460b      	mov	r3, r1
 800f008:	4313      	orrs	r3, r2
 800f00a:	d011      	beq.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800f00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f010:	3328      	adds	r3, #40	@ 0x28
 800f012:	2102      	movs	r1, #2
 800f014:	4618      	mov	r0, r3
 800f016:	f001 f9af 	bl	8010378 <RCCEx_PLL3_Config>
 800f01a:	4603      	mov	r3, r0
 800f01c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800f020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f024:	2b00      	cmp	r3, #0
 800f026:	d003      	beq.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800f028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f02c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800f030:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800f034:	2b00      	cmp	r3, #0
 800f036:	d101      	bne.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800f038:	2300      	movs	r3, #0
 800f03a:	e000      	b.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800f03c:	2301      	movs	r3, #1
 800f03e:	4618      	mov	r0, r3
 800f040:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800f044:	46bd      	mov	sp, r7
 800f046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f04a:	bf00      	nop
 800f04c:	58024400 	.word	0x58024400

0800f050 <HAL_RCCEx_GetPeriphCLKFreq>:
 800f050:	b580      	push	{r7, lr}
 800f052:	b090      	sub	sp, #64	@ 0x40
 800f054:	af00      	add	r7, sp, #0
 800f056:	e9c7 0100 	strd	r0, r1, [r7]
 800f05a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f05e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f062:	430b      	orrs	r3, r1
 800f064:	f040 8094 	bne.w	800f190 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 800f068:	4b9b      	ldr	r3, [pc, #620]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f06c:	f003 0307 	and.w	r3, r3, #7
 800f070:	633b      	str	r3, [r7, #48]	@ 0x30
 800f072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f074:	2b04      	cmp	r3, #4
 800f076:	f200 8087 	bhi.w	800f188 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f07a:	a201      	add	r2, pc, #4	@ (adr r2, 800f080 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f080:	0800f095 	.word	0x0800f095
 800f084:	0800f0bd 	.word	0x0800f0bd
 800f088:	0800f0e5 	.word	0x0800f0e5
 800f08c:	0800f181 	.word	0x0800f181
 800f090:	0800f10d 	.word	0x0800f10d
 800f094:	4b90      	ldr	r3, [pc, #576]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f09c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0a0:	d108      	bne.n	800f0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800f0a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f000 ff62 	bl	800ff70 <HAL_RCCEx_GetPLL1ClockFreq>
 800f0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0b0:	f000 bc93 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0b8:	f000 bc8f 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0bc:	4b86      	ldr	r3, [pc, #536]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f0c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f0c8:	d108      	bne.n	800f0dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 800f0ca:	f107 0318 	add.w	r3, r7, #24
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 fca6 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0d8:	f000 bc7f 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0dc:	2300      	movs	r3, #0
 800f0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0e0:	f000 bc7b 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0e4:	4b7c      	ldr	r3, [pc, #496]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f0ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0f0:	d108      	bne.n	800f104 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800f0f2:	f107 030c 	add.w	r3, r7, #12
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f000 fde6 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f100:	f000 bc6b 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f104:	2300      	movs	r3, #0
 800f106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f108:	f000 bc67 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f10c:	4b72      	ldr	r3, [pc, #456]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f10e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f110:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f114:	637b      	str	r3, [r7, #52]	@ 0x34
 800f116:	4b70      	ldr	r3, [pc, #448]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f003 0304 	and.w	r3, r3, #4
 800f11e:	2b04      	cmp	r3, #4
 800f120:	d10c      	bne.n	800f13c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f124:	2b00      	cmp	r3, #0
 800f126:	d109      	bne.n	800f13c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f128:	4b6b      	ldr	r3, [pc, #428]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	08db      	lsrs	r3, r3, #3
 800f12e:	f003 0303 	and.w	r3, r3, #3
 800f132:	4a6a      	ldr	r2, [pc, #424]	@ (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f134:	fa22 f303 	lsr.w	r3, r2, r3
 800f138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f13a:	e01f      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f13c:	4b66      	ldr	r3, [pc, #408]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f148:	d106      	bne.n	800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f14a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f14c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f150:	d102      	bne.n	800f158 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f152:	4b63      	ldr	r3, [pc, #396]	@ (800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f156:	e011      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f158:	4b5f      	ldr	r3, [pc, #380]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f164:	d106      	bne.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f16c:	d102      	bne.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f16e:	4b5d      	ldr	r3, [pc, #372]	@ (800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f172:	e003      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f174:	2300      	movs	r3, #0
 800f176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f178:	f000 bc2f 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f17c:	f000 bc2d 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f180:	4b59      	ldr	r3, [pc, #356]	@ (800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f184:	f000 bc29 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f188:	2300      	movs	r3, #0
 800f18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f18c:	f000 bc25 	b.w	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f194:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f198:	430b      	orrs	r3, r1
 800f19a:	f040 80a7 	bne.w	800f2ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800f19e:	4b4e      	ldr	r3, [pc, #312]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f1a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1a2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800f1a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f1ae:	d054      	beq.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f1b6:	f200 808b 	bhi.w	800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f1c0:	f000 8083 	beq.w	800f2ca <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800f1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f1ca:	f200 8081 	bhi.w	800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f1d4:	d02f      	beq.n	800f236 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f1dc:	d878      	bhi.n	800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d004      	beq.n	800f1ee <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800f1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f1ea:	d012      	beq.n	800f212 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800f1ec:	e070      	b.n	800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f1ee:	4b3a      	ldr	r3, [pc, #232]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f1f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f1fa:	d107      	bne.n	800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800f1fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f200:	4618      	mov	r0, r3
 800f202:	f000 feb5 	bl	800ff70 <HAL_RCCEx_GetPLL1ClockFreq>
 800f206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f20a:	e3e6      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f20c:	2300      	movs	r3, #0
 800f20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f210:	e3e3      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f212:	4b31      	ldr	r3, [pc, #196]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f21a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f21e:	d107      	bne.n	800f230 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800f220:	f107 0318 	add.w	r3, r7, #24
 800f224:	4618      	mov	r0, r3
 800f226:	f000 fbfb 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 800f22a:	69bb      	ldr	r3, [r7, #24]
 800f22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f22e:	e3d4      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f230:	2300      	movs	r3, #0
 800f232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f234:	e3d1      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f236:	4b28      	ldr	r3, [pc, #160]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f23e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f242:	d107      	bne.n	800f254 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 800f244:	f107 030c 	add.w	r3, r7, #12
 800f248:	4618      	mov	r0, r3
 800f24a:	f000 fd3d 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f252:	e3c2      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f254:	2300      	movs	r3, #0
 800f256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f258:	e3bf      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f25a:	4b1f      	ldr	r3, [pc, #124]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f25c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f25e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f262:	637b      	str	r3, [r7, #52]	@ 0x34
 800f264:	4b1c      	ldr	r3, [pc, #112]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f003 0304 	and.w	r3, r3, #4
 800f26c:	2b04      	cmp	r3, #4
 800f26e:	d10c      	bne.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800f270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f272:	2b00      	cmp	r3, #0
 800f274:	d109      	bne.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800f276:	4b18      	ldr	r3, [pc, #96]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	08db      	lsrs	r3, r3, #3
 800f27c:	f003 0303 	and.w	r3, r3, #3
 800f280:	4a16      	ldr	r2, [pc, #88]	@ (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f282:	fa22 f303 	lsr.w	r3, r2, r3
 800f286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f288:	e01e      	b.n	800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800f28a:	4b13      	ldr	r3, [pc, #76]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f296:	d106      	bne.n	800f2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800f298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f29a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f29e:	d102      	bne.n	800f2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800f2a0:	4b0f      	ldr	r3, [pc, #60]	@ (800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2a4:	e010      	b.n	800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800f2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2b2:	d106      	bne.n	800f2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800f2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2ba:	d102      	bne.n	800f2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800f2bc:	4b09      	ldr	r3, [pc, #36]	@ (800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2c0:	e002      	b.n	800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2c6:	e388      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2c8:	e387      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2ca:	4b07      	ldr	r3, [pc, #28]	@ (800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2ce:	e384      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2d4:	e381      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2d6:	bf00      	nop
 800f2d8:	58024400 	.word	0x58024400
 800f2dc:	03d09000 	.word	0x03d09000
 800f2e0:	003d0900 	.word	0x003d0900
 800f2e4:	02dc6c00 	.word	0x02dc6c00
 800f2e8:	00bb8000 	.word	0x00bb8000
 800f2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f2f4:	430b      	orrs	r3, r1
 800f2f6:	f040 809c 	bne.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f2fa:	4b9e      	ldr	r3, [pc, #632]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f2fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2fe:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f302:	633b      	str	r3, [r7, #48]	@ 0x30
 800f304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f30a:	d054      	beq.n	800f3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800f30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f312:	f200 808b 	bhi.w	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f318:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f31c:	f000 8083 	beq.w	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800f320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f322:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f326:	f200 8081 	bhi.w	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f32c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f330:	d02f      	beq.n	800f392 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f338:	d878      	bhi.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d004      	beq.n	800f34a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f342:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f346:	d012      	beq.n	800f36e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f348:	e070      	b.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f34a:	4b8a      	ldr	r3, [pc, #552]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f356:	d107      	bne.n	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800f358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f35c:	4618      	mov	r0, r3
 800f35e:	f000 fe07 	bl	800ff70 <HAL_RCCEx_GetPLL1ClockFreq>
 800f362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f366:	e338      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f368:	2300      	movs	r3, #0
 800f36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f36c:	e335      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f36e:	4b81      	ldr	r3, [pc, #516]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f37a:	d107      	bne.n	800f38c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800f37c:	f107 0318 	add.w	r3, r7, #24
 800f380:	4618      	mov	r0, r3
 800f382:	f000 fb4d 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f38a:	e326      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f38c:	2300      	movs	r3, #0
 800f38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f390:	e323      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f392:	4b78      	ldr	r3, [pc, #480]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f39a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f39e:	d107      	bne.n	800f3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 800f3a0:	f107 030c 	add.w	r3, r7, #12
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f000 fc8f 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3ae:	e314      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3b4:	e311      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f3b6:	4b6f      	ldr	r3, [pc, #444]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f3b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f3be:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3c0:	4b6c      	ldr	r3, [pc, #432]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f003 0304 	and.w	r3, r3, #4
 800f3c8:	2b04      	cmp	r3, #4
 800f3ca:	d10c      	bne.n	800f3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d109      	bne.n	800f3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f3d2:	4b68      	ldr	r3, [pc, #416]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	08db      	lsrs	r3, r3, #3
 800f3d8:	f003 0303 	and.w	r3, r3, #3
 800f3dc:	4a66      	ldr	r2, [pc, #408]	@ (800f578 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f3de:	fa22 f303 	lsr.w	r3, r2, r3
 800f3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3e4:	e01e      	b.n	800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800f3e6:	4b63      	ldr	r3, [pc, #396]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3f2:	d106      	bne.n	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f3fa:	d102      	bne.n	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f3fc:	4b5f      	ldr	r3, [pc, #380]	@ (800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f400:	e010      	b.n	800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800f402:	4b5c      	ldr	r3, [pc, #368]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f40a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f40e:	d106      	bne.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f416:	d102      	bne.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f418:	4b59      	ldr	r3, [pc, #356]	@ (800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f41c:	e002      	b.n	800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800f41e:	2300      	movs	r3, #0
 800f420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f422:	e2da      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f424:	e2d9      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f426:	4b57      	ldr	r3, [pc, #348]	@ (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f42a:	e2d6      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f42c:	2300      	movs	r3, #0
 800f42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f430:	e2d3      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f432:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f436:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f43a:	430b      	orrs	r3, r1
 800f43c:	f040 80a7 	bne.w	800f58e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 800f440:	4b4c      	ldr	r3, [pc, #304]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f444:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f448:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f44c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f450:	d055      	beq.n	800f4fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800f452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f458:	f200 8096 	bhi.w	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f45e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f462:	f000 8084 	beq.w	800f56e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800f466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f468:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f46c:	f200 808c 	bhi.w	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f476:	d030      	beq.n	800f4da <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f47a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f47e:	f200 8083 	bhi.w	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f484:	2b00      	cmp	r3, #0
 800f486:	d004      	beq.n	800f492 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800f488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f48e:	d012      	beq.n	800f4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800f490:	e07a      	b.n	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f492:	4b38      	ldr	r3, [pc, #224]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f49a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f49e:	d107      	bne.n	800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800f4a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 fd63 	bl	800ff70 <HAL_RCCEx_GetPLL1ClockFreq>
 800f4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4ae:	e294      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4b4:	e291      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4b6:	4b2f      	ldr	r3, [pc, #188]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f4c2:	d107      	bne.n	800f4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800f4c4:	f107 0318 	add.w	r3, r7, #24
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f000 faa9 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4d2:	e282      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4d8:	e27f      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4da:	4b26      	ldr	r3, [pc, #152]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f4e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4e6:	d107      	bne.n	800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800f4e8:	f107 030c 	add.w	r3, r7, #12
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 fbeb 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4f6:	e270      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4fc:	e26d      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4fe:	4b1d      	ldr	r3, [pc, #116]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f502:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f506:	637b      	str	r3, [r7, #52]	@ 0x34
 800f508:	4b1a      	ldr	r3, [pc, #104]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f003 0304 	and.w	r3, r3, #4
 800f510:	2b04      	cmp	r3, #4
 800f512:	d10c      	bne.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f516:	2b00      	cmp	r3, #0
 800f518:	d109      	bne.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f51a:	4b16      	ldr	r3, [pc, #88]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	08db      	lsrs	r3, r3, #3
 800f520:	f003 0303 	and.w	r3, r3, #3
 800f524:	4a14      	ldr	r2, [pc, #80]	@ (800f578 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f526:	fa22 f303 	lsr.w	r3, r2, r3
 800f52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f52c:	e01e      	b.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800f52e:	4b11      	ldr	r3, [pc, #68]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f53a:	d106      	bne.n	800f54a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f53e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f542:	d102      	bne.n	800f54a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f544:	4b0d      	ldr	r3, [pc, #52]	@ (800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f548:	e010      	b.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800f54a:	4b0a      	ldr	r3, [pc, #40]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f556:	d106      	bne.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f55a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f55e:	d102      	bne.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f560:	4b07      	ldr	r3, [pc, #28]	@ (800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f564:	e002      	b.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800f566:	2300      	movs	r3, #0
 800f568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f56a:	e236      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f56c:	e235      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f56e:	4b05      	ldr	r3, [pc, #20]	@ (800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f572:	e232      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f574:	58024400 	.word	0x58024400
 800f578:	03d09000 	.word	0x03d09000
 800f57c:	003d0900 	.word	0x003d0900
 800f580:	02dc6c00 	.word	0x02dc6c00
 800f584:	00bb8000 	.word	0x00bb8000
 800f588:	2300      	movs	r3, #0
 800f58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f58c:	e225      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f58e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f592:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f596:	430b      	orrs	r3, r1
 800f598:	f040 8085 	bne.w	800f6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 800f59c:	4b9c      	ldr	r3, [pc, #624]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f59e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5a0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f5a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f5ac:	d06b      	beq.n	800f686 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f5b4:	d874      	bhi.n	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f5bc:	d056      	beq.n	800f66c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f5c4:	d86c      	bhi.n	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f5cc:	d03b      	beq.n	800f646 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f5d4:	d864      	bhi.n	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5dc:	d021      	beq.n	800f622 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5e4:	d85c      	bhi.n	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d004      	beq.n	800f5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f5f2:	d004      	beq.n	800f5fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800f5f4:	e054      	b.n	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f5f6:	f7fe fb43 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 800f5fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f5fc:	e1ed      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5fe:	4b84      	ldr	r3, [pc, #528]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f60a:	d107      	bne.n	800f61c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f60c:	f107 0318 	add.w	r3, r7, #24
 800f610:	4618      	mov	r0, r3
 800f612:	f000 fa05 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f61a:	e1de      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f61c:	2300      	movs	r3, #0
 800f61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f620:	e1db      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f622:	4b7b      	ldr	r3, [pc, #492]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f62a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f62e:	d107      	bne.n	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f630:	f107 030c 	add.w	r3, r7, #12
 800f634:	4618      	mov	r0, r3
 800f636:	f000 fb47 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f63e:	e1cc      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f640:	2300      	movs	r3, #0
 800f642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f644:	e1c9      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f646:	4b72      	ldr	r3, [pc, #456]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f003 0304 	and.w	r3, r3, #4
 800f64e:	2b04      	cmp	r3, #4
 800f650:	d109      	bne.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800f652:	4b6f      	ldr	r3, [pc, #444]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	08db      	lsrs	r3, r3, #3
 800f658:	f003 0303 	and.w	r3, r3, #3
 800f65c:	4a6d      	ldr	r2, [pc, #436]	@ (800f814 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f65e:	fa22 f303 	lsr.w	r3, r2, r3
 800f662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f664:	e1b9      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f666:	2300      	movs	r3, #0
 800f668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f66a:	e1b6      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f66c:	4b68      	ldr	r3, [pc, #416]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f678:	d102      	bne.n	800f680 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800f67a:	4b67      	ldr	r3, [pc, #412]	@ (800f818 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f67e:	e1ac      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f680:	2300      	movs	r3, #0
 800f682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f684:	e1a9      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f686:	4b62      	ldr	r3, [pc, #392]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f68e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f692:	d102      	bne.n	800f69a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800f694:	4b61      	ldr	r3, [pc, #388]	@ (800f81c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f698:	e19f      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f69a:	2300      	movs	r3, #0
 800f69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f69e:	e19c      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6a4:	e199      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6aa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f6ae:	430b      	orrs	r3, r1
 800f6b0:	d173      	bne.n	800f79a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800f6b2:	4b57      	ldr	r3, [pc, #348]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f6b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6c2:	d02f      	beq.n	800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800f6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6ca:	d863      	bhi.n	800f794 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d004      	beq.n	800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f6d8:	d012      	beq.n	800f700 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800f6da:	e05b      	b.n	800f794 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f6dc:	4b4c      	ldr	r3, [pc, #304]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f6e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f6e8:	d107      	bne.n	800f6fa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
 800f6ea:	f107 0318 	add.w	r3, r7, #24
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f000 f996 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6f8:	e16f      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6fe:	e16c      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f700:	4b43      	ldr	r3, [pc, #268]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f70c:	d107      	bne.n	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800f70e:	f107 030c 	add.w	r3, r7, #12
 800f712:	4618      	mov	r0, r3
 800f714:	f000 fad8 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f71c:	e15d      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f71e:	2300      	movs	r3, #0
 800f720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f722:	e15a      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f724:	4b3a      	ldr	r3, [pc, #232]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f728:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f72c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f72e:	4b38      	ldr	r3, [pc, #224]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f003 0304 	and.w	r3, r3, #4
 800f736:	2b04      	cmp	r3, #4
 800f738:	d10c      	bne.n	800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d109      	bne.n	800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f740:	4b33      	ldr	r3, [pc, #204]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	08db      	lsrs	r3, r3, #3
 800f746:	f003 0303 	and.w	r3, r3, #3
 800f74a:	4a32      	ldr	r2, [pc, #200]	@ (800f814 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f74c:	fa22 f303 	lsr.w	r3, r2, r3
 800f750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f752:	e01e      	b.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f754:	4b2e      	ldr	r3, [pc, #184]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f75c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f760:	d106      	bne.n	800f770 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f768:	d102      	bne.n	800f770 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f76a:	4b2b      	ldr	r3, [pc, #172]	@ (800f818 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f76e:	e010      	b.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f770:	4b27      	ldr	r3, [pc, #156]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f77c:	d106      	bne.n	800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f784:	d102      	bne.n	800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f786:	4b25      	ldr	r3, [pc, #148]	@ (800f81c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f78a:	e002      	b.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f78c:	2300      	movs	r3, #0
 800f78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f790:	e123      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f792:	e122      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f794:	2300      	movs	r3, #0
 800f796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f798:	e11f      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f79a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f79e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f7a2:	430b      	orrs	r3, r1
 800f7a4:	d13c      	bne.n	800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800f7a6:	4b1a      	ldr	r3, [pc, #104]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f7a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d004      	beq.n	800f7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800f7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f7bc:	d012      	beq.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800f7be:	e023      	b.n	800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800f7c0:	4b13      	ldr	r3, [pc, #76]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f7c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f7cc:	d107      	bne.n	800f7de <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 800f7ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f000 fbcc 	bl	800ff70 <HAL_RCCEx_GetPLL1ClockFreq>
 800f7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7dc:	e0fd      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7e2:	e0fa      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f7e4:	4b0a      	ldr	r3, [pc, #40]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f7ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f7f0:	d107      	bne.n	800f802 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800f7f2:	f107 0318 	add.w	r3, r7, #24
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f000 f912 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 800f7fc:	6a3b      	ldr	r3, [r7, #32]
 800f7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f800:	e0eb      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f802:	2300      	movs	r3, #0
 800f804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f806:	e0e8      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f808:	2300      	movs	r3, #0
 800f80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f80c:	e0e5      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f80e:	bf00      	nop
 800f810:	58024400 	.word	0x58024400
 800f814:	03d09000 	.word	0x03d09000
 800f818:	003d0900 	.word	0x003d0900
 800f81c:	02dc6c00 	.word	0x02dc6c00
 800f820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f824:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f828:	430b      	orrs	r3, r1
 800f82a:	f040 8085 	bne.w	800f938 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800f82e:	4b6d      	ldr	r3, [pc, #436]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f832:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f836:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f83a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f83e:	d06b      	beq.n	800f918 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800f840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f846:	d874      	bhi.n	800f932 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f84e:	d056      	beq.n	800f8fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800f850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f856:	d86c      	bhi.n	800f932 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f85a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f85e:	d03b      	beq.n	800f8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800f860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f866:	d864      	bhi.n	800f932 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f86e:	d021      	beq.n	800f8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800f870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f876:	d85c      	bhi.n	800f932 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d004      	beq.n	800f888 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800f87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f884:	d004      	beq.n	800f890 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800f886:	e054      	b.n	800f932 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f888:	f000 f8b4 	bl	800f9f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f88c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f88e:	e0a4      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f890:	4b54      	ldr	r3, [pc, #336]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f89c:	d107      	bne.n	800f8ae <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800f89e:	f107 0318 	add.w	r3, r7, #24
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f000 f8bc 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8ac:	e095      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8b2:	e092      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8b4:	4b4b      	ldr	r3, [pc, #300]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f8bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8c0:	d107      	bne.n	800f8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 800f8c2:	f107 030c 	add.w	r3, r7, #12
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f000 f9fe 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8d0:	e083      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8d6:	e080      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8d8:	4b42      	ldr	r3, [pc, #264]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f003 0304 	and.w	r3, r3, #4
 800f8e0:	2b04      	cmp	r3, #4
 800f8e2:	d109      	bne.n	800f8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 800f8e4:	4b3f      	ldr	r3, [pc, #252]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	08db      	lsrs	r3, r3, #3
 800f8ea:	f003 0303 	and.w	r3, r3, #3
 800f8ee:	4a3e      	ldr	r2, [pc, #248]	@ (800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800f8f0:	fa22 f303 	lsr.w	r3, r2, r3
 800f8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8f6:	e070      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8fc:	e06d      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8fe:	4b39      	ldr	r3, [pc, #228]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f90a:	d102      	bne.n	800f912 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800f90c:	4b37      	ldr	r3, [pc, #220]	@ (800f9ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f910:	e063      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f912:	2300      	movs	r3, #0
 800f914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f916:	e060      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f918:	4b32      	ldr	r3, [pc, #200]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f924:	d102      	bne.n	800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 800f926:	4b32      	ldr	r3, [pc, #200]	@ (800f9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f92a:	e056      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f92c:	2300      	movs	r3, #0
 800f92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f930:	e053      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f932:	2300      	movs	r3, #0
 800f934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f936:	e050      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f93c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f940:	430b      	orrs	r3, r1
 800f942:	d148      	bne.n	800f9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800f944:	4b27      	ldr	r3, [pc, #156]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f948:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f94c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f954:	d02a      	beq.n	800f9ac <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800f956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f95c:	d838      	bhi.n	800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f960:	2b00      	cmp	r3, #0
 800f962:	d004      	beq.n	800f96e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800f964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f96a:	d00d      	beq.n	800f988 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800f96c:	e030      	b.n	800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f96e:	4b1d      	ldr	r3, [pc, #116]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f97a:	d102      	bne.n	800f982 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
 800f97c:	4b1c      	ldr	r3, [pc, #112]	@ (800f9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f980:	e02b      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f982:	2300      	movs	r3, #0
 800f984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f986:	e028      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f988:	4b16      	ldr	r3, [pc, #88]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f994:	d107      	bne.n	800f9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 800f996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f99a:	4618      	mov	r0, r3
 800f99c:	f000 fae8 	bl	800ff70 <HAL_RCCEx_GetPLL1ClockFreq>
 800f9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9a4:	e019      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9aa:	e016      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f9ac:	4b0d      	ldr	r3, [pc, #52]	@ (800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f9b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9b8:	d107      	bne.n	800f9ca <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800f9ba:	f107 0318 	add.w	r3, r7, #24
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f000 f82e 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9c8:	e007      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9ce:	e004      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9d4:	e001      	b.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3740      	adds	r7, #64	@ 0x40
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	58024400 	.word	0x58024400
 800f9e8:	03d09000 	.word	0x03d09000
 800f9ec:	003d0900 	.word	0x003d0900
 800f9f0:	02dc6c00 	.word	0x02dc6c00

0800f9f4 <HAL_RCCEx_GetD3PCLK1Freq>:
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	f7fe f912 	bl	800dc20 <HAL_RCC_GetHCLKFreq>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	4b06      	ldr	r3, [pc, #24]	@ (800fa18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fa00:	6a1b      	ldr	r3, [r3, #32]
 800fa02:	091b      	lsrs	r3, r3, #4
 800fa04:	f003 0307 	and.w	r3, r3, #7
 800fa08:	4904      	ldr	r1, [pc, #16]	@ (800fa1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fa0a:	5ccb      	ldrb	r3, [r1, r3]
 800fa0c:	f003 031f 	and.w	r3, r3, #31
 800fa10:	fa22 f303 	lsr.w	r3, r2, r3
 800fa14:	4618      	mov	r0, r3
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	58024400 	.word	0x58024400
 800fa1c:	0801c2a4 	.word	0x0801c2a4

0800fa20 <HAL_RCCEx_GetPLL2ClockFreq>:
 800fa20:	b480      	push	{r7}
 800fa22:	b089      	sub	sp, #36	@ 0x24
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	4ba1      	ldr	r3, [pc, #644]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa2c:	f003 0303 	and.w	r3, r3, #3
 800fa30:	61bb      	str	r3, [r7, #24]
 800fa32:	4b9f      	ldr	r3, [pc, #636]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa36:	0b1b      	lsrs	r3, r3, #12
 800fa38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa3c:	617b      	str	r3, [r7, #20]
 800fa3e:	4b9c      	ldr	r3, [pc, #624]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa42:	091b      	lsrs	r3, r3, #4
 800fa44:	f003 0301 	and.w	r3, r3, #1
 800fa48:	613b      	str	r3, [r7, #16]
 800fa4a:	4b99      	ldr	r3, [pc, #612]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa4e:	08db      	lsrs	r3, r3, #3
 800fa50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	fb02 f303 	mul.w	r3, r2, r3
 800fa5a:	ee07 3a90 	vmov	s15, r3
 800fa5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa62:	edc7 7a03 	vstr	s15, [r7, #12]
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f000 8111 	beq.w	800fc90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	2b02      	cmp	r3, #2
 800fa72:	f000 8083 	beq.w	800fb7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	2b02      	cmp	r3, #2
 800fa7a:	f200 80a1 	bhi.w	800fbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d003      	beq.n	800fa8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d056      	beq.n	800fb38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fa8a:	e099      	b.n	800fbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fa8c:	4b88      	ldr	r3, [pc, #544]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f003 0320 	and.w	r3, r3, #32
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d02d      	beq.n	800faf4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
 800fa98:	4b85      	ldr	r3, [pc, #532]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	08db      	lsrs	r3, r3, #3
 800fa9e:	f003 0303 	and.w	r3, r3, #3
 800faa2:	4a84      	ldr	r2, [pc, #528]	@ (800fcb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800faa4:	fa22 f303 	lsr.w	r3, r2, r3
 800faa8:	60bb      	str	r3, [r7, #8]
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	ee07 3a90 	vmov	s15, r3
 800fab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	ee07 3a90 	vmov	s15, r3
 800faba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fac2:	4b7b      	ldr	r3, [pc, #492]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faca:	ee07 3a90 	vmov	s15, r3
 800face:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fad6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fcb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faee:	edc7 7a07 	vstr	s15, [r7, #28]
 800faf2:	e087      	b.n	800fc04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	ee07 3a90 	vmov	s15, r3
 800fafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fafe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fcbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fb02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb06:	4b6a      	ldr	r3, [pc, #424]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb0e:	ee07 3a90 	vmov	s15, r3
 800fb12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb16:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fcb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb32:	edc7 7a07 	vstr	s15, [r7, #28]
 800fb36:	e065      	b.n	800fc04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	ee07 3a90 	vmov	s15, r3
 800fb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fb46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb4a:	4b59      	ldr	r3, [pc, #356]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb52:	ee07 3a90 	vmov	s15, r3
 800fb56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fcb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb76:	edc7 7a07 	vstr	s15, [r7, #28]
 800fb7a:	e043      	b.n	800fc04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	ee07 3a90 	vmov	s15, r3
 800fb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800fb8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb8e:	4b48      	ldr	r3, [pc, #288]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb96:	ee07 3a90 	vmov	s15, r3
 800fb9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fba2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fcb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbba:	edc7 7a07 	vstr	s15, [r7, #28]
 800fbbe:	e021      	b.n	800fc04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	ee07 3a90 	vmov	s15, r3
 800fbc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fbce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbd2:	4b37      	ldr	r3, [pc, #220]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbda:	ee07 3a90 	vmov	s15, r3
 800fbde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbe6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fcb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbfe:	edc7 7a07 	vstr	s15, [r7, #28]
 800fc02:	bf00      	nop
 800fc04:	4b2a      	ldr	r3, [pc, #168]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc08:	0a5b      	lsrs	r3, r3, #9
 800fc0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc0e:	ee07 3a90 	vmov	s15, r3
 800fc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc2a:	ee17 2a90 	vmov	r2, s15
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	601a      	str	r2, [r3, #0]
 800fc32:	4b1f      	ldr	r3, [pc, #124]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc36:	0c1b      	lsrs	r3, r3, #16
 800fc38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc3c:	ee07 3a90 	vmov	s15, r3
 800fc40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc58:	ee17 2a90 	vmov	r2, s15
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	605a      	str	r2, [r3, #4]
 800fc60:	4b13      	ldr	r3, [pc, #76]	@ (800fcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc64:	0e1b      	lsrs	r3, r3, #24
 800fc66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc6a:	ee07 3a90 	vmov	s15, r3
 800fc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc86:	ee17 2a90 	vmov	r2, s15
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	609a      	str	r2, [r3, #8]
 800fc8e:	e008      	b.n	800fca2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	601a      	str	r2, [r3, #0]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	605a      	str	r2, [r3, #4]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	609a      	str	r2, [r3, #8]
 800fca2:	bf00      	nop
 800fca4:	3724      	adds	r7, #36	@ 0x24
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr
 800fcae:	bf00      	nop
 800fcb0:	58024400 	.word	0x58024400
 800fcb4:	03d09000 	.word	0x03d09000
 800fcb8:	46000000 	.word	0x46000000
 800fcbc:	4c742400 	.word	0x4c742400
 800fcc0:	4a742400 	.word	0x4a742400
 800fcc4:	4c371b00 	.word	0x4c371b00

0800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>:
 800fcc8:	b480      	push	{r7}
 800fcca:	b089      	sub	sp, #36	@ 0x24
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	4ba1      	ldr	r3, [pc, #644]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcd4:	f003 0303 	and.w	r3, r3, #3
 800fcd8:	61bb      	str	r3, [r7, #24]
 800fcda:	4b9f      	ldr	r3, [pc, #636]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcde:	0d1b      	lsrs	r3, r3, #20
 800fce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fce4:	617b      	str	r3, [r7, #20]
 800fce6:	4b9c      	ldr	r3, [pc, #624]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcea:	0a1b      	lsrs	r3, r3, #8
 800fcec:	f003 0301 	and.w	r3, r3, #1
 800fcf0:	613b      	str	r3, [r7, #16]
 800fcf2:	4b99      	ldr	r3, [pc, #612]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcf6:	08db      	lsrs	r3, r3, #3
 800fcf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcfc:	693a      	ldr	r2, [r7, #16]
 800fcfe:	fb02 f303 	mul.w	r3, r2, r3
 800fd02:	ee07 3a90 	vmov	s15, r3
 800fd06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd0a:	edc7 7a03 	vstr	s15, [r7, #12]
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 8111 	beq.w	800ff38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	2b02      	cmp	r3, #2
 800fd1a:	f000 8083 	beq.w	800fe24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	2b02      	cmp	r3, #2
 800fd22:	f200 80a1 	bhi.w	800fe68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d003      	beq.n	800fd34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fd2c:	69bb      	ldr	r3, [r7, #24]
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d056      	beq.n	800fde0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fd32:	e099      	b.n	800fe68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fd34:	4b88      	ldr	r3, [pc, #544]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f003 0320 	and.w	r3, r3, #32
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d02d      	beq.n	800fd9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
 800fd40:	4b85      	ldr	r3, [pc, #532]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	08db      	lsrs	r3, r3, #3
 800fd46:	f003 0303 	and.w	r3, r3, #3
 800fd4a:	4a84      	ldr	r2, [pc, #528]	@ (800ff5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fd4c:	fa22 f303 	lsr.w	r3, r2, r3
 800fd50:	60bb      	str	r3, [r7, #8]
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	ee07 3a90 	vmov	s15, r3
 800fd58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	ee07 3a90 	vmov	s15, r3
 800fd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd6a:	4b7b      	ldr	r3, [pc, #492]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd72:	ee07 3a90 	vmov	s15, r3
 800fd76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ff60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fd82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd96:	edc7 7a07 	vstr	s15, [r7, #28]
 800fd9a:	e087      	b.n	800feac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	ee07 3a90 	vmov	s15, r3
 800fda2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fda6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ff64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fdaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdae:	4b6a      	ldr	r3, [pc, #424]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdb6:	ee07 3a90 	vmov	s15, r3
 800fdba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdc2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ff60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fdc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdda:	edc7 7a07 	vstr	s15, [r7, #28]
 800fdde:	e065      	b.n	800feac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	ee07 3a90 	vmov	s15, r3
 800fde6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fdee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdf2:	4b59      	ldr	r3, [pc, #356]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdfa:	ee07 3a90 	vmov	s15, r3
 800fdfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe02:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ff60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe1e:	edc7 7a07 	vstr	s15, [r7, #28]
 800fe22:	e043      	b.n	800feac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	ee07 3a90 	vmov	s15, r3
 800fe2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ff6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fe32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe36:	4b48      	ldr	r3, [pc, #288]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe3e:	ee07 3a90 	vmov	s15, r3
 800fe42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe46:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ff60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe62:	edc7 7a07 	vstr	s15, [r7, #28]
 800fe66:	e021      	b.n	800feac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	ee07 3a90 	vmov	s15, r3
 800fe6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fe76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe7a:	4b37      	ldr	r3, [pc, #220]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe82:	ee07 3a90 	vmov	s15, r3
 800fe86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ff60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fea6:	edc7 7a07 	vstr	s15, [r7, #28]
 800feaa:	bf00      	nop
 800feac:	4b2a      	ldr	r3, [pc, #168]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800feae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feb0:	0a5b      	lsrs	r3, r3, #9
 800feb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800feb6:	ee07 3a90 	vmov	s15, r3
 800feba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800febe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fec6:	edd7 6a07 	vldr	s13, [r7, #28]
 800feca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fed2:	ee17 2a90 	vmov	r2, s15
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	601a      	str	r2, [r3, #0]
 800feda:	4b1f      	ldr	r3, [pc, #124]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fedc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fede:	0c1b      	lsrs	r3, r3, #16
 800fee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fee4:	ee07 3a90 	vmov	s15, r3
 800fee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fef4:	edd7 6a07 	vldr	s13, [r7, #28]
 800fef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fefc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff00:	ee17 2a90 	vmov	r2, s15
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	605a      	str	r2, [r3, #4]
 800ff08:	4b13      	ldr	r3, [pc, #76]	@ (800ff58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff0c:	0e1b      	lsrs	r3, r3, #24
 800ff0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff12:	ee07 3a90 	vmov	s15, r3
 800ff16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff2e:	ee17 2a90 	vmov	r2, s15
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	609a      	str	r2, [r3, #8]
 800ff36:	e008      	b.n	800ff4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	601a      	str	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	605a      	str	r2, [r3, #4]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2200      	movs	r2, #0
 800ff48:	609a      	str	r2, [r3, #8]
 800ff4a:	bf00      	nop
 800ff4c:	3724      	adds	r7, #36	@ 0x24
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop
 800ff58:	58024400 	.word	0x58024400
 800ff5c:	03d09000 	.word	0x03d09000
 800ff60:	46000000 	.word	0x46000000
 800ff64:	4c742400 	.word	0x4c742400
 800ff68:	4a742400 	.word	0x4a742400
 800ff6c:	4c371b00 	.word	0x4c371b00

0800ff70 <HAL_RCCEx_GetPLL1ClockFreq>:
 800ff70:	b480      	push	{r7}
 800ff72:	b089      	sub	sp, #36	@ 0x24
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	4ba0      	ldr	r3, [pc, #640]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff7c:	f003 0303 	and.w	r3, r3, #3
 800ff80:	61bb      	str	r3, [r7, #24]
 800ff82:	4b9e      	ldr	r3, [pc, #632]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff86:	091b      	lsrs	r3, r3, #4
 800ff88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ff8c:	617b      	str	r3, [r7, #20]
 800ff8e:	4b9b      	ldr	r3, [pc, #620]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff92:	f003 0301 	and.w	r3, r3, #1
 800ff96:	613b      	str	r3, [r7, #16]
 800ff98:	4b98      	ldr	r3, [pc, #608]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff9c:	08db      	lsrs	r3, r3, #3
 800ff9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ffa2:	693a      	ldr	r2, [r7, #16]
 800ffa4:	fb02 f303 	mul.w	r3, r2, r3
 800ffa8:	ee07 3a90 	vmov	s15, r3
 800ffac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffb0:	edc7 7a03 	vstr	s15, [r7, #12]
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f000 8111 	beq.w	80101de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
 800ffbc:	69bb      	ldr	r3, [r7, #24]
 800ffbe:	2b02      	cmp	r3, #2
 800ffc0:	f000 8083 	beq.w	80100ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ffc4:	69bb      	ldr	r3, [r7, #24]
 800ffc6:	2b02      	cmp	r3, #2
 800ffc8:	f200 80a1 	bhi.w	801010e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d003      	beq.n	800ffda <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d056      	beq.n	8010086 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ffd8:	e099      	b.n	801010e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ffda:	4b88      	ldr	r3, [pc, #544]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f003 0320 	and.w	r3, r3, #32
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d02d      	beq.n	8010042 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
 800ffe6:	4b85      	ldr	r3, [pc, #532]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	08db      	lsrs	r3, r3, #3
 800ffec:	f003 0303 	and.w	r3, r3, #3
 800fff0:	4a83      	ldr	r2, [pc, #524]	@ (8010200 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fff2:	fa22 f303 	lsr.w	r3, r2, r3
 800fff6:	60bb      	str	r3, [r7, #8]
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	ee07 3a90 	vmov	s15, r3
 800fffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	ee07 3a90 	vmov	s15, r3
 8010008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801000c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010010:	4b7a      	ldr	r3, [pc, #488]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010018:	ee07 3a90 	vmov	s15, r3
 801001c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010020:	ed97 6a03 	vldr	s12, [r7, #12]
 8010024:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010204 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801002c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010030:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010038:	ee67 7a27 	vmul.f32	s15, s14, s15
 801003c:	edc7 7a07 	vstr	s15, [r7, #28]
 8010040:	e087      	b.n	8010152 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	ee07 3a90 	vmov	s15, r3
 8010048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801004c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010054:	4b69      	ldr	r3, [pc, #420]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801005c:	ee07 3a90 	vmov	s15, r3
 8010060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010064:	ed97 6a03 	vldr	s12, [r7, #12]
 8010068:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010204 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801006c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801007c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010080:	edc7 7a07 	vstr	s15, [r7, #28]
 8010084:	e065      	b.n	8010152 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	ee07 3a90 	vmov	s15, r3
 801008c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010090:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801020c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010098:	4b58      	ldr	r3, [pc, #352]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801009a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801009c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100a0:	ee07 3a90 	vmov	s15, r3
 80100a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80100ac:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010204 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80100b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80100bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100c4:	edc7 7a07 	vstr	s15, [r7, #28]
 80100c8:	e043      	b.n	8010152 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	ee07 3a90 	vmov	s15, r3
 80100d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100d4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010210 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80100d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100dc:	4b47      	ldr	r3, [pc, #284]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100e4:	ee07 3a90 	vmov	s15, r3
 80100e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80100f0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010204 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80100f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010108:	edc7 7a07 	vstr	s15, [r7, #28]
 801010c:	e021      	b.n	8010152 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	ee07 3a90 	vmov	s15, r3
 8010114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010118:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010208 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801011c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010120:	4b36      	ldr	r3, [pc, #216]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010128:	ee07 3a90 	vmov	s15, r3
 801012c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010130:	ed97 6a03 	vldr	s12, [r7, #12]
 8010134:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010204 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010138:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801013c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010140:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010148:	ee67 7a27 	vmul.f32	s15, s14, s15
 801014c:	edc7 7a07 	vstr	s15, [r7, #28]
 8010150:	bf00      	nop
 8010152:	4b2a      	ldr	r3, [pc, #168]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010156:	0a5b      	lsrs	r3, r3, #9
 8010158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801015c:	ee07 3a90 	vmov	s15, r3
 8010160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010164:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010168:	ee37 7a87 	vadd.f32	s14, s15, s14
 801016c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010178:	ee17 2a90 	vmov	r2, s15
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	601a      	str	r2, [r3, #0]
 8010180:	4b1e      	ldr	r3, [pc, #120]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010184:	0c1b      	lsrs	r3, r3, #16
 8010186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801018a:	ee07 3a90 	vmov	s15, r3
 801018e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010192:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010196:	ee37 7a87 	vadd.f32	s14, s15, s14
 801019a:	edd7 6a07 	vldr	s13, [r7, #28]
 801019e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101a6:	ee17 2a90 	vmov	r2, s15
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	605a      	str	r2, [r3, #4]
 80101ae:	4b13      	ldr	r3, [pc, #76]	@ (80101fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101b2:	0e1b      	lsrs	r3, r3, #24
 80101b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80101b8:	ee07 3a90 	vmov	s15, r3
 80101bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80101c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80101cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101d4:	ee17 2a90 	vmov	r2, s15
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	609a      	str	r2, [r3, #8]
 80101dc:	e008      	b.n	80101f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	601a      	str	r2, [r3, #0]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2200      	movs	r2, #0
 80101e8:	605a      	str	r2, [r3, #4]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2200      	movs	r2, #0
 80101ee:	609a      	str	r2, [r3, #8]
 80101f0:	bf00      	nop
 80101f2:	3724      	adds	r7, #36	@ 0x24
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	58024400 	.word	0x58024400
 8010200:	03d09000 	.word	0x03d09000
 8010204:	46000000 	.word	0x46000000
 8010208:	4c742400 	.word	0x4c742400
 801020c:	4a742400 	.word	0x4a742400
 8010210:	4c371b00 	.word	0x4c371b00

08010214 <RCCEx_PLL2_Config>:
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
 801021e:	2300      	movs	r3, #0
 8010220:	73fb      	strb	r3, [r7, #15]
 8010222:	4b53      	ldr	r3, [pc, #332]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 8010224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010226:	f003 0303 	and.w	r3, r3, #3
 801022a:	2b03      	cmp	r3, #3
 801022c:	d101      	bne.n	8010232 <RCCEx_PLL2_Config+0x1e>
 801022e:	2301      	movs	r3, #1
 8010230:	e099      	b.n	8010366 <RCCEx_PLL2_Config+0x152>
 8010232:	4b4f      	ldr	r3, [pc, #316]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4a4e      	ldr	r2, [pc, #312]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 8010238:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801023c:	6013      	str	r3, [r2, #0]
 801023e:	f7f8 fc59 	bl	8008af4 <HAL_GetTick>
 8010242:	60b8      	str	r0, [r7, #8]
 8010244:	e008      	b.n	8010258 <RCCEx_PLL2_Config+0x44>
 8010246:	f7f8 fc55 	bl	8008af4 <HAL_GetTick>
 801024a:	4602      	mov	r2, r0
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	1ad3      	subs	r3, r2, r3
 8010250:	2b02      	cmp	r3, #2
 8010252:	d901      	bls.n	8010258 <RCCEx_PLL2_Config+0x44>
 8010254:	2303      	movs	r3, #3
 8010256:	e086      	b.n	8010366 <RCCEx_PLL2_Config+0x152>
 8010258:	4b45      	ldr	r3, [pc, #276]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010260:	2b00      	cmp	r3, #0
 8010262:	d1f0      	bne.n	8010246 <RCCEx_PLL2_Config+0x32>
 8010264:	4b42      	ldr	r3, [pc, #264]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 8010266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010268:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	031b      	lsls	r3, r3, #12
 8010272:	493f      	ldr	r1, [pc, #252]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 8010274:	4313      	orrs	r3, r2
 8010276:	628b      	str	r3, [r1, #40]	@ 0x28
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	3b01      	subs	r3, #1
 801027e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	689b      	ldr	r3, [r3, #8]
 8010286:	3b01      	subs	r3, #1
 8010288:	025b      	lsls	r3, r3, #9
 801028a:	b29b      	uxth	r3, r3
 801028c:	431a      	orrs	r2, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	3b01      	subs	r3, #1
 8010294:	041b      	lsls	r3, r3, #16
 8010296:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801029a:	431a      	orrs	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	691b      	ldr	r3, [r3, #16]
 80102a0:	3b01      	subs	r3, #1
 80102a2:	061b      	lsls	r3, r3, #24
 80102a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80102a8:	4931      	ldr	r1, [pc, #196]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102aa:	4313      	orrs	r3, r2
 80102ac:	638b      	str	r3, [r1, #56]	@ 0x38
 80102ae:	4b30      	ldr	r3, [pc, #192]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	695b      	ldr	r3, [r3, #20]
 80102ba:	492d      	ldr	r1, [pc, #180]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102bc:	4313      	orrs	r3, r2
 80102be:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80102c0:	4b2b      	ldr	r3, [pc, #172]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102c4:	f023 0220 	bic.w	r2, r3, #32
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	699b      	ldr	r3, [r3, #24]
 80102cc:	4928      	ldr	r1, [pc, #160]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102ce:	4313      	orrs	r3, r2
 80102d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80102d2:	4b27      	ldr	r3, [pc, #156]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102d6:	4a26      	ldr	r2, [pc, #152]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102d8:	f023 0310 	bic.w	r3, r3, #16
 80102dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80102de:	4b24      	ldr	r3, [pc, #144]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80102e2:	4b24      	ldr	r3, [pc, #144]	@ (8010374 <RCCEx_PLL2_Config+0x160>)
 80102e4:	4013      	ands	r3, r2
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	69d2      	ldr	r2, [r2, #28]
 80102ea:	00d2      	lsls	r2, r2, #3
 80102ec:	4920      	ldr	r1, [pc, #128]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102ee:	4313      	orrs	r3, r2
 80102f0:	63cb      	str	r3, [r1, #60]	@ 0x3c
 80102f2:	4b1f      	ldr	r3, [pc, #124]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102f6:	4a1e      	ldr	r2, [pc, #120]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 80102f8:	f043 0310 	orr.w	r3, r3, #16
 80102fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d106      	bne.n	8010312 <RCCEx_PLL2_Config+0xfe>
 8010304:	4b1a      	ldr	r3, [pc, #104]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 8010306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010308:	4a19      	ldr	r2, [pc, #100]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 801030a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801030e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010310:	e00f      	b.n	8010332 <RCCEx_PLL2_Config+0x11e>
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	2b01      	cmp	r3, #1
 8010316:	d106      	bne.n	8010326 <RCCEx_PLL2_Config+0x112>
 8010318:	4b15      	ldr	r3, [pc, #84]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 801031a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801031c:	4a14      	ldr	r2, [pc, #80]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 801031e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010322:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010324:	e005      	b.n	8010332 <RCCEx_PLL2_Config+0x11e>
 8010326:	4b12      	ldr	r3, [pc, #72]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 8010328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801032a:	4a11      	ldr	r2, [pc, #68]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 801032c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010330:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010332:	4b0f      	ldr	r3, [pc, #60]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4a0e      	ldr	r2, [pc, #56]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 8010338:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801033c:	6013      	str	r3, [r2, #0]
 801033e:	f7f8 fbd9 	bl	8008af4 <HAL_GetTick>
 8010342:	60b8      	str	r0, [r7, #8]
 8010344:	e008      	b.n	8010358 <RCCEx_PLL2_Config+0x144>
 8010346:	f7f8 fbd5 	bl	8008af4 <HAL_GetTick>
 801034a:	4602      	mov	r2, r0
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	2b02      	cmp	r3, #2
 8010352:	d901      	bls.n	8010358 <RCCEx_PLL2_Config+0x144>
 8010354:	2303      	movs	r3, #3
 8010356:	e006      	b.n	8010366 <RCCEx_PLL2_Config+0x152>
 8010358:	4b05      	ldr	r3, [pc, #20]	@ (8010370 <RCCEx_PLL2_Config+0x15c>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010360:	2b00      	cmp	r3, #0
 8010362:	d0f0      	beq.n	8010346 <RCCEx_PLL2_Config+0x132>
 8010364:	7bfb      	ldrb	r3, [r7, #15]
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	58024400 	.word	0x58024400
 8010374:	ffff0007 	.word	0xffff0007

08010378 <RCCEx_PLL3_Config>:
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
 8010382:	2300      	movs	r3, #0
 8010384:	73fb      	strb	r3, [r7, #15]
 8010386:	4b53      	ldr	r3, [pc, #332]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801038a:	f003 0303 	and.w	r3, r3, #3
 801038e:	2b03      	cmp	r3, #3
 8010390:	d101      	bne.n	8010396 <RCCEx_PLL3_Config+0x1e>
 8010392:	2301      	movs	r3, #1
 8010394:	e099      	b.n	80104ca <RCCEx_PLL3_Config+0x152>
 8010396:	4b4f      	ldr	r3, [pc, #316]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4a4e      	ldr	r2, [pc, #312]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 801039c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80103a0:	6013      	str	r3, [r2, #0]
 80103a2:	f7f8 fba7 	bl	8008af4 <HAL_GetTick>
 80103a6:	60b8      	str	r0, [r7, #8]
 80103a8:	e008      	b.n	80103bc <RCCEx_PLL3_Config+0x44>
 80103aa:	f7f8 fba3 	bl	8008af4 <HAL_GetTick>
 80103ae:	4602      	mov	r2, r0
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d901      	bls.n	80103bc <RCCEx_PLL3_Config+0x44>
 80103b8:	2303      	movs	r3, #3
 80103ba:	e086      	b.n	80104ca <RCCEx_PLL3_Config+0x152>
 80103bc:	4b45      	ldr	r3, [pc, #276]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d1f0      	bne.n	80103aa <RCCEx_PLL3_Config+0x32>
 80103c8:	4b42      	ldr	r3, [pc, #264]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 80103ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	051b      	lsls	r3, r3, #20
 80103d6:	493f      	ldr	r1, [pc, #252]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 80103d8:	4313      	orrs	r3, r2
 80103da:	628b      	str	r3, [r1, #40]	@ 0x28
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	3b01      	subs	r3, #1
 80103e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	3b01      	subs	r3, #1
 80103ec:	025b      	lsls	r3, r3, #9
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	431a      	orrs	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	3b01      	subs	r3, #1
 80103f8:	041b      	lsls	r3, r3, #16
 80103fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80103fe:	431a      	orrs	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	691b      	ldr	r3, [r3, #16]
 8010404:	3b01      	subs	r3, #1
 8010406:	061b      	lsls	r3, r3, #24
 8010408:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801040c:	4931      	ldr	r1, [pc, #196]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 801040e:	4313      	orrs	r3, r2
 8010410:	640b      	str	r3, [r1, #64]	@ 0x40
 8010412:	4b30      	ldr	r3, [pc, #192]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010416:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	695b      	ldr	r3, [r3, #20]
 801041e:	492d      	ldr	r1, [pc, #180]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010420:	4313      	orrs	r3, r2
 8010422:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8010424:	4b2b      	ldr	r3, [pc, #172]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010428:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	699b      	ldr	r3, [r3, #24]
 8010430:	4928      	ldr	r1, [pc, #160]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010432:	4313      	orrs	r3, r2
 8010434:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8010436:	4b27      	ldr	r3, [pc, #156]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801043a:	4a26      	ldr	r2, [pc, #152]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 801043c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010440:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010442:	4b24      	ldr	r3, [pc, #144]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010446:	4b24      	ldr	r3, [pc, #144]	@ (80104d8 <RCCEx_PLL3_Config+0x160>)
 8010448:	4013      	ands	r3, r2
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	69d2      	ldr	r2, [r2, #28]
 801044e:	00d2      	lsls	r2, r2, #3
 8010450:	4920      	ldr	r1, [pc, #128]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010452:	4313      	orrs	r3, r2
 8010454:	644b      	str	r3, [r1, #68]	@ 0x44
 8010456:	4b1f      	ldr	r3, [pc, #124]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801045a:	4a1e      	ldr	r2, [pc, #120]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 801045c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010460:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d106      	bne.n	8010476 <RCCEx_PLL3_Config+0xfe>
 8010468:	4b1a      	ldr	r3, [pc, #104]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 801046a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801046c:	4a19      	ldr	r2, [pc, #100]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 801046e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010474:	e00f      	b.n	8010496 <RCCEx_PLL3_Config+0x11e>
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	2b01      	cmp	r3, #1
 801047a:	d106      	bne.n	801048a <RCCEx_PLL3_Config+0x112>
 801047c:	4b15      	ldr	r3, [pc, #84]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 801047e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010480:	4a14      	ldr	r2, [pc, #80]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010482:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010486:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010488:	e005      	b.n	8010496 <RCCEx_PLL3_Config+0x11e>
 801048a:	4b12      	ldr	r3, [pc, #72]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 801048c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801048e:	4a11      	ldr	r2, [pc, #68]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010490:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010494:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010496:	4b0f      	ldr	r3, [pc, #60]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a0e      	ldr	r2, [pc, #56]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 801049c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104a0:	6013      	str	r3, [r2, #0]
 80104a2:	f7f8 fb27 	bl	8008af4 <HAL_GetTick>
 80104a6:	60b8      	str	r0, [r7, #8]
 80104a8:	e008      	b.n	80104bc <RCCEx_PLL3_Config+0x144>
 80104aa:	f7f8 fb23 	bl	8008af4 <HAL_GetTick>
 80104ae:	4602      	mov	r2, r0
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	1ad3      	subs	r3, r2, r3
 80104b4:	2b02      	cmp	r3, #2
 80104b6:	d901      	bls.n	80104bc <RCCEx_PLL3_Config+0x144>
 80104b8:	2303      	movs	r3, #3
 80104ba:	e006      	b.n	80104ca <RCCEx_PLL3_Config+0x152>
 80104bc:	4b05      	ldr	r3, [pc, #20]	@ (80104d4 <RCCEx_PLL3_Config+0x15c>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d0f0      	beq.n	80104aa <RCCEx_PLL3_Config+0x132>
 80104c8:	7bfb      	ldrb	r3, [r7, #15]
 80104ca:	4618      	mov	r0, r3
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	58024400 	.word	0x58024400
 80104d8:	ffff0007 	.word	0xffff0007

080104dc <HAL_SD_Init>:
 80104dc:	b580      	push	{r7, lr}
 80104de:	b08a      	sub	sp, #40	@ 0x28
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d101      	bne.n	80104ee <HAL_SD_Init+0x12>
 80104ea:	2301      	movs	r3, #1
 80104ec:	e075      	b.n	80105da <HAL_SD_Init+0xfe>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d105      	bne.n	8010506 <HAL_SD_Init+0x2a>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	761a      	strb	r2, [r3, #24]
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f7f7 f957 	bl	80077b4 <HAL_SD_MspInit>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2204      	movs	r2, #4
 801050a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 f868 	bl	80105e4 <HAL_SD_InitCard>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <HAL_SD_Init+0x42>
 801051a:	2301      	movs	r3, #1
 801051c:	e05d      	b.n	80105da <HAL_SD_Init+0xfe>
 801051e:	f107 0308 	add.w	r3, r7, #8
 8010522:	4619      	mov	r1, r3
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f000 fdb5 	bl	8011094 <HAL_SD_GetCardStatus>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d001      	beq.n	8010534 <HAL_SD_Init+0x58>
 8010530:	2301      	movs	r3, #1
 8010532:	e052      	b.n	80105da <HAL_SD_Init+0xfe>
 8010534:	7e3b      	ldrb	r3, [r7, #24]
 8010536:	b2db      	uxtb	r3, r3
 8010538:	627b      	str	r3, [r7, #36]	@ 0x24
 801053a:	7e7b      	ldrb	r3, [r7, #25]
 801053c:	b2db      	uxtb	r3, r3
 801053e:	623b      	str	r3, [r7, #32]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010544:	2b01      	cmp	r3, #1
 8010546:	d10a      	bne.n	801055e <HAL_SD_Init+0x82>
 8010548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801054a:	2b00      	cmp	r3, #0
 801054c:	d102      	bne.n	8010554 <HAL_SD_Init+0x78>
 801054e:	6a3b      	ldr	r3, [r7, #32]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d004      	beq.n	801055e <HAL_SD_Init+0x82>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801055a:	659a      	str	r2, [r3, #88]	@ 0x58
 801055c:	e00b      	b.n	8010576 <HAL_SD_Init+0x9a>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010562:	2b01      	cmp	r3, #1
 8010564:	d104      	bne.n	8010570 <HAL_SD_Init+0x94>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801056c:	659a      	str	r2, [r3, #88]	@ 0x58
 801056e:	e002      	b.n	8010576 <HAL_SD_Init+0x9a>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	659a      	str	r2, [r3, #88]	@ 0x58
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	4619      	mov	r1, r3
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 fe73 	bl	8011268 <HAL_SD_ConfigWideBusOperation>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d001      	beq.n	801058c <HAL_SD_Init+0xb0>
 8010588:	2301      	movs	r3, #1
 801058a:	e026      	b.n	80105da <HAL_SD_Init+0xfe>
 801058c:	f7f8 fab2 	bl	8008af4 <HAL_GetTick>
 8010590:	61f8      	str	r0, [r7, #28]
 8010592:	e011      	b.n	80105b8 <HAL_SD_Init+0xdc>
 8010594:	f7f8 faae 	bl	8008af4 <HAL_GetTick>
 8010598:	4602      	mov	r2, r0
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105a2:	d109      	bne.n	80105b8 <HAL_SD_Init+0xdc>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80105aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80105b4:	2303      	movs	r3, #3
 80105b6:	e010      	b.n	80105da <HAL_SD_Init+0xfe>
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 ff67 	bl	801148c <HAL_SD_GetCardState>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b04      	cmp	r3, #4
 80105c2:	d1e7      	bne.n	8010594 <HAL_SD_Init+0xb8>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80105d8:	2300      	movs	r3, #0
 80105da:	4618      	mov	r0, r3
 80105dc:	3728      	adds	r7, #40	@ 0x28
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
	...

080105e4 <HAL_SD_InitCard>:
 80105e4:	b590      	push	{r4, r7, lr}
 80105e6:	b08d      	sub	sp, #52	@ 0x34
 80105e8:	af02      	add	r7, sp, #8
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	2300      	movs	r3, #0
 80105ee:	60fb      	str	r3, [r7, #12]
 80105f0:	2300      	movs	r3, #0
 80105f2:	613b      	str	r3, [r7, #16]
 80105f4:	2300      	movs	r3, #0
 80105f6:	617b      	str	r3, [r7, #20]
 80105f8:	2300      	movs	r3, #0
 80105fa:	61bb      	str	r3, [r7, #24]
 80105fc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8010600:	f04f 0100 	mov.w	r1, #0
 8010604:	f7fe fd24 	bl	800f050 <HAL_RCCEx_GetPeriphCLKFreq>
 8010608:	6278      	str	r0, [r7, #36]	@ 0x24
 801060a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801060c:	2b00      	cmp	r3, #0
 801060e:	d109      	bne.n	8010624 <HAL_SD_InitCard+0x40>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2201      	movs	r2, #1
 8010614:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801061e:	635a      	str	r2, [r3, #52]	@ 0x34
 8010620:	2301      	movs	r3, #1
 8010622:	e070      	b.n	8010706 <HAL_SD_InitCard+0x122>
 8010624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010626:	0a1b      	lsrs	r3, r3, #8
 8010628:	4a39      	ldr	r2, [pc, #228]	@ (8010710 <HAL_SD_InitCard+0x12c>)
 801062a:	fba2 2303 	umull	r2, r3, r2, r3
 801062e:	091b      	lsrs	r3, r3, #4
 8010630:	61fb      	str	r3, [r7, #28]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681c      	ldr	r4, [r3, #0]
 8010636:	466a      	mov	r2, sp
 8010638:	f107 0318 	add.w	r3, r7, #24
 801063c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010640:	e882 0003 	stmia.w	r2, {r0, r1}
 8010644:	f107 030c 	add.w	r3, r7, #12
 8010648:	cb0e      	ldmia	r3, {r1, r2, r3}
 801064a:	4620      	mov	r0, r4
 801064c:	f006 f844 	bl	80166d8 <SDMMC_Init>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4618      	mov	r0, r3
 8010656:	f006 f887 	bl	8016768 <SDMMC_PowerState_ON>
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d005      	beq.n	801066c <HAL_SD_InitCard+0x88>
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	005b      	lsls	r3, r3, #1
 8010664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010666:	fbb2 f3f3 	udiv	r3, r2, r3
 801066a:	627b      	str	r3, [r7, #36]	@ 0x24
 801066c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801066e:	2b00      	cmp	r3, #0
 8010670:	d007      	beq.n	8010682 <HAL_SD_InitCard+0x9e>
 8010672:	4a28      	ldr	r2, [pc, #160]	@ (8010714 <HAL_SD_InitCard+0x130>)
 8010674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010676:	fbb2 f3f3 	udiv	r3, r2, r3
 801067a:	3301      	adds	r3, #1
 801067c:	4618      	mov	r0, r3
 801067e:	f7f8 fa45 	bl	8008b0c <HAL_Delay>
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 fff0 	bl	8011668 <SD_PowerON>
 8010688:	6238      	str	r0, [r7, #32]
 801068a:	6a3b      	ldr	r3, [r7, #32]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d00b      	beq.n	80106a8 <HAL_SD_InitCard+0xc4>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2201      	movs	r2, #1
 8010694:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801069c:	6a3b      	ldr	r3, [r7, #32]
 801069e:	431a      	orrs	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80106a4:	2301      	movs	r3, #1
 80106a6:	e02e      	b.n	8010706 <HAL_SD_InitCard+0x122>
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 ff0f 	bl	80114cc <SD_InitCard>
 80106ae:	6238      	str	r0, [r7, #32]
 80106b0:	6a3b      	ldr	r3, [r7, #32]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00b      	beq.n	80106ce <HAL_SD_InitCard+0xea>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2201      	movs	r2, #1
 80106ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80106c2:	6a3b      	ldr	r3, [r7, #32]
 80106c4:	431a      	orrs	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80106ca:	2301      	movs	r3, #1
 80106cc:	e01b      	b.n	8010706 <HAL_SD_InitCard+0x122>
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80106d6:	4618      	mov	r0, r3
 80106d8:	f006 f8dc 	bl	8016894 <SDMMC_CmdBlockLength>
 80106dc:	6238      	str	r0, [r7, #32]
 80106de:	6a3b      	ldr	r3, [r7, #32]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d00f      	beq.n	8010704 <HAL_SD_InitCard+0x120>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4a0b      	ldr	r2, [pc, #44]	@ (8010718 <HAL_SD_InitCard+0x134>)
 80106ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80106f0:	6a3b      	ldr	r3, [r7, #32]
 80106f2:	431a      	orrs	r2, r3
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2201      	movs	r2, #1
 80106fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010700:	2301      	movs	r3, #1
 8010702:	e000      	b.n	8010706 <HAL_SD_InitCard+0x122>
 8010704:	2300      	movs	r3, #0
 8010706:	4618      	mov	r0, r3
 8010708:	372c      	adds	r7, #44	@ 0x2c
 801070a:	46bd      	mov	sp, r7
 801070c:	bd90      	pop	{r4, r7, pc}
 801070e:	bf00      	nop
 8010710:	014f8b59 	.word	0x014f8b59
 8010714:	00012110 	.word	0x00012110
 8010718:	1fe00fff 	.word	0x1fe00fff

0801071c <HAL_SD_ReadBlocks>:
 801071c:	b580      	push	{r7, lr}
 801071e:	b092      	sub	sp, #72	@ 0x48
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	60b9      	str	r1, [r7, #8]
 8010726:	607a      	str	r2, [r7, #4]
 8010728:	603b      	str	r3, [r7, #0]
 801072a:	f7f8 f9e3 	bl	8008af4 <HAL_GetTick>
 801072e:	6338      	str	r0, [r7, #48]	@ 0x30
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	637b      	str	r3, [r7, #52]	@ 0x34
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d107      	bne.n	801074e <HAL_SD_ReadBlocks+0x32>
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010742:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	635a      	str	r2, [r3, #52]	@ 0x34
 801074a:	2301      	movs	r3, #1
 801074c:	e167      	b.n	8010a1e <HAL_SD_ReadBlocks+0x302>
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010754:	b2db      	uxtb	r3, r3
 8010756:	2b01      	cmp	r3, #1
 8010758:	f040 815a 	bne.w	8010a10 <HAL_SD_ReadBlocks+0x2f4>
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2200      	movs	r2, #0
 8010760:	635a      	str	r2, [r3, #52]	@ 0x34
 8010762:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	441a      	add	r2, r3
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801076c:	429a      	cmp	r2, r3
 801076e:	d907      	bls.n	8010780 <HAL_SD_ReadBlocks+0x64>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010774:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	635a      	str	r2, [r3, #52]	@ 0x34
 801077c:	2301      	movs	r3, #1
 801077e:	e14e      	b.n	8010a1e <HAL_SD_ReadBlocks+0x302>
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2203      	movs	r2, #3
 8010784:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2200      	movs	r2, #0
 801078e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010794:	2b01      	cmp	r3, #1
 8010796:	d002      	beq.n	801079e <HAL_SD_ReadBlocks+0x82>
 8010798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801079a:	025b      	lsls	r3, r3, #9
 801079c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801079e:	f04f 33ff 	mov.w	r3, #4294967295
 80107a2:	617b      	str	r3, [r7, #20]
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	025b      	lsls	r3, r3, #9
 80107a8:	61bb      	str	r3, [r7, #24]
 80107aa:	2390      	movs	r3, #144	@ 0x90
 80107ac:	61fb      	str	r3, [r7, #28]
 80107ae:	2302      	movs	r3, #2
 80107b0:	623b      	str	r3, [r7, #32]
 80107b2:	2300      	movs	r3, #0
 80107b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80107b6:	2300      	movs	r3, #0
 80107b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f107 0214 	add.w	r2, r7, #20
 80107c2:	4611      	mov	r1, r2
 80107c4:	4618      	mov	r0, r3
 80107c6:	f006 f839 	bl	801683c <SDMMC_ConfigData>
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	68da      	ldr	r2, [r3, #12]
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80107d8:	60da      	str	r2, [r3, #12]
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d90a      	bls.n	80107f6 <HAL_SD_ReadBlocks+0xda>
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2202      	movs	r2, #2
 80107e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80107ec:	4618      	mov	r0, r3
 80107ee:	f006 f897 	bl	8016920 <SDMMC_CmdReadMultiBlock>
 80107f2:	6478      	str	r0, [r7, #68]	@ 0x44
 80107f4:	e009      	b.n	801080a <HAL_SD_ReadBlocks+0xee>
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2201      	movs	r2, #1
 80107fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010802:	4618      	mov	r0, r3
 8010804:	f006 f869 	bl	80168da <SDMMC_CmdReadSingleBlock>
 8010808:	6478      	str	r0, [r7, #68]	@ 0x44
 801080a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801080c:	2b00      	cmp	r3, #0
 801080e:	d012      	beq.n	8010836 <HAL_SD_ReadBlocks+0x11a>
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4a84      	ldr	r2, [pc, #528]	@ (8010a28 <HAL_SD_ReadBlocks+0x30c>)
 8010816:	639a      	str	r2, [r3, #56]	@ 0x38
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801081c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801081e:	431a      	orrs	r2, r3
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	635a      	str	r2, [r3, #52]	@ 0x34
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2201      	movs	r2, #1
 8010828:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010832:	2301      	movs	r3, #1
 8010834:	e0f3      	b.n	8010a1e <HAL_SD_ReadBlocks+0x302>
 8010836:	69bb      	ldr	r3, [r7, #24]
 8010838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801083a:	e058      	b.n	80108ee <HAL_SD_ReadBlocks+0x1d2>
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010846:	2b00      	cmp	r3, #0
 8010848:	d033      	beq.n	80108b2 <HAL_SD_ReadBlocks+0x196>
 801084a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801084c:	2b1f      	cmp	r3, #31
 801084e:	d930      	bls.n	80108b2 <HAL_SD_ReadBlocks+0x196>
 8010850:	2300      	movs	r3, #0
 8010852:	643b      	str	r3, [r7, #64]	@ 0x40
 8010854:	e027      	b.n	80108a6 <HAL_SD_ReadBlocks+0x18a>
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4618      	mov	r0, r3
 801085c:	f005 ff66 	bl	801672c <SDMMC_ReadFIFO>
 8010860:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010864:	b2da      	uxtb	r2, r3
 8010866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010868:	701a      	strb	r2, [r3, #0]
 801086a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801086c:	3301      	adds	r3, #1
 801086e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010872:	0a1b      	lsrs	r3, r3, #8
 8010874:	b2da      	uxtb	r2, r3
 8010876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010878:	701a      	strb	r2, [r3, #0]
 801087a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801087c:	3301      	adds	r3, #1
 801087e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010882:	0c1b      	lsrs	r3, r3, #16
 8010884:	b2da      	uxtb	r2, r3
 8010886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010888:	701a      	strb	r2, [r3, #0]
 801088a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801088c:	3301      	adds	r3, #1
 801088e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010892:	0e1b      	lsrs	r3, r3, #24
 8010894:	b2da      	uxtb	r2, r3
 8010896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010898:	701a      	strb	r2, [r3, #0]
 801089a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801089c:	3301      	adds	r3, #1
 801089e:	637b      	str	r3, [r7, #52]	@ 0x34
 80108a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108a2:	3301      	adds	r3, #1
 80108a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80108a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108a8:	2b07      	cmp	r3, #7
 80108aa:	d9d4      	bls.n	8010856 <HAL_SD_ReadBlocks+0x13a>
 80108ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108ae:	3b20      	subs	r3, #32
 80108b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80108b2:	f7f8 f91f 	bl	8008af4 <HAL_GetTick>
 80108b6:	4602      	mov	r2, r0
 80108b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ba:	1ad3      	subs	r3, r2, r3
 80108bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80108be:	429a      	cmp	r2, r3
 80108c0:	d902      	bls.n	80108c8 <HAL_SD_ReadBlocks+0x1ac>
 80108c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d112      	bne.n	80108ee <HAL_SD_ReadBlocks+0x1d2>
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4a56      	ldr	r2, [pc, #344]	@ (8010a28 <HAL_SD_ReadBlocks+0x30c>)
 80108ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	635a      	str	r2, [r3, #52]	@ 0x34
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2201      	movs	r2, #1
 80108e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	2200      	movs	r2, #0
 80108e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80108ea:	2303      	movs	r3, #3
 80108ec:	e097      	b.n	8010a1e <HAL_SD_ReadBlocks+0x302>
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108f4:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d09f      	beq.n	801083c <HAL_SD_ReadBlocks+0x120>
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68da      	ldr	r2, [r3, #12]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801090a:	60da      	str	r2, [r3, #12]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010916:	2b00      	cmp	r3, #0
 8010918:	d022      	beq.n	8010960 <HAL_SD_ReadBlocks+0x244>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d91f      	bls.n	8010960 <HAL_SD_ReadBlocks+0x244>
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010924:	2b03      	cmp	r3, #3
 8010926:	d01b      	beq.n	8010960 <HAL_SD_ReadBlocks+0x244>
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4618      	mov	r0, r3
 801092e:	f006 f861 	bl	80169f4 <SDMMC_CmdStopTransfer>
 8010932:	6478      	str	r0, [r7, #68]	@ 0x44
 8010934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010936:	2b00      	cmp	r3, #0
 8010938:	d012      	beq.n	8010960 <HAL_SD_ReadBlocks+0x244>
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4a3a      	ldr	r2, [pc, #232]	@ (8010a28 <HAL_SD_ReadBlocks+0x30c>)
 8010940:	639a      	str	r2, [r3, #56]	@ 0x38
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010948:	431a      	orrs	r2, r3
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	635a      	str	r2, [r3, #52]	@ 0x34
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2201      	movs	r2, #1
 8010952:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2200      	movs	r2, #0
 801095a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801095c:	2301      	movs	r3, #1
 801095e:	e05e      	b.n	8010a1e <HAL_SD_ReadBlocks+0x302>
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010966:	f003 0308 	and.w	r3, r3, #8
 801096a:	2b00      	cmp	r3, #0
 801096c:	d012      	beq.n	8010994 <HAL_SD_ReadBlocks+0x278>
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4a2d      	ldr	r2, [pc, #180]	@ (8010a28 <HAL_SD_ReadBlocks+0x30c>)
 8010974:	639a      	str	r2, [r3, #56]	@ 0x38
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801097a:	f043 0208 	orr.w	r2, r3, #8
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	635a      	str	r2, [r3, #52]	@ 0x34
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2201      	movs	r2, #1
 8010986:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2200      	movs	r2, #0
 801098e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010990:	2301      	movs	r3, #1
 8010992:	e044      	b.n	8010a1e <HAL_SD_ReadBlocks+0x302>
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801099a:	f003 0302 	and.w	r3, r3, #2
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d012      	beq.n	80109c8 <HAL_SD_ReadBlocks+0x2ac>
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	4a20      	ldr	r2, [pc, #128]	@ (8010a28 <HAL_SD_ReadBlocks+0x30c>)
 80109a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109ae:	f043 0202 	orr.w	r2, r3, #2
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2201      	movs	r2, #1
 80109ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2200      	movs	r2, #0
 80109c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80109c4:	2301      	movs	r3, #1
 80109c6:	e02a      	b.n	8010a1e <HAL_SD_ReadBlocks+0x302>
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109ce:	f003 0320 	and.w	r3, r3, #32
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d012      	beq.n	80109fc <HAL_SD_ReadBlocks+0x2e0>
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	4a13      	ldr	r2, [pc, #76]	@ (8010a28 <HAL_SD_ReadBlocks+0x30c>)
 80109dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109e2:	f043 0220 	orr.w	r2, r3, #32
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2201      	movs	r2, #1
 80109ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2200      	movs	r2, #0
 80109f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80109f8:	2301      	movs	r3, #1
 80109fa:	e010      	b.n	8010a1e <HAL_SD_ReadBlocks+0x302>
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4a0a      	ldr	r2, [pc, #40]	@ (8010a2c <HAL_SD_ReadBlocks+0x310>)
 8010a02:	639a      	str	r2, [r3, #56]	@ 0x38
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2201      	movs	r2, #1
 8010a08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	e006      	b.n	8010a1e <HAL_SD_ReadBlocks+0x302>
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a14:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3748      	adds	r7, #72	@ 0x48
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	1fe00fff 	.word	0x1fe00fff
 8010a2c:	18000f3a 	.word	0x18000f3a

08010a30 <HAL_SD_WriteBlocks>:
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b092      	sub	sp, #72	@ 0x48
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	607a      	str	r2, [r7, #4]
 8010a3c:	603b      	str	r3, [r7, #0]
 8010a3e:	f7f8 f859 	bl	8008af4 <HAL_GetTick>
 8010a42:	6338      	str	r0, [r7, #48]	@ 0x30
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d107      	bne.n	8010a62 <HAL_SD_WriteBlocks+0x32>
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a56:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e16b      	b.n	8010d3a <HAL_SD_WriteBlocks+0x30a>
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	f040 815e 	bne.w	8010d2c <HAL_SD_WriteBlocks+0x2fc>
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2200      	movs	r2, #0
 8010a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8010a76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	441a      	add	r2, r3
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d907      	bls.n	8010a94 <HAL_SD_WriteBlocks+0x64>
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a88:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8010a90:	2301      	movs	r3, #1
 8010a92:	e152      	b.n	8010d3a <HAL_SD_WriteBlocks+0x30a>
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2203      	movs	r2, #3
 8010a98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d002      	beq.n	8010ab2 <HAL_SD_WriteBlocks+0x82>
 8010aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aae:	025b      	lsls	r3, r3, #9
 8010ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ab6:	61bb      	str	r3, [r7, #24]
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	025b      	lsls	r3, r3, #9
 8010abc:	61fb      	str	r3, [r7, #28]
 8010abe:	2390      	movs	r3, #144	@ 0x90
 8010ac0:	623b      	str	r3, [r7, #32]
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010aca:	2300      	movs	r3, #0
 8010acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f107 0218 	add.w	r2, r7, #24
 8010ad6:	4611      	mov	r1, r2
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f005 feaf 	bl	801683c <SDMMC_ConfigData>
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	68da      	ldr	r2, [r3, #12]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010aec:	60da      	str	r2, [r3, #12]
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d90a      	bls.n	8010b0a <HAL_SD_WriteBlocks+0xda>
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2220      	movs	r2, #32
 8010af8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010b00:	4618      	mov	r0, r3
 8010b02:	f005 ff53 	bl	80169ac <SDMMC_CmdWriteMultiBlock>
 8010b06:	6478      	str	r0, [r7, #68]	@ 0x44
 8010b08:	e009      	b.n	8010b1e <HAL_SD_WriteBlocks+0xee>
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2210      	movs	r2, #16
 8010b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010b16:	4618      	mov	r0, r3
 8010b18:	f005 ff25 	bl	8016966 <SDMMC_CmdWriteSingleBlock>
 8010b1c:	6478      	str	r0, [r7, #68]	@ 0x44
 8010b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d012      	beq.n	8010b4a <HAL_SD_WriteBlocks+0x11a>
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4a86      	ldr	r2, [pc, #536]	@ (8010d44 <HAL_SD_WriteBlocks+0x314>)
 8010b2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b32:	431a      	orrs	r2, r3
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	635a      	str	r2, [r3, #52]	@ 0x34
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2200      	movs	r2, #0
 8010b44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010b46:	2301      	movs	r3, #1
 8010b48:	e0f7      	b.n	8010d3a <HAL_SD_WriteBlocks+0x30a>
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b4e:	e05c      	b.n	8010c0a <HAL_SD_WriteBlocks+0x1da>
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d037      	beq.n	8010bce <HAL_SD_WriteBlocks+0x19e>
 8010b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b60:	2b1f      	cmp	r3, #31
 8010b62:	d934      	bls.n	8010bce <HAL_SD_WriteBlocks+0x19e>
 8010b64:	2300      	movs	r3, #0
 8010b66:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b68:	e02b      	b.n	8010bc2 <HAL_SD_WriteBlocks+0x192>
 8010b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	617b      	str	r3, [r7, #20]
 8010b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b72:	3301      	adds	r3, #1
 8010b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	021a      	lsls	r2, r3, #8
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	617b      	str	r3, [r7, #20]
 8010b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b84:	3301      	adds	r3, #1
 8010b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	041a      	lsls	r2, r3, #16
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	4313      	orrs	r3, r2
 8010b92:	617b      	str	r3, [r7, #20]
 8010b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b96:	3301      	adds	r3, #1
 8010b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	061a      	lsls	r2, r3, #24
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	617b      	str	r3, [r7, #20]
 8010ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ba8:	3301      	adds	r3, #1
 8010baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f107 0214 	add.w	r2, r7, #20
 8010bb4:	4611      	mov	r1, r2
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f005 fdc5 	bl	8016746 <SDMMC_WriteFIFO>
 8010bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8010bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bc4:	2b07      	cmp	r3, #7
 8010bc6:	d9d0      	bls.n	8010b6a <HAL_SD_WriteBlocks+0x13a>
 8010bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bca:	3b20      	subs	r3, #32
 8010bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010bce:	f7f7 ff91 	bl	8008af4 <HAL_GetTick>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d902      	bls.n	8010be4 <HAL_SD_WriteBlocks+0x1b4>
 8010bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d112      	bne.n	8010c0a <HAL_SD_WriteBlocks+0x1da>
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	4a56      	ldr	r2, [pc, #344]	@ (8010d44 <HAL_SD_WriteBlocks+0x314>)
 8010bea:	639a      	str	r2, [r3, #56]	@ 0x38
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bf2:	431a      	orrs	r2, r3
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	635a      	str	r2, [r3, #52]	@ 0x34
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2200      	movs	r2, #0
 8010c04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010c06:	2303      	movs	r3, #3
 8010c08:	e097      	b.n	8010d3a <HAL_SD_WriteBlocks+0x30a>
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c10:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d09b      	beq.n	8010b50 <HAL_SD_WriteBlocks+0x120>
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	68da      	ldr	r2, [r3, #12]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010c26:	60da      	str	r2, [r3, #12]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d022      	beq.n	8010c7c <HAL_SD_WriteBlocks+0x24c>
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d91f      	bls.n	8010c7c <HAL_SD_WriteBlocks+0x24c>
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c40:	2b03      	cmp	r3, #3
 8010c42:	d01b      	beq.n	8010c7c <HAL_SD_WriteBlocks+0x24c>
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f005 fed3 	bl	80169f4 <SDMMC_CmdStopTransfer>
 8010c4e:	6478      	str	r0, [r7, #68]	@ 0x44
 8010c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d012      	beq.n	8010c7c <HAL_SD_WriteBlocks+0x24c>
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	4a3a      	ldr	r2, [pc, #232]	@ (8010d44 <HAL_SD_WriteBlocks+0x314>)
 8010c5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c64:	431a      	orrs	r2, r3
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	635a      	str	r2, [r3, #52]	@ 0x34
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	2200      	movs	r2, #0
 8010c76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010c78:	2301      	movs	r3, #1
 8010c7a:	e05e      	b.n	8010d3a <HAL_SD_WriteBlocks+0x30a>
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c82:	f003 0308 	and.w	r3, r3, #8
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d012      	beq.n	8010cb0 <HAL_SD_WriteBlocks+0x280>
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8010d44 <HAL_SD_WriteBlocks+0x314>)
 8010c90:	639a      	str	r2, [r3, #56]	@ 0x38
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c96:	f043 0208 	orr.w	r2, r3, #8
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010cac:	2301      	movs	r3, #1
 8010cae:	e044      	b.n	8010d3a <HAL_SD_WriteBlocks+0x30a>
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cb6:	f003 0302 	and.w	r3, r3, #2
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d012      	beq.n	8010ce4 <HAL_SD_WriteBlocks+0x2b4>
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4a20      	ldr	r2, [pc, #128]	@ (8010d44 <HAL_SD_WriteBlocks+0x314>)
 8010cc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cca:	f043 0202 	orr.w	r2, r3, #2
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	e02a      	b.n	8010d3a <HAL_SD_WriteBlocks+0x30a>
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cea:	f003 0310 	and.w	r3, r3, #16
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d012      	beq.n	8010d18 <HAL_SD_WriteBlocks+0x2e8>
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4a13      	ldr	r2, [pc, #76]	@ (8010d44 <HAL_SD_WriteBlocks+0x314>)
 8010cf8:	639a      	str	r2, [r3, #56]	@ 0x38
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cfe:	f043 0210 	orr.w	r2, r3, #16
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	635a      	str	r2, [r3, #52]	@ 0x34
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2201      	movs	r2, #1
 8010d0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2200      	movs	r2, #0
 8010d12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010d14:	2301      	movs	r3, #1
 8010d16:	e010      	b.n	8010d3a <HAL_SD_WriteBlocks+0x30a>
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8010d48 <HAL_SD_WriteBlocks+0x318>)
 8010d1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2201      	movs	r2, #1
 8010d24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010d28:	2300      	movs	r3, #0
 8010d2a:	e006      	b.n	8010d3a <HAL_SD_WriteBlocks+0x30a>
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	635a      	str	r2, [r3, #52]	@ 0x34
 8010d38:	2301      	movs	r3, #1
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3748      	adds	r7, #72	@ 0x48
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	1fe00fff 	.word	0x1fe00fff
 8010d48:	18000f3a 	.word	0x18000f3a

08010d4c <HAL_SD_GetCardCSD>:
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	6039      	str	r1, [r7, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d5a:	0f9b      	lsrs	r3, r3, #30
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	701a      	strb	r2, [r3, #0]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d66:	0e9b      	lsrs	r3, r3, #26
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	f003 030f 	and.w	r3, r3, #15
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	705a      	strb	r2, [r3, #1]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d78:	0e1b      	lsrs	r3, r3, #24
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	f003 0303 	and.w	r3, r3, #3
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	709a      	strb	r2, [r3, #2]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d8a:	0c1b      	lsrs	r3, r3, #16
 8010d8c:	b2da      	uxtb	r2, r3
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	70da      	strb	r2, [r3, #3]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d96:	0a1b      	lsrs	r3, r3, #8
 8010d98:	b2da      	uxtb	r2, r3
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	711a      	strb	r2, [r3, #4]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010da2:	b2da      	uxtb	r2, r3
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	715a      	strb	r2, [r3, #5]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010dac:	0d1b      	lsrs	r3, r3, #20
 8010dae:	b29a      	uxth	r2, r3
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	80da      	strh	r2, [r3, #6]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010db8:	0c1b      	lsrs	r3, r3, #16
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	f003 030f 	and.w	r3, r3, #15
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	721a      	strb	r2, [r3, #8]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010dca:	0bdb      	lsrs	r3, r3, #15
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	f003 0301 	and.w	r3, r3, #1
 8010dd2:	b2da      	uxtb	r2, r3
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	725a      	strb	r2, [r3, #9]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010ddc:	0b9b      	lsrs	r3, r3, #14
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	f003 0301 	and.w	r3, r3, #1
 8010de4:	b2da      	uxtb	r2, r3
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	729a      	strb	r2, [r3, #10]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010dee:	0b5b      	lsrs	r3, r3, #13
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	f003 0301 	and.w	r3, r3, #1
 8010df6:	b2da      	uxtb	r2, r3
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	72da      	strb	r2, [r3, #11]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e00:	0b1b      	lsrs	r3, r3, #12
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	f003 0301 	and.w	r3, r3, #1
 8010e08:	b2da      	uxtb	r2, r3
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	731a      	strb	r2, [r3, #12]
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	2200      	movs	r2, #0
 8010e12:	735a      	strb	r2, [r3, #13]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d163      	bne.n	8010ee4 <HAL_SD_GetCardCSD+0x198>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e20:	009a      	lsls	r2, r3, #2
 8010e22:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8010e26:	4013      	ands	r3, r2
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8010e2c:	0f92      	lsrs	r2, r2, #30
 8010e2e:	431a      	orrs	r2, r3
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	611a      	str	r2, [r3, #16]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e38:	0edb      	lsrs	r3, r3, #27
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	f003 0307 	and.w	r3, r3, #7
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	751a      	strb	r2, [r3, #20]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e4a:	0e1b      	lsrs	r3, r3, #24
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	f003 0307 	and.w	r3, r3, #7
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	755a      	strb	r2, [r3, #21]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e5c:	0d5b      	lsrs	r3, r3, #21
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	f003 0307 	and.w	r3, r3, #7
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	759a      	strb	r2, [r3, #22]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e6e:	0c9b      	lsrs	r3, r3, #18
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	f003 0307 	and.w	r3, r3, #7
 8010e76:	b2da      	uxtb	r2, r3
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	75da      	strb	r2, [r3, #23]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e80:	0bdb      	lsrs	r3, r3, #15
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	f003 0307 	and.w	r3, r3, #7
 8010e88:	b2da      	uxtb	r2, r3
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	761a      	strb	r2, [r3, #24]
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	691b      	ldr	r3, [r3, #16]
 8010e92:	1c5a      	adds	r2, r3, #1
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	649a      	str	r2, [r3, #72]	@ 0x48
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	7e1b      	ldrb	r3, [r3, #24]
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	f003 0307 	and.w	r3, r3, #7
 8010ea2:	3302      	adds	r3, #2
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010eae:	fb03 f202 	mul.w	r2, r3, r2
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	649a      	str	r2, [r3, #72]	@ 0x48
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	7a1b      	ldrb	r3, [r3, #8]
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	f003 030f 	and.w	r3, r3, #15
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	409a      	lsls	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010ed0:	0a52      	lsrs	r2, r2, #9
 8010ed2:	fb03 f202 	mul.w	r2, r3, r2
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	651a      	str	r2, [r3, #80]	@ 0x50
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ee0:	655a      	str	r2, [r3, #84]	@ 0x54
 8010ee2:	e031      	b.n	8010f48 <HAL_SD_GetCardCSD+0x1fc>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ee8:	2b01      	cmp	r3, #1
 8010eea:	d11d      	bne.n	8010f28 <HAL_SD_GetCardCSD+0x1dc>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010ef0:	041b      	lsls	r3, r3, #16
 8010ef2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010efa:	0c1b      	lsrs	r3, r3, #16
 8010efc:	431a      	orrs	r2, r3
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	611a      	str	r2, [r3, #16]
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	691b      	ldr	r3, [r3, #16]
 8010f06:	3301      	adds	r3, #1
 8010f08:	029a      	lsls	r2, r3, #10
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	649a      	str	r2, [r3, #72]	@ 0x48
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	651a      	str	r2, [r3, #80]	@ 0x50
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	655a      	str	r2, [r3, #84]	@ 0x54
 8010f26:	e00f      	b.n	8010f48 <HAL_SD_GetCardCSD+0x1fc>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a58      	ldr	r2, [pc, #352]	@ (8011090 <HAL_SD_GetCardCSD+0x344>)
 8010f2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2201      	movs	r2, #1
 8010f40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010f44:	2301      	movs	r3, #1
 8010f46:	e09d      	b.n	8011084 <HAL_SD_GetCardCSD+0x338>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f4c:	0b9b      	lsrs	r3, r3, #14
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	f003 0301 	and.w	r3, r3, #1
 8010f54:	b2da      	uxtb	r2, r3
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	765a      	strb	r2, [r3, #25]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f5e:	09db      	lsrs	r3, r3, #7
 8010f60:	b2db      	uxtb	r3, r3
 8010f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f66:	b2da      	uxtb	r2, r3
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	769a      	strb	r2, [r3, #26]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	76da      	strb	r2, [r3, #27]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f80:	0fdb      	lsrs	r3, r3, #31
 8010f82:	b2da      	uxtb	r2, r3
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	771a      	strb	r2, [r3, #28]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f8c:	0f5b      	lsrs	r3, r3, #29
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	f003 0303 	and.w	r3, r3, #3
 8010f94:	b2da      	uxtb	r2, r3
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	775a      	strb	r2, [r3, #29]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f9e:	0e9b      	lsrs	r3, r3, #26
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	f003 0307 	and.w	r3, r3, #7
 8010fa6:	b2da      	uxtb	r2, r3
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	779a      	strb	r2, [r3, #30]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fb0:	0d9b      	lsrs	r3, r3, #22
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	f003 030f 	and.w	r3, r3, #15
 8010fb8:	b2da      	uxtb	r2, r3
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	77da      	strb	r2, [r3, #31]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fc2:	0d5b      	lsrs	r3, r3, #21
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	f003 0301 	and.w	r3, r3, #1
 8010fca:	b2da      	uxtb	r2, r3
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	f883 2020 	strb.w	r2, [r3, #32]
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fde:	0c1b      	lsrs	r3, r3, #16
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	f003 0301 	and.w	r3, r3, #1
 8010fe6:	b2da      	uxtb	r2, r3
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ff2:	0bdb      	lsrs	r3, r3, #15
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	f003 0301 	and.w	r3, r3, #1
 8010ffa:	b2da      	uxtb	r2, r3
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011006:	0b9b      	lsrs	r3, r3, #14
 8011008:	b2db      	uxtb	r3, r3
 801100a:	f003 0301 	and.w	r3, r3, #1
 801100e:	b2da      	uxtb	r2, r3
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801101a:	0b5b      	lsrs	r3, r3, #13
 801101c:	b2db      	uxtb	r3, r3
 801101e:	f003 0301 	and.w	r3, r3, #1
 8011022:	b2da      	uxtb	r2, r3
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801102e:	0b1b      	lsrs	r3, r3, #12
 8011030:	b2db      	uxtb	r3, r3
 8011032:	f003 0301 	and.w	r3, r3, #1
 8011036:	b2da      	uxtb	r2, r3
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011042:	0a9b      	lsrs	r3, r3, #10
 8011044:	b2db      	uxtb	r3, r3
 8011046:	f003 0303 	and.w	r3, r3, #3
 801104a:	b2da      	uxtb	r2, r3
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011056:	0a1b      	lsrs	r3, r3, #8
 8011058:	b2db      	uxtb	r3, r3
 801105a:	f003 0303 	and.w	r3, r3, #3
 801105e:	b2da      	uxtb	r2, r3
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801106a:	085b      	lsrs	r3, r3, #1
 801106c:	b2db      	uxtb	r3, r3
 801106e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011072:	b2da      	uxtb	r2, r3
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	2201      	movs	r2, #1
 801107e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8011082:	2300      	movs	r3, #0
 8011084:	4618      	mov	r0, r3
 8011086:	370c      	adds	r7, #12
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr
 8011090:	1fe00fff 	.word	0x1fe00fff

08011094 <HAL_SD_GetCardStatus>:
 8011094:	b580      	push	{r7, lr}
 8011096:	b094      	sub	sp, #80	@ 0x50
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
 801109e:	2300      	movs	r3, #0
 80110a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	2b03      	cmp	r3, #3
 80110ae:	d101      	bne.n	80110b4 <HAL_SD_GetCardStatus+0x20>
 80110b0:	2301      	movs	r3, #1
 80110b2:	e0a7      	b.n	8011204 <HAL_SD_GetCardStatus+0x170>
 80110b4:	f107 0308 	add.w	r3, r7, #8
 80110b8:	4619      	mov	r1, r3
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f000 fb62 	bl	8011784 <SD_SendSDStatus>
 80110c0:	64b8      	str	r0, [r7, #72]	@ 0x48
 80110c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d011      	beq.n	80110ec <HAL_SD_GetCardStatus+0x58>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a4f      	ldr	r2, [pc, #316]	@ (801120c <HAL_SD_GetCardStatus+0x178>)
 80110ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80110d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110d6:	431a      	orrs	r2, r3
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	635a      	str	r2, [r3, #52]	@ 0x34
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2201      	movs	r2, #1
 80110e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80110e4:	2301      	movs	r3, #1
 80110e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80110ea:	e070      	b.n	80111ce <HAL_SD_GetCardStatus+0x13a>
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	099b      	lsrs	r3, r3, #6
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	f003 0303 	and.w	r3, r3, #3
 80110f6:	b2da      	uxtb	r2, r3
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	701a      	strb	r2, [r3, #0]
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	095b      	lsrs	r3, r3, #5
 8011100:	b2db      	uxtb	r3, r3
 8011102:	f003 0301 	and.w	r3, r3, #1
 8011106:	b2da      	uxtb	r2, r3
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	705a      	strb	r2, [r3, #1]
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	0a1b      	lsrs	r3, r3, #8
 8011110:	b29b      	uxth	r3, r3
 8011112:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011116:	b29a      	uxth	r2, r3
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	0e1b      	lsrs	r3, r3, #24
 801111c:	b29b      	uxth	r3, r3
 801111e:	4313      	orrs	r3, r2
 8011120:	b29a      	uxth	r2, r3
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	805a      	strh	r2, [r3, #2]
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	061a      	lsls	r2, r3, #24
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	021b      	lsls	r3, r3, #8
 801112e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011132:	431a      	orrs	r2, r3
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	0a1b      	lsrs	r3, r3, #8
 8011138:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801113c:	431a      	orrs	r2, r3
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	0e1b      	lsrs	r3, r3, #24
 8011142:	431a      	orrs	r2, r3
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	605a      	str	r2, [r3, #4]
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	b2da      	uxtb	r2, r3
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	721a      	strb	r2, [r3, #8]
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	0a1b      	lsrs	r3, r3, #8
 8011154:	b2da      	uxtb	r2, r3
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	725a      	strb	r2, [r3, #9]
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	0d1b      	lsrs	r3, r3, #20
 801115e:	b2db      	uxtb	r3, r3
 8011160:	f003 030f 	and.w	r3, r3, #15
 8011164:	b2da      	uxtb	r2, r3
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	729a      	strb	r2, [r3, #10]
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	0c1b      	lsrs	r3, r3, #16
 801116e:	b29b      	uxth	r3, r3
 8011170:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011174:	b29a      	uxth	r2, r3
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	b29b      	uxth	r3, r3
 801117a:	b2db      	uxtb	r3, r3
 801117c:	b29b      	uxth	r3, r3
 801117e:	4313      	orrs	r3, r2
 8011180:	b29a      	uxth	r2, r3
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	819a      	strh	r2, [r3, #12]
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	0a9b      	lsrs	r3, r3, #10
 801118a:	b2db      	uxtb	r3, r3
 801118c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011190:	b2da      	uxtb	r2, r3
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	739a      	strb	r2, [r3, #14]
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	0a1b      	lsrs	r3, r3, #8
 801119a:	b2db      	uxtb	r3, r3
 801119c:	f003 0303 	and.w	r3, r3, #3
 80111a0:	b2da      	uxtb	r2, r3
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	73da      	strb	r2, [r3, #15]
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	091b      	lsrs	r3, r3, #4
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	f003 030f 	and.w	r3, r3, #15
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	741a      	strb	r2, [r3, #16]
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	f003 030f 	and.w	r3, r3, #15
 80111be:	b2da      	uxtb	r2, r3
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	745a      	strb	r2, [r3, #17]
 80111c4:	69bb      	ldr	r3, [r7, #24]
 80111c6:	0e1b      	lsrs	r3, r3, #24
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	749a      	strb	r2, [r3, #18]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80111d6:	4618      	mov	r0, r3
 80111d8:	f005 fb5c 	bl	8016894 <SDMMC_CmdBlockLength>
 80111dc:	64b8      	str	r0, [r7, #72]	@ 0x48
 80111de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00d      	beq.n	8011200 <HAL_SD_GetCardStatus+0x16c>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	4a08      	ldr	r2, [pc, #32]	@ (801120c <HAL_SD_GetCardStatus+0x178>)
 80111ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80111f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2201      	movs	r2, #1
 80111f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80111fa:	2301      	movs	r3, #1
 80111fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8011200:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8011204:	4618      	mov	r0, r3
 8011206:	3750      	adds	r7, #80	@ 0x50
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}
 801120c:	1fe00fff 	.word	0x1fe00fff

08011210 <HAL_SD_GetCardInfo>:
 8011210:	b480      	push	{r7}
 8011212:	b083      	sub	sp, #12
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	601a      	str	r2, [r3, #0]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	605a      	str	r2, [r3, #4]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	609a      	str	r2, [r3, #8]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	60da      	str	r2, [r3, #12]
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	611a      	str	r2, [r3, #16]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	615a      	str	r2, [r3, #20]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	619a      	str	r2, [r3, #24]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	61da      	str	r2, [r3, #28]
 801125a:	2300      	movs	r3, #0
 801125c:	4618      	mov	r0, r3
 801125e:	370c      	adds	r7, #12
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr

08011268 <HAL_SD_ConfigWideBusOperation>:
 8011268:	b590      	push	{r4, r7, lr}
 801126a:	b08d      	sub	sp, #52	@ 0x34
 801126c:	af02      	add	r7, sp, #8
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
 8011272:	2300      	movs	r3, #0
 8011274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2203      	movs	r2, #3
 801127c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011284:	2b03      	cmp	r3, #3
 8011286:	d02e      	beq.n	80112e6 <HAL_SD_ConfigWideBusOperation+0x7e>
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801128e:	d106      	bne.n	801129e <HAL_SD_ConfigWideBusOperation+0x36>
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011294:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	635a      	str	r2, [r3, #52]	@ 0x34
 801129c:	e029      	b.n	80112f2 <HAL_SD_ConfigWideBusOperation+0x8a>
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80112a4:	d10a      	bne.n	80112bc <HAL_SD_ConfigWideBusOperation+0x54>
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 fb64 	bl	8011974 <SD_WideBus_Enable>
 80112ac:	6238      	str	r0, [r7, #32]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80112b2:	6a3b      	ldr	r3, [r7, #32]
 80112b4:	431a      	orrs	r2, r3
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80112ba:	e01a      	b.n	80112f2 <HAL_SD_ConfigWideBusOperation+0x8a>
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d10a      	bne.n	80112d8 <HAL_SD_ConfigWideBusOperation+0x70>
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 fba1 	bl	8011a0a <SD_WideBus_Disable>
 80112c8:	6238      	str	r0, [r7, #32]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80112ce:	6a3b      	ldr	r3, [r7, #32]
 80112d0:	431a      	orrs	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80112d6:	e00c      	b.n	80112f2 <HAL_SD_ConfigWideBusOperation+0x8a>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112dc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80112e4:	e005      	b.n	80112f2 <HAL_SD_ConfigWideBusOperation+0x8a>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112ea:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d007      	beq.n	801130a <HAL_SD_ConfigWideBusOperation+0xa2>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	4a5f      	ldr	r2, [pc, #380]	@ (801147c <HAL_SD_ConfigWideBusOperation+0x214>)
 8011300:	639a      	str	r2, [r3, #56]	@ 0x38
 8011302:	2301      	movs	r3, #1
 8011304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011308:	e096      	b.n	8011438 <HAL_SD_ConfigWideBusOperation+0x1d0>
 801130a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801130e:	f04f 0100 	mov.w	r1, #0
 8011312:	f7fd fe9d 	bl	800f050 <HAL_RCCEx_GetPeriphCLKFreq>
 8011316:	61f8      	str	r0, [r7, #28]
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	2b00      	cmp	r3, #0
 801131c:	f000 8083 	beq.w	8011426 <HAL_SD_ConfigWideBusOperation+0x1be>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	60bb      	str	r3, [r7, #8]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	60fb      	str	r3, [r7, #12]
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	613b      	str	r3, [r7, #16]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	691b      	ldr	r3, [r3, #16]
 8011334:	617b      	str	r3, [r7, #20]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	695a      	ldr	r2, [r3, #20]
 801133a:	69fb      	ldr	r3, [r7, #28]
 801133c:	4950      	ldr	r1, [pc, #320]	@ (8011480 <HAL_SD_ConfigWideBusOperation+0x218>)
 801133e:	fba1 1303 	umull	r1, r3, r1, r3
 8011342:	0e1b      	lsrs	r3, r3, #24
 8011344:	429a      	cmp	r2, r3
 8011346:	d303      	bcc.n	8011350 <HAL_SD_ConfigWideBusOperation+0xe8>
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	695b      	ldr	r3, [r3, #20]
 801134c:	61bb      	str	r3, [r7, #24]
 801134e:	e05a      	b.n	8011406 <HAL_SD_ConfigWideBusOperation+0x19e>
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011358:	d103      	bne.n	8011362 <HAL_SD_ConfigWideBusOperation+0xfa>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	695b      	ldr	r3, [r3, #20]
 801135e:	61bb      	str	r3, [r7, #24]
 8011360:	e051      	b.n	8011406 <HAL_SD_ConfigWideBusOperation+0x19e>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801136a:	d126      	bne.n	80113ba <HAL_SD_ConfigWideBusOperation+0x152>
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	695b      	ldr	r3, [r3, #20]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d10e      	bne.n	8011392 <HAL_SD_ConfigWideBusOperation+0x12a>
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	4a43      	ldr	r2, [pc, #268]	@ (8011484 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8011378:	4293      	cmp	r3, r2
 801137a:	d906      	bls.n	801138a <HAL_SD_ConfigWideBusOperation+0x122>
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	4a40      	ldr	r2, [pc, #256]	@ (8011480 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011380:	fba2 2303 	umull	r2, r3, r2, r3
 8011384:	0e5b      	lsrs	r3, r3, #25
 8011386:	61bb      	str	r3, [r7, #24]
 8011388:	e03d      	b.n	8011406 <HAL_SD_ConfigWideBusOperation+0x19e>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	695b      	ldr	r3, [r3, #20]
 801138e:	61bb      	str	r3, [r7, #24]
 8011390:	e039      	b.n	8011406 <HAL_SD_ConfigWideBusOperation+0x19e>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	695b      	ldr	r3, [r3, #20]
 8011396:	005b      	lsls	r3, r3, #1
 8011398:	69fa      	ldr	r2, [r7, #28]
 801139a:	fbb2 f3f3 	udiv	r3, r2, r3
 801139e:	4a39      	ldr	r2, [pc, #228]	@ (8011484 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d906      	bls.n	80113b2 <HAL_SD_ConfigWideBusOperation+0x14a>
 80113a4:	69fb      	ldr	r3, [r7, #28]
 80113a6:	4a36      	ldr	r2, [pc, #216]	@ (8011480 <HAL_SD_ConfigWideBusOperation+0x218>)
 80113a8:	fba2 2303 	umull	r2, r3, r2, r3
 80113ac:	0e5b      	lsrs	r3, r3, #25
 80113ae:	61bb      	str	r3, [r7, #24]
 80113b0:	e029      	b.n	8011406 <HAL_SD_ConfigWideBusOperation+0x19e>
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	61bb      	str	r3, [r7, #24]
 80113b8:	e025      	b.n	8011406 <HAL_SD_ConfigWideBusOperation+0x19e>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	695b      	ldr	r3, [r3, #20]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d10e      	bne.n	80113e0 <HAL_SD_ConfigWideBusOperation+0x178>
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	4a30      	ldr	r2, [pc, #192]	@ (8011488 <HAL_SD_ConfigWideBusOperation+0x220>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d906      	bls.n	80113d8 <HAL_SD_ConfigWideBusOperation+0x170>
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	4a2c      	ldr	r2, [pc, #176]	@ (8011480 <HAL_SD_ConfigWideBusOperation+0x218>)
 80113ce:	fba2 2303 	umull	r2, r3, r2, r3
 80113d2:	0e1b      	lsrs	r3, r3, #24
 80113d4:	61bb      	str	r3, [r7, #24]
 80113d6:	e016      	b.n	8011406 <HAL_SD_ConfigWideBusOperation+0x19e>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	695b      	ldr	r3, [r3, #20]
 80113dc:	61bb      	str	r3, [r7, #24]
 80113de:	e012      	b.n	8011406 <HAL_SD_ConfigWideBusOperation+0x19e>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	695b      	ldr	r3, [r3, #20]
 80113e4:	005b      	lsls	r3, r3, #1
 80113e6:	69fa      	ldr	r2, [r7, #28]
 80113e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80113ec:	4a26      	ldr	r2, [pc, #152]	@ (8011488 <HAL_SD_ConfigWideBusOperation+0x220>)
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d906      	bls.n	8011400 <HAL_SD_ConfigWideBusOperation+0x198>
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	4a22      	ldr	r2, [pc, #136]	@ (8011480 <HAL_SD_ConfigWideBusOperation+0x218>)
 80113f6:	fba2 2303 	umull	r2, r3, r2, r3
 80113fa:	0e1b      	lsrs	r3, r3, #24
 80113fc:	61bb      	str	r3, [r7, #24]
 80113fe:	e002      	b.n	8011406 <HAL_SD_ConfigWideBusOperation+0x19e>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	695b      	ldr	r3, [r3, #20]
 8011404:	61bb      	str	r3, [r7, #24]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681c      	ldr	r4, [r3, #0]
 801140a:	466a      	mov	r2, sp
 801140c:	f107 0314 	add.w	r3, r7, #20
 8011410:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011414:	e882 0003 	stmia.w	r2, {r0, r1}
 8011418:	f107 0308 	add.w	r3, r7, #8
 801141c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801141e:	4620      	mov	r0, r4
 8011420:	f005 f95a 	bl	80166d8 <SDMMC_Init>
 8011424:	e008      	b.n	8011438 <HAL_SD_ConfigWideBusOperation+0x1d0>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801142a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	635a      	str	r2, [r3, #52]	@ 0x34
 8011432:	2301      	movs	r3, #1
 8011434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011440:	4618      	mov	r0, r3
 8011442:	f005 fa27 	bl	8016894 <SDMMC_CmdBlockLength>
 8011446:	6238      	str	r0, [r7, #32]
 8011448:	6a3b      	ldr	r3, [r7, #32]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d00c      	beq.n	8011468 <HAL_SD_ConfigWideBusOperation+0x200>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	4a0a      	ldr	r2, [pc, #40]	@ (801147c <HAL_SD_ConfigWideBusOperation+0x214>)
 8011454:	639a      	str	r2, [r3, #56]	@ 0x38
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801145a:	6a3b      	ldr	r3, [r7, #32]
 801145c:	431a      	orrs	r2, r3
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	635a      	str	r2, [r3, #52]	@ 0x34
 8011462:	2301      	movs	r3, #1
 8011464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2201      	movs	r2, #1
 801146c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8011470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011474:	4618      	mov	r0, r3
 8011476:	372c      	adds	r7, #44	@ 0x2c
 8011478:	46bd      	mov	sp, r7
 801147a:	bd90      	pop	{r4, r7, pc}
 801147c:	1fe00fff 	.word	0x1fe00fff
 8011480:	55e63b89 	.word	0x55e63b89
 8011484:	02faf080 	.word	0x02faf080
 8011488:	017d7840 	.word	0x017d7840

0801148c <HAL_SD_GetCardState>:
 801148c:	b580      	push	{r7, lr}
 801148e:	b086      	sub	sp, #24
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	2300      	movs	r3, #0
 8011496:	60fb      	str	r3, [r7, #12]
 8011498:	f107 030c 	add.w	r3, r7, #12
 801149c:	4619      	mov	r1, r3
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f000 fa40 	bl	8011924 <SD_SendStatus>
 80114a4:	6178      	str	r0, [r7, #20]
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d005      	beq.n	80114b8 <HAL_SD_GetCardState+0x2c>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	431a      	orrs	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	0a5b      	lsrs	r3, r3, #9
 80114bc:	f003 030f 	and.w	r3, r3, #15
 80114c0:	613b      	str	r3, [r7, #16]
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	4618      	mov	r0, r3
 80114c6:	3718      	adds	r7, #24
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <SD_InitCard>:
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b090      	sub	sp, #64	@ 0x40
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	2300      	movs	r3, #0
 80114d6:	817b      	strh	r3, [r7, #10]
 80114d8:	f7f7 fb0c 	bl	8008af4 <HAL_GetTick>
 80114dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4618      	mov	r0, r3
 80114e4:	f005 f951 	bl	801678a <SDMMC_GetPowerState>
 80114e8:	4603      	mov	r3, r0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d102      	bne.n	80114f4 <SD_InitCard+0x28>
 80114ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80114f2:	e0b5      	b.n	8011660 <SD_InitCard+0x194>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114f8:	2b03      	cmp	r3, #3
 80114fa:	d02e      	beq.n	801155a <SD_InitCard+0x8e>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4618      	mov	r0, r3
 8011502:	f005 fb9c 	bl	8016c3e <SDMMC_CmdSendCID>
 8011506:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801150a:	2b00      	cmp	r3, #0
 801150c:	d001      	beq.n	8011512 <SD_InitCard+0x46>
 801150e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011510:	e0a6      	b.n	8011660 <SD_InitCard+0x194>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	2100      	movs	r1, #0
 8011518:	4618      	mov	r0, r3
 801151a:	f005 f97c 	bl	8016816 <SDMMC_GetResponse>
 801151e:	4602      	mov	r2, r0
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	2104      	movs	r1, #4
 801152a:	4618      	mov	r0, r3
 801152c:	f005 f973 	bl	8016816 <SDMMC_GetResponse>
 8011530:	4602      	mov	r2, r0
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	671a      	str	r2, [r3, #112]	@ 0x70
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2108      	movs	r1, #8
 801153c:	4618      	mov	r0, r3
 801153e:	f005 f96a 	bl	8016816 <SDMMC_GetResponse>
 8011542:	4602      	mov	r2, r0
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	675a      	str	r2, [r3, #116]	@ 0x74
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	210c      	movs	r1, #12
 801154e:	4618      	mov	r0, r3
 8011550:	f005 f961 	bl	8016816 <SDMMC_GetResponse>
 8011554:	4602      	mov	r2, r0
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	679a      	str	r2, [r3, #120]	@ 0x78
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801155e:	2b03      	cmp	r3, #3
 8011560:	d01d      	beq.n	801159e <SD_InitCard+0xd2>
 8011562:	e019      	b.n	8011598 <SD_InitCard+0xcc>
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f107 020a 	add.w	r2, r7, #10
 801156c:	4611      	mov	r1, r2
 801156e:	4618      	mov	r0, r3
 8011570:	f005 fba4 	bl	8016cbc <SDMMC_CmdSetRelAdd>
 8011574:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011578:	2b00      	cmp	r3, #0
 801157a:	d001      	beq.n	8011580 <SD_InitCard+0xb4>
 801157c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801157e:	e06f      	b.n	8011660 <SD_InitCard+0x194>
 8011580:	f7f7 fab8 	bl	8008af4 <HAL_GetTick>
 8011584:	4602      	mov	r2, r0
 8011586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	f241 3287 	movw	r2, #4999	@ 0x1387
 801158e:	4293      	cmp	r3, r2
 8011590:	d902      	bls.n	8011598 <SD_InitCard+0xcc>
 8011592:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011596:	e063      	b.n	8011660 <SD_InitCard+0x194>
 8011598:	897b      	ldrh	r3, [r7, #10]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d0e2      	beq.n	8011564 <SD_InitCard+0x98>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115a2:	2b03      	cmp	r3, #3
 80115a4:	d036      	beq.n	8011614 <SD_InitCard+0x148>
 80115a6:	897b      	ldrh	r3, [r7, #10]
 80115a8:	461a      	mov	r2, r3
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681a      	ldr	r2, [r3, #0]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115b6:	041b      	lsls	r3, r3, #16
 80115b8:	4619      	mov	r1, r3
 80115ba:	4610      	mov	r0, r2
 80115bc:	f005 fb5e 	bl	8016c7c <SDMMC_CmdSendCSD>
 80115c0:	63b8      	str	r0, [r7, #56]	@ 0x38
 80115c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <SD_InitCard+0x100>
 80115c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ca:	e049      	b.n	8011660 <SD_InitCard+0x194>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2100      	movs	r1, #0
 80115d2:	4618      	mov	r0, r3
 80115d4:	f005 f91f 	bl	8016816 <SDMMC_GetResponse>
 80115d8:	4602      	mov	r2, r0
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2104      	movs	r1, #4
 80115e4:	4618      	mov	r0, r3
 80115e6:	f005 f916 	bl	8016816 <SDMMC_GetResponse>
 80115ea:	4602      	mov	r2, r0
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	661a      	str	r2, [r3, #96]	@ 0x60
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2108      	movs	r1, #8
 80115f6:	4618      	mov	r0, r3
 80115f8:	f005 f90d 	bl	8016816 <SDMMC_GetResponse>
 80115fc:	4602      	mov	r2, r0
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	665a      	str	r2, [r3, #100]	@ 0x64
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	210c      	movs	r1, #12
 8011608:	4618      	mov	r0, r3
 801160a:	f005 f904 	bl	8016816 <SDMMC_GetResponse>
 801160e:	4602      	mov	r2, r0
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	669a      	str	r2, [r3, #104]	@ 0x68
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2104      	movs	r1, #4
 801161a:	4618      	mov	r0, r3
 801161c:	f005 f8fb 	bl	8016816 <SDMMC_GetResponse>
 8011620:	4603      	mov	r3, r0
 8011622:	0d1a      	lsrs	r2, r3, #20
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	641a      	str	r2, [r3, #64]	@ 0x40
 8011628:	f107 030c 	add.w	r3, r7, #12
 801162c:	4619      	mov	r1, r3
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7ff fb8c 	bl	8010d4c <HAL_SD_GetCardCSD>
 8011634:	4603      	mov	r3, r0
 8011636:	2b00      	cmp	r3, #0
 8011638:	d002      	beq.n	8011640 <SD_InitCard+0x174>
 801163a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801163e:	e00f      	b.n	8011660 <SD_InitCard+0x194>
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011648:	041b      	lsls	r3, r3, #16
 801164a:	4619      	mov	r1, r3
 801164c:	4610      	mov	r0, r2
 801164e:	f005 fa0d 	bl	8016a6c <SDMMC_CmdSelDesel>
 8011652:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011656:	2b00      	cmp	r3, #0
 8011658:	d001      	beq.n	801165e <SD_InitCard+0x192>
 801165a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801165c:	e000      	b.n	8011660 <SD_InitCard+0x194>
 801165e:	2300      	movs	r3, #0
 8011660:	4618      	mov	r0, r3
 8011662:	3740      	adds	r7, #64	@ 0x40
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <SD_PowerON>:
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	2300      	movs	r3, #0
 8011672:	60bb      	str	r3, [r7, #8]
 8011674:	2300      	movs	r3, #0
 8011676:	617b      	str	r3, [r7, #20]
 8011678:	2300      	movs	r3, #0
 801167a:	613b      	str	r3, [r7, #16]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	4618      	mov	r0, r3
 8011682:	f005 fa16 	bl	8016ab2 <SDMMC_CmdGoIdleState>
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d001      	beq.n	8011692 <SD_PowerON+0x2a>
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	e072      	b.n	8011778 <SD_PowerON+0x110>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	4618      	mov	r0, r3
 8011698:	f005 fa29 	bl	8016aee <SDMMC_CmdOperCond>
 801169c:	60f8      	str	r0, [r7, #12]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80116a4:	d10d      	bne.n	80116c2 <SD_PowerON+0x5a>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4618      	mov	r0, r3
 80116b2:	f005 f9fe 	bl	8016ab2 <SDMMC_CmdGoIdleState>
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d004      	beq.n	80116c8 <SD_PowerON+0x60>
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	e05a      	b.n	8011778 <SD_PowerON+0x110>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2201      	movs	r2, #1
 80116c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d137      	bne.n	8011740 <SD_PowerON+0xd8>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2100      	movs	r1, #0
 80116d6:	4618      	mov	r0, r3
 80116d8:	f005 fa29 	bl	8016b2e <SDMMC_CmdAppCommand>
 80116dc:	60f8      	str	r0, [r7, #12]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d02d      	beq.n	8011740 <SD_PowerON+0xd8>
 80116e4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80116e8:	e046      	b.n	8011778 <SD_PowerON+0x110>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2100      	movs	r1, #0
 80116f0:	4618      	mov	r0, r3
 80116f2:	f005 fa1c 	bl	8016b2e <SDMMC_CmdAppCommand>
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d001      	beq.n	8011702 <SD_PowerON+0x9a>
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	e03a      	b.n	8011778 <SD_PowerON+0x110>
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	491e      	ldr	r1, [pc, #120]	@ (8011780 <SD_PowerON+0x118>)
 8011708:	4618      	mov	r0, r3
 801170a:	f005 fa33 	bl	8016b74 <SDMMC_CmdAppOperCommand>
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d002      	beq.n	801171c <SD_PowerON+0xb4>
 8011716:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801171a:	e02d      	b.n	8011778 <SD_PowerON+0x110>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2100      	movs	r1, #0
 8011722:	4618      	mov	r0, r3
 8011724:	f005 f877 	bl	8016816 <SDMMC_GetResponse>
 8011728:	6178      	str	r0, [r7, #20]
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	0fdb      	lsrs	r3, r3, #31
 801172e:	2b01      	cmp	r3, #1
 8011730:	d101      	bne.n	8011736 <SD_PowerON+0xce>
 8011732:	2301      	movs	r3, #1
 8011734:	e000      	b.n	8011738 <SD_PowerON+0xd0>
 8011736:	2300      	movs	r3, #0
 8011738:	613b      	str	r3, [r7, #16]
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	3301      	adds	r3, #1
 801173e:	60bb      	str	r3, [r7, #8]
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011746:	4293      	cmp	r3, r2
 8011748:	d802      	bhi.n	8011750 <SD_PowerON+0xe8>
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d0cc      	beq.n	80116ea <SD_PowerON+0x82>
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011756:	4293      	cmp	r3, r2
 8011758:	d902      	bls.n	8011760 <SD_PowerON+0xf8>
 801175a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801175e:	e00b      	b.n	8011778 <SD_PowerON+0x110>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2200      	movs	r2, #0
 8011764:	639a      	str	r2, [r3, #56]	@ 0x38
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801176c:	2b00      	cmp	r3, #0
 801176e:	d002      	beq.n	8011776 <SD_PowerON+0x10e>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2201      	movs	r2, #1
 8011774:	639a      	str	r2, [r3, #56]	@ 0x38
 8011776:	2300      	movs	r3, #0
 8011778:	4618      	mov	r0, r3
 801177a:	3718      	adds	r7, #24
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	c1100000 	.word	0xc1100000

08011784 <SD_SendSDStatus>:
 8011784:	b580      	push	{r7, lr}
 8011786:	b08c      	sub	sp, #48	@ 0x30
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
 801178e:	f7f7 f9b1 	bl	8008af4 <HAL_GetTick>
 8011792:	6278      	str	r0, [r7, #36]	@ 0x24
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2100      	movs	r1, #0
 801179e:	4618      	mov	r0, r3
 80117a0:	f005 f839 	bl	8016816 <SDMMC_GetResponse>
 80117a4:	4603      	mov	r3, r0
 80117a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80117aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80117ae:	d102      	bne.n	80117b6 <SD_SendSDStatus+0x32>
 80117b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80117b4:	e0b0      	b.n	8011918 <SD_SendSDStatus+0x194>
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2140      	movs	r1, #64	@ 0x40
 80117bc:	4618      	mov	r0, r3
 80117be:	f005 f869 	bl	8016894 <SDMMC_CmdBlockLength>
 80117c2:	6238      	str	r0, [r7, #32]
 80117c4:	6a3b      	ldr	r3, [r7, #32]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d005      	beq.n	80117d6 <SD_SendSDStatus+0x52>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80117d2:	6a3b      	ldr	r3, [r7, #32]
 80117d4:	e0a0      	b.n	8011918 <SD_SendSDStatus+0x194>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681a      	ldr	r2, [r3, #0]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117de:	041b      	lsls	r3, r3, #16
 80117e0:	4619      	mov	r1, r3
 80117e2:	4610      	mov	r0, r2
 80117e4:	f005 f9a3 	bl	8016b2e <SDMMC_CmdAppCommand>
 80117e8:	6238      	str	r0, [r7, #32]
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d005      	beq.n	80117fc <SD_SendSDStatus+0x78>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80117f8:	6a3b      	ldr	r3, [r7, #32]
 80117fa:	e08d      	b.n	8011918 <SD_SendSDStatus+0x194>
 80117fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011800:	60bb      	str	r3, [r7, #8]
 8011802:	2340      	movs	r3, #64	@ 0x40
 8011804:	60fb      	str	r3, [r7, #12]
 8011806:	2360      	movs	r3, #96	@ 0x60
 8011808:	613b      	str	r3, [r7, #16]
 801180a:	2302      	movs	r3, #2
 801180c:	617b      	str	r3, [r7, #20]
 801180e:	2300      	movs	r3, #0
 8011810:	61bb      	str	r3, [r7, #24]
 8011812:	2301      	movs	r3, #1
 8011814:	61fb      	str	r3, [r7, #28]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	f107 0208 	add.w	r2, r7, #8
 801181e:	4611      	mov	r1, r2
 8011820:	4618      	mov	r0, r3
 8011822:	f005 f80b 	bl	801683c <SDMMC_ConfigData>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	4618      	mov	r0, r3
 801182c:	f005 fa8b 	bl	8016d46 <SDMMC_CmdStatusRegister>
 8011830:	6238      	str	r0, [r7, #32]
 8011832:	6a3b      	ldr	r3, [r7, #32]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d02b      	beq.n	8011890 <SD_SendSDStatus+0x10c>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	635a      	str	r2, [r3, #52]	@ 0x34
 8011840:	6a3b      	ldr	r3, [r7, #32]
 8011842:	e069      	b.n	8011918 <SD_SendSDStatus+0x194>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801184a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801184e:	2b00      	cmp	r3, #0
 8011850:	d013      	beq.n	801187a <SD_SendSDStatus+0xf6>
 8011852:	2300      	movs	r3, #0
 8011854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011856:	e00d      	b.n	8011874 <SD_SendSDStatus+0xf0>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4618      	mov	r0, r3
 801185e:	f004 ff65 	bl	801672c <SDMMC_ReadFIFO>
 8011862:	4602      	mov	r2, r0
 8011864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011866:	601a      	str	r2, [r3, #0]
 8011868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801186a:	3304      	adds	r3, #4
 801186c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801186e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011870:	3301      	adds	r3, #1
 8011872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011876:	2b07      	cmp	r3, #7
 8011878:	d9ee      	bls.n	8011858 <SD_SendSDStatus+0xd4>
 801187a:	f7f7 f93b 	bl	8008af4 <HAL_GetTick>
 801187e:	4602      	mov	r2, r0
 8011880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011882:	1ad3      	subs	r3, r2, r3
 8011884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011888:	d102      	bne.n	8011890 <SD_SendSDStatus+0x10c>
 801188a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801188e:	e043      	b.n	8011918 <SD_SendSDStatus+0x194>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011896:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801189a:	2b00      	cmp	r3, #0
 801189c:	d0d2      	beq.n	8011844 <SD_SendSDStatus+0xc0>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118a4:	f003 0308 	and.w	r3, r3, #8
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d001      	beq.n	80118b0 <SD_SendSDStatus+0x12c>
 80118ac:	2308      	movs	r3, #8
 80118ae:	e033      	b.n	8011918 <SD_SendSDStatus+0x194>
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118b6:	f003 0302 	and.w	r3, r3, #2
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d001      	beq.n	80118c2 <SD_SendSDStatus+0x13e>
 80118be:	2302      	movs	r3, #2
 80118c0:	e02a      	b.n	8011918 <SD_SendSDStatus+0x194>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118c8:	f003 0320 	and.w	r3, r3, #32
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d017      	beq.n	8011900 <SD_SendSDStatus+0x17c>
 80118d0:	2320      	movs	r3, #32
 80118d2:	e021      	b.n	8011918 <SD_SendSDStatus+0x194>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	4618      	mov	r0, r3
 80118da:	f004 ff27 	bl	801672c <SDMMC_ReadFIFO>
 80118de:	4602      	mov	r2, r0
 80118e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118e2:	601a      	str	r2, [r3, #0]
 80118e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118e6:	3304      	adds	r3, #4
 80118e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80118ea:	f7f7 f903 	bl	8008af4 <HAL_GetTick>
 80118ee:	4602      	mov	r2, r0
 80118f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f2:	1ad3      	subs	r3, r2, r3
 80118f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f8:	d102      	bne.n	8011900 <SD_SendSDStatus+0x17c>
 80118fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80118fe:	e00b      	b.n	8011918 <SD_SendSDStatus+0x194>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011906:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801190a:	2b00      	cmp	r3, #0
 801190c:	d1e2      	bne.n	80118d4 <SD_SendSDStatus+0x150>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4a03      	ldr	r2, [pc, #12]	@ (8011920 <SD_SendSDStatus+0x19c>)
 8011914:	639a      	str	r2, [r3, #56]	@ 0x38
 8011916:	2300      	movs	r3, #0
 8011918:	4618      	mov	r0, r3
 801191a:	3730      	adds	r7, #48	@ 0x30
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	18000f3a 	.word	0x18000f3a

08011924 <SD_SendStatus>:
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d102      	bne.n	801193a <SD_SendStatus+0x16>
 8011934:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011938:	e018      	b.n	801196c <SD_SendStatus+0x48>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011942:	041b      	lsls	r3, r3, #16
 8011944:	4619      	mov	r1, r3
 8011946:	4610      	mov	r0, r2
 8011948:	f005 f9da 	bl	8016d00 <SDMMC_CmdSendStatus>
 801194c:	60f8      	str	r0, [r7, #12]
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d001      	beq.n	8011958 <SD_SendStatus+0x34>
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	e009      	b.n	801196c <SD_SendStatus+0x48>
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2100      	movs	r1, #0
 801195e:	4618      	mov	r0, r3
 8011960:	f004 ff59 	bl	8016816 <SDMMC_GetResponse>
 8011964:	4602      	mov	r2, r0
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	601a      	str	r2, [r3, #0]
 801196a:	2300      	movs	r3, #0
 801196c:	4618      	mov	r0, r3
 801196e:	3710      	adds	r7, #16
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}

08011974 <SD_WideBus_Enable>:
 8011974:	b580      	push	{r7, lr}
 8011976:	b086      	sub	sp, #24
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	2300      	movs	r3, #0
 801197e:	60fb      	str	r3, [r7, #12]
 8011980:	2300      	movs	r3, #0
 8011982:	613b      	str	r3, [r7, #16]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	2100      	movs	r1, #0
 801198a:	4618      	mov	r0, r3
 801198c:	f004 ff43 	bl	8016816 <SDMMC_GetResponse>
 8011990:	4603      	mov	r3, r0
 8011992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011996:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801199a:	d102      	bne.n	80119a2 <SD_WideBus_Enable+0x2e>
 801199c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80119a0:	e02f      	b.n	8011a02 <SD_WideBus_Enable+0x8e>
 80119a2:	f107 030c 	add.w	r3, r7, #12
 80119a6:	4619      	mov	r1, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f000 f879 	bl	8011aa0 <SD_FindSCR>
 80119ae:	6178      	str	r0, [r7, #20]
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d001      	beq.n	80119ba <SD_WideBus_Enable+0x46>
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	e023      	b.n	8011a02 <SD_WideBus_Enable+0x8e>
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d01c      	beq.n	80119fe <SD_WideBus_Enable+0x8a>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681a      	ldr	r2, [r3, #0]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119cc:	041b      	lsls	r3, r3, #16
 80119ce:	4619      	mov	r1, r3
 80119d0:	4610      	mov	r0, r2
 80119d2:	f005 f8ac 	bl	8016b2e <SDMMC_CmdAppCommand>
 80119d6:	6178      	str	r0, [r7, #20]
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d001      	beq.n	80119e2 <SD_WideBus_Enable+0x6e>
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	e00f      	b.n	8011a02 <SD_WideBus_Enable+0x8e>
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	2102      	movs	r1, #2
 80119e8:	4618      	mov	r0, r3
 80119ea:	f005 f8e3 	bl	8016bb4 <SDMMC_CmdBusWidth>
 80119ee:	6178      	str	r0, [r7, #20]
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d001      	beq.n	80119fa <SD_WideBus_Enable+0x86>
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	e003      	b.n	8011a02 <SD_WideBus_Enable+0x8e>
 80119fa:	2300      	movs	r3, #0
 80119fc:	e001      	b.n	8011a02 <SD_WideBus_Enable+0x8e>
 80119fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8011a02:	4618      	mov	r0, r3
 8011a04:	3718      	adds	r7, #24
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}

08011a0a <SD_WideBus_Disable>:
 8011a0a:	b580      	push	{r7, lr}
 8011a0c:	b086      	sub	sp, #24
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
 8011a12:	2300      	movs	r3, #0
 8011a14:	60fb      	str	r3, [r7, #12]
 8011a16:	2300      	movs	r3, #0
 8011a18:	613b      	str	r3, [r7, #16]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2100      	movs	r1, #0
 8011a20:	4618      	mov	r0, r3
 8011a22:	f004 fef8 	bl	8016816 <SDMMC_GetResponse>
 8011a26:	4603      	mov	r3, r0
 8011a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011a2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011a30:	d102      	bne.n	8011a38 <SD_WideBus_Disable+0x2e>
 8011a32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011a36:	e02f      	b.n	8011a98 <SD_WideBus_Disable+0x8e>
 8011a38:	f107 030c 	add.w	r3, r7, #12
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 f82e 	bl	8011aa0 <SD_FindSCR>
 8011a44:	6178      	str	r0, [r7, #20]
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d001      	beq.n	8011a50 <SD_WideBus_Disable+0x46>
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	e023      	b.n	8011a98 <SD_WideBus_Disable+0x8e>
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d01c      	beq.n	8011a94 <SD_WideBus_Disable+0x8a>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a62:	041b      	lsls	r3, r3, #16
 8011a64:	4619      	mov	r1, r3
 8011a66:	4610      	mov	r0, r2
 8011a68:	f005 f861 	bl	8016b2e <SDMMC_CmdAppCommand>
 8011a6c:	6178      	str	r0, [r7, #20]
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d001      	beq.n	8011a78 <SD_WideBus_Disable+0x6e>
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	e00f      	b.n	8011a98 <SD_WideBus_Disable+0x8e>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f005 f898 	bl	8016bb4 <SDMMC_CmdBusWidth>
 8011a84:	6178      	str	r0, [r7, #20]
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d001      	beq.n	8011a90 <SD_WideBus_Disable+0x86>
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	e003      	b.n	8011a98 <SD_WideBus_Disable+0x8e>
 8011a90:	2300      	movs	r3, #0
 8011a92:	e001      	b.n	8011a98 <SD_WideBus_Disable+0x8e>
 8011a94:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3718      	adds	r7, #24
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <SD_FindSCR>:
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b08e      	sub	sp, #56	@ 0x38
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
 8011aaa:	f7f7 f823 	bl	8008af4 <HAL_GetTick>
 8011aae:	6338      	str	r0, [r7, #48]	@ 0x30
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	60bb      	str	r3, [r7, #8]
 8011ab8:	2300      	movs	r3, #0
 8011aba:	60fb      	str	r3, [r7, #12]
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2108      	movs	r1, #8
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f004 fee4 	bl	8016894 <SDMMC_CmdBlockLength>
 8011acc:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d001      	beq.n	8011ad8 <SD_FindSCR+0x38>
 8011ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ad6:	e0ad      	b.n	8011c34 <SD_FindSCR+0x194>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ae0:	041b      	lsls	r3, r3, #16
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	4610      	mov	r0, r2
 8011ae6:	f005 f822 	bl	8016b2e <SDMMC_CmdAppCommand>
 8011aea:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d001      	beq.n	8011af6 <SD_FindSCR+0x56>
 8011af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af4:	e09e      	b.n	8011c34 <SD_FindSCR+0x194>
 8011af6:	f04f 33ff 	mov.w	r3, #4294967295
 8011afa:	613b      	str	r3, [r7, #16]
 8011afc:	2308      	movs	r3, #8
 8011afe:	617b      	str	r3, [r7, #20]
 8011b00:	2330      	movs	r3, #48	@ 0x30
 8011b02:	61bb      	str	r3, [r7, #24]
 8011b04:	2302      	movs	r3, #2
 8011b06:	61fb      	str	r3, [r7, #28]
 8011b08:	2300      	movs	r3, #0
 8011b0a:	623b      	str	r3, [r7, #32]
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f107 0210 	add.w	r2, r7, #16
 8011b18:	4611      	mov	r1, r2
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f004 fe8e 	bl	801683c <SDMMC_ConfigData>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f005 f868 	bl	8016bfa <SDMMC_CmdSendSCR>
 8011b2a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d027      	beq.n	8011b82 <SD_FindSCR+0xe2>
 8011b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b34:	e07e      	b.n	8011c34 <SD_FindSCR+0x194>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d113      	bne.n	8011b6c <SD_FindSCR+0xcc>
 8011b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d110      	bne.n	8011b6c <SD_FindSCR+0xcc>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f004 fdec 	bl	801672c <SDMMC_ReadFIFO>
 8011b54:	4603      	mov	r3, r0
 8011b56:	60bb      	str	r3, [r7, #8]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f004 fde5 	bl	801672c <SDMMC_ReadFIFO>
 8011b62:	4603      	mov	r3, r0
 8011b64:	60fb      	str	r3, [r7, #12]
 8011b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b68:	3301      	adds	r3, #1
 8011b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b6c:	f7f6 ffc2 	bl	8008af4 <HAL_GetTick>
 8011b70:	4602      	mov	r2, r0
 8011b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b7a:	d102      	bne.n	8011b82 <SD_FindSCR+0xe2>
 8011b7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011b80:	e058      	b.n	8011c34 <SD_FindSCR+0x194>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b88:	f240 532a 	movw	r3, #1322	@ 0x52a
 8011b8c:	4013      	ands	r3, r2
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d0d1      	beq.n	8011b36 <SD_FindSCR+0x96>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b98:	f003 0308 	and.w	r3, r3, #8
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d005      	beq.n	8011bac <SD_FindSCR+0x10c>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	2208      	movs	r2, #8
 8011ba6:	639a      	str	r2, [r3, #56]	@ 0x38
 8011ba8:	2308      	movs	r3, #8
 8011baa:	e043      	b.n	8011c34 <SD_FindSCR+0x194>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bb2:	f003 0302 	and.w	r3, r3, #2
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d005      	beq.n	8011bc6 <SD_FindSCR+0x126>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	2202      	movs	r2, #2
 8011bc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8011bc2:	2302      	movs	r3, #2
 8011bc4:	e036      	b.n	8011c34 <SD_FindSCR+0x194>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bcc:	f003 0320 	and.w	r3, r3, #32
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d005      	beq.n	8011be0 <SD_FindSCR+0x140>
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2220      	movs	r2, #32
 8011bda:	639a      	str	r2, [r3, #56]	@ 0x38
 8011bdc:	2320      	movs	r3, #32
 8011bde:	e029      	b.n	8011c34 <SD_FindSCR+0x194>
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4a15      	ldr	r2, [pc, #84]	@ (8011c3c <SD_FindSCR+0x19c>)
 8011be6:	639a      	str	r2, [r3, #56]	@ 0x38
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	061a      	lsls	r2, r3, #24
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	021b      	lsls	r3, r3, #8
 8011bf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011bf4:	431a      	orrs	r2, r3
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	0a1b      	lsrs	r3, r3, #8
 8011bfa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011bfe:	431a      	orrs	r2, r3
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	0e1b      	lsrs	r3, r3, #24
 8011c04:	431a      	orrs	r2, r3
 8011c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c08:	601a      	str	r2, [r3, #0]
 8011c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c0c:	3304      	adds	r3, #4
 8011c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	061a      	lsls	r2, r3, #24
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	021b      	lsls	r3, r3, #8
 8011c18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011c1c:	431a      	orrs	r2, r3
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	0a1b      	lsrs	r3, r3, #8
 8011c22:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011c26:	431a      	orrs	r2, r3
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	0e1b      	lsrs	r3, r3, #24
 8011c2c:	431a      	orrs	r2, r3
 8011c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c30:	601a      	str	r2, [r3, #0]
 8011c32:	2300      	movs	r3, #0
 8011c34:	4618      	mov	r0, r3
 8011c36:	3738      	adds	r7, #56	@ 0x38
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	18000f3a 	.word	0x18000f3a

08011c40 <HAL_SPI_Init>:
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d101      	bne.n	8011c52 <HAL_SPI_Init+0x12>
 8011c4e:	2301      	movs	r3, #1
 8011c50:	e10f      	b.n	8011e72 <HAL_SPI_Init+0x232>
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2200      	movs	r2, #0
 8011c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	4a87      	ldr	r2, [pc, #540]	@ (8011e7c <HAL_SPI_Init+0x23c>)
 8011c5e:	4293      	cmp	r3, r2
 8011c60:	d00f      	beq.n	8011c82 <HAL_SPI_Init+0x42>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	4a86      	ldr	r2, [pc, #536]	@ (8011e80 <HAL_SPI_Init+0x240>)
 8011c68:	4293      	cmp	r3, r2
 8011c6a:	d00a      	beq.n	8011c82 <HAL_SPI_Init+0x42>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	4a84      	ldr	r2, [pc, #528]	@ (8011e84 <HAL_SPI_Init+0x244>)
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d005      	beq.n	8011c82 <HAL_SPI_Init+0x42>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	2b0f      	cmp	r3, #15
 8011c7c:	d901      	bls.n	8011c82 <HAL_SPI_Init+0x42>
 8011c7e:	2301      	movs	r3, #1
 8011c80:	e0f7      	b.n	8011e72 <HAL_SPI_Init+0x232>
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 fef6 	bl	8012a74 <SPI_GetPacketSize>
 8011c88:	60f8      	str	r0, [r7, #12]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	4a7b      	ldr	r2, [pc, #492]	@ (8011e7c <HAL_SPI_Init+0x23c>)
 8011c90:	4293      	cmp	r3, r2
 8011c92:	d00c      	beq.n	8011cae <HAL_SPI_Init+0x6e>
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	4a79      	ldr	r2, [pc, #484]	@ (8011e80 <HAL_SPI_Init+0x240>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d007      	beq.n	8011cae <HAL_SPI_Init+0x6e>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	4a78      	ldr	r2, [pc, #480]	@ (8011e84 <HAL_SPI_Init+0x244>)
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	d002      	beq.n	8011cae <HAL_SPI_Init+0x6e>
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2b08      	cmp	r3, #8
 8011cac:	d811      	bhi.n	8011cd2 <HAL_SPI_Init+0x92>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	4a72      	ldr	r2, [pc, #456]	@ (8011e7c <HAL_SPI_Init+0x23c>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d009      	beq.n	8011ccc <HAL_SPI_Init+0x8c>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4a70      	ldr	r2, [pc, #448]	@ (8011e80 <HAL_SPI_Init+0x240>)
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	d004      	beq.n	8011ccc <HAL_SPI_Init+0x8c>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	4a6f      	ldr	r2, [pc, #444]	@ (8011e84 <HAL_SPI_Init+0x244>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d104      	bne.n	8011cd6 <HAL_SPI_Init+0x96>
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	2b10      	cmp	r3, #16
 8011cd0:	d901      	bls.n	8011cd6 <HAL_SPI_Init+0x96>
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	e0cd      	b.n	8011e72 <HAL_SPI_Init+0x232>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d106      	bne.n	8011cf0 <HAL_SPI_Init+0xb0>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f7f5 fdf0 	bl	80078d0 <HAL_SPI_MspInit>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2202      	movs	r2, #2
 8011cf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	f022 0201 	bic.w	r2, r2, #1
 8011d06:	601a      	str	r2, [r3, #0]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	689b      	ldr	r3, [r3, #8]
 8011d0e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8011d12:	60bb      	str	r3, [r7, #8]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	699b      	ldr	r3, [r3, #24]
 8011d18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011d1c:	d119      	bne.n	8011d52 <HAL_SPI_Init+0x112>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011d26:	d103      	bne.n	8011d30 <HAL_SPI_Init+0xf0>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d008      	beq.n	8011d42 <HAL_SPI_Init+0x102>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d10c      	bne.n	8011d52 <HAL_SPI_Init+0x112>
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011d40:	d107      	bne.n	8011d52 <HAL_SPI_Init+0x112>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011d50:	601a      	str	r2, [r3, #0]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00f      	beq.n	8011d7e <HAL_SPI_Init+0x13e>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	68db      	ldr	r3, [r3, #12]
 8011d62:	2b06      	cmp	r3, #6
 8011d64:	d90b      	bls.n	8011d7e <HAL_SPI_Init+0x13e>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	430a      	orrs	r2, r1
 8011d7a:	601a      	str	r2, [r3, #0]
 8011d7c:	e007      	b.n	8011d8e <HAL_SPI_Init+0x14e>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011d8c:	601a      	str	r2, [r3, #0]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	69da      	ldr	r2, [r3, #28]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d96:	431a      	orrs	r2, r3
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	431a      	orrs	r2, r3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011da0:	ea42 0103 	orr.w	r1, r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	68da      	ldr	r2, [r3, #12]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	430a      	orrs	r2, r1
 8011dae:	609a      	str	r2, [r3, #8]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011db8:	431a      	orrs	r2, r3
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dbe:	431a      	orrs	r2, r3
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	699b      	ldr	r3, [r3, #24]
 8011dc4:	431a      	orrs	r2, r3
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	691b      	ldr	r3, [r3, #16]
 8011dca:	431a      	orrs	r2, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	695b      	ldr	r3, [r3, #20]
 8011dd0:	431a      	orrs	r2, r3
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6a1b      	ldr	r3, [r3, #32]
 8011dd6:	431a      	orrs	r2, r3
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	431a      	orrs	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011de2:	431a      	orrs	r2, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	689b      	ldr	r3, [r3, #8]
 8011de8:	431a      	orrs	r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011dee:	ea42 0103 	orr.w	r1, r2, r3
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	430a      	orrs	r2, r1
 8011dfc:	60da      	str	r2, [r3, #12]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d113      	bne.n	8011e2e <HAL_SPI_Init+0x1ee>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	689b      	ldr	r3, [r3, #8]
 8011e0c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011e18:	609a      	str	r2, [r3, #8]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	689b      	ldr	r3, [r3, #8]
 8011e20:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011e2c:	609a      	str	r2, [r3, #8]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f022 0201 	bic.w	r2, r2, #1
 8011e3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	685b      	ldr	r3, [r3, #4]
 8011e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d00a      	beq.n	8011e60 <HAL_SPI_Init+0x220>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	430a      	orrs	r2, r1
 8011e5e:	60da      	str	r2, [r3, #12]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2200      	movs	r2, #0
 8011e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2201      	movs	r2, #1
 8011e6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8011e70:	2300      	movs	r3, #0
 8011e72:	4618      	mov	r0, r3
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	40013000 	.word	0x40013000
 8011e80:	40003800 	.word	0x40003800
 8011e84:	40003c00 	.word	0x40003c00

08011e88 <HAL_SPI_Transmit>:
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b088      	sub	sp, #32
 8011e8c:	af02      	add	r7, sp, #8
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	603b      	str	r3, [r7, #0]
 8011e94:	4613      	mov	r3, r2
 8011e96:	80fb      	strh	r3, [r7, #6]
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	3320      	adds	r3, #32
 8011e9e:	617b      	str	r3, [r7, #20]
 8011ea0:	f7f6 fe28 	bl	8008af4 <HAL_GetTick>
 8011ea4:	6138      	str	r0, [r7, #16]
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d001      	beq.n	8011eb6 <HAL_SPI_Transmit+0x2e>
 8011eb2:	2302      	movs	r3, #2
 8011eb4:	e1d1      	b.n	801225a <HAL_SPI_Transmit+0x3d2>
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d002      	beq.n	8011ec2 <HAL_SPI_Transmit+0x3a>
 8011ebc:	88fb      	ldrh	r3, [r7, #6]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d101      	bne.n	8011ec6 <HAL_SPI_Transmit+0x3e>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	e1c9      	b.n	801225a <HAL_SPI_Transmit+0x3d2>
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	d101      	bne.n	8011ed4 <HAL_SPI_Transmit+0x4c>
 8011ed0:	2302      	movs	r3, #2
 8011ed2:	e1c2      	b.n	801225a <HAL_SPI_Transmit+0x3d2>
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	2203      	movs	r2, #3
 8011ee0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	68ba      	ldr	r2, [r7, #8]
 8011ef0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	88fa      	ldrh	r2, [r7, #6]
 8011ef6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	88fa      	ldrh	r2, [r7, #6]
 8011efe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2200      	movs	r2, #0
 8011f06:	665a      	str	r2, [r3, #100]	@ 0x64
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	2200      	movs	r2, #0
 8011f14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	675a      	str	r2, [r3, #116]	@ 0x74
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2200      	movs	r2, #0
 8011f22:	671a      	str	r2, [r3, #112]	@ 0x70
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	689b      	ldr	r3, [r3, #8]
 8011f28:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011f2c:	d108      	bne.n	8011f40 <HAL_SPI_Transmit+0xb8>
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	681a      	ldr	r2, [r3, #0]
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011f3c:	601a      	str	r2, [r3, #0]
 8011f3e:	e009      	b.n	8011f54 <HAL_SPI_Transmit+0xcc>
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011f52:	60da      	str	r2, [r3, #12]
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	685a      	ldr	r2, [r3, #4]
 8011f5a:	4b96      	ldr	r3, [pc, #600]	@ (80121b4 <HAL_SPI_Transmit+0x32c>)
 8011f5c:	4013      	ands	r3, r2
 8011f5e:	88f9      	ldrh	r1, [r7, #6]
 8011f60:	68fa      	ldr	r2, [r7, #12]
 8011f62:	6812      	ldr	r2, [r2, #0]
 8011f64:	430b      	orrs	r3, r1
 8011f66:	6053      	str	r3, [r2, #4]
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	681a      	ldr	r2, [r3, #0]
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	f042 0201 	orr.w	r2, r2, #1
 8011f76:	601a      	str	r2, [r3, #0]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011f80:	d107      	bne.n	8011f92 <HAL_SPI_Transmit+0x10a>
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011f90:	601a      	str	r2, [r3, #0]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	2b0f      	cmp	r3, #15
 8011f98:	d947      	bls.n	801202a <HAL_SPI_Transmit+0x1a2>
 8011f9a:	e03f      	b.n	801201c <HAL_SPI_Transmit+0x194>
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	695b      	ldr	r3, [r3, #20]
 8011fa2:	f003 0302 	and.w	r3, r3, #2
 8011fa6:	2b02      	cmp	r3, #2
 8011fa8:	d114      	bne.n	8011fd4 <HAL_SPI_Transmit+0x14c>
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	6812      	ldr	r2, [r2, #0]
 8011fb4:	621a      	str	r2, [r3, #32]
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fba:	1d1a      	adds	r2, r3, #4
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011fd2:	e023      	b.n	801201c <HAL_SPI_Transmit+0x194>
 8011fd4:	f7f6 fd8e 	bl	8008af4 <HAL_GetTick>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	1ad3      	subs	r3, r2, r3
 8011fde:	683a      	ldr	r2, [r7, #0]
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	d803      	bhi.n	8011fec <HAL_SPI_Transmit+0x164>
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fea:	d102      	bne.n	8011ff2 <HAL_SPI_Transmit+0x16a>
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d114      	bne.n	801201c <HAL_SPI_Transmit+0x194>
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f000 fc70 	bl	80128d8 <SPI_CloseTransfer>
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ffe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2201      	movs	r2, #1
 801200c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2200      	movs	r2, #0
 8012014:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8012018:	2303      	movs	r3, #3
 801201a:	e11e      	b.n	801225a <HAL_SPI_Transmit+0x3d2>
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012022:	b29b      	uxth	r3, r3
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1b9      	bne.n	8011f9c <HAL_SPI_Transmit+0x114>
 8012028:	e0f1      	b.n	801220e <HAL_SPI_Transmit+0x386>
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	68db      	ldr	r3, [r3, #12]
 801202e:	2b07      	cmp	r3, #7
 8012030:	f240 80e6 	bls.w	8012200 <HAL_SPI_Transmit+0x378>
 8012034:	e05d      	b.n	80120f2 <HAL_SPI_Transmit+0x26a>
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	695b      	ldr	r3, [r3, #20]
 801203c:	f003 0302 	and.w	r3, r3, #2
 8012040:	2b02      	cmp	r3, #2
 8012042:	d132      	bne.n	80120aa <HAL_SPI_Transmit+0x222>
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801204a:	b29b      	uxth	r3, r3
 801204c:	2b01      	cmp	r3, #1
 801204e:	d918      	bls.n	8012082 <HAL_SPI_Transmit+0x1fa>
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012054:	2b00      	cmp	r3, #0
 8012056:	d014      	beq.n	8012082 <HAL_SPI_Transmit+0x1fa>
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	6812      	ldr	r2, [r2, #0]
 8012062:	621a      	str	r2, [r3, #32]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012068:	1d1a      	adds	r2, r3, #4
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	65da      	str	r2, [r3, #92]	@ 0x5c
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012074:	b29b      	uxth	r3, r3
 8012076:	3b02      	subs	r3, #2
 8012078:	b29a      	uxth	r2, r3
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012080:	e037      	b.n	80120f2 <HAL_SPI_Transmit+0x26a>
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012086:	881a      	ldrh	r2, [r3, #0]
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	801a      	strh	r2, [r3, #0]
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012090:	1c9a      	adds	r2, r3, #2
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801209c:	b29b      	uxth	r3, r3
 801209e:	3b01      	subs	r3, #1
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80120a8:	e023      	b.n	80120f2 <HAL_SPI_Transmit+0x26a>
 80120aa:	f7f6 fd23 	bl	8008af4 <HAL_GetTick>
 80120ae:	4602      	mov	r2, r0
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	1ad3      	subs	r3, r2, r3
 80120b4:	683a      	ldr	r2, [r7, #0]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d803      	bhi.n	80120c2 <HAL_SPI_Transmit+0x23a>
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120c0:	d102      	bne.n	80120c8 <HAL_SPI_Transmit+0x240>
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d114      	bne.n	80120f2 <HAL_SPI_Transmit+0x26a>
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f000 fc05 	bl	80128d8 <SPI_CloseTransfer>
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80120d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2201      	movs	r2, #1
 80120e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80120ee:	2303      	movs	r3, #3
 80120f0:	e0b3      	b.n	801225a <HAL_SPI_Transmit+0x3d2>
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d19b      	bne.n	8012036 <HAL_SPI_Transmit+0x1ae>
 80120fe:	e086      	b.n	801220e <HAL_SPI_Transmit+0x386>
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	695b      	ldr	r3, [r3, #20]
 8012106:	f003 0302 	and.w	r3, r3, #2
 801210a:	2b02      	cmp	r3, #2
 801210c:	d154      	bne.n	80121b8 <HAL_SPI_Transmit+0x330>
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012114:	b29b      	uxth	r3, r3
 8012116:	2b03      	cmp	r3, #3
 8012118:	d918      	bls.n	801214c <HAL_SPI_Transmit+0x2c4>
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801211e:	2b40      	cmp	r3, #64	@ 0x40
 8012120:	d914      	bls.n	801214c <HAL_SPI_Transmit+0x2c4>
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	6812      	ldr	r2, [r2, #0]
 801212c:	621a      	str	r2, [r3, #32]
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012132:	1d1a      	adds	r2, r3, #4
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801213e:	b29b      	uxth	r3, r3
 8012140:	3b04      	subs	r3, #4
 8012142:	b29a      	uxth	r2, r3
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801214a:	e059      	b.n	8012200 <HAL_SPI_Transmit+0x378>
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012152:	b29b      	uxth	r3, r3
 8012154:	2b01      	cmp	r3, #1
 8012156:	d917      	bls.n	8012188 <HAL_SPI_Transmit+0x300>
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801215c:	2b00      	cmp	r3, #0
 801215e:	d013      	beq.n	8012188 <HAL_SPI_Transmit+0x300>
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012164:	881a      	ldrh	r2, [r3, #0]
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	801a      	strh	r2, [r3, #0]
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801216e:	1c9a      	adds	r2, r3, #2
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801217a:	b29b      	uxth	r3, r3
 801217c:	3b02      	subs	r3, #2
 801217e:	b29a      	uxth	r2, r3
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012186:	e03b      	b.n	8012200 <HAL_SPI_Transmit+0x378>
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	3320      	adds	r3, #32
 8012192:	7812      	ldrb	r2, [r2, #0]
 8012194:	701a      	strb	r2, [r3, #0]
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801219a:	1c5a      	adds	r2, r3, #1
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	3b01      	subs	r3, #1
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80121b2:	e025      	b.n	8012200 <HAL_SPI_Transmit+0x378>
 80121b4:	ffff0000 	.word	0xffff0000
 80121b8:	f7f6 fc9c 	bl	8008af4 <HAL_GetTick>
 80121bc:	4602      	mov	r2, r0
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	683a      	ldr	r2, [r7, #0]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d803      	bhi.n	80121d0 <HAL_SPI_Transmit+0x348>
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ce:	d102      	bne.n	80121d6 <HAL_SPI_Transmit+0x34e>
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d114      	bne.n	8012200 <HAL_SPI_Transmit+0x378>
 80121d6:	68f8      	ldr	r0, [r7, #12]
 80121d8:	f000 fb7e 	bl	80128d8 <SPI_CloseTransfer>
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80121e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2201      	movs	r2, #1
 80121f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	2200      	movs	r2, #0
 80121f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80121fc:	2303      	movs	r3, #3
 80121fe:	e02c      	b.n	801225a <HAL_SPI_Transmit+0x3d2>
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012206:	b29b      	uxth	r3, r3
 8012208:	2b00      	cmp	r3, #0
 801220a:	f47f af79 	bne.w	8012100 <HAL_SPI_Transmit+0x278>
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	9300      	str	r3, [sp, #0]
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	2200      	movs	r2, #0
 8012216:	2108      	movs	r1, #8
 8012218:	68f8      	ldr	r0, [r7, #12]
 801221a:	f000 fbfd 	bl	8012a18 <SPI_WaitOnFlagUntilTimeout>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d007      	beq.n	8012234 <HAL_SPI_Transmit+0x3ac>
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801222a:	f043 0220 	orr.w	r2, r3, #32
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	f000 fb4f 	bl	80128d8 <SPI_CloseTransfer>
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	2201      	movs	r2, #1
 801223e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2200      	movs	r2, #0
 8012246:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012250:	2b00      	cmp	r3, #0
 8012252:	d001      	beq.n	8012258 <HAL_SPI_Transmit+0x3d0>
 8012254:	2301      	movs	r3, #1
 8012256:	e000      	b.n	801225a <HAL_SPI_Transmit+0x3d2>
 8012258:	2300      	movs	r3, #0
 801225a:	4618      	mov	r0, r3
 801225c:	3718      	adds	r7, #24
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop

08012264 <HAL_SPI_TransmitReceive>:
 8012264:	b580      	push	{r7, lr}
 8012266:	b08e      	sub	sp, #56	@ 0x38
 8012268:	af02      	add	r7, sp, #8
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	60b9      	str	r1, [r7, #8]
 801226e:	607a      	str	r2, [r7, #4]
 8012270:	807b      	strh	r3, [r7, #2]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	3320      	adds	r3, #32
 8012278:	627b      	str	r3, [r7, #36]	@ 0x24
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	3330      	adds	r3, #48	@ 0x30
 8012280:	623b      	str	r3, [r7, #32]
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012286:	095b      	lsrs	r3, r3, #5
 8012288:	b29b      	uxth	r3, r3
 801228a:	3301      	adds	r3, #1
 801228c:	83fb      	strh	r3, [r7, #30]
 801228e:	f7f6 fc31 	bl	8008af4 <HAL_GetTick>
 8012292:	61b8      	str	r0, [r7, #24]
 8012294:	887b      	ldrh	r3, [r7, #2]
 8012296:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8012298:	887b      	ldrh	r3, [r7, #2]
 801229a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d001      	beq.n	80122ac <HAL_SPI_TransmitReceive+0x48>
 80122a8:	2302      	movs	r3, #2
 80122aa:	e310      	b.n	80128ce <HAL_SPI_TransmitReceive+0x66a>
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d005      	beq.n	80122be <HAL_SPI_TransmitReceive+0x5a>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d002      	beq.n	80122be <HAL_SPI_TransmitReceive+0x5a>
 80122b8:	887b      	ldrh	r3, [r7, #2]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d101      	bne.n	80122c2 <HAL_SPI_TransmitReceive+0x5e>
 80122be:	2301      	movs	r3, #1
 80122c0:	e305      	b.n	80128ce <HAL_SPI_TransmitReceive+0x66a>
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	d101      	bne.n	80122d0 <HAL_SPI_TransmitReceive+0x6c>
 80122cc:	2302      	movs	r3, #2
 80122ce:	e2fe      	b.n	80128ce <HAL_SPI_TransmitReceive+0x66a>
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2201      	movs	r2, #1
 80122d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2205      	movs	r2, #5
 80122dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2200      	movs	r2, #0
 80122e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	687a      	ldr	r2, [r7, #4]
 80122ec:	665a      	str	r2, [r3, #100]	@ 0x64
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	887a      	ldrh	r2, [r7, #2]
 80122f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	887a      	ldrh	r2, [r7, #2]
 80122fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	68ba      	ldr	r2, [r7, #8]
 8012302:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	887a      	ldrh	r2, [r7, #2]
 8012308:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	887a      	ldrh	r2, [r7, #2]
 8012310:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2200      	movs	r2, #0
 8012318:	671a      	str	r2, [r3, #112]	@ 0x70
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	2200      	movs	r2, #0
 801231e:	675a      	str	r2, [r3, #116]	@ 0x74
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	68da      	ldr	r2, [r3, #12]
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 801232e:	60da      	str	r2, [r3, #12]
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	4a70      	ldr	r2, [pc, #448]	@ (80124f8 <HAL_SPI_TransmitReceive+0x294>)
 8012336:	4293      	cmp	r3, r2
 8012338:	d009      	beq.n	801234e <HAL_SPI_TransmitReceive+0xea>
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	4a6f      	ldr	r2, [pc, #444]	@ (80124fc <HAL_SPI_TransmitReceive+0x298>)
 8012340:	4293      	cmp	r3, r2
 8012342:	d004      	beq.n	801234e <HAL_SPI_TransmitReceive+0xea>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	4a6d      	ldr	r2, [pc, #436]	@ (8012500 <HAL_SPI_TransmitReceive+0x29c>)
 801234a:	4293      	cmp	r3, r2
 801234c:	d102      	bne.n	8012354 <HAL_SPI_TransmitReceive+0xf0>
 801234e:	2310      	movs	r3, #16
 8012350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012352:	e001      	b.n	8012358 <HAL_SPI_TransmitReceive+0xf4>
 8012354:	2308      	movs	r3, #8
 8012356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	685a      	ldr	r2, [r3, #4]
 801235e:	4b69      	ldr	r3, [pc, #420]	@ (8012504 <HAL_SPI_TransmitReceive+0x2a0>)
 8012360:	4013      	ands	r3, r2
 8012362:	8879      	ldrh	r1, [r7, #2]
 8012364:	68fa      	ldr	r2, [r7, #12]
 8012366:	6812      	ldr	r2, [r2, #0]
 8012368:	430b      	orrs	r3, r1
 801236a:	6053      	str	r3, [r2, #4]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f042 0201 	orr.w	r2, r2, #1
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012384:	d107      	bne.n	8012396 <HAL_SPI_TransmitReceive+0x132>
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	681a      	ldr	r2, [r3, #0]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012394:	601a      	str	r2, [r3, #0]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	68db      	ldr	r3, [r3, #12]
 801239a:	2b0f      	cmp	r3, #15
 801239c:	f240 80a2 	bls.w	80124e4 <HAL_SPI_TransmitReceive+0x280>
 80123a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123a2:	089b      	lsrs	r3, r3, #2
 80123a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80123a6:	e094      	b.n	80124d2 <HAL_SPI_TransmitReceive+0x26e>
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	695b      	ldr	r3, [r3, #20]
 80123ae:	f003 0302 	and.w	r3, r3, #2
 80123b2:	2b02      	cmp	r3, #2
 80123b4:	d120      	bne.n	80123f8 <HAL_SPI_TransmitReceive+0x194>
 80123b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d01d      	beq.n	80123f8 <HAL_SPI_TransmitReceive+0x194>
 80123bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80123be:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80123c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123c2:	440b      	add	r3, r1
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d217      	bcs.n	80123f8 <HAL_SPI_TransmitReceive+0x194>
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	6812      	ldr	r2, [r2, #0]
 80123d2:	621a      	str	r2, [r3, #32]
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80123d8:	1d1a      	adds	r2, r3, #4
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	3b01      	subs	r3, #1
 80123e8:	b29a      	uxth	r2, r3
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80123f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	695b      	ldr	r3, [r3, #20]
 80123fe:	617b      	str	r3, [r7, #20]
 8012400:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012402:	2b00      	cmp	r3, #0
 8012404:	d065      	beq.n	80124d2 <HAL_SPI_TransmitReceive+0x26e>
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	695b      	ldr	r3, [r3, #20]
 801240c:	f003 0301 	and.w	r3, r3, #1
 8012410:	2b01      	cmp	r3, #1
 8012412:	d118      	bne.n	8012446 <HAL_SPI_TransmitReceive+0x1e2>
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801241c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801241e:	601a      	str	r2, [r3, #0]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012424:	1d1a      	adds	r2, r3, #4
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	665a      	str	r2, [r3, #100]	@ 0x64
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012430:	b29b      	uxth	r3, r3
 8012432:	3b01      	subs	r3, #1
 8012434:	b29a      	uxth	r2, r3
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012442:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012444:	e045      	b.n	80124d2 <HAL_SPI_TransmitReceive+0x26e>
 8012446:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8012448:	8bfb      	ldrh	r3, [r7, #30]
 801244a:	429a      	cmp	r2, r3
 801244c:	d21d      	bcs.n	801248a <HAL_SPI_TransmitReceive+0x226>
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012454:	2b00      	cmp	r3, #0
 8012456:	d018      	beq.n	801248a <HAL_SPI_TransmitReceive+0x226>
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	681a      	ldr	r2, [r3, #0]
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012460:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012462:	601a      	str	r2, [r3, #0]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012468:	1d1a      	adds	r2, r3, #4
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	665a      	str	r2, [r3, #100]	@ 0x64
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012474:	b29b      	uxth	r3, r3
 8012476:	3b01      	subs	r3, #1
 8012478:	b29a      	uxth	r2, r3
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012486:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012488:	e023      	b.n	80124d2 <HAL_SPI_TransmitReceive+0x26e>
 801248a:	f7f6 fb33 	bl	8008af4 <HAL_GetTick>
 801248e:	4602      	mov	r2, r0
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	1ad3      	subs	r3, r2, r3
 8012494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012496:	429a      	cmp	r2, r3
 8012498:	d803      	bhi.n	80124a2 <HAL_SPI_TransmitReceive+0x23e>
 801249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124a0:	d102      	bne.n	80124a8 <HAL_SPI_TransmitReceive+0x244>
 80124a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d114      	bne.n	80124d2 <HAL_SPI_TransmitReceive+0x26e>
 80124a8:	68f8      	ldr	r0, [r7, #12]
 80124aa:	f000 fa15 	bl	80128d8 <SPI_CloseTransfer>
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80124b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	2201      	movs	r2, #1
 80124c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	2200      	movs	r2, #0
 80124ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80124ce:	2303      	movs	r3, #3
 80124d0:	e1fd      	b.n	80128ce <HAL_SPI_TransmitReceive+0x66a>
 80124d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	f47f af67 	bne.w	80123a8 <HAL_SPI_TransmitReceive+0x144>
 80124da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f47f af63 	bne.w	80123a8 <HAL_SPI_TransmitReceive+0x144>
 80124e2:	e1ce      	b.n	8012882 <HAL_SPI_TransmitReceive+0x61e>
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	2b07      	cmp	r3, #7
 80124ea:	f240 81c2 	bls.w	8012872 <HAL_SPI_TransmitReceive+0x60e>
 80124ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f0:	085b      	lsrs	r3, r3, #1
 80124f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80124f4:	e0c9      	b.n	801268a <HAL_SPI_TransmitReceive+0x426>
 80124f6:	bf00      	nop
 80124f8:	40013000 	.word	0x40013000
 80124fc:	40003800 	.word	0x40003800
 8012500:	40003c00 	.word	0x40003c00
 8012504:	ffff0000 	.word	0xffff0000
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	695b      	ldr	r3, [r3, #20]
 801250e:	f003 0302 	and.w	r3, r3, #2
 8012512:	2b02      	cmp	r3, #2
 8012514:	d11f      	bne.n	8012556 <HAL_SPI_TransmitReceive+0x2f2>
 8012516:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012518:	2b00      	cmp	r3, #0
 801251a:	d01c      	beq.n	8012556 <HAL_SPI_TransmitReceive+0x2f2>
 801251c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801251e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8012520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012522:	440b      	add	r3, r1
 8012524:	429a      	cmp	r2, r3
 8012526:	d216      	bcs.n	8012556 <HAL_SPI_TransmitReceive+0x2f2>
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801252c:	881a      	ldrh	r2, [r3, #0]
 801252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012530:	801a      	strh	r2, [r3, #0]
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012536:	1c9a      	adds	r2, r3, #2
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012542:	b29b      	uxth	r3, r3
 8012544:	3b01      	subs	r3, #1
 8012546:	b29a      	uxth	r2, r3
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012554:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	695b      	ldr	r3, [r3, #20]
 801255c:	617b      	str	r3, [r7, #20]
 801255e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012560:	2b00      	cmp	r3, #0
 8012562:	f000 8092 	beq.w	801268a <HAL_SPI_TransmitReceive+0x426>
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	695b      	ldr	r3, [r3, #20]
 801256c:	f003 0301 	and.w	r3, r3, #1
 8012570:	2b01      	cmp	r3, #1
 8012572:	d118      	bne.n	80125a6 <HAL_SPI_TransmitReceive+0x342>
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012578:	6a3a      	ldr	r2, [r7, #32]
 801257a:	8812      	ldrh	r2, [r2, #0]
 801257c:	b292      	uxth	r2, r2
 801257e:	801a      	strh	r2, [r3, #0]
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012584:	1c9a      	adds	r2, r3, #2
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	665a      	str	r2, [r3, #100]	@ 0x64
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012590:	b29b      	uxth	r3, r3
 8012592:	3b01      	subs	r3, #1
 8012594:	b29a      	uxth	r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80125a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80125a4:	e071      	b.n	801268a <HAL_SPI_TransmitReceive+0x426>
 80125a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80125a8:	8bfb      	ldrh	r3, [r7, #30]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d228      	bcs.n	8012600 <HAL_SPI_TransmitReceive+0x39c>
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d023      	beq.n	8012600 <HAL_SPI_TransmitReceive+0x39c>
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80125bc:	6a3a      	ldr	r2, [r7, #32]
 80125be:	8812      	ldrh	r2, [r2, #0]
 80125c0:	b292      	uxth	r2, r2
 80125c2:	801a      	strh	r2, [r3, #0]
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80125c8:	1c9a      	adds	r2, r3, #2
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	665a      	str	r2, [r3, #100]	@ 0x64
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80125d2:	6a3a      	ldr	r2, [r7, #32]
 80125d4:	8812      	ldrh	r2, [r2, #0]
 80125d6:	b292      	uxth	r2, r2
 80125d8:	801a      	strh	r2, [r3, #0]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80125de:	1c9a      	adds	r2, r3, #2
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	665a      	str	r2, [r3, #100]	@ 0x64
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	3b02      	subs	r3, #2
 80125ee:	b29a      	uxth	r2, r3
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80125fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80125fe:	e044      	b.n	801268a <HAL_SPI_TransmitReceive+0x426>
 8012600:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012602:	2b01      	cmp	r3, #1
 8012604:	d11d      	bne.n	8012642 <HAL_SPI_TransmitReceive+0x3de>
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801260c:	2b00      	cmp	r3, #0
 801260e:	d018      	beq.n	8012642 <HAL_SPI_TransmitReceive+0x3de>
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012614:	6a3a      	ldr	r2, [r7, #32]
 8012616:	8812      	ldrh	r2, [r2, #0]
 8012618:	b292      	uxth	r2, r2
 801261a:	801a      	strh	r2, [r3, #0]
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012620:	1c9a      	adds	r2, r3, #2
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	665a      	str	r2, [r3, #100]	@ 0x64
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801262c:	b29b      	uxth	r3, r3
 801262e:	3b01      	subs	r3, #1
 8012630:	b29a      	uxth	r2, r3
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801263e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012640:	e023      	b.n	801268a <HAL_SPI_TransmitReceive+0x426>
 8012642:	f7f6 fa57 	bl	8008af4 <HAL_GetTick>
 8012646:	4602      	mov	r2, r0
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	1ad3      	subs	r3, r2, r3
 801264c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801264e:	429a      	cmp	r2, r3
 8012650:	d803      	bhi.n	801265a <HAL_SPI_TransmitReceive+0x3f6>
 8012652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012658:	d102      	bne.n	8012660 <HAL_SPI_TransmitReceive+0x3fc>
 801265a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801265c:	2b00      	cmp	r3, #0
 801265e:	d114      	bne.n	801268a <HAL_SPI_TransmitReceive+0x426>
 8012660:	68f8      	ldr	r0, [r7, #12]
 8012662:	f000 f939 	bl	80128d8 <SPI_CloseTransfer>
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801266c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2201      	movs	r2, #1
 801267a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2200      	movs	r2, #0
 8012682:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8012686:	2303      	movs	r3, #3
 8012688:	e121      	b.n	80128ce <HAL_SPI_TransmitReceive+0x66a>
 801268a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801268c:	2b00      	cmp	r3, #0
 801268e:	f47f af3b 	bne.w	8012508 <HAL_SPI_TransmitReceive+0x2a4>
 8012692:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012694:	2b00      	cmp	r3, #0
 8012696:	f47f af37 	bne.w	8012508 <HAL_SPI_TransmitReceive+0x2a4>
 801269a:	e0f2      	b.n	8012882 <HAL_SPI_TransmitReceive+0x61e>
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	695b      	ldr	r3, [r3, #20]
 80126a2:	f003 0302 	and.w	r3, r3, #2
 80126a6:	2b02      	cmp	r3, #2
 80126a8:	d121      	bne.n	80126ee <HAL_SPI_TransmitReceive+0x48a>
 80126aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d01e      	beq.n	80126ee <HAL_SPI_TransmitReceive+0x48a>
 80126b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80126b2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80126b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126b6:	440b      	add	r3, r1
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d218      	bcs.n	80126ee <HAL_SPI_TransmitReceive+0x48a>
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	3320      	adds	r3, #32
 80126c6:	7812      	ldrb	r2, [r2, #0]
 80126c8:	701a      	strb	r2, [r3, #0]
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80126ce:	1c5a      	adds	r2, r3, #1
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80126da:	b29b      	uxth	r3, r3
 80126dc:	3b01      	subs	r3, #1
 80126de:	b29a      	uxth	r2, r3
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80126ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	695b      	ldr	r3, [r3, #20]
 80126f4:	617b      	str	r3, [r7, #20]
 80126f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f000 80ba 	beq.w	8012872 <HAL_SPI_TransmitReceive+0x60e>
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	695b      	ldr	r3, [r3, #20]
 8012704:	f003 0301 	and.w	r3, r3, #1
 8012708:	2b01      	cmp	r3, #1
 801270a:	d11b      	bne.n	8012744 <HAL_SPI_TransmitReceive+0x4e0>
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012718:	7812      	ldrb	r2, [r2, #0]
 801271a:	b2d2      	uxtb	r2, r2
 801271c:	701a      	strb	r2, [r3, #0]
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012722:	1c5a      	adds	r2, r3, #1
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	665a      	str	r2, [r3, #100]	@ 0x64
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801272e:	b29b      	uxth	r3, r3
 8012730:	3b01      	subs	r3, #1
 8012732:	b29a      	uxth	r2, r3
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012740:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012742:	e096      	b.n	8012872 <HAL_SPI_TransmitReceive+0x60e>
 8012744:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8012746:	8bfb      	ldrh	r3, [r7, #30]
 8012748:	429a      	cmp	r2, r3
 801274a:	d24a      	bcs.n	80127e2 <HAL_SPI_TransmitReceive+0x57e>
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012752:	2b00      	cmp	r3, #0
 8012754:	d045      	beq.n	80127e2 <HAL_SPI_TransmitReceive+0x57e>
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012762:	7812      	ldrb	r2, [r2, #0]
 8012764:	b2d2      	uxtb	r2, r2
 8012766:	701a      	strb	r2, [r3, #0]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801276c:	1c5a      	adds	r2, r3, #1
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	665a      	str	r2, [r3, #100]	@ 0x64
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801277e:	7812      	ldrb	r2, [r2, #0]
 8012780:	b2d2      	uxtb	r2, r2
 8012782:	701a      	strb	r2, [r3, #0]
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012788:	1c5a      	adds	r2, r3, #1
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	665a      	str	r2, [r3, #100]	@ 0x64
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801279a:	7812      	ldrb	r2, [r2, #0]
 801279c:	b2d2      	uxtb	r2, r2
 801279e:	701a      	strb	r2, [r3, #0]
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80127a4:	1c5a      	adds	r2, r3, #1
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	665a      	str	r2, [r3, #100]	@ 0x64
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80127b6:	7812      	ldrb	r2, [r2, #0]
 80127b8:	b2d2      	uxtb	r2, r2
 80127ba:	701a      	strb	r2, [r3, #0]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80127c0:	1c5a      	adds	r2, r3, #1
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	665a      	str	r2, [r3, #100]	@ 0x64
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	3b04      	subs	r3, #4
 80127d0:	b29a      	uxth	r2, r3
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80127de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80127e0:	e047      	b.n	8012872 <HAL_SPI_TransmitReceive+0x60e>
 80127e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80127e4:	2b03      	cmp	r3, #3
 80127e6:	d820      	bhi.n	801282a <HAL_SPI_TransmitReceive+0x5c6>
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d01b      	beq.n	801282a <HAL_SPI_TransmitReceive+0x5c6>
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80127fe:	7812      	ldrb	r2, [r2, #0]
 8012800:	b2d2      	uxtb	r2, r2
 8012802:	701a      	strb	r2, [r3, #0]
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012808:	1c5a      	adds	r2, r3, #1
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	665a      	str	r2, [r3, #100]	@ 0x64
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012814:	b29b      	uxth	r3, r3
 8012816:	3b01      	subs	r3, #1
 8012818:	b29a      	uxth	r2, r3
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012826:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012828:	e023      	b.n	8012872 <HAL_SPI_TransmitReceive+0x60e>
 801282a:	f7f6 f963 	bl	8008af4 <HAL_GetTick>
 801282e:	4602      	mov	r2, r0
 8012830:	69bb      	ldr	r3, [r7, #24]
 8012832:	1ad3      	subs	r3, r2, r3
 8012834:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012836:	429a      	cmp	r2, r3
 8012838:	d803      	bhi.n	8012842 <HAL_SPI_TransmitReceive+0x5de>
 801283a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012840:	d102      	bne.n	8012848 <HAL_SPI_TransmitReceive+0x5e4>
 8012842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012844:	2b00      	cmp	r3, #0
 8012846:	d114      	bne.n	8012872 <HAL_SPI_TransmitReceive+0x60e>
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	f000 f845 	bl	80128d8 <SPI_CloseTransfer>
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012854:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	2201      	movs	r2, #1
 8012862:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2200      	movs	r2, #0
 801286a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801286e:	2303      	movs	r3, #3
 8012870:	e02d      	b.n	80128ce <HAL_SPI_TransmitReceive+0x66a>
 8012872:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012874:	2b00      	cmp	r3, #0
 8012876:	f47f af11 	bne.w	801269c <HAL_SPI_TransmitReceive+0x438>
 801287a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801287c:	2b00      	cmp	r3, #0
 801287e:	f47f af0d 	bne.w	801269c <HAL_SPI_TransmitReceive+0x438>
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	9300      	str	r3, [sp, #0]
 8012886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012888:	2200      	movs	r2, #0
 801288a:	2108      	movs	r1, #8
 801288c:	68f8      	ldr	r0, [r7, #12]
 801288e:	f000 f8c3 	bl	8012a18 <SPI_WaitOnFlagUntilTimeout>
 8012892:	4603      	mov	r3, r0
 8012894:	2b00      	cmp	r3, #0
 8012896:	d007      	beq.n	80128a8 <HAL_SPI_TransmitReceive+0x644>
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801289e:	f043 0220 	orr.w	r2, r3, #32
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80128a8:	68f8      	ldr	r0, [r7, #12]
 80128aa:	f000 f815 	bl	80128d8 <SPI_CloseTransfer>
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2201      	movs	r2, #1
 80128b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	2200      	movs	r2, #0
 80128ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d001      	beq.n	80128cc <HAL_SPI_TransmitReceive+0x668>
 80128c8:	2301      	movs	r3, #1
 80128ca:	e000      	b.n	80128ce <HAL_SPI_TransmitReceive+0x66a>
 80128cc:	2300      	movs	r3, #0
 80128ce:	4618      	mov	r0, r3
 80128d0:	3730      	adds	r7, #48	@ 0x30
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop

080128d8 <SPI_CloseTransfer>:
 80128d8:	b480      	push	{r7}
 80128da:	b085      	sub	sp, #20
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	695b      	ldr	r3, [r3, #20]
 80128e6:	60fb      	str	r3, [r7, #12]
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	699a      	ldr	r2, [r3, #24]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	f042 0208 	orr.w	r2, r2, #8
 80128f6:	619a      	str	r2, [r3, #24]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	699a      	ldr	r2, [r3, #24]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f042 0210 	orr.w	r2, r2, #16
 8012906:	619a      	str	r2, [r3, #24]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	681a      	ldr	r2, [r3, #0]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	f022 0201 	bic.w	r2, r2, #1
 8012916:	601a      	str	r2, [r3, #0]
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	6919      	ldr	r1, [r3, #16]
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	4b3c      	ldr	r3, [pc, #240]	@ (8012a14 <SPI_CloseTransfer+0x13c>)
 8012924:	400b      	ands	r3, r1
 8012926:	6113      	str	r3, [r2, #16]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	689a      	ldr	r2, [r3, #8]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8012936:	609a      	str	r2, [r3, #8]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801293e:	b2db      	uxtb	r3, r3
 8012940:	2b04      	cmp	r3, #4
 8012942:	d014      	beq.n	801296e <SPI_CloseTransfer+0x96>
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	f003 0320 	and.w	r3, r3, #32
 801294a:	2b00      	cmp	r3, #0
 801294c:	d00f      	beq.n	801296e <SPI_CloseTransfer+0x96>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012954:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	699a      	ldr	r2, [r3, #24]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	f042 0220 	orr.w	r2, r2, #32
 801296c:	619a      	str	r2, [r3, #24]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012974:	b2db      	uxtb	r3, r3
 8012976:	2b03      	cmp	r3, #3
 8012978:	d014      	beq.n	80129a4 <SPI_CloseTransfer+0xcc>
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012980:	2b00      	cmp	r3, #0
 8012982:	d00f      	beq.n	80129a4 <SPI_CloseTransfer+0xcc>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801298a:	f043 0204 	orr.w	r2, r3, #4
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	699a      	ldr	r2, [r3, #24]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80129a2:	619a      	str	r2, [r3, #24]
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00f      	beq.n	80129ce <SPI_CloseTransfer+0xf6>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80129b4:	f043 0201 	orr.w	r2, r3, #1
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	699a      	ldr	r2, [r3, #24]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80129cc:	619a      	str	r2, [r3, #24]
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d00f      	beq.n	80129f8 <SPI_CloseTransfer+0x120>
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80129de:	f043 0208 	orr.w	r2, r3, #8
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	699a      	ldr	r2, [r3, #24]
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80129f6:	619a      	str	r2, [r3, #24]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2200      	movs	r2, #0
 8012a04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012a08:	bf00      	nop
 8012a0a:	3714      	adds	r7, #20
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr
 8012a14:	fffffc90 	.word	0xfffffc90

08012a18 <SPI_WaitOnFlagUntilTimeout>:
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b084      	sub	sp, #16
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	60f8      	str	r0, [r7, #12]
 8012a20:	60b9      	str	r1, [r7, #8]
 8012a22:	603b      	str	r3, [r7, #0]
 8012a24:	4613      	mov	r3, r2
 8012a26:	71fb      	strb	r3, [r7, #7]
 8012a28:	e010      	b.n	8012a4c <SPI_WaitOnFlagUntilTimeout+0x34>
 8012a2a:	f7f6 f863 	bl	8008af4 <HAL_GetTick>
 8012a2e:	4602      	mov	r2, r0
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	1ad3      	subs	r3, r2, r3
 8012a34:	683a      	ldr	r2, [r7, #0]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d803      	bhi.n	8012a42 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a40:	d102      	bne.n	8012a48 <SPI_WaitOnFlagUntilTimeout+0x30>
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d101      	bne.n	8012a4c <SPI_WaitOnFlagUntilTimeout+0x34>
 8012a48:	2303      	movs	r3, #3
 8012a4a:	e00f      	b.n	8012a6c <SPI_WaitOnFlagUntilTimeout+0x54>
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	695a      	ldr	r2, [r3, #20]
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	4013      	ands	r3, r2
 8012a56:	68ba      	ldr	r2, [r7, #8]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	bf0c      	ite	eq
 8012a5c:	2301      	moveq	r3, #1
 8012a5e:	2300      	movne	r3, #0
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	461a      	mov	r2, r3
 8012a64:	79fb      	ldrb	r3, [r7, #7]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d0df      	beq.n	8012a2a <SPI_WaitOnFlagUntilTimeout+0x12>
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3710      	adds	r7, #16
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <SPI_GetPacketSize>:
 8012a74:	b480      	push	{r7}
 8012a76:	b085      	sub	sp, #20
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a80:	095b      	lsrs	r3, r3, #5
 8012a82:	3301      	adds	r3, #1
 8012a84:	60fb      	str	r3, [r7, #12]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	60bb      	str	r3, [r7, #8]
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	3307      	adds	r3, #7
 8012a92:	08db      	lsrs	r3, r3, #3
 8012a94:	60bb      	str	r3, [r7, #8]
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	68fa      	ldr	r2, [r7, #12]
 8012a9a:	fb02 f303 	mul.w	r3, r2, r3
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3714      	adds	r7, #20
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr

08012aaa <HAL_TIM_Base_Init>:
 8012aaa:	b580      	push	{r7, lr}
 8012aac:	b082      	sub	sp, #8
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	6078      	str	r0, [r7, #4]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d101      	bne.n	8012abc <HAL_TIM_Base_Init+0x12>
 8012ab8:	2301      	movs	r3, #1
 8012aba:	e049      	b.n	8012b50 <HAL_TIM_Base_Init+0xa6>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012ac2:	b2db      	uxtb	r3, r3
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d106      	bne.n	8012ad6 <HAL_TIM_Base_Init+0x2c>
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2200      	movs	r2, #0
 8012acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f7f5 f851 	bl	8007b78 <HAL_TIM_Base_MspInit>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2202      	movs	r2, #2
 8012ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	3304      	adds	r3, #4
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	4610      	mov	r0, r2
 8012aea:	f000 fa99 	bl	8013020 <TIM_Base_SetConfig>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2201      	movs	r2, #1
 8012af2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2201      	movs	r2, #1
 8012afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2201      	movs	r2, #1
 8012b02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2201      	movs	r2, #1
 8012b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2201      	movs	r2, #1
 8012b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2201      	movs	r2, #1
 8012b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2201      	movs	r2, #1
 8012b22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	2201      	movs	r2, #1
 8012b2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2201      	movs	r2, #1
 8012b32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2201      	movs	r2, #1
 8012b3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2201      	movs	r2, #1
 8012b42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2201      	movs	r2, #1
 8012b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012b4e:	2300      	movs	r3, #0
 8012b50:	4618      	mov	r0, r3
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <HAL_TIM_PWM_Init>:
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d101      	bne.n	8012b6a <HAL_TIM_PWM_Init+0x12>
 8012b66:	2301      	movs	r3, #1
 8012b68:	e049      	b.n	8012bfe <HAL_TIM_PWM_Init+0xa6>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d106      	bne.n	8012b84 <HAL_TIM_PWM_Init+0x2c>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f7f5 f81c 	bl	8007bbc <HAL_TIM_PWM_MspInit>
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2202      	movs	r2, #2
 8012b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	3304      	adds	r3, #4
 8012b94:	4619      	mov	r1, r3
 8012b96:	4610      	mov	r0, r2
 8012b98:	f000 fa42 	bl	8013020 <TIM_Base_SetConfig>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2201      	movs	r2, #1
 8012bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2201      	movs	r2, #1
 8012be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2201      	movs	r2, #1
 8012be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2201      	movs	r2, #1
 8012bf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2201      	movs	r2, #1
 8012bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
	...

08012c08 <HAL_TIM_PWM_ConfigChannel>:
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b086      	sub	sp, #24
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	60f8      	str	r0, [r7, #12]
 8012c10:	60b9      	str	r1, [r7, #8]
 8012c12:	607a      	str	r2, [r7, #4]
 8012c14:	2300      	movs	r3, #0
 8012c16:	75fb      	strb	r3, [r7, #23]
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012c1e:	2b01      	cmp	r3, #1
 8012c20:	d101      	bne.n	8012c26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012c22:	2302      	movs	r3, #2
 8012c24:	e0ff      	b.n	8012e26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2201      	movs	r2, #1
 8012c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2b14      	cmp	r3, #20
 8012c32:	f200 80f0 	bhi.w	8012e16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012c36:	a201      	add	r2, pc, #4	@ (adr r2, 8012c3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c3c:	08012c91 	.word	0x08012c91
 8012c40:	08012e17 	.word	0x08012e17
 8012c44:	08012e17 	.word	0x08012e17
 8012c48:	08012e17 	.word	0x08012e17
 8012c4c:	08012cd1 	.word	0x08012cd1
 8012c50:	08012e17 	.word	0x08012e17
 8012c54:	08012e17 	.word	0x08012e17
 8012c58:	08012e17 	.word	0x08012e17
 8012c5c:	08012d13 	.word	0x08012d13
 8012c60:	08012e17 	.word	0x08012e17
 8012c64:	08012e17 	.word	0x08012e17
 8012c68:	08012e17 	.word	0x08012e17
 8012c6c:	08012d53 	.word	0x08012d53
 8012c70:	08012e17 	.word	0x08012e17
 8012c74:	08012e17 	.word	0x08012e17
 8012c78:	08012e17 	.word	0x08012e17
 8012c7c:	08012d95 	.word	0x08012d95
 8012c80:	08012e17 	.word	0x08012e17
 8012c84:	08012e17 	.word	0x08012e17
 8012c88:	08012e17 	.word	0x08012e17
 8012c8c:	08012dd5 	.word	0x08012dd5
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	68b9      	ldr	r1, [r7, #8]
 8012c96:	4618      	mov	r0, r3
 8012c98:	f000 fa74 	bl	8013184 <TIM_OC1_SetConfig>
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	699a      	ldr	r2, [r3, #24]
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	f042 0208 	orr.w	r2, r2, #8
 8012caa:	619a      	str	r2, [r3, #24]
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	699a      	ldr	r2, [r3, #24]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	f022 0204 	bic.w	r2, r2, #4
 8012cba:	619a      	str	r2, [r3, #24]
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	6999      	ldr	r1, [r3, #24]
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	691a      	ldr	r2, [r3, #16]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	430a      	orrs	r2, r1
 8012ccc:	619a      	str	r2, [r3, #24]
 8012cce:	e0a5      	b.n	8012e1c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	68b9      	ldr	r1, [r7, #8]
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f000 fae4 	bl	80132a4 <TIM_OC2_SetConfig>
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	699a      	ldr	r2, [r3, #24]
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012cea:	619a      	str	r2, [r3, #24]
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	699a      	ldr	r2, [r3, #24]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012cfa:	619a      	str	r2, [r3, #24]
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	6999      	ldr	r1, [r3, #24]
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	691b      	ldr	r3, [r3, #16]
 8012d06:	021a      	lsls	r2, r3, #8
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	430a      	orrs	r2, r1
 8012d0e:	619a      	str	r2, [r3, #24]
 8012d10:	e084      	b.n	8012e1c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	68b9      	ldr	r1, [r7, #8]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f000 fb4d 	bl	80133b8 <TIM_OC3_SetConfig>
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	69da      	ldr	r2, [r3, #28]
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	f042 0208 	orr.w	r2, r2, #8
 8012d2c:	61da      	str	r2, [r3, #28]
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	69da      	ldr	r2, [r3, #28]
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	f022 0204 	bic.w	r2, r2, #4
 8012d3c:	61da      	str	r2, [r3, #28]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	69d9      	ldr	r1, [r3, #28]
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	691a      	ldr	r2, [r3, #16]
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	430a      	orrs	r2, r1
 8012d4e:	61da      	str	r2, [r3, #28]
 8012d50:	e064      	b.n	8012e1c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	68b9      	ldr	r1, [r7, #8]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f000 fbb5 	bl	80134c8 <TIM_OC4_SetConfig>
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	69da      	ldr	r2, [r3, #28]
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012d6c:	61da      	str	r2, [r3, #28]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	69da      	ldr	r2, [r3, #28]
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012d7c:	61da      	str	r2, [r3, #28]
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	69d9      	ldr	r1, [r3, #28]
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	691b      	ldr	r3, [r3, #16]
 8012d88:	021a      	lsls	r2, r3, #8
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	430a      	orrs	r2, r1
 8012d90:	61da      	str	r2, [r3, #28]
 8012d92:	e043      	b.n	8012e1c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	68b9      	ldr	r1, [r7, #8]
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f000 fbfe 	bl	801359c <TIM_OC5_SetConfig>
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f042 0208 	orr.w	r2, r2, #8
 8012dae:	655a      	str	r2, [r3, #84]	@ 0x54
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f022 0204 	bic.w	r2, r2, #4
 8012dbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	691a      	ldr	r2, [r3, #16]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	430a      	orrs	r2, r1
 8012dd0:	655a      	str	r2, [r3, #84]	@ 0x54
 8012dd2:	e023      	b.n	8012e1c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	68b9      	ldr	r1, [r7, #8]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f000 fc42 	bl	8013664 <TIM_OC6_SetConfig>
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012dee:	655a      	str	r2, [r3, #84]	@ 0x54
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012dfe:	655a      	str	r2, [r3, #84]	@ 0x54
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	691b      	ldr	r3, [r3, #16]
 8012e0a:	021a      	lsls	r2, r3, #8
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	430a      	orrs	r2, r1
 8012e12:	655a      	str	r2, [r3, #84]	@ 0x54
 8012e14:	e002      	b.n	8012e1c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012e16:	2301      	movs	r3, #1
 8012e18:	75fb      	strb	r3, [r7, #23]
 8012e1a:	bf00      	nop
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012e24:	7dfb      	ldrb	r3, [r7, #23]
 8012e26:	4618      	mov	r0, r3
 8012e28:	3718      	adds	r7, #24
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop

08012e30 <HAL_TIM_ConfigClockSource>:
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b084      	sub	sp, #16
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	6039      	str	r1, [r7, #0]
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	73fb      	strb	r3, [r7, #15]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012e44:	2b01      	cmp	r3, #1
 8012e46:	d101      	bne.n	8012e4c <HAL_TIM_ConfigClockSource+0x1c>
 8012e48:	2302      	movs	r3, #2
 8012e4a:	e0dc      	b.n	8013006 <HAL_TIM_ConfigClockSource+0x1d6>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2201      	movs	r2, #1
 8012e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2202      	movs	r2, #2
 8012e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	689b      	ldr	r3, [r3, #8]
 8012e62:	60bb      	str	r3, [r7, #8]
 8012e64:	68ba      	ldr	r2, [r7, #8]
 8012e66:	4b6a      	ldr	r3, [pc, #424]	@ (8013010 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012e68:	4013      	ands	r3, r2
 8012e6a:	60bb      	str	r3, [r7, #8]
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012e72:	60bb      	str	r3, [r7, #8]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68ba      	ldr	r2, [r7, #8]
 8012e7a:	609a      	str	r2, [r3, #8]
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	4a64      	ldr	r2, [pc, #400]	@ (8013014 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012e82:	4293      	cmp	r3, r2
 8012e84:	f000 80a9 	beq.w	8012fda <HAL_TIM_ConfigClockSource+0x1aa>
 8012e88:	4a62      	ldr	r2, [pc, #392]	@ (8013014 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	f200 80ae 	bhi.w	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012e90:	4a61      	ldr	r2, [pc, #388]	@ (8013018 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012e92:	4293      	cmp	r3, r2
 8012e94:	f000 80a1 	beq.w	8012fda <HAL_TIM_ConfigClockSource+0x1aa>
 8012e98:	4a5f      	ldr	r2, [pc, #380]	@ (8013018 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	f200 80a6 	bhi.w	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012ea0:	4a5e      	ldr	r2, [pc, #376]	@ (801301c <HAL_TIM_ConfigClockSource+0x1ec>)
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	f000 8099 	beq.w	8012fda <HAL_TIM_ConfigClockSource+0x1aa>
 8012ea8:	4a5c      	ldr	r2, [pc, #368]	@ (801301c <HAL_TIM_ConfigClockSource+0x1ec>)
 8012eaa:	4293      	cmp	r3, r2
 8012eac:	f200 809e 	bhi.w	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012eb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012eb4:	f000 8091 	beq.w	8012fda <HAL_TIM_ConfigClockSource+0x1aa>
 8012eb8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012ebc:	f200 8096 	bhi.w	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012ec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012ec4:	f000 8089 	beq.w	8012fda <HAL_TIM_ConfigClockSource+0x1aa>
 8012ec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012ecc:	f200 808e 	bhi.w	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012ed4:	d03e      	beq.n	8012f54 <HAL_TIM_ConfigClockSource+0x124>
 8012ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012eda:	f200 8087 	bhi.w	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ee2:	f000 8086 	beq.w	8012ff2 <HAL_TIM_ConfigClockSource+0x1c2>
 8012ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012eea:	d87f      	bhi.n	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012eec:	2b70      	cmp	r3, #112	@ 0x70
 8012eee:	d01a      	beq.n	8012f26 <HAL_TIM_ConfigClockSource+0xf6>
 8012ef0:	2b70      	cmp	r3, #112	@ 0x70
 8012ef2:	d87b      	bhi.n	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012ef4:	2b60      	cmp	r3, #96	@ 0x60
 8012ef6:	d050      	beq.n	8012f9a <HAL_TIM_ConfigClockSource+0x16a>
 8012ef8:	2b60      	cmp	r3, #96	@ 0x60
 8012efa:	d877      	bhi.n	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012efc:	2b50      	cmp	r3, #80	@ 0x50
 8012efe:	d03c      	beq.n	8012f7a <HAL_TIM_ConfigClockSource+0x14a>
 8012f00:	2b50      	cmp	r3, #80	@ 0x50
 8012f02:	d873      	bhi.n	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012f04:	2b40      	cmp	r3, #64	@ 0x40
 8012f06:	d058      	beq.n	8012fba <HAL_TIM_ConfigClockSource+0x18a>
 8012f08:	2b40      	cmp	r3, #64	@ 0x40
 8012f0a:	d86f      	bhi.n	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012f0c:	2b30      	cmp	r3, #48	@ 0x30
 8012f0e:	d064      	beq.n	8012fda <HAL_TIM_ConfigClockSource+0x1aa>
 8012f10:	2b30      	cmp	r3, #48	@ 0x30
 8012f12:	d86b      	bhi.n	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012f14:	2b20      	cmp	r3, #32
 8012f16:	d060      	beq.n	8012fda <HAL_TIM_ConfigClockSource+0x1aa>
 8012f18:	2b20      	cmp	r3, #32
 8012f1a:	d867      	bhi.n	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d05c      	beq.n	8012fda <HAL_TIM_ConfigClockSource+0x1aa>
 8012f20:	2b10      	cmp	r3, #16
 8012f22:	d05a      	beq.n	8012fda <HAL_TIM_ConfigClockSource+0x1aa>
 8012f24:	e062      	b.n	8012fec <HAL_TIM_ConfigClockSource+0x1bc>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6818      	ldr	r0, [r3, #0]
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	6899      	ldr	r1, [r3, #8]
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	685a      	ldr	r2, [r3, #4]
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	68db      	ldr	r3, [r3, #12]
 8012f36:	f000 fc79 	bl	801382c <TIM_ETR_SetConfig>
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	689b      	ldr	r3, [r3, #8]
 8012f40:	60bb      	str	r3, [r7, #8]
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012f48:	60bb      	str	r3, [r7, #8]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	68ba      	ldr	r2, [r7, #8]
 8012f50:	609a      	str	r2, [r3, #8]
 8012f52:	e04f      	b.n	8012ff4 <HAL_TIM_ConfigClockSource+0x1c4>
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6818      	ldr	r0, [r3, #0]
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	6899      	ldr	r1, [r3, #8]
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	685a      	ldr	r2, [r3, #4]
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	f000 fc62 	bl	801382c <TIM_ETR_SetConfig>
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	689a      	ldr	r2, [r3, #8]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012f76:	609a      	str	r2, [r3, #8]
 8012f78:	e03c      	b.n	8012ff4 <HAL_TIM_ConfigClockSource+0x1c4>
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6818      	ldr	r0, [r3, #0]
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	6859      	ldr	r1, [r3, #4]
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	68db      	ldr	r3, [r3, #12]
 8012f86:	461a      	mov	r2, r3
 8012f88:	f000 fbd2 	bl	8013730 <TIM_TI1_ConfigInputStage>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2150      	movs	r1, #80	@ 0x50
 8012f92:	4618      	mov	r0, r3
 8012f94:	f000 fc2c 	bl	80137f0 <TIM_ITRx_SetConfig>
 8012f98:	e02c      	b.n	8012ff4 <HAL_TIM_ConfigClockSource+0x1c4>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6818      	ldr	r0, [r3, #0]
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	6859      	ldr	r1, [r3, #4]
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	f000 fbf1 	bl	801378e <TIM_TI2_ConfigInputStage>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	2160      	movs	r1, #96	@ 0x60
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f000 fc1c 	bl	80137f0 <TIM_ITRx_SetConfig>
 8012fb8:	e01c      	b.n	8012ff4 <HAL_TIM_ConfigClockSource+0x1c4>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	6818      	ldr	r0, [r3, #0]
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	6859      	ldr	r1, [r3, #4]
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	f000 fbb2 	bl	8013730 <TIM_TI1_ConfigInputStage>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2140      	movs	r1, #64	@ 0x40
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f000 fc0c 	bl	80137f0 <TIM_ITRx_SetConfig>
 8012fd8:	e00c      	b.n	8012ff4 <HAL_TIM_ConfigClockSource+0x1c4>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	4610      	mov	r0, r2
 8012fe6:	f000 fc03 	bl	80137f0 <TIM_ITRx_SetConfig>
 8012fea:	e003      	b.n	8012ff4 <HAL_TIM_ConfigClockSource+0x1c4>
 8012fec:	2301      	movs	r3, #1
 8012fee:	73fb      	strb	r3, [r7, #15]
 8012ff0:	e000      	b.n	8012ff4 <HAL_TIM_ConfigClockSource+0x1c4>
 8012ff2:	bf00      	nop
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2200      	movs	r2, #0
 8013000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013004:	7bfb      	ldrb	r3, [r7, #15]
 8013006:	4618      	mov	r0, r3
 8013008:	3710      	adds	r7, #16
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	ffceff88 	.word	0xffceff88
 8013014:	00100040 	.word	0x00100040
 8013018:	00100030 	.word	0x00100030
 801301c:	00100020 	.word	0x00100020

08013020 <TIM_Base_SetConfig>:
 8013020:	b480      	push	{r7}
 8013022:	b085      	sub	sp, #20
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	60fb      	str	r3, [r7, #12]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	4a4a      	ldr	r2, [pc, #296]	@ (801315c <TIM_Base_SetConfig+0x13c>)
 8013034:	4293      	cmp	r3, r2
 8013036:	d013      	beq.n	8013060 <TIM_Base_SetConfig+0x40>
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801303e:	d00f      	beq.n	8013060 <TIM_Base_SetConfig+0x40>
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	4a47      	ldr	r2, [pc, #284]	@ (8013160 <TIM_Base_SetConfig+0x140>)
 8013044:	4293      	cmp	r3, r2
 8013046:	d00b      	beq.n	8013060 <TIM_Base_SetConfig+0x40>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	4a46      	ldr	r2, [pc, #280]	@ (8013164 <TIM_Base_SetConfig+0x144>)
 801304c:	4293      	cmp	r3, r2
 801304e:	d007      	beq.n	8013060 <TIM_Base_SetConfig+0x40>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	4a45      	ldr	r2, [pc, #276]	@ (8013168 <TIM_Base_SetConfig+0x148>)
 8013054:	4293      	cmp	r3, r2
 8013056:	d003      	beq.n	8013060 <TIM_Base_SetConfig+0x40>
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	4a44      	ldr	r2, [pc, #272]	@ (801316c <TIM_Base_SetConfig+0x14c>)
 801305c:	4293      	cmp	r3, r2
 801305e:	d108      	bne.n	8013072 <TIM_Base_SetConfig+0x52>
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013066:	60fb      	str	r3, [r7, #12]
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	68fa      	ldr	r2, [r7, #12]
 801306e:	4313      	orrs	r3, r2
 8013070:	60fb      	str	r3, [r7, #12]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	4a39      	ldr	r2, [pc, #228]	@ (801315c <TIM_Base_SetConfig+0x13c>)
 8013076:	4293      	cmp	r3, r2
 8013078:	d027      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013080:	d023      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	4a36      	ldr	r2, [pc, #216]	@ (8013160 <TIM_Base_SetConfig+0x140>)
 8013086:	4293      	cmp	r3, r2
 8013088:	d01f      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	4a35      	ldr	r2, [pc, #212]	@ (8013164 <TIM_Base_SetConfig+0x144>)
 801308e:	4293      	cmp	r3, r2
 8013090:	d01b      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	4a34      	ldr	r2, [pc, #208]	@ (8013168 <TIM_Base_SetConfig+0x148>)
 8013096:	4293      	cmp	r3, r2
 8013098:	d017      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	4a33      	ldr	r2, [pc, #204]	@ (801316c <TIM_Base_SetConfig+0x14c>)
 801309e:	4293      	cmp	r3, r2
 80130a0:	d013      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	4a32      	ldr	r2, [pc, #200]	@ (8013170 <TIM_Base_SetConfig+0x150>)
 80130a6:	4293      	cmp	r3, r2
 80130a8:	d00f      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	4a31      	ldr	r2, [pc, #196]	@ (8013174 <TIM_Base_SetConfig+0x154>)
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d00b      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	4a30      	ldr	r2, [pc, #192]	@ (8013178 <TIM_Base_SetConfig+0x158>)
 80130b6:	4293      	cmp	r3, r2
 80130b8:	d007      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	4a2f      	ldr	r2, [pc, #188]	@ (801317c <TIM_Base_SetConfig+0x15c>)
 80130be:	4293      	cmp	r3, r2
 80130c0:	d003      	beq.n	80130ca <TIM_Base_SetConfig+0xaa>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	4a2e      	ldr	r2, [pc, #184]	@ (8013180 <TIM_Base_SetConfig+0x160>)
 80130c6:	4293      	cmp	r3, r2
 80130c8:	d108      	bne.n	80130dc <TIM_Base_SetConfig+0xbc>
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80130d0:	60fb      	str	r3, [r7, #12]
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	68db      	ldr	r3, [r3, #12]
 80130d6:	68fa      	ldr	r2, [r7, #12]
 80130d8:	4313      	orrs	r3, r2
 80130da:	60fb      	str	r3, [r7, #12]
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	695b      	ldr	r3, [r3, #20]
 80130e6:	4313      	orrs	r3, r2
 80130e8:	60fb      	str	r3, [r7, #12]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	68fa      	ldr	r2, [r7, #12]
 80130ee:	601a      	str	r2, [r3, #0]
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	689a      	ldr	r2, [r3, #8]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	681a      	ldr	r2, [r3, #0]
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	4a16      	ldr	r2, [pc, #88]	@ (801315c <TIM_Base_SetConfig+0x13c>)
 8013104:	4293      	cmp	r3, r2
 8013106:	d00f      	beq.n	8013128 <TIM_Base_SetConfig+0x108>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	4a18      	ldr	r2, [pc, #96]	@ (801316c <TIM_Base_SetConfig+0x14c>)
 801310c:	4293      	cmp	r3, r2
 801310e:	d00b      	beq.n	8013128 <TIM_Base_SetConfig+0x108>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	4a17      	ldr	r2, [pc, #92]	@ (8013170 <TIM_Base_SetConfig+0x150>)
 8013114:	4293      	cmp	r3, r2
 8013116:	d007      	beq.n	8013128 <TIM_Base_SetConfig+0x108>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	4a16      	ldr	r2, [pc, #88]	@ (8013174 <TIM_Base_SetConfig+0x154>)
 801311c:	4293      	cmp	r3, r2
 801311e:	d003      	beq.n	8013128 <TIM_Base_SetConfig+0x108>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	4a15      	ldr	r2, [pc, #84]	@ (8013178 <TIM_Base_SetConfig+0x158>)
 8013124:	4293      	cmp	r3, r2
 8013126:	d103      	bne.n	8013130 <TIM_Base_SetConfig+0x110>
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	691a      	ldr	r2, [r3, #16]
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	631a      	str	r2, [r3, #48]	@ 0x30
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2201      	movs	r2, #1
 8013134:	615a      	str	r2, [r3, #20]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	691b      	ldr	r3, [r3, #16]
 801313a:	f003 0301 	and.w	r3, r3, #1
 801313e:	2b01      	cmp	r3, #1
 8013140:	d105      	bne.n	801314e <TIM_Base_SetConfig+0x12e>
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	691b      	ldr	r3, [r3, #16]
 8013146:	f023 0201 	bic.w	r2, r3, #1
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	611a      	str	r2, [r3, #16]
 801314e:	bf00      	nop
 8013150:	3714      	adds	r7, #20
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop
 801315c:	40010000 	.word	0x40010000
 8013160:	40000400 	.word	0x40000400
 8013164:	40000800 	.word	0x40000800
 8013168:	40000c00 	.word	0x40000c00
 801316c:	40010400 	.word	0x40010400
 8013170:	40014000 	.word	0x40014000
 8013174:	40014400 	.word	0x40014400
 8013178:	40014800 	.word	0x40014800
 801317c:	4000e000 	.word	0x4000e000
 8013180:	4000e400 	.word	0x4000e400

08013184 <TIM_OC1_SetConfig>:
 8013184:	b480      	push	{r7}
 8013186:	b087      	sub	sp, #28
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
 801318c:	6039      	str	r1, [r7, #0]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6a1b      	ldr	r3, [r3, #32]
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6a1b      	ldr	r3, [r3, #32]
 8013198:	f023 0201 	bic.w	r2, r3, #1
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	621a      	str	r2, [r3, #32]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	613b      	str	r3, [r7, #16]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	699b      	ldr	r3, [r3, #24]
 80131aa:	60fb      	str	r3, [r7, #12]
 80131ac:	68fa      	ldr	r2, [r7, #12]
 80131ae:	4b37      	ldr	r3, [pc, #220]	@ (801328c <TIM_OC1_SetConfig+0x108>)
 80131b0:	4013      	ands	r3, r2
 80131b2:	60fb      	str	r3, [r7, #12]
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	f023 0303 	bic.w	r3, r3, #3
 80131ba:	60fb      	str	r3, [r7, #12]
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	68fa      	ldr	r2, [r7, #12]
 80131c2:	4313      	orrs	r3, r2
 80131c4:	60fb      	str	r3, [r7, #12]
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	f023 0302 	bic.w	r3, r3, #2
 80131cc:	617b      	str	r3, [r7, #20]
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	689b      	ldr	r3, [r3, #8]
 80131d2:	697a      	ldr	r2, [r7, #20]
 80131d4:	4313      	orrs	r3, r2
 80131d6:	617b      	str	r3, [r7, #20]
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	4a2d      	ldr	r2, [pc, #180]	@ (8013290 <TIM_OC1_SetConfig+0x10c>)
 80131dc:	4293      	cmp	r3, r2
 80131de:	d00f      	beq.n	8013200 <TIM_OC1_SetConfig+0x7c>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	4a2c      	ldr	r2, [pc, #176]	@ (8013294 <TIM_OC1_SetConfig+0x110>)
 80131e4:	4293      	cmp	r3, r2
 80131e6:	d00b      	beq.n	8013200 <TIM_OC1_SetConfig+0x7c>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	4a2b      	ldr	r2, [pc, #172]	@ (8013298 <TIM_OC1_SetConfig+0x114>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d007      	beq.n	8013200 <TIM_OC1_SetConfig+0x7c>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	4a2a      	ldr	r2, [pc, #168]	@ (801329c <TIM_OC1_SetConfig+0x118>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d003      	beq.n	8013200 <TIM_OC1_SetConfig+0x7c>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	4a29      	ldr	r2, [pc, #164]	@ (80132a0 <TIM_OC1_SetConfig+0x11c>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d10c      	bne.n	801321a <TIM_OC1_SetConfig+0x96>
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	f023 0308 	bic.w	r3, r3, #8
 8013206:	617b      	str	r3, [r7, #20]
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	68db      	ldr	r3, [r3, #12]
 801320c:	697a      	ldr	r2, [r7, #20]
 801320e:	4313      	orrs	r3, r2
 8013210:	617b      	str	r3, [r7, #20]
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	f023 0304 	bic.w	r3, r3, #4
 8013218:	617b      	str	r3, [r7, #20]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	4a1c      	ldr	r2, [pc, #112]	@ (8013290 <TIM_OC1_SetConfig+0x10c>)
 801321e:	4293      	cmp	r3, r2
 8013220:	d00f      	beq.n	8013242 <TIM_OC1_SetConfig+0xbe>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	4a1b      	ldr	r2, [pc, #108]	@ (8013294 <TIM_OC1_SetConfig+0x110>)
 8013226:	4293      	cmp	r3, r2
 8013228:	d00b      	beq.n	8013242 <TIM_OC1_SetConfig+0xbe>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	4a1a      	ldr	r2, [pc, #104]	@ (8013298 <TIM_OC1_SetConfig+0x114>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d007      	beq.n	8013242 <TIM_OC1_SetConfig+0xbe>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	4a19      	ldr	r2, [pc, #100]	@ (801329c <TIM_OC1_SetConfig+0x118>)
 8013236:	4293      	cmp	r3, r2
 8013238:	d003      	beq.n	8013242 <TIM_OC1_SetConfig+0xbe>
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	4a18      	ldr	r2, [pc, #96]	@ (80132a0 <TIM_OC1_SetConfig+0x11c>)
 801323e:	4293      	cmp	r3, r2
 8013240:	d111      	bne.n	8013266 <TIM_OC1_SetConfig+0xe2>
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013248:	613b      	str	r3, [r7, #16]
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013250:	613b      	str	r3, [r7, #16]
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	695b      	ldr	r3, [r3, #20]
 8013256:	693a      	ldr	r2, [r7, #16]
 8013258:	4313      	orrs	r3, r2
 801325a:	613b      	str	r3, [r7, #16]
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	699b      	ldr	r3, [r3, #24]
 8013260:	693a      	ldr	r2, [r7, #16]
 8013262:	4313      	orrs	r3, r2
 8013264:	613b      	str	r3, [r7, #16]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	693a      	ldr	r2, [r7, #16]
 801326a:	605a      	str	r2, [r3, #4]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	68fa      	ldr	r2, [r7, #12]
 8013270:	619a      	str	r2, [r3, #24]
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	685a      	ldr	r2, [r3, #4]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	635a      	str	r2, [r3, #52]	@ 0x34
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	697a      	ldr	r2, [r7, #20]
 801327e:	621a      	str	r2, [r3, #32]
 8013280:	bf00      	nop
 8013282:	371c      	adds	r7, #28
 8013284:	46bd      	mov	sp, r7
 8013286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328a:	4770      	bx	lr
 801328c:	fffeff8f 	.word	0xfffeff8f
 8013290:	40010000 	.word	0x40010000
 8013294:	40010400 	.word	0x40010400
 8013298:	40014000 	.word	0x40014000
 801329c:	40014400 	.word	0x40014400
 80132a0:	40014800 	.word	0x40014800

080132a4 <TIM_OC2_SetConfig>:
 80132a4:	b480      	push	{r7}
 80132a6:	b087      	sub	sp, #28
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	6039      	str	r1, [r7, #0]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6a1b      	ldr	r3, [r3, #32]
 80132b2:	617b      	str	r3, [r7, #20]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6a1b      	ldr	r3, [r3, #32]
 80132b8:	f023 0210 	bic.w	r2, r3, #16
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	621a      	str	r2, [r3, #32]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	685b      	ldr	r3, [r3, #4]
 80132c4:	613b      	str	r3, [r7, #16]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	699b      	ldr	r3, [r3, #24]
 80132ca:	60fb      	str	r3, [r7, #12]
 80132cc:	68fa      	ldr	r2, [r7, #12]
 80132ce:	4b34      	ldr	r3, [pc, #208]	@ (80133a0 <TIM_OC2_SetConfig+0xfc>)
 80132d0:	4013      	ands	r3, r2
 80132d2:	60fb      	str	r3, [r7, #12]
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80132da:	60fb      	str	r3, [r7, #12]
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	021b      	lsls	r3, r3, #8
 80132e2:	68fa      	ldr	r2, [r7, #12]
 80132e4:	4313      	orrs	r3, r2
 80132e6:	60fb      	str	r3, [r7, #12]
 80132e8:	697b      	ldr	r3, [r7, #20]
 80132ea:	f023 0320 	bic.w	r3, r3, #32
 80132ee:	617b      	str	r3, [r7, #20]
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	689b      	ldr	r3, [r3, #8]
 80132f4:	011b      	lsls	r3, r3, #4
 80132f6:	697a      	ldr	r2, [r7, #20]
 80132f8:	4313      	orrs	r3, r2
 80132fa:	617b      	str	r3, [r7, #20]
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	4a29      	ldr	r2, [pc, #164]	@ (80133a4 <TIM_OC2_SetConfig+0x100>)
 8013300:	4293      	cmp	r3, r2
 8013302:	d003      	beq.n	801330c <TIM_OC2_SetConfig+0x68>
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	4a28      	ldr	r2, [pc, #160]	@ (80133a8 <TIM_OC2_SetConfig+0x104>)
 8013308:	4293      	cmp	r3, r2
 801330a:	d10d      	bne.n	8013328 <TIM_OC2_SetConfig+0x84>
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013312:	617b      	str	r3, [r7, #20]
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	011b      	lsls	r3, r3, #4
 801331a:	697a      	ldr	r2, [r7, #20]
 801331c:	4313      	orrs	r3, r2
 801331e:	617b      	str	r3, [r7, #20]
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013326:	617b      	str	r3, [r7, #20]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4a1e      	ldr	r2, [pc, #120]	@ (80133a4 <TIM_OC2_SetConfig+0x100>)
 801332c:	4293      	cmp	r3, r2
 801332e:	d00f      	beq.n	8013350 <TIM_OC2_SetConfig+0xac>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	4a1d      	ldr	r2, [pc, #116]	@ (80133a8 <TIM_OC2_SetConfig+0x104>)
 8013334:	4293      	cmp	r3, r2
 8013336:	d00b      	beq.n	8013350 <TIM_OC2_SetConfig+0xac>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	4a1c      	ldr	r2, [pc, #112]	@ (80133ac <TIM_OC2_SetConfig+0x108>)
 801333c:	4293      	cmp	r3, r2
 801333e:	d007      	beq.n	8013350 <TIM_OC2_SetConfig+0xac>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	4a1b      	ldr	r2, [pc, #108]	@ (80133b0 <TIM_OC2_SetConfig+0x10c>)
 8013344:	4293      	cmp	r3, r2
 8013346:	d003      	beq.n	8013350 <TIM_OC2_SetConfig+0xac>
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	4a1a      	ldr	r2, [pc, #104]	@ (80133b4 <TIM_OC2_SetConfig+0x110>)
 801334c:	4293      	cmp	r3, r2
 801334e:	d113      	bne.n	8013378 <TIM_OC2_SetConfig+0xd4>
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013356:	613b      	str	r3, [r7, #16]
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801335e:	613b      	str	r3, [r7, #16]
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	695b      	ldr	r3, [r3, #20]
 8013364:	009b      	lsls	r3, r3, #2
 8013366:	693a      	ldr	r2, [r7, #16]
 8013368:	4313      	orrs	r3, r2
 801336a:	613b      	str	r3, [r7, #16]
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	699b      	ldr	r3, [r3, #24]
 8013370:	009b      	lsls	r3, r3, #2
 8013372:	693a      	ldr	r2, [r7, #16]
 8013374:	4313      	orrs	r3, r2
 8013376:	613b      	str	r3, [r7, #16]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	693a      	ldr	r2, [r7, #16]
 801337c:	605a      	str	r2, [r3, #4]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	68fa      	ldr	r2, [r7, #12]
 8013382:	619a      	str	r2, [r3, #24]
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	685a      	ldr	r2, [r3, #4]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	639a      	str	r2, [r3, #56]	@ 0x38
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	697a      	ldr	r2, [r7, #20]
 8013390:	621a      	str	r2, [r3, #32]
 8013392:	bf00      	nop
 8013394:	371c      	adds	r7, #28
 8013396:	46bd      	mov	sp, r7
 8013398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339c:	4770      	bx	lr
 801339e:	bf00      	nop
 80133a0:	feff8fff 	.word	0xfeff8fff
 80133a4:	40010000 	.word	0x40010000
 80133a8:	40010400 	.word	0x40010400
 80133ac:	40014000 	.word	0x40014000
 80133b0:	40014400 	.word	0x40014400
 80133b4:	40014800 	.word	0x40014800

080133b8 <TIM_OC3_SetConfig>:
 80133b8:	b480      	push	{r7}
 80133ba:	b087      	sub	sp, #28
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6a1b      	ldr	r3, [r3, #32]
 80133c6:	617b      	str	r3, [r7, #20]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6a1b      	ldr	r3, [r3, #32]
 80133cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	621a      	str	r2, [r3, #32]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	685b      	ldr	r3, [r3, #4]
 80133d8:	613b      	str	r3, [r7, #16]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	69db      	ldr	r3, [r3, #28]
 80133de:	60fb      	str	r3, [r7, #12]
 80133e0:	68fa      	ldr	r2, [r7, #12]
 80133e2:	4b33      	ldr	r3, [pc, #204]	@ (80134b0 <TIM_OC3_SetConfig+0xf8>)
 80133e4:	4013      	ands	r3, r2
 80133e6:	60fb      	str	r3, [r7, #12]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	f023 0303 	bic.w	r3, r3, #3
 80133ee:	60fb      	str	r3, [r7, #12]
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	68fa      	ldr	r2, [r7, #12]
 80133f6:	4313      	orrs	r3, r2
 80133f8:	60fb      	str	r3, [r7, #12]
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013400:	617b      	str	r3, [r7, #20]
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	689b      	ldr	r3, [r3, #8]
 8013406:	021b      	lsls	r3, r3, #8
 8013408:	697a      	ldr	r2, [r7, #20]
 801340a:	4313      	orrs	r3, r2
 801340c:	617b      	str	r3, [r7, #20]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	4a28      	ldr	r2, [pc, #160]	@ (80134b4 <TIM_OC3_SetConfig+0xfc>)
 8013412:	4293      	cmp	r3, r2
 8013414:	d003      	beq.n	801341e <TIM_OC3_SetConfig+0x66>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4a27      	ldr	r2, [pc, #156]	@ (80134b8 <TIM_OC3_SetConfig+0x100>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d10d      	bne.n	801343a <TIM_OC3_SetConfig+0x82>
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013424:	617b      	str	r3, [r7, #20]
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	021b      	lsls	r3, r3, #8
 801342c:	697a      	ldr	r2, [r7, #20]
 801342e:	4313      	orrs	r3, r2
 8013430:	617b      	str	r3, [r7, #20]
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013438:	617b      	str	r3, [r7, #20]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4a1d      	ldr	r2, [pc, #116]	@ (80134b4 <TIM_OC3_SetConfig+0xfc>)
 801343e:	4293      	cmp	r3, r2
 8013440:	d00f      	beq.n	8013462 <TIM_OC3_SetConfig+0xaa>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4a1c      	ldr	r2, [pc, #112]	@ (80134b8 <TIM_OC3_SetConfig+0x100>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d00b      	beq.n	8013462 <TIM_OC3_SetConfig+0xaa>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4a1b      	ldr	r2, [pc, #108]	@ (80134bc <TIM_OC3_SetConfig+0x104>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d007      	beq.n	8013462 <TIM_OC3_SetConfig+0xaa>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4a1a      	ldr	r2, [pc, #104]	@ (80134c0 <TIM_OC3_SetConfig+0x108>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d003      	beq.n	8013462 <TIM_OC3_SetConfig+0xaa>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	4a19      	ldr	r2, [pc, #100]	@ (80134c4 <TIM_OC3_SetConfig+0x10c>)
 801345e:	4293      	cmp	r3, r2
 8013460:	d113      	bne.n	801348a <TIM_OC3_SetConfig+0xd2>
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013468:	613b      	str	r3, [r7, #16]
 801346a:	693b      	ldr	r3, [r7, #16]
 801346c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013470:	613b      	str	r3, [r7, #16]
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	695b      	ldr	r3, [r3, #20]
 8013476:	011b      	lsls	r3, r3, #4
 8013478:	693a      	ldr	r2, [r7, #16]
 801347a:	4313      	orrs	r3, r2
 801347c:	613b      	str	r3, [r7, #16]
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	699b      	ldr	r3, [r3, #24]
 8013482:	011b      	lsls	r3, r3, #4
 8013484:	693a      	ldr	r2, [r7, #16]
 8013486:	4313      	orrs	r3, r2
 8013488:	613b      	str	r3, [r7, #16]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	693a      	ldr	r2, [r7, #16]
 801348e:	605a      	str	r2, [r3, #4]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	61da      	str	r2, [r3, #28]
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	685a      	ldr	r2, [r3, #4]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	63da      	str	r2, [r3, #60]	@ 0x3c
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	697a      	ldr	r2, [r7, #20]
 80134a2:	621a      	str	r2, [r3, #32]
 80134a4:	bf00      	nop
 80134a6:	371c      	adds	r7, #28
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr
 80134b0:	fffeff8f 	.word	0xfffeff8f
 80134b4:	40010000 	.word	0x40010000
 80134b8:	40010400 	.word	0x40010400
 80134bc:	40014000 	.word	0x40014000
 80134c0:	40014400 	.word	0x40014400
 80134c4:	40014800 	.word	0x40014800

080134c8 <TIM_OC4_SetConfig>:
 80134c8:	b480      	push	{r7}
 80134ca:	b087      	sub	sp, #28
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6a1b      	ldr	r3, [r3, #32]
 80134d6:	613b      	str	r3, [r7, #16]
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6a1b      	ldr	r3, [r3, #32]
 80134dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	621a      	str	r2, [r3, #32]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	617b      	str	r3, [r7, #20]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	69db      	ldr	r3, [r3, #28]
 80134ee:	60fb      	str	r3, [r7, #12]
 80134f0:	68fa      	ldr	r2, [r7, #12]
 80134f2:	4b24      	ldr	r3, [pc, #144]	@ (8013584 <TIM_OC4_SetConfig+0xbc>)
 80134f4:	4013      	ands	r3, r2
 80134f6:	60fb      	str	r3, [r7, #12]
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80134fe:	60fb      	str	r3, [r7, #12]
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	021b      	lsls	r3, r3, #8
 8013506:	68fa      	ldr	r2, [r7, #12]
 8013508:	4313      	orrs	r3, r2
 801350a:	60fb      	str	r3, [r7, #12]
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013512:	613b      	str	r3, [r7, #16]
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	689b      	ldr	r3, [r3, #8]
 8013518:	031b      	lsls	r3, r3, #12
 801351a:	693a      	ldr	r2, [r7, #16]
 801351c:	4313      	orrs	r3, r2
 801351e:	613b      	str	r3, [r7, #16]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	4a19      	ldr	r2, [pc, #100]	@ (8013588 <TIM_OC4_SetConfig+0xc0>)
 8013524:	4293      	cmp	r3, r2
 8013526:	d00f      	beq.n	8013548 <TIM_OC4_SetConfig+0x80>
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	4a18      	ldr	r2, [pc, #96]	@ (801358c <TIM_OC4_SetConfig+0xc4>)
 801352c:	4293      	cmp	r3, r2
 801352e:	d00b      	beq.n	8013548 <TIM_OC4_SetConfig+0x80>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	4a17      	ldr	r2, [pc, #92]	@ (8013590 <TIM_OC4_SetConfig+0xc8>)
 8013534:	4293      	cmp	r3, r2
 8013536:	d007      	beq.n	8013548 <TIM_OC4_SetConfig+0x80>
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	4a16      	ldr	r2, [pc, #88]	@ (8013594 <TIM_OC4_SetConfig+0xcc>)
 801353c:	4293      	cmp	r3, r2
 801353e:	d003      	beq.n	8013548 <TIM_OC4_SetConfig+0x80>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	4a15      	ldr	r2, [pc, #84]	@ (8013598 <TIM_OC4_SetConfig+0xd0>)
 8013544:	4293      	cmp	r3, r2
 8013546:	d109      	bne.n	801355c <TIM_OC4_SetConfig+0x94>
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801354e:	617b      	str	r3, [r7, #20]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	695b      	ldr	r3, [r3, #20]
 8013554:	019b      	lsls	r3, r3, #6
 8013556:	697a      	ldr	r2, [r7, #20]
 8013558:	4313      	orrs	r3, r2
 801355a:	617b      	str	r3, [r7, #20]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	697a      	ldr	r2, [r7, #20]
 8013560:	605a      	str	r2, [r3, #4]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	68fa      	ldr	r2, [r7, #12]
 8013566:	61da      	str	r2, [r3, #28]
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	685a      	ldr	r2, [r3, #4]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	641a      	str	r2, [r3, #64]	@ 0x40
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	693a      	ldr	r2, [r7, #16]
 8013574:	621a      	str	r2, [r3, #32]
 8013576:	bf00      	nop
 8013578:	371c      	adds	r7, #28
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr
 8013582:	bf00      	nop
 8013584:	feff8fff 	.word	0xfeff8fff
 8013588:	40010000 	.word	0x40010000
 801358c:	40010400 	.word	0x40010400
 8013590:	40014000 	.word	0x40014000
 8013594:	40014400 	.word	0x40014400
 8013598:	40014800 	.word	0x40014800

0801359c <TIM_OC5_SetConfig>:
 801359c:	b480      	push	{r7}
 801359e:	b087      	sub	sp, #28
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6a1b      	ldr	r3, [r3, #32]
 80135aa:	613b      	str	r3, [r7, #16]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	6a1b      	ldr	r3, [r3, #32]
 80135b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	621a      	str	r2, [r3, #32]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	617b      	str	r3, [r7, #20]
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80135c2:	60fb      	str	r3, [r7, #12]
 80135c4:	68fa      	ldr	r2, [r7, #12]
 80135c6:	4b21      	ldr	r3, [pc, #132]	@ (801364c <TIM_OC5_SetConfig+0xb0>)
 80135c8:	4013      	ands	r3, r2
 80135ca:	60fb      	str	r3, [r7, #12]
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	68fa      	ldr	r2, [r7, #12]
 80135d2:	4313      	orrs	r3, r2
 80135d4:	60fb      	str	r3, [r7, #12]
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80135dc:	613b      	str	r3, [r7, #16]
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	689b      	ldr	r3, [r3, #8]
 80135e2:	041b      	lsls	r3, r3, #16
 80135e4:	693a      	ldr	r2, [r7, #16]
 80135e6:	4313      	orrs	r3, r2
 80135e8:	613b      	str	r3, [r7, #16]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	4a18      	ldr	r2, [pc, #96]	@ (8013650 <TIM_OC5_SetConfig+0xb4>)
 80135ee:	4293      	cmp	r3, r2
 80135f0:	d00f      	beq.n	8013612 <TIM_OC5_SetConfig+0x76>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4a17      	ldr	r2, [pc, #92]	@ (8013654 <TIM_OC5_SetConfig+0xb8>)
 80135f6:	4293      	cmp	r3, r2
 80135f8:	d00b      	beq.n	8013612 <TIM_OC5_SetConfig+0x76>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	4a16      	ldr	r2, [pc, #88]	@ (8013658 <TIM_OC5_SetConfig+0xbc>)
 80135fe:	4293      	cmp	r3, r2
 8013600:	d007      	beq.n	8013612 <TIM_OC5_SetConfig+0x76>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	4a15      	ldr	r2, [pc, #84]	@ (801365c <TIM_OC5_SetConfig+0xc0>)
 8013606:	4293      	cmp	r3, r2
 8013608:	d003      	beq.n	8013612 <TIM_OC5_SetConfig+0x76>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	4a14      	ldr	r2, [pc, #80]	@ (8013660 <TIM_OC5_SetConfig+0xc4>)
 801360e:	4293      	cmp	r3, r2
 8013610:	d109      	bne.n	8013626 <TIM_OC5_SetConfig+0x8a>
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013618:	617b      	str	r3, [r7, #20]
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	695b      	ldr	r3, [r3, #20]
 801361e:	021b      	lsls	r3, r3, #8
 8013620:	697a      	ldr	r2, [r7, #20]
 8013622:	4313      	orrs	r3, r2
 8013624:	617b      	str	r3, [r7, #20]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	697a      	ldr	r2, [r7, #20]
 801362a:	605a      	str	r2, [r3, #4]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	68fa      	ldr	r2, [r7, #12]
 8013630:	655a      	str	r2, [r3, #84]	@ 0x54
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	685a      	ldr	r2, [r3, #4]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	659a      	str	r2, [r3, #88]	@ 0x58
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	693a      	ldr	r2, [r7, #16]
 801363e:	621a      	str	r2, [r3, #32]
 8013640:	bf00      	nop
 8013642:	371c      	adds	r7, #28
 8013644:	46bd      	mov	sp, r7
 8013646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364a:	4770      	bx	lr
 801364c:	fffeff8f 	.word	0xfffeff8f
 8013650:	40010000 	.word	0x40010000
 8013654:	40010400 	.word	0x40010400
 8013658:	40014000 	.word	0x40014000
 801365c:	40014400 	.word	0x40014400
 8013660:	40014800 	.word	0x40014800

08013664 <TIM_OC6_SetConfig>:
 8013664:	b480      	push	{r7}
 8013666:	b087      	sub	sp, #28
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	6039      	str	r1, [r7, #0]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6a1b      	ldr	r3, [r3, #32]
 8013672:	613b      	str	r3, [r7, #16]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	6a1b      	ldr	r3, [r3, #32]
 8013678:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	621a      	str	r2, [r3, #32]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	617b      	str	r3, [r7, #20]
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801368a:	60fb      	str	r3, [r7, #12]
 801368c:	68fa      	ldr	r2, [r7, #12]
 801368e:	4b22      	ldr	r3, [pc, #136]	@ (8013718 <TIM_OC6_SetConfig+0xb4>)
 8013690:	4013      	ands	r3, r2
 8013692:	60fb      	str	r3, [r7, #12]
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	021b      	lsls	r3, r3, #8
 801369a:	68fa      	ldr	r2, [r7, #12]
 801369c:	4313      	orrs	r3, r2
 801369e:	60fb      	str	r3, [r7, #12]
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80136a6:	613b      	str	r3, [r7, #16]
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	689b      	ldr	r3, [r3, #8]
 80136ac:	051b      	lsls	r3, r3, #20
 80136ae:	693a      	ldr	r2, [r7, #16]
 80136b0:	4313      	orrs	r3, r2
 80136b2:	613b      	str	r3, [r7, #16]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	4a19      	ldr	r2, [pc, #100]	@ (801371c <TIM_OC6_SetConfig+0xb8>)
 80136b8:	4293      	cmp	r3, r2
 80136ba:	d00f      	beq.n	80136dc <TIM_OC6_SetConfig+0x78>
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	4a18      	ldr	r2, [pc, #96]	@ (8013720 <TIM_OC6_SetConfig+0xbc>)
 80136c0:	4293      	cmp	r3, r2
 80136c2:	d00b      	beq.n	80136dc <TIM_OC6_SetConfig+0x78>
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	4a17      	ldr	r2, [pc, #92]	@ (8013724 <TIM_OC6_SetConfig+0xc0>)
 80136c8:	4293      	cmp	r3, r2
 80136ca:	d007      	beq.n	80136dc <TIM_OC6_SetConfig+0x78>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	4a16      	ldr	r2, [pc, #88]	@ (8013728 <TIM_OC6_SetConfig+0xc4>)
 80136d0:	4293      	cmp	r3, r2
 80136d2:	d003      	beq.n	80136dc <TIM_OC6_SetConfig+0x78>
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4a15      	ldr	r2, [pc, #84]	@ (801372c <TIM_OC6_SetConfig+0xc8>)
 80136d8:	4293      	cmp	r3, r2
 80136da:	d109      	bne.n	80136f0 <TIM_OC6_SetConfig+0x8c>
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80136e2:	617b      	str	r3, [r7, #20]
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	695b      	ldr	r3, [r3, #20]
 80136e8:	029b      	lsls	r3, r3, #10
 80136ea:	697a      	ldr	r2, [r7, #20]
 80136ec:	4313      	orrs	r3, r2
 80136ee:	617b      	str	r3, [r7, #20]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	697a      	ldr	r2, [r7, #20]
 80136f4:	605a      	str	r2, [r3, #4]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	68fa      	ldr	r2, [r7, #12]
 80136fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	685a      	ldr	r2, [r3, #4]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	693a      	ldr	r2, [r7, #16]
 8013708:	621a      	str	r2, [r3, #32]
 801370a:	bf00      	nop
 801370c:	371c      	adds	r7, #28
 801370e:	46bd      	mov	sp, r7
 8013710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013714:	4770      	bx	lr
 8013716:	bf00      	nop
 8013718:	feff8fff 	.word	0xfeff8fff
 801371c:	40010000 	.word	0x40010000
 8013720:	40010400 	.word	0x40010400
 8013724:	40014000 	.word	0x40014000
 8013728:	40014400 	.word	0x40014400
 801372c:	40014800 	.word	0x40014800

08013730 <TIM_TI1_ConfigInputStage>:
 8013730:	b480      	push	{r7}
 8013732:	b087      	sub	sp, #28
 8013734:	af00      	add	r7, sp, #0
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	6a1b      	ldr	r3, [r3, #32]
 8013740:	617b      	str	r3, [r7, #20]
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	6a1b      	ldr	r3, [r3, #32]
 8013746:	f023 0201 	bic.w	r2, r3, #1
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	621a      	str	r2, [r3, #32]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	699b      	ldr	r3, [r3, #24]
 8013752:	613b      	str	r3, [r7, #16]
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801375a:	613b      	str	r3, [r7, #16]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	011b      	lsls	r3, r3, #4
 8013760:	693a      	ldr	r2, [r7, #16]
 8013762:	4313      	orrs	r3, r2
 8013764:	613b      	str	r3, [r7, #16]
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	f023 030a 	bic.w	r3, r3, #10
 801376c:	617b      	str	r3, [r7, #20]
 801376e:	697a      	ldr	r2, [r7, #20]
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	4313      	orrs	r3, r2
 8013774:	617b      	str	r3, [r7, #20]
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	693a      	ldr	r2, [r7, #16]
 801377a:	619a      	str	r2, [r3, #24]
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	697a      	ldr	r2, [r7, #20]
 8013780:	621a      	str	r2, [r3, #32]
 8013782:	bf00      	nop
 8013784:	371c      	adds	r7, #28
 8013786:	46bd      	mov	sp, r7
 8013788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378c:	4770      	bx	lr

0801378e <TIM_TI2_ConfigInputStage>:
 801378e:	b480      	push	{r7}
 8013790:	b087      	sub	sp, #28
 8013792:	af00      	add	r7, sp, #0
 8013794:	60f8      	str	r0, [r7, #12]
 8013796:	60b9      	str	r1, [r7, #8]
 8013798:	607a      	str	r2, [r7, #4]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	6a1b      	ldr	r3, [r3, #32]
 801379e:	617b      	str	r3, [r7, #20]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	6a1b      	ldr	r3, [r3, #32]
 80137a4:	f023 0210 	bic.w	r2, r3, #16
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	621a      	str	r2, [r3, #32]
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	699b      	ldr	r3, [r3, #24]
 80137b0:	613b      	str	r3, [r7, #16]
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80137b8:	613b      	str	r3, [r7, #16]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	031b      	lsls	r3, r3, #12
 80137be:	693a      	ldr	r2, [r7, #16]
 80137c0:	4313      	orrs	r3, r2
 80137c2:	613b      	str	r3, [r7, #16]
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80137ca:	617b      	str	r3, [r7, #20]
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	011b      	lsls	r3, r3, #4
 80137d0:	697a      	ldr	r2, [r7, #20]
 80137d2:	4313      	orrs	r3, r2
 80137d4:	617b      	str	r3, [r7, #20]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	693a      	ldr	r2, [r7, #16]
 80137da:	619a      	str	r2, [r3, #24]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	697a      	ldr	r2, [r7, #20]
 80137e0:	621a      	str	r2, [r3, #32]
 80137e2:	bf00      	nop
 80137e4:	371c      	adds	r7, #28
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr
	...

080137f0 <TIM_ITRx_SetConfig>:
 80137f0:	b480      	push	{r7}
 80137f2:	b085      	sub	sp, #20
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6039      	str	r1, [r7, #0]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	689b      	ldr	r3, [r3, #8]
 80137fe:	60fb      	str	r3, [r7, #12]
 8013800:	68fa      	ldr	r2, [r7, #12]
 8013802:	4b09      	ldr	r3, [pc, #36]	@ (8013828 <TIM_ITRx_SetConfig+0x38>)
 8013804:	4013      	ands	r3, r2
 8013806:	60fb      	str	r3, [r7, #12]
 8013808:	683a      	ldr	r2, [r7, #0]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	4313      	orrs	r3, r2
 801380e:	f043 0307 	orr.w	r3, r3, #7
 8013812:	60fb      	str	r3, [r7, #12]
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	68fa      	ldr	r2, [r7, #12]
 8013818:	609a      	str	r2, [r3, #8]
 801381a:	bf00      	nop
 801381c:	3714      	adds	r7, #20
 801381e:	46bd      	mov	sp, r7
 8013820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013824:	4770      	bx	lr
 8013826:	bf00      	nop
 8013828:	ffcfff8f 	.word	0xffcfff8f

0801382c <TIM_ETR_SetConfig>:
 801382c:	b480      	push	{r7}
 801382e:	b087      	sub	sp, #28
 8013830:	af00      	add	r7, sp, #0
 8013832:	60f8      	str	r0, [r7, #12]
 8013834:	60b9      	str	r1, [r7, #8]
 8013836:	607a      	str	r2, [r7, #4]
 8013838:	603b      	str	r3, [r7, #0]
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	689b      	ldr	r3, [r3, #8]
 801383e:	617b      	str	r3, [r7, #20]
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013846:	617b      	str	r3, [r7, #20]
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	021a      	lsls	r2, r3, #8
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	431a      	orrs	r2, r3
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	4313      	orrs	r3, r2
 8013854:	697a      	ldr	r2, [r7, #20]
 8013856:	4313      	orrs	r3, r2
 8013858:	617b      	str	r3, [r7, #20]
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	697a      	ldr	r2, [r7, #20]
 801385e:	609a      	str	r2, [r3, #8]
 8013860:	bf00      	nop
 8013862:	371c      	adds	r7, #28
 8013864:	46bd      	mov	sp, r7
 8013866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386a:	4770      	bx	lr

0801386c <HAL_TIMEx_MasterConfigSynchronization>:
 801386c:	b480      	push	{r7}
 801386e:	b085      	sub	sp, #20
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	6039      	str	r1, [r7, #0]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801387c:	2b01      	cmp	r3, #1
 801387e:	d101      	bne.n	8013884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013880:	2302      	movs	r3, #2
 8013882:	e077      	b.n	8013974 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2201      	movs	r2, #1
 8013888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2202      	movs	r2, #2
 8013890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	685b      	ldr	r3, [r3, #4]
 801389a:	60fb      	str	r3, [r7, #12]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	689b      	ldr	r3, [r3, #8]
 80138a2:	60bb      	str	r3, [r7, #8]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	4a35      	ldr	r2, [pc, #212]	@ (8013980 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80138aa:	4293      	cmp	r3, r2
 80138ac:	d004      	beq.n	80138b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	4a34      	ldr	r2, [pc, #208]	@ (8013984 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80138b4:	4293      	cmp	r3, r2
 80138b6:	d108      	bne.n	80138ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80138be:	60fb      	str	r3, [r7, #12]
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	4313      	orrs	r3, r2
 80138c8:	60fb      	str	r3, [r7, #12]
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80138d0:	60fb      	str	r3, [r7, #12]
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	68fa      	ldr	r2, [r7, #12]
 80138d8:	4313      	orrs	r3, r2
 80138da:	60fb      	str	r3, [r7, #12]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	68fa      	ldr	r2, [r7, #12]
 80138e2:	605a      	str	r2, [r3, #4]
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4a25      	ldr	r2, [pc, #148]	@ (8013980 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d02c      	beq.n	8013948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138f6:	d027      	beq.n	8013948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	4a22      	ldr	r2, [pc, #136]	@ (8013988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80138fe:	4293      	cmp	r3, r2
 8013900:	d022      	beq.n	8013948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	4a21      	ldr	r2, [pc, #132]	@ (801398c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8013908:	4293      	cmp	r3, r2
 801390a:	d01d      	beq.n	8013948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	4a1f      	ldr	r2, [pc, #124]	@ (8013990 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8013912:	4293      	cmp	r3, r2
 8013914:	d018      	beq.n	8013948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4a1a      	ldr	r2, [pc, #104]	@ (8013984 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801391c:	4293      	cmp	r3, r2
 801391e:	d013      	beq.n	8013948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	4a1b      	ldr	r2, [pc, #108]	@ (8013994 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8013926:	4293      	cmp	r3, r2
 8013928:	d00e      	beq.n	8013948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4a1a      	ldr	r2, [pc, #104]	@ (8013998 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8013930:	4293      	cmp	r3, r2
 8013932:	d009      	beq.n	8013948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	4a18      	ldr	r2, [pc, #96]	@ (801399c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d004      	beq.n	8013948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	4a17      	ldr	r2, [pc, #92]	@ (80139a0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8013944:	4293      	cmp	r3, r2
 8013946:	d10c      	bne.n	8013962 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801394e:	60bb      	str	r3, [r7, #8]
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	689b      	ldr	r3, [r3, #8]
 8013954:	68ba      	ldr	r2, [r7, #8]
 8013956:	4313      	orrs	r3, r2
 8013958:	60bb      	str	r3, [r7, #8]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	68ba      	ldr	r2, [r7, #8]
 8013960:	609a      	str	r2, [r3, #8]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2201      	movs	r2, #1
 8013966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2200      	movs	r2, #0
 801396e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013972:	2300      	movs	r3, #0
 8013974:	4618      	mov	r0, r3
 8013976:	3714      	adds	r7, #20
 8013978:	46bd      	mov	sp, r7
 801397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397e:	4770      	bx	lr
 8013980:	40010000 	.word	0x40010000
 8013984:	40010400 	.word	0x40010400
 8013988:	40000400 	.word	0x40000400
 801398c:	40000800 	.word	0x40000800
 8013990:	40000c00 	.word	0x40000c00
 8013994:	40001800 	.word	0x40001800
 8013998:	40014000 	.word	0x40014000
 801399c:	4000e000 	.word	0x4000e000
 80139a0:	4000e400 	.word	0x4000e400

080139a4 <HAL_TIMEx_ConfigBreakDeadTime>:
 80139a4:	b480      	push	{r7}
 80139a6:	b085      	sub	sp, #20
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
 80139ae:	2300      	movs	r3, #0
 80139b0:	60fb      	str	r3, [r7, #12]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d101      	bne.n	80139c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80139bc:	2302      	movs	r3, #2
 80139be:	e073      	b.n	8013aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2201      	movs	r2, #1
 80139c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	68db      	ldr	r3, [r3, #12]
 80139d2:	4313      	orrs	r3, r2
 80139d4:	60fb      	str	r3, [r7, #12]
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	689b      	ldr	r3, [r3, #8]
 80139e0:	4313      	orrs	r3, r2
 80139e2:	60fb      	str	r3, [r7, #12]
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	4313      	orrs	r3, r2
 80139f0:	60fb      	str	r3, [r7, #12]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	4313      	orrs	r3, r2
 80139fe:	60fb      	str	r3, [r7, #12]
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	691b      	ldr	r3, [r3, #16]
 8013a0a:	4313      	orrs	r3, r2
 8013a0c:	60fb      	str	r3, [r7, #12]
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	695b      	ldr	r3, [r3, #20]
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	60fb      	str	r3, [r7, #12]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a26:	4313      	orrs	r3, r2
 8013a28:	60fb      	str	r3, [r7, #12]
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	699b      	ldr	r3, [r3, #24]
 8013a34:	041b      	lsls	r3, r3, #16
 8013a36:	4313      	orrs	r3, r2
 8013a38:	60fb      	str	r3, [r7, #12]
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	69db      	ldr	r3, [r3, #28]
 8013a44:	4313      	orrs	r3, r2
 8013a46:	60fb      	str	r3, [r7, #12]
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	4a19      	ldr	r2, [pc, #100]	@ (8013ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8013a4e:	4293      	cmp	r3, r2
 8013a50:	d004      	beq.n	8013a5c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	4a18      	ldr	r2, [pc, #96]	@ (8013ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8013a58:	4293      	cmp	r3, r2
 8013a5a:	d11c      	bne.n	8013a96 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a66:	051b      	lsls	r3, r3, #20
 8013a68:	4313      	orrs	r3, r2
 8013a6a:	60fb      	str	r3, [r7, #12]
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	6a1b      	ldr	r3, [r3, #32]
 8013a76:	4313      	orrs	r3, r2
 8013a78:	60fb      	str	r3, [r7, #12]
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a84:	4313      	orrs	r3, r2
 8013a86:	60fb      	str	r3, [r7, #12]
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a92:	4313      	orrs	r3, r2
 8013a94:	60fb      	str	r3, [r7, #12]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3714      	adds	r7, #20
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr
 8013ab4:	40010000 	.word	0x40010000
 8013ab8:	40010400 	.word	0x40010400

08013abc <HAL_UART_Init>:
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d101      	bne.n	8013ace <HAL_UART_Init+0x12>
 8013aca:	2301      	movs	r3, #1
 8013acc:	e042      	b.n	8013b54 <HAL_UART_Init+0x98>
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d106      	bne.n	8013ae6 <HAL_UART_Init+0x2a>
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2200      	movs	r2, #0
 8013adc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7f4 fa67 	bl	8007fb4 <HAL_UART_MspInit>
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2224      	movs	r2, #36	@ 0x24
 8013aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	681a      	ldr	r2, [r3, #0]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f022 0201 	bic.w	r2, r2, #1
 8013afc:	601a      	str	r2, [r3, #0]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d002      	beq.n	8013b0c <HAL_UART_Init+0x50>
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f001 fa6e 	bl	8014fe8 <UART_AdvFeatureConfig>
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 fbff 	bl	8014310 <UART_SetConfig>
 8013b12:	4603      	mov	r3, r0
 8013b14:	2b01      	cmp	r3, #1
 8013b16:	d101      	bne.n	8013b1c <HAL_UART_Init+0x60>
 8013b18:	2301      	movs	r3, #1
 8013b1a:	e01b      	b.n	8013b54 <HAL_UART_Init+0x98>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	685a      	ldr	r2, [r3, #4]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013b2a:	605a      	str	r2, [r3, #4]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	689a      	ldr	r2, [r3, #8]
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013b3a:	609a      	str	r2, [r3, #8]
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	681a      	ldr	r2, [r3, #0]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	f042 0201 	orr.w	r2, r2, #1
 8013b4a:	601a      	str	r2, [r3, #0]
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f001 faed 	bl	801512c <UART_CheckIdleState>
 8013b52:	4603      	mov	r3, r0
 8013b54:	4618      	mov	r0, r3
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <HAL_UART_IRQHandler>:
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b0ba      	sub	sp, #232	@ 0xe8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	69db      	ldr	r3, [r3, #28]
 8013b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	689b      	ldr	r3, [r3, #8]
 8013b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8013b82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013b86:	f640 030f 	movw	r3, #2063	@ 0x80f
 8013b8a:	4013      	ands	r3, r2
 8013b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d11b      	bne.n	8013bd0 <HAL_UART_IRQHandler+0x74>
 8013b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013b9c:	f003 0320 	and.w	r3, r3, #32
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d015      	beq.n	8013bd0 <HAL_UART_IRQHandler+0x74>
 8013ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013ba8:	f003 0320 	and.w	r3, r3, #32
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d105      	bne.n	8013bbc <HAL_UART_IRQHandler+0x60>
 8013bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d009      	beq.n	8013bd0 <HAL_UART_IRQHandler+0x74>
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	f000 8377 	beq.w	80142b4 <HAL_UART_IRQHandler+0x758>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	4798      	blx	r3
 8013bce:	e371      	b.n	80142b4 <HAL_UART_IRQHandler+0x758>
 8013bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	f000 8123 	beq.w	8013e20 <HAL_UART_IRQHandler+0x2c4>
 8013bda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013bde:	4b8d      	ldr	r3, [pc, #564]	@ (8013e14 <HAL_UART_IRQHandler+0x2b8>)
 8013be0:	4013      	ands	r3, r2
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d106      	bne.n	8013bf4 <HAL_UART_IRQHandler+0x98>
 8013be6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013bea:	4b8b      	ldr	r3, [pc, #556]	@ (8013e18 <HAL_UART_IRQHandler+0x2bc>)
 8013bec:	4013      	ands	r3, r2
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	f000 8116 	beq.w	8013e20 <HAL_UART_IRQHandler+0x2c4>
 8013bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013bf8:	f003 0301 	and.w	r3, r3, #1
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d011      	beq.n	8013c24 <HAL_UART_IRQHandler+0xc8>
 8013c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d00b      	beq.n	8013c24 <HAL_UART_IRQHandler+0xc8>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	2201      	movs	r2, #1
 8013c12:	621a      	str	r2, [r3, #32]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c1a:	f043 0201 	orr.w	r2, r3, #1
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c28:	f003 0302 	and.w	r3, r3, #2
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d011      	beq.n	8013c54 <HAL_UART_IRQHandler+0xf8>
 8013c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013c34:	f003 0301 	and.w	r3, r3, #1
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d00b      	beq.n	8013c54 <HAL_UART_IRQHandler+0xf8>
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	2202      	movs	r2, #2
 8013c42:	621a      	str	r2, [r3, #32]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c4a:	f043 0204 	orr.w	r2, r3, #4
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c58:	f003 0304 	and.w	r3, r3, #4
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d011      	beq.n	8013c84 <HAL_UART_IRQHandler+0x128>
 8013c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013c64:	f003 0301 	and.w	r3, r3, #1
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d00b      	beq.n	8013c84 <HAL_UART_IRQHandler+0x128>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2204      	movs	r2, #4
 8013c72:	621a      	str	r2, [r3, #32]
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c7a:	f043 0202 	orr.w	r2, r3, #2
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c88:	f003 0308 	and.w	r3, r3, #8
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d017      	beq.n	8013cc0 <HAL_UART_IRQHandler+0x164>
 8013c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013c94:	f003 0320 	and.w	r3, r3, #32
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d105      	bne.n	8013ca8 <HAL_UART_IRQHandler+0x14c>
 8013c9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013ca0:	4b5c      	ldr	r3, [pc, #368]	@ (8013e14 <HAL_UART_IRQHandler+0x2b8>)
 8013ca2:	4013      	ands	r3, r2
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d00b      	beq.n	8013cc0 <HAL_UART_IRQHandler+0x164>
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	2208      	movs	r2, #8
 8013cae:	621a      	str	r2, [r3, #32]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cb6:	f043 0208 	orr.w	r2, r3, #8
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d012      	beq.n	8013cf2 <HAL_UART_IRQHandler+0x196>
 8013ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013cd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d00c      	beq.n	8013cf2 <HAL_UART_IRQHandler+0x196>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013ce0:	621a      	str	r2, [r3, #32]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ce8:	f043 0220 	orr.w	r2, r3, #32
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	f000 82dd 	beq.w	80142b8 <HAL_UART_IRQHandler+0x75c>
 8013cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013d02:	f003 0320 	and.w	r3, r3, #32
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d013      	beq.n	8013d32 <HAL_UART_IRQHandler+0x1d6>
 8013d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013d0e:	f003 0320 	and.w	r3, r3, #32
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d105      	bne.n	8013d22 <HAL_UART_IRQHandler+0x1c6>
 8013d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d007      	beq.n	8013d32 <HAL_UART_IRQHandler+0x1d6>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d003      	beq.n	8013d32 <HAL_UART_IRQHandler+0x1d6>
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	4798      	blx	r3
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	689b      	ldr	r3, [r3, #8]
 8013d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d46:	2b40      	cmp	r3, #64	@ 0x40
 8013d48:	d005      	beq.n	8013d56 <HAL_UART_IRQHandler+0x1fa>
 8013d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013d4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d054      	beq.n	8013e00 <HAL_UART_IRQHandler+0x2a4>
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f001 fb00 	bl	801535c <UART_EndRxTransfer>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	689b      	ldr	r3, [r3, #8]
 8013d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d66:	2b40      	cmp	r3, #64	@ 0x40
 8013d68:	d146      	bne.n	8013df8 <HAL_UART_IRQHandler+0x29c>
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	3308      	adds	r3, #8
 8013d70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013d78:	e853 3f00 	ldrex	r3, [r3]
 8013d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	3308      	adds	r3, #8
 8013d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8013d96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8013d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8013da6:	e841 2300 	strex	r3, r2, [r1]
 8013daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d1d9      	bne.n	8013d6a <HAL_UART_IRQHandler+0x20e>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d017      	beq.n	8013df0 <HAL_UART_IRQHandler+0x294>
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dc6:	4a15      	ldr	r2, [pc, #84]	@ (8013e1c <HAL_UART_IRQHandler+0x2c0>)
 8013dc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7f6 fed9 	bl	800ab88 <HAL_DMA_Abort_IT>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d019      	beq.n	8013e10 <HAL_UART_IRQHandler+0x2b4>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013dea:	4610      	mov	r0, r2
 8013dec:	4798      	blx	r3
 8013dee:	e00f      	b.n	8013e10 <HAL_UART_IRQHandler+0x2b4>
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f000 fa77 	bl	80142e4 <HAL_UART_ErrorCallback>
 8013df6:	e00b      	b.n	8013e10 <HAL_UART_IRQHandler+0x2b4>
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f000 fa73 	bl	80142e4 <HAL_UART_ErrorCallback>
 8013dfe:	e007      	b.n	8013e10 <HAL_UART_IRQHandler+0x2b4>
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f000 fa6f 	bl	80142e4 <HAL_UART_ErrorCallback>
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013e0e:	e253      	b.n	80142b8 <HAL_UART_IRQHandler+0x75c>
 8013e10:	bf00      	nop
 8013e12:	e251      	b.n	80142b8 <HAL_UART_IRQHandler+0x75c>
 8013e14:	10000001 	.word	0x10000001
 8013e18:	04000120 	.word	0x04000120
 8013e1c:	08015429 	.word	0x08015429
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e24:	2b01      	cmp	r3, #1
 8013e26:	f040 81e7 	bne.w	80141f8 <HAL_UART_IRQHandler+0x69c>
 8013e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013e2e:	f003 0310 	and.w	r3, r3, #16
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	f000 81e0 	beq.w	80141f8 <HAL_UART_IRQHandler+0x69c>
 8013e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013e3c:	f003 0310 	and.w	r3, r3, #16
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f000 81d9 	beq.w	80141f8 <HAL_UART_IRQHandler+0x69c>
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	2210      	movs	r2, #16
 8013e4c:	621a      	str	r2, [r3, #32]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	689b      	ldr	r3, [r3, #8]
 8013e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013e58:	2b40      	cmp	r3, #64	@ 0x40
 8013e5a:	f040 8151 	bne.w	8014100 <HAL_UART_IRQHandler+0x5a4>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	4a96      	ldr	r2, [pc, #600]	@ (80140c0 <HAL_UART_IRQHandler+0x564>)
 8013e68:	4293      	cmp	r3, r2
 8013e6a:	d068      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	4a93      	ldr	r2, [pc, #588]	@ (80140c4 <HAL_UART_IRQHandler+0x568>)
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d061      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	4a91      	ldr	r2, [pc, #580]	@ (80140c8 <HAL_UART_IRQHandler+0x56c>)
 8013e84:	4293      	cmp	r3, r2
 8013e86:	d05a      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	4a8e      	ldr	r2, [pc, #568]	@ (80140cc <HAL_UART_IRQHandler+0x570>)
 8013e92:	4293      	cmp	r3, r2
 8013e94:	d053      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	4a8c      	ldr	r2, [pc, #560]	@ (80140d0 <HAL_UART_IRQHandler+0x574>)
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	d04c      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	4a89      	ldr	r2, [pc, #548]	@ (80140d4 <HAL_UART_IRQHandler+0x578>)
 8013eae:	4293      	cmp	r3, r2
 8013eb0:	d045      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	4a87      	ldr	r2, [pc, #540]	@ (80140d8 <HAL_UART_IRQHandler+0x57c>)
 8013ebc:	4293      	cmp	r3, r2
 8013ebe:	d03e      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	4a84      	ldr	r2, [pc, #528]	@ (80140dc <HAL_UART_IRQHandler+0x580>)
 8013eca:	4293      	cmp	r3, r2
 8013ecc:	d037      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	4a82      	ldr	r2, [pc, #520]	@ (80140e0 <HAL_UART_IRQHandler+0x584>)
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	d030      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4a7f      	ldr	r2, [pc, #508]	@ (80140e4 <HAL_UART_IRQHandler+0x588>)
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d029      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	4a7d      	ldr	r2, [pc, #500]	@ (80140e8 <HAL_UART_IRQHandler+0x58c>)
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	d022      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	4a7a      	ldr	r2, [pc, #488]	@ (80140ec <HAL_UART_IRQHandler+0x590>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d01b      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	4a78      	ldr	r2, [pc, #480]	@ (80140f0 <HAL_UART_IRQHandler+0x594>)
 8013f10:	4293      	cmp	r3, r2
 8013f12:	d014      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	4a75      	ldr	r2, [pc, #468]	@ (80140f4 <HAL_UART_IRQHandler+0x598>)
 8013f1e:	4293      	cmp	r3, r2
 8013f20:	d00d      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	4a73      	ldr	r2, [pc, #460]	@ (80140f8 <HAL_UART_IRQHandler+0x59c>)
 8013f2c:	4293      	cmp	r3, r2
 8013f2e:	d006      	beq.n	8013f3e <HAL_UART_IRQHandler+0x3e2>
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4a70      	ldr	r2, [pc, #448]	@ (80140fc <HAL_UART_IRQHandler+0x5a0>)
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	d106      	bne.n	8013f4c <HAL_UART_IRQHandler+0x3f0>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	b29b      	uxth	r3, r3
 8013f4a:	e005      	b.n	8013f58 <HAL_UART_IRQHandler+0x3fc>
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	685b      	ldr	r3, [r3, #4]
 8013f56:	b29b      	uxth	r3, r3
 8013f58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8013f5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	f000 81ab 	beq.w	80142bc <HAL_UART_IRQHandler+0x760>
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013f6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013f70:	429a      	cmp	r2, r3
 8013f72:	f080 81a3 	bcs.w	80142bc <HAL_UART_IRQHandler+0x760>
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013f7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f86:	69db      	ldr	r3, [r3, #28]
 8013f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013f8c:	f000 8087 	beq.w	801409e <HAL_UART_IRQHandler+0x542>
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f9c:	e853 3f00 	ldrex	r3, [r3]
 8013fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013fbe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8013fc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013fca:	e841 2300 	strex	r3, r2, [r1]
 8013fce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d1da      	bne.n	8013f90 <HAL_UART_IRQHandler+0x434>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	3308      	adds	r3, #8
 8013fe0:	677b      	str	r3, [r7, #116]	@ 0x74
 8013fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013fe4:	e853 3f00 	ldrex	r3, [r3]
 8013fe8:	673b      	str	r3, [r7, #112]	@ 0x70
 8013fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013fec:	f023 0301 	bic.w	r3, r3, #1
 8013ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	3308      	adds	r3, #8
 8013ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8013ffe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8014002:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014004:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8014006:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801400a:	e841 2300 	strex	r3, r2, [r1]
 801400e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014012:	2b00      	cmp	r3, #0
 8014014:	d1e1      	bne.n	8013fda <HAL_UART_IRQHandler+0x47e>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	3308      	adds	r3, #8
 801401c:	663b      	str	r3, [r7, #96]	@ 0x60
 801401e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014020:	e853 3f00 	ldrex	r3, [r3]
 8014024:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801402c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	3308      	adds	r3, #8
 8014036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801403a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801403c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801403e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014040:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014042:	e841 2300 	strex	r3, r2, [r1]
 8014046:	667b      	str	r3, [r7, #100]	@ 0x64
 8014048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801404a:	2b00      	cmp	r3, #0
 801404c:	d1e3      	bne.n	8014016 <HAL_UART_IRQHandler+0x4ba>
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2220      	movs	r2, #32
 8014052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2200      	movs	r2, #0
 801405a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014064:	e853 3f00 	ldrex	r3, [r3]
 8014068:	64bb      	str	r3, [r7, #72]	@ 0x48
 801406a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801406c:	f023 0310 	bic.w	r3, r3, #16
 8014070:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	461a      	mov	r2, r3
 801407a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801407e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014080:	657a      	str	r2, [r7, #84]	@ 0x54
 8014082:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014084:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014086:	e841 2300 	strex	r3, r2, [r1]
 801408a:	653b      	str	r3, [r7, #80]	@ 0x50
 801408c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801408e:	2b00      	cmp	r3, #0
 8014090:	d1e4      	bne.n	801405c <HAL_UART_IRQHandler+0x500>
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014098:	4618      	mov	r0, r3
 801409a:	f7f6 fa57 	bl	800a54c <HAL_DMA_Abort>
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2202      	movs	r2, #2
 80140a2:	671a      	str	r2, [r3, #112]	@ 0x70
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	1ad3      	subs	r3, r2, r3
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	4619      	mov	r1, r3
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f000 f91d 	bl	80142f8 <HAL_UARTEx_RxEventCallback>
 80140be:	e0fd      	b.n	80142bc <HAL_UART_IRQHandler+0x760>
 80140c0:	40020010 	.word	0x40020010
 80140c4:	40020028 	.word	0x40020028
 80140c8:	40020040 	.word	0x40020040
 80140cc:	40020058 	.word	0x40020058
 80140d0:	40020070 	.word	0x40020070
 80140d4:	40020088 	.word	0x40020088
 80140d8:	400200a0 	.word	0x400200a0
 80140dc:	400200b8 	.word	0x400200b8
 80140e0:	40020410 	.word	0x40020410
 80140e4:	40020428 	.word	0x40020428
 80140e8:	40020440 	.word	0x40020440
 80140ec:	40020458 	.word	0x40020458
 80140f0:	40020470 	.word	0x40020470
 80140f4:	40020488 	.word	0x40020488
 80140f8:	400204a0 	.word	0x400204a0
 80140fc:	400204b8 	.word	0x400204b8
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801410c:	b29b      	uxth	r3, r3
 801410e:	1ad3      	subs	r3, r2, r3
 8014110:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801411a:	b29b      	uxth	r3, r3
 801411c:	2b00      	cmp	r3, #0
 801411e:	f000 80cf 	beq.w	80142c0 <HAL_UART_IRQHandler+0x764>
 8014122:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014126:	2b00      	cmp	r3, #0
 8014128:	f000 80ca 	beq.w	80142c0 <HAL_UART_IRQHandler+0x764>
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014134:	e853 3f00 	ldrex	r3, [r3]
 8014138:	637b      	str	r3, [r7, #52]	@ 0x34
 801413a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801413c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014140:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	461a      	mov	r2, r3
 801414a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801414e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014150:	643a      	str	r2, [r7, #64]	@ 0x40
 8014152:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014154:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014156:	e841 2300 	strex	r3, r2, [r1]
 801415a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801415c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801415e:	2b00      	cmp	r3, #0
 8014160:	d1e4      	bne.n	801412c <HAL_UART_IRQHandler+0x5d0>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	3308      	adds	r3, #8
 8014168:	627b      	str	r3, [r7, #36]	@ 0x24
 801416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801416c:	e853 3f00 	ldrex	r3, [r3]
 8014170:	623b      	str	r3, [r7, #32]
 8014172:	6a3a      	ldr	r2, [r7, #32]
 8014174:	4b55      	ldr	r3, [pc, #340]	@ (80142cc <HAL_UART_IRQHandler+0x770>)
 8014176:	4013      	ands	r3, r2
 8014178:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	3308      	adds	r3, #8
 8014182:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014186:	633a      	str	r2, [r7, #48]	@ 0x30
 8014188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801418a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801418c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801418e:	e841 2300 	strex	r3, r2, [r1]
 8014192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014196:	2b00      	cmp	r3, #0
 8014198:	d1e3      	bne.n	8014162 <HAL_UART_IRQHandler+0x606>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	2220      	movs	r2, #32
 801419e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2200      	movs	r2, #0
 80141a6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2200      	movs	r2, #0
 80141ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	613b      	str	r3, [r7, #16]
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	e853 3f00 	ldrex	r3, [r3]
 80141ba:	60fb      	str	r3, [r7, #12]
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	f023 0310 	bic.w	r3, r3, #16
 80141c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	461a      	mov	r2, r3
 80141cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80141d0:	61fb      	str	r3, [r7, #28]
 80141d2:	61ba      	str	r2, [r7, #24]
 80141d4:	69b9      	ldr	r1, [r7, #24]
 80141d6:	69fa      	ldr	r2, [r7, #28]
 80141d8:	e841 2300 	strex	r3, r2, [r1]
 80141dc:	617b      	str	r3, [r7, #20]
 80141de:	697b      	ldr	r3, [r7, #20]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d1e4      	bne.n	80141ae <HAL_UART_IRQHandler+0x652>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	2202      	movs	r2, #2
 80141e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80141ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80141ee:	4619      	mov	r1, r3
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f000 f881 	bl	80142f8 <HAL_UARTEx_RxEventCallback>
 80141f6:	e063      	b.n	80142c0 <HAL_UART_IRQHandler+0x764>
 80141f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014200:	2b00      	cmp	r3, #0
 8014202:	d00e      	beq.n	8014222 <HAL_UART_IRQHandler+0x6c6>
 8014204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801420c:	2b00      	cmp	r3, #0
 801420e:	d008      	beq.n	8014222 <HAL_UART_IRQHandler+0x6c6>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8014218:	621a      	str	r2, [r3, #32]
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f001 f945 	bl	80154aa <HAL_UARTEx_WakeupCallback>
 8014220:	e051      	b.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 8014222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801422a:	2b00      	cmp	r3, #0
 801422c:	d014      	beq.n	8014258 <HAL_UART_IRQHandler+0x6fc>
 801422e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014236:	2b00      	cmp	r3, #0
 8014238:	d105      	bne.n	8014246 <HAL_UART_IRQHandler+0x6ea>
 801423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801423e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014242:	2b00      	cmp	r3, #0
 8014244:	d008      	beq.n	8014258 <HAL_UART_IRQHandler+0x6fc>
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801424a:	2b00      	cmp	r3, #0
 801424c:	d03a      	beq.n	80142c4 <HAL_UART_IRQHandler+0x768>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	4798      	blx	r3
 8014256:	e035      	b.n	80142c4 <HAL_UART_IRQHandler+0x768>
 8014258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014260:	2b00      	cmp	r3, #0
 8014262:	d009      	beq.n	8014278 <HAL_UART_IRQHandler+0x71c>
 8014264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801426c:	2b00      	cmp	r3, #0
 801426e:	d003      	beq.n	8014278 <HAL_UART_IRQHandler+0x71c>
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f001 f8ef 	bl	8015454 <UART_EndTransmit_IT>
 8014276:	e026      	b.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 8014278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801427c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014280:	2b00      	cmp	r3, #0
 8014282:	d009      	beq.n	8014298 <HAL_UART_IRQHandler+0x73c>
 8014284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014288:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801428c:	2b00      	cmp	r3, #0
 801428e:	d003      	beq.n	8014298 <HAL_UART_IRQHandler+0x73c>
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f001 f91e 	bl	80154d2 <HAL_UARTEx_TxFifoEmptyCallback>
 8014296:	e016      	b.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 8014298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801429c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d010      	beq.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 80142a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	da0c      	bge.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f001 f906 	bl	80154be <HAL_UARTEx_RxFifoFullCallback>
 80142b2:	e008      	b.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 80142b4:	bf00      	nop
 80142b6:	e006      	b.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 80142b8:	bf00      	nop
 80142ba:	e004      	b.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 80142bc:	bf00      	nop
 80142be:	e002      	b.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 80142c0:	bf00      	nop
 80142c2:	e000      	b.n	80142c6 <HAL_UART_IRQHandler+0x76a>
 80142c4:	bf00      	nop
 80142c6:	37e8      	adds	r7, #232	@ 0xe8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	effffffe 	.word	0xeffffffe

080142d0 <HAL_UART_TxCpltCallback>:
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	bf00      	nop
 80142da:	370c      	adds	r7, #12
 80142dc:	46bd      	mov	sp, r7
 80142de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e2:	4770      	bx	lr

080142e4 <HAL_UART_ErrorCallback>:
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	bf00      	nop
 80142ee:	370c      	adds	r7, #12
 80142f0:	46bd      	mov	sp, r7
 80142f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f6:	4770      	bx	lr

080142f8 <HAL_UARTEx_RxEventCallback>:
 80142f8:	b480      	push	{r7}
 80142fa:	b083      	sub	sp, #12
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	460b      	mov	r3, r1
 8014302:	807b      	strh	r3, [r7, #2]
 8014304:	bf00      	nop
 8014306:	370c      	adds	r7, #12
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr

08014310 <UART_SetConfig>:
 8014310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014314:	b092      	sub	sp, #72	@ 0x48
 8014316:	af00      	add	r7, sp, #0
 8014318:	6178      	str	r0, [r7, #20]
 801431a:	2300      	movs	r3, #0
 801431c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	689a      	ldr	r2, [r3, #8]
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	691b      	ldr	r3, [r3, #16]
 8014328:	431a      	orrs	r2, r3
 801432a:	697b      	ldr	r3, [r7, #20]
 801432c:	695b      	ldr	r3, [r3, #20]
 801432e:	431a      	orrs	r2, r3
 8014330:	697b      	ldr	r3, [r7, #20]
 8014332:	69db      	ldr	r3, [r3, #28]
 8014334:	4313      	orrs	r3, r2
 8014336:	647b      	str	r3, [r7, #68]	@ 0x44
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	681a      	ldr	r2, [r3, #0]
 801433e:	4bbe      	ldr	r3, [pc, #760]	@ (8014638 <UART_SetConfig+0x328>)
 8014340:	4013      	ands	r3, r2
 8014342:	697a      	ldr	r2, [r7, #20]
 8014344:	6812      	ldr	r2, [r2, #0]
 8014346:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014348:	430b      	orrs	r3, r1
 801434a:	6013      	str	r3, [r2, #0]
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	685b      	ldr	r3, [r3, #4]
 8014352:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	68da      	ldr	r2, [r3, #12]
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	430a      	orrs	r2, r1
 8014360:	605a      	str	r2, [r3, #4]
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	699b      	ldr	r3, [r3, #24]
 8014366:	647b      	str	r3, [r7, #68]	@ 0x44
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4ab3      	ldr	r2, [pc, #716]	@ (801463c <UART_SetConfig+0x32c>)
 801436e:	4293      	cmp	r3, r2
 8014370:	d004      	beq.n	801437c <UART_SetConfig+0x6c>
 8014372:	697b      	ldr	r3, [r7, #20]
 8014374:	6a1b      	ldr	r3, [r3, #32]
 8014376:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014378:	4313      	orrs	r3, r2
 801437a:	647b      	str	r3, [r7, #68]	@ 0x44
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	689a      	ldr	r2, [r3, #8]
 8014382:	4baf      	ldr	r3, [pc, #700]	@ (8014640 <UART_SetConfig+0x330>)
 8014384:	4013      	ands	r3, r2
 8014386:	697a      	ldr	r2, [r7, #20]
 8014388:	6812      	ldr	r2, [r2, #0]
 801438a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801438c:	430b      	orrs	r3, r1
 801438e:	6093      	str	r3, [r2, #8]
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014396:	f023 010f 	bic.w	r1, r3, #15
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	430a      	orrs	r2, r1
 80143a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	4aa6      	ldr	r2, [pc, #664]	@ (8014644 <UART_SetConfig+0x334>)
 80143ac:	4293      	cmp	r3, r2
 80143ae:	d177      	bne.n	80144a0 <UART_SetConfig+0x190>
 80143b0:	4ba5      	ldr	r3, [pc, #660]	@ (8014648 <UART_SetConfig+0x338>)
 80143b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80143b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80143b8:	2b28      	cmp	r3, #40	@ 0x28
 80143ba:	d86d      	bhi.n	8014498 <UART_SetConfig+0x188>
 80143bc:	a201      	add	r2, pc, #4	@ (adr r2, 80143c4 <UART_SetConfig+0xb4>)
 80143be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143c2:	bf00      	nop
 80143c4:	08014469 	.word	0x08014469
 80143c8:	08014499 	.word	0x08014499
 80143cc:	08014499 	.word	0x08014499
 80143d0:	08014499 	.word	0x08014499
 80143d4:	08014499 	.word	0x08014499
 80143d8:	08014499 	.word	0x08014499
 80143dc:	08014499 	.word	0x08014499
 80143e0:	08014499 	.word	0x08014499
 80143e4:	08014471 	.word	0x08014471
 80143e8:	08014499 	.word	0x08014499
 80143ec:	08014499 	.word	0x08014499
 80143f0:	08014499 	.word	0x08014499
 80143f4:	08014499 	.word	0x08014499
 80143f8:	08014499 	.word	0x08014499
 80143fc:	08014499 	.word	0x08014499
 8014400:	08014499 	.word	0x08014499
 8014404:	08014479 	.word	0x08014479
 8014408:	08014499 	.word	0x08014499
 801440c:	08014499 	.word	0x08014499
 8014410:	08014499 	.word	0x08014499
 8014414:	08014499 	.word	0x08014499
 8014418:	08014499 	.word	0x08014499
 801441c:	08014499 	.word	0x08014499
 8014420:	08014499 	.word	0x08014499
 8014424:	08014481 	.word	0x08014481
 8014428:	08014499 	.word	0x08014499
 801442c:	08014499 	.word	0x08014499
 8014430:	08014499 	.word	0x08014499
 8014434:	08014499 	.word	0x08014499
 8014438:	08014499 	.word	0x08014499
 801443c:	08014499 	.word	0x08014499
 8014440:	08014499 	.word	0x08014499
 8014444:	08014489 	.word	0x08014489
 8014448:	08014499 	.word	0x08014499
 801444c:	08014499 	.word	0x08014499
 8014450:	08014499 	.word	0x08014499
 8014454:	08014499 	.word	0x08014499
 8014458:	08014499 	.word	0x08014499
 801445c:	08014499 	.word	0x08014499
 8014460:	08014499 	.word	0x08014499
 8014464:	08014491 	.word	0x08014491
 8014468:	2301      	movs	r3, #1
 801446a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801446e:	e326      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014470:	2304      	movs	r3, #4
 8014472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014476:	e322      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014478:	2308      	movs	r3, #8
 801447a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801447e:	e31e      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014480:	2310      	movs	r3, #16
 8014482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014486:	e31a      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014488:	2320      	movs	r3, #32
 801448a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801448e:	e316      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014490:	2340      	movs	r3, #64	@ 0x40
 8014492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014496:	e312      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014498:	2380      	movs	r3, #128	@ 0x80
 801449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801449e:	e30e      	b.n	8014abe <UART_SetConfig+0x7ae>
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	4a69      	ldr	r2, [pc, #420]	@ (801464c <UART_SetConfig+0x33c>)
 80144a6:	4293      	cmp	r3, r2
 80144a8:	d130      	bne.n	801450c <UART_SetConfig+0x1fc>
 80144aa:	4b67      	ldr	r3, [pc, #412]	@ (8014648 <UART_SetConfig+0x338>)
 80144ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80144ae:	f003 0307 	and.w	r3, r3, #7
 80144b2:	2b05      	cmp	r3, #5
 80144b4:	d826      	bhi.n	8014504 <UART_SetConfig+0x1f4>
 80144b6:	a201      	add	r2, pc, #4	@ (adr r2, 80144bc <UART_SetConfig+0x1ac>)
 80144b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144bc:	080144d5 	.word	0x080144d5
 80144c0:	080144dd 	.word	0x080144dd
 80144c4:	080144e5 	.word	0x080144e5
 80144c8:	080144ed 	.word	0x080144ed
 80144cc:	080144f5 	.word	0x080144f5
 80144d0:	080144fd 	.word	0x080144fd
 80144d4:	2300      	movs	r3, #0
 80144d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144da:	e2f0      	b.n	8014abe <UART_SetConfig+0x7ae>
 80144dc:	2304      	movs	r3, #4
 80144de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144e2:	e2ec      	b.n	8014abe <UART_SetConfig+0x7ae>
 80144e4:	2308      	movs	r3, #8
 80144e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144ea:	e2e8      	b.n	8014abe <UART_SetConfig+0x7ae>
 80144ec:	2310      	movs	r3, #16
 80144ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144f2:	e2e4      	b.n	8014abe <UART_SetConfig+0x7ae>
 80144f4:	2320      	movs	r3, #32
 80144f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144fa:	e2e0      	b.n	8014abe <UART_SetConfig+0x7ae>
 80144fc:	2340      	movs	r3, #64	@ 0x40
 80144fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014502:	e2dc      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014504:	2380      	movs	r3, #128	@ 0x80
 8014506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801450a:	e2d8      	b.n	8014abe <UART_SetConfig+0x7ae>
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	4a4f      	ldr	r2, [pc, #316]	@ (8014650 <UART_SetConfig+0x340>)
 8014512:	4293      	cmp	r3, r2
 8014514:	d130      	bne.n	8014578 <UART_SetConfig+0x268>
 8014516:	4b4c      	ldr	r3, [pc, #304]	@ (8014648 <UART_SetConfig+0x338>)
 8014518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801451a:	f003 0307 	and.w	r3, r3, #7
 801451e:	2b05      	cmp	r3, #5
 8014520:	d826      	bhi.n	8014570 <UART_SetConfig+0x260>
 8014522:	a201      	add	r2, pc, #4	@ (adr r2, 8014528 <UART_SetConfig+0x218>)
 8014524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014528:	08014541 	.word	0x08014541
 801452c:	08014549 	.word	0x08014549
 8014530:	08014551 	.word	0x08014551
 8014534:	08014559 	.word	0x08014559
 8014538:	08014561 	.word	0x08014561
 801453c:	08014569 	.word	0x08014569
 8014540:	2300      	movs	r3, #0
 8014542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014546:	e2ba      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014548:	2304      	movs	r3, #4
 801454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801454e:	e2b6      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014550:	2308      	movs	r3, #8
 8014552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014556:	e2b2      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014558:	2310      	movs	r3, #16
 801455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801455e:	e2ae      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014560:	2320      	movs	r3, #32
 8014562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014566:	e2aa      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014568:	2340      	movs	r3, #64	@ 0x40
 801456a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801456e:	e2a6      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014570:	2380      	movs	r3, #128	@ 0x80
 8014572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014576:	e2a2      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	4a35      	ldr	r2, [pc, #212]	@ (8014654 <UART_SetConfig+0x344>)
 801457e:	4293      	cmp	r3, r2
 8014580:	d130      	bne.n	80145e4 <UART_SetConfig+0x2d4>
 8014582:	4b31      	ldr	r3, [pc, #196]	@ (8014648 <UART_SetConfig+0x338>)
 8014584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014586:	f003 0307 	and.w	r3, r3, #7
 801458a:	2b05      	cmp	r3, #5
 801458c:	d826      	bhi.n	80145dc <UART_SetConfig+0x2cc>
 801458e:	a201      	add	r2, pc, #4	@ (adr r2, 8014594 <UART_SetConfig+0x284>)
 8014590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014594:	080145ad 	.word	0x080145ad
 8014598:	080145b5 	.word	0x080145b5
 801459c:	080145bd 	.word	0x080145bd
 80145a0:	080145c5 	.word	0x080145c5
 80145a4:	080145cd 	.word	0x080145cd
 80145a8:	080145d5 	.word	0x080145d5
 80145ac:	2300      	movs	r3, #0
 80145ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145b2:	e284      	b.n	8014abe <UART_SetConfig+0x7ae>
 80145b4:	2304      	movs	r3, #4
 80145b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145ba:	e280      	b.n	8014abe <UART_SetConfig+0x7ae>
 80145bc:	2308      	movs	r3, #8
 80145be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145c2:	e27c      	b.n	8014abe <UART_SetConfig+0x7ae>
 80145c4:	2310      	movs	r3, #16
 80145c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145ca:	e278      	b.n	8014abe <UART_SetConfig+0x7ae>
 80145cc:	2320      	movs	r3, #32
 80145ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145d2:	e274      	b.n	8014abe <UART_SetConfig+0x7ae>
 80145d4:	2340      	movs	r3, #64	@ 0x40
 80145d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145da:	e270      	b.n	8014abe <UART_SetConfig+0x7ae>
 80145dc:	2380      	movs	r3, #128	@ 0x80
 80145de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145e2:	e26c      	b.n	8014abe <UART_SetConfig+0x7ae>
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	4a1b      	ldr	r2, [pc, #108]	@ (8014658 <UART_SetConfig+0x348>)
 80145ea:	4293      	cmp	r3, r2
 80145ec:	d142      	bne.n	8014674 <UART_SetConfig+0x364>
 80145ee:	4b16      	ldr	r3, [pc, #88]	@ (8014648 <UART_SetConfig+0x338>)
 80145f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80145f2:	f003 0307 	and.w	r3, r3, #7
 80145f6:	2b05      	cmp	r3, #5
 80145f8:	d838      	bhi.n	801466c <UART_SetConfig+0x35c>
 80145fa:	a201      	add	r2, pc, #4	@ (adr r2, 8014600 <UART_SetConfig+0x2f0>)
 80145fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014600:	08014619 	.word	0x08014619
 8014604:	08014621 	.word	0x08014621
 8014608:	08014629 	.word	0x08014629
 801460c:	08014631 	.word	0x08014631
 8014610:	0801465d 	.word	0x0801465d
 8014614:	08014665 	.word	0x08014665
 8014618:	2300      	movs	r3, #0
 801461a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801461e:	e24e      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014620:	2304      	movs	r3, #4
 8014622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014626:	e24a      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014628:	2308      	movs	r3, #8
 801462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801462e:	e246      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014630:	2310      	movs	r3, #16
 8014632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014636:	e242      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014638:	cfff69f3 	.word	0xcfff69f3
 801463c:	58000c00 	.word	0x58000c00
 8014640:	11fff4ff 	.word	0x11fff4ff
 8014644:	40011000 	.word	0x40011000
 8014648:	58024400 	.word	0x58024400
 801464c:	40004400 	.word	0x40004400
 8014650:	40004800 	.word	0x40004800
 8014654:	40004c00 	.word	0x40004c00
 8014658:	40005000 	.word	0x40005000
 801465c:	2320      	movs	r3, #32
 801465e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014662:	e22c      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014664:	2340      	movs	r3, #64	@ 0x40
 8014666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801466a:	e228      	b.n	8014abe <UART_SetConfig+0x7ae>
 801466c:	2380      	movs	r3, #128	@ 0x80
 801466e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014672:	e224      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	4ab1      	ldr	r2, [pc, #708]	@ (8014940 <UART_SetConfig+0x630>)
 801467a:	4293      	cmp	r3, r2
 801467c:	d176      	bne.n	801476c <UART_SetConfig+0x45c>
 801467e:	4bb1      	ldr	r3, [pc, #708]	@ (8014944 <UART_SetConfig+0x634>)
 8014680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014686:	2b28      	cmp	r3, #40	@ 0x28
 8014688:	d86c      	bhi.n	8014764 <UART_SetConfig+0x454>
 801468a:	a201      	add	r2, pc, #4	@ (adr r2, 8014690 <UART_SetConfig+0x380>)
 801468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014690:	08014735 	.word	0x08014735
 8014694:	08014765 	.word	0x08014765
 8014698:	08014765 	.word	0x08014765
 801469c:	08014765 	.word	0x08014765
 80146a0:	08014765 	.word	0x08014765
 80146a4:	08014765 	.word	0x08014765
 80146a8:	08014765 	.word	0x08014765
 80146ac:	08014765 	.word	0x08014765
 80146b0:	0801473d 	.word	0x0801473d
 80146b4:	08014765 	.word	0x08014765
 80146b8:	08014765 	.word	0x08014765
 80146bc:	08014765 	.word	0x08014765
 80146c0:	08014765 	.word	0x08014765
 80146c4:	08014765 	.word	0x08014765
 80146c8:	08014765 	.word	0x08014765
 80146cc:	08014765 	.word	0x08014765
 80146d0:	08014745 	.word	0x08014745
 80146d4:	08014765 	.word	0x08014765
 80146d8:	08014765 	.word	0x08014765
 80146dc:	08014765 	.word	0x08014765
 80146e0:	08014765 	.word	0x08014765
 80146e4:	08014765 	.word	0x08014765
 80146e8:	08014765 	.word	0x08014765
 80146ec:	08014765 	.word	0x08014765
 80146f0:	0801474d 	.word	0x0801474d
 80146f4:	08014765 	.word	0x08014765
 80146f8:	08014765 	.word	0x08014765
 80146fc:	08014765 	.word	0x08014765
 8014700:	08014765 	.word	0x08014765
 8014704:	08014765 	.word	0x08014765
 8014708:	08014765 	.word	0x08014765
 801470c:	08014765 	.word	0x08014765
 8014710:	08014755 	.word	0x08014755
 8014714:	08014765 	.word	0x08014765
 8014718:	08014765 	.word	0x08014765
 801471c:	08014765 	.word	0x08014765
 8014720:	08014765 	.word	0x08014765
 8014724:	08014765 	.word	0x08014765
 8014728:	08014765 	.word	0x08014765
 801472c:	08014765 	.word	0x08014765
 8014730:	0801475d 	.word	0x0801475d
 8014734:	2301      	movs	r3, #1
 8014736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801473a:	e1c0      	b.n	8014abe <UART_SetConfig+0x7ae>
 801473c:	2304      	movs	r3, #4
 801473e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014742:	e1bc      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014744:	2308      	movs	r3, #8
 8014746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801474a:	e1b8      	b.n	8014abe <UART_SetConfig+0x7ae>
 801474c:	2310      	movs	r3, #16
 801474e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014752:	e1b4      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014754:	2320      	movs	r3, #32
 8014756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801475a:	e1b0      	b.n	8014abe <UART_SetConfig+0x7ae>
 801475c:	2340      	movs	r3, #64	@ 0x40
 801475e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014762:	e1ac      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014764:	2380      	movs	r3, #128	@ 0x80
 8014766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801476a:	e1a8      	b.n	8014abe <UART_SetConfig+0x7ae>
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	4a75      	ldr	r2, [pc, #468]	@ (8014948 <UART_SetConfig+0x638>)
 8014772:	4293      	cmp	r3, r2
 8014774:	d130      	bne.n	80147d8 <UART_SetConfig+0x4c8>
 8014776:	4b73      	ldr	r3, [pc, #460]	@ (8014944 <UART_SetConfig+0x634>)
 8014778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801477a:	f003 0307 	and.w	r3, r3, #7
 801477e:	2b05      	cmp	r3, #5
 8014780:	d826      	bhi.n	80147d0 <UART_SetConfig+0x4c0>
 8014782:	a201      	add	r2, pc, #4	@ (adr r2, 8014788 <UART_SetConfig+0x478>)
 8014784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014788:	080147a1 	.word	0x080147a1
 801478c:	080147a9 	.word	0x080147a9
 8014790:	080147b1 	.word	0x080147b1
 8014794:	080147b9 	.word	0x080147b9
 8014798:	080147c1 	.word	0x080147c1
 801479c:	080147c9 	.word	0x080147c9
 80147a0:	2300      	movs	r3, #0
 80147a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147a6:	e18a      	b.n	8014abe <UART_SetConfig+0x7ae>
 80147a8:	2304      	movs	r3, #4
 80147aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147ae:	e186      	b.n	8014abe <UART_SetConfig+0x7ae>
 80147b0:	2308      	movs	r3, #8
 80147b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147b6:	e182      	b.n	8014abe <UART_SetConfig+0x7ae>
 80147b8:	2310      	movs	r3, #16
 80147ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147be:	e17e      	b.n	8014abe <UART_SetConfig+0x7ae>
 80147c0:	2320      	movs	r3, #32
 80147c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147c6:	e17a      	b.n	8014abe <UART_SetConfig+0x7ae>
 80147c8:	2340      	movs	r3, #64	@ 0x40
 80147ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147ce:	e176      	b.n	8014abe <UART_SetConfig+0x7ae>
 80147d0:	2380      	movs	r3, #128	@ 0x80
 80147d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147d6:	e172      	b.n	8014abe <UART_SetConfig+0x7ae>
 80147d8:	697b      	ldr	r3, [r7, #20]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	4a5b      	ldr	r2, [pc, #364]	@ (801494c <UART_SetConfig+0x63c>)
 80147de:	4293      	cmp	r3, r2
 80147e0:	d130      	bne.n	8014844 <UART_SetConfig+0x534>
 80147e2:	4b58      	ldr	r3, [pc, #352]	@ (8014944 <UART_SetConfig+0x634>)
 80147e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80147e6:	f003 0307 	and.w	r3, r3, #7
 80147ea:	2b05      	cmp	r3, #5
 80147ec:	d826      	bhi.n	801483c <UART_SetConfig+0x52c>
 80147ee:	a201      	add	r2, pc, #4	@ (adr r2, 80147f4 <UART_SetConfig+0x4e4>)
 80147f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147f4:	0801480d 	.word	0x0801480d
 80147f8:	08014815 	.word	0x08014815
 80147fc:	0801481d 	.word	0x0801481d
 8014800:	08014825 	.word	0x08014825
 8014804:	0801482d 	.word	0x0801482d
 8014808:	08014835 	.word	0x08014835
 801480c:	2300      	movs	r3, #0
 801480e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014812:	e154      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014814:	2304      	movs	r3, #4
 8014816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801481a:	e150      	b.n	8014abe <UART_SetConfig+0x7ae>
 801481c:	2308      	movs	r3, #8
 801481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014822:	e14c      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014824:	2310      	movs	r3, #16
 8014826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801482a:	e148      	b.n	8014abe <UART_SetConfig+0x7ae>
 801482c:	2320      	movs	r3, #32
 801482e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014832:	e144      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014834:	2340      	movs	r3, #64	@ 0x40
 8014836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801483a:	e140      	b.n	8014abe <UART_SetConfig+0x7ae>
 801483c:	2380      	movs	r3, #128	@ 0x80
 801483e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014842:	e13c      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	4a41      	ldr	r2, [pc, #260]	@ (8014950 <UART_SetConfig+0x640>)
 801484a:	4293      	cmp	r3, r2
 801484c:	f040 8082 	bne.w	8014954 <UART_SetConfig+0x644>
 8014850:	4b3c      	ldr	r3, [pc, #240]	@ (8014944 <UART_SetConfig+0x634>)
 8014852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014854:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014858:	2b28      	cmp	r3, #40	@ 0x28
 801485a:	d86d      	bhi.n	8014938 <UART_SetConfig+0x628>
 801485c:	a201      	add	r2, pc, #4	@ (adr r2, 8014864 <UART_SetConfig+0x554>)
 801485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014862:	bf00      	nop
 8014864:	08014909 	.word	0x08014909
 8014868:	08014939 	.word	0x08014939
 801486c:	08014939 	.word	0x08014939
 8014870:	08014939 	.word	0x08014939
 8014874:	08014939 	.word	0x08014939
 8014878:	08014939 	.word	0x08014939
 801487c:	08014939 	.word	0x08014939
 8014880:	08014939 	.word	0x08014939
 8014884:	08014911 	.word	0x08014911
 8014888:	08014939 	.word	0x08014939
 801488c:	08014939 	.word	0x08014939
 8014890:	08014939 	.word	0x08014939
 8014894:	08014939 	.word	0x08014939
 8014898:	08014939 	.word	0x08014939
 801489c:	08014939 	.word	0x08014939
 80148a0:	08014939 	.word	0x08014939
 80148a4:	08014919 	.word	0x08014919
 80148a8:	08014939 	.word	0x08014939
 80148ac:	08014939 	.word	0x08014939
 80148b0:	08014939 	.word	0x08014939
 80148b4:	08014939 	.word	0x08014939
 80148b8:	08014939 	.word	0x08014939
 80148bc:	08014939 	.word	0x08014939
 80148c0:	08014939 	.word	0x08014939
 80148c4:	08014921 	.word	0x08014921
 80148c8:	08014939 	.word	0x08014939
 80148cc:	08014939 	.word	0x08014939
 80148d0:	08014939 	.word	0x08014939
 80148d4:	08014939 	.word	0x08014939
 80148d8:	08014939 	.word	0x08014939
 80148dc:	08014939 	.word	0x08014939
 80148e0:	08014939 	.word	0x08014939
 80148e4:	08014929 	.word	0x08014929
 80148e8:	08014939 	.word	0x08014939
 80148ec:	08014939 	.word	0x08014939
 80148f0:	08014939 	.word	0x08014939
 80148f4:	08014939 	.word	0x08014939
 80148f8:	08014939 	.word	0x08014939
 80148fc:	08014939 	.word	0x08014939
 8014900:	08014939 	.word	0x08014939
 8014904:	08014931 	.word	0x08014931
 8014908:	2301      	movs	r3, #1
 801490a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801490e:	e0d6      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014910:	2304      	movs	r3, #4
 8014912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014916:	e0d2      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014918:	2308      	movs	r3, #8
 801491a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801491e:	e0ce      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014920:	2310      	movs	r3, #16
 8014922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014926:	e0ca      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014928:	2320      	movs	r3, #32
 801492a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801492e:	e0c6      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014930:	2340      	movs	r3, #64	@ 0x40
 8014932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014936:	e0c2      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014938:	2380      	movs	r3, #128	@ 0x80
 801493a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801493e:	e0be      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014940:	40011400 	.word	0x40011400
 8014944:	58024400 	.word	0x58024400
 8014948:	40007800 	.word	0x40007800
 801494c:	40007c00 	.word	0x40007c00
 8014950:	40011800 	.word	0x40011800
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	4aad      	ldr	r2, [pc, #692]	@ (8014c10 <UART_SetConfig+0x900>)
 801495a:	4293      	cmp	r3, r2
 801495c:	d176      	bne.n	8014a4c <UART_SetConfig+0x73c>
 801495e:	4bad      	ldr	r3, [pc, #692]	@ (8014c14 <UART_SetConfig+0x904>)
 8014960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014966:	2b28      	cmp	r3, #40	@ 0x28
 8014968:	d86c      	bhi.n	8014a44 <UART_SetConfig+0x734>
 801496a:	a201      	add	r2, pc, #4	@ (adr r2, 8014970 <UART_SetConfig+0x660>)
 801496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014970:	08014a15 	.word	0x08014a15
 8014974:	08014a45 	.word	0x08014a45
 8014978:	08014a45 	.word	0x08014a45
 801497c:	08014a45 	.word	0x08014a45
 8014980:	08014a45 	.word	0x08014a45
 8014984:	08014a45 	.word	0x08014a45
 8014988:	08014a45 	.word	0x08014a45
 801498c:	08014a45 	.word	0x08014a45
 8014990:	08014a1d 	.word	0x08014a1d
 8014994:	08014a45 	.word	0x08014a45
 8014998:	08014a45 	.word	0x08014a45
 801499c:	08014a45 	.word	0x08014a45
 80149a0:	08014a45 	.word	0x08014a45
 80149a4:	08014a45 	.word	0x08014a45
 80149a8:	08014a45 	.word	0x08014a45
 80149ac:	08014a45 	.word	0x08014a45
 80149b0:	08014a25 	.word	0x08014a25
 80149b4:	08014a45 	.word	0x08014a45
 80149b8:	08014a45 	.word	0x08014a45
 80149bc:	08014a45 	.word	0x08014a45
 80149c0:	08014a45 	.word	0x08014a45
 80149c4:	08014a45 	.word	0x08014a45
 80149c8:	08014a45 	.word	0x08014a45
 80149cc:	08014a45 	.word	0x08014a45
 80149d0:	08014a2d 	.word	0x08014a2d
 80149d4:	08014a45 	.word	0x08014a45
 80149d8:	08014a45 	.word	0x08014a45
 80149dc:	08014a45 	.word	0x08014a45
 80149e0:	08014a45 	.word	0x08014a45
 80149e4:	08014a45 	.word	0x08014a45
 80149e8:	08014a45 	.word	0x08014a45
 80149ec:	08014a45 	.word	0x08014a45
 80149f0:	08014a35 	.word	0x08014a35
 80149f4:	08014a45 	.word	0x08014a45
 80149f8:	08014a45 	.word	0x08014a45
 80149fc:	08014a45 	.word	0x08014a45
 8014a00:	08014a45 	.word	0x08014a45
 8014a04:	08014a45 	.word	0x08014a45
 8014a08:	08014a45 	.word	0x08014a45
 8014a0c:	08014a45 	.word	0x08014a45
 8014a10:	08014a3d 	.word	0x08014a3d
 8014a14:	2301      	movs	r3, #1
 8014a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a1a:	e050      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a1c:	2304      	movs	r3, #4
 8014a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a22:	e04c      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a24:	2308      	movs	r3, #8
 8014a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a2a:	e048      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a2c:	2310      	movs	r3, #16
 8014a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a32:	e044      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a34:	2320      	movs	r3, #32
 8014a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a3a:	e040      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a3c:	2340      	movs	r3, #64	@ 0x40
 8014a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a42:	e03c      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a44:	2380      	movs	r3, #128	@ 0x80
 8014a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a4a:	e038      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	4a71      	ldr	r2, [pc, #452]	@ (8014c18 <UART_SetConfig+0x908>)
 8014a52:	4293      	cmp	r3, r2
 8014a54:	d130      	bne.n	8014ab8 <UART_SetConfig+0x7a8>
 8014a56:	4b6f      	ldr	r3, [pc, #444]	@ (8014c14 <UART_SetConfig+0x904>)
 8014a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014a5a:	f003 0307 	and.w	r3, r3, #7
 8014a5e:	2b05      	cmp	r3, #5
 8014a60:	d826      	bhi.n	8014ab0 <UART_SetConfig+0x7a0>
 8014a62:	a201      	add	r2, pc, #4	@ (adr r2, 8014a68 <UART_SetConfig+0x758>)
 8014a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a68:	08014a81 	.word	0x08014a81
 8014a6c:	08014a89 	.word	0x08014a89
 8014a70:	08014a91 	.word	0x08014a91
 8014a74:	08014a99 	.word	0x08014a99
 8014a78:	08014aa1 	.word	0x08014aa1
 8014a7c:	08014aa9 	.word	0x08014aa9
 8014a80:	2302      	movs	r3, #2
 8014a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a86:	e01a      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a88:	2304      	movs	r3, #4
 8014a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a8e:	e016      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a90:	2308      	movs	r3, #8
 8014a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a96:	e012      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014a98:	2310      	movs	r3, #16
 8014a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a9e:	e00e      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014aa0:	2320      	movs	r3, #32
 8014aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014aa6:	e00a      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014aa8:	2340      	movs	r3, #64	@ 0x40
 8014aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014aae:	e006      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014ab0:	2380      	movs	r3, #128	@ 0x80
 8014ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014ab6:	e002      	b.n	8014abe <UART_SetConfig+0x7ae>
 8014ab8:	2380      	movs	r3, #128	@ 0x80
 8014aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	4a55      	ldr	r2, [pc, #340]	@ (8014c18 <UART_SetConfig+0x908>)
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	f040 80f8 	bne.w	8014cba <UART_SetConfig+0x9aa>
 8014aca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014ace:	2b20      	cmp	r3, #32
 8014ad0:	dc46      	bgt.n	8014b60 <UART_SetConfig+0x850>
 8014ad2:	2b02      	cmp	r3, #2
 8014ad4:	db75      	blt.n	8014bc2 <UART_SetConfig+0x8b2>
 8014ad6:	3b02      	subs	r3, #2
 8014ad8:	2b1e      	cmp	r3, #30
 8014ada:	d872      	bhi.n	8014bc2 <UART_SetConfig+0x8b2>
 8014adc:	a201      	add	r2, pc, #4	@ (adr r2, 8014ae4 <UART_SetConfig+0x7d4>)
 8014ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ae2:	bf00      	nop
 8014ae4:	08014b67 	.word	0x08014b67
 8014ae8:	08014bc3 	.word	0x08014bc3
 8014aec:	08014b6f 	.word	0x08014b6f
 8014af0:	08014bc3 	.word	0x08014bc3
 8014af4:	08014bc3 	.word	0x08014bc3
 8014af8:	08014bc3 	.word	0x08014bc3
 8014afc:	08014b7f 	.word	0x08014b7f
 8014b00:	08014bc3 	.word	0x08014bc3
 8014b04:	08014bc3 	.word	0x08014bc3
 8014b08:	08014bc3 	.word	0x08014bc3
 8014b0c:	08014bc3 	.word	0x08014bc3
 8014b10:	08014bc3 	.word	0x08014bc3
 8014b14:	08014bc3 	.word	0x08014bc3
 8014b18:	08014bc3 	.word	0x08014bc3
 8014b1c:	08014b8f 	.word	0x08014b8f
 8014b20:	08014bc3 	.word	0x08014bc3
 8014b24:	08014bc3 	.word	0x08014bc3
 8014b28:	08014bc3 	.word	0x08014bc3
 8014b2c:	08014bc3 	.word	0x08014bc3
 8014b30:	08014bc3 	.word	0x08014bc3
 8014b34:	08014bc3 	.word	0x08014bc3
 8014b38:	08014bc3 	.word	0x08014bc3
 8014b3c:	08014bc3 	.word	0x08014bc3
 8014b40:	08014bc3 	.word	0x08014bc3
 8014b44:	08014bc3 	.word	0x08014bc3
 8014b48:	08014bc3 	.word	0x08014bc3
 8014b4c:	08014bc3 	.word	0x08014bc3
 8014b50:	08014bc3 	.word	0x08014bc3
 8014b54:	08014bc3 	.word	0x08014bc3
 8014b58:	08014bc3 	.word	0x08014bc3
 8014b5c:	08014bb5 	.word	0x08014bb5
 8014b60:	2b40      	cmp	r3, #64	@ 0x40
 8014b62:	d02a      	beq.n	8014bba <UART_SetConfig+0x8aa>
 8014b64:	e02d      	b.n	8014bc2 <UART_SetConfig+0x8b2>
 8014b66:	f7fa ff45 	bl	800f9f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8014b6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014b6c:	e02f      	b.n	8014bce <UART_SetConfig+0x8be>
 8014b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7fa ff54 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 8014b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b7c:	e027      	b.n	8014bce <UART_SetConfig+0x8be>
 8014b7e:	f107 0318 	add.w	r3, r7, #24
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fb f8a0 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b8c:	e01f      	b.n	8014bce <UART_SetConfig+0x8be>
 8014b8e:	4b21      	ldr	r3, [pc, #132]	@ (8014c14 <UART_SetConfig+0x904>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f003 0320 	and.w	r3, r3, #32
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d009      	beq.n	8014bae <UART_SetConfig+0x89e>
 8014b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8014c14 <UART_SetConfig+0x904>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	08db      	lsrs	r3, r3, #3
 8014ba0:	f003 0303 	and.w	r3, r3, #3
 8014ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8014c1c <UART_SetConfig+0x90c>)
 8014ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8014baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bac:	e00f      	b.n	8014bce <UART_SetConfig+0x8be>
 8014bae:	4b1b      	ldr	r3, [pc, #108]	@ (8014c1c <UART_SetConfig+0x90c>)
 8014bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bb2:	e00c      	b.n	8014bce <UART_SetConfig+0x8be>
 8014bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8014c20 <UART_SetConfig+0x910>)
 8014bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bb8:	e009      	b.n	8014bce <UART_SetConfig+0x8be>
 8014bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bc0:	e005      	b.n	8014bce <UART_SetConfig+0x8be>
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bc6:	2301      	movs	r3, #1
 8014bc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014bcc:	bf00      	nop
 8014bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	f000 81ee 	beq.w	8014fb2 <UART_SetConfig+0xca2>
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bda:	4a12      	ldr	r2, [pc, #72]	@ (8014c24 <UART_SetConfig+0x914>)
 8014bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014be0:	461a      	mov	r2, r3
 8014be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8014be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	685a      	ldr	r2, [r3, #4]
 8014bee:	4613      	mov	r3, r2
 8014bf0:	005b      	lsls	r3, r3, #1
 8014bf2:	4413      	add	r3, r2
 8014bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d305      	bcc.n	8014c06 <UART_SetConfig+0x8f6>
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	685b      	ldr	r3, [r3, #4]
 8014bfe:	031b      	lsls	r3, r3, #12
 8014c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d910      	bls.n	8014c28 <UART_SetConfig+0x918>
 8014c06:	2301      	movs	r3, #1
 8014c08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014c0c:	e1d1      	b.n	8014fb2 <UART_SetConfig+0xca2>
 8014c0e:	bf00      	nop
 8014c10:	40011c00 	.word	0x40011c00
 8014c14:	58024400 	.word	0x58024400
 8014c18:	58000c00 	.word	0x58000c00
 8014c1c:	03d09000 	.word	0x03d09000
 8014c20:	003d0900 	.word	0x003d0900
 8014c24:	0801c2b4 	.word	0x0801c2b4
 8014c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	60bb      	str	r3, [r7, #8]
 8014c2e:	60fa      	str	r2, [r7, #12]
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c34:	4ac0      	ldr	r2, [pc, #768]	@ (8014f38 <UART_SetConfig+0xc28>)
 8014c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	603b      	str	r3, [r7, #0]
 8014c40:	607a      	str	r2, [r7, #4]
 8014c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014c46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014c4a:	f7eb fd75 	bl	8000738 <__aeabi_uldivmod>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	460b      	mov	r3, r1
 8014c52:	4610      	mov	r0, r2
 8014c54:	4619      	mov	r1, r3
 8014c56:	f04f 0200 	mov.w	r2, #0
 8014c5a:	f04f 0300 	mov.w	r3, #0
 8014c5e:	020b      	lsls	r3, r1, #8
 8014c60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014c64:	0202      	lsls	r2, r0, #8
 8014c66:	6979      	ldr	r1, [r7, #20]
 8014c68:	6849      	ldr	r1, [r1, #4]
 8014c6a:	0849      	lsrs	r1, r1, #1
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	460c      	mov	r4, r1
 8014c70:	4605      	mov	r5, r0
 8014c72:	eb12 0804 	adds.w	r8, r2, r4
 8014c76:	eb43 0905 	adc.w	r9, r3, r5
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	469a      	mov	sl, r3
 8014c82:	4693      	mov	fp, r2
 8014c84:	4652      	mov	r2, sl
 8014c86:	465b      	mov	r3, fp
 8014c88:	4640      	mov	r0, r8
 8014c8a:	4649      	mov	r1, r9
 8014c8c:	f7eb fd54 	bl	8000738 <__aeabi_uldivmod>
 8014c90:	4602      	mov	r2, r0
 8014c92:	460b      	mov	r3, r1
 8014c94:	4613      	mov	r3, r2
 8014c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014c9e:	d308      	bcc.n	8014cb2 <UART_SetConfig+0x9a2>
 8014ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014ca6:	d204      	bcs.n	8014cb2 <UART_SetConfig+0x9a2>
 8014ca8:	697b      	ldr	r3, [r7, #20]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014cae:	60da      	str	r2, [r3, #12]
 8014cb0:	e17f      	b.n	8014fb2 <UART_SetConfig+0xca2>
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014cb8:	e17b      	b.n	8014fb2 <UART_SetConfig+0xca2>
 8014cba:	697b      	ldr	r3, [r7, #20]
 8014cbc:	69db      	ldr	r3, [r3, #28]
 8014cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014cc2:	f040 80bd 	bne.w	8014e40 <UART_SetConfig+0xb30>
 8014cc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014cca:	2b20      	cmp	r3, #32
 8014ccc:	dc48      	bgt.n	8014d60 <UART_SetConfig+0xa50>
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	db7b      	blt.n	8014dca <UART_SetConfig+0xaba>
 8014cd2:	2b20      	cmp	r3, #32
 8014cd4:	d879      	bhi.n	8014dca <UART_SetConfig+0xaba>
 8014cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8014cdc <UART_SetConfig+0x9cc>)
 8014cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cdc:	08014d67 	.word	0x08014d67
 8014ce0:	08014d6f 	.word	0x08014d6f
 8014ce4:	08014dcb 	.word	0x08014dcb
 8014ce8:	08014dcb 	.word	0x08014dcb
 8014cec:	08014d77 	.word	0x08014d77
 8014cf0:	08014dcb 	.word	0x08014dcb
 8014cf4:	08014dcb 	.word	0x08014dcb
 8014cf8:	08014dcb 	.word	0x08014dcb
 8014cfc:	08014d87 	.word	0x08014d87
 8014d00:	08014dcb 	.word	0x08014dcb
 8014d04:	08014dcb 	.word	0x08014dcb
 8014d08:	08014dcb 	.word	0x08014dcb
 8014d0c:	08014dcb 	.word	0x08014dcb
 8014d10:	08014dcb 	.word	0x08014dcb
 8014d14:	08014dcb 	.word	0x08014dcb
 8014d18:	08014dcb 	.word	0x08014dcb
 8014d1c:	08014d97 	.word	0x08014d97
 8014d20:	08014dcb 	.word	0x08014dcb
 8014d24:	08014dcb 	.word	0x08014dcb
 8014d28:	08014dcb 	.word	0x08014dcb
 8014d2c:	08014dcb 	.word	0x08014dcb
 8014d30:	08014dcb 	.word	0x08014dcb
 8014d34:	08014dcb 	.word	0x08014dcb
 8014d38:	08014dcb 	.word	0x08014dcb
 8014d3c:	08014dcb 	.word	0x08014dcb
 8014d40:	08014dcb 	.word	0x08014dcb
 8014d44:	08014dcb 	.word	0x08014dcb
 8014d48:	08014dcb 	.word	0x08014dcb
 8014d4c:	08014dcb 	.word	0x08014dcb
 8014d50:	08014dcb 	.word	0x08014dcb
 8014d54:	08014dcb 	.word	0x08014dcb
 8014d58:	08014dcb 	.word	0x08014dcb
 8014d5c:	08014dbd 	.word	0x08014dbd
 8014d60:	2b40      	cmp	r3, #64	@ 0x40
 8014d62:	d02e      	beq.n	8014dc2 <UART_SetConfig+0xab2>
 8014d64:	e031      	b.n	8014dca <UART_SetConfig+0xaba>
 8014d66:	f7f8 ff8b 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 8014d6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014d6c:	e033      	b.n	8014dd6 <UART_SetConfig+0xac6>
 8014d6e:	f7f8 ff9d 	bl	800dcac <HAL_RCC_GetPCLK2Freq>
 8014d72:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014d74:	e02f      	b.n	8014dd6 <UART_SetConfig+0xac6>
 8014d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7fa fe50 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 8014d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d84:	e027      	b.n	8014dd6 <UART_SetConfig+0xac6>
 8014d86:	f107 0318 	add.w	r3, r7, #24
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fa ff9c 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 8014d90:	69fb      	ldr	r3, [r7, #28]
 8014d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d94:	e01f      	b.n	8014dd6 <UART_SetConfig+0xac6>
 8014d96:	4b69      	ldr	r3, [pc, #420]	@ (8014f3c <UART_SetConfig+0xc2c>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	f003 0320 	and.w	r3, r3, #32
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d009      	beq.n	8014db6 <UART_SetConfig+0xaa6>
 8014da2:	4b66      	ldr	r3, [pc, #408]	@ (8014f3c <UART_SetConfig+0xc2c>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	08db      	lsrs	r3, r3, #3
 8014da8:	f003 0303 	and.w	r3, r3, #3
 8014dac:	4a64      	ldr	r2, [pc, #400]	@ (8014f40 <UART_SetConfig+0xc30>)
 8014dae:	fa22 f303 	lsr.w	r3, r2, r3
 8014db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014db4:	e00f      	b.n	8014dd6 <UART_SetConfig+0xac6>
 8014db6:	4b62      	ldr	r3, [pc, #392]	@ (8014f40 <UART_SetConfig+0xc30>)
 8014db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014dba:	e00c      	b.n	8014dd6 <UART_SetConfig+0xac6>
 8014dbc:	4b61      	ldr	r3, [pc, #388]	@ (8014f44 <UART_SetConfig+0xc34>)
 8014dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014dc0:	e009      	b.n	8014dd6 <UART_SetConfig+0xac6>
 8014dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014dc8:	e005      	b.n	8014dd6 <UART_SetConfig+0xac6>
 8014dca:	2300      	movs	r3, #0
 8014dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014dce:	2301      	movs	r3, #1
 8014dd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014dd4:	bf00      	nop
 8014dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	f000 80ea 	beq.w	8014fb2 <UART_SetConfig+0xca2>
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014de2:	4a55      	ldr	r2, [pc, #340]	@ (8014f38 <UART_SetConfig+0xc28>)
 8014de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014de8:	461a      	mov	r2, r3
 8014dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8014df0:	005a      	lsls	r2, r3, #1
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	685b      	ldr	r3, [r3, #4]
 8014df6:	085b      	lsrs	r3, r3, #1
 8014df8:	441a      	add	r2, r3
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e06:	2b0f      	cmp	r3, #15
 8014e08:	d916      	bls.n	8014e38 <UART_SetConfig+0xb28>
 8014e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014e10:	d212      	bcs.n	8014e38 <UART_SetConfig+0xb28>
 8014e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e14:	b29b      	uxth	r3, r3
 8014e16:	f023 030f 	bic.w	r3, r3, #15
 8014e1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e1e:	085b      	lsrs	r3, r3, #1
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	f003 0307 	and.w	r3, r3, #7
 8014e26:	b29a      	uxth	r2, r3
 8014e28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014e2a:	4313      	orrs	r3, r2
 8014e2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014e34:	60da      	str	r2, [r3, #12]
 8014e36:	e0bc      	b.n	8014fb2 <UART_SetConfig+0xca2>
 8014e38:	2301      	movs	r3, #1
 8014e3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014e3e:	e0b8      	b.n	8014fb2 <UART_SetConfig+0xca2>
 8014e40:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014e44:	2b20      	cmp	r3, #32
 8014e46:	dc4b      	bgt.n	8014ee0 <UART_SetConfig+0xbd0>
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	f2c0 8087 	blt.w	8014f5c <UART_SetConfig+0xc4c>
 8014e4e:	2b20      	cmp	r3, #32
 8014e50:	f200 8084 	bhi.w	8014f5c <UART_SetConfig+0xc4c>
 8014e54:	a201      	add	r2, pc, #4	@ (adr r2, 8014e5c <UART_SetConfig+0xb4c>)
 8014e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e5a:	bf00      	nop
 8014e5c:	08014ee7 	.word	0x08014ee7
 8014e60:	08014eef 	.word	0x08014eef
 8014e64:	08014f5d 	.word	0x08014f5d
 8014e68:	08014f5d 	.word	0x08014f5d
 8014e6c:	08014ef7 	.word	0x08014ef7
 8014e70:	08014f5d 	.word	0x08014f5d
 8014e74:	08014f5d 	.word	0x08014f5d
 8014e78:	08014f5d 	.word	0x08014f5d
 8014e7c:	08014f07 	.word	0x08014f07
 8014e80:	08014f5d 	.word	0x08014f5d
 8014e84:	08014f5d 	.word	0x08014f5d
 8014e88:	08014f5d 	.word	0x08014f5d
 8014e8c:	08014f5d 	.word	0x08014f5d
 8014e90:	08014f5d 	.word	0x08014f5d
 8014e94:	08014f5d 	.word	0x08014f5d
 8014e98:	08014f5d 	.word	0x08014f5d
 8014e9c:	08014f17 	.word	0x08014f17
 8014ea0:	08014f5d 	.word	0x08014f5d
 8014ea4:	08014f5d 	.word	0x08014f5d
 8014ea8:	08014f5d 	.word	0x08014f5d
 8014eac:	08014f5d 	.word	0x08014f5d
 8014eb0:	08014f5d 	.word	0x08014f5d
 8014eb4:	08014f5d 	.word	0x08014f5d
 8014eb8:	08014f5d 	.word	0x08014f5d
 8014ebc:	08014f5d 	.word	0x08014f5d
 8014ec0:	08014f5d 	.word	0x08014f5d
 8014ec4:	08014f5d 	.word	0x08014f5d
 8014ec8:	08014f5d 	.word	0x08014f5d
 8014ecc:	08014f5d 	.word	0x08014f5d
 8014ed0:	08014f5d 	.word	0x08014f5d
 8014ed4:	08014f5d 	.word	0x08014f5d
 8014ed8:	08014f5d 	.word	0x08014f5d
 8014edc:	08014f4f 	.word	0x08014f4f
 8014ee0:	2b40      	cmp	r3, #64	@ 0x40
 8014ee2:	d037      	beq.n	8014f54 <UART_SetConfig+0xc44>
 8014ee4:	e03a      	b.n	8014f5c <UART_SetConfig+0xc4c>
 8014ee6:	f7f8 fecb 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 8014eea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014eec:	e03c      	b.n	8014f68 <UART_SetConfig+0xc58>
 8014eee:	f7f8 fedd 	bl	800dcac <HAL_RCC_GetPCLK2Freq>
 8014ef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014ef4:	e038      	b.n	8014f68 <UART_SetConfig+0xc58>
 8014ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014efa:	4618      	mov	r0, r3
 8014efc:	f7fa fd90 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 8014f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f04:	e030      	b.n	8014f68 <UART_SetConfig+0xc58>
 8014f06:	f107 0318 	add.w	r3, r7, #24
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7fa fedc 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f14:	e028      	b.n	8014f68 <UART_SetConfig+0xc58>
 8014f16:	4b09      	ldr	r3, [pc, #36]	@ (8014f3c <UART_SetConfig+0xc2c>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	f003 0320 	and.w	r3, r3, #32
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d012      	beq.n	8014f48 <UART_SetConfig+0xc38>
 8014f22:	4b06      	ldr	r3, [pc, #24]	@ (8014f3c <UART_SetConfig+0xc2c>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	08db      	lsrs	r3, r3, #3
 8014f28:	f003 0303 	and.w	r3, r3, #3
 8014f2c:	4a04      	ldr	r2, [pc, #16]	@ (8014f40 <UART_SetConfig+0xc30>)
 8014f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8014f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f34:	e018      	b.n	8014f68 <UART_SetConfig+0xc58>
 8014f36:	bf00      	nop
 8014f38:	0801c2b4 	.word	0x0801c2b4
 8014f3c:	58024400 	.word	0x58024400
 8014f40:	03d09000 	.word	0x03d09000
 8014f44:	003d0900 	.word	0x003d0900
 8014f48:	4b24      	ldr	r3, [pc, #144]	@ (8014fdc <UART_SetConfig+0xccc>)
 8014f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f4c:	e00c      	b.n	8014f68 <UART_SetConfig+0xc58>
 8014f4e:	4b24      	ldr	r3, [pc, #144]	@ (8014fe0 <UART_SetConfig+0xcd0>)
 8014f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f52:	e009      	b.n	8014f68 <UART_SetConfig+0xc58>
 8014f54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f5a:	e005      	b.n	8014f68 <UART_SetConfig+0xc58>
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f60:	2301      	movs	r3, #1
 8014f62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014f66:	bf00      	nop
 8014f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d021      	beq.n	8014fb2 <UART_SetConfig+0xca2>
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f72:	4a1c      	ldr	r2, [pc, #112]	@ (8014fe4 <UART_SetConfig+0xcd4>)
 8014f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f78:	461a      	mov	r2, r3
 8014f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	085b      	lsrs	r3, r3, #1
 8014f86:	441a      	add	r2, r3
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f94:	2b0f      	cmp	r3, #15
 8014f96:	d909      	bls.n	8014fac <UART_SetConfig+0xc9c>
 8014f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f9e:	d205      	bcs.n	8014fac <UART_SetConfig+0xc9c>
 8014fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fa2:	b29a      	uxth	r2, r3
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	60da      	str	r2, [r3, #12]
 8014faa:	e002      	b.n	8014fb2 <UART_SetConfig+0xca2>
 8014fac:	2301      	movs	r3, #1
 8014fae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	2201      	movs	r2, #1
 8014fb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	675a      	str	r2, [r3, #116]	@ 0x74
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	679a      	str	r2, [r3, #120]	@ 0x78
 8014fce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	3748      	adds	r7, #72	@ 0x48
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014fdc:	03d09000 	.word	0x03d09000
 8014fe0:	003d0900 	.word	0x003d0900
 8014fe4:	0801c2b4 	.word	0x0801c2b4

08014fe8 <UART_AdvFeatureConfig>:
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ff4:	f003 0308 	and.w	r3, r3, #8
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d00a      	beq.n	8015012 <UART_AdvFeatureConfig+0x2a>
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	685b      	ldr	r3, [r3, #4]
 8015002:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	430a      	orrs	r2, r1
 8015010:	605a      	str	r2, [r3, #4]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015016:	f003 0301 	and.w	r3, r3, #1
 801501a:	2b00      	cmp	r3, #0
 801501c:	d00a      	beq.n	8015034 <UART_AdvFeatureConfig+0x4c>
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	430a      	orrs	r2, r1
 8015032:	605a      	str	r2, [r3, #4]
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015038:	f003 0302 	and.w	r3, r3, #2
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00a      	beq.n	8015056 <UART_AdvFeatureConfig+0x6e>
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	430a      	orrs	r2, r1
 8015054:	605a      	str	r2, [r3, #4]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801505a:	f003 0304 	and.w	r3, r3, #4
 801505e:	2b00      	cmp	r3, #0
 8015060:	d00a      	beq.n	8015078 <UART_AdvFeatureConfig+0x90>
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	430a      	orrs	r2, r1
 8015076:	605a      	str	r2, [r3, #4]
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801507c:	f003 0310 	and.w	r3, r3, #16
 8015080:	2b00      	cmp	r3, #0
 8015082:	d00a      	beq.n	801509a <UART_AdvFeatureConfig+0xb2>
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	689b      	ldr	r3, [r3, #8]
 801508a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	430a      	orrs	r2, r1
 8015098:	609a      	str	r2, [r3, #8]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801509e:	f003 0320 	and.w	r3, r3, #32
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d00a      	beq.n	80150bc <UART_AdvFeatureConfig+0xd4>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	689b      	ldr	r3, [r3, #8]
 80150ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	430a      	orrs	r2, r1
 80150ba:	609a      	str	r2, [r3, #8]
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80150c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d01a      	beq.n	80150fe <UART_AdvFeatureConfig+0x116>
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	685b      	ldr	r3, [r3, #4]
 80150ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	430a      	orrs	r2, r1
 80150dc:	605a      	str	r2, [r3, #4]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80150e6:	d10a      	bne.n	80150fe <UART_AdvFeatureConfig+0x116>
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	430a      	orrs	r2, r1
 80150fc:	605a      	str	r2, [r3, #4]
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015106:	2b00      	cmp	r3, #0
 8015108:	d00a      	beq.n	8015120 <UART_AdvFeatureConfig+0x138>
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	430a      	orrs	r2, r1
 801511e:	605a      	str	r2, [r3, #4]
 8015120:	bf00      	nop
 8015122:	370c      	adds	r7, #12
 8015124:	46bd      	mov	sp, r7
 8015126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512a:	4770      	bx	lr

0801512c <UART_CheckIdleState>:
 801512c:	b580      	push	{r7, lr}
 801512e:	b098      	sub	sp, #96	@ 0x60
 8015130:	af02      	add	r7, sp, #8
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2200      	movs	r2, #0
 8015138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801513c:	f7f3 fcda 	bl	8008af4 <HAL_GetTick>
 8015140:	6578      	str	r0, [r7, #84]	@ 0x54
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	f003 0308 	and.w	r3, r3, #8
 801514c:	2b08      	cmp	r3, #8
 801514e:	d12f      	bne.n	80151b0 <UART_CheckIdleState+0x84>
 8015150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015154:	9300      	str	r3, [sp, #0]
 8015156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015158:	2200      	movs	r2, #0
 801515a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f000 f88e 	bl	8015280 <UART_WaitOnFlagUntilTimeout>
 8015164:	4603      	mov	r3, r0
 8015166:	2b00      	cmp	r3, #0
 8015168:	d022      	beq.n	80151b0 <UART_CheckIdleState+0x84>
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015172:	e853 3f00 	ldrex	r3, [r3]
 8015176:	637b      	str	r3, [r7, #52]	@ 0x34
 8015178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801517a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801517e:	653b      	str	r3, [r7, #80]	@ 0x50
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	461a      	mov	r2, r3
 8015186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015188:	647b      	str	r3, [r7, #68]	@ 0x44
 801518a:	643a      	str	r2, [r7, #64]	@ 0x40
 801518c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801518e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015190:	e841 2300 	strex	r3, r2, [r1]
 8015194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015198:	2b00      	cmp	r3, #0
 801519a:	d1e6      	bne.n	801516a <UART_CheckIdleState+0x3e>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2220      	movs	r2, #32
 80151a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2200      	movs	r2, #0
 80151a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80151ac:	2303      	movs	r3, #3
 80151ae:	e063      	b.n	8015278 <UART_CheckIdleState+0x14c>
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	f003 0304 	and.w	r3, r3, #4
 80151ba:	2b04      	cmp	r3, #4
 80151bc:	d149      	bne.n	8015252 <UART_CheckIdleState+0x126>
 80151be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80151c2:	9300      	str	r3, [sp, #0]
 80151c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80151c6:	2200      	movs	r2, #0
 80151c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f000 f857 	bl	8015280 <UART_WaitOnFlagUntilTimeout>
 80151d2:	4603      	mov	r3, r0
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d03c      	beq.n	8015252 <UART_CheckIdleState+0x126>
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80151de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e0:	e853 3f00 	ldrex	r3, [r3]
 80151e4:	623b      	str	r3, [r7, #32]
 80151e6:	6a3b      	ldr	r3, [r7, #32]
 80151e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80151ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	461a      	mov	r2, r3
 80151f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80151f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80151f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80151fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80151fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80151fe:	e841 2300 	strex	r3, r2, [r1]
 8015202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015206:	2b00      	cmp	r3, #0
 8015208:	d1e6      	bne.n	80151d8 <UART_CheckIdleState+0xac>
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	3308      	adds	r3, #8
 8015210:	613b      	str	r3, [r7, #16]
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	e853 3f00 	ldrex	r3, [r3]
 8015218:	60fb      	str	r3, [r7, #12]
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	f023 0301 	bic.w	r3, r3, #1
 8015220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	3308      	adds	r3, #8
 8015228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801522a:	61fa      	str	r2, [r7, #28]
 801522c:	61bb      	str	r3, [r7, #24]
 801522e:	69b9      	ldr	r1, [r7, #24]
 8015230:	69fa      	ldr	r2, [r7, #28]
 8015232:	e841 2300 	strex	r3, r2, [r1]
 8015236:	617b      	str	r3, [r7, #20]
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d1e5      	bne.n	801520a <UART_CheckIdleState+0xde>
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2220      	movs	r2, #32
 8015242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	2200      	movs	r2, #0
 801524a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801524e:	2303      	movs	r3, #3
 8015250:	e012      	b.n	8015278 <UART_CheckIdleState+0x14c>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2220      	movs	r2, #32
 8015256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2220      	movs	r2, #32
 801525e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2200      	movs	r2, #0
 8015266:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2200      	movs	r2, #0
 801526c:	671a      	str	r2, [r3, #112]	@ 0x70
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	2200      	movs	r2, #0
 8015272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8015276:	2300      	movs	r3, #0
 8015278:	4618      	mov	r0, r3
 801527a:	3758      	adds	r7, #88	@ 0x58
 801527c:	46bd      	mov	sp, r7
 801527e:	bd80      	pop	{r7, pc}

08015280 <UART_WaitOnFlagUntilTimeout>:
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	60f8      	str	r0, [r7, #12]
 8015288:	60b9      	str	r1, [r7, #8]
 801528a:	603b      	str	r3, [r7, #0]
 801528c:	4613      	mov	r3, r2
 801528e:	71fb      	strb	r3, [r7, #7]
 8015290:	e04f      	b.n	8015332 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015292:	69bb      	ldr	r3, [r7, #24]
 8015294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015298:	d04b      	beq.n	8015332 <UART_WaitOnFlagUntilTimeout+0xb2>
 801529a:	f7f3 fc2b 	bl	8008af4 <HAL_GetTick>
 801529e:	4602      	mov	r2, r0
 80152a0:	683b      	ldr	r3, [r7, #0]
 80152a2:	1ad3      	subs	r3, r2, r3
 80152a4:	69ba      	ldr	r2, [r7, #24]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d302      	bcc.n	80152b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80152aa:	69bb      	ldr	r3, [r7, #24]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d101      	bne.n	80152b4 <UART_WaitOnFlagUntilTimeout+0x34>
 80152b0:	2303      	movs	r3, #3
 80152b2:	e04e      	b.n	8015352 <UART_WaitOnFlagUntilTimeout+0xd2>
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	f003 0304 	and.w	r3, r3, #4
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d037      	beq.n	8015332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	2b80      	cmp	r3, #128	@ 0x80
 80152c6:	d034      	beq.n	8015332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	2b40      	cmp	r3, #64	@ 0x40
 80152cc:	d031      	beq.n	8015332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	69db      	ldr	r3, [r3, #28]
 80152d4:	f003 0308 	and.w	r3, r3, #8
 80152d8:	2b08      	cmp	r3, #8
 80152da:	d110      	bne.n	80152fe <UART_WaitOnFlagUntilTimeout+0x7e>
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	2208      	movs	r2, #8
 80152e2:	621a      	str	r2, [r3, #32]
 80152e4:	68f8      	ldr	r0, [r7, #12]
 80152e6:	f000 f839 	bl	801535c <UART_EndRxTransfer>
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	2208      	movs	r2, #8
 80152ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2200      	movs	r2, #0
 80152f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80152fa:	2301      	movs	r3, #1
 80152fc:	e029      	b.n	8015352 <UART_WaitOnFlagUntilTimeout+0xd2>
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	69db      	ldr	r3, [r3, #28]
 8015304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801530c:	d111      	bne.n	8015332 <UART_WaitOnFlagUntilTimeout+0xb2>
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015316:	621a      	str	r2, [r3, #32]
 8015318:	68f8      	ldr	r0, [r7, #12]
 801531a:	f000 f81f 	bl	801535c <UART_EndRxTransfer>
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	2220      	movs	r2, #32
 8015322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	2200      	movs	r2, #0
 801532a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801532e:	2303      	movs	r3, #3
 8015330:	e00f      	b.n	8015352 <UART_WaitOnFlagUntilTimeout+0xd2>
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	69da      	ldr	r2, [r3, #28]
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	4013      	ands	r3, r2
 801533c:	68ba      	ldr	r2, [r7, #8]
 801533e:	429a      	cmp	r2, r3
 8015340:	bf0c      	ite	eq
 8015342:	2301      	moveq	r3, #1
 8015344:	2300      	movne	r3, #0
 8015346:	b2db      	uxtb	r3, r3
 8015348:	461a      	mov	r2, r3
 801534a:	79fb      	ldrb	r3, [r7, #7]
 801534c:	429a      	cmp	r2, r3
 801534e:	d0a0      	beq.n	8015292 <UART_WaitOnFlagUntilTimeout+0x12>
 8015350:	2300      	movs	r3, #0
 8015352:	4618      	mov	r0, r3
 8015354:	3710      	adds	r7, #16
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
	...

0801535c <UART_EndRxTransfer>:
 801535c:	b480      	push	{r7}
 801535e:	b095      	sub	sp, #84	@ 0x54
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	637b      	str	r3, [r7, #52]	@ 0x34
 801536a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801536c:	e853 3f00 	ldrex	r3, [r3]
 8015370:	633b      	str	r3, [r7, #48]	@ 0x30
 8015372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015378:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	461a      	mov	r2, r3
 8015380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015382:	643b      	str	r3, [r7, #64]	@ 0x40
 8015384:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8015386:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015388:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801538a:	e841 2300 	strex	r3, r2, [r1]
 801538e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015392:	2b00      	cmp	r3, #0
 8015394:	d1e6      	bne.n	8015364 <UART_EndRxTransfer+0x8>
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	3308      	adds	r3, #8
 801539c:	623b      	str	r3, [r7, #32]
 801539e:	6a3b      	ldr	r3, [r7, #32]
 80153a0:	e853 3f00 	ldrex	r3, [r3]
 80153a4:	61fb      	str	r3, [r7, #28]
 80153a6:	69fa      	ldr	r2, [r7, #28]
 80153a8:	4b1e      	ldr	r3, [pc, #120]	@ (8015424 <UART_EndRxTransfer+0xc8>)
 80153aa:	4013      	ands	r3, r2
 80153ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	3308      	adds	r3, #8
 80153b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80153b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80153b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80153ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80153bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153be:	e841 2300 	strex	r3, r2, [r1]
 80153c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80153c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d1e5      	bne.n	8015396 <UART_EndRxTransfer+0x3a>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153ce:	2b01      	cmp	r3, #1
 80153d0:	d118      	bne.n	8015404 <UART_EndRxTransfer+0xa8>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	60fb      	str	r3, [r7, #12]
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	e853 3f00 	ldrex	r3, [r3]
 80153de:	60bb      	str	r3, [r7, #8]
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	f023 0310 	bic.w	r3, r3, #16
 80153e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	461a      	mov	r2, r3
 80153ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80153f0:	61bb      	str	r3, [r7, #24]
 80153f2:	617a      	str	r2, [r7, #20]
 80153f4:	6979      	ldr	r1, [r7, #20]
 80153f6:	69ba      	ldr	r2, [r7, #24]
 80153f8:	e841 2300 	strex	r3, r2, [r1]
 80153fc:	613b      	str	r3, [r7, #16]
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d1e6      	bne.n	80153d2 <UART_EndRxTransfer+0x76>
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2220      	movs	r2, #32
 8015408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2200      	movs	r2, #0
 8015410:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	2200      	movs	r2, #0
 8015416:	675a      	str	r2, [r3, #116]	@ 0x74
 8015418:	bf00      	nop
 801541a:	3754      	adds	r7, #84	@ 0x54
 801541c:	46bd      	mov	sp, r7
 801541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015422:	4770      	bx	lr
 8015424:	effffffe 	.word	0xeffffffe

08015428 <UART_DMAAbortOnError>:
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015434:	60fb      	str	r3, [r7, #12]
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	2200      	movs	r2, #0
 801543a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2200      	movs	r2, #0
 8015442:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8015446:	68f8      	ldr	r0, [r7, #12]
 8015448:	f7fe ff4c 	bl	80142e4 <HAL_UART_ErrorCallback>
 801544c:	bf00      	nop
 801544e:	3710      	adds	r7, #16
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}

08015454 <UART_EndTransmit_IT>:
 8015454:	b580      	push	{r7, lr}
 8015456:	b088      	sub	sp, #32
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	60fb      	str	r3, [r7, #12]
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	e853 3f00 	ldrex	r3, [r3]
 8015468:	60bb      	str	r3, [r7, #8]
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015470:	61fb      	str	r3, [r7, #28]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	461a      	mov	r2, r3
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	61bb      	str	r3, [r7, #24]
 801547c:	617a      	str	r2, [r7, #20]
 801547e:	6979      	ldr	r1, [r7, #20]
 8015480:	69ba      	ldr	r2, [r7, #24]
 8015482:	e841 2300 	strex	r3, r2, [r1]
 8015486:	613b      	str	r3, [r7, #16]
 8015488:	693b      	ldr	r3, [r7, #16]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d1e6      	bne.n	801545c <UART_EndTransmit_IT+0x8>
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2220      	movs	r2, #32
 8015492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2200      	movs	r2, #0
 801549a:	679a      	str	r2, [r3, #120]	@ 0x78
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f7fe ff17 	bl	80142d0 <HAL_UART_TxCpltCallback>
 80154a2:	bf00      	nop
 80154a4:	3720      	adds	r7, #32
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}

080154aa <HAL_UARTEx_WakeupCallback>:
 80154aa:	b480      	push	{r7}
 80154ac:	b083      	sub	sp, #12
 80154ae:	af00      	add	r7, sp, #0
 80154b0:	6078      	str	r0, [r7, #4]
 80154b2:	bf00      	nop
 80154b4:	370c      	adds	r7, #12
 80154b6:	46bd      	mov	sp, r7
 80154b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154bc:	4770      	bx	lr

080154be <HAL_UARTEx_RxFifoFullCallback>:
 80154be:	b480      	push	{r7}
 80154c0:	b083      	sub	sp, #12
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	6078      	str	r0, [r7, #4]
 80154c6:	bf00      	nop
 80154c8:	370c      	adds	r7, #12
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	4770      	bx	lr

080154d2 <HAL_UARTEx_TxFifoEmptyCallback>:
 80154d2:	b480      	push	{r7}
 80154d4:	b083      	sub	sp, #12
 80154d6:	af00      	add	r7, sp, #0
 80154d8:	6078      	str	r0, [r7, #4]
 80154da:	bf00      	nop
 80154dc:	370c      	adds	r7, #12
 80154de:	46bd      	mov	sp, r7
 80154e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e4:	4770      	bx	lr

080154e6 <HAL_UARTEx_DisableFifoMode>:
 80154e6:	b480      	push	{r7}
 80154e8:	b085      	sub	sp, #20
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	6078      	str	r0, [r7, #4]
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80154f4:	2b01      	cmp	r3, #1
 80154f6:	d101      	bne.n	80154fc <HAL_UARTEx_DisableFifoMode+0x16>
 80154f8:	2302      	movs	r3, #2
 80154fa:	e027      	b.n	801554c <HAL_UARTEx_DisableFifoMode+0x66>
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2201      	movs	r2, #1
 8015500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2224      	movs	r2, #36	@ 0x24
 8015508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	60fb      	str	r3, [r7, #12]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	681a      	ldr	r2, [r3, #0]
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	f022 0201 	bic.w	r2, r2, #1
 8015522:	601a      	str	r2, [r3, #0]
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801552a:	60fb      	str	r3, [r7, #12]
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2200      	movs	r2, #0
 8015530:	665a      	str	r2, [r3, #100]	@ 0x64
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	68fa      	ldr	r2, [r7, #12]
 8015538:	601a      	str	r2, [r3, #0]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2220      	movs	r2, #32
 801553e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2200      	movs	r2, #0
 8015546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801554a:	2300      	movs	r3, #0
 801554c:	4618      	mov	r0, r3
 801554e:	3714      	adds	r7, #20
 8015550:	46bd      	mov	sp, r7
 8015552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015556:	4770      	bx	lr

08015558 <HAL_UARTEx_SetTxFifoThreshold>:
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015568:	2b01      	cmp	r3, #1
 801556a:	d101      	bne.n	8015570 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801556c:	2302      	movs	r3, #2
 801556e:	e02d      	b.n	80155cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2201      	movs	r2, #1
 8015574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2224      	movs	r2, #36	@ 0x24
 801557c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	60fb      	str	r3, [r7, #12]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	f022 0201 	bic.w	r2, r2, #1
 8015596:	601a      	str	r2, [r3, #0]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	689b      	ldr	r3, [r3, #8]
 801559e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	683a      	ldr	r2, [r7, #0]
 80155a8:	430a      	orrs	r2, r1
 80155aa:	609a      	str	r2, [r3, #8]
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f000 f84f 	bl	8015650 <UARTEx_SetNbDataToProcess>
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	68fa      	ldr	r2, [r7, #12]
 80155b8:	601a      	str	r2, [r3, #0]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	2220      	movs	r2, #32
 80155be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2200      	movs	r2, #0
 80155c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80155ca:	2300      	movs	r3, #0
 80155cc:	4618      	mov	r0, r3
 80155ce:	3710      	adds	r7, #16
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}

080155d4 <HAL_UARTEx_SetRxFifoThreshold>:
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b084      	sub	sp, #16
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
 80155dc:	6039      	str	r1, [r7, #0]
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80155e4:	2b01      	cmp	r3, #1
 80155e6:	d101      	bne.n	80155ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80155e8:	2302      	movs	r3, #2
 80155ea:	e02d      	b.n	8015648 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2201      	movs	r2, #1
 80155f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	2224      	movs	r2, #36	@ 0x24
 80155f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	60fb      	str	r3, [r7, #12]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	f022 0201 	bic.w	r2, r2, #1
 8015612:	601a      	str	r2, [r3, #0]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	689b      	ldr	r3, [r3, #8]
 801561a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	683a      	ldr	r2, [r7, #0]
 8015624:	430a      	orrs	r2, r1
 8015626:	609a      	str	r2, [r3, #8]
 8015628:	6878      	ldr	r0, [r7, #4]
 801562a:	f000 f811 	bl	8015650 <UARTEx_SetNbDataToProcess>
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	68fa      	ldr	r2, [r7, #12]
 8015634:	601a      	str	r2, [r3, #0]
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2220      	movs	r2, #32
 801563a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	2200      	movs	r2, #0
 8015642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8015646:	2300      	movs	r3, #0
 8015648:	4618      	mov	r0, r3
 801564a:	3710      	adds	r7, #16
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}

08015650 <UARTEx_SetNbDataToProcess>:
 8015650:	b480      	push	{r7}
 8015652:	b085      	sub	sp, #20
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801565c:	2b00      	cmp	r3, #0
 801565e:	d108      	bne.n	8015672 <UARTEx_SetNbDataToProcess+0x22>
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2201      	movs	r2, #1
 8015664:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2201      	movs	r2, #1
 801566c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8015670:	e031      	b.n	80156d6 <UARTEx_SetNbDataToProcess+0x86>
 8015672:	2310      	movs	r3, #16
 8015674:	73fb      	strb	r3, [r7, #15]
 8015676:	2310      	movs	r3, #16
 8015678:	73bb      	strb	r3, [r7, #14]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	689b      	ldr	r3, [r3, #8]
 8015680:	0e5b      	lsrs	r3, r3, #25
 8015682:	b2db      	uxtb	r3, r3
 8015684:	f003 0307 	and.w	r3, r3, #7
 8015688:	737b      	strb	r3, [r7, #13]
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	689b      	ldr	r3, [r3, #8]
 8015690:	0f5b      	lsrs	r3, r3, #29
 8015692:	b2db      	uxtb	r3, r3
 8015694:	f003 0307 	and.w	r3, r3, #7
 8015698:	733b      	strb	r3, [r7, #12]
 801569a:	7bbb      	ldrb	r3, [r7, #14]
 801569c:	7b3a      	ldrb	r2, [r7, #12]
 801569e:	4911      	ldr	r1, [pc, #68]	@ (80156e4 <UARTEx_SetNbDataToProcess+0x94>)
 80156a0:	5c8a      	ldrb	r2, [r1, r2]
 80156a2:	fb02 f303 	mul.w	r3, r2, r3
 80156a6:	7b3a      	ldrb	r2, [r7, #12]
 80156a8:	490f      	ldr	r1, [pc, #60]	@ (80156e8 <UARTEx_SetNbDataToProcess+0x98>)
 80156aa:	5c8a      	ldrb	r2, [r1, r2]
 80156ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80156b0:	b29a      	uxth	r2, r3
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80156b8:	7bfb      	ldrb	r3, [r7, #15]
 80156ba:	7b7a      	ldrb	r2, [r7, #13]
 80156bc:	4909      	ldr	r1, [pc, #36]	@ (80156e4 <UARTEx_SetNbDataToProcess+0x94>)
 80156be:	5c8a      	ldrb	r2, [r1, r2]
 80156c0:	fb02 f303 	mul.w	r3, r2, r3
 80156c4:	7b7a      	ldrb	r2, [r7, #13]
 80156c6:	4908      	ldr	r1, [pc, #32]	@ (80156e8 <UARTEx_SetNbDataToProcess+0x98>)
 80156c8:	5c8a      	ldrb	r2, [r1, r2]
 80156ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80156ce:	b29a      	uxth	r2, r3
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80156d6:	bf00      	nop
 80156d8:	3714      	adds	r7, #20
 80156da:	46bd      	mov	sp, r7
 80156dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e0:	4770      	bx	lr
 80156e2:	bf00      	nop
 80156e4:	0801c2cc 	.word	0x0801c2cc
 80156e8:	0801c2d4 	.word	0x0801c2d4

080156ec <HAL_USART_Init>:
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d101      	bne.n	80156fe <HAL_USART_Init+0x12>
 80156fa:	2301      	movs	r3, #1
 80156fc:	e03c      	b.n	8015778 <HAL_USART_Init+0x8c>
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8015704:	b2db      	uxtb	r3, r3
 8015706:	2b00      	cmp	r3, #0
 8015708:	d106      	bne.n	8015718 <HAL_USART_Init+0x2c>
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2200      	movs	r2, #0
 801570e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f7f2 fdfa 	bl	800830c <HAL_USART_MspInit>
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2202      	movs	r2, #2
 801571c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	681a      	ldr	r2, [r3, #0]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	f022 0201 	bic.w	r2, r2, #1
 801572e:	601a      	str	r2, [r3, #0]
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f000 f85b 	bl	80157ec <USART_SetConfig>
 8015736:	4603      	mov	r3, r0
 8015738:	2b01      	cmp	r3, #1
 801573a:	d101      	bne.n	8015740 <HAL_USART_Init+0x54>
 801573c:	2301      	movs	r3, #1
 801573e:	e01b      	b.n	8015778 <HAL_USART_Init+0x8c>
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	685a      	ldr	r2, [r3, #4]
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801574e:	605a      	str	r2, [r3, #4]
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	689a      	ldr	r2, [r3, #8]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801575e:	609a      	str	r2, [r3, #8]
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	681a      	ldr	r2, [r3, #0]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	f042 0201 	orr.w	r2, r2, #1
 801576e:	601a      	str	r2, [r3, #0]
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f000 fddd 	bl	8016330 <USART_CheckIdleState>
 8015776:	4603      	mov	r3, r0
 8015778:	4618      	mov	r0, r3
 801577a:	3708      	adds	r7, #8
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}

08015780 <USART_WaitOnFlagUntilTimeout>:
 8015780:	b580      	push	{r7, lr}
 8015782:	b084      	sub	sp, #16
 8015784:	af00      	add	r7, sp, #0
 8015786:	60f8      	str	r0, [r7, #12]
 8015788:	60b9      	str	r1, [r7, #8]
 801578a:	603b      	str	r3, [r7, #0]
 801578c:	4613      	mov	r3, r2
 801578e:	71fb      	strb	r3, [r7, #7]
 8015790:	e018      	b.n	80157c4 <USART_WaitOnFlagUntilTimeout+0x44>
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015798:	d014      	beq.n	80157c4 <USART_WaitOnFlagUntilTimeout+0x44>
 801579a:	f7f3 f9ab 	bl	8008af4 <HAL_GetTick>
 801579e:	4602      	mov	r2, r0
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	1ad3      	subs	r3, r2, r3
 80157a4:	69ba      	ldr	r2, [r7, #24]
 80157a6:	429a      	cmp	r2, r3
 80157a8:	d302      	bcc.n	80157b0 <USART_WaitOnFlagUntilTimeout+0x30>
 80157aa:	69bb      	ldr	r3, [r7, #24]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d109      	bne.n	80157c4 <USART_WaitOnFlagUntilTimeout+0x44>
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	2201      	movs	r2, #1
 80157b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2200      	movs	r2, #0
 80157bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80157c0:	2303      	movs	r3, #3
 80157c2:	e00f      	b.n	80157e4 <USART_WaitOnFlagUntilTimeout+0x64>
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	69da      	ldr	r2, [r3, #28]
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	4013      	ands	r3, r2
 80157ce:	68ba      	ldr	r2, [r7, #8]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	bf0c      	ite	eq
 80157d4:	2301      	moveq	r3, #1
 80157d6:	2300      	movne	r3, #0
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	461a      	mov	r2, r3
 80157dc:	79fb      	ldrb	r3, [r7, #7]
 80157de:	429a      	cmp	r2, r3
 80157e0:	d0d7      	beq.n	8015792 <USART_WaitOnFlagUntilTimeout+0x12>
 80157e2:	2300      	movs	r3, #0
 80157e4:	4618      	mov	r0, r3
 80157e6:	3710      	adds	r7, #16
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <USART_SetConfig>:
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b08e      	sub	sp, #56	@ 0x38
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	2300      	movs	r3, #0
 80157f6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80157fa:	2300      	movs	r3, #0
 80157fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	689a      	ldr	r2, [r3, #8]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	691b      	ldr	r3, [r3, #16]
 8015806:	431a      	orrs	r2, r3
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	695b      	ldr	r3, [r3, #20]
 801580c:	4313      	orrs	r3, r2
 801580e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	681a      	ldr	r2, [r3, #0]
 801581a:	4bc9      	ldr	r3, [pc, #804]	@ (8015b40 <USART_SetConfig+0x354>)
 801581c:	4013      	ands	r3, r2
 801581e:	687a      	ldr	r2, [r7, #4]
 8015820:	6812      	ldr	r2, [r2, #0]
 8015822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015824:	430b      	orrs	r3, r1
 8015826:	6013      	str	r3, [r2, #0]
 8015828:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801582c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	6a1b      	ldr	r3, [r3, #32]
 8015832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015834:	4313      	orrs	r3, r2
 8015836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	699a      	ldr	r2, [r3, #24]
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	69db      	ldr	r3, [r3, #28]
 8015840:	4313      	orrs	r3, r2
 8015842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015844:	4313      	orrs	r3, r2
 8015846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	68db      	ldr	r3, [r3, #12]
 801584c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801584e:	4313      	orrs	r3, r2
 8015850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	685a      	ldr	r2, [r3, #4]
 8015858:	4bba      	ldr	r3, [pc, #744]	@ (8015b44 <USART_SetConfig+0x358>)
 801585a:	4013      	ands	r3, r2
 801585c:	687a      	ldr	r2, [r7, #4]
 801585e:	6812      	ldr	r2, [r2, #0]
 8015860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015862:	430b      	orrs	r3, r1
 8015864:	6053      	str	r3, [r2, #4]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801586c:	f023 010f 	bic.w	r1, r3, #15
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	430a      	orrs	r2, r1
 801587a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	4ab1      	ldr	r2, [pc, #708]	@ (8015b48 <USART_SetConfig+0x35c>)
 8015882:	4293      	cmp	r3, r2
 8015884:	d176      	bne.n	8015974 <USART_SetConfig+0x188>
 8015886:	4bb1      	ldr	r3, [pc, #708]	@ (8015b4c <USART_SetConfig+0x360>)
 8015888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801588a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801588e:	2b28      	cmp	r3, #40	@ 0x28
 8015890:	d86c      	bhi.n	801596c <USART_SetConfig+0x180>
 8015892:	a201      	add	r2, pc, #4	@ (adr r2, 8015898 <USART_SetConfig+0xac>)
 8015894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015898:	0801593d 	.word	0x0801593d
 801589c:	0801596d 	.word	0x0801596d
 80158a0:	0801596d 	.word	0x0801596d
 80158a4:	0801596d 	.word	0x0801596d
 80158a8:	0801596d 	.word	0x0801596d
 80158ac:	0801596d 	.word	0x0801596d
 80158b0:	0801596d 	.word	0x0801596d
 80158b4:	0801596d 	.word	0x0801596d
 80158b8:	08015945 	.word	0x08015945
 80158bc:	0801596d 	.word	0x0801596d
 80158c0:	0801596d 	.word	0x0801596d
 80158c4:	0801596d 	.word	0x0801596d
 80158c8:	0801596d 	.word	0x0801596d
 80158cc:	0801596d 	.word	0x0801596d
 80158d0:	0801596d 	.word	0x0801596d
 80158d4:	0801596d 	.word	0x0801596d
 80158d8:	0801594d 	.word	0x0801594d
 80158dc:	0801596d 	.word	0x0801596d
 80158e0:	0801596d 	.word	0x0801596d
 80158e4:	0801596d 	.word	0x0801596d
 80158e8:	0801596d 	.word	0x0801596d
 80158ec:	0801596d 	.word	0x0801596d
 80158f0:	0801596d 	.word	0x0801596d
 80158f4:	0801596d 	.word	0x0801596d
 80158f8:	08015955 	.word	0x08015955
 80158fc:	0801596d 	.word	0x0801596d
 8015900:	0801596d 	.word	0x0801596d
 8015904:	0801596d 	.word	0x0801596d
 8015908:	0801596d 	.word	0x0801596d
 801590c:	0801596d 	.word	0x0801596d
 8015910:	0801596d 	.word	0x0801596d
 8015914:	0801596d 	.word	0x0801596d
 8015918:	0801595d 	.word	0x0801595d
 801591c:	0801596d 	.word	0x0801596d
 8015920:	0801596d 	.word	0x0801596d
 8015924:	0801596d 	.word	0x0801596d
 8015928:	0801596d 	.word	0x0801596d
 801592c:	0801596d 	.word	0x0801596d
 8015930:	0801596d 	.word	0x0801596d
 8015934:	0801596d 	.word	0x0801596d
 8015938:	08015965 	.word	0x08015965
 801593c:	2301      	movs	r3, #1
 801593e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015942:	e18e      	b.n	8015c62 <USART_SetConfig+0x476>
 8015944:	2302      	movs	r3, #2
 8015946:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801594a:	e18a      	b.n	8015c62 <USART_SetConfig+0x476>
 801594c:	2304      	movs	r3, #4
 801594e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015952:	e186      	b.n	8015c62 <USART_SetConfig+0x476>
 8015954:	2308      	movs	r3, #8
 8015956:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801595a:	e182      	b.n	8015c62 <USART_SetConfig+0x476>
 801595c:	2310      	movs	r3, #16
 801595e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015962:	e17e      	b.n	8015c62 <USART_SetConfig+0x476>
 8015964:	2320      	movs	r3, #32
 8015966:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801596a:	e17a      	b.n	8015c62 <USART_SetConfig+0x476>
 801596c:	2340      	movs	r3, #64	@ 0x40
 801596e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015972:	e176      	b.n	8015c62 <USART_SetConfig+0x476>
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	4a75      	ldr	r2, [pc, #468]	@ (8015b50 <USART_SetConfig+0x364>)
 801597a:	4293      	cmp	r3, r2
 801597c:	d130      	bne.n	80159e0 <USART_SetConfig+0x1f4>
 801597e:	4b73      	ldr	r3, [pc, #460]	@ (8015b4c <USART_SetConfig+0x360>)
 8015980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015982:	f003 0307 	and.w	r3, r3, #7
 8015986:	2b05      	cmp	r3, #5
 8015988:	d826      	bhi.n	80159d8 <USART_SetConfig+0x1ec>
 801598a:	a201      	add	r2, pc, #4	@ (adr r2, 8015990 <USART_SetConfig+0x1a4>)
 801598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015990:	080159a9 	.word	0x080159a9
 8015994:	080159b1 	.word	0x080159b1
 8015998:	080159b9 	.word	0x080159b9
 801599c:	080159c1 	.word	0x080159c1
 80159a0:	080159c9 	.word	0x080159c9
 80159a4:	080159d1 	.word	0x080159d1
 80159a8:	2300      	movs	r3, #0
 80159aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80159ae:	e158      	b.n	8015c62 <USART_SetConfig+0x476>
 80159b0:	2302      	movs	r3, #2
 80159b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80159b6:	e154      	b.n	8015c62 <USART_SetConfig+0x476>
 80159b8:	2304      	movs	r3, #4
 80159ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80159be:	e150      	b.n	8015c62 <USART_SetConfig+0x476>
 80159c0:	2308      	movs	r3, #8
 80159c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80159c6:	e14c      	b.n	8015c62 <USART_SetConfig+0x476>
 80159c8:	2310      	movs	r3, #16
 80159ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80159ce:	e148      	b.n	8015c62 <USART_SetConfig+0x476>
 80159d0:	2320      	movs	r3, #32
 80159d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80159d6:	e144      	b.n	8015c62 <USART_SetConfig+0x476>
 80159d8:	2340      	movs	r3, #64	@ 0x40
 80159da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80159de:	e140      	b.n	8015c62 <USART_SetConfig+0x476>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	4a5b      	ldr	r2, [pc, #364]	@ (8015b54 <USART_SetConfig+0x368>)
 80159e6:	4293      	cmp	r3, r2
 80159e8:	d130      	bne.n	8015a4c <USART_SetConfig+0x260>
 80159ea:	4b58      	ldr	r3, [pc, #352]	@ (8015b4c <USART_SetConfig+0x360>)
 80159ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159ee:	f003 0307 	and.w	r3, r3, #7
 80159f2:	2b05      	cmp	r3, #5
 80159f4:	d826      	bhi.n	8015a44 <USART_SetConfig+0x258>
 80159f6:	a201      	add	r2, pc, #4	@ (adr r2, 80159fc <USART_SetConfig+0x210>)
 80159f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159fc:	08015a15 	.word	0x08015a15
 8015a00:	08015a1d 	.word	0x08015a1d
 8015a04:	08015a25 	.word	0x08015a25
 8015a08:	08015a2d 	.word	0x08015a2d
 8015a0c:	08015a35 	.word	0x08015a35
 8015a10:	08015a3d 	.word	0x08015a3d
 8015a14:	2300      	movs	r3, #0
 8015a16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a1a:	e122      	b.n	8015c62 <USART_SetConfig+0x476>
 8015a1c:	2302      	movs	r3, #2
 8015a1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a22:	e11e      	b.n	8015c62 <USART_SetConfig+0x476>
 8015a24:	2304      	movs	r3, #4
 8015a26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a2a:	e11a      	b.n	8015c62 <USART_SetConfig+0x476>
 8015a2c:	2308      	movs	r3, #8
 8015a2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a32:	e116      	b.n	8015c62 <USART_SetConfig+0x476>
 8015a34:	2310      	movs	r3, #16
 8015a36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a3a:	e112      	b.n	8015c62 <USART_SetConfig+0x476>
 8015a3c:	2320      	movs	r3, #32
 8015a3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a42:	e10e      	b.n	8015c62 <USART_SetConfig+0x476>
 8015a44:	2340      	movs	r3, #64	@ 0x40
 8015a46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a4a:	e10a      	b.n	8015c62 <USART_SetConfig+0x476>
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	4a41      	ldr	r2, [pc, #260]	@ (8015b58 <USART_SetConfig+0x36c>)
 8015a52:	4293      	cmp	r3, r2
 8015a54:	f040 8086 	bne.w	8015b64 <USART_SetConfig+0x378>
 8015a58:	4b3c      	ldr	r3, [pc, #240]	@ (8015b4c <USART_SetConfig+0x360>)
 8015a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8015a60:	2b28      	cmp	r3, #40	@ 0x28
 8015a62:	d87b      	bhi.n	8015b5c <USART_SetConfig+0x370>
 8015a64:	a201      	add	r2, pc, #4	@ (adr r2, 8015a6c <USART_SetConfig+0x280>)
 8015a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a6a:	bf00      	nop
 8015a6c:	08015b11 	.word	0x08015b11
 8015a70:	08015b5d 	.word	0x08015b5d
 8015a74:	08015b5d 	.word	0x08015b5d
 8015a78:	08015b5d 	.word	0x08015b5d
 8015a7c:	08015b5d 	.word	0x08015b5d
 8015a80:	08015b5d 	.word	0x08015b5d
 8015a84:	08015b5d 	.word	0x08015b5d
 8015a88:	08015b5d 	.word	0x08015b5d
 8015a8c:	08015b19 	.word	0x08015b19
 8015a90:	08015b5d 	.word	0x08015b5d
 8015a94:	08015b5d 	.word	0x08015b5d
 8015a98:	08015b5d 	.word	0x08015b5d
 8015a9c:	08015b5d 	.word	0x08015b5d
 8015aa0:	08015b5d 	.word	0x08015b5d
 8015aa4:	08015b5d 	.word	0x08015b5d
 8015aa8:	08015b5d 	.word	0x08015b5d
 8015aac:	08015b21 	.word	0x08015b21
 8015ab0:	08015b5d 	.word	0x08015b5d
 8015ab4:	08015b5d 	.word	0x08015b5d
 8015ab8:	08015b5d 	.word	0x08015b5d
 8015abc:	08015b5d 	.word	0x08015b5d
 8015ac0:	08015b5d 	.word	0x08015b5d
 8015ac4:	08015b5d 	.word	0x08015b5d
 8015ac8:	08015b5d 	.word	0x08015b5d
 8015acc:	08015b29 	.word	0x08015b29
 8015ad0:	08015b5d 	.word	0x08015b5d
 8015ad4:	08015b5d 	.word	0x08015b5d
 8015ad8:	08015b5d 	.word	0x08015b5d
 8015adc:	08015b5d 	.word	0x08015b5d
 8015ae0:	08015b5d 	.word	0x08015b5d
 8015ae4:	08015b5d 	.word	0x08015b5d
 8015ae8:	08015b5d 	.word	0x08015b5d
 8015aec:	08015b31 	.word	0x08015b31
 8015af0:	08015b5d 	.word	0x08015b5d
 8015af4:	08015b5d 	.word	0x08015b5d
 8015af8:	08015b5d 	.word	0x08015b5d
 8015afc:	08015b5d 	.word	0x08015b5d
 8015b00:	08015b5d 	.word	0x08015b5d
 8015b04:	08015b5d 	.word	0x08015b5d
 8015b08:	08015b5d 	.word	0x08015b5d
 8015b0c:	08015b39 	.word	0x08015b39
 8015b10:	2301      	movs	r3, #1
 8015b12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b16:	e0a4      	b.n	8015c62 <USART_SetConfig+0x476>
 8015b18:	2302      	movs	r3, #2
 8015b1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b1e:	e0a0      	b.n	8015c62 <USART_SetConfig+0x476>
 8015b20:	2304      	movs	r3, #4
 8015b22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b26:	e09c      	b.n	8015c62 <USART_SetConfig+0x476>
 8015b28:	2308      	movs	r3, #8
 8015b2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b2e:	e098      	b.n	8015c62 <USART_SetConfig+0x476>
 8015b30:	2310      	movs	r3, #16
 8015b32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b36:	e094      	b.n	8015c62 <USART_SetConfig+0x476>
 8015b38:	2320      	movs	r3, #32
 8015b3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b3e:	e090      	b.n	8015c62 <USART_SetConfig+0x476>
 8015b40:	cfff69f3 	.word	0xcfff69f3
 8015b44:	ffffc0f6 	.word	0xffffc0f6
 8015b48:	40011000 	.word	0x40011000
 8015b4c:	58024400 	.word	0x58024400
 8015b50:	40004400 	.word	0x40004400
 8015b54:	40004800 	.word	0x40004800
 8015b58:	40011400 	.word	0x40011400
 8015b5c:	2340      	movs	r3, #64	@ 0x40
 8015b5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b62:	e07e      	b.n	8015c62 <USART_SetConfig+0x476>
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	4ab5      	ldr	r2, [pc, #724]	@ (8015e40 <USART_SetConfig+0x654>)
 8015b6a:	4293      	cmp	r3, r2
 8015b6c:	d176      	bne.n	8015c5c <USART_SetConfig+0x470>
 8015b6e:	4bb5      	ldr	r3, [pc, #724]	@ (8015e44 <USART_SetConfig+0x658>)
 8015b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8015b76:	2b28      	cmp	r3, #40	@ 0x28
 8015b78:	d86c      	bhi.n	8015c54 <USART_SetConfig+0x468>
 8015b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8015b80 <USART_SetConfig+0x394>)
 8015b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b80:	08015c25 	.word	0x08015c25
 8015b84:	08015c55 	.word	0x08015c55
 8015b88:	08015c55 	.word	0x08015c55
 8015b8c:	08015c55 	.word	0x08015c55
 8015b90:	08015c55 	.word	0x08015c55
 8015b94:	08015c55 	.word	0x08015c55
 8015b98:	08015c55 	.word	0x08015c55
 8015b9c:	08015c55 	.word	0x08015c55
 8015ba0:	08015c2d 	.word	0x08015c2d
 8015ba4:	08015c55 	.word	0x08015c55
 8015ba8:	08015c55 	.word	0x08015c55
 8015bac:	08015c55 	.word	0x08015c55
 8015bb0:	08015c55 	.word	0x08015c55
 8015bb4:	08015c55 	.word	0x08015c55
 8015bb8:	08015c55 	.word	0x08015c55
 8015bbc:	08015c55 	.word	0x08015c55
 8015bc0:	08015c35 	.word	0x08015c35
 8015bc4:	08015c55 	.word	0x08015c55
 8015bc8:	08015c55 	.word	0x08015c55
 8015bcc:	08015c55 	.word	0x08015c55
 8015bd0:	08015c55 	.word	0x08015c55
 8015bd4:	08015c55 	.word	0x08015c55
 8015bd8:	08015c55 	.word	0x08015c55
 8015bdc:	08015c55 	.word	0x08015c55
 8015be0:	08015c3d 	.word	0x08015c3d
 8015be4:	08015c55 	.word	0x08015c55
 8015be8:	08015c55 	.word	0x08015c55
 8015bec:	08015c55 	.word	0x08015c55
 8015bf0:	08015c55 	.word	0x08015c55
 8015bf4:	08015c55 	.word	0x08015c55
 8015bf8:	08015c55 	.word	0x08015c55
 8015bfc:	08015c55 	.word	0x08015c55
 8015c00:	08015c45 	.word	0x08015c45
 8015c04:	08015c55 	.word	0x08015c55
 8015c08:	08015c55 	.word	0x08015c55
 8015c0c:	08015c55 	.word	0x08015c55
 8015c10:	08015c55 	.word	0x08015c55
 8015c14:	08015c55 	.word	0x08015c55
 8015c18:	08015c55 	.word	0x08015c55
 8015c1c:	08015c55 	.word	0x08015c55
 8015c20:	08015c4d 	.word	0x08015c4d
 8015c24:	2301      	movs	r3, #1
 8015c26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015c2a:	e01a      	b.n	8015c62 <USART_SetConfig+0x476>
 8015c2c:	2302      	movs	r3, #2
 8015c2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015c32:	e016      	b.n	8015c62 <USART_SetConfig+0x476>
 8015c34:	2304      	movs	r3, #4
 8015c36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015c3a:	e012      	b.n	8015c62 <USART_SetConfig+0x476>
 8015c3c:	2308      	movs	r3, #8
 8015c3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015c42:	e00e      	b.n	8015c62 <USART_SetConfig+0x476>
 8015c44:	2310      	movs	r3, #16
 8015c46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015c4a:	e00a      	b.n	8015c62 <USART_SetConfig+0x476>
 8015c4c:	2320      	movs	r3, #32
 8015c4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015c52:	e006      	b.n	8015c62 <USART_SetConfig+0x476>
 8015c54:	2340      	movs	r3, #64	@ 0x40
 8015c56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015c5a:	e002      	b.n	8015c62 <USART_SetConfig+0x476>
 8015c5c:	2340      	movs	r3, #64	@ 0x40
 8015c5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015c62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015c66:	2b20      	cmp	r3, #32
 8015c68:	f200 832f 	bhi.w	80162ca <USART_SetConfig+0xade>
 8015c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8015c74 <USART_SetConfig+0x488>)
 8015c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c72:	bf00      	nop
 8015c74:	08015cf9 	.word	0x08015cf9
 8015c78:	08015daf 	.word	0x08015daf
 8015c7c:	08015e6f 	.word	0x08015e6f
 8015c80:	080162cb 	.word	0x080162cb
 8015c84:	08015f29 	.word	0x08015f29
 8015c88:	080162cb 	.word	0x080162cb
 8015c8c:	080162cb 	.word	0x080162cb
 8015c90:	080162cb 	.word	0x080162cb
 8015c94:	08015fe3 	.word	0x08015fe3
 8015c98:	080162cb 	.word	0x080162cb
 8015c9c:	080162cb 	.word	0x080162cb
 8015ca0:	080162cb 	.word	0x080162cb
 8015ca4:	080162cb 	.word	0x080162cb
 8015ca8:	080162cb 	.word	0x080162cb
 8015cac:	080162cb 	.word	0x080162cb
 8015cb0:	080162cb 	.word	0x080162cb
 8015cb4:	0801615b 	.word	0x0801615b
 8015cb8:	080162cb 	.word	0x080162cb
 8015cbc:	080162cb 	.word	0x080162cb
 8015cc0:	080162cb 	.word	0x080162cb
 8015cc4:	080162cb 	.word	0x080162cb
 8015cc8:	080162cb 	.word	0x080162cb
 8015ccc:	080162cb 	.word	0x080162cb
 8015cd0:	080162cb 	.word	0x080162cb
 8015cd4:	080162cb 	.word	0x080162cb
 8015cd8:	080162cb 	.word	0x080162cb
 8015cdc:	080162cb 	.word	0x080162cb
 8015ce0:	080162cb 	.word	0x080162cb
 8015ce4:	080162cb 	.word	0x080162cb
 8015ce8:	080162cb 	.word	0x080162cb
 8015cec:	080162cb 	.word	0x080162cb
 8015cf0:	080162cb 	.word	0x080162cb
 8015cf4:	08016219 	.word	0x08016219
 8015cf8:	f7f7 ffc2 	bl	800dc80 <HAL_RCC_GetPCLK1Freq>
 8015cfc:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d044      	beq.n	8015d90 <USART_SetConfig+0x5a4>
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d03e      	beq.n	8015d8c <USART_SetConfig+0x5a0>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d12:	2b02      	cmp	r3, #2
 8015d14:	d038      	beq.n	8015d88 <USART_SetConfig+0x59c>
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d1a:	2b03      	cmp	r3, #3
 8015d1c:	d032      	beq.n	8015d84 <USART_SetConfig+0x598>
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d22:	2b04      	cmp	r3, #4
 8015d24:	d02c      	beq.n	8015d80 <USART_SetConfig+0x594>
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d2a:	2b05      	cmp	r3, #5
 8015d2c:	d026      	beq.n	8015d7c <USART_SetConfig+0x590>
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d32:	2b06      	cmp	r3, #6
 8015d34:	d020      	beq.n	8015d78 <USART_SetConfig+0x58c>
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d3a:	2b07      	cmp	r3, #7
 8015d3c:	d01a      	beq.n	8015d74 <USART_SetConfig+0x588>
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d42:	2b08      	cmp	r3, #8
 8015d44:	d014      	beq.n	8015d70 <USART_SetConfig+0x584>
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d4a:	2b09      	cmp	r3, #9
 8015d4c:	d00e      	beq.n	8015d6c <USART_SetConfig+0x580>
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d52:	2b0a      	cmp	r3, #10
 8015d54:	d008      	beq.n	8015d68 <USART_SetConfig+0x57c>
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d5a:	2b0b      	cmp	r3, #11
 8015d5c:	d102      	bne.n	8015d64 <USART_SetConfig+0x578>
 8015d5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015d62:	e016      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d64:	2301      	movs	r3, #1
 8015d66:	e014      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d68:	2380      	movs	r3, #128	@ 0x80
 8015d6a:	e012      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d6c:	2340      	movs	r3, #64	@ 0x40
 8015d6e:	e010      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d70:	2320      	movs	r3, #32
 8015d72:	e00e      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d74:	2310      	movs	r3, #16
 8015d76:	e00c      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d78:	230c      	movs	r3, #12
 8015d7a:	e00a      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d7c:	230a      	movs	r3, #10
 8015d7e:	e008      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d80:	2308      	movs	r3, #8
 8015d82:	e006      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d84:	2306      	movs	r3, #6
 8015d86:	e004      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d88:	2304      	movs	r3, #4
 8015d8a:	e002      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d8c:	2302      	movs	r3, #2
 8015d8e:	e000      	b.n	8015d92 <USART_SetConfig+0x5a6>
 8015d90:	2301      	movs	r3, #1
 8015d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d98:	005a      	lsls	r2, r3, #1
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	085b      	lsrs	r3, r3, #1
 8015da0:	441a      	add	r2, r3
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8015daa:	633b      	str	r3, [r7, #48]	@ 0x30
 8015dac:	e291      	b.n	80162d2 <USART_SetConfig+0xae6>
 8015dae:	f7f7 ff7d 	bl	800dcac <HAL_RCC_GetPCLK2Freq>
 8015db2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d049      	beq.n	8015e50 <USART_SetConfig+0x664>
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dc0:	2b01      	cmp	r3, #1
 8015dc2:	d043      	beq.n	8015e4c <USART_SetConfig+0x660>
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	d03d      	beq.n	8015e48 <USART_SetConfig+0x65c>
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dd0:	2b03      	cmp	r3, #3
 8015dd2:	d032      	beq.n	8015e3a <USART_SetConfig+0x64e>
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dd8:	2b04      	cmp	r3, #4
 8015dda:	d02c      	beq.n	8015e36 <USART_SetConfig+0x64a>
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015de0:	2b05      	cmp	r3, #5
 8015de2:	d026      	beq.n	8015e32 <USART_SetConfig+0x646>
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015de8:	2b06      	cmp	r3, #6
 8015dea:	d020      	beq.n	8015e2e <USART_SetConfig+0x642>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015df0:	2b07      	cmp	r3, #7
 8015df2:	d01a      	beq.n	8015e2a <USART_SetConfig+0x63e>
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015df8:	2b08      	cmp	r3, #8
 8015dfa:	d014      	beq.n	8015e26 <USART_SetConfig+0x63a>
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e00:	2b09      	cmp	r3, #9
 8015e02:	d00e      	beq.n	8015e22 <USART_SetConfig+0x636>
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e08:	2b0a      	cmp	r3, #10
 8015e0a:	d008      	beq.n	8015e1e <USART_SetConfig+0x632>
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e10:	2b0b      	cmp	r3, #11
 8015e12:	d102      	bne.n	8015e1a <USART_SetConfig+0x62e>
 8015e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015e18:	e01b      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	e019      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e1e:	2380      	movs	r3, #128	@ 0x80
 8015e20:	e017      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e22:	2340      	movs	r3, #64	@ 0x40
 8015e24:	e015      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e26:	2320      	movs	r3, #32
 8015e28:	e013      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e2a:	2310      	movs	r3, #16
 8015e2c:	e011      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e2e:	230c      	movs	r3, #12
 8015e30:	e00f      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e32:	230a      	movs	r3, #10
 8015e34:	e00d      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e36:	2308      	movs	r3, #8
 8015e38:	e00b      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e3a:	2306      	movs	r3, #6
 8015e3c:	e009      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e3e:	bf00      	nop
 8015e40:	40011c00 	.word	0x40011c00
 8015e44:	58024400 	.word	0x58024400
 8015e48:	2304      	movs	r3, #4
 8015e4a:	e002      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e4c:	2302      	movs	r3, #2
 8015e4e:	e000      	b.n	8015e52 <USART_SetConfig+0x666>
 8015e50:	2301      	movs	r3, #1
 8015e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e58:	005a      	lsls	r2, r3, #1
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	685b      	ldr	r3, [r3, #4]
 8015e5e:	085b      	lsrs	r3, r3, #1
 8015e60:	441a      	add	r2, r3
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8015e6c:	e231      	b.n	80162d2 <USART_SetConfig+0xae6>
 8015e6e:	f107 0318 	add.w	r3, r7, #24
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7f9 fdd4 	bl	800fa20 <HAL_RCCEx_GetPLL2ClockFreq>
 8015e78:	69fa      	ldr	r2, [r7, #28]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d044      	beq.n	8015f0c <USART_SetConfig+0x720>
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e86:	2b01      	cmp	r3, #1
 8015e88:	d03e      	beq.n	8015f08 <USART_SetConfig+0x71c>
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e8e:	2b02      	cmp	r3, #2
 8015e90:	d038      	beq.n	8015f04 <USART_SetConfig+0x718>
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e96:	2b03      	cmp	r3, #3
 8015e98:	d032      	beq.n	8015f00 <USART_SetConfig+0x714>
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e9e:	2b04      	cmp	r3, #4
 8015ea0:	d02c      	beq.n	8015efc <USART_SetConfig+0x710>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ea6:	2b05      	cmp	r3, #5
 8015ea8:	d026      	beq.n	8015ef8 <USART_SetConfig+0x70c>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015eae:	2b06      	cmp	r3, #6
 8015eb0:	d020      	beq.n	8015ef4 <USART_SetConfig+0x708>
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015eb6:	2b07      	cmp	r3, #7
 8015eb8:	d01a      	beq.n	8015ef0 <USART_SetConfig+0x704>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ebe:	2b08      	cmp	r3, #8
 8015ec0:	d014      	beq.n	8015eec <USART_SetConfig+0x700>
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ec6:	2b09      	cmp	r3, #9
 8015ec8:	d00e      	beq.n	8015ee8 <USART_SetConfig+0x6fc>
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ece:	2b0a      	cmp	r3, #10
 8015ed0:	d008      	beq.n	8015ee4 <USART_SetConfig+0x6f8>
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ed6:	2b0b      	cmp	r3, #11
 8015ed8:	d102      	bne.n	8015ee0 <USART_SetConfig+0x6f4>
 8015eda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015ede:	e016      	b.n	8015f0e <USART_SetConfig+0x722>
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	e014      	b.n	8015f0e <USART_SetConfig+0x722>
 8015ee4:	2380      	movs	r3, #128	@ 0x80
 8015ee6:	e012      	b.n	8015f0e <USART_SetConfig+0x722>
 8015ee8:	2340      	movs	r3, #64	@ 0x40
 8015eea:	e010      	b.n	8015f0e <USART_SetConfig+0x722>
 8015eec:	2320      	movs	r3, #32
 8015eee:	e00e      	b.n	8015f0e <USART_SetConfig+0x722>
 8015ef0:	2310      	movs	r3, #16
 8015ef2:	e00c      	b.n	8015f0e <USART_SetConfig+0x722>
 8015ef4:	230c      	movs	r3, #12
 8015ef6:	e00a      	b.n	8015f0e <USART_SetConfig+0x722>
 8015ef8:	230a      	movs	r3, #10
 8015efa:	e008      	b.n	8015f0e <USART_SetConfig+0x722>
 8015efc:	2308      	movs	r3, #8
 8015efe:	e006      	b.n	8015f0e <USART_SetConfig+0x722>
 8015f00:	2306      	movs	r3, #6
 8015f02:	e004      	b.n	8015f0e <USART_SetConfig+0x722>
 8015f04:	2304      	movs	r3, #4
 8015f06:	e002      	b.n	8015f0e <USART_SetConfig+0x722>
 8015f08:	2302      	movs	r3, #2
 8015f0a:	e000      	b.n	8015f0e <USART_SetConfig+0x722>
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f12:	005a      	lsls	r2, r3, #1
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	685b      	ldr	r3, [r3, #4]
 8015f18:	085b      	lsrs	r3, r3, #1
 8015f1a:	441a      	add	r2, r3
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f26:	e1d4      	b.n	80162d2 <USART_SetConfig+0xae6>
 8015f28:	f107 030c 	add.w	r3, r7, #12
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7f9 fecb 	bl	800fcc8 <HAL_RCCEx_GetPLL3ClockFreq>
 8015f32:	693a      	ldr	r2, [r7, #16]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d044      	beq.n	8015fc6 <USART_SetConfig+0x7da>
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f40:	2b01      	cmp	r3, #1
 8015f42:	d03e      	beq.n	8015fc2 <USART_SetConfig+0x7d6>
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f48:	2b02      	cmp	r3, #2
 8015f4a:	d038      	beq.n	8015fbe <USART_SetConfig+0x7d2>
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f50:	2b03      	cmp	r3, #3
 8015f52:	d032      	beq.n	8015fba <USART_SetConfig+0x7ce>
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f58:	2b04      	cmp	r3, #4
 8015f5a:	d02c      	beq.n	8015fb6 <USART_SetConfig+0x7ca>
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f60:	2b05      	cmp	r3, #5
 8015f62:	d026      	beq.n	8015fb2 <USART_SetConfig+0x7c6>
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f68:	2b06      	cmp	r3, #6
 8015f6a:	d020      	beq.n	8015fae <USART_SetConfig+0x7c2>
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f70:	2b07      	cmp	r3, #7
 8015f72:	d01a      	beq.n	8015faa <USART_SetConfig+0x7be>
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f78:	2b08      	cmp	r3, #8
 8015f7a:	d014      	beq.n	8015fa6 <USART_SetConfig+0x7ba>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f80:	2b09      	cmp	r3, #9
 8015f82:	d00e      	beq.n	8015fa2 <USART_SetConfig+0x7b6>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f88:	2b0a      	cmp	r3, #10
 8015f8a:	d008      	beq.n	8015f9e <USART_SetConfig+0x7b2>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f90:	2b0b      	cmp	r3, #11
 8015f92:	d102      	bne.n	8015f9a <USART_SetConfig+0x7ae>
 8015f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015f98:	e016      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015f9a:	2301      	movs	r3, #1
 8015f9c:	e014      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015f9e:	2380      	movs	r3, #128	@ 0x80
 8015fa0:	e012      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015fa2:	2340      	movs	r3, #64	@ 0x40
 8015fa4:	e010      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015fa6:	2320      	movs	r3, #32
 8015fa8:	e00e      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015faa:	2310      	movs	r3, #16
 8015fac:	e00c      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015fae:	230c      	movs	r3, #12
 8015fb0:	e00a      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015fb2:	230a      	movs	r3, #10
 8015fb4:	e008      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015fb6:	2308      	movs	r3, #8
 8015fb8:	e006      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015fba:	2306      	movs	r3, #6
 8015fbc:	e004      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015fbe:	2304      	movs	r3, #4
 8015fc0:	e002      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015fc2:	2302      	movs	r3, #2
 8015fc4:	e000      	b.n	8015fc8 <USART_SetConfig+0x7dc>
 8015fc6:	2301      	movs	r3, #1
 8015fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015fcc:	005a      	lsls	r2, r3, #1
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	085b      	lsrs	r3, r3, #1
 8015fd4:	441a      	add	r2, r3
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	685b      	ldr	r3, [r3, #4]
 8015fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8015fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8015fe0:	e177      	b.n	80162d2 <USART_SetConfig+0xae6>
 8015fe2:	4b8a      	ldr	r3, [pc, #552]	@ (801620c <USART_SetConfig+0xa20>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	f003 0320 	and.w	r3, r3, #32
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d05d      	beq.n	80160aa <USART_SetConfig+0x8be>
 8015fee:	4b87      	ldr	r3, [pc, #540]	@ (801620c <USART_SetConfig+0xa20>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	08db      	lsrs	r3, r3, #3
 8015ff4:	f003 0303 	and.w	r3, r3, #3
 8015ff8:	4a85      	ldr	r2, [pc, #532]	@ (8016210 <USART_SetConfig+0xa24>)
 8015ffa:	40da      	lsrs	r2, r3
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016000:	2b00      	cmp	r3, #0
 8016002:	d044      	beq.n	801608e <USART_SetConfig+0x8a2>
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016008:	2b01      	cmp	r3, #1
 801600a:	d03e      	beq.n	801608a <USART_SetConfig+0x89e>
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016010:	2b02      	cmp	r3, #2
 8016012:	d038      	beq.n	8016086 <USART_SetConfig+0x89a>
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016018:	2b03      	cmp	r3, #3
 801601a:	d032      	beq.n	8016082 <USART_SetConfig+0x896>
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016020:	2b04      	cmp	r3, #4
 8016022:	d02c      	beq.n	801607e <USART_SetConfig+0x892>
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016028:	2b05      	cmp	r3, #5
 801602a:	d026      	beq.n	801607a <USART_SetConfig+0x88e>
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016030:	2b06      	cmp	r3, #6
 8016032:	d020      	beq.n	8016076 <USART_SetConfig+0x88a>
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016038:	2b07      	cmp	r3, #7
 801603a:	d01a      	beq.n	8016072 <USART_SetConfig+0x886>
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016040:	2b08      	cmp	r3, #8
 8016042:	d014      	beq.n	801606e <USART_SetConfig+0x882>
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016048:	2b09      	cmp	r3, #9
 801604a:	d00e      	beq.n	801606a <USART_SetConfig+0x87e>
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016050:	2b0a      	cmp	r3, #10
 8016052:	d008      	beq.n	8016066 <USART_SetConfig+0x87a>
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016058:	2b0b      	cmp	r3, #11
 801605a:	d102      	bne.n	8016062 <USART_SetConfig+0x876>
 801605c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016060:	e016      	b.n	8016090 <USART_SetConfig+0x8a4>
 8016062:	2301      	movs	r3, #1
 8016064:	e014      	b.n	8016090 <USART_SetConfig+0x8a4>
 8016066:	2380      	movs	r3, #128	@ 0x80
 8016068:	e012      	b.n	8016090 <USART_SetConfig+0x8a4>
 801606a:	2340      	movs	r3, #64	@ 0x40
 801606c:	e010      	b.n	8016090 <USART_SetConfig+0x8a4>
 801606e:	2320      	movs	r3, #32
 8016070:	e00e      	b.n	8016090 <USART_SetConfig+0x8a4>
 8016072:	2310      	movs	r3, #16
 8016074:	e00c      	b.n	8016090 <USART_SetConfig+0x8a4>
 8016076:	230c      	movs	r3, #12
 8016078:	e00a      	b.n	8016090 <USART_SetConfig+0x8a4>
 801607a:	230a      	movs	r3, #10
 801607c:	e008      	b.n	8016090 <USART_SetConfig+0x8a4>
 801607e:	2308      	movs	r3, #8
 8016080:	e006      	b.n	8016090 <USART_SetConfig+0x8a4>
 8016082:	2306      	movs	r3, #6
 8016084:	e004      	b.n	8016090 <USART_SetConfig+0x8a4>
 8016086:	2304      	movs	r3, #4
 8016088:	e002      	b.n	8016090 <USART_SetConfig+0x8a4>
 801608a:	2302      	movs	r3, #2
 801608c:	e000      	b.n	8016090 <USART_SetConfig+0x8a4>
 801608e:	2301      	movs	r3, #1
 8016090:	fbb2 f3f3 	udiv	r3, r2, r3
 8016094:	005a      	lsls	r2, r3, #1
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	685b      	ldr	r3, [r3, #4]
 801609a:	085b      	lsrs	r3, r3, #1
 801609c:	441a      	add	r2, r3
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80160a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80160a8:	e113      	b.n	80162d2 <USART_SetConfig+0xae6>
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d044      	beq.n	801613c <USART_SetConfig+0x950>
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160b6:	2b01      	cmp	r3, #1
 80160b8:	d03e      	beq.n	8016138 <USART_SetConfig+0x94c>
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160be:	2b02      	cmp	r3, #2
 80160c0:	d038      	beq.n	8016134 <USART_SetConfig+0x948>
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160c6:	2b03      	cmp	r3, #3
 80160c8:	d032      	beq.n	8016130 <USART_SetConfig+0x944>
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ce:	2b04      	cmp	r3, #4
 80160d0:	d02c      	beq.n	801612c <USART_SetConfig+0x940>
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160d6:	2b05      	cmp	r3, #5
 80160d8:	d026      	beq.n	8016128 <USART_SetConfig+0x93c>
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160de:	2b06      	cmp	r3, #6
 80160e0:	d020      	beq.n	8016124 <USART_SetConfig+0x938>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160e6:	2b07      	cmp	r3, #7
 80160e8:	d01a      	beq.n	8016120 <USART_SetConfig+0x934>
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ee:	2b08      	cmp	r3, #8
 80160f0:	d014      	beq.n	801611c <USART_SetConfig+0x930>
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160f6:	2b09      	cmp	r3, #9
 80160f8:	d00e      	beq.n	8016118 <USART_SetConfig+0x92c>
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160fe:	2b0a      	cmp	r3, #10
 8016100:	d008      	beq.n	8016114 <USART_SetConfig+0x928>
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016106:	2b0b      	cmp	r3, #11
 8016108:	d102      	bne.n	8016110 <USART_SetConfig+0x924>
 801610a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801610e:	e016      	b.n	801613e <USART_SetConfig+0x952>
 8016110:	2301      	movs	r3, #1
 8016112:	e014      	b.n	801613e <USART_SetConfig+0x952>
 8016114:	2380      	movs	r3, #128	@ 0x80
 8016116:	e012      	b.n	801613e <USART_SetConfig+0x952>
 8016118:	2340      	movs	r3, #64	@ 0x40
 801611a:	e010      	b.n	801613e <USART_SetConfig+0x952>
 801611c:	2320      	movs	r3, #32
 801611e:	e00e      	b.n	801613e <USART_SetConfig+0x952>
 8016120:	2310      	movs	r3, #16
 8016122:	e00c      	b.n	801613e <USART_SetConfig+0x952>
 8016124:	230c      	movs	r3, #12
 8016126:	e00a      	b.n	801613e <USART_SetConfig+0x952>
 8016128:	230a      	movs	r3, #10
 801612a:	e008      	b.n	801613e <USART_SetConfig+0x952>
 801612c:	2308      	movs	r3, #8
 801612e:	e006      	b.n	801613e <USART_SetConfig+0x952>
 8016130:	2306      	movs	r3, #6
 8016132:	e004      	b.n	801613e <USART_SetConfig+0x952>
 8016134:	2304      	movs	r3, #4
 8016136:	e002      	b.n	801613e <USART_SetConfig+0x952>
 8016138:	2302      	movs	r3, #2
 801613a:	e000      	b.n	801613e <USART_SetConfig+0x952>
 801613c:	2301      	movs	r3, #1
 801613e:	4a34      	ldr	r2, [pc, #208]	@ (8016210 <USART_SetConfig+0xa24>)
 8016140:	fbb2 f3f3 	udiv	r3, r2, r3
 8016144:	005a      	lsls	r2, r3, #1
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	685b      	ldr	r3, [r3, #4]
 801614a:	085b      	lsrs	r3, r3, #1
 801614c:	441a      	add	r2, r3
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	685b      	ldr	r3, [r3, #4]
 8016152:	fbb2 f3f3 	udiv	r3, r2, r3
 8016156:	633b      	str	r3, [r7, #48]	@ 0x30
 8016158:	e0bb      	b.n	80162d2 <USART_SetConfig+0xae6>
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801615e:	2b00      	cmp	r3, #0
 8016160:	d044      	beq.n	80161ec <USART_SetConfig+0xa00>
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016166:	2b01      	cmp	r3, #1
 8016168:	d03e      	beq.n	80161e8 <USART_SetConfig+0x9fc>
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801616e:	2b02      	cmp	r3, #2
 8016170:	d038      	beq.n	80161e4 <USART_SetConfig+0x9f8>
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016176:	2b03      	cmp	r3, #3
 8016178:	d032      	beq.n	80161e0 <USART_SetConfig+0x9f4>
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801617e:	2b04      	cmp	r3, #4
 8016180:	d02c      	beq.n	80161dc <USART_SetConfig+0x9f0>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016186:	2b05      	cmp	r3, #5
 8016188:	d026      	beq.n	80161d8 <USART_SetConfig+0x9ec>
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801618e:	2b06      	cmp	r3, #6
 8016190:	d020      	beq.n	80161d4 <USART_SetConfig+0x9e8>
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016196:	2b07      	cmp	r3, #7
 8016198:	d01a      	beq.n	80161d0 <USART_SetConfig+0x9e4>
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801619e:	2b08      	cmp	r3, #8
 80161a0:	d014      	beq.n	80161cc <USART_SetConfig+0x9e0>
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161a6:	2b09      	cmp	r3, #9
 80161a8:	d00e      	beq.n	80161c8 <USART_SetConfig+0x9dc>
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ae:	2b0a      	cmp	r3, #10
 80161b0:	d008      	beq.n	80161c4 <USART_SetConfig+0x9d8>
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161b6:	2b0b      	cmp	r3, #11
 80161b8:	d102      	bne.n	80161c0 <USART_SetConfig+0x9d4>
 80161ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80161be:	e016      	b.n	80161ee <USART_SetConfig+0xa02>
 80161c0:	2301      	movs	r3, #1
 80161c2:	e014      	b.n	80161ee <USART_SetConfig+0xa02>
 80161c4:	2380      	movs	r3, #128	@ 0x80
 80161c6:	e012      	b.n	80161ee <USART_SetConfig+0xa02>
 80161c8:	2340      	movs	r3, #64	@ 0x40
 80161ca:	e010      	b.n	80161ee <USART_SetConfig+0xa02>
 80161cc:	2320      	movs	r3, #32
 80161ce:	e00e      	b.n	80161ee <USART_SetConfig+0xa02>
 80161d0:	2310      	movs	r3, #16
 80161d2:	e00c      	b.n	80161ee <USART_SetConfig+0xa02>
 80161d4:	230c      	movs	r3, #12
 80161d6:	e00a      	b.n	80161ee <USART_SetConfig+0xa02>
 80161d8:	230a      	movs	r3, #10
 80161da:	e008      	b.n	80161ee <USART_SetConfig+0xa02>
 80161dc:	2308      	movs	r3, #8
 80161de:	e006      	b.n	80161ee <USART_SetConfig+0xa02>
 80161e0:	2306      	movs	r3, #6
 80161e2:	e004      	b.n	80161ee <USART_SetConfig+0xa02>
 80161e4:	2304      	movs	r3, #4
 80161e6:	e002      	b.n	80161ee <USART_SetConfig+0xa02>
 80161e8:	2302      	movs	r3, #2
 80161ea:	e000      	b.n	80161ee <USART_SetConfig+0xa02>
 80161ec:	2301      	movs	r3, #1
 80161ee:	4a09      	ldr	r2, [pc, #36]	@ (8016214 <USART_SetConfig+0xa28>)
 80161f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80161f4:	005a      	lsls	r2, r3, #1
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	085b      	lsrs	r3, r3, #1
 80161fc:	441a      	add	r2, r3
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	fbb2 f3f3 	udiv	r3, r2, r3
 8016206:	633b      	str	r3, [r7, #48]	@ 0x30
 8016208:	e063      	b.n	80162d2 <USART_SetConfig+0xae6>
 801620a:	bf00      	nop
 801620c:	58024400 	.word	0x58024400
 8016210:	03d09000 	.word	0x03d09000
 8016214:	003d0900 	.word	0x003d0900
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801621c:	2b00      	cmp	r3, #0
 801621e:	d044      	beq.n	80162aa <USART_SetConfig+0xabe>
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016224:	2b01      	cmp	r3, #1
 8016226:	d03e      	beq.n	80162a6 <USART_SetConfig+0xaba>
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801622c:	2b02      	cmp	r3, #2
 801622e:	d038      	beq.n	80162a2 <USART_SetConfig+0xab6>
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016234:	2b03      	cmp	r3, #3
 8016236:	d032      	beq.n	801629e <USART_SetConfig+0xab2>
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801623c:	2b04      	cmp	r3, #4
 801623e:	d02c      	beq.n	801629a <USART_SetConfig+0xaae>
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016244:	2b05      	cmp	r3, #5
 8016246:	d026      	beq.n	8016296 <USART_SetConfig+0xaaa>
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801624c:	2b06      	cmp	r3, #6
 801624e:	d020      	beq.n	8016292 <USART_SetConfig+0xaa6>
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016254:	2b07      	cmp	r3, #7
 8016256:	d01a      	beq.n	801628e <USART_SetConfig+0xaa2>
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801625c:	2b08      	cmp	r3, #8
 801625e:	d014      	beq.n	801628a <USART_SetConfig+0xa9e>
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016264:	2b09      	cmp	r3, #9
 8016266:	d00e      	beq.n	8016286 <USART_SetConfig+0xa9a>
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801626c:	2b0a      	cmp	r3, #10
 801626e:	d008      	beq.n	8016282 <USART_SetConfig+0xa96>
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016274:	2b0b      	cmp	r3, #11
 8016276:	d102      	bne.n	801627e <USART_SetConfig+0xa92>
 8016278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801627c:	e016      	b.n	80162ac <USART_SetConfig+0xac0>
 801627e:	2301      	movs	r3, #1
 8016280:	e014      	b.n	80162ac <USART_SetConfig+0xac0>
 8016282:	2380      	movs	r3, #128	@ 0x80
 8016284:	e012      	b.n	80162ac <USART_SetConfig+0xac0>
 8016286:	2340      	movs	r3, #64	@ 0x40
 8016288:	e010      	b.n	80162ac <USART_SetConfig+0xac0>
 801628a:	2320      	movs	r3, #32
 801628c:	e00e      	b.n	80162ac <USART_SetConfig+0xac0>
 801628e:	2310      	movs	r3, #16
 8016290:	e00c      	b.n	80162ac <USART_SetConfig+0xac0>
 8016292:	230c      	movs	r3, #12
 8016294:	e00a      	b.n	80162ac <USART_SetConfig+0xac0>
 8016296:	230a      	movs	r3, #10
 8016298:	e008      	b.n	80162ac <USART_SetConfig+0xac0>
 801629a:	2308      	movs	r3, #8
 801629c:	e006      	b.n	80162ac <USART_SetConfig+0xac0>
 801629e:	2306      	movs	r3, #6
 80162a0:	e004      	b.n	80162ac <USART_SetConfig+0xac0>
 80162a2:	2304      	movs	r3, #4
 80162a4:	e002      	b.n	80162ac <USART_SetConfig+0xac0>
 80162a6:	2302      	movs	r3, #2
 80162a8:	e000      	b.n	80162ac <USART_SetConfig+0xac0>
 80162aa:	2301      	movs	r3, #1
 80162ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80162b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80162b4:	005a      	lsls	r2, r3, #1
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	085b      	lsrs	r3, r3, #1
 80162bc:	441a      	add	r2, r3
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80162c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80162c8:	e003      	b.n	80162d2 <USART_SetConfig+0xae6>
 80162ca:	2301      	movs	r3, #1
 80162cc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80162d0:	bf00      	nop
 80162d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162d4:	2b0f      	cmp	r3, #15
 80162d6:	d916      	bls.n	8016306 <USART_SetConfig+0xb1a>
 80162d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80162de:	d212      	bcs.n	8016306 <USART_SetConfig+0xb1a>
 80162e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162e2:	b29b      	uxth	r3, r3
 80162e4:	f023 030f 	bic.w	r3, r3, #15
 80162e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80162ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162ec:	085b      	lsrs	r3, r3, #1
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	f003 0307 	and.w	r3, r3, #7
 80162f4:	b29a      	uxth	r2, r3
 80162f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80162f8:	4313      	orrs	r3, r2
 80162fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016302:	60da      	str	r2, [r3, #12]
 8016304:	e002      	b.n	801630c <USART_SetConfig+0xb20>
 8016306:	2301      	movs	r3, #1
 8016308:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2201      	movs	r2, #1
 8016310:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2201      	movs	r2, #1
 8016316:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2200      	movs	r2, #0
 801631c:	649a      	str	r2, [r3, #72]	@ 0x48
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2200      	movs	r2, #0
 8016322:	64da      	str	r2, [r3, #76]	@ 0x4c
 8016324:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8016328:	4618      	mov	r0, r3
 801632a:	3738      	adds	r7, #56	@ 0x38
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <USART_CheckIdleState>:
 8016330:	b580      	push	{r7, lr}
 8016332:	b086      	sub	sp, #24
 8016334:	af02      	add	r7, sp, #8
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	2200      	movs	r2, #0
 801633c:	65da      	str	r2, [r3, #92]	@ 0x5c
 801633e:	f7f2 fbd9 	bl	8008af4 <HAL_GetTick>
 8016342:	60f8      	str	r0, [r7, #12]
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	f003 0308 	and.w	r3, r3, #8
 801634e:	2b08      	cmp	r3, #8
 8016350:	d10e      	bne.n	8016370 <USART_CheckIdleState+0x40>
 8016352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016356:	9300      	str	r3, [sp, #0]
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	2200      	movs	r2, #0
 801635c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f7ff fa0d 	bl	8015780 <USART_WaitOnFlagUntilTimeout>
 8016366:	4603      	mov	r3, r0
 8016368:	2b00      	cmp	r3, #0
 801636a:	d001      	beq.n	8016370 <USART_CheckIdleState+0x40>
 801636c:	2303      	movs	r3, #3
 801636e:	e01e      	b.n	80163ae <USART_CheckIdleState+0x7e>
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	f003 0304 	and.w	r3, r3, #4
 801637a:	2b04      	cmp	r3, #4
 801637c:	d10e      	bne.n	801639c <USART_CheckIdleState+0x6c>
 801637e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016382:	9300      	str	r3, [sp, #0]
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2200      	movs	r2, #0
 8016388:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f7ff f9f7 	bl	8015780 <USART_WaitOnFlagUntilTimeout>
 8016392:	4603      	mov	r3, r0
 8016394:	2b00      	cmp	r3, #0
 8016396:	d001      	beq.n	801639c <USART_CheckIdleState+0x6c>
 8016398:	2303      	movs	r3, #3
 801639a:	e008      	b.n	80163ae <USART_CheckIdleState+0x7e>
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2201      	movs	r2, #1
 80163a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2200      	movs	r2, #0
 80163a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80163ac:	2300      	movs	r3, #0
 80163ae:	4618      	mov	r0, r3
 80163b0:	3710      	adds	r7, #16
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}

080163b6 <HAL_USARTEx_EnableSlaveMode>:
 80163b6:	b480      	push	{r7}
 80163b8:	b085      	sub	sp, #20
 80163ba:	af00      	add	r7, sp, #0
 80163bc:	6078      	str	r0, [r7, #4]
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d101      	bne.n	80163cc <HAL_USARTEx_EnableSlaveMode+0x16>
 80163c8:	2302      	movs	r3, #2
 80163ca:	e043      	b.n	8016454 <HAL_USARTEx_EnableSlaveMode+0x9e>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2201      	movs	r2, #1
 80163d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2202      	movs	r2, #2
 80163d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	60fb      	str	r3, [r7, #12]
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	681a      	ldr	r2, [r3, #0]
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	f022 0201 	bic.w	r2, r2, #1
 80163f2:	601a      	str	r2, [r3, #0]
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	685a      	ldr	r2, [r3, #4]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8016402:	605a      	str	r2, [r3, #4]
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	689a      	ldr	r2, [r3, #8]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8016412:	609a      	str	r2, [r3, #8]
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	685a      	ldr	r2, [r3, #4]
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	f042 0201 	orr.w	r2, r2, #1
 8016422:	605a      	str	r2, [r3, #4]
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	68fa      	ldr	r2, [r7, #12]
 801642a:	601a      	str	r2, [r3, #0]
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2201      	movs	r2, #1
 8016430:	641a      	str	r2, [r3, #64]	@ 0x40
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2201      	movs	r2, #1
 8016436:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	681a      	ldr	r2, [r3, #0]
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	f042 0201 	orr.w	r2, r2, #1
 8016448:	601a      	str	r2, [r3, #0]
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	2200      	movs	r2, #0
 801644e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8016452:	2300      	movs	r3, #0
 8016454:	4618      	mov	r0, r3
 8016456:	3714      	adds	r7, #20
 8016458:	46bd      	mov	sp, r7
 801645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645e:	4770      	bx	lr

08016460 <HAL_USARTEx_ConfigNSS>:
 8016460:	b480      	push	{r7}
 8016462:	b085      	sub	sp, #20
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8016470:	2b01      	cmp	r3, #1
 8016472:	d101      	bne.n	8016478 <HAL_USARTEx_ConfigNSS+0x18>
 8016474:	2302      	movs	r3, #2
 8016476:	e02a      	b.n	80164ce <HAL_USARTEx_ConfigNSS+0x6e>
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2201      	movs	r2, #1
 801647c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2202      	movs	r2, #2
 8016484:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	60fb      	str	r3, [r7, #12]
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	681a      	ldr	r2, [r3, #0]
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	f022 0201 	bic.w	r2, r2, #1
 801649e:	601a      	str	r2, [r3, #0]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	f023 0108 	bic.w	r1, r3, #8
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	683a      	ldr	r2, [r7, #0]
 80164b0:	430a      	orrs	r2, r1
 80164b2:	605a      	str	r2, [r3, #4]
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	68fa      	ldr	r2, [r7, #12]
 80164ba:	601a      	str	r2, [r3, #0]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2201      	movs	r2, #1
 80164c0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	2200      	movs	r2, #0
 80164c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80164cc:	2300      	movs	r3, #0
 80164ce:	4618      	mov	r0, r3
 80164d0:	3714      	adds	r7, #20
 80164d2:	46bd      	mov	sp, r7
 80164d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d8:	4770      	bx	lr

080164da <HAL_USARTEx_DisableFifoMode>:
 80164da:	b480      	push	{r7}
 80164dc:	b085      	sub	sp, #20
 80164de:	af00      	add	r7, sp, #0
 80164e0:	6078      	str	r0, [r7, #4]
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80164e8:	2b01      	cmp	r3, #1
 80164ea:	d101      	bne.n	80164f0 <HAL_USARTEx_DisableFifoMode+0x16>
 80164ec:	2302      	movs	r3, #2
 80164ee:	e027      	b.n	8016540 <HAL_USARTEx_DisableFifoMode+0x66>
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2201      	movs	r2, #1
 80164f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2202      	movs	r2, #2
 80164fc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	60fb      	str	r3, [r7, #12]
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	f022 0201 	bic.w	r2, r2, #1
 8016516:	601a      	str	r2, [r3, #0]
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801651e:	60fb      	str	r3, [r7, #12]
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2200      	movs	r2, #0
 8016524:	645a      	str	r2, [r3, #68]	@ 0x44
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	68fa      	ldr	r2, [r7, #12]
 801652c:	601a      	str	r2, [r3, #0]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	2201      	movs	r2, #1
 8016532:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	2200      	movs	r2, #0
 801653a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 801653e:	2300      	movs	r3, #0
 8016540:	4618      	mov	r0, r3
 8016542:	3714      	adds	r7, #20
 8016544:	46bd      	mov	sp, r7
 8016546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654a:	4770      	bx	lr

0801654c <HAL_USARTEx_SetTxFifoThreshold>:
 801654c:	b580      	push	{r7, lr}
 801654e:	b084      	sub	sp, #16
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
 8016554:	6039      	str	r1, [r7, #0]
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801655c:	2b01      	cmp	r3, #1
 801655e:	d101      	bne.n	8016564 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8016560:	2302      	movs	r3, #2
 8016562:	e02d      	b.n	80165c0 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2201      	movs	r2, #1
 8016568:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	2202      	movs	r2, #2
 8016570:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	60fb      	str	r3, [r7, #12]
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	681a      	ldr	r2, [r3, #0]
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	f022 0201 	bic.w	r2, r2, #1
 801658a:	601a      	str	r2, [r3, #0]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	689b      	ldr	r3, [r3, #8]
 8016592:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	683a      	ldr	r2, [r7, #0]
 801659c:	430a      	orrs	r2, r1
 801659e:	609a      	str	r2, [r3, #8]
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f000 f84f 	bl	8016644 <USARTEx_SetNbDataToProcess>
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	68fa      	ldr	r2, [r7, #12]
 80165ac:	601a      	str	r2, [r3, #0]
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	2201      	movs	r2, #1
 80165b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2200      	movs	r2, #0
 80165ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80165be:	2300      	movs	r3, #0
 80165c0:	4618      	mov	r0, r3
 80165c2:	3710      	adds	r7, #16
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd80      	pop	{r7, pc}

080165c8 <HAL_USARTEx_SetRxFifoThreshold>:
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b084      	sub	sp, #16
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	6039      	str	r1, [r7, #0]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80165d8:	2b01      	cmp	r3, #1
 80165da:	d101      	bne.n	80165e0 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80165dc:	2302      	movs	r3, #2
 80165de:	e02d      	b.n	801663c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2201      	movs	r2, #1
 80165e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2202      	movs	r2, #2
 80165ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	60fb      	str	r3, [r7, #12]
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	681a      	ldr	r2, [r3, #0]
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	f022 0201 	bic.w	r2, r2, #1
 8016606:	601a      	str	r2, [r3, #0]
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	689b      	ldr	r3, [r3, #8]
 801660e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	683a      	ldr	r2, [r7, #0]
 8016618:	430a      	orrs	r2, r1
 801661a:	609a      	str	r2, [r3, #8]
 801661c:	6878      	ldr	r0, [r7, #4]
 801661e:	f000 f811 	bl	8016644 <USARTEx_SetNbDataToProcess>
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	68fa      	ldr	r2, [r7, #12]
 8016628:	601a      	str	r2, [r3, #0]
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	2201      	movs	r2, #1
 801662e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2200      	movs	r2, #0
 8016636:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 801663a:	2300      	movs	r3, #0
 801663c:	4618      	mov	r0, r3
 801663e:	3710      	adds	r7, #16
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}

08016644 <USARTEx_SetNbDataToProcess>:
 8016644:	b480      	push	{r7}
 8016646:	b085      	sub	sp, #20
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016650:	2b00      	cmp	r3, #0
 8016652:	d106      	bne.n	8016662 <USARTEx_SetNbDataToProcess+0x1e>
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	2201      	movs	r2, #1
 8016658:	879a      	strh	r2, [r3, #60]	@ 0x3c
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2201      	movs	r2, #1
 801665e:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8016660:	e02f      	b.n	80166c2 <USARTEx_SetNbDataToProcess+0x7e>
 8016662:	2310      	movs	r3, #16
 8016664:	73fb      	strb	r3, [r7, #15]
 8016666:	2310      	movs	r3, #16
 8016668:	73bb      	strb	r3, [r7, #14]
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	689b      	ldr	r3, [r3, #8]
 8016670:	0e5b      	lsrs	r3, r3, #25
 8016672:	b2db      	uxtb	r3, r3
 8016674:	f003 0307 	and.w	r3, r3, #7
 8016678:	737b      	strb	r3, [r7, #13]
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	689b      	ldr	r3, [r3, #8]
 8016680:	0f5b      	lsrs	r3, r3, #29
 8016682:	b2db      	uxtb	r3, r3
 8016684:	f003 0307 	and.w	r3, r3, #7
 8016688:	733b      	strb	r3, [r7, #12]
 801668a:	7bbb      	ldrb	r3, [r7, #14]
 801668c:	7b3a      	ldrb	r2, [r7, #12]
 801668e:	4910      	ldr	r1, [pc, #64]	@ (80166d0 <USARTEx_SetNbDataToProcess+0x8c>)
 8016690:	5c8a      	ldrb	r2, [r1, r2]
 8016692:	fb02 f303 	mul.w	r3, r2, r3
 8016696:	7b3a      	ldrb	r2, [r7, #12]
 8016698:	490e      	ldr	r1, [pc, #56]	@ (80166d4 <USARTEx_SetNbDataToProcess+0x90>)
 801669a:	5c8a      	ldrb	r2, [r1, r2]
 801669c:	fb93 f3f2 	sdiv	r3, r3, r2
 80166a0:	b29a      	uxth	r2, r3
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80166a6:	7bfb      	ldrb	r3, [r7, #15]
 80166a8:	7b7a      	ldrb	r2, [r7, #13]
 80166aa:	4909      	ldr	r1, [pc, #36]	@ (80166d0 <USARTEx_SetNbDataToProcess+0x8c>)
 80166ac:	5c8a      	ldrb	r2, [r1, r2]
 80166ae:	fb02 f303 	mul.w	r3, r2, r3
 80166b2:	7b7a      	ldrb	r2, [r7, #13]
 80166b4:	4907      	ldr	r1, [pc, #28]	@ (80166d4 <USARTEx_SetNbDataToProcess+0x90>)
 80166b6:	5c8a      	ldrb	r2, [r1, r2]
 80166b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80166bc:	b29a      	uxth	r2, r3
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	875a      	strh	r2, [r3, #58]	@ 0x3a
 80166c2:	bf00      	nop
 80166c4:	3714      	adds	r7, #20
 80166c6:	46bd      	mov	sp, r7
 80166c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166cc:	4770      	bx	lr
 80166ce:	bf00      	nop
 80166d0:	0801c2dc 	.word	0x0801c2dc
 80166d4:	0801c2e4 	.word	0x0801c2e4

080166d8 <SDMMC_Init>:
 80166d8:	b084      	sub	sp, #16
 80166da:	b480      	push	{r7}
 80166dc:	b085      	sub	sp, #20
 80166de:	af00      	add	r7, sp, #0
 80166e0:	6078      	str	r0, [r7, #4]
 80166e2:	f107 001c 	add.w	r0, r7, #28
 80166e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80166ea:	2300      	movs	r3, #0
 80166ec:	60fb      	str	r3, [r7, #12]
 80166ee:	69fa      	ldr	r2, [r7, #28]
 80166f0:	6a3b      	ldr	r3, [r7, #32]
 80166f2:	431a      	orrs	r2, r3
 80166f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f6:	431a      	orrs	r2, r3
 80166f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166fa:	431a      	orrs	r2, r3
 80166fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166fe:	4313      	orrs	r3, r2
 8016700:	68fa      	ldr	r2, [r7, #12]
 8016702:	4313      	orrs	r3, r2
 8016704:	60fb      	str	r3, [r7, #12]
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	685a      	ldr	r2, [r3, #4]
 801670a:	4b07      	ldr	r3, [pc, #28]	@ (8016728 <SDMMC_Init+0x50>)
 801670c:	4013      	ands	r3, r2
 801670e:	68fa      	ldr	r2, [r7, #12]
 8016710:	431a      	orrs	r2, r3
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	605a      	str	r2, [r3, #4]
 8016716:	2300      	movs	r3, #0
 8016718:	4618      	mov	r0, r3
 801671a:	3714      	adds	r7, #20
 801671c:	46bd      	mov	sp, r7
 801671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016722:	b004      	add	sp, #16
 8016724:	4770      	bx	lr
 8016726:	bf00      	nop
 8016728:	ffc02c00 	.word	0xffc02c00

0801672c <SDMMC_ReadFIFO>:
 801672c:	b480      	push	{r7}
 801672e:	b083      	sub	sp, #12
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801673a:	4618      	mov	r0, r3
 801673c:	370c      	adds	r7, #12
 801673e:	46bd      	mov	sp, r7
 8016740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016744:	4770      	bx	lr

08016746 <SDMMC_WriteFIFO>:
 8016746:	b480      	push	{r7}
 8016748:	b083      	sub	sp, #12
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
 801674e:	6039      	str	r1, [r7, #0]
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	681a      	ldr	r2, [r3, #0]
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 801675a:	2300      	movs	r3, #0
 801675c:	4618      	mov	r0, r3
 801675e:	370c      	adds	r7, #12
 8016760:	46bd      	mov	sp, r7
 8016762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016766:	4770      	bx	lr

08016768 <SDMMC_PowerState_ON>:
 8016768:	b480      	push	{r7}
 801676a:	b083      	sub	sp, #12
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	f043 0203 	orr.w	r2, r3, #3
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	601a      	str	r2, [r3, #0]
 801677c:	2300      	movs	r3, #0
 801677e:	4618      	mov	r0, r3
 8016780:	370c      	adds	r7, #12
 8016782:	46bd      	mov	sp, r7
 8016784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016788:	4770      	bx	lr

0801678a <SDMMC_GetPowerState>:
 801678a:	b480      	push	{r7}
 801678c:	b083      	sub	sp, #12
 801678e:	af00      	add	r7, sp, #0
 8016790:	6078      	str	r0, [r7, #4]
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	f003 0303 	and.w	r3, r3, #3
 801679a:	4618      	mov	r0, r3
 801679c:	370c      	adds	r7, #12
 801679e:	46bd      	mov	sp, r7
 80167a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a4:	4770      	bx	lr
	...

080167a8 <SDMMC_SendCommand>:
 80167a8:	b480      	push	{r7}
 80167aa:	b085      	sub	sp, #20
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
 80167b0:	6039      	str	r1, [r7, #0]
 80167b2:	2300      	movs	r3, #0
 80167b4:	60fb      	str	r3, [r7, #12]
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	609a      	str	r2, [r3, #8]
 80167be:	683b      	ldr	r3, [r7, #0]
 80167c0:	685a      	ldr	r2, [r3, #4]
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	689b      	ldr	r3, [r3, #8]
 80167c6:	431a      	orrs	r2, r3
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	68db      	ldr	r3, [r3, #12]
 80167cc:	431a      	orrs	r2, r3
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	691b      	ldr	r3, [r3, #16]
 80167d2:	4313      	orrs	r3, r2
 80167d4:	68fa      	ldr	r2, [r7, #12]
 80167d6:	4313      	orrs	r3, r2
 80167d8:	60fb      	str	r3, [r7, #12]
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	68da      	ldr	r2, [r3, #12]
 80167de:	4b06      	ldr	r3, [pc, #24]	@ (80167f8 <SDMMC_SendCommand+0x50>)
 80167e0:	4013      	ands	r3, r2
 80167e2:	68fa      	ldr	r2, [r7, #12]
 80167e4:	431a      	orrs	r2, r3
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	60da      	str	r2, [r3, #12]
 80167ea:	2300      	movs	r3, #0
 80167ec:	4618      	mov	r0, r3
 80167ee:	3714      	adds	r7, #20
 80167f0:	46bd      	mov	sp, r7
 80167f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f6:	4770      	bx	lr
 80167f8:	fffee0c0 	.word	0xfffee0c0

080167fc <SDMMC_GetCommandResponse>:
 80167fc:	b480      	push	{r7}
 80167fe:	b083      	sub	sp, #12
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	691b      	ldr	r3, [r3, #16]
 8016808:	b2db      	uxtb	r3, r3
 801680a:	4618      	mov	r0, r3
 801680c:	370c      	adds	r7, #12
 801680e:	46bd      	mov	sp, r7
 8016810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016814:	4770      	bx	lr

08016816 <SDMMC_GetResponse>:
 8016816:	b480      	push	{r7}
 8016818:	b085      	sub	sp, #20
 801681a:	af00      	add	r7, sp, #0
 801681c:	6078      	str	r0, [r7, #4]
 801681e:	6039      	str	r1, [r7, #0]
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	3314      	adds	r3, #20
 8016824:	461a      	mov	r2, r3
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	4413      	add	r3, r2
 801682a:	60fb      	str	r3, [r7, #12]
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	4618      	mov	r0, r3
 8016832:	3714      	adds	r7, #20
 8016834:	46bd      	mov	sp, r7
 8016836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683a:	4770      	bx	lr

0801683c <SDMMC_ConfigData>:
 801683c:	b480      	push	{r7}
 801683e:	b085      	sub	sp, #20
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
 8016844:	6039      	str	r1, [r7, #0]
 8016846:	2300      	movs	r3, #0
 8016848:	60fb      	str	r3, [r7, #12]
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	681a      	ldr	r2, [r3, #0]
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	625a      	str	r2, [r3, #36]	@ 0x24
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	685a      	ldr	r2, [r3, #4]
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	629a      	str	r2, [r3, #40]	@ 0x28
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	689a      	ldr	r2, [r3, #8]
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	68db      	ldr	r3, [r3, #12]
 8016862:	431a      	orrs	r2, r3
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	691b      	ldr	r3, [r3, #16]
 8016868:	431a      	orrs	r2, r3
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	695b      	ldr	r3, [r3, #20]
 801686e:	4313      	orrs	r3, r2
 8016870:	68fa      	ldr	r2, [r7, #12]
 8016872:	4313      	orrs	r3, r2
 8016874:	60fb      	str	r3, [r7, #12]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801687a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	431a      	orrs	r2, r3
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016886:	2300      	movs	r3, #0
 8016888:	4618      	mov	r0, r3
 801688a:	3714      	adds	r7, #20
 801688c:	46bd      	mov	sp, r7
 801688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016892:	4770      	bx	lr

08016894 <SDMMC_CmdBlockLength>:
 8016894:	b580      	push	{r7, lr}
 8016896:	b088      	sub	sp, #32
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	6039      	str	r1, [r7, #0]
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	60bb      	str	r3, [r7, #8]
 80168a2:	2310      	movs	r3, #16
 80168a4:	60fb      	str	r3, [r7, #12]
 80168a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80168aa:	613b      	str	r3, [r7, #16]
 80168ac:	2300      	movs	r3, #0
 80168ae:	617b      	str	r3, [r7, #20]
 80168b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80168b4:	61bb      	str	r3, [r7, #24]
 80168b6:	f107 0308 	add.w	r3, r7, #8
 80168ba:	4619      	mov	r1, r3
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f7ff ff73 	bl	80167a8 <SDMMC_SendCommand>
 80168c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80168c6:	2110      	movs	r1, #16
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f000 fa5f 	bl	8016d8c <SDMMC_GetCmdResp1>
 80168ce:	61f8      	str	r0, [r7, #28]
 80168d0:	69fb      	ldr	r3, [r7, #28]
 80168d2:	4618      	mov	r0, r3
 80168d4:	3720      	adds	r7, #32
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}

080168da <SDMMC_CmdReadSingleBlock>:
 80168da:	b580      	push	{r7, lr}
 80168dc:	b088      	sub	sp, #32
 80168de:	af00      	add	r7, sp, #0
 80168e0:	6078      	str	r0, [r7, #4]
 80168e2:	6039      	str	r1, [r7, #0]
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	60bb      	str	r3, [r7, #8]
 80168e8:	2311      	movs	r3, #17
 80168ea:	60fb      	str	r3, [r7, #12]
 80168ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80168f0:	613b      	str	r3, [r7, #16]
 80168f2:	2300      	movs	r3, #0
 80168f4:	617b      	str	r3, [r7, #20]
 80168f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80168fa:	61bb      	str	r3, [r7, #24]
 80168fc:	f107 0308 	add.w	r3, r7, #8
 8016900:	4619      	mov	r1, r3
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	f7ff ff50 	bl	80167a8 <SDMMC_SendCommand>
 8016908:	f241 3288 	movw	r2, #5000	@ 0x1388
 801690c:	2111      	movs	r1, #17
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f000 fa3c 	bl	8016d8c <SDMMC_GetCmdResp1>
 8016914:	61f8      	str	r0, [r7, #28]
 8016916:	69fb      	ldr	r3, [r7, #28]
 8016918:	4618      	mov	r0, r3
 801691a:	3720      	adds	r7, #32
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <SDMMC_CmdReadMultiBlock>:
 8016920:	b580      	push	{r7, lr}
 8016922:	b088      	sub	sp, #32
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	6039      	str	r1, [r7, #0]
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	60bb      	str	r3, [r7, #8]
 801692e:	2312      	movs	r3, #18
 8016930:	60fb      	str	r3, [r7, #12]
 8016932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016936:	613b      	str	r3, [r7, #16]
 8016938:	2300      	movs	r3, #0
 801693a:	617b      	str	r3, [r7, #20]
 801693c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016940:	61bb      	str	r3, [r7, #24]
 8016942:	f107 0308 	add.w	r3, r7, #8
 8016946:	4619      	mov	r1, r3
 8016948:	6878      	ldr	r0, [r7, #4]
 801694a:	f7ff ff2d 	bl	80167a8 <SDMMC_SendCommand>
 801694e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016952:	2112      	movs	r1, #18
 8016954:	6878      	ldr	r0, [r7, #4]
 8016956:	f000 fa19 	bl	8016d8c <SDMMC_GetCmdResp1>
 801695a:	61f8      	str	r0, [r7, #28]
 801695c:	69fb      	ldr	r3, [r7, #28]
 801695e:	4618      	mov	r0, r3
 8016960:	3720      	adds	r7, #32
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}

08016966 <SDMMC_CmdWriteSingleBlock>:
 8016966:	b580      	push	{r7, lr}
 8016968:	b088      	sub	sp, #32
 801696a:	af00      	add	r7, sp, #0
 801696c:	6078      	str	r0, [r7, #4]
 801696e:	6039      	str	r1, [r7, #0]
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	60bb      	str	r3, [r7, #8]
 8016974:	2318      	movs	r3, #24
 8016976:	60fb      	str	r3, [r7, #12]
 8016978:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801697c:	613b      	str	r3, [r7, #16]
 801697e:	2300      	movs	r3, #0
 8016980:	617b      	str	r3, [r7, #20]
 8016982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016986:	61bb      	str	r3, [r7, #24]
 8016988:	f107 0308 	add.w	r3, r7, #8
 801698c:	4619      	mov	r1, r3
 801698e:	6878      	ldr	r0, [r7, #4]
 8016990:	f7ff ff0a 	bl	80167a8 <SDMMC_SendCommand>
 8016994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016998:	2118      	movs	r1, #24
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	f000 f9f6 	bl	8016d8c <SDMMC_GetCmdResp1>
 80169a0:	61f8      	str	r0, [r7, #28]
 80169a2:	69fb      	ldr	r3, [r7, #28]
 80169a4:	4618      	mov	r0, r3
 80169a6:	3720      	adds	r7, #32
 80169a8:	46bd      	mov	sp, r7
 80169aa:	bd80      	pop	{r7, pc}

080169ac <SDMMC_CmdWriteMultiBlock>:
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b088      	sub	sp, #32
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
 80169b4:	6039      	str	r1, [r7, #0]
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	60bb      	str	r3, [r7, #8]
 80169ba:	2319      	movs	r3, #25
 80169bc:	60fb      	str	r3, [r7, #12]
 80169be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80169c2:	613b      	str	r3, [r7, #16]
 80169c4:	2300      	movs	r3, #0
 80169c6:	617b      	str	r3, [r7, #20]
 80169c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80169cc:	61bb      	str	r3, [r7, #24]
 80169ce:	f107 0308 	add.w	r3, r7, #8
 80169d2:	4619      	mov	r1, r3
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f7ff fee7 	bl	80167a8 <SDMMC_SendCommand>
 80169da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80169de:	2119      	movs	r1, #25
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f000 f9d3 	bl	8016d8c <SDMMC_GetCmdResp1>
 80169e6:	61f8      	str	r0, [r7, #28]
 80169e8:	69fb      	ldr	r3, [r7, #28]
 80169ea:	4618      	mov	r0, r3
 80169ec:	3720      	adds	r7, #32
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}
	...

080169f4 <SDMMC_CmdStopTransfer>:
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b088      	sub	sp, #32
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
 80169fc:	2300      	movs	r3, #0
 80169fe:	60bb      	str	r3, [r7, #8]
 8016a00:	230c      	movs	r3, #12
 8016a02:	60fb      	str	r3, [r7, #12]
 8016a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016a08:	613b      	str	r3, [r7, #16]
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	617b      	str	r3, [r7, #20]
 8016a0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016a12:	61bb      	str	r3, [r7, #24]
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	68db      	ldr	r3, [r3, #12]
 8016a18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	60da      	str	r2, [r3, #12]
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	68db      	ldr	r3, [r3, #12]
 8016a24:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	60da      	str	r2, [r3, #12]
 8016a2c:	f107 0308 	add.w	r3, r7, #8
 8016a30:	4619      	mov	r1, r3
 8016a32:	6878      	ldr	r0, [r7, #4]
 8016a34:	f7ff feb8 	bl	80167a8 <SDMMC_SendCommand>
 8016a38:	4a0b      	ldr	r2, [pc, #44]	@ (8016a68 <SDMMC_CmdStopTransfer+0x74>)
 8016a3a:	210c      	movs	r1, #12
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	f000 f9a5 	bl	8016d8c <SDMMC_GetCmdResp1>
 8016a42:	61f8      	str	r0, [r7, #28]
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	68db      	ldr	r3, [r3, #12]
 8016a48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	60da      	str	r2, [r3, #12]
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016a56:	d101      	bne.n	8016a5c <SDMMC_CmdStopTransfer+0x68>
 8016a58:	2300      	movs	r3, #0
 8016a5a:	61fb      	str	r3, [r7, #28]
 8016a5c:	69fb      	ldr	r3, [r7, #28]
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3720      	adds	r7, #32
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	05f5e100 	.word	0x05f5e100

08016a6c <SDMMC_CmdSelDesel>:
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b088      	sub	sp, #32
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
 8016a74:	6039      	str	r1, [r7, #0]
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	60bb      	str	r3, [r7, #8]
 8016a7a:	2307      	movs	r3, #7
 8016a7c:	60fb      	str	r3, [r7, #12]
 8016a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016a82:	613b      	str	r3, [r7, #16]
 8016a84:	2300      	movs	r3, #0
 8016a86:	617b      	str	r3, [r7, #20]
 8016a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016a8c:	61bb      	str	r3, [r7, #24]
 8016a8e:	f107 0308 	add.w	r3, r7, #8
 8016a92:	4619      	mov	r1, r3
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f7ff fe87 	bl	80167a8 <SDMMC_SendCommand>
 8016a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016a9e:	2107      	movs	r1, #7
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f000 f973 	bl	8016d8c <SDMMC_GetCmdResp1>
 8016aa6:	61f8      	str	r0, [r7, #28]
 8016aa8:	69fb      	ldr	r3, [r7, #28]
 8016aaa:	4618      	mov	r0, r3
 8016aac:	3720      	adds	r7, #32
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}

08016ab2 <SDMMC_CmdGoIdleState>:
 8016ab2:	b580      	push	{r7, lr}
 8016ab4:	b088      	sub	sp, #32
 8016ab6:	af00      	add	r7, sp, #0
 8016ab8:	6078      	str	r0, [r7, #4]
 8016aba:	2300      	movs	r3, #0
 8016abc:	60bb      	str	r3, [r7, #8]
 8016abe:	2300      	movs	r3, #0
 8016ac0:	60fb      	str	r3, [r7, #12]
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	613b      	str	r3, [r7, #16]
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	617b      	str	r3, [r7, #20]
 8016aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016ace:	61bb      	str	r3, [r7, #24]
 8016ad0:	f107 0308 	add.w	r3, r7, #8
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f7ff fe66 	bl	80167a8 <SDMMC_SendCommand>
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f000 fb97 	bl	8017210 <SDMMC_GetCmdError>
 8016ae2:	61f8      	str	r0, [r7, #28]
 8016ae4:	69fb      	ldr	r3, [r7, #28]
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3720      	adds	r7, #32
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <SDMMC_CmdOperCond>:
 8016aee:	b580      	push	{r7, lr}
 8016af0:	b088      	sub	sp, #32
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
 8016af6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8016afa:	60bb      	str	r3, [r7, #8]
 8016afc:	2308      	movs	r3, #8
 8016afe:	60fb      	str	r3, [r7, #12]
 8016b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016b04:	613b      	str	r3, [r7, #16]
 8016b06:	2300      	movs	r3, #0
 8016b08:	617b      	str	r3, [r7, #20]
 8016b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016b0e:	61bb      	str	r3, [r7, #24]
 8016b10:	f107 0308 	add.w	r3, r7, #8
 8016b14:	4619      	mov	r1, r3
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	f7ff fe46 	bl	80167a8 <SDMMC_SendCommand>
 8016b1c:	6878      	ldr	r0, [r7, #4]
 8016b1e:	f000 fb29 	bl	8017174 <SDMMC_GetCmdResp7>
 8016b22:	61f8      	str	r0, [r7, #28]
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	4618      	mov	r0, r3
 8016b28:	3720      	adds	r7, #32
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}

08016b2e <SDMMC_CmdAppCommand>:
 8016b2e:	b580      	push	{r7, lr}
 8016b30:	b088      	sub	sp, #32
 8016b32:	af00      	add	r7, sp, #0
 8016b34:	6078      	str	r0, [r7, #4]
 8016b36:	6039      	str	r1, [r7, #0]
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	60bb      	str	r3, [r7, #8]
 8016b3c:	2337      	movs	r3, #55	@ 0x37
 8016b3e:	60fb      	str	r3, [r7, #12]
 8016b40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016b44:	613b      	str	r3, [r7, #16]
 8016b46:	2300      	movs	r3, #0
 8016b48:	617b      	str	r3, [r7, #20]
 8016b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016b4e:	61bb      	str	r3, [r7, #24]
 8016b50:	f107 0308 	add.w	r3, r7, #8
 8016b54:	4619      	mov	r1, r3
 8016b56:	6878      	ldr	r0, [r7, #4]
 8016b58:	f7ff fe26 	bl	80167a8 <SDMMC_SendCommand>
 8016b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016b60:	2137      	movs	r1, #55	@ 0x37
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f000 f912 	bl	8016d8c <SDMMC_GetCmdResp1>
 8016b68:	61f8      	str	r0, [r7, #28]
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3720      	adds	r7, #32
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd80      	pop	{r7, pc}

08016b74 <SDMMC_CmdAppOperCommand>:
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b088      	sub	sp, #32
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
 8016b7c:	6039      	str	r1, [r7, #0]
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	60bb      	str	r3, [r7, #8]
 8016b82:	2329      	movs	r3, #41	@ 0x29
 8016b84:	60fb      	str	r3, [r7, #12]
 8016b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016b8a:	613b      	str	r3, [r7, #16]
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	617b      	str	r3, [r7, #20]
 8016b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016b94:	61bb      	str	r3, [r7, #24]
 8016b96:	f107 0308 	add.w	r3, r7, #8
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	f7ff fe03 	bl	80167a8 <SDMMC_SendCommand>
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	f000 fa2e 	bl	8017004 <SDMMC_GetCmdResp3>
 8016ba8:	61f8      	str	r0, [r7, #28]
 8016baa:	69fb      	ldr	r3, [r7, #28]
 8016bac:	4618      	mov	r0, r3
 8016bae:	3720      	adds	r7, #32
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}

08016bb4 <SDMMC_CmdBusWidth>:
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b088      	sub	sp, #32
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
 8016bbc:	6039      	str	r1, [r7, #0]
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	60bb      	str	r3, [r7, #8]
 8016bc2:	2306      	movs	r3, #6
 8016bc4:	60fb      	str	r3, [r7, #12]
 8016bc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016bca:	613b      	str	r3, [r7, #16]
 8016bcc:	2300      	movs	r3, #0
 8016bce:	617b      	str	r3, [r7, #20]
 8016bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016bd4:	61bb      	str	r3, [r7, #24]
 8016bd6:	f107 0308 	add.w	r3, r7, #8
 8016bda:	4619      	mov	r1, r3
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f7ff fde3 	bl	80167a8 <SDMMC_SendCommand>
 8016be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016be6:	2106      	movs	r1, #6
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f000 f8cf 	bl	8016d8c <SDMMC_GetCmdResp1>
 8016bee:	61f8      	str	r0, [r7, #28]
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3720      	adds	r7, #32
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}

08016bfa <SDMMC_CmdSendSCR>:
 8016bfa:	b580      	push	{r7, lr}
 8016bfc:	b088      	sub	sp, #32
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	6078      	str	r0, [r7, #4]
 8016c02:	2300      	movs	r3, #0
 8016c04:	60bb      	str	r3, [r7, #8]
 8016c06:	2333      	movs	r3, #51	@ 0x33
 8016c08:	60fb      	str	r3, [r7, #12]
 8016c0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016c0e:	613b      	str	r3, [r7, #16]
 8016c10:	2300      	movs	r3, #0
 8016c12:	617b      	str	r3, [r7, #20]
 8016c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016c18:	61bb      	str	r3, [r7, #24]
 8016c1a:	f107 0308 	add.w	r3, r7, #8
 8016c1e:	4619      	mov	r1, r3
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f7ff fdc1 	bl	80167a8 <SDMMC_SendCommand>
 8016c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016c2a:	2133      	movs	r1, #51	@ 0x33
 8016c2c:	6878      	ldr	r0, [r7, #4]
 8016c2e:	f000 f8ad 	bl	8016d8c <SDMMC_GetCmdResp1>
 8016c32:	61f8      	str	r0, [r7, #28]
 8016c34:	69fb      	ldr	r3, [r7, #28]
 8016c36:	4618      	mov	r0, r3
 8016c38:	3720      	adds	r7, #32
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}

08016c3e <SDMMC_CmdSendCID>:
 8016c3e:	b580      	push	{r7, lr}
 8016c40:	b088      	sub	sp, #32
 8016c42:	af00      	add	r7, sp, #0
 8016c44:	6078      	str	r0, [r7, #4]
 8016c46:	2300      	movs	r3, #0
 8016c48:	60bb      	str	r3, [r7, #8]
 8016c4a:	2302      	movs	r3, #2
 8016c4c:	60fb      	str	r3, [r7, #12]
 8016c4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8016c52:	613b      	str	r3, [r7, #16]
 8016c54:	2300      	movs	r3, #0
 8016c56:	617b      	str	r3, [r7, #20]
 8016c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016c5c:	61bb      	str	r3, [r7, #24]
 8016c5e:	f107 0308 	add.w	r3, r7, #8
 8016c62:	4619      	mov	r1, r3
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f7ff fd9f 	bl	80167a8 <SDMMC_SendCommand>
 8016c6a:	6878      	ldr	r0, [r7, #4]
 8016c6c:	f000 f980 	bl	8016f70 <SDMMC_GetCmdResp2>
 8016c70:	61f8      	str	r0, [r7, #28]
 8016c72:	69fb      	ldr	r3, [r7, #28]
 8016c74:	4618      	mov	r0, r3
 8016c76:	3720      	adds	r7, #32
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}

08016c7c <SDMMC_CmdSendCSD>:
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b088      	sub	sp, #32
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
 8016c84:	6039      	str	r1, [r7, #0]
 8016c86:	683b      	ldr	r3, [r7, #0]
 8016c88:	60bb      	str	r3, [r7, #8]
 8016c8a:	2309      	movs	r3, #9
 8016c8c:	60fb      	str	r3, [r7, #12]
 8016c8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8016c92:	613b      	str	r3, [r7, #16]
 8016c94:	2300      	movs	r3, #0
 8016c96:	617b      	str	r3, [r7, #20]
 8016c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016c9c:	61bb      	str	r3, [r7, #24]
 8016c9e:	f107 0308 	add.w	r3, r7, #8
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	f7ff fd7f 	bl	80167a8 <SDMMC_SendCommand>
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f000 f960 	bl	8016f70 <SDMMC_GetCmdResp2>
 8016cb0:	61f8      	str	r0, [r7, #28]
 8016cb2:	69fb      	ldr	r3, [r7, #28]
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3720      	adds	r7, #32
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}

08016cbc <SDMMC_CmdSetRelAdd>:
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b088      	sub	sp, #32
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	60bb      	str	r3, [r7, #8]
 8016cca:	2303      	movs	r3, #3
 8016ccc:	60fb      	str	r3, [r7, #12]
 8016cce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016cd2:	613b      	str	r3, [r7, #16]
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	617b      	str	r3, [r7, #20]
 8016cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016cdc:	61bb      	str	r3, [r7, #24]
 8016cde:	f107 0308 	add.w	r3, r7, #8
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f7ff fd5f 	bl	80167a8 <SDMMC_SendCommand>
 8016cea:	683a      	ldr	r2, [r7, #0]
 8016cec:	2103      	movs	r1, #3
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f000 f9c8 	bl	8017084 <SDMMC_GetCmdResp6>
 8016cf4:	61f8      	str	r0, [r7, #28]
 8016cf6:	69fb      	ldr	r3, [r7, #28]
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3720      	adds	r7, #32
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}

08016d00 <SDMMC_CmdSendStatus>:
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b088      	sub	sp, #32
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
 8016d08:	6039      	str	r1, [r7, #0]
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	60bb      	str	r3, [r7, #8]
 8016d0e:	230d      	movs	r3, #13
 8016d10:	60fb      	str	r3, [r7, #12]
 8016d12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016d16:	613b      	str	r3, [r7, #16]
 8016d18:	2300      	movs	r3, #0
 8016d1a:	617b      	str	r3, [r7, #20]
 8016d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016d20:	61bb      	str	r3, [r7, #24]
 8016d22:	f107 0308 	add.w	r3, r7, #8
 8016d26:	4619      	mov	r1, r3
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	f7ff fd3d 	bl	80167a8 <SDMMC_SendCommand>
 8016d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016d32:	210d      	movs	r1, #13
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f000 f829 	bl	8016d8c <SDMMC_GetCmdResp1>
 8016d3a:	61f8      	str	r0, [r7, #28]
 8016d3c:	69fb      	ldr	r3, [r7, #28]
 8016d3e:	4618      	mov	r0, r3
 8016d40:	3720      	adds	r7, #32
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd80      	pop	{r7, pc}

08016d46 <SDMMC_CmdStatusRegister>:
 8016d46:	b580      	push	{r7, lr}
 8016d48:	b088      	sub	sp, #32
 8016d4a:	af00      	add	r7, sp, #0
 8016d4c:	6078      	str	r0, [r7, #4]
 8016d4e:	2300      	movs	r3, #0
 8016d50:	60bb      	str	r3, [r7, #8]
 8016d52:	230d      	movs	r3, #13
 8016d54:	60fb      	str	r3, [r7, #12]
 8016d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016d5a:	613b      	str	r3, [r7, #16]
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	617b      	str	r3, [r7, #20]
 8016d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016d64:	61bb      	str	r3, [r7, #24]
 8016d66:	f107 0308 	add.w	r3, r7, #8
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f7ff fd1b 	bl	80167a8 <SDMMC_SendCommand>
 8016d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016d76:	210d      	movs	r1, #13
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	f000 f807 	bl	8016d8c <SDMMC_GetCmdResp1>
 8016d7e:	61f8      	str	r0, [r7, #28]
 8016d80:	69fb      	ldr	r3, [r7, #28]
 8016d82:	4618      	mov	r0, r3
 8016d84:	3720      	adds	r7, #32
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}
	...

08016d8c <SDMMC_GetCmdResp1>:
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b088      	sub	sp, #32
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	60f8      	str	r0, [r7, #12]
 8016d94:	460b      	mov	r3, r1
 8016d96:	607a      	str	r2, [r7, #4]
 8016d98:	72fb      	strb	r3, [r7, #11]
 8016d9a:	4b70      	ldr	r3, [pc, #448]	@ (8016f5c <SDMMC_GetCmdResp1+0x1d0>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	4a70      	ldr	r2, [pc, #448]	@ (8016f60 <SDMMC_GetCmdResp1+0x1d4>)
 8016da0:	fba2 2303 	umull	r2, r3, r2, r3
 8016da4:	0a5a      	lsrs	r2, r3, #9
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	fb02 f303 	mul.w	r3, r2, r3
 8016dac:	61fb      	str	r3, [r7, #28]
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	1e5a      	subs	r2, r3, #1
 8016db2:	61fa      	str	r2, [r7, #28]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d102      	bne.n	8016dbe <SDMMC_GetCmdResp1+0x32>
 8016db8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016dbc:	e0c9      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016dc2:	61bb      	str	r3, [r7, #24]
 8016dc4:	69ba      	ldr	r2, [r7, #24]
 8016dc6:	4b67      	ldr	r3, [pc, #412]	@ (8016f64 <SDMMC_GetCmdResp1+0x1d8>)
 8016dc8:	4013      	ands	r3, r2
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d0ef      	beq.n	8016dae <SDMMC_GetCmdResp1+0x22>
 8016dce:	69bb      	ldr	r3, [r7, #24]
 8016dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d1ea      	bne.n	8016dae <SDMMC_GetCmdResp1+0x22>
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ddc:	f003 0304 	and.w	r3, r3, #4
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d004      	beq.n	8016dee <SDMMC_GetCmdResp1+0x62>
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	2204      	movs	r2, #4
 8016de8:	639a      	str	r2, [r3, #56]	@ 0x38
 8016dea:	2304      	movs	r3, #4
 8016dec:	e0b1      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016df2:	f003 0301 	and.w	r3, r3, #1
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d004      	beq.n	8016e04 <SDMMC_GetCmdResp1+0x78>
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	2201      	movs	r2, #1
 8016dfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8016e00:	2301      	movs	r3, #1
 8016e02:	e0a6      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	4a58      	ldr	r2, [pc, #352]	@ (8016f68 <SDMMC_GetCmdResp1+0x1dc>)
 8016e08:	639a      	str	r2, [r3, #56]	@ 0x38
 8016e0a:	68f8      	ldr	r0, [r7, #12]
 8016e0c:	f7ff fcf6 	bl	80167fc <SDMMC_GetCommandResponse>
 8016e10:	4603      	mov	r3, r0
 8016e12:	461a      	mov	r2, r3
 8016e14:	7afb      	ldrb	r3, [r7, #11]
 8016e16:	4293      	cmp	r3, r2
 8016e18:	d001      	beq.n	8016e1e <SDMMC_GetCmdResp1+0x92>
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	e099      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e1e:	2100      	movs	r1, #0
 8016e20:	68f8      	ldr	r0, [r7, #12]
 8016e22:	f7ff fcf8 	bl	8016816 <SDMMC_GetResponse>
 8016e26:	6178      	str	r0, [r7, #20]
 8016e28:	697a      	ldr	r2, [r7, #20]
 8016e2a:	4b50      	ldr	r3, [pc, #320]	@ (8016f6c <SDMMC_GetCmdResp1+0x1e0>)
 8016e2c:	4013      	ands	r3, r2
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d101      	bne.n	8016e36 <SDMMC_GetCmdResp1+0xaa>
 8016e32:	2300      	movs	r3, #0
 8016e34:	e08d      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	da02      	bge.n	8016e42 <SDMMC_GetCmdResp1+0xb6>
 8016e3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8016e40:	e087      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d001      	beq.n	8016e50 <SDMMC_GetCmdResp1+0xc4>
 8016e4c:	2340      	movs	r3, #64	@ 0x40
 8016e4e:	e080      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d001      	beq.n	8016e5e <SDMMC_GetCmdResp1+0xd2>
 8016e5a:	2380      	movs	r3, #128	@ 0x80
 8016e5c:	e079      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e5e:	697b      	ldr	r3, [r7, #20]
 8016e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d002      	beq.n	8016e6e <SDMMC_GetCmdResp1+0xe2>
 8016e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016e6c:	e071      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e6e:	697b      	ldr	r3, [r7, #20]
 8016e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d002      	beq.n	8016e7e <SDMMC_GetCmdResp1+0xf2>
 8016e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016e7c:	e069      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e7e:	697b      	ldr	r3, [r7, #20]
 8016e80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d002      	beq.n	8016e8e <SDMMC_GetCmdResp1+0x102>
 8016e88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016e8c:	e061      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d002      	beq.n	8016e9e <SDMMC_GetCmdResp1+0x112>
 8016e98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016e9c:	e059      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016e9e:	697b      	ldr	r3, [r7, #20]
 8016ea0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d002      	beq.n	8016eae <SDMMC_GetCmdResp1+0x122>
 8016ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016eac:	e051      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d002      	beq.n	8016ebe <SDMMC_GetCmdResp1+0x132>
 8016eb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8016ebc:	e049      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016ebe:	697b      	ldr	r3, [r7, #20]
 8016ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d002      	beq.n	8016ece <SDMMC_GetCmdResp1+0x142>
 8016ec8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8016ecc:	e041      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016ece:	697b      	ldr	r3, [r7, #20]
 8016ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d002      	beq.n	8016ede <SDMMC_GetCmdResp1+0x152>
 8016ed8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016edc:	e039      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016ede:	697b      	ldr	r3, [r7, #20]
 8016ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d002      	beq.n	8016eee <SDMMC_GetCmdResp1+0x162>
 8016ee8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8016eec:	e031      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d002      	beq.n	8016efe <SDMMC_GetCmdResp1+0x172>
 8016ef8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8016efc:	e029      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d002      	beq.n	8016f0e <SDMMC_GetCmdResp1+0x182>
 8016f08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016f0c:	e021      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016f0e:	697b      	ldr	r3, [r7, #20]
 8016f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d002      	beq.n	8016f1e <SDMMC_GetCmdResp1+0x192>
 8016f18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016f1c:	e019      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016f1e:	697b      	ldr	r3, [r7, #20]
 8016f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d002      	beq.n	8016f2e <SDMMC_GetCmdResp1+0x1a2>
 8016f28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8016f2c:	e011      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016f2e:	697b      	ldr	r3, [r7, #20]
 8016f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d002      	beq.n	8016f3e <SDMMC_GetCmdResp1+0x1b2>
 8016f38:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8016f3c:	e009      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016f3e:	697b      	ldr	r3, [r7, #20]
 8016f40:	f003 0308 	and.w	r3, r3, #8
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d002      	beq.n	8016f4e <SDMMC_GetCmdResp1+0x1c2>
 8016f48:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8016f4c:	e001      	b.n	8016f52 <SDMMC_GetCmdResp1+0x1c6>
 8016f4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016f52:	4618      	mov	r0, r3
 8016f54:	3720      	adds	r7, #32
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
 8016f5a:	bf00      	nop
 8016f5c:	24000150 	.word	0x24000150
 8016f60:	10624dd3 	.word	0x10624dd3
 8016f64:	00200045 	.word	0x00200045
 8016f68:	002000c5 	.word	0x002000c5
 8016f6c:	fdffe008 	.word	0xfdffe008

08016f70 <SDMMC_GetCmdResp2>:
 8016f70:	b480      	push	{r7}
 8016f72:	b085      	sub	sp, #20
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
 8016f78:	4b1f      	ldr	r3, [pc, #124]	@ (8016ff8 <SDMMC_GetCmdResp2+0x88>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8016ffc <SDMMC_GetCmdResp2+0x8c>)
 8016f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8016f82:	0a5b      	lsrs	r3, r3, #9
 8016f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016f88:	fb02 f303 	mul.w	r3, r2, r3
 8016f8c:	60fb      	str	r3, [r7, #12]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	1e5a      	subs	r2, r3, #1
 8016f92:	60fa      	str	r2, [r7, #12]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d102      	bne.n	8016f9e <SDMMC_GetCmdResp2+0x2e>
 8016f98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016f9c:	e026      	b.n	8016fec <SDMMC_GetCmdResp2+0x7c>
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016fa2:	60bb      	str	r3, [r7, #8]
 8016fa4:	68bb      	ldr	r3, [r7, #8]
 8016fa6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d0ef      	beq.n	8016f8e <SDMMC_GetCmdResp2+0x1e>
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d1ea      	bne.n	8016f8e <SDMMC_GetCmdResp2+0x1e>
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016fbc:	f003 0304 	and.w	r3, r3, #4
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d004      	beq.n	8016fce <SDMMC_GetCmdResp2+0x5e>
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2204      	movs	r2, #4
 8016fc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8016fca:	2304      	movs	r3, #4
 8016fcc:	e00e      	b.n	8016fec <SDMMC_GetCmdResp2+0x7c>
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016fd2:	f003 0301 	and.w	r3, r3, #1
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d004      	beq.n	8016fe4 <SDMMC_GetCmdResp2+0x74>
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	2201      	movs	r2, #1
 8016fde:	639a      	str	r2, [r3, #56]	@ 0x38
 8016fe0:	2301      	movs	r3, #1
 8016fe2:	e003      	b.n	8016fec <SDMMC_GetCmdResp2+0x7c>
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	4a06      	ldr	r2, [pc, #24]	@ (8017000 <SDMMC_GetCmdResp2+0x90>)
 8016fe8:	639a      	str	r2, [r3, #56]	@ 0x38
 8016fea:	2300      	movs	r3, #0
 8016fec:	4618      	mov	r0, r3
 8016fee:	3714      	adds	r7, #20
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff6:	4770      	bx	lr
 8016ff8:	24000150 	.word	0x24000150
 8016ffc:	10624dd3 	.word	0x10624dd3
 8017000:	002000c5 	.word	0x002000c5

08017004 <SDMMC_GetCmdResp3>:
 8017004:	b480      	push	{r7}
 8017006:	b085      	sub	sp, #20
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
 801700c:	4b1a      	ldr	r3, [pc, #104]	@ (8017078 <SDMMC_GetCmdResp3+0x74>)
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	4a1a      	ldr	r2, [pc, #104]	@ (801707c <SDMMC_GetCmdResp3+0x78>)
 8017012:	fba2 2303 	umull	r2, r3, r2, r3
 8017016:	0a5b      	lsrs	r3, r3, #9
 8017018:	f241 3288 	movw	r2, #5000	@ 0x1388
 801701c:	fb02 f303 	mul.w	r3, r2, r3
 8017020:	60fb      	str	r3, [r7, #12]
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	1e5a      	subs	r2, r3, #1
 8017026:	60fa      	str	r2, [r7, #12]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d102      	bne.n	8017032 <SDMMC_GetCmdResp3+0x2e>
 801702c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017030:	e01b      	b.n	801706a <SDMMC_GetCmdResp3+0x66>
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017036:	60bb      	str	r3, [r7, #8]
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801703e:	2b00      	cmp	r3, #0
 8017040:	d0ef      	beq.n	8017022 <SDMMC_GetCmdResp3+0x1e>
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017048:	2b00      	cmp	r3, #0
 801704a:	d1ea      	bne.n	8017022 <SDMMC_GetCmdResp3+0x1e>
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017050:	f003 0304 	and.w	r3, r3, #4
 8017054:	2b00      	cmp	r3, #0
 8017056:	d004      	beq.n	8017062 <SDMMC_GetCmdResp3+0x5e>
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2204      	movs	r2, #4
 801705c:	639a      	str	r2, [r3, #56]	@ 0x38
 801705e:	2304      	movs	r3, #4
 8017060:	e003      	b.n	801706a <SDMMC_GetCmdResp3+0x66>
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	4a06      	ldr	r2, [pc, #24]	@ (8017080 <SDMMC_GetCmdResp3+0x7c>)
 8017066:	639a      	str	r2, [r3, #56]	@ 0x38
 8017068:	2300      	movs	r3, #0
 801706a:	4618      	mov	r0, r3
 801706c:	3714      	adds	r7, #20
 801706e:	46bd      	mov	sp, r7
 8017070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017074:	4770      	bx	lr
 8017076:	bf00      	nop
 8017078:	24000150 	.word	0x24000150
 801707c:	10624dd3 	.word	0x10624dd3
 8017080:	002000c5 	.word	0x002000c5

08017084 <SDMMC_GetCmdResp6>:
 8017084:	b580      	push	{r7, lr}
 8017086:	b088      	sub	sp, #32
 8017088:	af00      	add	r7, sp, #0
 801708a:	60f8      	str	r0, [r7, #12]
 801708c:	460b      	mov	r3, r1
 801708e:	607a      	str	r2, [r7, #4]
 8017090:	72fb      	strb	r3, [r7, #11]
 8017092:	4b35      	ldr	r3, [pc, #212]	@ (8017168 <SDMMC_GetCmdResp6+0xe4>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	4a35      	ldr	r2, [pc, #212]	@ (801716c <SDMMC_GetCmdResp6+0xe8>)
 8017098:	fba2 2303 	umull	r2, r3, r2, r3
 801709c:	0a5b      	lsrs	r3, r3, #9
 801709e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80170a2:	fb02 f303 	mul.w	r3, r2, r3
 80170a6:	61fb      	str	r3, [r7, #28]
 80170a8:	69fb      	ldr	r3, [r7, #28]
 80170aa:	1e5a      	subs	r2, r3, #1
 80170ac:	61fa      	str	r2, [r7, #28]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d102      	bne.n	80170b8 <SDMMC_GetCmdResp6+0x34>
 80170b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80170b6:	e052      	b.n	801715e <SDMMC_GetCmdResp6+0xda>
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80170bc:	61bb      	str	r3, [r7, #24]
 80170be:	69bb      	ldr	r3, [r7, #24]
 80170c0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d0ef      	beq.n	80170a8 <SDMMC_GetCmdResp6+0x24>
 80170c8:	69bb      	ldr	r3, [r7, #24]
 80170ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d1ea      	bne.n	80170a8 <SDMMC_GetCmdResp6+0x24>
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80170d6:	f003 0304 	and.w	r3, r3, #4
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d004      	beq.n	80170e8 <SDMMC_GetCmdResp6+0x64>
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	2204      	movs	r2, #4
 80170e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80170e4:	2304      	movs	r3, #4
 80170e6:	e03a      	b.n	801715e <SDMMC_GetCmdResp6+0xda>
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80170ec:	f003 0301 	and.w	r3, r3, #1
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d004      	beq.n	80170fe <SDMMC_GetCmdResp6+0x7a>
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	2201      	movs	r2, #1
 80170f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80170fa:	2301      	movs	r3, #1
 80170fc:	e02f      	b.n	801715e <SDMMC_GetCmdResp6+0xda>
 80170fe:	68f8      	ldr	r0, [r7, #12]
 8017100:	f7ff fb7c 	bl	80167fc <SDMMC_GetCommandResponse>
 8017104:	4603      	mov	r3, r0
 8017106:	461a      	mov	r2, r3
 8017108:	7afb      	ldrb	r3, [r7, #11]
 801710a:	4293      	cmp	r3, r2
 801710c:	d001      	beq.n	8017112 <SDMMC_GetCmdResp6+0x8e>
 801710e:	2301      	movs	r3, #1
 8017110:	e025      	b.n	801715e <SDMMC_GetCmdResp6+0xda>
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	4a16      	ldr	r2, [pc, #88]	@ (8017170 <SDMMC_GetCmdResp6+0xec>)
 8017116:	639a      	str	r2, [r3, #56]	@ 0x38
 8017118:	2100      	movs	r1, #0
 801711a:	68f8      	ldr	r0, [r7, #12]
 801711c:	f7ff fb7b 	bl	8016816 <SDMMC_GetResponse>
 8017120:	6178      	str	r0, [r7, #20]
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8017128:	2b00      	cmp	r3, #0
 801712a:	d106      	bne.n	801713a <SDMMC_GetCmdResp6+0xb6>
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	0c1b      	lsrs	r3, r3, #16
 8017130:	b29a      	uxth	r2, r3
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	801a      	strh	r2, [r3, #0]
 8017136:	2300      	movs	r3, #0
 8017138:	e011      	b.n	801715e <SDMMC_GetCmdResp6+0xda>
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017140:	2b00      	cmp	r3, #0
 8017142:	d002      	beq.n	801714a <SDMMC_GetCmdResp6+0xc6>
 8017144:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017148:	e009      	b.n	801715e <SDMMC_GetCmdResp6+0xda>
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017150:	2b00      	cmp	r3, #0
 8017152:	d002      	beq.n	801715a <SDMMC_GetCmdResp6+0xd6>
 8017154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017158:	e001      	b.n	801715e <SDMMC_GetCmdResp6+0xda>
 801715a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801715e:	4618      	mov	r0, r3
 8017160:	3720      	adds	r7, #32
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}
 8017166:	bf00      	nop
 8017168:	24000150 	.word	0x24000150
 801716c:	10624dd3 	.word	0x10624dd3
 8017170:	002000c5 	.word	0x002000c5

08017174 <SDMMC_GetCmdResp7>:
 8017174:	b480      	push	{r7}
 8017176:	b085      	sub	sp, #20
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	4b22      	ldr	r3, [pc, #136]	@ (8017208 <SDMMC_GetCmdResp7+0x94>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	4a22      	ldr	r2, [pc, #136]	@ (801720c <SDMMC_GetCmdResp7+0x98>)
 8017182:	fba2 2303 	umull	r2, r3, r2, r3
 8017186:	0a5b      	lsrs	r3, r3, #9
 8017188:	f241 3288 	movw	r2, #5000	@ 0x1388
 801718c:	fb02 f303 	mul.w	r3, r2, r3
 8017190:	60fb      	str	r3, [r7, #12]
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	1e5a      	subs	r2, r3, #1
 8017196:	60fa      	str	r2, [r7, #12]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d102      	bne.n	80171a2 <SDMMC_GetCmdResp7+0x2e>
 801719c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80171a0:	e02c      	b.n	80171fc <SDMMC_GetCmdResp7+0x88>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171a6:	60bb      	str	r3, [r7, #8]
 80171a8:	68bb      	ldr	r3, [r7, #8]
 80171aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d0ef      	beq.n	8017192 <SDMMC_GetCmdResp7+0x1e>
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d1ea      	bne.n	8017192 <SDMMC_GetCmdResp7+0x1e>
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171c0:	f003 0304 	and.w	r3, r3, #4
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d004      	beq.n	80171d2 <SDMMC_GetCmdResp7+0x5e>
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	2204      	movs	r2, #4
 80171cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80171ce:	2304      	movs	r3, #4
 80171d0:	e014      	b.n	80171fc <SDMMC_GetCmdResp7+0x88>
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171d6:	f003 0301 	and.w	r3, r3, #1
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d004      	beq.n	80171e8 <SDMMC_GetCmdResp7+0x74>
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	2201      	movs	r2, #1
 80171e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80171e4:	2301      	movs	r3, #1
 80171e6:	e009      	b.n	80171fc <SDMMC_GetCmdResp7+0x88>
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d002      	beq.n	80171fa <SDMMC_GetCmdResp7+0x86>
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2240      	movs	r2, #64	@ 0x40
 80171f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80171fa:	2300      	movs	r3, #0
 80171fc:	4618      	mov	r0, r3
 80171fe:	3714      	adds	r7, #20
 8017200:	46bd      	mov	sp, r7
 8017202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017206:	4770      	bx	lr
 8017208:	24000150 	.word	0x24000150
 801720c:	10624dd3 	.word	0x10624dd3

08017210 <SDMMC_GetCmdError>:
 8017210:	b480      	push	{r7}
 8017212:	b085      	sub	sp, #20
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
 8017218:	4b11      	ldr	r3, [pc, #68]	@ (8017260 <SDMMC_GetCmdError+0x50>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	4a11      	ldr	r2, [pc, #68]	@ (8017264 <SDMMC_GetCmdError+0x54>)
 801721e:	fba2 2303 	umull	r2, r3, r2, r3
 8017222:	0a5b      	lsrs	r3, r3, #9
 8017224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017228:	fb02 f303 	mul.w	r3, r2, r3
 801722c:	60fb      	str	r3, [r7, #12]
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	1e5a      	subs	r2, r3, #1
 8017232:	60fa      	str	r2, [r7, #12]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d102      	bne.n	801723e <SDMMC_GetCmdError+0x2e>
 8017238:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801723c:	e009      	b.n	8017252 <SDMMC_GetCmdError+0x42>
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017246:	2b00      	cmp	r3, #0
 8017248:	d0f1      	beq.n	801722e <SDMMC_GetCmdError+0x1e>
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	4a06      	ldr	r2, [pc, #24]	@ (8017268 <SDMMC_GetCmdError+0x58>)
 801724e:	639a      	str	r2, [r3, #56]	@ 0x38
 8017250:	2300      	movs	r3, #0
 8017252:	4618      	mov	r0, r3
 8017254:	3714      	adds	r7, #20
 8017256:	46bd      	mov	sp, r7
 8017258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop
 8017260:	24000150 	.word	0x24000150
 8017264:	10624dd3 	.word	0x10624dd3
 8017268:	002000c5 	.word	0x002000c5

0801726c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8017270:	4904      	ldr	r1, [pc, #16]	@ (8017284 <MX_FATFS_Init+0x18>)
 8017272:	4805      	ldr	r0, [pc, #20]	@ (8017288 <MX_FATFS_Init+0x1c>)
 8017274:	f000 f9e4 	bl	8017640 <FATFS_LinkDriver>
 8017278:	4603      	mov	r3, r0
 801727a:	461a      	mov	r2, r3
 801727c:	4b03      	ldr	r3, [pc, #12]	@ (801728c <MX_FATFS_Init+0x20>)
 801727e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8017280:	bf00      	nop
 8017282:	bd80      	pop	{r7, pc}
 8017284:	24001f58 	.word	0x24001f58
 8017288:	0801c2ec 	.word	0x0801c2ec
 801728c:	24001f54 	.word	0x24001f54

08017290 <BSP_SD_Init>:
 8017290:	b580      	push	{r7, lr}
 8017292:	b082      	sub	sp, #8
 8017294:	af00      	add	r7, sp, #0
 8017296:	2300      	movs	r3, #0
 8017298:	71fb      	strb	r3, [r7, #7]
 801729a:	f000 f879 	bl	8017390 <BSP_SD_IsDetected>
 801729e:	4603      	mov	r3, r0
 80172a0:	2b01      	cmp	r3, #1
 80172a2:	d001      	beq.n	80172a8 <BSP_SD_Init+0x18>
 80172a4:	2302      	movs	r3, #2
 80172a6:	e012      	b.n	80172ce <BSP_SD_Init+0x3e>
 80172a8:	480b      	ldr	r0, [pc, #44]	@ (80172d8 <BSP_SD_Init+0x48>)
 80172aa:	f7f9 f917 	bl	80104dc <HAL_SD_Init>
 80172ae:	4603      	mov	r3, r0
 80172b0:	71fb      	strb	r3, [r7, #7]
 80172b2:	79fb      	ldrb	r3, [r7, #7]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d109      	bne.n	80172cc <BSP_SD_Init+0x3c>
 80172b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80172bc:	4806      	ldr	r0, [pc, #24]	@ (80172d8 <BSP_SD_Init+0x48>)
 80172be:	f7f9 ffd3 	bl	8011268 <HAL_SD_ConfigWideBusOperation>
 80172c2:	4603      	mov	r3, r0
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d001      	beq.n	80172cc <BSP_SD_Init+0x3c>
 80172c8:	2301      	movs	r3, #1
 80172ca:	71fb      	strb	r3, [r7, #7]
 80172cc:	79fb      	ldrb	r3, [r7, #7]
 80172ce:	4618      	mov	r0, r3
 80172d0:	3708      	adds	r7, #8
 80172d2:	46bd      	mov	sp, r7
 80172d4:	bd80      	pop	{r7, pc}
 80172d6:	bf00      	nop
 80172d8:	24001764 	.word	0x24001764

080172dc <BSP_SD_ReadBlocks>:
 80172dc:	b580      	push	{r7, lr}
 80172de:	b088      	sub	sp, #32
 80172e0:	af02      	add	r7, sp, #8
 80172e2:	60f8      	str	r0, [r7, #12]
 80172e4:	60b9      	str	r1, [r7, #8]
 80172e6:	607a      	str	r2, [r7, #4]
 80172e8:	603b      	str	r3, [r7, #0]
 80172ea:	2300      	movs	r3, #0
 80172ec:	75fb      	strb	r3, [r7, #23]
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	9300      	str	r3, [sp, #0]
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	68ba      	ldr	r2, [r7, #8]
 80172f6:	68f9      	ldr	r1, [r7, #12]
 80172f8:	4806      	ldr	r0, [pc, #24]	@ (8017314 <BSP_SD_ReadBlocks+0x38>)
 80172fa:	f7f9 fa0f 	bl	801071c <HAL_SD_ReadBlocks>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d001      	beq.n	8017308 <BSP_SD_ReadBlocks+0x2c>
 8017304:	2301      	movs	r3, #1
 8017306:	75fb      	strb	r3, [r7, #23]
 8017308:	7dfb      	ldrb	r3, [r7, #23]
 801730a:	4618      	mov	r0, r3
 801730c:	3718      	adds	r7, #24
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	24001764 	.word	0x24001764

08017318 <BSP_SD_WriteBlocks>:
 8017318:	b580      	push	{r7, lr}
 801731a:	b088      	sub	sp, #32
 801731c:	af02      	add	r7, sp, #8
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	60b9      	str	r1, [r7, #8]
 8017322:	607a      	str	r2, [r7, #4]
 8017324:	603b      	str	r3, [r7, #0]
 8017326:	2300      	movs	r3, #0
 8017328:	75fb      	strb	r3, [r7, #23]
 801732a:	683b      	ldr	r3, [r7, #0]
 801732c:	9300      	str	r3, [sp, #0]
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	68ba      	ldr	r2, [r7, #8]
 8017332:	68f9      	ldr	r1, [r7, #12]
 8017334:	4806      	ldr	r0, [pc, #24]	@ (8017350 <BSP_SD_WriteBlocks+0x38>)
 8017336:	f7f9 fb7b 	bl	8010a30 <HAL_SD_WriteBlocks>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d001      	beq.n	8017344 <BSP_SD_WriteBlocks+0x2c>
 8017340:	2301      	movs	r3, #1
 8017342:	75fb      	strb	r3, [r7, #23]
 8017344:	7dfb      	ldrb	r3, [r7, #23]
 8017346:	4618      	mov	r0, r3
 8017348:	3718      	adds	r7, #24
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}
 801734e:	bf00      	nop
 8017350:	24001764 	.word	0x24001764

08017354 <BSP_SD_GetCardState>:
 8017354:	b580      	push	{r7, lr}
 8017356:	af00      	add	r7, sp, #0
 8017358:	4805      	ldr	r0, [pc, #20]	@ (8017370 <BSP_SD_GetCardState+0x1c>)
 801735a:	f7fa f897 	bl	801148c <HAL_SD_GetCardState>
 801735e:	4603      	mov	r3, r0
 8017360:	2b04      	cmp	r3, #4
 8017362:	bf14      	ite	ne
 8017364:	2301      	movne	r3, #1
 8017366:	2300      	moveq	r3, #0
 8017368:	b2db      	uxtb	r3, r3
 801736a:	4618      	mov	r0, r3
 801736c:	bd80      	pop	{r7, pc}
 801736e:	bf00      	nop
 8017370:	24001764 	.word	0x24001764

08017374 <BSP_SD_GetCardInfo>:
 8017374:	b580      	push	{r7, lr}
 8017376:	b082      	sub	sp, #8
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
 801737c:	6879      	ldr	r1, [r7, #4]
 801737e:	4803      	ldr	r0, [pc, #12]	@ (801738c <BSP_SD_GetCardInfo+0x18>)
 8017380:	f7f9 ff46 	bl	8011210 <HAL_SD_GetCardInfo>
 8017384:	bf00      	nop
 8017386:	3708      	adds	r7, #8
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}
 801738c:	24001764 	.word	0x24001764

08017390 <BSP_SD_IsDetected>:
 8017390:	b580      	push	{r7, lr}
 8017392:	b082      	sub	sp, #8
 8017394:	af00      	add	r7, sp, #0
 8017396:	2301      	movs	r3, #1
 8017398:	71fb      	strb	r3, [r7, #7]
 801739a:	f000 f80b 	bl	80173b4 <BSP_PlatformIsDetected>
 801739e:	4603      	mov	r3, r0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d101      	bne.n	80173a8 <BSP_SD_IsDetected+0x18>
 80173a4:	2300      	movs	r3, #0
 80173a6:	71fb      	strb	r3, [r7, #7]
 80173a8:	79fb      	ldrb	r3, [r7, #7]
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	4618      	mov	r0, r3
 80173ae:	3708      	adds	r7, #8
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <BSP_PlatformIsDetected>:
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b082      	sub	sp, #8
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	2301      	movs	r3, #1
 80173bc:	71fb      	strb	r3, [r7, #7]
 80173be:	2180      	movs	r1, #128	@ 0x80
 80173c0:	4806      	ldr	r0, [pc, #24]	@ (80173dc <BSP_PlatformIsDetected+0x28>)
 80173c2:	f7f3 ffdd 	bl	800b380 <HAL_GPIO_ReadPin>
 80173c6:	4603      	mov	r3, r0
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d001      	beq.n	80173d0 <BSP_PlatformIsDetected+0x1c>
 80173cc:	2300      	movs	r3, #0
 80173ce:	71fb      	strb	r3, [r7, #7]
 80173d0:	79fb      	ldrb	r3, [r7, #7]
 80173d2:	4618      	mov	r0, r3
 80173d4:	3708      	adds	r7, #8
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd80      	pop	{r7, pc}
 80173da:	bf00      	nop
 80173dc:	58020800 	.word	0x58020800

080173e0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b082      	sub	sp, #8
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	4603      	mov	r3, r0
 80173e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80173ea:	4b0b      	ldr	r3, [pc, #44]	@ (8017418 <SD_CheckStatus+0x38>)
 80173ec:	2201      	movs	r2, #1
 80173ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80173f0:	f7ff ffb0 	bl	8017354 <BSP_SD_GetCardState>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d107      	bne.n	801740a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80173fa:	4b07      	ldr	r3, [pc, #28]	@ (8017418 <SD_CheckStatus+0x38>)
 80173fc:	781b      	ldrb	r3, [r3, #0]
 80173fe:	b2db      	uxtb	r3, r3
 8017400:	f023 0301 	bic.w	r3, r3, #1
 8017404:	b2da      	uxtb	r2, r3
 8017406:	4b04      	ldr	r3, [pc, #16]	@ (8017418 <SD_CheckStatus+0x38>)
 8017408:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801740a:	4b03      	ldr	r3, [pc, #12]	@ (8017418 <SD_CheckStatus+0x38>)
 801740c:	781b      	ldrb	r3, [r3, #0]
 801740e:	b2db      	uxtb	r3, r3
}
 8017410:	4618      	mov	r0, r3
 8017412:	3708      	adds	r7, #8
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}
 8017418:	24000165 	.word	0x24000165

0801741c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b082      	sub	sp, #8
 8017420:	af00      	add	r7, sp, #0
 8017422:	4603      	mov	r3, r0
 8017424:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8017426:	4b0b      	ldr	r3, [pc, #44]	@ (8017454 <SD_initialize+0x38>)
 8017428:	2201      	movs	r2, #1
 801742a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801742c:	f7ff ff30 	bl	8017290 <BSP_SD_Init>
 8017430:	4603      	mov	r3, r0
 8017432:	2b00      	cmp	r3, #0
 8017434:	d107      	bne.n	8017446 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8017436:	79fb      	ldrb	r3, [r7, #7]
 8017438:	4618      	mov	r0, r3
 801743a:	f7ff ffd1 	bl	80173e0 <SD_CheckStatus>
 801743e:	4603      	mov	r3, r0
 8017440:	461a      	mov	r2, r3
 8017442:	4b04      	ldr	r3, [pc, #16]	@ (8017454 <SD_initialize+0x38>)
 8017444:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8017446:	4b03      	ldr	r3, [pc, #12]	@ (8017454 <SD_initialize+0x38>)
 8017448:	781b      	ldrb	r3, [r3, #0]
 801744a:	b2db      	uxtb	r3, r3
}
 801744c:	4618      	mov	r0, r3
 801744e:	3708      	adds	r7, #8
 8017450:	46bd      	mov	sp, r7
 8017452:	bd80      	pop	{r7, pc}
 8017454:	24000165 	.word	0x24000165

08017458 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b082      	sub	sp, #8
 801745c:	af00      	add	r7, sp, #0
 801745e:	4603      	mov	r3, r0
 8017460:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8017462:	79fb      	ldrb	r3, [r7, #7]
 8017464:	4618      	mov	r0, r3
 8017466:	f7ff ffbb 	bl	80173e0 <SD_CheckStatus>
 801746a:	4603      	mov	r3, r0
}
 801746c:	4618      	mov	r0, r3
 801746e:	3708      	adds	r7, #8
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}

08017474 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b086      	sub	sp, #24
 8017478:	af00      	add	r7, sp, #0
 801747a:	60b9      	str	r1, [r7, #8]
 801747c:	607a      	str	r2, [r7, #4]
 801747e:	603b      	str	r3, [r7, #0]
 8017480:	4603      	mov	r3, r0
 8017482:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8017484:	2301      	movs	r3, #1
 8017486:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8017488:	f04f 33ff 	mov.w	r3, #4294967295
 801748c:	683a      	ldr	r2, [r7, #0]
 801748e:	6879      	ldr	r1, [r7, #4]
 8017490:	68b8      	ldr	r0, [r7, #8]
 8017492:	f7ff ff23 	bl	80172dc <BSP_SD_ReadBlocks>
 8017496:	4603      	mov	r3, r0
 8017498:	2b00      	cmp	r3, #0
 801749a:	d107      	bne.n	80174ac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 801749c:	bf00      	nop
 801749e:	f7ff ff59 	bl	8017354 <BSP_SD_GetCardState>
 80174a2:	4603      	mov	r3, r0
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d1fa      	bne.n	801749e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80174a8:	2300      	movs	r3, #0
 80174aa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80174ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	3718      	adds	r7, #24
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}

080174b6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80174b6:	b580      	push	{r7, lr}
 80174b8:	b086      	sub	sp, #24
 80174ba:	af00      	add	r7, sp, #0
 80174bc:	60b9      	str	r1, [r7, #8]
 80174be:	607a      	str	r2, [r7, #4]
 80174c0:	603b      	str	r3, [r7, #0]
 80174c2:	4603      	mov	r3, r0
 80174c4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80174c6:	2301      	movs	r3, #1
 80174c8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80174ca:	f04f 33ff 	mov.w	r3, #4294967295
 80174ce:	683a      	ldr	r2, [r7, #0]
 80174d0:	6879      	ldr	r1, [r7, #4]
 80174d2:	68b8      	ldr	r0, [r7, #8]
 80174d4:	f7ff ff20 	bl	8017318 <BSP_SD_WriteBlocks>
 80174d8:	4603      	mov	r3, r0
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d107      	bne.n	80174ee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80174de:	bf00      	nop
 80174e0:	f7ff ff38 	bl	8017354 <BSP_SD_GetCardState>
 80174e4:	4603      	mov	r3, r0
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d1fa      	bne.n	80174e0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80174ea:	2300      	movs	r3, #0
 80174ec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80174ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	3718      	adds	r7, #24
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}

080174f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b08c      	sub	sp, #48	@ 0x30
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	4603      	mov	r3, r0
 8017500:	603a      	str	r2, [r7, #0]
 8017502:	71fb      	strb	r3, [r7, #7]
 8017504:	460b      	mov	r3, r1
 8017506:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8017508:	2301      	movs	r3, #1
 801750a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801750e:	4b25      	ldr	r3, [pc, #148]	@ (80175a4 <SD_ioctl+0xac>)
 8017510:	781b      	ldrb	r3, [r3, #0]
 8017512:	b2db      	uxtb	r3, r3
 8017514:	f003 0301 	and.w	r3, r3, #1
 8017518:	2b00      	cmp	r3, #0
 801751a:	d001      	beq.n	8017520 <SD_ioctl+0x28>
 801751c:	2303      	movs	r3, #3
 801751e:	e03c      	b.n	801759a <SD_ioctl+0xa2>

  switch (cmd)
 8017520:	79bb      	ldrb	r3, [r7, #6]
 8017522:	2b03      	cmp	r3, #3
 8017524:	d834      	bhi.n	8017590 <SD_ioctl+0x98>
 8017526:	a201      	add	r2, pc, #4	@ (adr r2, 801752c <SD_ioctl+0x34>)
 8017528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801752c:	0801753d 	.word	0x0801753d
 8017530:	08017545 	.word	0x08017545
 8017534:	0801755d 	.word	0x0801755d
 8017538:	08017577 	.word	0x08017577
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801753c:	2300      	movs	r3, #0
 801753e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8017542:	e028      	b.n	8017596 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8017544:	f107 0308 	add.w	r3, r7, #8
 8017548:	4618      	mov	r0, r3
 801754a:	f7ff ff13 	bl	8017374 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801754e:	6a3a      	ldr	r2, [r7, #32]
 8017550:	683b      	ldr	r3, [r7, #0]
 8017552:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8017554:	2300      	movs	r3, #0
 8017556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801755a:	e01c      	b.n	8017596 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801755c:	f107 0308 	add.w	r3, r7, #8
 8017560:	4618      	mov	r0, r3
 8017562:	f7ff ff07 	bl	8017374 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8017566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017568:	b29a      	uxth	r2, r3
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801756e:	2300      	movs	r3, #0
 8017570:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8017574:	e00f      	b.n	8017596 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8017576:	f107 0308 	add.w	r3, r7, #8
 801757a:	4618      	mov	r0, r3
 801757c:	f7ff fefa 	bl	8017374 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8017580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017582:	0a5a      	lsrs	r2, r3, #9
 8017584:	683b      	ldr	r3, [r7, #0]
 8017586:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8017588:	2300      	movs	r3, #0
 801758a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801758e:	e002      	b.n	8017596 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8017590:	2304      	movs	r3, #4
 8017592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8017596:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801759a:	4618      	mov	r0, r3
 801759c:	3730      	adds	r7, #48	@ 0x30
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd80      	pop	{r7, pc}
 80175a2:	bf00      	nop
 80175a4:	24000165 	.word	0x24000165

080175a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80175a8:	b480      	push	{r7}
 80175aa:	b087      	sub	sp, #28
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	60f8      	str	r0, [r7, #12]
 80175b0:	60b9      	str	r1, [r7, #8]
 80175b2:	4613      	mov	r3, r2
 80175b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80175b6:	2301      	movs	r3, #1
 80175b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80175ba:	2300      	movs	r3, #0
 80175bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80175be:	4b1f      	ldr	r3, [pc, #124]	@ (801763c <FATFS_LinkDriverEx+0x94>)
 80175c0:	7a5b      	ldrb	r3, [r3, #9]
 80175c2:	b2db      	uxtb	r3, r3
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d131      	bne.n	801762c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80175c8:	4b1c      	ldr	r3, [pc, #112]	@ (801763c <FATFS_LinkDriverEx+0x94>)
 80175ca:	7a5b      	ldrb	r3, [r3, #9]
 80175cc:	b2db      	uxtb	r3, r3
 80175ce:	461a      	mov	r2, r3
 80175d0:	4b1a      	ldr	r3, [pc, #104]	@ (801763c <FATFS_LinkDriverEx+0x94>)
 80175d2:	2100      	movs	r1, #0
 80175d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80175d6:	4b19      	ldr	r3, [pc, #100]	@ (801763c <FATFS_LinkDriverEx+0x94>)
 80175d8:	7a5b      	ldrb	r3, [r3, #9]
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	4a17      	ldr	r2, [pc, #92]	@ (801763c <FATFS_LinkDriverEx+0x94>)
 80175de:	009b      	lsls	r3, r3, #2
 80175e0:	4413      	add	r3, r2
 80175e2:	68fa      	ldr	r2, [r7, #12]
 80175e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80175e6:	4b15      	ldr	r3, [pc, #84]	@ (801763c <FATFS_LinkDriverEx+0x94>)
 80175e8:	7a5b      	ldrb	r3, [r3, #9]
 80175ea:	b2db      	uxtb	r3, r3
 80175ec:	461a      	mov	r2, r3
 80175ee:	4b13      	ldr	r3, [pc, #76]	@ (801763c <FATFS_LinkDriverEx+0x94>)
 80175f0:	4413      	add	r3, r2
 80175f2:	79fa      	ldrb	r2, [r7, #7]
 80175f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80175f6:	4b11      	ldr	r3, [pc, #68]	@ (801763c <FATFS_LinkDriverEx+0x94>)
 80175f8:	7a5b      	ldrb	r3, [r3, #9]
 80175fa:	b2db      	uxtb	r3, r3
 80175fc:	1c5a      	adds	r2, r3, #1
 80175fe:	b2d1      	uxtb	r1, r2
 8017600:	4a0e      	ldr	r2, [pc, #56]	@ (801763c <FATFS_LinkDriverEx+0x94>)
 8017602:	7251      	strb	r1, [r2, #9]
 8017604:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017606:	7dbb      	ldrb	r3, [r7, #22]
 8017608:	3330      	adds	r3, #48	@ 0x30
 801760a:	b2da      	uxtb	r2, r3
 801760c:	68bb      	ldr	r3, [r7, #8]
 801760e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017610:	68bb      	ldr	r3, [r7, #8]
 8017612:	3301      	adds	r3, #1
 8017614:	223a      	movs	r2, #58	@ 0x3a
 8017616:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017618:	68bb      	ldr	r3, [r7, #8]
 801761a:	3302      	adds	r3, #2
 801761c:	222f      	movs	r2, #47	@ 0x2f
 801761e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	3303      	adds	r3, #3
 8017624:	2200      	movs	r2, #0
 8017626:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017628:	2300      	movs	r3, #0
 801762a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801762c:	7dfb      	ldrb	r3, [r7, #23]
}
 801762e:	4618      	mov	r0, r3
 8017630:	371c      	adds	r7, #28
 8017632:	46bd      	mov	sp, r7
 8017634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017638:	4770      	bx	lr
 801763a:	bf00      	nop
 801763c:	24001f5c 	.word	0x24001f5c

08017640 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b082      	sub	sp, #8
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801764a:	2200      	movs	r2, #0
 801764c:	6839      	ldr	r1, [r7, #0]
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f7ff ffaa 	bl	80175a8 <FATFS_LinkDriverEx>
 8017654:	4603      	mov	r3, r0
}
 8017656:	4618      	mov	r0, r3
 8017658:	3708      	adds	r7, #8
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}

0801765e <__cvt>:
 801765e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017660:	ed2d 8b02 	vpush	{d8}
 8017664:	eeb0 8b40 	vmov.f64	d8, d0
 8017668:	b085      	sub	sp, #20
 801766a:	4617      	mov	r7, r2
 801766c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801766e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017670:	ee18 2a90 	vmov	r2, s17
 8017674:	f025 0520 	bic.w	r5, r5, #32
 8017678:	2a00      	cmp	r2, #0
 801767a:	bfb6      	itet	lt
 801767c:	222d      	movlt	r2, #45	@ 0x2d
 801767e:	2200      	movge	r2, #0
 8017680:	eeb1 8b40 	vneglt.f64	d8, d0
 8017684:	2d46      	cmp	r5, #70	@ 0x46
 8017686:	460c      	mov	r4, r1
 8017688:	701a      	strb	r2, [r3, #0]
 801768a:	d004      	beq.n	8017696 <__cvt+0x38>
 801768c:	2d45      	cmp	r5, #69	@ 0x45
 801768e:	d100      	bne.n	8017692 <__cvt+0x34>
 8017690:	3401      	adds	r4, #1
 8017692:	2102      	movs	r1, #2
 8017694:	e000      	b.n	8017698 <__cvt+0x3a>
 8017696:	2103      	movs	r1, #3
 8017698:	ab03      	add	r3, sp, #12
 801769a:	9301      	str	r3, [sp, #4]
 801769c:	ab02      	add	r3, sp, #8
 801769e:	9300      	str	r3, [sp, #0]
 80176a0:	4622      	mov	r2, r4
 80176a2:	4633      	mov	r3, r6
 80176a4:	eeb0 0b48 	vmov.f64	d0, d8
 80176a8:	f001 f966 	bl	8018978 <_dtoa_r>
 80176ac:	2d47      	cmp	r5, #71	@ 0x47
 80176ae:	d114      	bne.n	80176da <__cvt+0x7c>
 80176b0:	07fb      	lsls	r3, r7, #31
 80176b2:	d50a      	bpl.n	80176ca <__cvt+0x6c>
 80176b4:	1902      	adds	r2, r0, r4
 80176b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80176ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176be:	bf08      	it	eq
 80176c0:	9203      	streq	r2, [sp, #12]
 80176c2:	2130      	movs	r1, #48	@ 0x30
 80176c4:	9b03      	ldr	r3, [sp, #12]
 80176c6:	4293      	cmp	r3, r2
 80176c8:	d319      	bcc.n	80176fe <__cvt+0xa0>
 80176ca:	9b03      	ldr	r3, [sp, #12]
 80176cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80176ce:	1a1b      	subs	r3, r3, r0
 80176d0:	6013      	str	r3, [r2, #0]
 80176d2:	b005      	add	sp, #20
 80176d4:	ecbd 8b02 	vpop	{d8}
 80176d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176da:	2d46      	cmp	r5, #70	@ 0x46
 80176dc:	eb00 0204 	add.w	r2, r0, r4
 80176e0:	d1e9      	bne.n	80176b6 <__cvt+0x58>
 80176e2:	7803      	ldrb	r3, [r0, #0]
 80176e4:	2b30      	cmp	r3, #48	@ 0x30
 80176e6:	d107      	bne.n	80176f8 <__cvt+0x9a>
 80176e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80176ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f0:	bf1c      	itt	ne
 80176f2:	f1c4 0401 	rsbne	r4, r4, #1
 80176f6:	6034      	strne	r4, [r6, #0]
 80176f8:	6833      	ldr	r3, [r6, #0]
 80176fa:	441a      	add	r2, r3
 80176fc:	e7db      	b.n	80176b6 <__cvt+0x58>
 80176fe:	1c5c      	adds	r4, r3, #1
 8017700:	9403      	str	r4, [sp, #12]
 8017702:	7019      	strb	r1, [r3, #0]
 8017704:	e7de      	b.n	80176c4 <__cvt+0x66>

08017706 <__exponent>:
 8017706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017708:	2900      	cmp	r1, #0
 801770a:	bfba      	itte	lt
 801770c:	4249      	neglt	r1, r1
 801770e:	232d      	movlt	r3, #45	@ 0x2d
 8017710:	232b      	movge	r3, #43	@ 0x2b
 8017712:	2909      	cmp	r1, #9
 8017714:	7002      	strb	r2, [r0, #0]
 8017716:	7043      	strb	r3, [r0, #1]
 8017718:	dd29      	ble.n	801776e <__exponent+0x68>
 801771a:	f10d 0307 	add.w	r3, sp, #7
 801771e:	461d      	mov	r5, r3
 8017720:	270a      	movs	r7, #10
 8017722:	461a      	mov	r2, r3
 8017724:	fbb1 f6f7 	udiv	r6, r1, r7
 8017728:	fb07 1416 	mls	r4, r7, r6, r1
 801772c:	3430      	adds	r4, #48	@ 0x30
 801772e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8017732:	460c      	mov	r4, r1
 8017734:	2c63      	cmp	r4, #99	@ 0x63
 8017736:	f103 33ff 	add.w	r3, r3, #4294967295
 801773a:	4631      	mov	r1, r6
 801773c:	dcf1      	bgt.n	8017722 <__exponent+0x1c>
 801773e:	3130      	adds	r1, #48	@ 0x30
 8017740:	1e94      	subs	r4, r2, #2
 8017742:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017746:	1c41      	adds	r1, r0, #1
 8017748:	4623      	mov	r3, r4
 801774a:	42ab      	cmp	r3, r5
 801774c:	d30a      	bcc.n	8017764 <__exponent+0x5e>
 801774e:	f10d 0309 	add.w	r3, sp, #9
 8017752:	1a9b      	subs	r3, r3, r2
 8017754:	42ac      	cmp	r4, r5
 8017756:	bf88      	it	hi
 8017758:	2300      	movhi	r3, #0
 801775a:	3302      	adds	r3, #2
 801775c:	4403      	add	r3, r0
 801775e:	1a18      	subs	r0, r3, r0
 8017760:	b003      	add	sp, #12
 8017762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017764:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017768:	f801 6f01 	strb.w	r6, [r1, #1]!
 801776c:	e7ed      	b.n	801774a <__exponent+0x44>
 801776e:	2330      	movs	r3, #48	@ 0x30
 8017770:	3130      	adds	r1, #48	@ 0x30
 8017772:	7083      	strb	r3, [r0, #2]
 8017774:	70c1      	strb	r1, [r0, #3]
 8017776:	1d03      	adds	r3, r0, #4
 8017778:	e7f1      	b.n	801775e <__exponent+0x58>
 801777a:	0000      	movs	r0, r0
 801777c:	0000      	movs	r0, r0
	...

08017780 <_printf_float>:
 8017780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017784:	b08d      	sub	sp, #52	@ 0x34
 8017786:	460c      	mov	r4, r1
 8017788:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801778c:	4616      	mov	r6, r2
 801778e:	461f      	mov	r7, r3
 8017790:	4605      	mov	r5, r0
 8017792:	f000 ffdb 	bl	801874c <_localeconv_r>
 8017796:	f8d0 b000 	ldr.w	fp, [r0]
 801779a:	4658      	mov	r0, fp
 801779c:	f7e8 fe08 	bl	80003b0 <strlen>
 80177a0:	2300      	movs	r3, #0
 80177a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80177a4:	f8d8 3000 	ldr.w	r3, [r8]
 80177a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80177ac:	6822      	ldr	r2, [r4, #0]
 80177ae:	9005      	str	r0, [sp, #20]
 80177b0:	3307      	adds	r3, #7
 80177b2:	f023 0307 	bic.w	r3, r3, #7
 80177b6:	f103 0108 	add.w	r1, r3, #8
 80177ba:	f8c8 1000 	str.w	r1, [r8]
 80177be:	ed93 0b00 	vldr	d0, [r3]
 80177c2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8017a20 <_printf_float+0x2a0>
 80177c6:	eeb0 7bc0 	vabs.f64	d7, d0
 80177ca:	eeb4 7b46 	vcmp.f64	d7, d6
 80177ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177d2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80177d6:	dd24      	ble.n	8017822 <_printf_float+0xa2>
 80177d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80177dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177e0:	d502      	bpl.n	80177e8 <_printf_float+0x68>
 80177e2:	232d      	movs	r3, #45	@ 0x2d
 80177e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80177e8:	498f      	ldr	r1, [pc, #572]	@ (8017a28 <_printf_float+0x2a8>)
 80177ea:	4b90      	ldr	r3, [pc, #576]	@ (8017a2c <_printf_float+0x2ac>)
 80177ec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80177f0:	bf94      	ite	ls
 80177f2:	4688      	movls	r8, r1
 80177f4:	4698      	movhi	r8, r3
 80177f6:	f022 0204 	bic.w	r2, r2, #4
 80177fa:	2303      	movs	r3, #3
 80177fc:	6123      	str	r3, [r4, #16]
 80177fe:	6022      	str	r2, [r4, #0]
 8017800:	f04f 0a00 	mov.w	sl, #0
 8017804:	9700      	str	r7, [sp, #0]
 8017806:	4633      	mov	r3, r6
 8017808:	aa0b      	add	r2, sp, #44	@ 0x2c
 801780a:	4621      	mov	r1, r4
 801780c:	4628      	mov	r0, r5
 801780e:	f000 f9d1 	bl	8017bb4 <_printf_common>
 8017812:	3001      	adds	r0, #1
 8017814:	f040 8089 	bne.w	801792a <_printf_float+0x1aa>
 8017818:	f04f 30ff 	mov.w	r0, #4294967295
 801781c:	b00d      	add	sp, #52	@ 0x34
 801781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017822:	eeb4 0b40 	vcmp.f64	d0, d0
 8017826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801782a:	d709      	bvc.n	8017840 <_printf_float+0xc0>
 801782c:	ee10 3a90 	vmov	r3, s1
 8017830:	2b00      	cmp	r3, #0
 8017832:	bfbc      	itt	lt
 8017834:	232d      	movlt	r3, #45	@ 0x2d
 8017836:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801783a:	497d      	ldr	r1, [pc, #500]	@ (8017a30 <_printf_float+0x2b0>)
 801783c:	4b7d      	ldr	r3, [pc, #500]	@ (8017a34 <_printf_float+0x2b4>)
 801783e:	e7d5      	b.n	80177ec <_printf_float+0x6c>
 8017840:	6863      	ldr	r3, [r4, #4]
 8017842:	1c59      	adds	r1, r3, #1
 8017844:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8017848:	d139      	bne.n	80178be <_printf_float+0x13e>
 801784a:	2306      	movs	r3, #6
 801784c:	6063      	str	r3, [r4, #4]
 801784e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8017852:	2300      	movs	r3, #0
 8017854:	6022      	str	r2, [r4, #0]
 8017856:	9303      	str	r3, [sp, #12]
 8017858:	ab0a      	add	r3, sp, #40	@ 0x28
 801785a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801785e:	ab09      	add	r3, sp, #36	@ 0x24
 8017860:	9300      	str	r3, [sp, #0]
 8017862:	6861      	ldr	r1, [r4, #4]
 8017864:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017868:	4628      	mov	r0, r5
 801786a:	f7ff fef8 	bl	801765e <__cvt>
 801786e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017872:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017874:	4680      	mov	r8, r0
 8017876:	d129      	bne.n	80178cc <_printf_float+0x14c>
 8017878:	1cc8      	adds	r0, r1, #3
 801787a:	db02      	blt.n	8017882 <_printf_float+0x102>
 801787c:	6863      	ldr	r3, [r4, #4]
 801787e:	4299      	cmp	r1, r3
 8017880:	dd41      	ble.n	8017906 <_printf_float+0x186>
 8017882:	f1a9 0902 	sub.w	r9, r9, #2
 8017886:	fa5f f989 	uxtb.w	r9, r9
 801788a:	3901      	subs	r1, #1
 801788c:	464a      	mov	r2, r9
 801788e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017892:	9109      	str	r1, [sp, #36]	@ 0x24
 8017894:	f7ff ff37 	bl	8017706 <__exponent>
 8017898:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801789a:	1813      	adds	r3, r2, r0
 801789c:	2a01      	cmp	r2, #1
 801789e:	4682      	mov	sl, r0
 80178a0:	6123      	str	r3, [r4, #16]
 80178a2:	dc02      	bgt.n	80178aa <_printf_float+0x12a>
 80178a4:	6822      	ldr	r2, [r4, #0]
 80178a6:	07d2      	lsls	r2, r2, #31
 80178a8:	d501      	bpl.n	80178ae <_printf_float+0x12e>
 80178aa:	3301      	adds	r3, #1
 80178ac:	6123      	str	r3, [r4, #16]
 80178ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d0a6      	beq.n	8017804 <_printf_float+0x84>
 80178b6:	232d      	movs	r3, #45	@ 0x2d
 80178b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80178bc:	e7a2      	b.n	8017804 <_printf_float+0x84>
 80178be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80178c2:	d1c4      	bne.n	801784e <_printf_float+0xce>
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d1c2      	bne.n	801784e <_printf_float+0xce>
 80178c8:	2301      	movs	r3, #1
 80178ca:	e7bf      	b.n	801784c <_printf_float+0xcc>
 80178cc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80178d0:	d9db      	bls.n	801788a <_printf_float+0x10a>
 80178d2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80178d6:	d118      	bne.n	801790a <_printf_float+0x18a>
 80178d8:	2900      	cmp	r1, #0
 80178da:	6863      	ldr	r3, [r4, #4]
 80178dc:	dd0b      	ble.n	80178f6 <_printf_float+0x176>
 80178de:	6121      	str	r1, [r4, #16]
 80178e0:	b913      	cbnz	r3, 80178e8 <_printf_float+0x168>
 80178e2:	6822      	ldr	r2, [r4, #0]
 80178e4:	07d0      	lsls	r0, r2, #31
 80178e6:	d502      	bpl.n	80178ee <_printf_float+0x16e>
 80178e8:	3301      	adds	r3, #1
 80178ea:	440b      	add	r3, r1
 80178ec:	6123      	str	r3, [r4, #16]
 80178ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80178f0:	f04f 0a00 	mov.w	sl, #0
 80178f4:	e7db      	b.n	80178ae <_printf_float+0x12e>
 80178f6:	b913      	cbnz	r3, 80178fe <_printf_float+0x17e>
 80178f8:	6822      	ldr	r2, [r4, #0]
 80178fa:	07d2      	lsls	r2, r2, #31
 80178fc:	d501      	bpl.n	8017902 <_printf_float+0x182>
 80178fe:	3302      	adds	r3, #2
 8017900:	e7f4      	b.n	80178ec <_printf_float+0x16c>
 8017902:	2301      	movs	r3, #1
 8017904:	e7f2      	b.n	80178ec <_printf_float+0x16c>
 8017906:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801790a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801790c:	4299      	cmp	r1, r3
 801790e:	db05      	blt.n	801791c <_printf_float+0x19c>
 8017910:	6823      	ldr	r3, [r4, #0]
 8017912:	6121      	str	r1, [r4, #16]
 8017914:	07d8      	lsls	r0, r3, #31
 8017916:	d5ea      	bpl.n	80178ee <_printf_float+0x16e>
 8017918:	1c4b      	adds	r3, r1, #1
 801791a:	e7e7      	b.n	80178ec <_printf_float+0x16c>
 801791c:	2900      	cmp	r1, #0
 801791e:	bfd4      	ite	le
 8017920:	f1c1 0202 	rsble	r2, r1, #2
 8017924:	2201      	movgt	r2, #1
 8017926:	4413      	add	r3, r2
 8017928:	e7e0      	b.n	80178ec <_printf_float+0x16c>
 801792a:	6823      	ldr	r3, [r4, #0]
 801792c:	055a      	lsls	r2, r3, #21
 801792e:	d407      	bmi.n	8017940 <_printf_float+0x1c0>
 8017930:	6923      	ldr	r3, [r4, #16]
 8017932:	4642      	mov	r2, r8
 8017934:	4631      	mov	r1, r6
 8017936:	4628      	mov	r0, r5
 8017938:	47b8      	blx	r7
 801793a:	3001      	adds	r0, #1
 801793c:	d12a      	bne.n	8017994 <_printf_float+0x214>
 801793e:	e76b      	b.n	8017818 <_printf_float+0x98>
 8017940:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017944:	f240 80e0 	bls.w	8017b08 <_printf_float+0x388>
 8017948:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801794c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017954:	d133      	bne.n	80179be <_printf_float+0x23e>
 8017956:	4a38      	ldr	r2, [pc, #224]	@ (8017a38 <_printf_float+0x2b8>)
 8017958:	2301      	movs	r3, #1
 801795a:	4631      	mov	r1, r6
 801795c:	4628      	mov	r0, r5
 801795e:	47b8      	blx	r7
 8017960:	3001      	adds	r0, #1
 8017962:	f43f af59 	beq.w	8017818 <_printf_float+0x98>
 8017966:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801796a:	4543      	cmp	r3, r8
 801796c:	db02      	blt.n	8017974 <_printf_float+0x1f4>
 801796e:	6823      	ldr	r3, [r4, #0]
 8017970:	07d8      	lsls	r0, r3, #31
 8017972:	d50f      	bpl.n	8017994 <_printf_float+0x214>
 8017974:	9b05      	ldr	r3, [sp, #20]
 8017976:	465a      	mov	r2, fp
 8017978:	4631      	mov	r1, r6
 801797a:	4628      	mov	r0, r5
 801797c:	47b8      	blx	r7
 801797e:	3001      	adds	r0, #1
 8017980:	f43f af4a 	beq.w	8017818 <_printf_float+0x98>
 8017984:	f04f 0900 	mov.w	r9, #0
 8017988:	f108 38ff 	add.w	r8, r8, #4294967295
 801798c:	f104 0a1a 	add.w	sl, r4, #26
 8017990:	45c8      	cmp	r8, r9
 8017992:	dc09      	bgt.n	80179a8 <_printf_float+0x228>
 8017994:	6823      	ldr	r3, [r4, #0]
 8017996:	079b      	lsls	r3, r3, #30
 8017998:	f100 8107 	bmi.w	8017baa <_printf_float+0x42a>
 801799c:	68e0      	ldr	r0, [r4, #12]
 801799e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80179a0:	4298      	cmp	r0, r3
 80179a2:	bfb8      	it	lt
 80179a4:	4618      	movlt	r0, r3
 80179a6:	e739      	b.n	801781c <_printf_float+0x9c>
 80179a8:	2301      	movs	r3, #1
 80179aa:	4652      	mov	r2, sl
 80179ac:	4631      	mov	r1, r6
 80179ae:	4628      	mov	r0, r5
 80179b0:	47b8      	blx	r7
 80179b2:	3001      	adds	r0, #1
 80179b4:	f43f af30 	beq.w	8017818 <_printf_float+0x98>
 80179b8:	f109 0901 	add.w	r9, r9, #1
 80179bc:	e7e8      	b.n	8017990 <_printf_float+0x210>
 80179be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	dc3b      	bgt.n	8017a3c <_printf_float+0x2bc>
 80179c4:	4a1c      	ldr	r2, [pc, #112]	@ (8017a38 <_printf_float+0x2b8>)
 80179c6:	2301      	movs	r3, #1
 80179c8:	4631      	mov	r1, r6
 80179ca:	4628      	mov	r0, r5
 80179cc:	47b8      	blx	r7
 80179ce:	3001      	adds	r0, #1
 80179d0:	f43f af22 	beq.w	8017818 <_printf_float+0x98>
 80179d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80179d8:	ea59 0303 	orrs.w	r3, r9, r3
 80179dc:	d102      	bne.n	80179e4 <_printf_float+0x264>
 80179de:	6823      	ldr	r3, [r4, #0]
 80179e0:	07d9      	lsls	r1, r3, #31
 80179e2:	d5d7      	bpl.n	8017994 <_printf_float+0x214>
 80179e4:	9b05      	ldr	r3, [sp, #20]
 80179e6:	465a      	mov	r2, fp
 80179e8:	4631      	mov	r1, r6
 80179ea:	4628      	mov	r0, r5
 80179ec:	47b8      	blx	r7
 80179ee:	3001      	adds	r0, #1
 80179f0:	f43f af12 	beq.w	8017818 <_printf_float+0x98>
 80179f4:	f04f 0a00 	mov.w	sl, #0
 80179f8:	f104 0b1a 	add.w	fp, r4, #26
 80179fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179fe:	425b      	negs	r3, r3
 8017a00:	4553      	cmp	r3, sl
 8017a02:	dc01      	bgt.n	8017a08 <_printf_float+0x288>
 8017a04:	464b      	mov	r3, r9
 8017a06:	e794      	b.n	8017932 <_printf_float+0x1b2>
 8017a08:	2301      	movs	r3, #1
 8017a0a:	465a      	mov	r2, fp
 8017a0c:	4631      	mov	r1, r6
 8017a0e:	4628      	mov	r0, r5
 8017a10:	47b8      	blx	r7
 8017a12:	3001      	adds	r0, #1
 8017a14:	f43f af00 	beq.w	8017818 <_printf_float+0x98>
 8017a18:	f10a 0a01 	add.w	sl, sl, #1
 8017a1c:	e7ee      	b.n	80179fc <_printf_float+0x27c>
 8017a1e:	bf00      	nop
 8017a20:	ffffffff 	.word	0xffffffff
 8017a24:	7fefffff 	.word	0x7fefffff
 8017a28:	0801c300 	.word	0x0801c300
 8017a2c:	0801c304 	.word	0x0801c304
 8017a30:	0801c308 	.word	0x0801c308
 8017a34:	0801c30c 	.word	0x0801c30c
 8017a38:	0801c310 	.word	0x0801c310
 8017a3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017a3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017a42:	4553      	cmp	r3, sl
 8017a44:	bfa8      	it	ge
 8017a46:	4653      	movge	r3, sl
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	4699      	mov	r9, r3
 8017a4c:	dc37      	bgt.n	8017abe <_printf_float+0x33e>
 8017a4e:	2300      	movs	r3, #0
 8017a50:	9307      	str	r3, [sp, #28]
 8017a52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a56:	f104 021a 	add.w	r2, r4, #26
 8017a5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017a5c:	9907      	ldr	r1, [sp, #28]
 8017a5e:	9306      	str	r3, [sp, #24]
 8017a60:	eba3 0309 	sub.w	r3, r3, r9
 8017a64:	428b      	cmp	r3, r1
 8017a66:	dc31      	bgt.n	8017acc <_printf_float+0x34c>
 8017a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a6a:	459a      	cmp	sl, r3
 8017a6c:	dc3b      	bgt.n	8017ae6 <_printf_float+0x366>
 8017a6e:	6823      	ldr	r3, [r4, #0]
 8017a70:	07da      	lsls	r2, r3, #31
 8017a72:	d438      	bmi.n	8017ae6 <_printf_float+0x366>
 8017a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a76:	ebaa 0903 	sub.w	r9, sl, r3
 8017a7a:	9b06      	ldr	r3, [sp, #24]
 8017a7c:	ebaa 0303 	sub.w	r3, sl, r3
 8017a80:	4599      	cmp	r9, r3
 8017a82:	bfa8      	it	ge
 8017a84:	4699      	movge	r9, r3
 8017a86:	f1b9 0f00 	cmp.w	r9, #0
 8017a8a:	dc34      	bgt.n	8017af6 <_printf_float+0x376>
 8017a8c:	f04f 0800 	mov.w	r8, #0
 8017a90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a94:	f104 0b1a 	add.w	fp, r4, #26
 8017a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a9a:	ebaa 0303 	sub.w	r3, sl, r3
 8017a9e:	eba3 0309 	sub.w	r3, r3, r9
 8017aa2:	4543      	cmp	r3, r8
 8017aa4:	f77f af76 	ble.w	8017994 <_printf_float+0x214>
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	465a      	mov	r2, fp
 8017aac:	4631      	mov	r1, r6
 8017aae:	4628      	mov	r0, r5
 8017ab0:	47b8      	blx	r7
 8017ab2:	3001      	adds	r0, #1
 8017ab4:	f43f aeb0 	beq.w	8017818 <_printf_float+0x98>
 8017ab8:	f108 0801 	add.w	r8, r8, #1
 8017abc:	e7ec      	b.n	8017a98 <_printf_float+0x318>
 8017abe:	4642      	mov	r2, r8
 8017ac0:	4631      	mov	r1, r6
 8017ac2:	4628      	mov	r0, r5
 8017ac4:	47b8      	blx	r7
 8017ac6:	3001      	adds	r0, #1
 8017ac8:	d1c1      	bne.n	8017a4e <_printf_float+0x2ce>
 8017aca:	e6a5      	b.n	8017818 <_printf_float+0x98>
 8017acc:	2301      	movs	r3, #1
 8017ace:	4631      	mov	r1, r6
 8017ad0:	4628      	mov	r0, r5
 8017ad2:	9206      	str	r2, [sp, #24]
 8017ad4:	47b8      	blx	r7
 8017ad6:	3001      	adds	r0, #1
 8017ad8:	f43f ae9e 	beq.w	8017818 <_printf_float+0x98>
 8017adc:	9b07      	ldr	r3, [sp, #28]
 8017ade:	9a06      	ldr	r2, [sp, #24]
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	9307      	str	r3, [sp, #28]
 8017ae4:	e7b9      	b.n	8017a5a <_printf_float+0x2da>
 8017ae6:	9b05      	ldr	r3, [sp, #20]
 8017ae8:	465a      	mov	r2, fp
 8017aea:	4631      	mov	r1, r6
 8017aec:	4628      	mov	r0, r5
 8017aee:	47b8      	blx	r7
 8017af0:	3001      	adds	r0, #1
 8017af2:	d1bf      	bne.n	8017a74 <_printf_float+0x2f4>
 8017af4:	e690      	b.n	8017818 <_printf_float+0x98>
 8017af6:	9a06      	ldr	r2, [sp, #24]
 8017af8:	464b      	mov	r3, r9
 8017afa:	4442      	add	r2, r8
 8017afc:	4631      	mov	r1, r6
 8017afe:	4628      	mov	r0, r5
 8017b00:	47b8      	blx	r7
 8017b02:	3001      	adds	r0, #1
 8017b04:	d1c2      	bne.n	8017a8c <_printf_float+0x30c>
 8017b06:	e687      	b.n	8017818 <_printf_float+0x98>
 8017b08:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8017b0c:	f1b9 0f01 	cmp.w	r9, #1
 8017b10:	dc01      	bgt.n	8017b16 <_printf_float+0x396>
 8017b12:	07db      	lsls	r3, r3, #31
 8017b14:	d536      	bpl.n	8017b84 <_printf_float+0x404>
 8017b16:	2301      	movs	r3, #1
 8017b18:	4642      	mov	r2, r8
 8017b1a:	4631      	mov	r1, r6
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	47b8      	blx	r7
 8017b20:	3001      	adds	r0, #1
 8017b22:	f43f ae79 	beq.w	8017818 <_printf_float+0x98>
 8017b26:	9b05      	ldr	r3, [sp, #20]
 8017b28:	465a      	mov	r2, fp
 8017b2a:	4631      	mov	r1, r6
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	47b8      	blx	r7
 8017b30:	3001      	adds	r0, #1
 8017b32:	f43f ae71 	beq.w	8017818 <_printf_float+0x98>
 8017b36:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017b3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b42:	f109 39ff 	add.w	r9, r9, #4294967295
 8017b46:	d018      	beq.n	8017b7a <_printf_float+0x3fa>
 8017b48:	464b      	mov	r3, r9
 8017b4a:	f108 0201 	add.w	r2, r8, #1
 8017b4e:	4631      	mov	r1, r6
 8017b50:	4628      	mov	r0, r5
 8017b52:	47b8      	blx	r7
 8017b54:	3001      	adds	r0, #1
 8017b56:	d10c      	bne.n	8017b72 <_printf_float+0x3f2>
 8017b58:	e65e      	b.n	8017818 <_printf_float+0x98>
 8017b5a:	2301      	movs	r3, #1
 8017b5c:	465a      	mov	r2, fp
 8017b5e:	4631      	mov	r1, r6
 8017b60:	4628      	mov	r0, r5
 8017b62:	47b8      	blx	r7
 8017b64:	3001      	adds	r0, #1
 8017b66:	f43f ae57 	beq.w	8017818 <_printf_float+0x98>
 8017b6a:	f108 0801 	add.w	r8, r8, #1
 8017b6e:	45c8      	cmp	r8, r9
 8017b70:	dbf3      	blt.n	8017b5a <_printf_float+0x3da>
 8017b72:	4653      	mov	r3, sl
 8017b74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017b78:	e6dc      	b.n	8017934 <_printf_float+0x1b4>
 8017b7a:	f04f 0800 	mov.w	r8, #0
 8017b7e:	f104 0b1a 	add.w	fp, r4, #26
 8017b82:	e7f4      	b.n	8017b6e <_printf_float+0x3ee>
 8017b84:	2301      	movs	r3, #1
 8017b86:	4642      	mov	r2, r8
 8017b88:	e7e1      	b.n	8017b4e <_printf_float+0x3ce>
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	464a      	mov	r2, r9
 8017b8e:	4631      	mov	r1, r6
 8017b90:	4628      	mov	r0, r5
 8017b92:	47b8      	blx	r7
 8017b94:	3001      	adds	r0, #1
 8017b96:	f43f ae3f 	beq.w	8017818 <_printf_float+0x98>
 8017b9a:	f108 0801 	add.w	r8, r8, #1
 8017b9e:	68e3      	ldr	r3, [r4, #12]
 8017ba0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017ba2:	1a5b      	subs	r3, r3, r1
 8017ba4:	4543      	cmp	r3, r8
 8017ba6:	dcf0      	bgt.n	8017b8a <_printf_float+0x40a>
 8017ba8:	e6f8      	b.n	801799c <_printf_float+0x21c>
 8017baa:	f04f 0800 	mov.w	r8, #0
 8017bae:	f104 0919 	add.w	r9, r4, #25
 8017bb2:	e7f4      	b.n	8017b9e <_printf_float+0x41e>

08017bb4 <_printf_common>:
 8017bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bb8:	4616      	mov	r6, r2
 8017bba:	4698      	mov	r8, r3
 8017bbc:	688a      	ldr	r2, [r1, #8]
 8017bbe:	690b      	ldr	r3, [r1, #16]
 8017bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017bc4:	4293      	cmp	r3, r2
 8017bc6:	bfb8      	it	lt
 8017bc8:	4613      	movlt	r3, r2
 8017bca:	6033      	str	r3, [r6, #0]
 8017bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017bd0:	4607      	mov	r7, r0
 8017bd2:	460c      	mov	r4, r1
 8017bd4:	b10a      	cbz	r2, 8017bda <_printf_common+0x26>
 8017bd6:	3301      	adds	r3, #1
 8017bd8:	6033      	str	r3, [r6, #0]
 8017bda:	6823      	ldr	r3, [r4, #0]
 8017bdc:	0699      	lsls	r1, r3, #26
 8017bde:	bf42      	ittt	mi
 8017be0:	6833      	ldrmi	r3, [r6, #0]
 8017be2:	3302      	addmi	r3, #2
 8017be4:	6033      	strmi	r3, [r6, #0]
 8017be6:	6825      	ldr	r5, [r4, #0]
 8017be8:	f015 0506 	ands.w	r5, r5, #6
 8017bec:	d106      	bne.n	8017bfc <_printf_common+0x48>
 8017bee:	f104 0a19 	add.w	sl, r4, #25
 8017bf2:	68e3      	ldr	r3, [r4, #12]
 8017bf4:	6832      	ldr	r2, [r6, #0]
 8017bf6:	1a9b      	subs	r3, r3, r2
 8017bf8:	42ab      	cmp	r3, r5
 8017bfa:	dc26      	bgt.n	8017c4a <_printf_common+0x96>
 8017bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017c00:	6822      	ldr	r2, [r4, #0]
 8017c02:	3b00      	subs	r3, #0
 8017c04:	bf18      	it	ne
 8017c06:	2301      	movne	r3, #1
 8017c08:	0692      	lsls	r2, r2, #26
 8017c0a:	d42b      	bmi.n	8017c64 <_printf_common+0xb0>
 8017c0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017c10:	4641      	mov	r1, r8
 8017c12:	4638      	mov	r0, r7
 8017c14:	47c8      	blx	r9
 8017c16:	3001      	adds	r0, #1
 8017c18:	d01e      	beq.n	8017c58 <_printf_common+0xa4>
 8017c1a:	6823      	ldr	r3, [r4, #0]
 8017c1c:	6922      	ldr	r2, [r4, #16]
 8017c1e:	f003 0306 	and.w	r3, r3, #6
 8017c22:	2b04      	cmp	r3, #4
 8017c24:	bf02      	ittt	eq
 8017c26:	68e5      	ldreq	r5, [r4, #12]
 8017c28:	6833      	ldreq	r3, [r6, #0]
 8017c2a:	1aed      	subeq	r5, r5, r3
 8017c2c:	68a3      	ldr	r3, [r4, #8]
 8017c2e:	bf0c      	ite	eq
 8017c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017c34:	2500      	movne	r5, #0
 8017c36:	4293      	cmp	r3, r2
 8017c38:	bfc4      	itt	gt
 8017c3a:	1a9b      	subgt	r3, r3, r2
 8017c3c:	18ed      	addgt	r5, r5, r3
 8017c3e:	2600      	movs	r6, #0
 8017c40:	341a      	adds	r4, #26
 8017c42:	42b5      	cmp	r5, r6
 8017c44:	d11a      	bne.n	8017c7c <_printf_common+0xc8>
 8017c46:	2000      	movs	r0, #0
 8017c48:	e008      	b.n	8017c5c <_printf_common+0xa8>
 8017c4a:	2301      	movs	r3, #1
 8017c4c:	4652      	mov	r2, sl
 8017c4e:	4641      	mov	r1, r8
 8017c50:	4638      	mov	r0, r7
 8017c52:	47c8      	blx	r9
 8017c54:	3001      	adds	r0, #1
 8017c56:	d103      	bne.n	8017c60 <_printf_common+0xac>
 8017c58:	f04f 30ff 	mov.w	r0, #4294967295
 8017c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c60:	3501      	adds	r5, #1
 8017c62:	e7c6      	b.n	8017bf2 <_printf_common+0x3e>
 8017c64:	18e1      	adds	r1, r4, r3
 8017c66:	1c5a      	adds	r2, r3, #1
 8017c68:	2030      	movs	r0, #48	@ 0x30
 8017c6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017c6e:	4422      	add	r2, r4
 8017c70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017c74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017c78:	3302      	adds	r3, #2
 8017c7a:	e7c7      	b.n	8017c0c <_printf_common+0x58>
 8017c7c:	2301      	movs	r3, #1
 8017c7e:	4622      	mov	r2, r4
 8017c80:	4641      	mov	r1, r8
 8017c82:	4638      	mov	r0, r7
 8017c84:	47c8      	blx	r9
 8017c86:	3001      	adds	r0, #1
 8017c88:	d0e6      	beq.n	8017c58 <_printf_common+0xa4>
 8017c8a:	3601      	adds	r6, #1
 8017c8c:	e7d9      	b.n	8017c42 <_printf_common+0x8e>
	...

08017c90 <_printf_i>:
 8017c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017c94:	7e0f      	ldrb	r7, [r1, #24]
 8017c96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017c98:	2f78      	cmp	r7, #120	@ 0x78
 8017c9a:	4691      	mov	r9, r2
 8017c9c:	4680      	mov	r8, r0
 8017c9e:	460c      	mov	r4, r1
 8017ca0:	469a      	mov	sl, r3
 8017ca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017ca6:	d807      	bhi.n	8017cb8 <_printf_i+0x28>
 8017ca8:	2f62      	cmp	r7, #98	@ 0x62
 8017caa:	d80a      	bhi.n	8017cc2 <_printf_i+0x32>
 8017cac:	2f00      	cmp	r7, #0
 8017cae:	f000 80d2 	beq.w	8017e56 <_printf_i+0x1c6>
 8017cb2:	2f58      	cmp	r7, #88	@ 0x58
 8017cb4:	f000 80b9 	beq.w	8017e2a <_printf_i+0x19a>
 8017cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017cbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017cc0:	e03a      	b.n	8017d38 <_printf_i+0xa8>
 8017cc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017cc6:	2b15      	cmp	r3, #21
 8017cc8:	d8f6      	bhi.n	8017cb8 <_printf_i+0x28>
 8017cca:	a101      	add	r1, pc, #4	@ (adr r1, 8017cd0 <_printf_i+0x40>)
 8017ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017cd0:	08017d29 	.word	0x08017d29
 8017cd4:	08017d3d 	.word	0x08017d3d
 8017cd8:	08017cb9 	.word	0x08017cb9
 8017cdc:	08017cb9 	.word	0x08017cb9
 8017ce0:	08017cb9 	.word	0x08017cb9
 8017ce4:	08017cb9 	.word	0x08017cb9
 8017ce8:	08017d3d 	.word	0x08017d3d
 8017cec:	08017cb9 	.word	0x08017cb9
 8017cf0:	08017cb9 	.word	0x08017cb9
 8017cf4:	08017cb9 	.word	0x08017cb9
 8017cf8:	08017cb9 	.word	0x08017cb9
 8017cfc:	08017e3d 	.word	0x08017e3d
 8017d00:	08017d67 	.word	0x08017d67
 8017d04:	08017df7 	.word	0x08017df7
 8017d08:	08017cb9 	.word	0x08017cb9
 8017d0c:	08017cb9 	.word	0x08017cb9
 8017d10:	08017e5f 	.word	0x08017e5f
 8017d14:	08017cb9 	.word	0x08017cb9
 8017d18:	08017d67 	.word	0x08017d67
 8017d1c:	08017cb9 	.word	0x08017cb9
 8017d20:	08017cb9 	.word	0x08017cb9
 8017d24:	08017dff 	.word	0x08017dff
 8017d28:	6833      	ldr	r3, [r6, #0]
 8017d2a:	1d1a      	adds	r2, r3, #4
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	6032      	str	r2, [r6, #0]
 8017d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017d34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017d38:	2301      	movs	r3, #1
 8017d3a:	e09d      	b.n	8017e78 <_printf_i+0x1e8>
 8017d3c:	6833      	ldr	r3, [r6, #0]
 8017d3e:	6820      	ldr	r0, [r4, #0]
 8017d40:	1d19      	adds	r1, r3, #4
 8017d42:	6031      	str	r1, [r6, #0]
 8017d44:	0606      	lsls	r6, r0, #24
 8017d46:	d501      	bpl.n	8017d4c <_printf_i+0xbc>
 8017d48:	681d      	ldr	r5, [r3, #0]
 8017d4a:	e003      	b.n	8017d54 <_printf_i+0xc4>
 8017d4c:	0645      	lsls	r5, r0, #25
 8017d4e:	d5fb      	bpl.n	8017d48 <_printf_i+0xb8>
 8017d50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017d54:	2d00      	cmp	r5, #0
 8017d56:	da03      	bge.n	8017d60 <_printf_i+0xd0>
 8017d58:	232d      	movs	r3, #45	@ 0x2d
 8017d5a:	426d      	negs	r5, r5
 8017d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017d60:	4859      	ldr	r0, [pc, #356]	@ (8017ec8 <_printf_i+0x238>)
 8017d62:	230a      	movs	r3, #10
 8017d64:	e011      	b.n	8017d8a <_printf_i+0xfa>
 8017d66:	6821      	ldr	r1, [r4, #0]
 8017d68:	6833      	ldr	r3, [r6, #0]
 8017d6a:	0608      	lsls	r0, r1, #24
 8017d6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017d70:	d402      	bmi.n	8017d78 <_printf_i+0xe8>
 8017d72:	0649      	lsls	r1, r1, #25
 8017d74:	bf48      	it	mi
 8017d76:	b2ad      	uxthmi	r5, r5
 8017d78:	2f6f      	cmp	r7, #111	@ 0x6f
 8017d7a:	4853      	ldr	r0, [pc, #332]	@ (8017ec8 <_printf_i+0x238>)
 8017d7c:	6033      	str	r3, [r6, #0]
 8017d7e:	bf14      	ite	ne
 8017d80:	230a      	movne	r3, #10
 8017d82:	2308      	moveq	r3, #8
 8017d84:	2100      	movs	r1, #0
 8017d86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017d8a:	6866      	ldr	r6, [r4, #4]
 8017d8c:	60a6      	str	r6, [r4, #8]
 8017d8e:	2e00      	cmp	r6, #0
 8017d90:	bfa2      	ittt	ge
 8017d92:	6821      	ldrge	r1, [r4, #0]
 8017d94:	f021 0104 	bicge.w	r1, r1, #4
 8017d98:	6021      	strge	r1, [r4, #0]
 8017d9a:	b90d      	cbnz	r5, 8017da0 <_printf_i+0x110>
 8017d9c:	2e00      	cmp	r6, #0
 8017d9e:	d04b      	beq.n	8017e38 <_printf_i+0x1a8>
 8017da0:	4616      	mov	r6, r2
 8017da2:	fbb5 f1f3 	udiv	r1, r5, r3
 8017da6:	fb03 5711 	mls	r7, r3, r1, r5
 8017daa:	5dc7      	ldrb	r7, [r0, r7]
 8017dac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017db0:	462f      	mov	r7, r5
 8017db2:	42bb      	cmp	r3, r7
 8017db4:	460d      	mov	r5, r1
 8017db6:	d9f4      	bls.n	8017da2 <_printf_i+0x112>
 8017db8:	2b08      	cmp	r3, #8
 8017dba:	d10b      	bne.n	8017dd4 <_printf_i+0x144>
 8017dbc:	6823      	ldr	r3, [r4, #0]
 8017dbe:	07df      	lsls	r7, r3, #31
 8017dc0:	d508      	bpl.n	8017dd4 <_printf_i+0x144>
 8017dc2:	6923      	ldr	r3, [r4, #16]
 8017dc4:	6861      	ldr	r1, [r4, #4]
 8017dc6:	4299      	cmp	r1, r3
 8017dc8:	bfde      	ittt	le
 8017dca:	2330      	movle	r3, #48	@ 0x30
 8017dcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017dd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017dd4:	1b92      	subs	r2, r2, r6
 8017dd6:	6122      	str	r2, [r4, #16]
 8017dd8:	f8cd a000 	str.w	sl, [sp]
 8017ddc:	464b      	mov	r3, r9
 8017dde:	aa03      	add	r2, sp, #12
 8017de0:	4621      	mov	r1, r4
 8017de2:	4640      	mov	r0, r8
 8017de4:	f7ff fee6 	bl	8017bb4 <_printf_common>
 8017de8:	3001      	adds	r0, #1
 8017dea:	d14a      	bne.n	8017e82 <_printf_i+0x1f2>
 8017dec:	f04f 30ff 	mov.w	r0, #4294967295
 8017df0:	b004      	add	sp, #16
 8017df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017df6:	6823      	ldr	r3, [r4, #0]
 8017df8:	f043 0320 	orr.w	r3, r3, #32
 8017dfc:	6023      	str	r3, [r4, #0]
 8017dfe:	4833      	ldr	r0, [pc, #204]	@ (8017ecc <_printf_i+0x23c>)
 8017e00:	2778      	movs	r7, #120	@ 0x78
 8017e02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017e06:	6823      	ldr	r3, [r4, #0]
 8017e08:	6831      	ldr	r1, [r6, #0]
 8017e0a:	061f      	lsls	r7, r3, #24
 8017e0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017e10:	d402      	bmi.n	8017e18 <_printf_i+0x188>
 8017e12:	065f      	lsls	r7, r3, #25
 8017e14:	bf48      	it	mi
 8017e16:	b2ad      	uxthmi	r5, r5
 8017e18:	6031      	str	r1, [r6, #0]
 8017e1a:	07d9      	lsls	r1, r3, #31
 8017e1c:	bf44      	itt	mi
 8017e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8017e22:	6023      	strmi	r3, [r4, #0]
 8017e24:	b11d      	cbz	r5, 8017e2e <_printf_i+0x19e>
 8017e26:	2310      	movs	r3, #16
 8017e28:	e7ac      	b.n	8017d84 <_printf_i+0xf4>
 8017e2a:	4827      	ldr	r0, [pc, #156]	@ (8017ec8 <_printf_i+0x238>)
 8017e2c:	e7e9      	b.n	8017e02 <_printf_i+0x172>
 8017e2e:	6823      	ldr	r3, [r4, #0]
 8017e30:	f023 0320 	bic.w	r3, r3, #32
 8017e34:	6023      	str	r3, [r4, #0]
 8017e36:	e7f6      	b.n	8017e26 <_printf_i+0x196>
 8017e38:	4616      	mov	r6, r2
 8017e3a:	e7bd      	b.n	8017db8 <_printf_i+0x128>
 8017e3c:	6833      	ldr	r3, [r6, #0]
 8017e3e:	6825      	ldr	r5, [r4, #0]
 8017e40:	6961      	ldr	r1, [r4, #20]
 8017e42:	1d18      	adds	r0, r3, #4
 8017e44:	6030      	str	r0, [r6, #0]
 8017e46:	062e      	lsls	r6, r5, #24
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	d501      	bpl.n	8017e50 <_printf_i+0x1c0>
 8017e4c:	6019      	str	r1, [r3, #0]
 8017e4e:	e002      	b.n	8017e56 <_printf_i+0x1c6>
 8017e50:	0668      	lsls	r0, r5, #25
 8017e52:	d5fb      	bpl.n	8017e4c <_printf_i+0x1bc>
 8017e54:	8019      	strh	r1, [r3, #0]
 8017e56:	2300      	movs	r3, #0
 8017e58:	6123      	str	r3, [r4, #16]
 8017e5a:	4616      	mov	r6, r2
 8017e5c:	e7bc      	b.n	8017dd8 <_printf_i+0x148>
 8017e5e:	6833      	ldr	r3, [r6, #0]
 8017e60:	1d1a      	adds	r2, r3, #4
 8017e62:	6032      	str	r2, [r6, #0]
 8017e64:	681e      	ldr	r6, [r3, #0]
 8017e66:	6862      	ldr	r2, [r4, #4]
 8017e68:	2100      	movs	r1, #0
 8017e6a:	4630      	mov	r0, r6
 8017e6c:	f7e8 fa50 	bl	8000310 <memchr>
 8017e70:	b108      	cbz	r0, 8017e76 <_printf_i+0x1e6>
 8017e72:	1b80      	subs	r0, r0, r6
 8017e74:	6060      	str	r0, [r4, #4]
 8017e76:	6863      	ldr	r3, [r4, #4]
 8017e78:	6123      	str	r3, [r4, #16]
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017e80:	e7aa      	b.n	8017dd8 <_printf_i+0x148>
 8017e82:	6923      	ldr	r3, [r4, #16]
 8017e84:	4632      	mov	r2, r6
 8017e86:	4649      	mov	r1, r9
 8017e88:	4640      	mov	r0, r8
 8017e8a:	47d0      	blx	sl
 8017e8c:	3001      	adds	r0, #1
 8017e8e:	d0ad      	beq.n	8017dec <_printf_i+0x15c>
 8017e90:	6823      	ldr	r3, [r4, #0]
 8017e92:	079b      	lsls	r3, r3, #30
 8017e94:	d413      	bmi.n	8017ebe <_printf_i+0x22e>
 8017e96:	68e0      	ldr	r0, [r4, #12]
 8017e98:	9b03      	ldr	r3, [sp, #12]
 8017e9a:	4298      	cmp	r0, r3
 8017e9c:	bfb8      	it	lt
 8017e9e:	4618      	movlt	r0, r3
 8017ea0:	e7a6      	b.n	8017df0 <_printf_i+0x160>
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	4632      	mov	r2, r6
 8017ea6:	4649      	mov	r1, r9
 8017ea8:	4640      	mov	r0, r8
 8017eaa:	47d0      	blx	sl
 8017eac:	3001      	adds	r0, #1
 8017eae:	d09d      	beq.n	8017dec <_printf_i+0x15c>
 8017eb0:	3501      	adds	r5, #1
 8017eb2:	68e3      	ldr	r3, [r4, #12]
 8017eb4:	9903      	ldr	r1, [sp, #12]
 8017eb6:	1a5b      	subs	r3, r3, r1
 8017eb8:	42ab      	cmp	r3, r5
 8017eba:	dcf2      	bgt.n	8017ea2 <_printf_i+0x212>
 8017ebc:	e7eb      	b.n	8017e96 <_printf_i+0x206>
 8017ebe:	2500      	movs	r5, #0
 8017ec0:	f104 0619 	add.w	r6, r4, #25
 8017ec4:	e7f5      	b.n	8017eb2 <_printf_i+0x222>
 8017ec6:	bf00      	nop
 8017ec8:	0801c312 	.word	0x0801c312
 8017ecc:	0801c323 	.word	0x0801c323

08017ed0 <_scanf_float>:
 8017ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed4:	b087      	sub	sp, #28
 8017ed6:	4617      	mov	r7, r2
 8017ed8:	9303      	str	r3, [sp, #12]
 8017eda:	688b      	ldr	r3, [r1, #8]
 8017edc:	1e5a      	subs	r2, r3, #1
 8017ede:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017ee2:	bf81      	itttt	hi
 8017ee4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017ee8:	eb03 0b05 	addhi.w	fp, r3, r5
 8017eec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017ef0:	608b      	strhi	r3, [r1, #8]
 8017ef2:	680b      	ldr	r3, [r1, #0]
 8017ef4:	460a      	mov	r2, r1
 8017ef6:	f04f 0500 	mov.w	r5, #0
 8017efa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017efe:	f842 3b1c 	str.w	r3, [r2], #28
 8017f02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017f06:	4680      	mov	r8, r0
 8017f08:	460c      	mov	r4, r1
 8017f0a:	bf98      	it	ls
 8017f0c:	f04f 0b00 	movls.w	fp, #0
 8017f10:	9201      	str	r2, [sp, #4]
 8017f12:	4616      	mov	r6, r2
 8017f14:	46aa      	mov	sl, r5
 8017f16:	46a9      	mov	r9, r5
 8017f18:	9502      	str	r5, [sp, #8]
 8017f1a:	68a2      	ldr	r2, [r4, #8]
 8017f1c:	b152      	cbz	r2, 8017f34 <_scanf_float+0x64>
 8017f1e:	683b      	ldr	r3, [r7, #0]
 8017f20:	781b      	ldrb	r3, [r3, #0]
 8017f22:	2b4e      	cmp	r3, #78	@ 0x4e
 8017f24:	d864      	bhi.n	8017ff0 <_scanf_float+0x120>
 8017f26:	2b40      	cmp	r3, #64	@ 0x40
 8017f28:	d83c      	bhi.n	8017fa4 <_scanf_float+0xd4>
 8017f2a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8017f2e:	b2c8      	uxtb	r0, r1
 8017f30:	280e      	cmp	r0, #14
 8017f32:	d93a      	bls.n	8017faa <_scanf_float+0xda>
 8017f34:	f1b9 0f00 	cmp.w	r9, #0
 8017f38:	d003      	beq.n	8017f42 <_scanf_float+0x72>
 8017f3a:	6823      	ldr	r3, [r4, #0]
 8017f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017f40:	6023      	str	r3, [r4, #0]
 8017f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f46:	f1ba 0f01 	cmp.w	sl, #1
 8017f4a:	f200 8117 	bhi.w	801817c <_scanf_float+0x2ac>
 8017f4e:	9b01      	ldr	r3, [sp, #4]
 8017f50:	429e      	cmp	r6, r3
 8017f52:	f200 8108 	bhi.w	8018166 <_scanf_float+0x296>
 8017f56:	2001      	movs	r0, #1
 8017f58:	b007      	add	sp, #28
 8017f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f5e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8017f62:	2a0d      	cmp	r2, #13
 8017f64:	d8e6      	bhi.n	8017f34 <_scanf_float+0x64>
 8017f66:	a101      	add	r1, pc, #4	@ (adr r1, 8017f6c <_scanf_float+0x9c>)
 8017f68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017f6c:	080180b3 	.word	0x080180b3
 8017f70:	08017f35 	.word	0x08017f35
 8017f74:	08017f35 	.word	0x08017f35
 8017f78:	08017f35 	.word	0x08017f35
 8017f7c:	08018113 	.word	0x08018113
 8017f80:	080180eb 	.word	0x080180eb
 8017f84:	08017f35 	.word	0x08017f35
 8017f88:	08017f35 	.word	0x08017f35
 8017f8c:	080180c1 	.word	0x080180c1
 8017f90:	08017f35 	.word	0x08017f35
 8017f94:	08017f35 	.word	0x08017f35
 8017f98:	08017f35 	.word	0x08017f35
 8017f9c:	08017f35 	.word	0x08017f35
 8017fa0:	08018079 	.word	0x08018079
 8017fa4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8017fa8:	e7db      	b.n	8017f62 <_scanf_float+0x92>
 8017faa:	290e      	cmp	r1, #14
 8017fac:	d8c2      	bhi.n	8017f34 <_scanf_float+0x64>
 8017fae:	a001      	add	r0, pc, #4	@ (adr r0, 8017fb4 <_scanf_float+0xe4>)
 8017fb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017fb4:	08018069 	.word	0x08018069
 8017fb8:	08017f35 	.word	0x08017f35
 8017fbc:	08018069 	.word	0x08018069
 8017fc0:	080180ff 	.word	0x080180ff
 8017fc4:	08017f35 	.word	0x08017f35
 8017fc8:	08018011 	.word	0x08018011
 8017fcc:	0801804f 	.word	0x0801804f
 8017fd0:	0801804f 	.word	0x0801804f
 8017fd4:	0801804f 	.word	0x0801804f
 8017fd8:	0801804f 	.word	0x0801804f
 8017fdc:	0801804f 	.word	0x0801804f
 8017fe0:	0801804f 	.word	0x0801804f
 8017fe4:	0801804f 	.word	0x0801804f
 8017fe8:	0801804f 	.word	0x0801804f
 8017fec:	0801804f 	.word	0x0801804f
 8017ff0:	2b6e      	cmp	r3, #110	@ 0x6e
 8017ff2:	d809      	bhi.n	8018008 <_scanf_float+0x138>
 8017ff4:	2b60      	cmp	r3, #96	@ 0x60
 8017ff6:	d8b2      	bhi.n	8017f5e <_scanf_float+0x8e>
 8017ff8:	2b54      	cmp	r3, #84	@ 0x54
 8017ffa:	d07b      	beq.n	80180f4 <_scanf_float+0x224>
 8017ffc:	2b59      	cmp	r3, #89	@ 0x59
 8017ffe:	d199      	bne.n	8017f34 <_scanf_float+0x64>
 8018000:	2d07      	cmp	r5, #7
 8018002:	d197      	bne.n	8017f34 <_scanf_float+0x64>
 8018004:	2508      	movs	r5, #8
 8018006:	e02c      	b.n	8018062 <_scanf_float+0x192>
 8018008:	2b74      	cmp	r3, #116	@ 0x74
 801800a:	d073      	beq.n	80180f4 <_scanf_float+0x224>
 801800c:	2b79      	cmp	r3, #121	@ 0x79
 801800e:	e7f6      	b.n	8017ffe <_scanf_float+0x12e>
 8018010:	6821      	ldr	r1, [r4, #0]
 8018012:	05c8      	lsls	r0, r1, #23
 8018014:	d51b      	bpl.n	801804e <_scanf_float+0x17e>
 8018016:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801801a:	6021      	str	r1, [r4, #0]
 801801c:	f109 0901 	add.w	r9, r9, #1
 8018020:	f1bb 0f00 	cmp.w	fp, #0
 8018024:	d003      	beq.n	801802e <_scanf_float+0x15e>
 8018026:	3201      	adds	r2, #1
 8018028:	f10b 3bff 	add.w	fp, fp, #4294967295
 801802c:	60a2      	str	r2, [r4, #8]
 801802e:	68a3      	ldr	r3, [r4, #8]
 8018030:	3b01      	subs	r3, #1
 8018032:	60a3      	str	r3, [r4, #8]
 8018034:	6923      	ldr	r3, [r4, #16]
 8018036:	3301      	adds	r3, #1
 8018038:	6123      	str	r3, [r4, #16]
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	3b01      	subs	r3, #1
 801803e:	2b00      	cmp	r3, #0
 8018040:	607b      	str	r3, [r7, #4]
 8018042:	f340 8087 	ble.w	8018154 <_scanf_float+0x284>
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	3301      	adds	r3, #1
 801804a:	603b      	str	r3, [r7, #0]
 801804c:	e765      	b.n	8017f1a <_scanf_float+0x4a>
 801804e:	eb1a 0105 	adds.w	r1, sl, r5
 8018052:	f47f af6f 	bne.w	8017f34 <_scanf_float+0x64>
 8018056:	6822      	ldr	r2, [r4, #0]
 8018058:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801805c:	6022      	str	r2, [r4, #0]
 801805e:	460d      	mov	r5, r1
 8018060:	468a      	mov	sl, r1
 8018062:	f806 3b01 	strb.w	r3, [r6], #1
 8018066:	e7e2      	b.n	801802e <_scanf_float+0x15e>
 8018068:	6822      	ldr	r2, [r4, #0]
 801806a:	0610      	lsls	r0, r2, #24
 801806c:	f57f af62 	bpl.w	8017f34 <_scanf_float+0x64>
 8018070:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8018074:	6022      	str	r2, [r4, #0]
 8018076:	e7f4      	b.n	8018062 <_scanf_float+0x192>
 8018078:	f1ba 0f00 	cmp.w	sl, #0
 801807c:	d10e      	bne.n	801809c <_scanf_float+0x1cc>
 801807e:	f1b9 0f00 	cmp.w	r9, #0
 8018082:	d10e      	bne.n	80180a2 <_scanf_float+0x1d2>
 8018084:	6822      	ldr	r2, [r4, #0]
 8018086:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801808a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801808e:	d108      	bne.n	80180a2 <_scanf_float+0x1d2>
 8018090:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8018094:	6022      	str	r2, [r4, #0]
 8018096:	f04f 0a01 	mov.w	sl, #1
 801809a:	e7e2      	b.n	8018062 <_scanf_float+0x192>
 801809c:	f1ba 0f02 	cmp.w	sl, #2
 80180a0:	d055      	beq.n	801814e <_scanf_float+0x27e>
 80180a2:	2d01      	cmp	r5, #1
 80180a4:	d002      	beq.n	80180ac <_scanf_float+0x1dc>
 80180a6:	2d04      	cmp	r5, #4
 80180a8:	f47f af44 	bne.w	8017f34 <_scanf_float+0x64>
 80180ac:	3501      	adds	r5, #1
 80180ae:	b2ed      	uxtb	r5, r5
 80180b0:	e7d7      	b.n	8018062 <_scanf_float+0x192>
 80180b2:	f1ba 0f01 	cmp.w	sl, #1
 80180b6:	f47f af3d 	bne.w	8017f34 <_scanf_float+0x64>
 80180ba:	f04f 0a02 	mov.w	sl, #2
 80180be:	e7d0      	b.n	8018062 <_scanf_float+0x192>
 80180c0:	b97d      	cbnz	r5, 80180e2 <_scanf_float+0x212>
 80180c2:	f1b9 0f00 	cmp.w	r9, #0
 80180c6:	f47f af38 	bne.w	8017f3a <_scanf_float+0x6a>
 80180ca:	6822      	ldr	r2, [r4, #0]
 80180cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80180d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80180d4:	f040 8101 	bne.w	80182da <_scanf_float+0x40a>
 80180d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80180dc:	6022      	str	r2, [r4, #0]
 80180de:	2501      	movs	r5, #1
 80180e0:	e7bf      	b.n	8018062 <_scanf_float+0x192>
 80180e2:	2d03      	cmp	r5, #3
 80180e4:	d0e2      	beq.n	80180ac <_scanf_float+0x1dc>
 80180e6:	2d05      	cmp	r5, #5
 80180e8:	e7de      	b.n	80180a8 <_scanf_float+0x1d8>
 80180ea:	2d02      	cmp	r5, #2
 80180ec:	f47f af22 	bne.w	8017f34 <_scanf_float+0x64>
 80180f0:	2503      	movs	r5, #3
 80180f2:	e7b6      	b.n	8018062 <_scanf_float+0x192>
 80180f4:	2d06      	cmp	r5, #6
 80180f6:	f47f af1d 	bne.w	8017f34 <_scanf_float+0x64>
 80180fa:	2507      	movs	r5, #7
 80180fc:	e7b1      	b.n	8018062 <_scanf_float+0x192>
 80180fe:	6822      	ldr	r2, [r4, #0]
 8018100:	0591      	lsls	r1, r2, #22
 8018102:	f57f af17 	bpl.w	8017f34 <_scanf_float+0x64>
 8018106:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801810a:	6022      	str	r2, [r4, #0]
 801810c:	f8cd 9008 	str.w	r9, [sp, #8]
 8018110:	e7a7      	b.n	8018062 <_scanf_float+0x192>
 8018112:	6822      	ldr	r2, [r4, #0]
 8018114:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8018118:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801811c:	d006      	beq.n	801812c <_scanf_float+0x25c>
 801811e:	0550      	lsls	r0, r2, #21
 8018120:	f57f af08 	bpl.w	8017f34 <_scanf_float+0x64>
 8018124:	f1b9 0f00 	cmp.w	r9, #0
 8018128:	f000 80d7 	beq.w	80182da <_scanf_float+0x40a>
 801812c:	0591      	lsls	r1, r2, #22
 801812e:	bf58      	it	pl
 8018130:	9902      	ldrpl	r1, [sp, #8]
 8018132:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8018136:	bf58      	it	pl
 8018138:	eba9 0101 	subpl.w	r1, r9, r1
 801813c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8018140:	bf58      	it	pl
 8018142:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018146:	6022      	str	r2, [r4, #0]
 8018148:	f04f 0900 	mov.w	r9, #0
 801814c:	e789      	b.n	8018062 <_scanf_float+0x192>
 801814e:	f04f 0a03 	mov.w	sl, #3
 8018152:	e786      	b.n	8018062 <_scanf_float+0x192>
 8018154:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018158:	4639      	mov	r1, r7
 801815a:	4640      	mov	r0, r8
 801815c:	4798      	blx	r3
 801815e:	2800      	cmp	r0, #0
 8018160:	f43f aedb 	beq.w	8017f1a <_scanf_float+0x4a>
 8018164:	e6e6      	b.n	8017f34 <_scanf_float+0x64>
 8018166:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801816a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801816e:	463a      	mov	r2, r7
 8018170:	4640      	mov	r0, r8
 8018172:	4798      	blx	r3
 8018174:	6923      	ldr	r3, [r4, #16]
 8018176:	3b01      	subs	r3, #1
 8018178:	6123      	str	r3, [r4, #16]
 801817a:	e6e8      	b.n	8017f4e <_scanf_float+0x7e>
 801817c:	1e6b      	subs	r3, r5, #1
 801817e:	2b06      	cmp	r3, #6
 8018180:	d824      	bhi.n	80181cc <_scanf_float+0x2fc>
 8018182:	2d02      	cmp	r5, #2
 8018184:	d836      	bhi.n	80181f4 <_scanf_float+0x324>
 8018186:	9b01      	ldr	r3, [sp, #4]
 8018188:	429e      	cmp	r6, r3
 801818a:	f67f aee4 	bls.w	8017f56 <_scanf_float+0x86>
 801818e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018196:	463a      	mov	r2, r7
 8018198:	4640      	mov	r0, r8
 801819a:	4798      	blx	r3
 801819c:	6923      	ldr	r3, [r4, #16]
 801819e:	3b01      	subs	r3, #1
 80181a0:	6123      	str	r3, [r4, #16]
 80181a2:	e7f0      	b.n	8018186 <_scanf_float+0x2b6>
 80181a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80181a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80181ac:	463a      	mov	r2, r7
 80181ae:	4640      	mov	r0, r8
 80181b0:	4798      	blx	r3
 80181b2:	6923      	ldr	r3, [r4, #16]
 80181b4:	3b01      	subs	r3, #1
 80181b6:	6123      	str	r3, [r4, #16]
 80181b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80181bc:	fa5f fa8a 	uxtb.w	sl, sl
 80181c0:	f1ba 0f02 	cmp.w	sl, #2
 80181c4:	d1ee      	bne.n	80181a4 <_scanf_float+0x2d4>
 80181c6:	3d03      	subs	r5, #3
 80181c8:	b2ed      	uxtb	r5, r5
 80181ca:	1b76      	subs	r6, r6, r5
 80181cc:	6823      	ldr	r3, [r4, #0]
 80181ce:	05da      	lsls	r2, r3, #23
 80181d0:	d530      	bpl.n	8018234 <_scanf_float+0x364>
 80181d2:	055b      	lsls	r3, r3, #21
 80181d4:	d511      	bpl.n	80181fa <_scanf_float+0x32a>
 80181d6:	9b01      	ldr	r3, [sp, #4]
 80181d8:	429e      	cmp	r6, r3
 80181da:	f67f aebc 	bls.w	8017f56 <_scanf_float+0x86>
 80181de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80181e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80181e6:	463a      	mov	r2, r7
 80181e8:	4640      	mov	r0, r8
 80181ea:	4798      	blx	r3
 80181ec:	6923      	ldr	r3, [r4, #16]
 80181ee:	3b01      	subs	r3, #1
 80181f0:	6123      	str	r3, [r4, #16]
 80181f2:	e7f0      	b.n	80181d6 <_scanf_float+0x306>
 80181f4:	46aa      	mov	sl, r5
 80181f6:	46b3      	mov	fp, r6
 80181f8:	e7de      	b.n	80181b8 <_scanf_float+0x2e8>
 80181fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80181fe:	6923      	ldr	r3, [r4, #16]
 8018200:	2965      	cmp	r1, #101	@ 0x65
 8018202:	f103 33ff 	add.w	r3, r3, #4294967295
 8018206:	f106 35ff 	add.w	r5, r6, #4294967295
 801820a:	6123      	str	r3, [r4, #16]
 801820c:	d00c      	beq.n	8018228 <_scanf_float+0x358>
 801820e:	2945      	cmp	r1, #69	@ 0x45
 8018210:	d00a      	beq.n	8018228 <_scanf_float+0x358>
 8018212:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018216:	463a      	mov	r2, r7
 8018218:	4640      	mov	r0, r8
 801821a:	4798      	blx	r3
 801821c:	6923      	ldr	r3, [r4, #16]
 801821e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018222:	3b01      	subs	r3, #1
 8018224:	1eb5      	subs	r5, r6, #2
 8018226:	6123      	str	r3, [r4, #16]
 8018228:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801822c:	463a      	mov	r2, r7
 801822e:	4640      	mov	r0, r8
 8018230:	4798      	blx	r3
 8018232:	462e      	mov	r6, r5
 8018234:	6822      	ldr	r2, [r4, #0]
 8018236:	f012 0210 	ands.w	r2, r2, #16
 801823a:	d001      	beq.n	8018240 <_scanf_float+0x370>
 801823c:	2000      	movs	r0, #0
 801823e:	e68b      	b.n	8017f58 <_scanf_float+0x88>
 8018240:	7032      	strb	r2, [r6, #0]
 8018242:	6823      	ldr	r3, [r4, #0]
 8018244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8018248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801824c:	d11a      	bne.n	8018284 <_scanf_float+0x3b4>
 801824e:	9b02      	ldr	r3, [sp, #8]
 8018250:	454b      	cmp	r3, r9
 8018252:	eba3 0209 	sub.w	r2, r3, r9
 8018256:	d121      	bne.n	801829c <_scanf_float+0x3cc>
 8018258:	9901      	ldr	r1, [sp, #4]
 801825a:	2200      	movs	r2, #0
 801825c:	4640      	mov	r0, r8
 801825e:	f002 fc41 	bl	801aae4 <_strtod_r>
 8018262:	9b03      	ldr	r3, [sp, #12]
 8018264:	6821      	ldr	r1, [r4, #0]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	f011 0f02 	tst.w	r1, #2
 801826c:	f103 0204 	add.w	r2, r3, #4
 8018270:	d01f      	beq.n	80182b2 <_scanf_float+0x3e2>
 8018272:	9903      	ldr	r1, [sp, #12]
 8018274:	600a      	str	r2, [r1, #0]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	ed83 0b00 	vstr	d0, [r3]
 801827c:	68e3      	ldr	r3, [r4, #12]
 801827e:	3301      	adds	r3, #1
 8018280:	60e3      	str	r3, [r4, #12]
 8018282:	e7db      	b.n	801823c <_scanf_float+0x36c>
 8018284:	9b04      	ldr	r3, [sp, #16]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d0e6      	beq.n	8018258 <_scanf_float+0x388>
 801828a:	9905      	ldr	r1, [sp, #20]
 801828c:	230a      	movs	r3, #10
 801828e:	3101      	adds	r1, #1
 8018290:	4640      	mov	r0, r8
 8018292:	f002 fca7 	bl	801abe4 <_strtol_r>
 8018296:	9b04      	ldr	r3, [sp, #16]
 8018298:	9e05      	ldr	r6, [sp, #20]
 801829a:	1ac2      	subs	r2, r0, r3
 801829c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80182a0:	429e      	cmp	r6, r3
 80182a2:	bf28      	it	cs
 80182a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80182a8:	490d      	ldr	r1, [pc, #52]	@ (80182e0 <_scanf_float+0x410>)
 80182aa:	4630      	mov	r0, r6
 80182ac:	f000 f94e 	bl	801854c <siprintf>
 80182b0:	e7d2      	b.n	8018258 <_scanf_float+0x388>
 80182b2:	f011 0f04 	tst.w	r1, #4
 80182b6:	9903      	ldr	r1, [sp, #12]
 80182b8:	600a      	str	r2, [r1, #0]
 80182ba:	d1dc      	bne.n	8018276 <_scanf_float+0x3a6>
 80182bc:	eeb4 0b40 	vcmp.f64	d0, d0
 80182c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182c4:	681d      	ldr	r5, [r3, #0]
 80182c6:	d705      	bvc.n	80182d4 <_scanf_float+0x404>
 80182c8:	4806      	ldr	r0, [pc, #24]	@ (80182e4 <_scanf_float+0x414>)
 80182ca:	f000 fac5 	bl	8018858 <nanf>
 80182ce:	ed85 0a00 	vstr	s0, [r5]
 80182d2:	e7d3      	b.n	801827c <_scanf_float+0x3ac>
 80182d4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80182d8:	e7f9      	b.n	80182ce <_scanf_float+0x3fe>
 80182da:	f04f 0900 	mov.w	r9, #0
 80182de:	e630      	b.n	8017f42 <_scanf_float+0x72>
 80182e0:	0801c334 	.word	0x0801c334
 80182e4:	0801c6cd 	.word	0x0801c6cd

080182e8 <std>:
 80182e8:	2300      	movs	r3, #0
 80182ea:	b510      	push	{r4, lr}
 80182ec:	4604      	mov	r4, r0
 80182ee:	e9c0 3300 	strd	r3, r3, [r0]
 80182f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80182f6:	6083      	str	r3, [r0, #8]
 80182f8:	8181      	strh	r1, [r0, #12]
 80182fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80182fc:	81c2      	strh	r2, [r0, #14]
 80182fe:	6183      	str	r3, [r0, #24]
 8018300:	4619      	mov	r1, r3
 8018302:	2208      	movs	r2, #8
 8018304:	305c      	adds	r0, #92	@ 0x5c
 8018306:	f000 fa19 	bl	801873c <memset>
 801830a:	4b0d      	ldr	r3, [pc, #52]	@ (8018340 <std+0x58>)
 801830c:	6263      	str	r3, [r4, #36]	@ 0x24
 801830e:	4b0d      	ldr	r3, [pc, #52]	@ (8018344 <std+0x5c>)
 8018310:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018312:	4b0d      	ldr	r3, [pc, #52]	@ (8018348 <std+0x60>)
 8018314:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018316:	4b0d      	ldr	r3, [pc, #52]	@ (801834c <std+0x64>)
 8018318:	6323      	str	r3, [r4, #48]	@ 0x30
 801831a:	4b0d      	ldr	r3, [pc, #52]	@ (8018350 <std+0x68>)
 801831c:	6224      	str	r4, [r4, #32]
 801831e:	429c      	cmp	r4, r3
 8018320:	d006      	beq.n	8018330 <std+0x48>
 8018322:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018326:	4294      	cmp	r4, r2
 8018328:	d002      	beq.n	8018330 <std+0x48>
 801832a:	33d0      	adds	r3, #208	@ 0xd0
 801832c:	429c      	cmp	r4, r3
 801832e:	d105      	bne.n	801833c <std+0x54>
 8018330:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018338:	f000 ba7c 	b.w	8018834 <__retarget_lock_init_recursive>
 801833c:	bd10      	pop	{r4, pc}
 801833e:	bf00      	nop
 8018340:	0801858d 	.word	0x0801858d
 8018344:	080185af 	.word	0x080185af
 8018348:	080185e7 	.word	0x080185e7
 801834c:	0801860b 	.word	0x0801860b
 8018350:	24001f68 	.word	0x24001f68

08018354 <stdio_exit_handler>:
 8018354:	4a02      	ldr	r2, [pc, #8]	@ (8018360 <stdio_exit_handler+0xc>)
 8018356:	4903      	ldr	r1, [pc, #12]	@ (8018364 <stdio_exit_handler+0x10>)
 8018358:	4803      	ldr	r0, [pc, #12]	@ (8018368 <stdio_exit_handler+0x14>)
 801835a:	f000 b869 	b.w	8018430 <_fwalk_sglue>
 801835e:	bf00      	nop
 8018360:	24000168 	.word	0x24000168
 8018364:	0801b225 	.word	0x0801b225
 8018368:	24000178 	.word	0x24000178

0801836c <cleanup_stdio>:
 801836c:	6841      	ldr	r1, [r0, #4]
 801836e:	4b0c      	ldr	r3, [pc, #48]	@ (80183a0 <cleanup_stdio+0x34>)
 8018370:	4299      	cmp	r1, r3
 8018372:	b510      	push	{r4, lr}
 8018374:	4604      	mov	r4, r0
 8018376:	d001      	beq.n	801837c <cleanup_stdio+0x10>
 8018378:	f002 ff54 	bl	801b224 <_fflush_r>
 801837c:	68a1      	ldr	r1, [r4, #8]
 801837e:	4b09      	ldr	r3, [pc, #36]	@ (80183a4 <cleanup_stdio+0x38>)
 8018380:	4299      	cmp	r1, r3
 8018382:	d002      	beq.n	801838a <cleanup_stdio+0x1e>
 8018384:	4620      	mov	r0, r4
 8018386:	f002 ff4d 	bl	801b224 <_fflush_r>
 801838a:	68e1      	ldr	r1, [r4, #12]
 801838c:	4b06      	ldr	r3, [pc, #24]	@ (80183a8 <cleanup_stdio+0x3c>)
 801838e:	4299      	cmp	r1, r3
 8018390:	d004      	beq.n	801839c <cleanup_stdio+0x30>
 8018392:	4620      	mov	r0, r4
 8018394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018398:	f002 bf44 	b.w	801b224 <_fflush_r>
 801839c:	bd10      	pop	{r4, pc}
 801839e:	bf00      	nop
 80183a0:	24001f68 	.word	0x24001f68
 80183a4:	24001fd0 	.word	0x24001fd0
 80183a8:	24002038 	.word	0x24002038

080183ac <global_stdio_init.part.0>:
 80183ac:	b510      	push	{r4, lr}
 80183ae:	4b0b      	ldr	r3, [pc, #44]	@ (80183dc <global_stdio_init.part.0+0x30>)
 80183b0:	4c0b      	ldr	r4, [pc, #44]	@ (80183e0 <global_stdio_init.part.0+0x34>)
 80183b2:	4a0c      	ldr	r2, [pc, #48]	@ (80183e4 <global_stdio_init.part.0+0x38>)
 80183b4:	601a      	str	r2, [r3, #0]
 80183b6:	4620      	mov	r0, r4
 80183b8:	2200      	movs	r2, #0
 80183ba:	2104      	movs	r1, #4
 80183bc:	f7ff ff94 	bl	80182e8 <std>
 80183c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80183c4:	2201      	movs	r2, #1
 80183c6:	2109      	movs	r1, #9
 80183c8:	f7ff ff8e 	bl	80182e8 <std>
 80183cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80183d0:	2202      	movs	r2, #2
 80183d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183d6:	2112      	movs	r1, #18
 80183d8:	f7ff bf86 	b.w	80182e8 <std>
 80183dc:	240020a0 	.word	0x240020a0
 80183e0:	24001f68 	.word	0x24001f68
 80183e4:	08018355 	.word	0x08018355

080183e8 <__sfp_lock_acquire>:
 80183e8:	4801      	ldr	r0, [pc, #4]	@ (80183f0 <__sfp_lock_acquire+0x8>)
 80183ea:	f000 ba24 	b.w	8018836 <__retarget_lock_acquire_recursive>
 80183ee:	bf00      	nop
 80183f0:	240020a9 	.word	0x240020a9

080183f4 <__sfp_lock_release>:
 80183f4:	4801      	ldr	r0, [pc, #4]	@ (80183fc <__sfp_lock_release+0x8>)
 80183f6:	f000 ba1f 	b.w	8018838 <__retarget_lock_release_recursive>
 80183fa:	bf00      	nop
 80183fc:	240020a9 	.word	0x240020a9

08018400 <__sinit>:
 8018400:	b510      	push	{r4, lr}
 8018402:	4604      	mov	r4, r0
 8018404:	f7ff fff0 	bl	80183e8 <__sfp_lock_acquire>
 8018408:	6a23      	ldr	r3, [r4, #32]
 801840a:	b11b      	cbz	r3, 8018414 <__sinit+0x14>
 801840c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018410:	f7ff bff0 	b.w	80183f4 <__sfp_lock_release>
 8018414:	4b04      	ldr	r3, [pc, #16]	@ (8018428 <__sinit+0x28>)
 8018416:	6223      	str	r3, [r4, #32]
 8018418:	4b04      	ldr	r3, [pc, #16]	@ (801842c <__sinit+0x2c>)
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d1f5      	bne.n	801840c <__sinit+0xc>
 8018420:	f7ff ffc4 	bl	80183ac <global_stdio_init.part.0>
 8018424:	e7f2      	b.n	801840c <__sinit+0xc>
 8018426:	bf00      	nop
 8018428:	0801836d 	.word	0x0801836d
 801842c:	240020a0 	.word	0x240020a0

08018430 <_fwalk_sglue>:
 8018430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018434:	4607      	mov	r7, r0
 8018436:	4688      	mov	r8, r1
 8018438:	4614      	mov	r4, r2
 801843a:	2600      	movs	r6, #0
 801843c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018440:	f1b9 0901 	subs.w	r9, r9, #1
 8018444:	d505      	bpl.n	8018452 <_fwalk_sglue+0x22>
 8018446:	6824      	ldr	r4, [r4, #0]
 8018448:	2c00      	cmp	r4, #0
 801844a:	d1f7      	bne.n	801843c <_fwalk_sglue+0xc>
 801844c:	4630      	mov	r0, r6
 801844e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018452:	89ab      	ldrh	r3, [r5, #12]
 8018454:	2b01      	cmp	r3, #1
 8018456:	d907      	bls.n	8018468 <_fwalk_sglue+0x38>
 8018458:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801845c:	3301      	adds	r3, #1
 801845e:	d003      	beq.n	8018468 <_fwalk_sglue+0x38>
 8018460:	4629      	mov	r1, r5
 8018462:	4638      	mov	r0, r7
 8018464:	47c0      	blx	r8
 8018466:	4306      	orrs	r6, r0
 8018468:	3568      	adds	r5, #104	@ 0x68
 801846a:	e7e9      	b.n	8018440 <_fwalk_sglue+0x10>

0801846c <iprintf>:
 801846c:	b40f      	push	{r0, r1, r2, r3}
 801846e:	b507      	push	{r0, r1, r2, lr}
 8018470:	4906      	ldr	r1, [pc, #24]	@ (801848c <iprintf+0x20>)
 8018472:	ab04      	add	r3, sp, #16
 8018474:	6808      	ldr	r0, [r1, #0]
 8018476:	f853 2b04 	ldr.w	r2, [r3], #4
 801847a:	6881      	ldr	r1, [r0, #8]
 801847c:	9301      	str	r3, [sp, #4]
 801847e:	f002 fd35 	bl	801aeec <_vfiprintf_r>
 8018482:	b003      	add	sp, #12
 8018484:	f85d eb04 	ldr.w	lr, [sp], #4
 8018488:	b004      	add	sp, #16
 801848a:	4770      	bx	lr
 801848c:	24000174 	.word	0x24000174

08018490 <_puts_r>:
 8018490:	6a03      	ldr	r3, [r0, #32]
 8018492:	b570      	push	{r4, r5, r6, lr}
 8018494:	6884      	ldr	r4, [r0, #8]
 8018496:	4605      	mov	r5, r0
 8018498:	460e      	mov	r6, r1
 801849a:	b90b      	cbnz	r3, 80184a0 <_puts_r+0x10>
 801849c:	f7ff ffb0 	bl	8018400 <__sinit>
 80184a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80184a2:	07db      	lsls	r3, r3, #31
 80184a4:	d405      	bmi.n	80184b2 <_puts_r+0x22>
 80184a6:	89a3      	ldrh	r3, [r4, #12]
 80184a8:	0598      	lsls	r0, r3, #22
 80184aa:	d402      	bmi.n	80184b2 <_puts_r+0x22>
 80184ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80184ae:	f000 f9c2 	bl	8018836 <__retarget_lock_acquire_recursive>
 80184b2:	89a3      	ldrh	r3, [r4, #12]
 80184b4:	0719      	lsls	r1, r3, #28
 80184b6:	d502      	bpl.n	80184be <_puts_r+0x2e>
 80184b8:	6923      	ldr	r3, [r4, #16]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d135      	bne.n	801852a <_puts_r+0x9a>
 80184be:	4621      	mov	r1, r4
 80184c0:	4628      	mov	r0, r5
 80184c2:	f000 f8e5 	bl	8018690 <__swsetup_r>
 80184c6:	b380      	cbz	r0, 801852a <_puts_r+0x9a>
 80184c8:	f04f 35ff 	mov.w	r5, #4294967295
 80184cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80184ce:	07da      	lsls	r2, r3, #31
 80184d0:	d405      	bmi.n	80184de <_puts_r+0x4e>
 80184d2:	89a3      	ldrh	r3, [r4, #12]
 80184d4:	059b      	lsls	r3, r3, #22
 80184d6:	d402      	bmi.n	80184de <_puts_r+0x4e>
 80184d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80184da:	f000 f9ad 	bl	8018838 <__retarget_lock_release_recursive>
 80184de:	4628      	mov	r0, r5
 80184e0:	bd70      	pop	{r4, r5, r6, pc}
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	da04      	bge.n	80184f0 <_puts_r+0x60>
 80184e6:	69a2      	ldr	r2, [r4, #24]
 80184e8:	429a      	cmp	r2, r3
 80184ea:	dc17      	bgt.n	801851c <_puts_r+0x8c>
 80184ec:	290a      	cmp	r1, #10
 80184ee:	d015      	beq.n	801851c <_puts_r+0x8c>
 80184f0:	6823      	ldr	r3, [r4, #0]
 80184f2:	1c5a      	adds	r2, r3, #1
 80184f4:	6022      	str	r2, [r4, #0]
 80184f6:	7019      	strb	r1, [r3, #0]
 80184f8:	68a3      	ldr	r3, [r4, #8]
 80184fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80184fe:	3b01      	subs	r3, #1
 8018500:	60a3      	str	r3, [r4, #8]
 8018502:	2900      	cmp	r1, #0
 8018504:	d1ed      	bne.n	80184e2 <_puts_r+0x52>
 8018506:	2b00      	cmp	r3, #0
 8018508:	da11      	bge.n	801852e <_puts_r+0x9e>
 801850a:	4622      	mov	r2, r4
 801850c:	210a      	movs	r1, #10
 801850e:	4628      	mov	r0, r5
 8018510:	f000 f87f 	bl	8018612 <__swbuf_r>
 8018514:	3001      	adds	r0, #1
 8018516:	d0d7      	beq.n	80184c8 <_puts_r+0x38>
 8018518:	250a      	movs	r5, #10
 801851a:	e7d7      	b.n	80184cc <_puts_r+0x3c>
 801851c:	4622      	mov	r2, r4
 801851e:	4628      	mov	r0, r5
 8018520:	f000 f877 	bl	8018612 <__swbuf_r>
 8018524:	3001      	adds	r0, #1
 8018526:	d1e7      	bne.n	80184f8 <_puts_r+0x68>
 8018528:	e7ce      	b.n	80184c8 <_puts_r+0x38>
 801852a:	3e01      	subs	r6, #1
 801852c:	e7e4      	b.n	80184f8 <_puts_r+0x68>
 801852e:	6823      	ldr	r3, [r4, #0]
 8018530:	1c5a      	adds	r2, r3, #1
 8018532:	6022      	str	r2, [r4, #0]
 8018534:	220a      	movs	r2, #10
 8018536:	701a      	strb	r2, [r3, #0]
 8018538:	e7ee      	b.n	8018518 <_puts_r+0x88>
	...

0801853c <puts>:
 801853c:	4b02      	ldr	r3, [pc, #8]	@ (8018548 <puts+0xc>)
 801853e:	4601      	mov	r1, r0
 8018540:	6818      	ldr	r0, [r3, #0]
 8018542:	f7ff bfa5 	b.w	8018490 <_puts_r>
 8018546:	bf00      	nop
 8018548:	24000174 	.word	0x24000174

0801854c <siprintf>:
 801854c:	b40e      	push	{r1, r2, r3}
 801854e:	b500      	push	{lr}
 8018550:	b09c      	sub	sp, #112	@ 0x70
 8018552:	ab1d      	add	r3, sp, #116	@ 0x74
 8018554:	9002      	str	r0, [sp, #8]
 8018556:	9006      	str	r0, [sp, #24]
 8018558:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801855c:	4809      	ldr	r0, [pc, #36]	@ (8018584 <siprintf+0x38>)
 801855e:	9107      	str	r1, [sp, #28]
 8018560:	9104      	str	r1, [sp, #16]
 8018562:	4909      	ldr	r1, [pc, #36]	@ (8018588 <siprintf+0x3c>)
 8018564:	f853 2b04 	ldr.w	r2, [r3], #4
 8018568:	9105      	str	r1, [sp, #20]
 801856a:	6800      	ldr	r0, [r0, #0]
 801856c:	9301      	str	r3, [sp, #4]
 801856e:	a902      	add	r1, sp, #8
 8018570:	f002 fb96 	bl	801aca0 <_svfiprintf_r>
 8018574:	9b02      	ldr	r3, [sp, #8]
 8018576:	2200      	movs	r2, #0
 8018578:	701a      	strb	r2, [r3, #0]
 801857a:	b01c      	add	sp, #112	@ 0x70
 801857c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018580:	b003      	add	sp, #12
 8018582:	4770      	bx	lr
 8018584:	24000174 	.word	0x24000174
 8018588:	ffff0208 	.word	0xffff0208

0801858c <__sread>:
 801858c:	b510      	push	{r4, lr}
 801858e:	460c      	mov	r4, r1
 8018590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018594:	f000 f900 	bl	8018798 <_read_r>
 8018598:	2800      	cmp	r0, #0
 801859a:	bfab      	itete	ge
 801859c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801859e:	89a3      	ldrhlt	r3, [r4, #12]
 80185a0:	181b      	addge	r3, r3, r0
 80185a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80185a6:	bfac      	ite	ge
 80185a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80185aa:	81a3      	strhlt	r3, [r4, #12]
 80185ac:	bd10      	pop	{r4, pc}

080185ae <__swrite>:
 80185ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185b2:	461f      	mov	r7, r3
 80185b4:	898b      	ldrh	r3, [r1, #12]
 80185b6:	05db      	lsls	r3, r3, #23
 80185b8:	4605      	mov	r5, r0
 80185ba:	460c      	mov	r4, r1
 80185bc:	4616      	mov	r6, r2
 80185be:	d505      	bpl.n	80185cc <__swrite+0x1e>
 80185c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185c4:	2302      	movs	r3, #2
 80185c6:	2200      	movs	r2, #0
 80185c8:	f000 f8d4 	bl	8018774 <_lseek_r>
 80185cc:	89a3      	ldrh	r3, [r4, #12]
 80185ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80185d6:	81a3      	strh	r3, [r4, #12]
 80185d8:	4632      	mov	r2, r6
 80185da:	463b      	mov	r3, r7
 80185dc:	4628      	mov	r0, r5
 80185de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80185e2:	f000 b8eb 	b.w	80187bc <_write_r>

080185e6 <__sseek>:
 80185e6:	b510      	push	{r4, lr}
 80185e8:	460c      	mov	r4, r1
 80185ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185ee:	f000 f8c1 	bl	8018774 <_lseek_r>
 80185f2:	1c43      	adds	r3, r0, #1
 80185f4:	89a3      	ldrh	r3, [r4, #12]
 80185f6:	bf15      	itete	ne
 80185f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80185fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80185fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018602:	81a3      	strheq	r3, [r4, #12]
 8018604:	bf18      	it	ne
 8018606:	81a3      	strhne	r3, [r4, #12]
 8018608:	bd10      	pop	{r4, pc}

0801860a <__sclose>:
 801860a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801860e:	f000 b8a1 	b.w	8018754 <_close_r>

08018612 <__swbuf_r>:
 8018612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018614:	460e      	mov	r6, r1
 8018616:	4614      	mov	r4, r2
 8018618:	4605      	mov	r5, r0
 801861a:	b118      	cbz	r0, 8018624 <__swbuf_r+0x12>
 801861c:	6a03      	ldr	r3, [r0, #32]
 801861e:	b90b      	cbnz	r3, 8018624 <__swbuf_r+0x12>
 8018620:	f7ff feee 	bl	8018400 <__sinit>
 8018624:	69a3      	ldr	r3, [r4, #24]
 8018626:	60a3      	str	r3, [r4, #8]
 8018628:	89a3      	ldrh	r3, [r4, #12]
 801862a:	071a      	lsls	r2, r3, #28
 801862c:	d501      	bpl.n	8018632 <__swbuf_r+0x20>
 801862e:	6923      	ldr	r3, [r4, #16]
 8018630:	b943      	cbnz	r3, 8018644 <__swbuf_r+0x32>
 8018632:	4621      	mov	r1, r4
 8018634:	4628      	mov	r0, r5
 8018636:	f000 f82b 	bl	8018690 <__swsetup_r>
 801863a:	b118      	cbz	r0, 8018644 <__swbuf_r+0x32>
 801863c:	f04f 37ff 	mov.w	r7, #4294967295
 8018640:	4638      	mov	r0, r7
 8018642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018644:	6823      	ldr	r3, [r4, #0]
 8018646:	6922      	ldr	r2, [r4, #16]
 8018648:	1a98      	subs	r0, r3, r2
 801864a:	6963      	ldr	r3, [r4, #20]
 801864c:	b2f6      	uxtb	r6, r6
 801864e:	4283      	cmp	r3, r0
 8018650:	4637      	mov	r7, r6
 8018652:	dc05      	bgt.n	8018660 <__swbuf_r+0x4e>
 8018654:	4621      	mov	r1, r4
 8018656:	4628      	mov	r0, r5
 8018658:	f002 fde4 	bl	801b224 <_fflush_r>
 801865c:	2800      	cmp	r0, #0
 801865e:	d1ed      	bne.n	801863c <__swbuf_r+0x2a>
 8018660:	68a3      	ldr	r3, [r4, #8]
 8018662:	3b01      	subs	r3, #1
 8018664:	60a3      	str	r3, [r4, #8]
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	1c5a      	adds	r2, r3, #1
 801866a:	6022      	str	r2, [r4, #0]
 801866c:	701e      	strb	r6, [r3, #0]
 801866e:	6962      	ldr	r2, [r4, #20]
 8018670:	1c43      	adds	r3, r0, #1
 8018672:	429a      	cmp	r2, r3
 8018674:	d004      	beq.n	8018680 <__swbuf_r+0x6e>
 8018676:	89a3      	ldrh	r3, [r4, #12]
 8018678:	07db      	lsls	r3, r3, #31
 801867a:	d5e1      	bpl.n	8018640 <__swbuf_r+0x2e>
 801867c:	2e0a      	cmp	r6, #10
 801867e:	d1df      	bne.n	8018640 <__swbuf_r+0x2e>
 8018680:	4621      	mov	r1, r4
 8018682:	4628      	mov	r0, r5
 8018684:	f002 fdce 	bl	801b224 <_fflush_r>
 8018688:	2800      	cmp	r0, #0
 801868a:	d0d9      	beq.n	8018640 <__swbuf_r+0x2e>
 801868c:	e7d6      	b.n	801863c <__swbuf_r+0x2a>
	...

08018690 <__swsetup_r>:
 8018690:	b538      	push	{r3, r4, r5, lr}
 8018692:	4b29      	ldr	r3, [pc, #164]	@ (8018738 <__swsetup_r+0xa8>)
 8018694:	4605      	mov	r5, r0
 8018696:	6818      	ldr	r0, [r3, #0]
 8018698:	460c      	mov	r4, r1
 801869a:	b118      	cbz	r0, 80186a4 <__swsetup_r+0x14>
 801869c:	6a03      	ldr	r3, [r0, #32]
 801869e:	b90b      	cbnz	r3, 80186a4 <__swsetup_r+0x14>
 80186a0:	f7ff feae 	bl	8018400 <__sinit>
 80186a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186a8:	0719      	lsls	r1, r3, #28
 80186aa:	d422      	bmi.n	80186f2 <__swsetup_r+0x62>
 80186ac:	06da      	lsls	r2, r3, #27
 80186ae:	d407      	bmi.n	80186c0 <__swsetup_r+0x30>
 80186b0:	2209      	movs	r2, #9
 80186b2:	602a      	str	r2, [r5, #0]
 80186b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80186b8:	81a3      	strh	r3, [r4, #12]
 80186ba:	f04f 30ff 	mov.w	r0, #4294967295
 80186be:	e033      	b.n	8018728 <__swsetup_r+0x98>
 80186c0:	0758      	lsls	r0, r3, #29
 80186c2:	d512      	bpl.n	80186ea <__swsetup_r+0x5a>
 80186c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80186c6:	b141      	cbz	r1, 80186da <__swsetup_r+0x4a>
 80186c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80186cc:	4299      	cmp	r1, r3
 80186ce:	d002      	beq.n	80186d6 <__swsetup_r+0x46>
 80186d0:	4628      	mov	r0, r5
 80186d2:	f000 fea7 	bl	8019424 <_free_r>
 80186d6:	2300      	movs	r3, #0
 80186d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80186da:	89a3      	ldrh	r3, [r4, #12]
 80186dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80186e0:	81a3      	strh	r3, [r4, #12]
 80186e2:	2300      	movs	r3, #0
 80186e4:	6063      	str	r3, [r4, #4]
 80186e6:	6923      	ldr	r3, [r4, #16]
 80186e8:	6023      	str	r3, [r4, #0]
 80186ea:	89a3      	ldrh	r3, [r4, #12]
 80186ec:	f043 0308 	orr.w	r3, r3, #8
 80186f0:	81a3      	strh	r3, [r4, #12]
 80186f2:	6923      	ldr	r3, [r4, #16]
 80186f4:	b94b      	cbnz	r3, 801870a <__swsetup_r+0x7a>
 80186f6:	89a3      	ldrh	r3, [r4, #12]
 80186f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80186fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018700:	d003      	beq.n	801870a <__swsetup_r+0x7a>
 8018702:	4621      	mov	r1, r4
 8018704:	4628      	mov	r0, r5
 8018706:	f002 fddb 	bl	801b2c0 <__smakebuf_r>
 801870a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801870e:	f013 0201 	ands.w	r2, r3, #1
 8018712:	d00a      	beq.n	801872a <__swsetup_r+0x9a>
 8018714:	2200      	movs	r2, #0
 8018716:	60a2      	str	r2, [r4, #8]
 8018718:	6962      	ldr	r2, [r4, #20]
 801871a:	4252      	negs	r2, r2
 801871c:	61a2      	str	r2, [r4, #24]
 801871e:	6922      	ldr	r2, [r4, #16]
 8018720:	b942      	cbnz	r2, 8018734 <__swsetup_r+0xa4>
 8018722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018726:	d1c5      	bne.n	80186b4 <__swsetup_r+0x24>
 8018728:	bd38      	pop	{r3, r4, r5, pc}
 801872a:	0799      	lsls	r1, r3, #30
 801872c:	bf58      	it	pl
 801872e:	6962      	ldrpl	r2, [r4, #20]
 8018730:	60a2      	str	r2, [r4, #8]
 8018732:	e7f4      	b.n	801871e <__swsetup_r+0x8e>
 8018734:	2000      	movs	r0, #0
 8018736:	e7f7      	b.n	8018728 <__swsetup_r+0x98>
 8018738:	24000174 	.word	0x24000174

0801873c <memset>:
 801873c:	4402      	add	r2, r0
 801873e:	4603      	mov	r3, r0
 8018740:	4293      	cmp	r3, r2
 8018742:	d100      	bne.n	8018746 <memset+0xa>
 8018744:	4770      	bx	lr
 8018746:	f803 1b01 	strb.w	r1, [r3], #1
 801874a:	e7f9      	b.n	8018740 <memset+0x4>

0801874c <_localeconv_r>:
 801874c:	4800      	ldr	r0, [pc, #0]	@ (8018750 <_localeconv_r+0x4>)
 801874e:	4770      	bx	lr
 8018750:	240002b4 	.word	0x240002b4

08018754 <_close_r>:
 8018754:	b538      	push	{r3, r4, r5, lr}
 8018756:	4d06      	ldr	r5, [pc, #24]	@ (8018770 <_close_r+0x1c>)
 8018758:	2300      	movs	r3, #0
 801875a:	4604      	mov	r4, r0
 801875c:	4608      	mov	r0, r1
 801875e:	602b      	str	r3, [r5, #0]
 8018760:	f7ef ff7a 	bl	8008658 <_close>
 8018764:	1c43      	adds	r3, r0, #1
 8018766:	d102      	bne.n	801876e <_close_r+0x1a>
 8018768:	682b      	ldr	r3, [r5, #0]
 801876a:	b103      	cbz	r3, 801876e <_close_r+0x1a>
 801876c:	6023      	str	r3, [r4, #0]
 801876e:	bd38      	pop	{r3, r4, r5, pc}
 8018770:	240020a4 	.word	0x240020a4

08018774 <_lseek_r>:
 8018774:	b538      	push	{r3, r4, r5, lr}
 8018776:	4d07      	ldr	r5, [pc, #28]	@ (8018794 <_lseek_r+0x20>)
 8018778:	4604      	mov	r4, r0
 801877a:	4608      	mov	r0, r1
 801877c:	4611      	mov	r1, r2
 801877e:	2200      	movs	r2, #0
 8018780:	602a      	str	r2, [r5, #0]
 8018782:	461a      	mov	r2, r3
 8018784:	f7ef ff8f 	bl	80086a6 <_lseek>
 8018788:	1c43      	adds	r3, r0, #1
 801878a:	d102      	bne.n	8018792 <_lseek_r+0x1e>
 801878c:	682b      	ldr	r3, [r5, #0]
 801878e:	b103      	cbz	r3, 8018792 <_lseek_r+0x1e>
 8018790:	6023      	str	r3, [r4, #0]
 8018792:	bd38      	pop	{r3, r4, r5, pc}
 8018794:	240020a4 	.word	0x240020a4

08018798 <_read_r>:
 8018798:	b538      	push	{r3, r4, r5, lr}
 801879a:	4d07      	ldr	r5, [pc, #28]	@ (80187b8 <_read_r+0x20>)
 801879c:	4604      	mov	r4, r0
 801879e:	4608      	mov	r0, r1
 80187a0:	4611      	mov	r1, r2
 80187a2:	2200      	movs	r2, #0
 80187a4:	602a      	str	r2, [r5, #0]
 80187a6:	461a      	mov	r2, r3
 80187a8:	f7ef ff39 	bl	800861e <_read>
 80187ac:	1c43      	adds	r3, r0, #1
 80187ae:	d102      	bne.n	80187b6 <_read_r+0x1e>
 80187b0:	682b      	ldr	r3, [r5, #0]
 80187b2:	b103      	cbz	r3, 80187b6 <_read_r+0x1e>
 80187b4:	6023      	str	r3, [r4, #0]
 80187b6:	bd38      	pop	{r3, r4, r5, pc}
 80187b8:	240020a4 	.word	0x240020a4

080187bc <_write_r>:
 80187bc:	b538      	push	{r3, r4, r5, lr}
 80187be:	4d07      	ldr	r5, [pc, #28]	@ (80187dc <_write_r+0x20>)
 80187c0:	4604      	mov	r4, r0
 80187c2:	4608      	mov	r0, r1
 80187c4:	4611      	mov	r1, r2
 80187c6:	2200      	movs	r2, #0
 80187c8:	602a      	str	r2, [r5, #0]
 80187ca:	461a      	mov	r2, r3
 80187cc:	f7ed faed 	bl	8005daa <_write>
 80187d0:	1c43      	adds	r3, r0, #1
 80187d2:	d102      	bne.n	80187da <_write_r+0x1e>
 80187d4:	682b      	ldr	r3, [r5, #0]
 80187d6:	b103      	cbz	r3, 80187da <_write_r+0x1e>
 80187d8:	6023      	str	r3, [r4, #0]
 80187da:	bd38      	pop	{r3, r4, r5, pc}
 80187dc:	240020a4 	.word	0x240020a4

080187e0 <__errno>:
 80187e0:	4b01      	ldr	r3, [pc, #4]	@ (80187e8 <__errno+0x8>)
 80187e2:	6818      	ldr	r0, [r3, #0]
 80187e4:	4770      	bx	lr
 80187e6:	bf00      	nop
 80187e8:	24000174 	.word	0x24000174

080187ec <__libc_init_array>:
 80187ec:	b570      	push	{r4, r5, r6, lr}
 80187ee:	4d0d      	ldr	r5, [pc, #52]	@ (8018824 <__libc_init_array+0x38>)
 80187f0:	4c0d      	ldr	r4, [pc, #52]	@ (8018828 <__libc_init_array+0x3c>)
 80187f2:	1b64      	subs	r4, r4, r5
 80187f4:	10a4      	asrs	r4, r4, #2
 80187f6:	2600      	movs	r6, #0
 80187f8:	42a6      	cmp	r6, r4
 80187fa:	d109      	bne.n	8018810 <__libc_init_array+0x24>
 80187fc:	4d0b      	ldr	r5, [pc, #44]	@ (801882c <__libc_init_array+0x40>)
 80187fe:	4c0c      	ldr	r4, [pc, #48]	@ (8018830 <__libc_init_array+0x44>)
 8018800:	f003 fa20 	bl	801bc44 <_init>
 8018804:	1b64      	subs	r4, r4, r5
 8018806:	10a4      	asrs	r4, r4, #2
 8018808:	2600      	movs	r6, #0
 801880a:	42a6      	cmp	r6, r4
 801880c:	d105      	bne.n	801881a <__libc_init_array+0x2e>
 801880e:	bd70      	pop	{r4, r5, r6, pc}
 8018810:	f855 3b04 	ldr.w	r3, [r5], #4
 8018814:	4798      	blx	r3
 8018816:	3601      	adds	r6, #1
 8018818:	e7ee      	b.n	80187f8 <__libc_init_array+0xc>
 801881a:	f855 3b04 	ldr.w	r3, [r5], #4
 801881e:	4798      	blx	r3
 8018820:	3601      	adds	r6, #1
 8018822:	e7f2      	b.n	801880a <__libc_init_array+0x1e>
 8018824:	0801c738 	.word	0x0801c738
 8018828:	0801c738 	.word	0x0801c738
 801882c:	0801c738 	.word	0x0801c738
 8018830:	0801c73c 	.word	0x0801c73c

08018834 <__retarget_lock_init_recursive>:
 8018834:	4770      	bx	lr

08018836 <__retarget_lock_acquire_recursive>:
 8018836:	4770      	bx	lr

08018838 <__retarget_lock_release_recursive>:
 8018838:	4770      	bx	lr

0801883a <memcpy>:
 801883a:	440a      	add	r2, r1
 801883c:	4291      	cmp	r1, r2
 801883e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018842:	d100      	bne.n	8018846 <memcpy+0xc>
 8018844:	4770      	bx	lr
 8018846:	b510      	push	{r4, lr}
 8018848:	f811 4b01 	ldrb.w	r4, [r1], #1
 801884c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018850:	4291      	cmp	r1, r2
 8018852:	d1f9      	bne.n	8018848 <memcpy+0xe>
 8018854:	bd10      	pop	{r4, pc}
	...

08018858 <nanf>:
 8018858:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018860 <nanf+0x8>
 801885c:	4770      	bx	lr
 801885e:	bf00      	nop
 8018860:	7fc00000 	.word	0x7fc00000

08018864 <quorem>:
 8018864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018868:	6903      	ldr	r3, [r0, #16]
 801886a:	690c      	ldr	r4, [r1, #16]
 801886c:	42a3      	cmp	r3, r4
 801886e:	4607      	mov	r7, r0
 8018870:	db7e      	blt.n	8018970 <quorem+0x10c>
 8018872:	3c01      	subs	r4, #1
 8018874:	f101 0814 	add.w	r8, r1, #20
 8018878:	00a3      	lsls	r3, r4, #2
 801887a:	f100 0514 	add.w	r5, r0, #20
 801887e:	9300      	str	r3, [sp, #0]
 8018880:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018884:	9301      	str	r3, [sp, #4]
 8018886:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801888a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801888e:	3301      	adds	r3, #1
 8018890:	429a      	cmp	r2, r3
 8018892:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018896:	fbb2 f6f3 	udiv	r6, r2, r3
 801889a:	d32e      	bcc.n	80188fa <quorem+0x96>
 801889c:	f04f 0a00 	mov.w	sl, #0
 80188a0:	46c4      	mov	ip, r8
 80188a2:	46ae      	mov	lr, r5
 80188a4:	46d3      	mov	fp, sl
 80188a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80188aa:	b298      	uxth	r0, r3
 80188ac:	fb06 a000 	mla	r0, r6, r0, sl
 80188b0:	0c02      	lsrs	r2, r0, #16
 80188b2:	0c1b      	lsrs	r3, r3, #16
 80188b4:	fb06 2303 	mla	r3, r6, r3, r2
 80188b8:	f8de 2000 	ldr.w	r2, [lr]
 80188bc:	b280      	uxth	r0, r0
 80188be:	b292      	uxth	r2, r2
 80188c0:	1a12      	subs	r2, r2, r0
 80188c2:	445a      	add	r2, fp
 80188c4:	f8de 0000 	ldr.w	r0, [lr]
 80188c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80188cc:	b29b      	uxth	r3, r3
 80188ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80188d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80188d6:	b292      	uxth	r2, r2
 80188d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80188dc:	45e1      	cmp	r9, ip
 80188de:	f84e 2b04 	str.w	r2, [lr], #4
 80188e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80188e6:	d2de      	bcs.n	80188a6 <quorem+0x42>
 80188e8:	9b00      	ldr	r3, [sp, #0]
 80188ea:	58eb      	ldr	r3, [r5, r3]
 80188ec:	b92b      	cbnz	r3, 80188fa <quorem+0x96>
 80188ee:	9b01      	ldr	r3, [sp, #4]
 80188f0:	3b04      	subs	r3, #4
 80188f2:	429d      	cmp	r5, r3
 80188f4:	461a      	mov	r2, r3
 80188f6:	d32f      	bcc.n	8018958 <quorem+0xf4>
 80188f8:	613c      	str	r4, [r7, #16]
 80188fa:	4638      	mov	r0, r7
 80188fc:	f001 f956 	bl	8019bac <__mcmp>
 8018900:	2800      	cmp	r0, #0
 8018902:	db25      	blt.n	8018950 <quorem+0xec>
 8018904:	4629      	mov	r1, r5
 8018906:	2000      	movs	r0, #0
 8018908:	f858 2b04 	ldr.w	r2, [r8], #4
 801890c:	f8d1 c000 	ldr.w	ip, [r1]
 8018910:	fa1f fe82 	uxth.w	lr, r2
 8018914:	fa1f f38c 	uxth.w	r3, ip
 8018918:	eba3 030e 	sub.w	r3, r3, lr
 801891c:	4403      	add	r3, r0
 801891e:	0c12      	lsrs	r2, r2, #16
 8018920:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018924:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8018928:	b29b      	uxth	r3, r3
 801892a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801892e:	45c1      	cmp	r9, r8
 8018930:	f841 3b04 	str.w	r3, [r1], #4
 8018934:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018938:	d2e6      	bcs.n	8018908 <quorem+0xa4>
 801893a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801893e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018942:	b922      	cbnz	r2, 801894e <quorem+0xea>
 8018944:	3b04      	subs	r3, #4
 8018946:	429d      	cmp	r5, r3
 8018948:	461a      	mov	r2, r3
 801894a:	d30b      	bcc.n	8018964 <quorem+0x100>
 801894c:	613c      	str	r4, [r7, #16]
 801894e:	3601      	adds	r6, #1
 8018950:	4630      	mov	r0, r6
 8018952:	b003      	add	sp, #12
 8018954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018958:	6812      	ldr	r2, [r2, #0]
 801895a:	3b04      	subs	r3, #4
 801895c:	2a00      	cmp	r2, #0
 801895e:	d1cb      	bne.n	80188f8 <quorem+0x94>
 8018960:	3c01      	subs	r4, #1
 8018962:	e7c6      	b.n	80188f2 <quorem+0x8e>
 8018964:	6812      	ldr	r2, [r2, #0]
 8018966:	3b04      	subs	r3, #4
 8018968:	2a00      	cmp	r2, #0
 801896a:	d1ef      	bne.n	801894c <quorem+0xe8>
 801896c:	3c01      	subs	r4, #1
 801896e:	e7ea      	b.n	8018946 <quorem+0xe2>
 8018970:	2000      	movs	r0, #0
 8018972:	e7ee      	b.n	8018952 <quorem+0xee>
 8018974:	0000      	movs	r0, r0
	...

08018978 <_dtoa_r>:
 8018978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801897c:	ed2d 8b02 	vpush	{d8}
 8018980:	69c7      	ldr	r7, [r0, #28]
 8018982:	b091      	sub	sp, #68	@ 0x44
 8018984:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018988:	ec55 4b10 	vmov	r4, r5, d0
 801898c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801898e:	9107      	str	r1, [sp, #28]
 8018990:	4681      	mov	r9, r0
 8018992:	9209      	str	r2, [sp, #36]	@ 0x24
 8018994:	930d      	str	r3, [sp, #52]	@ 0x34
 8018996:	b97f      	cbnz	r7, 80189b8 <_dtoa_r+0x40>
 8018998:	2010      	movs	r0, #16
 801899a:	f000 fd8d 	bl	80194b8 <malloc>
 801899e:	4602      	mov	r2, r0
 80189a0:	f8c9 001c 	str.w	r0, [r9, #28]
 80189a4:	b920      	cbnz	r0, 80189b0 <_dtoa_r+0x38>
 80189a6:	4ba0      	ldr	r3, [pc, #640]	@ (8018c28 <_dtoa_r+0x2b0>)
 80189a8:	21ef      	movs	r1, #239	@ 0xef
 80189aa:	48a0      	ldr	r0, [pc, #640]	@ (8018c2c <_dtoa_r+0x2b4>)
 80189ac:	f002 fd2c 	bl	801b408 <__assert_func>
 80189b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80189b4:	6007      	str	r7, [r0, #0]
 80189b6:	60c7      	str	r7, [r0, #12]
 80189b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80189bc:	6819      	ldr	r1, [r3, #0]
 80189be:	b159      	cbz	r1, 80189d8 <_dtoa_r+0x60>
 80189c0:	685a      	ldr	r2, [r3, #4]
 80189c2:	604a      	str	r2, [r1, #4]
 80189c4:	2301      	movs	r3, #1
 80189c6:	4093      	lsls	r3, r2
 80189c8:	608b      	str	r3, [r1, #8]
 80189ca:	4648      	mov	r0, r9
 80189cc:	f000 fe6a 	bl	80196a4 <_Bfree>
 80189d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80189d4:	2200      	movs	r2, #0
 80189d6:	601a      	str	r2, [r3, #0]
 80189d8:	1e2b      	subs	r3, r5, #0
 80189da:	bfbb      	ittet	lt
 80189dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80189e0:	9303      	strlt	r3, [sp, #12]
 80189e2:	2300      	movge	r3, #0
 80189e4:	2201      	movlt	r2, #1
 80189e6:	bfac      	ite	ge
 80189e8:	6033      	strge	r3, [r6, #0]
 80189ea:	6032      	strlt	r2, [r6, #0]
 80189ec:	4b90      	ldr	r3, [pc, #576]	@ (8018c30 <_dtoa_r+0x2b8>)
 80189ee:	9e03      	ldr	r6, [sp, #12]
 80189f0:	43b3      	bics	r3, r6
 80189f2:	d110      	bne.n	8018a16 <_dtoa_r+0x9e>
 80189f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80189f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80189fa:	6013      	str	r3, [r2, #0]
 80189fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8018a00:	4323      	orrs	r3, r4
 8018a02:	f000 84de 	beq.w	80193c2 <_dtoa_r+0xa4a>
 8018a06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018a08:	4f8a      	ldr	r7, [pc, #552]	@ (8018c34 <_dtoa_r+0x2bc>)
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	f000 84e0 	beq.w	80193d0 <_dtoa_r+0xa58>
 8018a10:	1cfb      	adds	r3, r7, #3
 8018a12:	f000 bcdb 	b.w	80193cc <_dtoa_r+0xa54>
 8018a16:	ed9d 8b02 	vldr	d8, [sp, #8]
 8018a1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a22:	d10a      	bne.n	8018a3a <_dtoa_r+0xc2>
 8018a24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018a26:	2301      	movs	r3, #1
 8018a28:	6013      	str	r3, [r2, #0]
 8018a2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018a2c:	b113      	cbz	r3, 8018a34 <_dtoa_r+0xbc>
 8018a2e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8018a30:	4b81      	ldr	r3, [pc, #516]	@ (8018c38 <_dtoa_r+0x2c0>)
 8018a32:	6013      	str	r3, [r2, #0]
 8018a34:	4f81      	ldr	r7, [pc, #516]	@ (8018c3c <_dtoa_r+0x2c4>)
 8018a36:	f000 bccb 	b.w	80193d0 <_dtoa_r+0xa58>
 8018a3a:	aa0e      	add	r2, sp, #56	@ 0x38
 8018a3c:	a90f      	add	r1, sp, #60	@ 0x3c
 8018a3e:	4648      	mov	r0, r9
 8018a40:	eeb0 0b48 	vmov.f64	d0, d8
 8018a44:	f001 f9d2 	bl	8019dec <__d2b>
 8018a48:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8018a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018a4e:	9001      	str	r0, [sp, #4]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d045      	beq.n	8018ae0 <_dtoa_r+0x168>
 8018a54:	eeb0 7b48 	vmov.f64	d7, d8
 8018a58:	ee18 1a90 	vmov	r1, s17
 8018a5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018a60:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8018a64:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8018a68:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8018a6c:	2500      	movs	r5, #0
 8018a6e:	ee07 1a90 	vmov	s15, r1
 8018a72:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8018a76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018c10 <_dtoa_r+0x298>
 8018a7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018a7e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8018c18 <_dtoa_r+0x2a0>
 8018a82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018a86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018c20 <_dtoa_r+0x2a8>
 8018a8a:	ee07 3a90 	vmov	s15, r3
 8018a8e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018a92:	eeb0 7b46 	vmov.f64	d7, d6
 8018a96:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018a9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018a9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aa6:	ee16 8a90 	vmov	r8, s13
 8018aaa:	d508      	bpl.n	8018abe <_dtoa_r+0x146>
 8018aac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018ab0:	eeb4 6b47 	vcmp.f64	d6, d7
 8018ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ab8:	bf18      	it	ne
 8018aba:	f108 38ff 	addne.w	r8, r8, #4294967295
 8018abe:	f1b8 0f16 	cmp.w	r8, #22
 8018ac2:	d82b      	bhi.n	8018b1c <_dtoa_r+0x1a4>
 8018ac4:	495e      	ldr	r1, [pc, #376]	@ (8018c40 <_dtoa_r+0x2c8>)
 8018ac6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8018aca:	ed91 7b00 	vldr	d7, [r1]
 8018ace:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ad6:	d501      	bpl.n	8018adc <_dtoa_r+0x164>
 8018ad8:	f108 38ff 	add.w	r8, r8, #4294967295
 8018adc:	2100      	movs	r1, #0
 8018ade:	e01e      	b.n	8018b1e <_dtoa_r+0x1a6>
 8018ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018ae2:	4413      	add	r3, r2
 8018ae4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8018ae8:	2920      	cmp	r1, #32
 8018aea:	bfc1      	itttt	gt
 8018aec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8018af0:	408e      	lslgt	r6, r1
 8018af2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8018af6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8018afa:	bfd6      	itet	le
 8018afc:	f1c1 0120 	rsble	r1, r1, #32
 8018b00:	4331      	orrgt	r1, r6
 8018b02:	fa04 f101 	lslle.w	r1, r4, r1
 8018b06:	ee07 1a90 	vmov	s15, r1
 8018b0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018b0e:	3b01      	subs	r3, #1
 8018b10:	ee17 1a90 	vmov	r1, s15
 8018b14:	2501      	movs	r5, #1
 8018b16:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8018b1a:	e7a8      	b.n	8018a6e <_dtoa_r+0xf6>
 8018b1c:	2101      	movs	r1, #1
 8018b1e:	1ad2      	subs	r2, r2, r3
 8018b20:	1e53      	subs	r3, r2, #1
 8018b22:	9306      	str	r3, [sp, #24]
 8018b24:	bf45      	ittet	mi
 8018b26:	f1c2 0301 	rsbmi	r3, r2, #1
 8018b2a:	9305      	strmi	r3, [sp, #20]
 8018b2c:	2300      	movpl	r3, #0
 8018b2e:	2300      	movmi	r3, #0
 8018b30:	bf4c      	ite	mi
 8018b32:	9306      	strmi	r3, [sp, #24]
 8018b34:	9305      	strpl	r3, [sp, #20]
 8018b36:	f1b8 0f00 	cmp.w	r8, #0
 8018b3a:	910c      	str	r1, [sp, #48]	@ 0x30
 8018b3c:	db18      	blt.n	8018b70 <_dtoa_r+0x1f8>
 8018b3e:	9b06      	ldr	r3, [sp, #24]
 8018b40:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8018b44:	4443      	add	r3, r8
 8018b46:	9306      	str	r3, [sp, #24]
 8018b48:	2300      	movs	r3, #0
 8018b4a:	9a07      	ldr	r2, [sp, #28]
 8018b4c:	2a09      	cmp	r2, #9
 8018b4e:	d849      	bhi.n	8018be4 <_dtoa_r+0x26c>
 8018b50:	2a05      	cmp	r2, #5
 8018b52:	bfc4      	itt	gt
 8018b54:	3a04      	subgt	r2, #4
 8018b56:	9207      	strgt	r2, [sp, #28]
 8018b58:	9a07      	ldr	r2, [sp, #28]
 8018b5a:	f1a2 0202 	sub.w	r2, r2, #2
 8018b5e:	bfcc      	ite	gt
 8018b60:	2400      	movgt	r4, #0
 8018b62:	2401      	movle	r4, #1
 8018b64:	2a03      	cmp	r2, #3
 8018b66:	d848      	bhi.n	8018bfa <_dtoa_r+0x282>
 8018b68:	e8df f002 	tbb	[pc, r2]
 8018b6c:	3a2c2e0b 	.word	0x3a2c2e0b
 8018b70:	9b05      	ldr	r3, [sp, #20]
 8018b72:	2200      	movs	r2, #0
 8018b74:	eba3 0308 	sub.w	r3, r3, r8
 8018b78:	9305      	str	r3, [sp, #20]
 8018b7a:	920a      	str	r2, [sp, #40]	@ 0x28
 8018b7c:	f1c8 0300 	rsb	r3, r8, #0
 8018b80:	e7e3      	b.n	8018b4a <_dtoa_r+0x1d2>
 8018b82:	2200      	movs	r2, #0
 8018b84:	9208      	str	r2, [sp, #32]
 8018b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b88:	2a00      	cmp	r2, #0
 8018b8a:	dc39      	bgt.n	8018c00 <_dtoa_r+0x288>
 8018b8c:	f04f 0b01 	mov.w	fp, #1
 8018b90:	46da      	mov	sl, fp
 8018b92:	465a      	mov	r2, fp
 8018b94:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8018b98:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8018b9c:	2100      	movs	r1, #0
 8018b9e:	2004      	movs	r0, #4
 8018ba0:	f100 0614 	add.w	r6, r0, #20
 8018ba4:	4296      	cmp	r6, r2
 8018ba6:	d930      	bls.n	8018c0a <_dtoa_r+0x292>
 8018ba8:	6079      	str	r1, [r7, #4]
 8018baa:	4648      	mov	r0, r9
 8018bac:	9304      	str	r3, [sp, #16]
 8018bae:	f000 fd39 	bl	8019624 <_Balloc>
 8018bb2:	9b04      	ldr	r3, [sp, #16]
 8018bb4:	4607      	mov	r7, r0
 8018bb6:	2800      	cmp	r0, #0
 8018bb8:	d146      	bne.n	8018c48 <_dtoa_r+0x2d0>
 8018bba:	4b22      	ldr	r3, [pc, #136]	@ (8018c44 <_dtoa_r+0x2cc>)
 8018bbc:	4602      	mov	r2, r0
 8018bbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8018bc2:	e6f2      	b.n	80189aa <_dtoa_r+0x32>
 8018bc4:	2201      	movs	r2, #1
 8018bc6:	e7dd      	b.n	8018b84 <_dtoa_r+0x20c>
 8018bc8:	2200      	movs	r2, #0
 8018bca:	9208      	str	r2, [sp, #32]
 8018bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018bce:	eb08 0b02 	add.w	fp, r8, r2
 8018bd2:	f10b 0a01 	add.w	sl, fp, #1
 8018bd6:	4652      	mov	r2, sl
 8018bd8:	2a01      	cmp	r2, #1
 8018bda:	bfb8      	it	lt
 8018bdc:	2201      	movlt	r2, #1
 8018bde:	e7db      	b.n	8018b98 <_dtoa_r+0x220>
 8018be0:	2201      	movs	r2, #1
 8018be2:	e7f2      	b.n	8018bca <_dtoa_r+0x252>
 8018be4:	2401      	movs	r4, #1
 8018be6:	2200      	movs	r2, #0
 8018be8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8018bec:	f04f 3bff 	mov.w	fp, #4294967295
 8018bf0:	2100      	movs	r1, #0
 8018bf2:	46da      	mov	sl, fp
 8018bf4:	2212      	movs	r2, #18
 8018bf6:	9109      	str	r1, [sp, #36]	@ 0x24
 8018bf8:	e7ce      	b.n	8018b98 <_dtoa_r+0x220>
 8018bfa:	2201      	movs	r2, #1
 8018bfc:	9208      	str	r2, [sp, #32]
 8018bfe:	e7f5      	b.n	8018bec <_dtoa_r+0x274>
 8018c00:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8018c04:	46da      	mov	sl, fp
 8018c06:	465a      	mov	r2, fp
 8018c08:	e7c6      	b.n	8018b98 <_dtoa_r+0x220>
 8018c0a:	3101      	adds	r1, #1
 8018c0c:	0040      	lsls	r0, r0, #1
 8018c0e:	e7c7      	b.n	8018ba0 <_dtoa_r+0x228>
 8018c10:	636f4361 	.word	0x636f4361
 8018c14:	3fd287a7 	.word	0x3fd287a7
 8018c18:	8b60c8b3 	.word	0x8b60c8b3
 8018c1c:	3fc68a28 	.word	0x3fc68a28
 8018c20:	509f79fb 	.word	0x509f79fb
 8018c24:	3fd34413 	.word	0x3fd34413
 8018c28:	0801c346 	.word	0x0801c346
 8018c2c:	0801c35d 	.word	0x0801c35d
 8018c30:	7ff00000 	.word	0x7ff00000
 8018c34:	0801c342 	.word	0x0801c342
 8018c38:	0801c311 	.word	0x0801c311
 8018c3c:	0801c310 	.word	0x0801c310
 8018c40:	0801c458 	.word	0x0801c458
 8018c44:	0801c3b5 	.word	0x0801c3b5
 8018c48:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8018c4c:	f1ba 0f0e 	cmp.w	sl, #14
 8018c50:	6010      	str	r0, [r2, #0]
 8018c52:	d86f      	bhi.n	8018d34 <_dtoa_r+0x3bc>
 8018c54:	2c00      	cmp	r4, #0
 8018c56:	d06d      	beq.n	8018d34 <_dtoa_r+0x3bc>
 8018c58:	f1b8 0f00 	cmp.w	r8, #0
 8018c5c:	f340 80c2 	ble.w	8018de4 <_dtoa_r+0x46c>
 8018c60:	4aca      	ldr	r2, [pc, #808]	@ (8018f8c <_dtoa_r+0x614>)
 8018c62:	f008 010f 	and.w	r1, r8, #15
 8018c66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018c6a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8018c6e:	ed92 7b00 	vldr	d7, [r2]
 8018c72:	ea4f 1128 	mov.w	r1, r8, asr #4
 8018c76:	f000 80a9 	beq.w	8018dcc <_dtoa_r+0x454>
 8018c7a:	4ac5      	ldr	r2, [pc, #788]	@ (8018f90 <_dtoa_r+0x618>)
 8018c7c:	ed92 6b08 	vldr	d6, [r2, #32]
 8018c80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018c84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018c88:	f001 010f 	and.w	r1, r1, #15
 8018c8c:	2203      	movs	r2, #3
 8018c8e:	48c0      	ldr	r0, [pc, #768]	@ (8018f90 <_dtoa_r+0x618>)
 8018c90:	2900      	cmp	r1, #0
 8018c92:	f040 809d 	bne.w	8018dd0 <_dtoa_r+0x458>
 8018c96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018c9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018c9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018ca2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ca8:	2900      	cmp	r1, #0
 8018caa:	f000 80c1 	beq.w	8018e30 <_dtoa_r+0x4b8>
 8018cae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8018cb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cba:	f140 80b9 	bpl.w	8018e30 <_dtoa_r+0x4b8>
 8018cbe:	f1ba 0f00 	cmp.w	sl, #0
 8018cc2:	f000 80b5 	beq.w	8018e30 <_dtoa_r+0x4b8>
 8018cc6:	f1bb 0f00 	cmp.w	fp, #0
 8018cca:	dd31      	ble.n	8018d30 <_dtoa_r+0x3b8>
 8018ccc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8018cd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018cd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018cd8:	f108 31ff 	add.w	r1, r8, #4294967295
 8018cdc:	9104      	str	r1, [sp, #16]
 8018cde:	3201      	adds	r2, #1
 8018ce0:	465c      	mov	r4, fp
 8018ce2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018ce6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8018cea:	ee07 2a90 	vmov	s15, r2
 8018cee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018cf2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018cf6:	ee15 2a90 	vmov	r2, s11
 8018cfa:	ec51 0b15 	vmov	r0, r1, d5
 8018cfe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8018d02:	2c00      	cmp	r4, #0
 8018d04:	f040 8098 	bne.w	8018e38 <_dtoa_r+0x4c0>
 8018d08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018d0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018d10:	ec41 0b17 	vmov	d7, r0, r1
 8018d14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d1c:	f300 8261 	bgt.w	80191e2 <_dtoa_r+0x86a>
 8018d20:	eeb1 7b47 	vneg.f64	d7, d7
 8018d24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d2c:	f100 80f5 	bmi.w	8018f1a <_dtoa_r+0x5a2>
 8018d30:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018d34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018d36:	2a00      	cmp	r2, #0
 8018d38:	f2c0 812c 	blt.w	8018f94 <_dtoa_r+0x61c>
 8018d3c:	f1b8 0f0e 	cmp.w	r8, #14
 8018d40:	f300 8128 	bgt.w	8018f94 <_dtoa_r+0x61c>
 8018d44:	4b91      	ldr	r3, [pc, #580]	@ (8018f8c <_dtoa_r+0x614>)
 8018d46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018d4a:	ed93 6b00 	vldr	d6, [r3]
 8018d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	da03      	bge.n	8018d5c <_dtoa_r+0x3e4>
 8018d54:	f1ba 0f00 	cmp.w	sl, #0
 8018d58:	f340 80d2 	ble.w	8018f00 <_dtoa_r+0x588>
 8018d5c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8018d60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018d64:	463e      	mov	r6, r7
 8018d66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018d6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018d6e:	ee15 3a10 	vmov	r3, s10
 8018d72:	3330      	adds	r3, #48	@ 0x30
 8018d74:	f806 3b01 	strb.w	r3, [r6], #1
 8018d78:	1bf3      	subs	r3, r6, r7
 8018d7a:	459a      	cmp	sl, r3
 8018d7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018d80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018d84:	f040 80f8 	bne.w	8018f78 <_dtoa_r+0x600>
 8018d88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018d8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d94:	f300 80dd 	bgt.w	8018f52 <_dtoa_r+0x5da>
 8018d98:	eeb4 7b46 	vcmp.f64	d7, d6
 8018d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018da0:	d104      	bne.n	8018dac <_dtoa_r+0x434>
 8018da2:	ee15 3a10 	vmov	r3, s10
 8018da6:	07db      	lsls	r3, r3, #31
 8018da8:	f100 80d3 	bmi.w	8018f52 <_dtoa_r+0x5da>
 8018dac:	9901      	ldr	r1, [sp, #4]
 8018dae:	4648      	mov	r0, r9
 8018db0:	f000 fc78 	bl	80196a4 <_Bfree>
 8018db4:	2300      	movs	r3, #0
 8018db6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018db8:	7033      	strb	r3, [r6, #0]
 8018dba:	f108 0301 	add.w	r3, r8, #1
 8018dbe:	6013      	str	r3, [r2, #0]
 8018dc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	f000 8304 	beq.w	80193d0 <_dtoa_r+0xa58>
 8018dc8:	601e      	str	r6, [r3, #0]
 8018dca:	e301      	b.n	80193d0 <_dtoa_r+0xa58>
 8018dcc:	2202      	movs	r2, #2
 8018dce:	e75e      	b.n	8018c8e <_dtoa_r+0x316>
 8018dd0:	07cc      	lsls	r4, r1, #31
 8018dd2:	d504      	bpl.n	8018dde <_dtoa_r+0x466>
 8018dd4:	ed90 6b00 	vldr	d6, [r0]
 8018dd8:	3201      	adds	r2, #1
 8018dda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018dde:	1049      	asrs	r1, r1, #1
 8018de0:	3008      	adds	r0, #8
 8018de2:	e755      	b.n	8018c90 <_dtoa_r+0x318>
 8018de4:	d022      	beq.n	8018e2c <_dtoa_r+0x4b4>
 8018de6:	f1c8 0100 	rsb	r1, r8, #0
 8018dea:	4a68      	ldr	r2, [pc, #416]	@ (8018f8c <_dtoa_r+0x614>)
 8018dec:	f001 000f 	and.w	r0, r1, #15
 8018df0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018df4:	ed92 7b00 	vldr	d7, [r2]
 8018df8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018dfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018e00:	4863      	ldr	r0, [pc, #396]	@ (8018f90 <_dtoa_r+0x618>)
 8018e02:	1109      	asrs	r1, r1, #4
 8018e04:	2400      	movs	r4, #0
 8018e06:	2202      	movs	r2, #2
 8018e08:	b929      	cbnz	r1, 8018e16 <_dtoa_r+0x49e>
 8018e0a:	2c00      	cmp	r4, #0
 8018e0c:	f43f af49 	beq.w	8018ca2 <_dtoa_r+0x32a>
 8018e10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018e14:	e745      	b.n	8018ca2 <_dtoa_r+0x32a>
 8018e16:	07ce      	lsls	r6, r1, #31
 8018e18:	d505      	bpl.n	8018e26 <_dtoa_r+0x4ae>
 8018e1a:	ed90 6b00 	vldr	d6, [r0]
 8018e1e:	3201      	adds	r2, #1
 8018e20:	2401      	movs	r4, #1
 8018e22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018e26:	1049      	asrs	r1, r1, #1
 8018e28:	3008      	adds	r0, #8
 8018e2a:	e7ed      	b.n	8018e08 <_dtoa_r+0x490>
 8018e2c:	2202      	movs	r2, #2
 8018e2e:	e738      	b.n	8018ca2 <_dtoa_r+0x32a>
 8018e30:	f8cd 8010 	str.w	r8, [sp, #16]
 8018e34:	4654      	mov	r4, sl
 8018e36:	e754      	b.n	8018ce2 <_dtoa_r+0x36a>
 8018e38:	4a54      	ldr	r2, [pc, #336]	@ (8018f8c <_dtoa_r+0x614>)
 8018e3a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8018e3e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018e42:	9a08      	ldr	r2, [sp, #32]
 8018e44:	ec41 0b17 	vmov	d7, r0, r1
 8018e48:	443c      	add	r4, r7
 8018e4a:	b34a      	cbz	r2, 8018ea0 <_dtoa_r+0x528>
 8018e4c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8018e50:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8018e54:	463e      	mov	r6, r7
 8018e56:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018e5a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018e5e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018e62:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018e66:	ee14 2a90 	vmov	r2, s9
 8018e6a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018e6e:	3230      	adds	r2, #48	@ 0x30
 8018e70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018e74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e7c:	f806 2b01 	strb.w	r2, [r6], #1
 8018e80:	d438      	bmi.n	8018ef4 <_dtoa_r+0x57c>
 8018e82:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018e86:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e8e:	d462      	bmi.n	8018f56 <_dtoa_r+0x5de>
 8018e90:	42a6      	cmp	r6, r4
 8018e92:	f43f af4d 	beq.w	8018d30 <_dtoa_r+0x3b8>
 8018e96:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018e9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018e9e:	e7e0      	b.n	8018e62 <_dtoa_r+0x4ea>
 8018ea0:	4621      	mov	r1, r4
 8018ea2:	463e      	mov	r6, r7
 8018ea4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018ea8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018eac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018eb0:	ee14 2a90 	vmov	r2, s9
 8018eb4:	3230      	adds	r2, #48	@ 0x30
 8018eb6:	f806 2b01 	strb.w	r2, [r6], #1
 8018eba:	42a6      	cmp	r6, r4
 8018ebc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018ec0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018ec4:	d119      	bne.n	8018efa <_dtoa_r+0x582>
 8018ec6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8018eca:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018ece:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ed6:	dc3e      	bgt.n	8018f56 <_dtoa_r+0x5de>
 8018ed8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018edc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ee4:	f57f af24 	bpl.w	8018d30 <_dtoa_r+0x3b8>
 8018ee8:	460e      	mov	r6, r1
 8018eea:	3901      	subs	r1, #1
 8018eec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018ef0:	2b30      	cmp	r3, #48	@ 0x30
 8018ef2:	d0f9      	beq.n	8018ee8 <_dtoa_r+0x570>
 8018ef4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018ef8:	e758      	b.n	8018dac <_dtoa_r+0x434>
 8018efa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018efe:	e7d5      	b.n	8018eac <_dtoa_r+0x534>
 8018f00:	d10b      	bne.n	8018f1a <_dtoa_r+0x5a2>
 8018f02:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018f06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018f0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018f0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f16:	f2c0 8161 	blt.w	80191dc <_dtoa_r+0x864>
 8018f1a:	2400      	movs	r4, #0
 8018f1c:	4625      	mov	r5, r4
 8018f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f20:	43db      	mvns	r3, r3
 8018f22:	9304      	str	r3, [sp, #16]
 8018f24:	463e      	mov	r6, r7
 8018f26:	f04f 0800 	mov.w	r8, #0
 8018f2a:	4621      	mov	r1, r4
 8018f2c:	4648      	mov	r0, r9
 8018f2e:	f000 fbb9 	bl	80196a4 <_Bfree>
 8018f32:	2d00      	cmp	r5, #0
 8018f34:	d0de      	beq.n	8018ef4 <_dtoa_r+0x57c>
 8018f36:	f1b8 0f00 	cmp.w	r8, #0
 8018f3a:	d005      	beq.n	8018f48 <_dtoa_r+0x5d0>
 8018f3c:	45a8      	cmp	r8, r5
 8018f3e:	d003      	beq.n	8018f48 <_dtoa_r+0x5d0>
 8018f40:	4641      	mov	r1, r8
 8018f42:	4648      	mov	r0, r9
 8018f44:	f000 fbae 	bl	80196a4 <_Bfree>
 8018f48:	4629      	mov	r1, r5
 8018f4a:	4648      	mov	r0, r9
 8018f4c:	f000 fbaa 	bl	80196a4 <_Bfree>
 8018f50:	e7d0      	b.n	8018ef4 <_dtoa_r+0x57c>
 8018f52:	f8cd 8010 	str.w	r8, [sp, #16]
 8018f56:	4633      	mov	r3, r6
 8018f58:	461e      	mov	r6, r3
 8018f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018f5e:	2a39      	cmp	r2, #57	@ 0x39
 8018f60:	d106      	bne.n	8018f70 <_dtoa_r+0x5f8>
 8018f62:	429f      	cmp	r7, r3
 8018f64:	d1f8      	bne.n	8018f58 <_dtoa_r+0x5e0>
 8018f66:	9a04      	ldr	r2, [sp, #16]
 8018f68:	3201      	adds	r2, #1
 8018f6a:	9204      	str	r2, [sp, #16]
 8018f6c:	2230      	movs	r2, #48	@ 0x30
 8018f6e:	703a      	strb	r2, [r7, #0]
 8018f70:	781a      	ldrb	r2, [r3, #0]
 8018f72:	3201      	adds	r2, #1
 8018f74:	701a      	strb	r2, [r3, #0]
 8018f76:	e7bd      	b.n	8018ef4 <_dtoa_r+0x57c>
 8018f78:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018f7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f84:	f47f aeef 	bne.w	8018d66 <_dtoa_r+0x3ee>
 8018f88:	e710      	b.n	8018dac <_dtoa_r+0x434>
 8018f8a:	bf00      	nop
 8018f8c:	0801c458 	.word	0x0801c458
 8018f90:	0801c430 	.word	0x0801c430
 8018f94:	9908      	ldr	r1, [sp, #32]
 8018f96:	2900      	cmp	r1, #0
 8018f98:	f000 80e3 	beq.w	8019162 <_dtoa_r+0x7ea>
 8018f9c:	9907      	ldr	r1, [sp, #28]
 8018f9e:	2901      	cmp	r1, #1
 8018fa0:	f300 80c8 	bgt.w	8019134 <_dtoa_r+0x7bc>
 8018fa4:	2d00      	cmp	r5, #0
 8018fa6:	f000 80c1 	beq.w	801912c <_dtoa_r+0x7b4>
 8018faa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018fae:	9e05      	ldr	r6, [sp, #20]
 8018fb0:	461c      	mov	r4, r3
 8018fb2:	9304      	str	r3, [sp, #16]
 8018fb4:	9b05      	ldr	r3, [sp, #20]
 8018fb6:	4413      	add	r3, r2
 8018fb8:	9305      	str	r3, [sp, #20]
 8018fba:	9b06      	ldr	r3, [sp, #24]
 8018fbc:	2101      	movs	r1, #1
 8018fbe:	4413      	add	r3, r2
 8018fc0:	4648      	mov	r0, r9
 8018fc2:	9306      	str	r3, [sp, #24]
 8018fc4:	f000 fc6c 	bl	80198a0 <__i2b>
 8018fc8:	9b04      	ldr	r3, [sp, #16]
 8018fca:	4605      	mov	r5, r0
 8018fcc:	b166      	cbz	r6, 8018fe8 <_dtoa_r+0x670>
 8018fce:	9a06      	ldr	r2, [sp, #24]
 8018fd0:	2a00      	cmp	r2, #0
 8018fd2:	dd09      	ble.n	8018fe8 <_dtoa_r+0x670>
 8018fd4:	42b2      	cmp	r2, r6
 8018fd6:	9905      	ldr	r1, [sp, #20]
 8018fd8:	bfa8      	it	ge
 8018fda:	4632      	movge	r2, r6
 8018fdc:	1a89      	subs	r1, r1, r2
 8018fde:	9105      	str	r1, [sp, #20]
 8018fe0:	9906      	ldr	r1, [sp, #24]
 8018fe2:	1ab6      	subs	r6, r6, r2
 8018fe4:	1a8a      	subs	r2, r1, r2
 8018fe6:	9206      	str	r2, [sp, #24]
 8018fe8:	b1fb      	cbz	r3, 801902a <_dtoa_r+0x6b2>
 8018fea:	9a08      	ldr	r2, [sp, #32]
 8018fec:	2a00      	cmp	r2, #0
 8018fee:	f000 80bc 	beq.w	801916a <_dtoa_r+0x7f2>
 8018ff2:	b19c      	cbz	r4, 801901c <_dtoa_r+0x6a4>
 8018ff4:	4629      	mov	r1, r5
 8018ff6:	4622      	mov	r2, r4
 8018ff8:	4648      	mov	r0, r9
 8018ffa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018ffc:	f000 fd10 	bl	8019a20 <__pow5mult>
 8019000:	9a01      	ldr	r2, [sp, #4]
 8019002:	4601      	mov	r1, r0
 8019004:	4605      	mov	r5, r0
 8019006:	4648      	mov	r0, r9
 8019008:	f000 fc60 	bl	80198cc <__multiply>
 801900c:	9901      	ldr	r1, [sp, #4]
 801900e:	9004      	str	r0, [sp, #16]
 8019010:	4648      	mov	r0, r9
 8019012:	f000 fb47 	bl	80196a4 <_Bfree>
 8019016:	9a04      	ldr	r2, [sp, #16]
 8019018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801901a:	9201      	str	r2, [sp, #4]
 801901c:	1b1a      	subs	r2, r3, r4
 801901e:	d004      	beq.n	801902a <_dtoa_r+0x6b2>
 8019020:	9901      	ldr	r1, [sp, #4]
 8019022:	4648      	mov	r0, r9
 8019024:	f000 fcfc 	bl	8019a20 <__pow5mult>
 8019028:	9001      	str	r0, [sp, #4]
 801902a:	2101      	movs	r1, #1
 801902c:	4648      	mov	r0, r9
 801902e:	f000 fc37 	bl	80198a0 <__i2b>
 8019032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019034:	4604      	mov	r4, r0
 8019036:	2b00      	cmp	r3, #0
 8019038:	f000 81d0 	beq.w	80193dc <_dtoa_r+0xa64>
 801903c:	461a      	mov	r2, r3
 801903e:	4601      	mov	r1, r0
 8019040:	4648      	mov	r0, r9
 8019042:	f000 fced 	bl	8019a20 <__pow5mult>
 8019046:	9b07      	ldr	r3, [sp, #28]
 8019048:	2b01      	cmp	r3, #1
 801904a:	4604      	mov	r4, r0
 801904c:	f300 8095 	bgt.w	801917a <_dtoa_r+0x802>
 8019050:	9b02      	ldr	r3, [sp, #8]
 8019052:	2b00      	cmp	r3, #0
 8019054:	f040 808b 	bne.w	801916e <_dtoa_r+0x7f6>
 8019058:	9b03      	ldr	r3, [sp, #12]
 801905a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801905e:	2a00      	cmp	r2, #0
 8019060:	f040 8087 	bne.w	8019172 <_dtoa_r+0x7fa>
 8019064:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019068:	0d12      	lsrs	r2, r2, #20
 801906a:	0512      	lsls	r2, r2, #20
 801906c:	2a00      	cmp	r2, #0
 801906e:	f000 8082 	beq.w	8019176 <_dtoa_r+0x7fe>
 8019072:	9b05      	ldr	r3, [sp, #20]
 8019074:	3301      	adds	r3, #1
 8019076:	9305      	str	r3, [sp, #20]
 8019078:	9b06      	ldr	r3, [sp, #24]
 801907a:	3301      	adds	r3, #1
 801907c:	9306      	str	r3, [sp, #24]
 801907e:	2301      	movs	r3, #1
 8019080:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019084:	2b00      	cmp	r3, #0
 8019086:	f000 81af 	beq.w	80193e8 <_dtoa_r+0xa70>
 801908a:	6922      	ldr	r2, [r4, #16]
 801908c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019090:	6910      	ldr	r0, [r2, #16]
 8019092:	f000 fbb9 	bl	8019808 <__hi0bits>
 8019096:	f1c0 0020 	rsb	r0, r0, #32
 801909a:	9b06      	ldr	r3, [sp, #24]
 801909c:	4418      	add	r0, r3
 801909e:	f010 001f 	ands.w	r0, r0, #31
 80190a2:	d076      	beq.n	8019192 <_dtoa_r+0x81a>
 80190a4:	f1c0 0220 	rsb	r2, r0, #32
 80190a8:	2a04      	cmp	r2, #4
 80190aa:	dd69      	ble.n	8019180 <_dtoa_r+0x808>
 80190ac:	9b05      	ldr	r3, [sp, #20]
 80190ae:	f1c0 001c 	rsb	r0, r0, #28
 80190b2:	4403      	add	r3, r0
 80190b4:	9305      	str	r3, [sp, #20]
 80190b6:	9b06      	ldr	r3, [sp, #24]
 80190b8:	4406      	add	r6, r0
 80190ba:	4403      	add	r3, r0
 80190bc:	9306      	str	r3, [sp, #24]
 80190be:	9b05      	ldr	r3, [sp, #20]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	dd05      	ble.n	80190d0 <_dtoa_r+0x758>
 80190c4:	9901      	ldr	r1, [sp, #4]
 80190c6:	461a      	mov	r2, r3
 80190c8:	4648      	mov	r0, r9
 80190ca:	f000 fd03 	bl	8019ad4 <__lshift>
 80190ce:	9001      	str	r0, [sp, #4]
 80190d0:	9b06      	ldr	r3, [sp, #24]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	dd05      	ble.n	80190e2 <_dtoa_r+0x76a>
 80190d6:	4621      	mov	r1, r4
 80190d8:	461a      	mov	r2, r3
 80190da:	4648      	mov	r0, r9
 80190dc:	f000 fcfa 	bl	8019ad4 <__lshift>
 80190e0:	4604      	mov	r4, r0
 80190e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d056      	beq.n	8019196 <_dtoa_r+0x81e>
 80190e8:	9801      	ldr	r0, [sp, #4]
 80190ea:	4621      	mov	r1, r4
 80190ec:	f000 fd5e 	bl	8019bac <__mcmp>
 80190f0:	2800      	cmp	r0, #0
 80190f2:	da50      	bge.n	8019196 <_dtoa_r+0x81e>
 80190f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80190f8:	9304      	str	r3, [sp, #16]
 80190fa:	9901      	ldr	r1, [sp, #4]
 80190fc:	2300      	movs	r3, #0
 80190fe:	220a      	movs	r2, #10
 8019100:	4648      	mov	r0, r9
 8019102:	f000 faf1 	bl	80196e8 <__multadd>
 8019106:	9b08      	ldr	r3, [sp, #32]
 8019108:	9001      	str	r0, [sp, #4]
 801910a:	2b00      	cmp	r3, #0
 801910c:	f000 816e 	beq.w	80193ec <_dtoa_r+0xa74>
 8019110:	4629      	mov	r1, r5
 8019112:	2300      	movs	r3, #0
 8019114:	220a      	movs	r2, #10
 8019116:	4648      	mov	r0, r9
 8019118:	f000 fae6 	bl	80196e8 <__multadd>
 801911c:	f1bb 0f00 	cmp.w	fp, #0
 8019120:	4605      	mov	r5, r0
 8019122:	dc64      	bgt.n	80191ee <_dtoa_r+0x876>
 8019124:	9b07      	ldr	r3, [sp, #28]
 8019126:	2b02      	cmp	r3, #2
 8019128:	dc3e      	bgt.n	80191a8 <_dtoa_r+0x830>
 801912a:	e060      	b.n	80191ee <_dtoa_r+0x876>
 801912c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801912e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019132:	e73c      	b.n	8018fae <_dtoa_r+0x636>
 8019134:	f10a 34ff 	add.w	r4, sl, #4294967295
 8019138:	42a3      	cmp	r3, r4
 801913a:	bfbf      	itttt	lt
 801913c:	1ae2      	sublt	r2, r4, r3
 801913e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8019140:	189b      	addlt	r3, r3, r2
 8019142:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8019144:	bfae      	itee	ge
 8019146:	1b1c      	subge	r4, r3, r4
 8019148:	4623      	movlt	r3, r4
 801914a:	2400      	movlt	r4, #0
 801914c:	f1ba 0f00 	cmp.w	sl, #0
 8019150:	bfb5      	itete	lt
 8019152:	9a05      	ldrlt	r2, [sp, #20]
 8019154:	9e05      	ldrge	r6, [sp, #20]
 8019156:	eba2 060a 	sublt.w	r6, r2, sl
 801915a:	4652      	movge	r2, sl
 801915c:	bfb8      	it	lt
 801915e:	2200      	movlt	r2, #0
 8019160:	e727      	b.n	8018fb2 <_dtoa_r+0x63a>
 8019162:	9e05      	ldr	r6, [sp, #20]
 8019164:	9d08      	ldr	r5, [sp, #32]
 8019166:	461c      	mov	r4, r3
 8019168:	e730      	b.n	8018fcc <_dtoa_r+0x654>
 801916a:	461a      	mov	r2, r3
 801916c:	e758      	b.n	8019020 <_dtoa_r+0x6a8>
 801916e:	2300      	movs	r3, #0
 8019170:	e786      	b.n	8019080 <_dtoa_r+0x708>
 8019172:	9b02      	ldr	r3, [sp, #8]
 8019174:	e784      	b.n	8019080 <_dtoa_r+0x708>
 8019176:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019178:	e783      	b.n	8019082 <_dtoa_r+0x70a>
 801917a:	2300      	movs	r3, #0
 801917c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801917e:	e784      	b.n	801908a <_dtoa_r+0x712>
 8019180:	d09d      	beq.n	80190be <_dtoa_r+0x746>
 8019182:	9b05      	ldr	r3, [sp, #20]
 8019184:	321c      	adds	r2, #28
 8019186:	4413      	add	r3, r2
 8019188:	9305      	str	r3, [sp, #20]
 801918a:	9b06      	ldr	r3, [sp, #24]
 801918c:	4416      	add	r6, r2
 801918e:	4413      	add	r3, r2
 8019190:	e794      	b.n	80190bc <_dtoa_r+0x744>
 8019192:	4602      	mov	r2, r0
 8019194:	e7f5      	b.n	8019182 <_dtoa_r+0x80a>
 8019196:	f1ba 0f00 	cmp.w	sl, #0
 801919a:	f8cd 8010 	str.w	r8, [sp, #16]
 801919e:	46d3      	mov	fp, sl
 80191a0:	dc21      	bgt.n	80191e6 <_dtoa_r+0x86e>
 80191a2:	9b07      	ldr	r3, [sp, #28]
 80191a4:	2b02      	cmp	r3, #2
 80191a6:	dd1e      	ble.n	80191e6 <_dtoa_r+0x86e>
 80191a8:	f1bb 0f00 	cmp.w	fp, #0
 80191ac:	f47f aeb7 	bne.w	8018f1e <_dtoa_r+0x5a6>
 80191b0:	4621      	mov	r1, r4
 80191b2:	465b      	mov	r3, fp
 80191b4:	2205      	movs	r2, #5
 80191b6:	4648      	mov	r0, r9
 80191b8:	f000 fa96 	bl	80196e8 <__multadd>
 80191bc:	4601      	mov	r1, r0
 80191be:	4604      	mov	r4, r0
 80191c0:	9801      	ldr	r0, [sp, #4]
 80191c2:	f000 fcf3 	bl	8019bac <__mcmp>
 80191c6:	2800      	cmp	r0, #0
 80191c8:	f77f aea9 	ble.w	8018f1e <_dtoa_r+0x5a6>
 80191cc:	463e      	mov	r6, r7
 80191ce:	2331      	movs	r3, #49	@ 0x31
 80191d0:	f806 3b01 	strb.w	r3, [r6], #1
 80191d4:	9b04      	ldr	r3, [sp, #16]
 80191d6:	3301      	adds	r3, #1
 80191d8:	9304      	str	r3, [sp, #16]
 80191da:	e6a4      	b.n	8018f26 <_dtoa_r+0x5ae>
 80191dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80191e0:	4654      	mov	r4, sl
 80191e2:	4625      	mov	r5, r4
 80191e4:	e7f2      	b.n	80191cc <_dtoa_r+0x854>
 80191e6:	9b08      	ldr	r3, [sp, #32]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	f000 8103 	beq.w	80193f4 <_dtoa_r+0xa7c>
 80191ee:	2e00      	cmp	r6, #0
 80191f0:	dd05      	ble.n	80191fe <_dtoa_r+0x886>
 80191f2:	4629      	mov	r1, r5
 80191f4:	4632      	mov	r2, r6
 80191f6:	4648      	mov	r0, r9
 80191f8:	f000 fc6c 	bl	8019ad4 <__lshift>
 80191fc:	4605      	mov	r5, r0
 80191fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019200:	2b00      	cmp	r3, #0
 8019202:	d058      	beq.n	80192b6 <_dtoa_r+0x93e>
 8019204:	6869      	ldr	r1, [r5, #4]
 8019206:	4648      	mov	r0, r9
 8019208:	f000 fa0c 	bl	8019624 <_Balloc>
 801920c:	4606      	mov	r6, r0
 801920e:	b928      	cbnz	r0, 801921c <_dtoa_r+0x8a4>
 8019210:	4b82      	ldr	r3, [pc, #520]	@ (801941c <_dtoa_r+0xaa4>)
 8019212:	4602      	mov	r2, r0
 8019214:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019218:	f7ff bbc7 	b.w	80189aa <_dtoa_r+0x32>
 801921c:	692a      	ldr	r2, [r5, #16]
 801921e:	3202      	adds	r2, #2
 8019220:	0092      	lsls	r2, r2, #2
 8019222:	f105 010c 	add.w	r1, r5, #12
 8019226:	300c      	adds	r0, #12
 8019228:	f7ff fb07 	bl	801883a <memcpy>
 801922c:	2201      	movs	r2, #1
 801922e:	4631      	mov	r1, r6
 8019230:	4648      	mov	r0, r9
 8019232:	f000 fc4f 	bl	8019ad4 <__lshift>
 8019236:	1c7b      	adds	r3, r7, #1
 8019238:	9305      	str	r3, [sp, #20]
 801923a:	eb07 030b 	add.w	r3, r7, fp
 801923e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019240:	9b02      	ldr	r3, [sp, #8]
 8019242:	f003 0301 	and.w	r3, r3, #1
 8019246:	46a8      	mov	r8, r5
 8019248:	9308      	str	r3, [sp, #32]
 801924a:	4605      	mov	r5, r0
 801924c:	9b05      	ldr	r3, [sp, #20]
 801924e:	9801      	ldr	r0, [sp, #4]
 8019250:	4621      	mov	r1, r4
 8019252:	f103 3bff 	add.w	fp, r3, #4294967295
 8019256:	f7ff fb05 	bl	8018864 <quorem>
 801925a:	4641      	mov	r1, r8
 801925c:	9002      	str	r0, [sp, #8]
 801925e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019262:	9801      	ldr	r0, [sp, #4]
 8019264:	f000 fca2 	bl	8019bac <__mcmp>
 8019268:	462a      	mov	r2, r5
 801926a:	9006      	str	r0, [sp, #24]
 801926c:	4621      	mov	r1, r4
 801926e:	4648      	mov	r0, r9
 8019270:	f000 fcb8 	bl	8019be4 <__mdiff>
 8019274:	68c2      	ldr	r2, [r0, #12]
 8019276:	4606      	mov	r6, r0
 8019278:	b9fa      	cbnz	r2, 80192ba <_dtoa_r+0x942>
 801927a:	4601      	mov	r1, r0
 801927c:	9801      	ldr	r0, [sp, #4]
 801927e:	f000 fc95 	bl	8019bac <__mcmp>
 8019282:	4602      	mov	r2, r0
 8019284:	4631      	mov	r1, r6
 8019286:	4648      	mov	r0, r9
 8019288:	920a      	str	r2, [sp, #40]	@ 0x28
 801928a:	f000 fa0b 	bl	80196a4 <_Bfree>
 801928e:	9b07      	ldr	r3, [sp, #28]
 8019290:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019292:	9e05      	ldr	r6, [sp, #20]
 8019294:	ea43 0102 	orr.w	r1, r3, r2
 8019298:	9b08      	ldr	r3, [sp, #32]
 801929a:	4319      	orrs	r1, r3
 801929c:	d10f      	bne.n	80192be <_dtoa_r+0x946>
 801929e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80192a2:	d028      	beq.n	80192f6 <_dtoa_r+0x97e>
 80192a4:	9b06      	ldr	r3, [sp, #24]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	dd02      	ble.n	80192b0 <_dtoa_r+0x938>
 80192aa:	9b02      	ldr	r3, [sp, #8]
 80192ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80192b0:	f88b a000 	strb.w	sl, [fp]
 80192b4:	e639      	b.n	8018f2a <_dtoa_r+0x5b2>
 80192b6:	4628      	mov	r0, r5
 80192b8:	e7bd      	b.n	8019236 <_dtoa_r+0x8be>
 80192ba:	2201      	movs	r2, #1
 80192bc:	e7e2      	b.n	8019284 <_dtoa_r+0x90c>
 80192be:	9b06      	ldr	r3, [sp, #24]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	db04      	blt.n	80192ce <_dtoa_r+0x956>
 80192c4:	9907      	ldr	r1, [sp, #28]
 80192c6:	430b      	orrs	r3, r1
 80192c8:	9908      	ldr	r1, [sp, #32]
 80192ca:	430b      	orrs	r3, r1
 80192cc:	d120      	bne.n	8019310 <_dtoa_r+0x998>
 80192ce:	2a00      	cmp	r2, #0
 80192d0:	ddee      	ble.n	80192b0 <_dtoa_r+0x938>
 80192d2:	9901      	ldr	r1, [sp, #4]
 80192d4:	2201      	movs	r2, #1
 80192d6:	4648      	mov	r0, r9
 80192d8:	f000 fbfc 	bl	8019ad4 <__lshift>
 80192dc:	4621      	mov	r1, r4
 80192de:	9001      	str	r0, [sp, #4]
 80192e0:	f000 fc64 	bl	8019bac <__mcmp>
 80192e4:	2800      	cmp	r0, #0
 80192e6:	dc03      	bgt.n	80192f0 <_dtoa_r+0x978>
 80192e8:	d1e2      	bne.n	80192b0 <_dtoa_r+0x938>
 80192ea:	f01a 0f01 	tst.w	sl, #1
 80192ee:	d0df      	beq.n	80192b0 <_dtoa_r+0x938>
 80192f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80192f4:	d1d9      	bne.n	80192aa <_dtoa_r+0x932>
 80192f6:	2339      	movs	r3, #57	@ 0x39
 80192f8:	f88b 3000 	strb.w	r3, [fp]
 80192fc:	4633      	mov	r3, r6
 80192fe:	461e      	mov	r6, r3
 8019300:	3b01      	subs	r3, #1
 8019302:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019306:	2a39      	cmp	r2, #57	@ 0x39
 8019308:	d053      	beq.n	80193b2 <_dtoa_r+0xa3a>
 801930a:	3201      	adds	r2, #1
 801930c:	701a      	strb	r2, [r3, #0]
 801930e:	e60c      	b.n	8018f2a <_dtoa_r+0x5b2>
 8019310:	2a00      	cmp	r2, #0
 8019312:	dd07      	ble.n	8019324 <_dtoa_r+0x9ac>
 8019314:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019318:	d0ed      	beq.n	80192f6 <_dtoa_r+0x97e>
 801931a:	f10a 0301 	add.w	r3, sl, #1
 801931e:	f88b 3000 	strb.w	r3, [fp]
 8019322:	e602      	b.n	8018f2a <_dtoa_r+0x5b2>
 8019324:	9b05      	ldr	r3, [sp, #20]
 8019326:	9a05      	ldr	r2, [sp, #20]
 8019328:	f803 ac01 	strb.w	sl, [r3, #-1]
 801932c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801932e:	4293      	cmp	r3, r2
 8019330:	d029      	beq.n	8019386 <_dtoa_r+0xa0e>
 8019332:	9901      	ldr	r1, [sp, #4]
 8019334:	2300      	movs	r3, #0
 8019336:	220a      	movs	r2, #10
 8019338:	4648      	mov	r0, r9
 801933a:	f000 f9d5 	bl	80196e8 <__multadd>
 801933e:	45a8      	cmp	r8, r5
 8019340:	9001      	str	r0, [sp, #4]
 8019342:	f04f 0300 	mov.w	r3, #0
 8019346:	f04f 020a 	mov.w	r2, #10
 801934a:	4641      	mov	r1, r8
 801934c:	4648      	mov	r0, r9
 801934e:	d107      	bne.n	8019360 <_dtoa_r+0x9e8>
 8019350:	f000 f9ca 	bl	80196e8 <__multadd>
 8019354:	4680      	mov	r8, r0
 8019356:	4605      	mov	r5, r0
 8019358:	9b05      	ldr	r3, [sp, #20]
 801935a:	3301      	adds	r3, #1
 801935c:	9305      	str	r3, [sp, #20]
 801935e:	e775      	b.n	801924c <_dtoa_r+0x8d4>
 8019360:	f000 f9c2 	bl	80196e8 <__multadd>
 8019364:	4629      	mov	r1, r5
 8019366:	4680      	mov	r8, r0
 8019368:	2300      	movs	r3, #0
 801936a:	220a      	movs	r2, #10
 801936c:	4648      	mov	r0, r9
 801936e:	f000 f9bb 	bl	80196e8 <__multadd>
 8019372:	4605      	mov	r5, r0
 8019374:	e7f0      	b.n	8019358 <_dtoa_r+0x9e0>
 8019376:	f1bb 0f00 	cmp.w	fp, #0
 801937a:	bfcc      	ite	gt
 801937c:	465e      	movgt	r6, fp
 801937e:	2601      	movle	r6, #1
 8019380:	443e      	add	r6, r7
 8019382:	f04f 0800 	mov.w	r8, #0
 8019386:	9901      	ldr	r1, [sp, #4]
 8019388:	2201      	movs	r2, #1
 801938a:	4648      	mov	r0, r9
 801938c:	f000 fba2 	bl	8019ad4 <__lshift>
 8019390:	4621      	mov	r1, r4
 8019392:	9001      	str	r0, [sp, #4]
 8019394:	f000 fc0a 	bl	8019bac <__mcmp>
 8019398:	2800      	cmp	r0, #0
 801939a:	dcaf      	bgt.n	80192fc <_dtoa_r+0x984>
 801939c:	d102      	bne.n	80193a4 <_dtoa_r+0xa2c>
 801939e:	f01a 0f01 	tst.w	sl, #1
 80193a2:	d1ab      	bne.n	80192fc <_dtoa_r+0x984>
 80193a4:	4633      	mov	r3, r6
 80193a6:	461e      	mov	r6, r3
 80193a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80193ac:	2a30      	cmp	r2, #48	@ 0x30
 80193ae:	d0fa      	beq.n	80193a6 <_dtoa_r+0xa2e>
 80193b0:	e5bb      	b.n	8018f2a <_dtoa_r+0x5b2>
 80193b2:	429f      	cmp	r7, r3
 80193b4:	d1a3      	bne.n	80192fe <_dtoa_r+0x986>
 80193b6:	9b04      	ldr	r3, [sp, #16]
 80193b8:	3301      	adds	r3, #1
 80193ba:	9304      	str	r3, [sp, #16]
 80193bc:	2331      	movs	r3, #49	@ 0x31
 80193be:	703b      	strb	r3, [r7, #0]
 80193c0:	e5b3      	b.n	8018f2a <_dtoa_r+0x5b2>
 80193c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80193c4:	4f16      	ldr	r7, [pc, #88]	@ (8019420 <_dtoa_r+0xaa8>)
 80193c6:	b11b      	cbz	r3, 80193d0 <_dtoa_r+0xa58>
 80193c8:	f107 0308 	add.w	r3, r7, #8
 80193cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80193ce:	6013      	str	r3, [r2, #0]
 80193d0:	4638      	mov	r0, r7
 80193d2:	b011      	add	sp, #68	@ 0x44
 80193d4:	ecbd 8b02 	vpop	{d8}
 80193d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193dc:	9b07      	ldr	r3, [sp, #28]
 80193de:	2b01      	cmp	r3, #1
 80193e0:	f77f ae36 	ble.w	8019050 <_dtoa_r+0x6d8>
 80193e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80193e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80193e8:	2001      	movs	r0, #1
 80193ea:	e656      	b.n	801909a <_dtoa_r+0x722>
 80193ec:	f1bb 0f00 	cmp.w	fp, #0
 80193f0:	f77f aed7 	ble.w	80191a2 <_dtoa_r+0x82a>
 80193f4:	463e      	mov	r6, r7
 80193f6:	9801      	ldr	r0, [sp, #4]
 80193f8:	4621      	mov	r1, r4
 80193fa:	f7ff fa33 	bl	8018864 <quorem>
 80193fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019402:	f806 ab01 	strb.w	sl, [r6], #1
 8019406:	1bf2      	subs	r2, r6, r7
 8019408:	4593      	cmp	fp, r2
 801940a:	ddb4      	ble.n	8019376 <_dtoa_r+0x9fe>
 801940c:	9901      	ldr	r1, [sp, #4]
 801940e:	2300      	movs	r3, #0
 8019410:	220a      	movs	r2, #10
 8019412:	4648      	mov	r0, r9
 8019414:	f000 f968 	bl	80196e8 <__multadd>
 8019418:	9001      	str	r0, [sp, #4]
 801941a:	e7ec      	b.n	80193f6 <_dtoa_r+0xa7e>
 801941c:	0801c3b5 	.word	0x0801c3b5
 8019420:	0801c339 	.word	0x0801c339

08019424 <_free_r>:
 8019424:	b538      	push	{r3, r4, r5, lr}
 8019426:	4605      	mov	r5, r0
 8019428:	2900      	cmp	r1, #0
 801942a:	d041      	beq.n	80194b0 <_free_r+0x8c>
 801942c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019430:	1f0c      	subs	r4, r1, #4
 8019432:	2b00      	cmp	r3, #0
 8019434:	bfb8      	it	lt
 8019436:	18e4      	addlt	r4, r4, r3
 8019438:	f000 f8e8 	bl	801960c <__malloc_lock>
 801943c:	4a1d      	ldr	r2, [pc, #116]	@ (80194b4 <_free_r+0x90>)
 801943e:	6813      	ldr	r3, [r2, #0]
 8019440:	b933      	cbnz	r3, 8019450 <_free_r+0x2c>
 8019442:	6063      	str	r3, [r4, #4]
 8019444:	6014      	str	r4, [r2, #0]
 8019446:	4628      	mov	r0, r5
 8019448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801944c:	f000 b8e4 	b.w	8019618 <__malloc_unlock>
 8019450:	42a3      	cmp	r3, r4
 8019452:	d908      	bls.n	8019466 <_free_r+0x42>
 8019454:	6820      	ldr	r0, [r4, #0]
 8019456:	1821      	adds	r1, r4, r0
 8019458:	428b      	cmp	r3, r1
 801945a:	bf01      	itttt	eq
 801945c:	6819      	ldreq	r1, [r3, #0]
 801945e:	685b      	ldreq	r3, [r3, #4]
 8019460:	1809      	addeq	r1, r1, r0
 8019462:	6021      	streq	r1, [r4, #0]
 8019464:	e7ed      	b.n	8019442 <_free_r+0x1e>
 8019466:	461a      	mov	r2, r3
 8019468:	685b      	ldr	r3, [r3, #4]
 801946a:	b10b      	cbz	r3, 8019470 <_free_r+0x4c>
 801946c:	42a3      	cmp	r3, r4
 801946e:	d9fa      	bls.n	8019466 <_free_r+0x42>
 8019470:	6811      	ldr	r1, [r2, #0]
 8019472:	1850      	adds	r0, r2, r1
 8019474:	42a0      	cmp	r0, r4
 8019476:	d10b      	bne.n	8019490 <_free_r+0x6c>
 8019478:	6820      	ldr	r0, [r4, #0]
 801947a:	4401      	add	r1, r0
 801947c:	1850      	adds	r0, r2, r1
 801947e:	4283      	cmp	r3, r0
 8019480:	6011      	str	r1, [r2, #0]
 8019482:	d1e0      	bne.n	8019446 <_free_r+0x22>
 8019484:	6818      	ldr	r0, [r3, #0]
 8019486:	685b      	ldr	r3, [r3, #4]
 8019488:	6053      	str	r3, [r2, #4]
 801948a:	4408      	add	r0, r1
 801948c:	6010      	str	r0, [r2, #0]
 801948e:	e7da      	b.n	8019446 <_free_r+0x22>
 8019490:	d902      	bls.n	8019498 <_free_r+0x74>
 8019492:	230c      	movs	r3, #12
 8019494:	602b      	str	r3, [r5, #0]
 8019496:	e7d6      	b.n	8019446 <_free_r+0x22>
 8019498:	6820      	ldr	r0, [r4, #0]
 801949a:	1821      	adds	r1, r4, r0
 801949c:	428b      	cmp	r3, r1
 801949e:	bf04      	itt	eq
 80194a0:	6819      	ldreq	r1, [r3, #0]
 80194a2:	685b      	ldreq	r3, [r3, #4]
 80194a4:	6063      	str	r3, [r4, #4]
 80194a6:	bf04      	itt	eq
 80194a8:	1809      	addeq	r1, r1, r0
 80194aa:	6021      	streq	r1, [r4, #0]
 80194ac:	6054      	str	r4, [r2, #4]
 80194ae:	e7ca      	b.n	8019446 <_free_r+0x22>
 80194b0:	bd38      	pop	{r3, r4, r5, pc}
 80194b2:	bf00      	nop
 80194b4:	240020b0 	.word	0x240020b0

080194b8 <malloc>:
 80194b8:	4b02      	ldr	r3, [pc, #8]	@ (80194c4 <malloc+0xc>)
 80194ba:	4601      	mov	r1, r0
 80194bc:	6818      	ldr	r0, [r3, #0]
 80194be:	f000 b825 	b.w	801950c <_malloc_r>
 80194c2:	bf00      	nop
 80194c4:	24000174 	.word	0x24000174

080194c8 <sbrk_aligned>:
 80194c8:	b570      	push	{r4, r5, r6, lr}
 80194ca:	4e0f      	ldr	r6, [pc, #60]	@ (8019508 <sbrk_aligned+0x40>)
 80194cc:	460c      	mov	r4, r1
 80194ce:	6831      	ldr	r1, [r6, #0]
 80194d0:	4605      	mov	r5, r0
 80194d2:	b911      	cbnz	r1, 80194da <sbrk_aligned+0x12>
 80194d4:	f001 ff7e 	bl	801b3d4 <_sbrk_r>
 80194d8:	6030      	str	r0, [r6, #0]
 80194da:	4621      	mov	r1, r4
 80194dc:	4628      	mov	r0, r5
 80194de:	f001 ff79 	bl	801b3d4 <_sbrk_r>
 80194e2:	1c43      	adds	r3, r0, #1
 80194e4:	d103      	bne.n	80194ee <sbrk_aligned+0x26>
 80194e6:	f04f 34ff 	mov.w	r4, #4294967295
 80194ea:	4620      	mov	r0, r4
 80194ec:	bd70      	pop	{r4, r5, r6, pc}
 80194ee:	1cc4      	adds	r4, r0, #3
 80194f0:	f024 0403 	bic.w	r4, r4, #3
 80194f4:	42a0      	cmp	r0, r4
 80194f6:	d0f8      	beq.n	80194ea <sbrk_aligned+0x22>
 80194f8:	1a21      	subs	r1, r4, r0
 80194fa:	4628      	mov	r0, r5
 80194fc:	f001 ff6a 	bl	801b3d4 <_sbrk_r>
 8019500:	3001      	adds	r0, #1
 8019502:	d1f2      	bne.n	80194ea <sbrk_aligned+0x22>
 8019504:	e7ef      	b.n	80194e6 <sbrk_aligned+0x1e>
 8019506:	bf00      	nop
 8019508:	240020ac 	.word	0x240020ac

0801950c <_malloc_r>:
 801950c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019510:	1ccd      	adds	r5, r1, #3
 8019512:	f025 0503 	bic.w	r5, r5, #3
 8019516:	3508      	adds	r5, #8
 8019518:	2d0c      	cmp	r5, #12
 801951a:	bf38      	it	cc
 801951c:	250c      	movcc	r5, #12
 801951e:	2d00      	cmp	r5, #0
 8019520:	4606      	mov	r6, r0
 8019522:	db01      	blt.n	8019528 <_malloc_r+0x1c>
 8019524:	42a9      	cmp	r1, r5
 8019526:	d904      	bls.n	8019532 <_malloc_r+0x26>
 8019528:	230c      	movs	r3, #12
 801952a:	6033      	str	r3, [r6, #0]
 801952c:	2000      	movs	r0, #0
 801952e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019532:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019608 <_malloc_r+0xfc>
 8019536:	f000 f869 	bl	801960c <__malloc_lock>
 801953a:	f8d8 3000 	ldr.w	r3, [r8]
 801953e:	461c      	mov	r4, r3
 8019540:	bb44      	cbnz	r4, 8019594 <_malloc_r+0x88>
 8019542:	4629      	mov	r1, r5
 8019544:	4630      	mov	r0, r6
 8019546:	f7ff ffbf 	bl	80194c8 <sbrk_aligned>
 801954a:	1c43      	adds	r3, r0, #1
 801954c:	4604      	mov	r4, r0
 801954e:	d158      	bne.n	8019602 <_malloc_r+0xf6>
 8019550:	f8d8 4000 	ldr.w	r4, [r8]
 8019554:	4627      	mov	r7, r4
 8019556:	2f00      	cmp	r7, #0
 8019558:	d143      	bne.n	80195e2 <_malloc_r+0xd6>
 801955a:	2c00      	cmp	r4, #0
 801955c:	d04b      	beq.n	80195f6 <_malloc_r+0xea>
 801955e:	6823      	ldr	r3, [r4, #0]
 8019560:	4639      	mov	r1, r7
 8019562:	4630      	mov	r0, r6
 8019564:	eb04 0903 	add.w	r9, r4, r3
 8019568:	f001 ff34 	bl	801b3d4 <_sbrk_r>
 801956c:	4581      	cmp	r9, r0
 801956e:	d142      	bne.n	80195f6 <_malloc_r+0xea>
 8019570:	6821      	ldr	r1, [r4, #0]
 8019572:	1a6d      	subs	r5, r5, r1
 8019574:	4629      	mov	r1, r5
 8019576:	4630      	mov	r0, r6
 8019578:	f7ff ffa6 	bl	80194c8 <sbrk_aligned>
 801957c:	3001      	adds	r0, #1
 801957e:	d03a      	beq.n	80195f6 <_malloc_r+0xea>
 8019580:	6823      	ldr	r3, [r4, #0]
 8019582:	442b      	add	r3, r5
 8019584:	6023      	str	r3, [r4, #0]
 8019586:	f8d8 3000 	ldr.w	r3, [r8]
 801958a:	685a      	ldr	r2, [r3, #4]
 801958c:	bb62      	cbnz	r2, 80195e8 <_malloc_r+0xdc>
 801958e:	f8c8 7000 	str.w	r7, [r8]
 8019592:	e00f      	b.n	80195b4 <_malloc_r+0xa8>
 8019594:	6822      	ldr	r2, [r4, #0]
 8019596:	1b52      	subs	r2, r2, r5
 8019598:	d420      	bmi.n	80195dc <_malloc_r+0xd0>
 801959a:	2a0b      	cmp	r2, #11
 801959c:	d917      	bls.n	80195ce <_malloc_r+0xc2>
 801959e:	1961      	adds	r1, r4, r5
 80195a0:	42a3      	cmp	r3, r4
 80195a2:	6025      	str	r5, [r4, #0]
 80195a4:	bf18      	it	ne
 80195a6:	6059      	strne	r1, [r3, #4]
 80195a8:	6863      	ldr	r3, [r4, #4]
 80195aa:	bf08      	it	eq
 80195ac:	f8c8 1000 	streq.w	r1, [r8]
 80195b0:	5162      	str	r2, [r4, r5]
 80195b2:	604b      	str	r3, [r1, #4]
 80195b4:	4630      	mov	r0, r6
 80195b6:	f000 f82f 	bl	8019618 <__malloc_unlock>
 80195ba:	f104 000b 	add.w	r0, r4, #11
 80195be:	1d23      	adds	r3, r4, #4
 80195c0:	f020 0007 	bic.w	r0, r0, #7
 80195c4:	1ac2      	subs	r2, r0, r3
 80195c6:	bf1c      	itt	ne
 80195c8:	1a1b      	subne	r3, r3, r0
 80195ca:	50a3      	strne	r3, [r4, r2]
 80195cc:	e7af      	b.n	801952e <_malloc_r+0x22>
 80195ce:	6862      	ldr	r2, [r4, #4]
 80195d0:	42a3      	cmp	r3, r4
 80195d2:	bf0c      	ite	eq
 80195d4:	f8c8 2000 	streq.w	r2, [r8]
 80195d8:	605a      	strne	r2, [r3, #4]
 80195da:	e7eb      	b.n	80195b4 <_malloc_r+0xa8>
 80195dc:	4623      	mov	r3, r4
 80195de:	6864      	ldr	r4, [r4, #4]
 80195e0:	e7ae      	b.n	8019540 <_malloc_r+0x34>
 80195e2:	463c      	mov	r4, r7
 80195e4:	687f      	ldr	r7, [r7, #4]
 80195e6:	e7b6      	b.n	8019556 <_malloc_r+0x4a>
 80195e8:	461a      	mov	r2, r3
 80195ea:	685b      	ldr	r3, [r3, #4]
 80195ec:	42a3      	cmp	r3, r4
 80195ee:	d1fb      	bne.n	80195e8 <_malloc_r+0xdc>
 80195f0:	2300      	movs	r3, #0
 80195f2:	6053      	str	r3, [r2, #4]
 80195f4:	e7de      	b.n	80195b4 <_malloc_r+0xa8>
 80195f6:	230c      	movs	r3, #12
 80195f8:	6033      	str	r3, [r6, #0]
 80195fa:	4630      	mov	r0, r6
 80195fc:	f000 f80c 	bl	8019618 <__malloc_unlock>
 8019600:	e794      	b.n	801952c <_malloc_r+0x20>
 8019602:	6005      	str	r5, [r0, #0]
 8019604:	e7d6      	b.n	80195b4 <_malloc_r+0xa8>
 8019606:	bf00      	nop
 8019608:	240020b0 	.word	0x240020b0

0801960c <__malloc_lock>:
 801960c:	4801      	ldr	r0, [pc, #4]	@ (8019614 <__malloc_lock+0x8>)
 801960e:	f7ff b912 	b.w	8018836 <__retarget_lock_acquire_recursive>
 8019612:	bf00      	nop
 8019614:	240020a8 	.word	0x240020a8

08019618 <__malloc_unlock>:
 8019618:	4801      	ldr	r0, [pc, #4]	@ (8019620 <__malloc_unlock+0x8>)
 801961a:	f7ff b90d 	b.w	8018838 <__retarget_lock_release_recursive>
 801961e:	bf00      	nop
 8019620:	240020a8 	.word	0x240020a8

08019624 <_Balloc>:
 8019624:	b570      	push	{r4, r5, r6, lr}
 8019626:	69c6      	ldr	r6, [r0, #28]
 8019628:	4604      	mov	r4, r0
 801962a:	460d      	mov	r5, r1
 801962c:	b976      	cbnz	r6, 801964c <_Balloc+0x28>
 801962e:	2010      	movs	r0, #16
 8019630:	f7ff ff42 	bl	80194b8 <malloc>
 8019634:	4602      	mov	r2, r0
 8019636:	61e0      	str	r0, [r4, #28]
 8019638:	b920      	cbnz	r0, 8019644 <_Balloc+0x20>
 801963a:	4b18      	ldr	r3, [pc, #96]	@ (801969c <_Balloc+0x78>)
 801963c:	4818      	ldr	r0, [pc, #96]	@ (80196a0 <_Balloc+0x7c>)
 801963e:	216b      	movs	r1, #107	@ 0x6b
 8019640:	f001 fee2 	bl	801b408 <__assert_func>
 8019644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019648:	6006      	str	r6, [r0, #0]
 801964a:	60c6      	str	r6, [r0, #12]
 801964c:	69e6      	ldr	r6, [r4, #28]
 801964e:	68f3      	ldr	r3, [r6, #12]
 8019650:	b183      	cbz	r3, 8019674 <_Balloc+0x50>
 8019652:	69e3      	ldr	r3, [r4, #28]
 8019654:	68db      	ldr	r3, [r3, #12]
 8019656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801965a:	b9b8      	cbnz	r0, 801968c <_Balloc+0x68>
 801965c:	2101      	movs	r1, #1
 801965e:	fa01 f605 	lsl.w	r6, r1, r5
 8019662:	1d72      	adds	r2, r6, #5
 8019664:	0092      	lsls	r2, r2, #2
 8019666:	4620      	mov	r0, r4
 8019668:	f001 feec 	bl	801b444 <_calloc_r>
 801966c:	b160      	cbz	r0, 8019688 <_Balloc+0x64>
 801966e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019672:	e00e      	b.n	8019692 <_Balloc+0x6e>
 8019674:	2221      	movs	r2, #33	@ 0x21
 8019676:	2104      	movs	r1, #4
 8019678:	4620      	mov	r0, r4
 801967a:	f001 fee3 	bl	801b444 <_calloc_r>
 801967e:	69e3      	ldr	r3, [r4, #28]
 8019680:	60f0      	str	r0, [r6, #12]
 8019682:	68db      	ldr	r3, [r3, #12]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d1e4      	bne.n	8019652 <_Balloc+0x2e>
 8019688:	2000      	movs	r0, #0
 801968a:	bd70      	pop	{r4, r5, r6, pc}
 801968c:	6802      	ldr	r2, [r0, #0]
 801968e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019692:	2300      	movs	r3, #0
 8019694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019698:	e7f7      	b.n	801968a <_Balloc+0x66>
 801969a:	bf00      	nop
 801969c:	0801c346 	.word	0x0801c346
 80196a0:	0801c3c6 	.word	0x0801c3c6

080196a4 <_Bfree>:
 80196a4:	b570      	push	{r4, r5, r6, lr}
 80196a6:	69c6      	ldr	r6, [r0, #28]
 80196a8:	4605      	mov	r5, r0
 80196aa:	460c      	mov	r4, r1
 80196ac:	b976      	cbnz	r6, 80196cc <_Bfree+0x28>
 80196ae:	2010      	movs	r0, #16
 80196b0:	f7ff ff02 	bl	80194b8 <malloc>
 80196b4:	4602      	mov	r2, r0
 80196b6:	61e8      	str	r0, [r5, #28]
 80196b8:	b920      	cbnz	r0, 80196c4 <_Bfree+0x20>
 80196ba:	4b09      	ldr	r3, [pc, #36]	@ (80196e0 <_Bfree+0x3c>)
 80196bc:	4809      	ldr	r0, [pc, #36]	@ (80196e4 <_Bfree+0x40>)
 80196be:	218f      	movs	r1, #143	@ 0x8f
 80196c0:	f001 fea2 	bl	801b408 <__assert_func>
 80196c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80196c8:	6006      	str	r6, [r0, #0]
 80196ca:	60c6      	str	r6, [r0, #12]
 80196cc:	b13c      	cbz	r4, 80196de <_Bfree+0x3a>
 80196ce:	69eb      	ldr	r3, [r5, #28]
 80196d0:	6862      	ldr	r2, [r4, #4]
 80196d2:	68db      	ldr	r3, [r3, #12]
 80196d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80196d8:	6021      	str	r1, [r4, #0]
 80196da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80196de:	bd70      	pop	{r4, r5, r6, pc}
 80196e0:	0801c346 	.word	0x0801c346
 80196e4:	0801c3c6 	.word	0x0801c3c6

080196e8 <__multadd>:
 80196e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196ec:	690d      	ldr	r5, [r1, #16]
 80196ee:	4607      	mov	r7, r0
 80196f0:	460c      	mov	r4, r1
 80196f2:	461e      	mov	r6, r3
 80196f4:	f101 0c14 	add.w	ip, r1, #20
 80196f8:	2000      	movs	r0, #0
 80196fa:	f8dc 3000 	ldr.w	r3, [ip]
 80196fe:	b299      	uxth	r1, r3
 8019700:	fb02 6101 	mla	r1, r2, r1, r6
 8019704:	0c1e      	lsrs	r6, r3, #16
 8019706:	0c0b      	lsrs	r3, r1, #16
 8019708:	fb02 3306 	mla	r3, r2, r6, r3
 801970c:	b289      	uxth	r1, r1
 801970e:	3001      	adds	r0, #1
 8019710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019714:	4285      	cmp	r5, r0
 8019716:	f84c 1b04 	str.w	r1, [ip], #4
 801971a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801971e:	dcec      	bgt.n	80196fa <__multadd+0x12>
 8019720:	b30e      	cbz	r6, 8019766 <__multadd+0x7e>
 8019722:	68a3      	ldr	r3, [r4, #8]
 8019724:	42ab      	cmp	r3, r5
 8019726:	dc19      	bgt.n	801975c <__multadd+0x74>
 8019728:	6861      	ldr	r1, [r4, #4]
 801972a:	4638      	mov	r0, r7
 801972c:	3101      	adds	r1, #1
 801972e:	f7ff ff79 	bl	8019624 <_Balloc>
 8019732:	4680      	mov	r8, r0
 8019734:	b928      	cbnz	r0, 8019742 <__multadd+0x5a>
 8019736:	4602      	mov	r2, r0
 8019738:	4b0c      	ldr	r3, [pc, #48]	@ (801976c <__multadd+0x84>)
 801973a:	480d      	ldr	r0, [pc, #52]	@ (8019770 <__multadd+0x88>)
 801973c:	21ba      	movs	r1, #186	@ 0xba
 801973e:	f001 fe63 	bl	801b408 <__assert_func>
 8019742:	6922      	ldr	r2, [r4, #16]
 8019744:	3202      	adds	r2, #2
 8019746:	f104 010c 	add.w	r1, r4, #12
 801974a:	0092      	lsls	r2, r2, #2
 801974c:	300c      	adds	r0, #12
 801974e:	f7ff f874 	bl	801883a <memcpy>
 8019752:	4621      	mov	r1, r4
 8019754:	4638      	mov	r0, r7
 8019756:	f7ff ffa5 	bl	80196a4 <_Bfree>
 801975a:	4644      	mov	r4, r8
 801975c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019760:	3501      	adds	r5, #1
 8019762:	615e      	str	r6, [r3, #20]
 8019764:	6125      	str	r5, [r4, #16]
 8019766:	4620      	mov	r0, r4
 8019768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801976c:	0801c3b5 	.word	0x0801c3b5
 8019770:	0801c3c6 	.word	0x0801c3c6

08019774 <__s2b>:
 8019774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019778:	460c      	mov	r4, r1
 801977a:	4615      	mov	r5, r2
 801977c:	461f      	mov	r7, r3
 801977e:	2209      	movs	r2, #9
 8019780:	3308      	adds	r3, #8
 8019782:	4606      	mov	r6, r0
 8019784:	fb93 f3f2 	sdiv	r3, r3, r2
 8019788:	2100      	movs	r1, #0
 801978a:	2201      	movs	r2, #1
 801978c:	429a      	cmp	r2, r3
 801978e:	db09      	blt.n	80197a4 <__s2b+0x30>
 8019790:	4630      	mov	r0, r6
 8019792:	f7ff ff47 	bl	8019624 <_Balloc>
 8019796:	b940      	cbnz	r0, 80197aa <__s2b+0x36>
 8019798:	4602      	mov	r2, r0
 801979a:	4b19      	ldr	r3, [pc, #100]	@ (8019800 <__s2b+0x8c>)
 801979c:	4819      	ldr	r0, [pc, #100]	@ (8019804 <__s2b+0x90>)
 801979e:	21d3      	movs	r1, #211	@ 0xd3
 80197a0:	f001 fe32 	bl	801b408 <__assert_func>
 80197a4:	0052      	lsls	r2, r2, #1
 80197a6:	3101      	adds	r1, #1
 80197a8:	e7f0      	b.n	801978c <__s2b+0x18>
 80197aa:	9b08      	ldr	r3, [sp, #32]
 80197ac:	6143      	str	r3, [r0, #20]
 80197ae:	2d09      	cmp	r5, #9
 80197b0:	f04f 0301 	mov.w	r3, #1
 80197b4:	6103      	str	r3, [r0, #16]
 80197b6:	dd16      	ble.n	80197e6 <__s2b+0x72>
 80197b8:	f104 0909 	add.w	r9, r4, #9
 80197bc:	46c8      	mov	r8, r9
 80197be:	442c      	add	r4, r5
 80197c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80197c4:	4601      	mov	r1, r0
 80197c6:	3b30      	subs	r3, #48	@ 0x30
 80197c8:	220a      	movs	r2, #10
 80197ca:	4630      	mov	r0, r6
 80197cc:	f7ff ff8c 	bl	80196e8 <__multadd>
 80197d0:	45a0      	cmp	r8, r4
 80197d2:	d1f5      	bne.n	80197c0 <__s2b+0x4c>
 80197d4:	f1a5 0408 	sub.w	r4, r5, #8
 80197d8:	444c      	add	r4, r9
 80197da:	1b2d      	subs	r5, r5, r4
 80197dc:	1963      	adds	r3, r4, r5
 80197de:	42bb      	cmp	r3, r7
 80197e0:	db04      	blt.n	80197ec <__s2b+0x78>
 80197e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197e6:	340a      	adds	r4, #10
 80197e8:	2509      	movs	r5, #9
 80197ea:	e7f6      	b.n	80197da <__s2b+0x66>
 80197ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80197f0:	4601      	mov	r1, r0
 80197f2:	3b30      	subs	r3, #48	@ 0x30
 80197f4:	220a      	movs	r2, #10
 80197f6:	4630      	mov	r0, r6
 80197f8:	f7ff ff76 	bl	80196e8 <__multadd>
 80197fc:	e7ee      	b.n	80197dc <__s2b+0x68>
 80197fe:	bf00      	nop
 8019800:	0801c3b5 	.word	0x0801c3b5
 8019804:	0801c3c6 	.word	0x0801c3c6

08019808 <__hi0bits>:
 8019808:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801980c:	4603      	mov	r3, r0
 801980e:	bf36      	itet	cc
 8019810:	0403      	lslcc	r3, r0, #16
 8019812:	2000      	movcs	r0, #0
 8019814:	2010      	movcc	r0, #16
 8019816:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801981a:	bf3c      	itt	cc
 801981c:	021b      	lslcc	r3, r3, #8
 801981e:	3008      	addcc	r0, #8
 8019820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019824:	bf3c      	itt	cc
 8019826:	011b      	lslcc	r3, r3, #4
 8019828:	3004      	addcc	r0, #4
 801982a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801982e:	bf3c      	itt	cc
 8019830:	009b      	lslcc	r3, r3, #2
 8019832:	3002      	addcc	r0, #2
 8019834:	2b00      	cmp	r3, #0
 8019836:	db05      	blt.n	8019844 <__hi0bits+0x3c>
 8019838:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801983c:	f100 0001 	add.w	r0, r0, #1
 8019840:	bf08      	it	eq
 8019842:	2020      	moveq	r0, #32
 8019844:	4770      	bx	lr

08019846 <__lo0bits>:
 8019846:	6803      	ldr	r3, [r0, #0]
 8019848:	4602      	mov	r2, r0
 801984a:	f013 0007 	ands.w	r0, r3, #7
 801984e:	d00b      	beq.n	8019868 <__lo0bits+0x22>
 8019850:	07d9      	lsls	r1, r3, #31
 8019852:	d421      	bmi.n	8019898 <__lo0bits+0x52>
 8019854:	0798      	lsls	r0, r3, #30
 8019856:	bf49      	itett	mi
 8019858:	085b      	lsrmi	r3, r3, #1
 801985a:	089b      	lsrpl	r3, r3, #2
 801985c:	2001      	movmi	r0, #1
 801985e:	6013      	strmi	r3, [r2, #0]
 8019860:	bf5c      	itt	pl
 8019862:	6013      	strpl	r3, [r2, #0]
 8019864:	2002      	movpl	r0, #2
 8019866:	4770      	bx	lr
 8019868:	b299      	uxth	r1, r3
 801986a:	b909      	cbnz	r1, 8019870 <__lo0bits+0x2a>
 801986c:	0c1b      	lsrs	r3, r3, #16
 801986e:	2010      	movs	r0, #16
 8019870:	b2d9      	uxtb	r1, r3
 8019872:	b909      	cbnz	r1, 8019878 <__lo0bits+0x32>
 8019874:	3008      	adds	r0, #8
 8019876:	0a1b      	lsrs	r3, r3, #8
 8019878:	0719      	lsls	r1, r3, #28
 801987a:	bf04      	itt	eq
 801987c:	091b      	lsreq	r3, r3, #4
 801987e:	3004      	addeq	r0, #4
 8019880:	0799      	lsls	r1, r3, #30
 8019882:	bf04      	itt	eq
 8019884:	089b      	lsreq	r3, r3, #2
 8019886:	3002      	addeq	r0, #2
 8019888:	07d9      	lsls	r1, r3, #31
 801988a:	d403      	bmi.n	8019894 <__lo0bits+0x4e>
 801988c:	085b      	lsrs	r3, r3, #1
 801988e:	f100 0001 	add.w	r0, r0, #1
 8019892:	d003      	beq.n	801989c <__lo0bits+0x56>
 8019894:	6013      	str	r3, [r2, #0]
 8019896:	4770      	bx	lr
 8019898:	2000      	movs	r0, #0
 801989a:	4770      	bx	lr
 801989c:	2020      	movs	r0, #32
 801989e:	4770      	bx	lr

080198a0 <__i2b>:
 80198a0:	b510      	push	{r4, lr}
 80198a2:	460c      	mov	r4, r1
 80198a4:	2101      	movs	r1, #1
 80198a6:	f7ff febd 	bl	8019624 <_Balloc>
 80198aa:	4602      	mov	r2, r0
 80198ac:	b928      	cbnz	r0, 80198ba <__i2b+0x1a>
 80198ae:	4b05      	ldr	r3, [pc, #20]	@ (80198c4 <__i2b+0x24>)
 80198b0:	4805      	ldr	r0, [pc, #20]	@ (80198c8 <__i2b+0x28>)
 80198b2:	f240 1145 	movw	r1, #325	@ 0x145
 80198b6:	f001 fda7 	bl	801b408 <__assert_func>
 80198ba:	2301      	movs	r3, #1
 80198bc:	6144      	str	r4, [r0, #20]
 80198be:	6103      	str	r3, [r0, #16]
 80198c0:	bd10      	pop	{r4, pc}
 80198c2:	bf00      	nop
 80198c4:	0801c3b5 	.word	0x0801c3b5
 80198c8:	0801c3c6 	.word	0x0801c3c6

080198cc <__multiply>:
 80198cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198d0:	4614      	mov	r4, r2
 80198d2:	690a      	ldr	r2, [r1, #16]
 80198d4:	6923      	ldr	r3, [r4, #16]
 80198d6:	429a      	cmp	r2, r3
 80198d8:	bfa8      	it	ge
 80198da:	4623      	movge	r3, r4
 80198dc:	460f      	mov	r7, r1
 80198de:	bfa4      	itt	ge
 80198e0:	460c      	movge	r4, r1
 80198e2:	461f      	movge	r7, r3
 80198e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80198e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80198ec:	68a3      	ldr	r3, [r4, #8]
 80198ee:	6861      	ldr	r1, [r4, #4]
 80198f0:	eb0a 0609 	add.w	r6, sl, r9
 80198f4:	42b3      	cmp	r3, r6
 80198f6:	b085      	sub	sp, #20
 80198f8:	bfb8      	it	lt
 80198fa:	3101      	addlt	r1, #1
 80198fc:	f7ff fe92 	bl	8019624 <_Balloc>
 8019900:	b930      	cbnz	r0, 8019910 <__multiply+0x44>
 8019902:	4602      	mov	r2, r0
 8019904:	4b44      	ldr	r3, [pc, #272]	@ (8019a18 <__multiply+0x14c>)
 8019906:	4845      	ldr	r0, [pc, #276]	@ (8019a1c <__multiply+0x150>)
 8019908:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801990c:	f001 fd7c 	bl	801b408 <__assert_func>
 8019910:	f100 0514 	add.w	r5, r0, #20
 8019914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019918:	462b      	mov	r3, r5
 801991a:	2200      	movs	r2, #0
 801991c:	4543      	cmp	r3, r8
 801991e:	d321      	bcc.n	8019964 <__multiply+0x98>
 8019920:	f107 0114 	add.w	r1, r7, #20
 8019924:	f104 0214 	add.w	r2, r4, #20
 8019928:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801992c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8019930:	9302      	str	r3, [sp, #8]
 8019932:	1b13      	subs	r3, r2, r4
 8019934:	3b15      	subs	r3, #21
 8019936:	f023 0303 	bic.w	r3, r3, #3
 801993a:	3304      	adds	r3, #4
 801993c:	f104 0715 	add.w	r7, r4, #21
 8019940:	42ba      	cmp	r2, r7
 8019942:	bf38      	it	cc
 8019944:	2304      	movcc	r3, #4
 8019946:	9301      	str	r3, [sp, #4]
 8019948:	9b02      	ldr	r3, [sp, #8]
 801994a:	9103      	str	r1, [sp, #12]
 801994c:	428b      	cmp	r3, r1
 801994e:	d80c      	bhi.n	801996a <__multiply+0x9e>
 8019950:	2e00      	cmp	r6, #0
 8019952:	dd03      	ble.n	801995c <__multiply+0x90>
 8019954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019958:	2b00      	cmp	r3, #0
 801995a:	d05b      	beq.n	8019a14 <__multiply+0x148>
 801995c:	6106      	str	r6, [r0, #16]
 801995e:	b005      	add	sp, #20
 8019960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019964:	f843 2b04 	str.w	r2, [r3], #4
 8019968:	e7d8      	b.n	801991c <__multiply+0x50>
 801996a:	f8b1 a000 	ldrh.w	sl, [r1]
 801996e:	f1ba 0f00 	cmp.w	sl, #0
 8019972:	d024      	beq.n	80199be <__multiply+0xf2>
 8019974:	f104 0e14 	add.w	lr, r4, #20
 8019978:	46a9      	mov	r9, r5
 801997a:	f04f 0c00 	mov.w	ip, #0
 801997e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019982:	f8d9 3000 	ldr.w	r3, [r9]
 8019986:	fa1f fb87 	uxth.w	fp, r7
 801998a:	b29b      	uxth	r3, r3
 801998c:	fb0a 330b 	mla	r3, sl, fp, r3
 8019990:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8019994:	f8d9 7000 	ldr.w	r7, [r9]
 8019998:	4463      	add	r3, ip
 801999a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801999e:	fb0a c70b 	mla	r7, sl, fp, ip
 80199a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80199ac:	4572      	cmp	r2, lr
 80199ae:	f849 3b04 	str.w	r3, [r9], #4
 80199b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80199b6:	d8e2      	bhi.n	801997e <__multiply+0xb2>
 80199b8:	9b01      	ldr	r3, [sp, #4]
 80199ba:	f845 c003 	str.w	ip, [r5, r3]
 80199be:	9b03      	ldr	r3, [sp, #12]
 80199c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80199c4:	3104      	adds	r1, #4
 80199c6:	f1b9 0f00 	cmp.w	r9, #0
 80199ca:	d021      	beq.n	8019a10 <__multiply+0x144>
 80199cc:	682b      	ldr	r3, [r5, #0]
 80199ce:	f104 0c14 	add.w	ip, r4, #20
 80199d2:	46ae      	mov	lr, r5
 80199d4:	f04f 0a00 	mov.w	sl, #0
 80199d8:	f8bc b000 	ldrh.w	fp, [ip]
 80199dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80199e0:	fb09 770b 	mla	r7, r9, fp, r7
 80199e4:	4457      	add	r7, sl
 80199e6:	b29b      	uxth	r3, r3
 80199e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80199ec:	f84e 3b04 	str.w	r3, [lr], #4
 80199f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80199f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80199f8:	f8be 3000 	ldrh.w	r3, [lr]
 80199fc:	fb09 330a 	mla	r3, r9, sl, r3
 8019a00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8019a04:	4562      	cmp	r2, ip
 8019a06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019a0a:	d8e5      	bhi.n	80199d8 <__multiply+0x10c>
 8019a0c:	9f01      	ldr	r7, [sp, #4]
 8019a0e:	51eb      	str	r3, [r5, r7]
 8019a10:	3504      	adds	r5, #4
 8019a12:	e799      	b.n	8019948 <__multiply+0x7c>
 8019a14:	3e01      	subs	r6, #1
 8019a16:	e79b      	b.n	8019950 <__multiply+0x84>
 8019a18:	0801c3b5 	.word	0x0801c3b5
 8019a1c:	0801c3c6 	.word	0x0801c3c6

08019a20 <__pow5mult>:
 8019a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a24:	4615      	mov	r5, r2
 8019a26:	f012 0203 	ands.w	r2, r2, #3
 8019a2a:	4607      	mov	r7, r0
 8019a2c:	460e      	mov	r6, r1
 8019a2e:	d007      	beq.n	8019a40 <__pow5mult+0x20>
 8019a30:	4c25      	ldr	r4, [pc, #148]	@ (8019ac8 <__pow5mult+0xa8>)
 8019a32:	3a01      	subs	r2, #1
 8019a34:	2300      	movs	r3, #0
 8019a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019a3a:	f7ff fe55 	bl	80196e8 <__multadd>
 8019a3e:	4606      	mov	r6, r0
 8019a40:	10ad      	asrs	r5, r5, #2
 8019a42:	d03d      	beq.n	8019ac0 <__pow5mult+0xa0>
 8019a44:	69fc      	ldr	r4, [r7, #28]
 8019a46:	b97c      	cbnz	r4, 8019a68 <__pow5mult+0x48>
 8019a48:	2010      	movs	r0, #16
 8019a4a:	f7ff fd35 	bl	80194b8 <malloc>
 8019a4e:	4602      	mov	r2, r0
 8019a50:	61f8      	str	r0, [r7, #28]
 8019a52:	b928      	cbnz	r0, 8019a60 <__pow5mult+0x40>
 8019a54:	4b1d      	ldr	r3, [pc, #116]	@ (8019acc <__pow5mult+0xac>)
 8019a56:	481e      	ldr	r0, [pc, #120]	@ (8019ad0 <__pow5mult+0xb0>)
 8019a58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019a5c:	f001 fcd4 	bl	801b408 <__assert_func>
 8019a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019a64:	6004      	str	r4, [r0, #0]
 8019a66:	60c4      	str	r4, [r0, #12]
 8019a68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019a70:	b94c      	cbnz	r4, 8019a86 <__pow5mult+0x66>
 8019a72:	f240 2171 	movw	r1, #625	@ 0x271
 8019a76:	4638      	mov	r0, r7
 8019a78:	f7ff ff12 	bl	80198a0 <__i2b>
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019a82:	4604      	mov	r4, r0
 8019a84:	6003      	str	r3, [r0, #0]
 8019a86:	f04f 0900 	mov.w	r9, #0
 8019a8a:	07eb      	lsls	r3, r5, #31
 8019a8c:	d50a      	bpl.n	8019aa4 <__pow5mult+0x84>
 8019a8e:	4631      	mov	r1, r6
 8019a90:	4622      	mov	r2, r4
 8019a92:	4638      	mov	r0, r7
 8019a94:	f7ff ff1a 	bl	80198cc <__multiply>
 8019a98:	4631      	mov	r1, r6
 8019a9a:	4680      	mov	r8, r0
 8019a9c:	4638      	mov	r0, r7
 8019a9e:	f7ff fe01 	bl	80196a4 <_Bfree>
 8019aa2:	4646      	mov	r6, r8
 8019aa4:	106d      	asrs	r5, r5, #1
 8019aa6:	d00b      	beq.n	8019ac0 <__pow5mult+0xa0>
 8019aa8:	6820      	ldr	r0, [r4, #0]
 8019aaa:	b938      	cbnz	r0, 8019abc <__pow5mult+0x9c>
 8019aac:	4622      	mov	r2, r4
 8019aae:	4621      	mov	r1, r4
 8019ab0:	4638      	mov	r0, r7
 8019ab2:	f7ff ff0b 	bl	80198cc <__multiply>
 8019ab6:	6020      	str	r0, [r4, #0]
 8019ab8:	f8c0 9000 	str.w	r9, [r0]
 8019abc:	4604      	mov	r4, r0
 8019abe:	e7e4      	b.n	8019a8a <__pow5mult+0x6a>
 8019ac0:	4630      	mov	r0, r6
 8019ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ac6:	bf00      	nop
 8019ac8:	0801c420 	.word	0x0801c420
 8019acc:	0801c346 	.word	0x0801c346
 8019ad0:	0801c3c6 	.word	0x0801c3c6

08019ad4 <__lshift>:
 8019ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ad8:	460c      	mov	r4, r1
 8019ada:	6849      	ldr	r1, [r1, #4]
 8019adc:	6923      	ldr	r3, [r4, #16]
 8019ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019ae2:	68a3      	ldr	r3, [r4, #8]
 8019ae4:	4607      	mov	r7, r0
 8019ae6:	4691      	mov	r9, r2
 8019ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019aec:	f108 0601 	add.w	r6, r8, #1
 8019af0:	42b3      	cmp	r3, r6
 8019af2:	db0b      	blt.n	8019b0c <__lshift+0x38>
 8019af4:	4638      	mov	r0, r7
 8019af6:	f7ff fd95 	bl	8019624 <_Balloc>
 8019afa:	4605      	mov	r5, r0
 8019afc:	b948      	cbnz	r0, 8019b12 <__lshift+0x3e>
 8019afe:	4602      	mov	r2, r0
 8019b00:	4b28      	ldr	r3, [pc, #160]	@ (8019ba4 <__lshift+0xd0>)
 8019b02:	4829      	ldr	r0, [pc, #164]	@ (8019ba8 <__lshift+0xd4>)
 8019b04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8019b08:	f001 fc7e 	bl	801b408 <__assert_func>
 8019b0c:	3101      	adds	r1, #1
 8019b0e:	005b      	lsls	r3, r3, #1
 8019b10:	e7ee      	b.n	8019af0 <__lshift+0x1c>
 8019b12:	2300      	movs	r3, #0
 8019b14:	f100 0114 	add.w	r1, r0, #20
 8019b18:	f100 0210 	add.w	r2, r0, #16
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	4553      	cmp	r3, sl
 8019b20:	db33      	blt.n	8019b8a <__lshift+0xb6>
 8019b22:	6920      	ldr	r0, [r4, #16]
 8019b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019b28:	f104 0314 	add.w	r3, r4, #20
 8019b2c:	f019 091f 	ands.w	r9, r9, #31
 8019b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019b34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019b38:	d02b      	beq.n	8019b92 <__lshift+0xbe>
 8019b3a:	f1c9 0e20 	rsb	lr, r9, #32
 8019b3e:	468a      	mov	sl, r1
 8019b40:	2200      	movs	r2, #0
 8019b42:	6818      	ldr	r0, [r3, #0]
 8019b44:	fa00 f009 	lsl.w	r0, r0, r9
 8019b48:	4310      	orrs	r0, r2
 8019b4a:	f84a 0b04 	str.w	r0, [sl], #4
 8019b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b52:	459c      	cmp	ip, r3
 8019b54:	fa22 f20e 	lsr.w	r2, r2, lr
 8019b58:	d8f3      	bhi.n	8019b42 <__lshift+0x6e>
 8019b5a:	ebac 0304 	sub.w	r3, ip, r4
 8019b5e:	3b15      	subs	r3, #21
 8019b60:	f023 0303 	bic.w	r3, r3, #3
 8019b64:	3304      	adds	r3, #4
 8019b66:	f104 0015 	add.w	r0, r4, #21
 8019b6a:	4584      	cmp	ip, r0
 8019b6c:	bf38      	it	cc
 8019b6e:	2304      	movcc	r3, #4
 8019b70:	50ca      	str	r2, [r1, r3]
 8019b72:	b10a      	cbz	r2, 8019b78 <__lshift+0xa4>
 8019b74:	f108 0602 	add.w	r6, r8, #2
 8019b78:	3e01      	subs	r6, #1
 8019b7a:	4638      	mov	r0, r7
 8019b7c:	612e      	str	r6, [r5, #16]
 8019b7e:	4621      	mov	r1, r4
 8019b80:	f7ff fd90 	bl	80196a4 <_Bfree>
 8019b84:	4628      	mov	r0, r5
 8019b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8019b8e:	3301      	adds	r3, #1
 8019b90:	e7c5      	b.n	8019b1e <__lshift+0x4a>
 8019b92:	3904      	subs	r1, #4
 8019b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b98:	f841 2f04 	str.w	r2, [r1, #4]!
 8019b9c:	459c      	cmp	ip, r3
 8019b9e:	d8f9      	bhi.n	8019b94 <__lshift+0xc0>
 8019ba0:	e7ea      	b.n	8019b78 <__lshift+0xa4>
 8019ba2:	bf00      	nop
 8019ba4:	0801c3b5 	.word	0x0801c3b5
 8019ba8:	0801c3c6 	.word	0x0801c3c6

08019bac <__mcmp>:
 8019bac:	690a      	ldr	r2, [r1, #16]
 8019bae:	4603      	mov	r3, r0
 8019bb0:	6900      	ldr	r0, [r0, #16]
 8019bb2:	1a80      	subs	r0, r0, r2
 8019bb4:	b530      	push	{r4, r5, lr}
 8019bb6:	d10e      	bne.n	8019bd6 <__mcmp+0x2a>
 8019bb8:	3314      	adds	r3, #20
 8019bba:	3114      	adds	r1, #20
 8019bbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019bc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019bc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019bc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019bcc:	4295      	cmp	r5, r2
 8019bce:	d003      	beq.n	8019bd8 <__mcmp+0x2c>
 8019bd0:	d205      	bcs.n	8019bde <__mcmp+0x32>
 8019bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8019bd6:	bd30      	pop	{r4, r5, pc}
 8019bd8:	42a3      	cmp	r3, r4
 8019bda:	d3f3      	bcc.n	8019bc4 <__mcmp+0x18>
 8019bdc:	e7fb      	b.n	8019bd6 <__mcmp+0x2a>
 8019bde:	2001      	movs	r0, #1
 8019be0:	e7f9      	b.n	8019bd6 <__mcmp+0x2a>
	...

08019be4 <__mdiff>:
 8019be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019be8:	4689      	mov	r9, r1
 8019bea:	4606      	mov	r6, r0
 8019bec:	4611      	mov	r1, r2
 8019bee:	4648      	mov	r0, r9
 8019bf0:	4614      	mov	r4, r2
 8019bf2:	f7ff ffdb 	bl	8019bac <__mcmp>
 8019bf6:	1e05      	subs	r5, r0, #0
 8019bf8:	d112      	bne.n	8019c20 <__mdiff+0x3c>
 8019bfa:	4629      	mov	r1, r5
 8019bfc:	4630      	mov	r0, r6
 8019bfe:	f7ff fd11 	bl	8019624 <_Balloc>
 8019c02:	4602      	mov	r2, r0
 8019c04:	b928      	cbnz	r0, 8019c12 <__mdiff+0x2e>
 8019c06:	4b3f      	ldr	r3, [pc, #252]	@ (8019d04 <__mdiff+0x120>)
 8019c08:	f240 2137 	movw	r1, #567	@ 0x237
 8019c0c:	483e      	ldr	r0, [pc, #248]	@ (8019d08 <__mdiff+0x124>)
 8019c0e:	f001 fbfb 	bl	801b408 <__assert_func>
 8019c12:	2301      	movs	r3, #1
 8019c14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019c18:	4610      	mov	r0, r2
 8019c1a:	b003      	add	sp, #12
 8019c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c20:	bfbc      	itt	lt
 8019c22:	464b      	movlt	r3, r9
 8019c24:	46a1      	movlt	r9, r4
 8019c26:	4630      	mov	r0, r6
 8019c28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019c2c:	bfba      	itte	lt
 8019c2e:	461c      	movlt	r4, r3
 8019c30:	2501      	movlt	r5, #1
 8019c32:	2500      	movge	r5, #0
 8019c34:	f7ff fcf6 	bl	8019624 <_Balloc>
 8019c38:	4602      	mov	r2, r0
 8019c3a:	b918      	cbnz	r0, 8019c44 <__mdiff+0x60>
 8019c3c:	4b31      	ldr	r3, [pc, #196]	@ (8019d04 <__mdiff+0x120>)
 8019c3e:	f240 2145 	movw	r1, #581	@ 0x245
 8019c42:	e7e3      	b.n	8019c0c <__mdiff+0x28>
 8019c44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019c48:	6926      	ldr	r6, [r4, #16]
 8019c4a:	60c5      	str	r5, [r0, #12]
 8019c4c:	f109 0310 	add.w	r3, r9, #16
 8019c50:	f109 0514 	add.w	r5, r9, #20
 8019c54:	f104 0e14 	add.w	lr, r4, #20
 8019c58:	f100 0b14 	add.w	fp, r0, #20
 8019c5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019c60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019c64:	9301      	str	r3, [sp, #4]
 8019c66:	46d9      	mov	r9, fp
 8019c68:	f04f 0c00 	mov.w	ip, #0
 8019c6c:	9b01      	ldr	r3, [sp, #4]
 8019c6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019c72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8019c76:	9301      	str	r3, [sp, #4]
 8019c78:	fa1f f38a 	uxth.w	r3, sl
 8019c7c:	4619      	mov	r1, r3
 8019c7e:	b283      	uxth	r3, r0
 8019c80:	1acb      	subs	r3, r1, r3
 8019c82:	0c00      	lsrs	r0, r0, #16
 8019c84:	4463      	add	r3, ip
 8019c86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8019c8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8019c8e:	b29b      	uxth	r3, r3
 8019c90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019c94:	4576      	cmp	r6, lr
 8019c96:	f849 3b04 	str.w	r3, [r9], #4
 8019c9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019c9e:	d8e5      	bhi.n	8019c6c <__mdiff+0x88>
 8019ca0:	1b33      	subs	r3, r6, r4
 8019ca2:	3b15      	subs	r3, #21
 8019ca4:	f023 0303 	bic.w	r3, r3, #3
 8019ca8:	3415      	adds	r4, #21
 8019caa:	3304      	adds	r3, #4
 8019cac:	42a6      	cmp	r6, r4
 8019cae:	bf38      	it	cc
 8019cb0:	2304      	movcc	r3, #4
 8019cb2:	441d      	add	r5, r3
 8019cb4:	445b      	add	r3, fp
 8019cb6:	461e      	mov	r6, r3
 8019cb8:	462c      	mov	r4, r5
 8019cba:	4544      	cmp	r4, r8
 8019cbc:	d30e      	bcc.n	8019cdc <__mdiff+0xf8>
 8019cbe:	f108 0103 	add.w	r1, r8, #3
 8019cc2:	1b49      	subs	r1, r1, r5
 8019cc4:	f021 0103 	bic.w	r1, r1, #3
 8019cc8:	3d03      	subs	r5, #3
 8019cca:	45a8      	cmp	r8, r5
 8019ccc:	bf38      	it	cc
 8019cce:	2100      	movcc	r1, #0
 8019cd0:	440b      	add	r3, r1
 8019cd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019cd6:	b191      	cbz	r1, 8019cfe <__mdiff+0x11a>
 8019cd8:	6117      	str	r7, [r2, #16]
 8019cda:	e79d      	b.n	8019c18 <__mdiff+0x34>
 8019cdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8019ce0:	46e6      	mov	lr, ip
 8019ce2:	0c08      	lsrs	r0, r1, #16
 8019ce4:	fa1c fc81 	uxtah	ip, ip, r1
 8019ce8:	4471      	add	r1, lr
 8019cea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8019cee:	b289      	uxth	r1, r1
 8019cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019cf4:	f846 1b04 	str.w	r1, [r6], #4
 8019cf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019cfc:	e7dd      	b.n	8019cba <__mdiff+0xd6>
 8019cfe:	3f01      	subs	r7, #1
 8019d00:	e7e7      	b.n	8019cd2 <__mdiff+0xee>
 8019d02:	bf00      	nop
 8019d04:	0801c3b5 	.word	0x0801c3b5
 8019d08:	0801c3c6 	.word	0x0801c3c6

08019d0c <__ulp>:
 8019d0c:	b082      	sub	sp, #8
 8019d0e:	ed8d 0b00 	vstr	d0, [sp]
 8019d12:	9a01      	ldr	r2, [sp, #4]
 8019d14:	4b0f      	ldr	r3, [pc, #60]	@ (8019d54 <__ulp+0x48>)
 8019d16:	4013      	ands	r3, r2
 8019d18:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	dc08      	bgt.n	8019d32 <__ulp+0x26>
 8019d20:	425b      	negs	r3, r3
 8019d22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8019d26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019d2a:	da04      	bge.n	8019d36 <__ulp+0x2a>
 8019d2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8019d30:	4113      	asrs	r3, r2
 8019d32:	2200      	movs	r2, #0
 8019d34:	e008      	b.n	8019d48 <__ulp+0x3c>
 8019d36:	f1a2 0314 	sub.w	r3, r2, #20
 8019d3a:	2b1e      	cmp	r3, #30
 8019d3c:	bfda      	itte	le
 8019d3e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8019d42:	40da      	lsrle	r2, r3
 8019d44:	2201      	movgt	r2, #1
 8019d46:	2300      	movs	r3, #0
 8019d48:	4619      	mov	r1, r3
 8019d4a:	4610      	mov	r0, r2
 8019d4c:	ec41 0b10 	vmov	d0, r0, r1
 8019d50:	b002      	add	sp, #8
 8019d52:	4770      	bx	lr
 8019d54:	7ff00000 	.word	0x7ff00000

08019d58 <__b2d>:
 8019d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d5c:	6906      	ldr	r6, [r0, #16]
 8019d5e:	f100 0814 	add.w	r8, r0, #20
 8019d62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019d66:	1f37      	subs	r7, r6, #4
 8019d68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019d6c:	4610      	mov	r0, r2
 8019d6e:	f7ff fd4b 	bl	8019808 <__hi0bits>
 8019d72:	f1c0 0320 	rsb	r3, r0, #32
 8019d76:	280a      	cmp	r0, #10
 8019d78:	600b      	str	r3, [r1, #0]
 8019d7a:	491b      	ldr	r1, [pc, #108]	@ (8019de8 <__b2d+0x90>)
 8019d7c:	dc15      	bgt.n	8019daa <__b2d+0x52>
 8019d7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8019d82:	fa22 f30c 	lsr.w	r3, r2, ip
 8019d86:	45b8      	cmp	r8, r7
 8019d88:	ea43 0501 	orr.w	r5, r3, r1
 8019d8c:	bf34      	ite	cc
 8019d8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019d92:	2300      	movcs	r3, #0
 8019d94:	3015      	adds	r0, #21
 8019d96:	fa02 f000 	lsl.w	r0, r2, r0
 8019d9a:	fa23 f30c 	lsr.w	r3, r3, ip
 8019d9e:	4303      	orrs	r3, r0
 8019da0:	461c      	mov	r4, r3
 8019da2:	ec45 4b10 	vmov	d0, r4, r5
 8019da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019daa:	45b8      	cmp	r8, r7
 8019dac:	bf3a      	itte	cc
 8019dae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019db2:	f1a6 0708 	subcc.w	r7, r6, #8
 8019db6:	2300      	movcs	r3, #0
 8019db8:	380b      	subs	r0, #11
 8019dba:	d012      	beq.n	8019de2 <__b2d+0x8a>
 8019dbc:	f1c0 0120 	rsb	r1, r0, #32
 8019dc0:	fa23 f401 	lsr.w	r4, r3, r1
 8019dc4:	4082      	lsls	r2, r0
 8019dc6:	4322      	orrs	r2, r4
 8019dc8:	4547      	cmp	r7, r8
 8019dca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8019dce:	bf8c      	ite	hi
 8019dd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019dd4:	2200      	movls	r2, #0
 8019dd6:	4083      	lsls	r3, r0
 8019dd8:	40ca      	lsrs	r2, r1
 8019dda:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8019dde:	4313      	orrs	r3, r2
 8019de0:	e7de      	b.n	8019da0 <__b2d+0x48>
 8019de2:	ea42 0501 	orr.w	r5, r2, r1
 8019de6:	e7db      	b.n	8019da0 <__b2d+0x48>
 8019de8:	3ff00000 	.word	0x3ff00000

08019dec <__d2b>:
 8019dec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019df0:	460f      	mov	r7, r1
 8019df2:	2101      	movs	r1, #1
 8019df4:	ec59 8b10 	vmov	r8, r9, d0
 8019df8:	4616      	mov	r6, r2
 8019dfa:	f7ff fc13 	bl	8019624 <_Balloc>
 8019dfe:	4604      	mov	r4, r0
 8019e00:	b930      	cbnz	r0, 8019e10 <__d2b+0x24>
 8019e02:	4602      	mov	r2, r0
 8019e04:	4b23      	ldr	r3, [pc, #140]	@ (8019e94 <__d2b+0xa8>)
 8019e06:	4824      	ldr	r0, [pc, #144]	@ (8019e98 <__d2b+0xac>)
 8019e08:	f240 310f 	movw	r1, #783	@ 0x30f
 8019e0c:	f001 fafc 	bl	801b408 <__assert_func>
 8019e10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019e14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019e18:	b10d      	cbz	r5, 8019e1e <__d2b+0x32>
 8019e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019e1e:	9301      	str	r3, [sp, #4]
 8019e20:	f1b8 0300 	subs.w	r3, r8, #0
 8019e24:	d023      	beq.n	8019e6e <__d2b+0x82>
 8019e26:	4668      	mov	r0, sp
 8019e28:	9300      	str	r3, [sp, #0]
 8019e2a:	f7ff fd0c 	bl	8019846 <__lo0bits>
 8019e2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019e32:	b1d0      	cbz	r0, 8019e6a <__d2b+0x7e>
 8019e34:	f1c0 0320 	rsb	r3, r0, #32
 8019e38:	fa02 f303 	lsl.w	r3, r2, r3
 8019e3c:	430b      	orrs	r3, r1
 8019e3e:	40c2      	lsrs	r2, r0
 8019e40:	6163      	str	r3, [r4, #20]
 8019e42:	9201      	str	r2, [sp, #4]
 8019e44:	9b01      	ldr	r3, [sp, #4]
 8019e46:	61a3      	str	r3, [r4, #24]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	bf0c      	ite	eq
 8019e4c:	2201      	moveq	r2, #1
 8019e4e:	2202      	movne	r2, #2
 8019e50:	6122      	str	r2, [r4, #16]
 8019e52:	b1a5      	cbz	r5, 8019e7e <__d2b+0x92>
 8019e54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019e58:	4405      	add	r5, r0
 8019e5a:	603d      	str	r5, [r7, #0]
 8019e5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019e60:	6030      	str	r0, [r6, #0]
 8019e62:	4620      	mov	r0, r4
 8019e64:	b003      	add	sp, #12
 8019e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e6a:	6161      	str	r1, [r4, #20]
 8019e6c:	e7ea      	b.n	8019e44 <__d2b+0x58>
 8019e6e:	a801      	add	r0, sp, #4
 8019e70:	f7ff fce9 	bl	8019846 <__lo0bits>
 8019e74:	9b01      	ldr	r3, [sp, #4]
 8019e76:	6163      	str	r3, [r4, #20]
 8019e78:	3020      	adds	r0, #32
 8019e7a:	2201      	movs	r2, #1
 8019e7c:	e7e8      	b.n	8019e50 <__d2b+0x64>
 8019e7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019e82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019e86:	6038      	str	r0, [r7, #0]
 8019e88:	6918      	ldr	r0, [r3, #16]
 8019e8a:	f7ff fcbd 	bl	8019808 <__hi0bits>
 8019e8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019e92:	e7e5      	b.n	8019e60 <__d2b+0x74>
 8019e94:	0801c3b5 	.word	0x0801c3b5
 8019e98:	0801c3c6 	.word	0x0801c3c6

08019e9c <__ratio>:
 8019e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ea0:	4688      	mov	r8, r1
 8019ea2:	4669      	mov	r1, sp
 8019ea4:	4681      	mov	r9, r0
 8019ea6:	f7ff ff57 	bl	8019d58 <__b2d>
 8019eaa:	a901      	add	r1, sp, #4
 8019eac:	4640      	mov	r0, r8
 8019eae:	ec55 4b10 	vmov	r4, r5, d0
 8019eb2:	f7ff ff51 	bl	8019d58 <__b2d>
 8019eb6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019eba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8019ebe:	1ad2      	subs	r2, r2, r3
 8019ec0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8019ec4:	1a5b      	subs	r3, r3, r1
 8019ec6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8019eca:	ec57 6b10 	vmov	r6, r7, d0
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	bfd6      	itet	le
 8019ed2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019ed6:	462a      	movgt	r2, r5
 8019ed8:	463a      	movle	r2, r7
 8019eda:	46ab      	mov	fp, r5
 8019edc:	46a2      	mov	sl, r4
 8019ede:	bfce      	itee	gt
 8019ee0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8019ee4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019ee8:	ee00 3a90 	vmovle	s1, r3
 8019eec:	ec4b ab17 	vmov	d7, sl, fp
 8019ef0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019ef4:	b003      	add	sp, #12
 8019ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019efa <__copybits>:
 8019efa:	3901      	subs	r1, #1
 8019efc:	b570      	push	{r4, r5, r6, lr}
 8019efe:	1149      	asrs	r1, r1, #5
 8019f00:	6914      	ldr	r4, [r2, #16]
 8019f02:	3101      	adds	r1, #1
 8019f04:	f102 0314 	add.w	r3, r2, #20
 8019f08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019f0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019f10:	1f05      	subs	r5, r0, #4
 8019f12:	42a3      	cmp	r3, r4
 8019f14:	d30c      	bcc.n	8019f30 <__copybits+0x36>
 8019f16:	1aa3      	subs	r3, r4, r2
 8019f18:	3b11      	subs	r3, #17
 8019f1a:	f023 0303 	bic.w	r3, r3, #3
 8019f1e:	3211      	adds	r2, #17
 8019f20:	42a2      	cmp	r2, r4
 8019f22:	bf88      	it	hi
 8019f24:	2300      	movhi	r3, #0
 8019f26:	4418      	add	r0, r3
 8019f28:	2300      	movs	r3, #0
 8019f2a:	4288      	cmp	r0, r1
 8019f2c:	d305      	bcc.n	8019f3a <__copybits+0x40>
 8019f2e:	bd70      	pop	{r4, r5, r6, pc}
 8019f30:	f853 6b04 	ldr.w	r6, [r3], #4
 8019f34:	f845 6f04 	str.w	r6, [r5, #4]!
 8019f38:	e7eb      	b.n	8019f12 <__copybits+0x18>
 8019f3a:	f840 3b04 	str.w	r3, [r0], #4
 8019f3e:	e7f4      	b.n	8019f2a <__copybits+0x30>

08019f40 <__any_on>:
 8019f40:	f100 0214 	add.w	r2, r0, #20
 8019f44:	6900      	ldr	r0, [r0, #16]
 8019f46:	114b      	asrs	r3, r1, #5
 8019f48:	4298      	cmp	r0, r3
 8019f4a:	b510      	push	{r4, lr}
 8019f4c:	db11      	blt.n	8019f72 <__any_on+0x32>
 8019f4e:	dd0a      	ble.n	8019f66 <__any_on+0x26>
 8019f50:	f011 011f 	ands.w	r1, r1, #31
 8019f54:	d007      	beq.n	8019f66 <__any_on+0x26>
 8019f56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019f5a:	fa24 f001 	lsr.w	r0, r4, r1
 8019f5e:	fa00 f101 	lsl.w	r1, r0, r1
 8019f62:	428c      	cmp	r4, r1
 8019f64:	d10b      	bne.n	8019f7e <__any_on+0x3e>
 8019f66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019f6a:	4293      	cmp	r3, r2
 8019f6c:	d803      	bhi.n	8019f76 <__any_on+0x36>
 8019f6e:	2000      	movs	r0, #0
 8019f70:	bd10      	pop	{r4, pc}
 8019f72:	4603      	mov	r3, r0
 8019f74:	e7f7      	b.n	8019f66 <__any_on+0x26>
 8019f76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019f7a:	2900      	cmp	r1, #0
 8019f7c:	d0f5      	beq.n	8019f6a <__any_on+0x2a>
 8019f7e:	2001      	movs	r0, #1
 8019f80:	e7f6      	b.n	8019f70 <__any_on+0x30>

08019f82 <sulp>:
 8019f82:	b570      	push	{r4, r5, r6, lr}
 8019f84:	4604      	mov	r4, r0
 8019f86:	460d      	mov	r5, r1
 8019f88:	4616      	mov	r6, r2
 8019f8a:	ec45 4b10 	vmov	d0, r4, r5
 8019f8e:	f7ff febd 	bl	8019d0c <__ulp>
 8019f92:	b17e      	cbz	r6, 8019fb4 <sulp+0x32>
 8019f94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019f98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	dd09      	ble.n	8019fb4 <sulp+0x32>
 8019fa0:	051b      	lsls	r3, r3, #20
 8019fa2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8019fa6:	2000      	movs	r0, #0
 8019fa8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8019fac:	ec41 0b17 	vmov	d7, r0, r1
 8019fb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019fb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08019fb8 <_strtod_l>:
 8019fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fbc:	ed2d 8b0a 	vpush	{d8-d12}
 8019fc0:	b097      	sub	sp, #92	@ 0x5c
 8019fc2:	4688      	mov	r8, r1
 8019fc4:	920e      	str	r2, [sp, #56]	@ 0x38
 8019fc6:	2200      	movs	r2, #0
 8019fc8:	9212      	str	r2, [sp, #72]	@ 0x48
 8019fca:	9005      	str	r0, [sp, #20]
 8019fcc:	f04f 0a00 	mov.w	sl, #0
 8019fd0:	f04f 0b00 	mov.w	fp, #0
 8019fd4:	460a      	mov	r2, r1
 8019fd6:	9211      	str	r2, [sp, #68]	@ 0x44
 8019fd8:	7811      	ldrb	r1, [r2, #0]
 8019fda:	292b      	cmp	r1, #43	@ 0x2b
 8019fdc:	d04c      	beq.n	801a078 <_strtod_l+0xc0>
 8019fde:	d839      	bhi.n	801a054 <_strtod_l+0x9c>
 8019fe0:	290d      	cmp	r1, #13
 8019fe2:	d833      	bhi.n	801a04c <_strtod_l+0x94>
 8019fe4:	2908      	cmp	r1, #8
 8019fe6:	d833      	bhi.n	801a050 <_strtod_l+0x98>
 8019fe8:	2900      	cmp	r1, #0
 8019fea:	d03c      	beq.n	801a066 <_strtod_l+0xae>
 8019fec:	2200      	movs	r2, #0
 8019fee:	9208      	str	r2, [sp, #32]
 8019ff0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8019ff2:	782a      	ldrb	r2, [r5, #0]
 8019ff4:	2a30      	cmp	r2, #48	@ 0x30
 8019ff6:	f040 80b5 	bne.w	801a164 <_strtod_l+0x1ac>
 8019ffa:	786a      	ldrb	r2, [r5, #1]
 8019ffc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a000:	2a58      	cmp	r2, #88	@ 0x58
 801a002:	d170      	bne.n	801a0e6 <_strtod_l+0x12e>
 801a004:	9302      	str	r3, [sp, #8]
 801a006:	9b08      	ldr	r3, [sp, #32]
 801a008:	9301      	str	r3, [sp, #4]
 801a00a:	ab12      	add	r3, sp, #72	@ 0x48
 801a00c:	9300      	str	r3, [sp, #0]
 801a00e:	4a8b      	ldr	r2, [pc, #556]	@ (801a23c <_strtod_l+0x284>)
 801a010:	9805      	ldr	r0, [sp, #20]
 801a012:	ab13      	add	r3, sp, #76	@ 0x4c
 801a014:	a911      	add	r1, sp, #68	@ 0x44
 801a016:	f001 fa91 	bl	801b53c <__gethex>
 801a01a:	f010 060f 	ands.w	r6, r0, #15
 801a01e:	4604      	mov	r4, r0
 801a020:	d005      	beq.n	801a02e <_strtod_l+0x76>
 801a022:	2e06      	cmp	r6, #6
 801a024:	d12a      	bne.n	801a07c <_strtod_l+0xc4>
 801a026:	3501      	adds	r5, #1
 801a028:	2300      	movs	r3, #0
 801a02a:	9511      	str	r5, [sp, #68]	@ 0x44
 801a02c:	9308      	str	r3, [sp, #32]
 801a02e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a030:	2b00      	cmp	r3, #0
 801a032:	f040 852f 	bne.w	801aa94 <_strtod_l+0xadc>
 801a036:	9b08      	ldr	r3, [sp, #32]
 801a038:	ec4b ab10 	vmov	d0, sl, fp
 801a03c:	b1cb      	cbz	r3, 801a072 <_strtod_l+0xba>
 801a03e:	eeb1 0b40 	vneg.f64	d0, d0
 801a042:	b017      	add	sp, #92	@ 0x5c
 801a044:	ecbd 8b0a 	vpop	{d8-d12}
 801a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a04c:	2920      	cmp	r1, #32
 801a04e:	d1cd      	bne.n	8019fec <_strtod_l+0x34>
 801a050:	3201      	adds	r2, #1
 801a052:	e7c0      	b.n	8019fd6 <_strtod_l+0x1e>
 801a054:	292d      	cmp	r1, #45	@ 0x2d
 801a056:	d1c9      	bne.n	8019fec <_strtod_l+0x34>
 801a058:	2101      	movs	r1, #1
 801a05a:	9108      	str	r1, [sp, #32]
 801a05c:	1c51      	adds	r1, r2, #1
 801a05e:	9111      	str	r1, [sp, #68]	@ 0x44
 801a060:	7852      	ldrb	r2, [r2, #1]
 801a062:	2a00      	cmp	r2, #0
 801a064:	d1c4      	bne.n	8019ff0 <_strtod_l+0x38>
 801a066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a068:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	f040 850f 	bne.w	801aa90 <_strtod_l+0xad8>
 801a072:	ec4b ab10 	vmov	d0, sl, fp
 801a076:	e7e4      	b.n	801a042 <_strtod_l+0x8a>
 801a078:	2100      	movs	r1, #0
 801a07a:	e7ee      	b.n	801a05a <_strtod_l+0xa2>
 801a07c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a07e:	b13a      	cbz	r2, 801a090 <_strtod_l+0xd8>
 801a080:	2135      	movs	r1, #53	@ 0x35
 801a082:	a814      	add	r0, sp, #80	@ 0x50
 801a084:	f7ff ff39 	bl	8019efa <__copybits>
 801a088:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a08a:	9805      	ldr	r0, [sp, #20]
 801a08c:	f7ff fb0a 	bl	80196a4 <_Bfree>
 801a090:	1e73      	subs	r3, r6, #1
 801a092:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a094:	2b04      	cmp	r3, #4
 801a096:	d806      	bhi.n	801a0a6 <_strtod_l+0xee>
 801a098:	e8df f003 	tbb	[pc, r3]
 801a09c:	201d0314 	.word	0x201d0314
 801a0a0:	14          	.byte	0x14
 801a0a1:	00          	.byte	0x00
 801a0a2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801a0a6:	05e3      	lsls	r3, r4, #23
 801a0a8:	bf48      	it	mi
 801a0aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801a0ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a0b2:	0d1b      	lsrs	r3, r3, #20
 801a0b4:	051b      	lsls	r3, r3, #20
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d1b9      	bne.n	801a02e <_strtod_l+0x76>
 801a0ba:	f7fe fb91 	bl	80187e0 <__errno>
 801a0be:	2322      	movs	r3, #34	@ 0x22
 801a0c0:	6003      	str	r3, [r0, #0]
 801a0c2:	e7b4      	b.n	801a02e <_strtod_l+0x76>
 801a0c4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 801a0c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a0cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801a0d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a0d4:	e7e7      	b.n	801a0a6 <_strtod_l+0xee>
 801a0d6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801a244 <_strtod_l+0x28c>
 801a0da:	e7e4      	b.n	801a0a6 <_strtod_l+0xee>
 801a0dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801a0e0:	f04f 3aff 	mov.w	sl, #4294967295
 801a0e4:	e7df      	b.n	801a0a6 <_strtod_l+0xee>
 801a0e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a0e8:	1c5a      	adds	r2, r3, #1
 801a0ea:	9211      	str	r2, [sp, #68]	@ 0x44
 801a0ec:	785b      	ldrb	r3, [r3, #1]
 801a0ee:	2b30      	cmp	r3, #48	@ 0x30
 801a0f0:	d0f9      	beq.n	801a0e6 <_strtod_l+0x12e>
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d09b      	beq.n	801a02e <_strtod_l+0x76>
 801a0f6:	2301      	movs	r3, #1
 801a0f8:	2600      	movs	r6, #0
 801a0fa:	9307      	str	r3, [sp, #28]
 801a0fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 801a100:	46b1      	mov	r9, r6
 801a102:	4635      	mov	r5, r6
 801a104:	220a      	movs	r2, #10
 801a106:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801a108:	7804      	ldrb	r4, [r0, #0]
 801a10a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801a10e:	b2d9      	uxtb	r1, r3
 801a110:	2909      	cmp	r1, #9
 801a112:	d929      	bls.n	801a168 <_strtod_l+0x1b0>
 801a114:	494a      	ldr	r1, [pc, #296]	@ (801a240 <_strtod_l+0x288>)
 801a116:	2201      	movs	r2, #1
 801a118:	f001 f928 	bl	801b36c <strncmp>
 801a11c:	b378      	cbz	r0, 801a17e <_strtod_l+0x1c6>
 801a11e:	2000      	movs	r0, #0
 801a120:	4622      	mov	r2, r4
 801a122:	462b      	mov	r3, r5
 801a124:	4607      	mov	r7, r0
 801a126:	9006      	str	r0, [sp, #24]
 801a128:	2a65      	cmp	r2, #101	@ 0x65
 801a12a:	d001      	beq.n	801a130 <_strtod_l+0x178>
 801a12c:	2a45      	cmp	r2, #69	@ 0x45
 801a12e:	d117      	bne.n	801a160 <_strtod_l+0x1a8>
 801a130:	b91b      	cbnz	r3, 801a13a <_strtod_l+0x182>
 801a132:	9b07      	ldr	r3, [sp, #28]
 801a134:	4303      	orrs	r3, r0
 801a136:	d096      	beq.n	801a066 <_strtod_l+0xae>
 801a138:	2300      	movs	r3, #0
 801a13a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801a13e:	f108 0201 	add.w	r2, r8, #1
 801a142:	9211      	str	r2, [sp, #68]	@ 0x44
 801a144:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a148:	2a2b      	cmp	r2, #43	@ 0x2b
 801a14a:	d06b      	beq.n	801a224 <_strtod_l+0x26c>
 801a14c:	2a2d      	cmp	r2, #45	@ 0x2d
 801a14e:	d071      	beq.n	801a234 <_strtod_l+0x27c>
 801a150:	f04f 0e00 	mov.w	lr, #0
 801a154:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 801a158:	2c09      	cmp	r4, #9
 801a15a:	d979      	bls.n	801a250 <_strtod_l+0x298>
 801a15c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801a160:	2400      	movs	r4, #0
 801a162:	e094      	b.n	801a28e <_strtod_l+0x2d6>
 801a164:	2300      	movs	r3, #0
 801a166:	e7c7      	b.n	801a0f8 <_strtod_l+0x140>
 801a168:	2d08      	cmp	r5, #8
 801a16a:	f100 0001 	add.w	r0, r0, #1
 801a16e:	bfd4      	ite	le
 801a170:	fb02 3909 	mlale	r9, r2, r9, r3
 801a174:	fb02 3606 	mlagt	r6, r2, r6, r3
 801a178:	3501      	adds	r5, #1
 801a17a:	9011      	str	r0, [sp, #68]	@ 0x44
 801a17c:	e7c3      	b.n	801a106 <_strtod_l+0x14e>
 801a17e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a180:	1c5a      	adds	r2, r3, #1
 801a182:	9211      	str	r2, [sp, #68]	@ 0x44
 801a184:	785a      	ldrb	r2, [r3, #1]
 801a186:	b375      	cbz	r5, 801a1e6 <_strtod_l+0x22e>
 801a188:	4607      	mov	r7, r0
 801a18a:	462b      	mov	r3, r5
 801a18c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801a190:	2909      	cmp	r1, #9
 801a192:	d913      	bls.n	801a1bc <_strtod_l+0x204>
 801a194:	2101      	movs	r1, #1
 801a196:	9106      	str	r1, [sp, #24]
 801a198:	e7c6      	b.n	801a128 <_strtod_l+0x170>
 801a19a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a19c:	1c5a      	adds	r2, r3, #1
 801a19e:	9211      	str	r2, [sp, #68]	@ 0x44
 801a1a0:	785a      	ldrb	r2, [r3, #1]
 801a1a2:	3001      	adds	r0, #1
 801a1a4:	2a30      	cmp	r2, #48	@ 0x30
 801a1a6:	d0f8      	beq.n	801a19a <_strtod_l+0x1e2>
 801a1a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801a1ac:	2b08      	cmp	r3, #8
 801a1ae:	f200 8476 	bhi.w	801aa9e <_strtod_l+0xae6>
 801a1b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a1b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801a1b6:	4607      	mov	r7, r0
 801a1b8:	2000      	movs	r0, #0
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	3a30      	subs	r2, #48	@ 0x30
 801a1be:	f100 0101 	add.w	r1, r0, #1
 801a1c2:	d023      	beq.n	801a20c <_strtod_l+0x254>
 801a1c4:	440f      	add	r7, r1
 801a1c6:	eb00 0c03 	add.w	ip, r0, r3
 801a1ca:	4619      	mov	r1, r3
 801a1cc:	240a      	movs	r4, #10
 801a1ce:	4561      	cmp	r1, ip
 801a1d0:	d10b      	bne.n	801a1ea <_strtod_l+0x232>
 801a1d2:	1c5c      	adds	r4, r3, #1
 801a1d4:	4403      	add	r3, r0
 801a1d6:	2b08      	cmp	r3, #8
 801a1d8:	4404      	add	r4, r0
 801a1da:	dc11      	bgt.n	801a200 <_strtod_l+0x248>
 801a1dc:	230a      	movs	r3, #10
 801a1de:	fb03 2909 	mla	r9, r3, r9, r2
 801a1e2:	2100      	movs	r1, #0
 801a1e4:	e013      	b.n	801a20e <_strtod_l+0x256>
 801a1e6:	4628      	mov	r0, r5
 801a1e8:	e7dc      	b.n	801a1a4 <_strtod_l+0x1ec>
 801a1ea:	2908      	cmp	r1, #8
 801a1ec:	f101 0101 	add.w	r1, r1, #1
 801a1f0:	dc02      	bgt.n	801a1f8 <_strtod_l+0x240>
 801a1f2:	fb04 f909 	mul.w	r9, r4, r9
 801a1f6:	e7ea      	b.n	801a1ce <_strtod_l+0x216>
 801a1f8:	2910      	cmp	r1, #16
 801a1fa:	bfd8      	it	le
 801a1fc:	4366      	mulle	r6, r4
 801a1fe:	e7e6      	b.n	801a1ce <_strtod_l+0x216>
 801a200:	2b0f      	cmp	r3, #15
 801a202:	dcee      	bgt.n	801a1e2 <_strtod_l+0x22a>
 801a204:	230a      	movs	r3, #10
 801a206:	fb03 2606 	mla	r6, r3, r6, r2
 801a20a:	e7ea      	b.n	801a1e2 <_strtod_l+0x22a>
 801a20c:	461c      	mov	r4, r3
 801a20e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a210:	1c5a      	adds	r2, r3, #1
 801a212:	9211      	str	r2, [sp, #68]	@ 0x44
 801a214:	785a      	ldrb	r2, [r3, #1]
 801a216:	4608      	mov	r0, r1
 801a218:	4623      	mov	r3, r4
 801a21a:	e7b7      	b.n	801a18c <_strtod_l+0x1d4>
 801a21c:	2301      	movs	r3, #1
 801a21e:	2700      	movs	r7, #0
 801a220:	9306      	str	r3, [sp, #24]
 801a222:	e786      	b.n	801a132 <_strtod_l+0x17a>
 801a224:	f04f 0e00 	mov.w	lr, #0
 801a228:	f108 0202 	add.w	r2, r8, #2
 801a22c:	9211      	str	r2, [sp, #68]	@ 0x44
 801a22e:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a232:	e78f      	b.n	801a154 <_strtod_l+0x19c>
 801a234:	f04f 0e01 	mov.w	lr, #1
 801a238:	e7f6      	b.n	801a228 <_strtod_l+0x270>
 801a23a:	bf00      	nop
 801a23c:	0801c538 	.word	0x0801c538
 801a240:	0801c520 	.word	0x0801c520
 801a244:	7ff00000 	.word	0x7ff00000
 801a248:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a24a:	1c54      	adds	r4, r2, #1
 801a24c:	9411      	str	r4, [sp, #68]	@ 0x44
 801a24e:	7852      	ldrb	r2, [r2, #1]
 801a250:	2a30      	cmp	r2, #48	@ 0x30
 801a252:	d0f9      	beq.n	801a248 <_strtod_l+0x290>
 801a254:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 801a258:	2c08      	cmp	r4, #8
 801a25a:	d881      	bhi.n	801a160 <_strtod_l+0x1a8>
 801a25c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 801a260:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a262:	9209      	str	r2, [sp, #36]	@ 0x24
 801a264:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a266:	1c51      	adds	r1, r2, #1
 801a268:	9111      	str	r1, [sp, #68]	@ 0x44
 801a26a:	7852      	ldrb	r2, [r2, #1]
 801a26c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 801a270:	2c09      	cmp	r4, #9
 801a272:	d938      	bls.n	801a2e6 <_strtod_l+0x32e>
 801a274:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a276:	1b0c      	subs	r4, r1, r4
 801a278:	2c08      	cmp	r4, #8
 801a27a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801a27e:	dc02      	bgt.n	801a286 <_strtod_l+0x2ce>
 801a280:	4564      	cmp	r4, ip
 801a282:	bfa8      	it	ge
 801a284:	4664      	movge	r4, ip
 801a286:	f1be 0f00 	cmp.w	lr, #0
 801a28a:	d000      	beq.n	801a28e <_strtod_l+0x2d6>
 801a28c:	4264      	negs	r4, r4
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d14e      	bne.n	801a330 <_strtod_l+0x378>
 801a292:	9b07      	ldr	r3, [sp, #28]
 801a294:	4318      	orrs	r0, r3
 801a296:	f47f aeca 	bne.w	801a02e <_strtod_l+0x76>
 801a29a:	9b06      	ldr	r3, [sp, #24]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	f47f aee2 	bne.w	801a066 <_strtod_l+0xae>
 801a2a2:	2a69      	cmp	r2, #105	@ 0x69
 801a2a4:	d027      	beq.n	801a2f6 <_strtod_l+0x33e>
 801a2a6:	dc24      	bgt.n	801a2f2 <_strtod_l+0x33a>
 801a2a8:	2a49      	cmp	r2, #73	@ 0x49
 801a2aa:	d024      	beq.n	801a2f6 <_strtod_l+0x33e>
 801a2ac:	2a4e      	cmp	r2, #78	@ 0x4e
 801a2ae:	f47f aeda 	bne.w	801a066 <_strtod_l+0xae>
 801a2b2:	4997      	ldr	r1, [pc, #604]	@ (801a510 <_strtod_l+0x558>)
 801a2b4:	a811      	add	r0, sp, #68	@ 0x44
 801a2b6:	f001 fb63 	bl	801b980 <__match>
 801a2ba:	2800      	cmp	r0, #0
 801a2bc:	f43f aed3 	beq.w	801a066 <_strtod_l+0xae>
 801a2c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a2c2:	781b      	ldrb	r3, [r3, #0]
 801a2c4:	2b28      	cmp	r3, #40	@ 0x28
 801a2c6:	d12d      	bne.n	801a324 <_strtod_l+0x36c>
 801a2c8:	4992      	ldr	r1, [pc, #584]	@ (801a514 <_strtod_l+0x55c>)
 801a2ca:	aa14      	add	r2, sp, #80	@ 0x50
 801a2cc:	a811      	add	r0, sp, #68	@ 0x44
 801a2ce:	f001 fb6b 	bl	801b9a8 <__hexnan>
 801a2d2:	2805      	cmp	r0, #5
 801a2d4:	d126      	bne.n	801a324 <_strtod_l+0x36c>
 801a2d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a2d8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801a2dc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801a2e0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801a2e4:	e6a3      	b.n	801a02e <_strtod_l+0x76>
 801a2e6:	240a      	movs	r4, #10
 801a2e8:	fb04 2c0c 	mla	ip, r4, ip, r2
 801a2ec:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 801a2f0:	e7b8      	b.n	801a264 <_strtod_l+0x2ac>
 801a2f2:	2a6e      	cmp	r2, #110	@ 0x6e
 801a2f4:	e7db      	b.n	801a2ae <_strtod_l+0x2f6>
 801a2f6:	4988      	ldr	r1, [pc, #544]	@ (801a518 <_strtod_l+0x560>)
 801a2f8:	a811      	add	r0, sp, #68	@ 0x44
 801a2fa:	f001 fb41 	bl	801b980 <__match>
 801a2fe:	2800      	cmp	r0, #0
 801a300:	f43f aeb1 	beq.w	801a066 <_strtod_l+0xae>
 801a304:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a306:	4985      	ldr	r1, [pc, #532]	@ (801a51c <_strtod_l+0x564>)
 801a308:	3b01      	subs	r3, #1
 801a30a:	a811      	add	r0, sp, #68	@ 0x44
 801a30c:	9311      	str	r3, [sp, #68]	@ 0x44
 801a30e:	f001 fb37 	bl	801b980 <__match>
 801a312:	b910      	cbnz	r0, 801a31a <_strtod_l+0x362>
 801a314:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a316:	3301      	adds	r3, #1
 801a318:	9311      	str	r3, [sp, #68]	@ 0x44
 801a31a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 801a530 <_strtod_l+0x578>
 801a31e:	f04f 0a00 	mov.w	sl, #0
 801a322:	e684      	b.n	801a02e <_strtod_l+0x76>
 801a324:	487e      	ldr	r0, [pc, #504]	@ (801a520 <_strtod_l+0x568>)
 801a326:	f001 f867 	bl	801b3f8 <nan>
 801a32a:	ec5b ab10 	vmov	sl, fp, d0
 801a32e:	e67e      	b.n	801a02e <_strtod_l+0x76>
 801a330:	ee07 9a90 	vmov	s15, r9
 801a334:	1be2      	subs	r2, r4, r7
 801a336:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a33a:	2d00      	cmp	r5, #0
 801a33c:	bf08      	it	eq
 801a33e:	461d      	moveq	r5, r3
 801a340:	2b10      	cmp	r3, #16
 801a342:	9209      	str	r2, [sp, #36]	@ 0x24
 801a344:	461a      	mov	r2, r3
 801a346:	bfa8      	it	ge
 801a348:	2210      	movge	r2, #16
 801a34a:	2b09      	cmp	r3, #9
 801a34c:	ec5b ab17 	vmov	sl, fp, d7
 801a350:	dc15      	bgt.n	801a37e <_strtod_l+0x3c6>
 801a352:	1be1      	subs	r1, r4, r7
 801a354:	2900      	cmp	r1, #0
 801a356:	f43f ae6a 	beq.w	801a02e <_strtod_l+0x76>
 801a35a:	eba4 0107 	sub.w	r1, r4, r7
 801a35e:	dd72      	ble.n	801a446 <_strtod_l+0x48e>
 801a360:	2916      	cmp	r1, #22
 801a362:	dc59      	bgt.n	801a418 <_strtod_l+0x460>
 801a364:	4b6f      	ldr	r3, [pc, #444]	@ (801a524 <_strtod_l+0x56c>)
 801a366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a368:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a36c:	ed93 7b00 	vldr	d7, [r3]
 801a370:	ec4b ab16 	vmov	d6, sl, fp
 801a374:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a378:	ec5b ab17 	vmov	sl, fp, d7
 801a37c:	e657      	b.n	801a02e <_strtod_l+0x76>
 801a37e:	4969      	ldr	r1, [pc, #420]	@ (801a524 <_strtod_l+0x56c>)
 801a380:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a384:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 801a388:	ee06 6a90 	vmov	s13, r6
 801a38c:	2b0f      	cmp	r3, #15
 801a38e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801a392:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a396:	ec5b ab16 	vmov	sl, fp, d6
 801a39a:	ddda      	ble.n	801a352 <_strtod_l+0x39a>
 801a39c:	1a9a      	subs	r2, r3, r2
 801a39e:	1be1      	subs	r1, r4, r7
 801a3a0:	440a      	add	r2, r1
 801a3a2:	2a00      	cmp	r2, #0
 801a3a4:	f340 8094 	ble.w	801a4d0 <_strtod_l+0x518>
 801a3a8:	f012 000f 	ands.w	r0, r2, #15
 801a3ac:	d00a      	beq.n	801a3c4 <_strtod_l+0x40c>
 801a3ae:	495d      	ldr	r1, [pc, #372]	@ (801a524 <_strtod_l+0x56c>)
 801a3b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a3b4:	ed91 7b00 	vldr	d7, [r1]
 801a3b8:	ec4b ab16 	vmov	d6, sl, fp
 801a3bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a3c0:	ec5b ab17 	vmov	sl, fp, d7
 801a3c4:	f032 020f 	bics.w	r2, r2, #15
 801a3c8:	d073      	beq.n	801a4b2 <_strtod_l+0x4fa>
 801a3ca:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801a3ce:	dd47      	ble.n	801a460 <_strtod_l+0x4a8>
 801a3d0:	2400      	movs	r4, #0
 801a3d2:	4625      	mov	r5, r4
 801a3d4:	9407      	str	r4, [sp, #28]
 801a3d6:	4626      	mov	r6, r4
 801a3d8:	9a05      	ldr	r2, [sp, #20]
 801a3da:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801a530 <_strtod_l+0x578>
 801a3de:	2322      	movs	r3, #34	@ 0x22
 801a3e0:	6013      	str	r3, [r2, #0]
 801a3e2:	f04f 0a00 	mov.w	sl, #0
 801a3e6:	9b07      	ldr	r3, [sp, #28]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	f43f ae20 	beq.w	801a02e <_strtod_l+0x76>
 801a3ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a3f0:	9805      	ldr	r0, [sp, #20]
 801a3f2:	f7ff f957 	bl	80196a4 <_Bfree>
 801a3f6:	9805      	ldr	r0, [sp, #20]
 801a3f8:	4631      	mov	r1, r6
 801a3fa:	f7ff f953 	bl	80196a4 <_Bfree>
 801a3fe:	9805      	ldr	r0, [sp, #20]
 801a400:	4629      	mov	r1, r5
 801a402:	f7ff f94f 	bl	80196a4 <_Bfree>
 801a406:	9907      	ldr	r1, [sp, #28]
 801a408:	9805      	ldr	r0, [sp, #20]
 801a40a:	f7ff f94b 	bl	80196a4 <_Bfree>
 801a40e:	9805      	ldr	r0, [sp, #20]
 801a410:	4621      	mov	r1, r4
 801a412:	f7ff f947 	bl	80196a4 <_Bfree>
 801a416:	e60a      	b.n	801a02e <_strtod_l+0x76>
 801a418:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801a41c:	1be0      	subs	r0, r4, r7
 801a41e:	4281      	cmp	r1, r0
 801a420:	dbbc      	blt.n	801a39c <_strtod_l+0x3e4>
 801a422:	4a40      	ldr	r2, [pc, #256]	@ (801a524 <_strtod_l+0x56c>)
 801a424:	f1c3 030f 	rsb	r3, r3, #15
 801a428:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801a42c:	ed91 7b00 	vldr	d7, [r1]
 801a430:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a432:	ec4b ab16 	vmov	d6, sl, fp
 801a436:	1acb      	subs	r3, r1, r3
 801a438:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a43c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a440:	ed92 6b00 	vldr	d6, [r2]
 801a444:	e796      	b.n	801a374 <_strtod_l+0x3bc>
 801a446:	3116      	adds	r1, #22
 801a448:	dba8      	blt.n	801a39c <_strtod_l+0x3e4>
 801a44a:	4b36      	ldr	r3, [pc, #216]	@ (801a524 <_strtod_l+0x56c>)
 801a44c:	1b3c      	subs	r4, r7, r4
 801a44e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a452:	ed94 7b00 	vldr	d7, [r4]
 801a456:	ec4b ab16 	vmov	d6, sl, fp
 801a45a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a45e:	e78b      	b.n	801a378 <_strtod_l+0x3c0>
 801a460:	2000      	movs	r0, #0
 801a462:	ec4b ab17 	vmov	d7, sl, fp
 801a466:	4e30      	ldr	r6, [pc, #192]	@ (801a528 <_strtod_l+0x570>)
 801a468:	1112      	asrs	r2, r2, #4
 801a46a:	4601      	mov	r1, r0
 801a46c:	2a01      	cmp	r2, #1
 801a46e:	dc23      	bgt.n	801a4b8 <_strtod_l+0x500>
 801a470:	b108      	cbz	r0, 801a476 <_strtod_l+0x4be>
 801a472:	ec5b ab17 	vmov	sl, fp, d7
 801a476:	4a2c      	ldr	r2, [pc, #176]	@ (801a528 <_strtod_l+0x570>)
 801a478:	482c      	ldr	r0, [pc, #176]	@ (801a52c <_strtod_l+0x574>)
 801a47a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a47e:	ed92 7b00 	vldr	d7, [r2]
 801a482:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801a486:	ec4b ab16 	vmov	d6, sl, fp
 801a48a:	4a29      	ldr	r2, [pc, #164]	@ (801a530 <_strtod_l+0x578>)
 801a48c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a490:	ee17 1a90 	vmov	r1, s15
 801a494:	400a      	ands	r2, r1
 801a496:	4282      	cmp	r2, r0
 801a498:	ec5b ab17 	vmov	sl, fp, d7
 801a49c:	d898      	bhi.n	801a3d0 <_strtod_l+0x418>
 801a49e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801a4a2:	4282      	cmp	r2, r0
 801a4a4:	bf86      	itte	hi
 801a4a6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801a534 <_strtod_l+0x57c>
 801a4aa:	f04f 3aff 	movhi.w	sl, #4294967295
 801a4ae:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801a4b2:	2200      	movs	r2, #0
 801a4b4:	9206      	str	r2, [sp, #24]
 801a4b6:	e076      	b.n	801a5a6 <_strtod_l+0x5ee>
 801a4b8:	f012 0f01 	tst.w	r2, #1
 801a4bc:	d004      	beq.n	801a4c8 <_strtod_l+0x510>
 801a4be:	ed96 6b00 	vldr	d6, [r6]
 801a4c2:	2001      	movs	r0, #1
 801a4c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a4c8:	3101      	adds	r1, #1
 801a4ca:	1052      	asrs	r2, r2, #1
 801a4cc:	3608      	adds	r6, #8
 801a4ce:	e7cd      	b.n	801a46c <_strtod_l+0x4b4>
 801a4d0:	d0ef      	beq.n	801a4b2 <_strtod_l+0x4fa>
 801a4d2:	4252      	negs	r2, r2
 801a4d4:	f012 000f 	ands.w	r0, r2, #15
 801a4d8:	d00a      	beq.n	801a4f0 <_strtod_l+0x538>
 801a4da:	4912      	ldr	r1, [pc, #72]	@ (801a524 <_strtod_l+0x56c>)
 801a4dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a4e0:	ed91 7b00 	vldr	d7, [r1]
 801a4e4:	ec4b ab16 	vmov	d6, sl, fp
 801a4e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a4ec:	ec5b ab17 	vmov	sl, fp, d7
 801a4f0:	1112      	asrs	r2, r2, #4
 801a4f2:	d0de      	beq.n	801a4b2 <_strtod_l+0x4fa>
 801a4f4:	2a1f      	cmp	r2, #31
 801a4f6:	dd1f      	ble.n	801a538 <_strtod_l+0x580>
 801a4f8:	2400      	movs	r4, #0
 801a4fa:	4625      	mov	r5, r4
 801a4fc:	9407      	str	r4, [sp, #28]
 801a4fe:	4626      	mov	r6, r4
 801a500:	9a05      	ldr	r2, [sp, #20]
 801a502:	2322      	movs	r3, #34	@ 0x22
 801a504:	f04f 0a00 	mov.w	sl, #0
 801a508:	f04f 0b00 	mov.w	fp, #0
 801a50c:	6013      	str	r3, [r2, #0]
 801a50e:	e76a      	b.n	801a3e6 <_strtod_l+0x42e>
 801a510:	0801c30d 	.word	0x0801c30d
 801a514:	0801c524 	.word	0x0801c524
 801a518:	0801c305 	.word	0x0801c305
 801a51c:	0801c33c 	.word	0x0801c33c
 801a520:	0801c6cd 	.word	0x0801c6cd
 801a524:	0801c458 	.word	0x0801c458
 801a528:	0801c430 	.word	0x0801c430
 801a52c:	7ca00000 	.word	0x7ca00000
 801a530:	7ff00000 	.word	0x7ff00000
 801a534:	7fefffff 	.word	0x7fefffff
 801a538:	f012 0110 	ands.w	r1, r2, #16
 801a53c:	bf18      	it	ne
 801a53e:	216a      	movne	r1, #106	@ 0x6a
 801a540:	9106      	str	r1, [sp, #24]
 801a542:	ec4b ab17 	vmov	d7, sl, fp
 801a546:	49b0      	ldr	r1, [pc, #704]	@ (801a808 <_strtod_l+0x850>)
 801a548:	2000      	movs	r0, #0
 801a54a:	07d6      	lsls	r6, r2, #31
 801a54c:	d504      	bpl.n	801a558 <_strtod_l+0x5a0>
 801a54e:	ed91 6b00 	vldr	d6, [r1]
 801a552:	2001      	movs	r0, #1
 801a554:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a558:	1052      	asrs	r2, r2, #1
 801a55a:	f101 0108 	add.w	r1, r1, #8
 801a55e:	d1f4      	bne.n	801a54a <_strtod_l+0x592>
 801a560:	b108      	cbz	r0, 801a566 <_strtod_l+0x5ae>
 801a562:	ec5b ab17 	vmov	sl, fp, d7
 801a566:	9a06      	ldr	r2, [sp, #24]
 801a568:	b1b2      	cbz	r2, 801a598 <_strtod_l+0x5e0>
 801a56a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801a56e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801a572:	2a00      	cmp	r2, #0
 801a574:	4658      	mov	r0, fp
 801a576:	dd0f      	ble.n	801a598 <_strtod_l+0x5e0>
 801a578:	2a1f      	cmp	r2, #31
 801a57a:	dd55      	ble.n	801a628 <_strtod_l+0x670>
 801a57c:	2a34      	cmp	r2, #52	@ 0x34
 801a57e:	bfde      	ittt	le
 801a580:	f04f 32ff 	movle.w	r2, #4294967295
 801a584:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801a588:	408a      	lslle	r2, r1
 801a58a:	f04f 0a00 	mov.w	sl, #0
 801a58e:	bfcc      	ite	gt
 801a590:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801a594:	ea02 0b00 	andle.w	fp, r2, r0
 801a598:	ec4b ab17 	vmov	d7, sl, fp
 801a59c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5a4:	d0a8      	beq.n	801a4f8 <_strtod_l+0x540>
 801a5a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a5a8:	9805      	ldr	r0, [sp, #20]
 801a5aa:	f8cd 9000 	str.w	r9, [sp]
 801a5ae:	462a      	mov	r2, r5
 801a5b0:	f7ff f8e0 	bl	8019774 <__s2b>
 801a5b4:	9007      	str	r0, [sp, #28]
 801a5b6:	2800      	cmp	r0, #0
 801a5b8:	f43f af0a 	beq.w	801a3d0 <_strtod_l+0x418>
 801a5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5be:	1b3f      	subs	r7, r7, r4
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	bfb4      	ite	lt
 801a5c4:	463b      	movlt	r3, r7
 801a5c6:	2300      	movge	r3, #0
 801a5c8:	930a      	str	r3, [sp, #40]	@ 0x28
 801a5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5cc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 801a7f8 <_strtod_l+0x840>
 801a5d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a5d4:	2400      	movs	r4, #0
 801a5d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801a5d8:	4625      	mov	r5, r4
 801a5da:	9b07      	ldr	r3, [sp, #28]
 801a5dc:	9805      	ldr	r0, [sp, #20]
 801a5de:	6859      	ldr	r1, [r3, #4]
 801a5e0:	f7ff f820 	bl	8019624 <_Balloc>
 801a5e4:	4606      	mov	r6, r0
 801a5e6:	2800      	cmp	r0, #0
 801a5e8:	f43f aef6 	beq.w	801a3d8 <_strtod_l+0x420>
 801a5ec:	9b07      	ldr	r3, [sp, #28]
 801a5ee:	691a      	ldr	r2, [r3, #16]
 801a5f0:	ec4b ab19 	vmov	d9, sl, fp
 801a5f4:	3202      	adds	r2, #2
 801a5f6:	f103 010c 	add.w	r1, r3, #12
 801a5fa:	0092      	lsls	r2, r2, #2
 801a5fc:	300c      	adds	r0, #12
 801a5fe:	f7fe f91c 	bl	801883a <memcpy>
 801a602:	eeb0 0b49 	vmov.f64	d0, d9
 801a606:	9805      	ldr	r0, [sp, #20]
 801a608:	aa14      	add	r2, sp, #80	@ 0x50
 801a60a:	a913      	add	r1, sp, #76	@ 0x4c
 801a60c:	f7ff fbee 	bl	8019dec <__d2b>
 801a610:	9012      	str	r0, [sp, #72]	@ 0x48
 801a612:	2800      	cmp	r0, #0
 801a614:	f43f aee0 	beq.w	801a3d8 <_strtod_l+0x420>
 801a618:	9805      	ldr	r0, [sp, #20]
 801a61a:	2101      	movs	r1, #1
 801a61c:	f7ff f940 	bl	80198a0 <__i2b>
 801a620:	4605      	mov	r5, r0
 801a622:	b940      	cbnz	r0, 801a636 <_strtod_l+0x67e>
 801a624:	2500      	movs	r5, #0
 801a626:	e6d7      	b.n	801a3d8 <_strtod_l+0x420>
 801a628:	f04f 31ff 	mov.w	r1, #4294967295
 801a62c:	fa01 f202 	lsl.w	r2, r1, r2
 801a630:	ea02 0a0a 	and.w	sl, r2, sl
 801a634:	e7b0      	b.n	801a598 <_strtod_l+0x5e0>
 801a636:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 801a638:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a63a:	2f00      	cmp	r7, #0
 801a63c:	bfab      	itete	ge
 801a63e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 801a640:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801a642:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801a646:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801a64a:	bfac      	ite	ge
 801a64c:	eb07 0903 	addge.w	r9, r7, r3
 801a650:	eba3 0807 	sublt.w	r8, r3, r7
 801a654:	9b06      	ldr	r3, [sp, #24]
 801a656:	1aff      	subs	r7, r7, r3
 801a658:	4417      	add	r7, r2
 801a65a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801a65e:	4a6b      	ldr	r2, [pc, #428]	@ (801a80c <_strtod_l+0x854>)
 801a660:	3f01      	subs	r7, #1
 801a662:	4297      	cmp	r7, r2
 801a664:	da51      	bge.n	801a70a <_strtod_l+0x752>
 801a666:	1bd1      	subs	r1, r2, r7
 801a668:	291f      	cmp	r1, #31
 801a66a:	eba3 0301 	sub.w	r3, r3, r1
 801a66e:	f04f 0201 	mov.w	r2, #1
 801a672:	dc3e      	bgt.n	801a6f2 <_strtod_l+0x73a>
 801a674:	408a      	lsls	r2, r1
 801a676:	920c      	str	r2, [sp, #48]	@ 0x30
 801a678:	2200      	movs	r2, #0
 801a67a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a67c:	eb09 0703 	add.w	r7, r9, r3
 801a680:	4498      	add	r8, r3
 801a682:	9b06      	ldr	r3, [sp, #24]
 801a684:	45b9      	cmp	r9, r7
 801a686:	4498      	add	r8, r3
 801a688:	464b      	mov	r3, r9
 801a68a:	bfa8      	it	ge
 801a68c:	463b      	movge	r3, r7
 801a68e:	4543      	cmp	r3, r8
 801a690:	bfa8      	it	ge
 801a692:	4643      	movge	r3, r8
 801a694:	2b00      	cmp	r3, #0
 801a696:	bfc2      	ittt	gt
 801a698:	1aff      	subgt	r7, r7, r3
 801a69a:	eba8 0803 	subgt.w	r8, r8, r3
 801a69e:	eba9 0903 	subgt.w	r9, r9, r3
 801a6a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	dd16      	ble.n	801a6d6 <_strtod_l+0x71e>
 801a6a8:	4629      	mov	r1, r5
 801a6aa:	9805      	ldr	r0, [sp, #20]
 801a6ac:	461a      	mov	r2, r3
 801a6ae:	f7ff f9b7 	bl	8019a20 <__pow5mult>
 801a6b2:	4605      	mov	r5, r0
 801a6b4:	2800      	cmp	r0, #0
 801a6b6:	d0b5      	beq.n	801a624 <_strtod_l+0x66c>
 801a6b8:	4601      	mov	r1, r0
 801a6ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a6bc:	9805      	ldr	r0, [sp, #20]
 801a6be:	f7ff f905 	bl	80198cc <__multiply>
 801a6c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 801a6c4:	2800      	cmp	r0, #0
 801a6c6:	f43f ae87 	beq.w	801a3d8 <_strtod_l+0x420>
 801a6ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a6cc:	9805      	ldr	r0, [sp, #20]
 801a6ce:	f7fe ffe9 	bl	80196a4 <_Bfree>
 801a6d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a6d4:	9312      	str	r3, [sp, #72]	@ 0x48
 801a6d6:	2f00      	cmp	r7, #0
 801a6d8:	dc1b      	bgt.n	801a712 <_strtod_l+0x75a>
 801a6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	dd21      	ble.n	801a724 <_strtod_l+0x76c>
 801a6e0:	4631      	mov	r1, r6
 801a6e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a6e4:	9805      	ldr	r0, [sp, #20]
 801a6e6:	f7ff f99b 	bl	8019a20 <__pow5mult>
 801a6ea:	4606      	mov	r6, r0
 801a6ec:	b9d0      	cbnz	r0, 801a724 <_strtod_l+0x76c>
 801a6ee:	2600      	movs	r6, #0
 801a6f0:	e672      	b.n	801a3d8 <_strtod_l+0x420>
 801a6f2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801a6f6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801a6fa:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801a6fe:	37e2      	adds	r7, #226	@ 0xe2
 801a700:	fa02 f107 	lsl.w	r1, r2, r7
 801a704:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a706:	920c      	str	r2, [sp, #48]	@ 0x30
 801a708:	e7b8      	b.n	801a67c <_strtod_l+0x6c4>
 801a70a:	2200      	movs	r2, #0
 801a70c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a70e:	2201      	movs	r2, #1
 801a710:	e7f9      	b.n	801a706 <_strtod_l+0x74e>
 801a712:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a714:	9805      	ldr	r0, [sp, #20]
 801a716:	463a      	mov	r2, r7
 801a718:	f7ff f9dc 	bl	8019ad4 <__lshift>
 801a71c:	9012      	str	r0, [sp, #72]	@ 0x48
 801a71e:	2800      	cmp	r0, #0
 801a720:	d1db      	bne.n	801a6da <_strtod_l+0x722>
 801a722:	e659      	b.n	801a3d8 <_strtod_l+0x420>
 801a724:	f1b8 0f00 	cmp.w	r8, #0
 801a728:	dd07      	ble.n	801a73a <_strtod_l+0x782>
 801a72a:	4631      	mov	r1, r6
 801a72c:	9805      	ldr	r0, [sp, #20]
 801a72e:	4642      	mov	r2, r8
 801a730:	f7ff f9d0 	bl	8019ad4 <__lshift>
 801a734:	4606      	mov	r6, r0
 801a736:	2800      	cmp	r0, #0
 801a738:	d0d9      	beq.n	801a6ee <_strtod_l+0x736>
 801a73a:	f1b9 0f00 	cmp.w	r9, #0
 801a73e:	dd08      	ble.n	801a752 <_strtod_l+0x79a>
 801a740:	4629      	mov	r1, r5
 801a742:	9805      	ldr	r0, [sp, #20]
 801a744:	464a      	mov	r2, r9
 801a746:	f7ff f9c5 	bl	8019ad4 <__lshift>
 801a74a:	4605      	mov	r5, r0
 801a74c:	2800      	cmp	r0, #0
 801a74e:	f43f ae43 	beq.w	801a3d8 <_strtod_l+0x420>
 801a752:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a754:	9805      	ldr	r0, [sp, #20]
 801a756:	4632      	mov	r2, r6
 801a758:	f7ff fa44 	bl	8019be4 <__mdiff>
 801a75c:	4604      	mov	r4, r0
 801a75e:	2800      	cmp	r0, #0
 801a760:	f43f ae3a 	beq.w	801a3d8 <_strtod_l+0x420>
 801a764:	2300      	movs	r3, #0
 801a766:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801a76a:	60c3      	str	r3, [r0, #12]
 801a76c:	4629      	mov	r1, r5
 801a76e:	f7ff fa1d 	bl	8019bac <__mcmp>
 801a772:	2800      	cmp	r0, #0
 801a774:	da4e      	bge.n	801a814 <_strtod_l+0x85c>
 801a776:	ea58 080a 	orrs.w	r8, r8, sl
 801a77a:	d174      	bne.n	801a866 <_strtod_l+0x8ae>
 801a77c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a780:	2b00      	cmp	r3, #0
 801a782:	d170      	bne.n	801a866 <_strtod_l+0x8ae>
 801a784:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a788:	0d1b      	lsrs	r3, r3, #20
 801a78a:	051b      	lsls	r3, r3, #20
 801a78c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a790:	d969      	bls.n	801a866 <_strtod_l+0x8ae>
 801a792:	6963      	ldr	r3, [r4, #20]
 801a794:	b913      	cbnz	r3, 801a79c <_strtod_l+0x7e4>
 801a796:	6923      	ldr	r3, [r4, #16]
 801a798:	2b01      	cmp	r3, #1
 801a79a:	dd64      	ble.n	801a866 <_strtod_l+0x8ae>
 801a79c:	4621      	mov	r1, r4
 801a79e:	2201      	movs	r2, #1
 801a7a0:	9805      	ldr	r0, [sp, #20]
 801a7a2:	f7ff f997 	bl	8019ad4 <__lshift>
 801a7a6:	4629      	mov	r1, r5
 801a7a8:	4604      	mov	r4, r0
 801a7aa:	f7ff f9ff 	bl	8019bac <__mcmp>
 801a7ae:	2800      	cmp	r0, #0
 801a7b0:	dd59      	ble.n	801a866 <_strtod_l+0x8ae>
 801a7b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a7b6:	9a06      	ldr	r2, [sp, #24]
 801a7b8:	0d1b      	lsrs	r3, r3, #20
 801a7ba:	051b      	lsls	r3, r3, #20
 801a7bc:	2a00      	cmp	r2, #0
 801a7be:	d070      	beq.n	801a8a2 <_strtod_l+0x8ea>
 801a7c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a7c4:	d86d      	bhi.n	801a8a2 <_strtod_l+0x8ea>
 801a7c6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801a7ca:	f67f ae99 	bls.w	801a500 <_strtod_l+0x548>
 801a7ce:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801a800 <_strtod_l+0x848>
 801a7d2:	ec4b ab16 	vmov	d6, sl, fp
 801a7d6:	4b0e      	ldr	r3, [pc, #56]	@ (801a810 <_strtod_l+0x858>)
 801a7d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a7dc:	ee17 2a90 	vmov	r2, s15
 801a7e0:	4013      	ands	r3, r2
 801a7e2:	ec5b ab17 	vmov	sl, fp, d7
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	f47f ae01 	bne.w	801a3ee <_strtod_l+0x436>
 801a7ec:	9a05      	ldr	r2, [sp, #20]
 801a7ee:	2322      	movs	r3, #34	@ 0x22
 801a7f0:	6013      	str	r3, [r2, #0]
 801a7f2:	e5fc      	b.n	801a3ee <_strtod_l+0x436>
 801a7f4:	f3af 8000 	nop.w
 801a7f8:	ffc00000 	.word	0xffc00000
 801a7fc:	41dfffff 	.word	0x41dfffff
 801a800:	00000000 	.word	0x00000000
 801a804:	39500000 	.word	0x39500000
 801a808:	0801c550 	.word	0x0801c550
 801a80c:	fffffc02 	.word	0xfffffc02
 801a810:	7ff00000 	.word	0x7ff00000
 801a814:	46d9      	mov	r9, fp
 801a816:	d15d      	bne.n	801a8d4 <_strtod_l+0x91c>
 801a818:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a81c:	f1b8 0f00 	cmp.w	r8, #0
 801a820:	d02a      	beq.n	801a878 <_strtod_l+0x8c0>
 801a822:	4aab      	ldr	r2, [pc, #684]	@ (801aad0 <_strtod_l+0xb18>)
 801a824:	4293      	cmp	r3, r2
 801a826:	d12a      	bne.n	801a87e <_strtod_l+0x8c6>
 801a828:	9b06      	ldr	r3, [sp, #24]
 801a82a:	4652      	mov	r2, sl
 801a82c:	b1fb      	cbz	r3, 801a86e <_strtod_l+0x8b6>
 801a82e:	4ba9      	ldr	r3, [pc, #676]	@ (801aad4 <_strtod_l+0xb1c>)
 801a830:	ea0b 0303 	and.w	r3, fp, r3
 801a834:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801a838:	f04f 31ff 	mov.w	r1, #4294967295
 801a83c:	d81a      	bhi.n	801a874 <_strtod_l+0x8bc>
 801a83e:	0d1b      	lsrs	r3, r3, #20
 801a840:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801a844:	fa01 f303 	lsl.w	r3, r1, r3
 801a848:	429a      	cmp	r2, r3
 801a84a:	d118      	bne.n	801a87e <_strtod_l+0x8c6>
 801a84c:	4ba2      	ldr	r3, [pc, #648]	@ (801aad8 <_strtod_l+0xb20>)
 801a84e:	4599      	cmp	r9, r3
 801a850:	d102      	bne.n	801a858 <_strtod_l+0x8a0>
 801a852:	3201      	adds	r2, #1
 801a854:	f43f adc0 	beq.w	801a3d8 <_strtod_l+0x420>
 801a858:	4b9e      	ldr	r3, [pc, #632]	@ (801aad4 <_strtod_l+0xb1c>)
 801a85a:	ea09 0303 	and.w	r3, r9, r3
 801a85e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801a862:	f04f 0a00 	mov.w	sl, #0
 801a866:	9b06      	ldr	r3, [sp, #24]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d1b0      	bne.n	801a7ce <_strtod_l+0x816>
 801a86c:	e5bf      	b.n	801a3ee <_strtod_l+0x436>
 801a86e:	f04f 33ff 	mov.w	r3, #4294967295
 801a872:	e7e9      	b.n	801a848 <_strtod_l+0x890>
 801a874:	460b      	mov	r3, r1
 801a876:	e7e7      	b.n	801a848 <_strtod_l+0x890>
 801a878:	ea53 030a 	orrs.w	r3, r3, sl
 801a87c:	d099      	beq.n	801a7b2 <_strtod_l+0x7fa>
 801a87e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a880:	b1c3      	cbz	r3, 801a8b4 <_strtod_l+0x8fc>
 801a882:	ea13 0f09 	tst.w	r3, r9
 801a886:	d0ee      	beq.n	801a866 <_strtod_l+0x8ae>
 801a888:	9a06      	ldr	r2, [sp, #24]
 801a88a:	4650      	mov	r0, sl
 801a88c:	4659      	mov	r1, fp
 801a88e:	f1b8 0f00 	cmp.w	r8, #0
 801a892:	d013      	beq.n	801a8bc <_strtod_l+0x904>
 801a894:	f7ff fb75 	bl	8019f82 <sulp>
 801a898:	ee39 7b00 	vadd.f64	d7, d9, d0
 801a89c:	ec5b ab17 	vmov	sl, fp, d7
 801a8a0:	e7e1      	b.n	801a866 <_strtod_l+0x8ae>
 801a8a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a8a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a8aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a8ae:	f04f 3aff 	mov.w	sl, #4294967295
 801a8b2:	e7d8      	b.n	801a866 <_strtod_l+0x8ae>
 801a8b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a8b6:	ea13 0f0a 	tst.w	r3, sl
 801a8ba:	e7e4      	b.n	801a886 <_strtod_l+0x8ce>
 801a8bc:	f7ff fb61 	bl	8019f82 <sulp>
 801a8c0:	ee39 0b40 	vsub.f64	d0, d9, d0
 801a8c4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801a8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8cc:	ec5b ab10 	vmov	sl, fp, d0
 801a8d0:	d1c9      	bne.n	801a866 <_strtod_l+0x8ae>
 801a8d2:	e615      	b.n	801a500 <_strtod_l+0x548>
 801a8d4:	4629      	mov	r1, r5
 801a8d6:	4620      	mov	r0, r4
 801a8d8:	f7ff fae0 	bl	8019e9c <__ratio>
 801a8dc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801a8e0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8e8:	d85d      	bhi.n	801a9a6 <_strtod_l+0x9ee>
 801a8ea:	f1b8 0f00 	cmp.w	r8, #0
 801a8ee:	d164      	bne.n	801a9ba <_strtod_l+0xa02>
 801a8f0:	f1ba 0f00 	cmp.w	sl, #0
 801a8f4:	d14b      	bne.n	801a98e <_strtod_l+0x9d6>
 801a8f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a8fa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d160      	bne.n	801a9c4 <_strtod_l+0xa0c>
 801a902:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801a906:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801a90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a90e:	d401      	bmi.n	801a914 <_strtod_l+0x95c>
 801a910:	ee20 8b08 	vmul.f64	d8, d0, d8
 801a914:	eeb1 ab48 	vneg.f64	d10, d8
 801a918:	486e      	ldr	r0, [pc, #440]	@ (801aad4 <_strtod_l+0xb1c>)
 801a91a:	4970      	ldr	r1, [pc, #448]	@ (801aadc <_strtod_l+0xb24>)
 801a91c:	ea09 0700 	and.w	r7, r9, r0
 801a920:	428f      	cmp	r7, r1
 801a922:	ec53 2b1a 	vmov	r2, r3, d10
 801a926:	d17d      	bne.n	801aa24 <_strtod_l+0xa6c>
 801a928:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801a92c:	ec4b ab1c 	vmov	d12, sl, fp
 801a930:	eeb0 0b4c 	vmov.f64	d0, d12
 801a934:	f7ff f9ea 	bl	8019d0c <__ulp>
 801a938:	4866      	ldr	r0, [pc, #408]	@ (801aad4 <_strtod_l+0xb1c>)
 801a93a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801a93e:	ee1c 3a90 	vmov	r3, s25
 801a942:	4a67      	ldr	r2, [pc, #412]	@ (801aae0 <_strtod_l+0xb28>)
 801a944:	ea03 0100 	and.w	r1, r3, r0
 801a948:	4291      	cmp	r1, r2
 801a94a:	ec5b ab1c 	vmov	sl, fp, d12
 801a94e:	d93c      	bls.n	801a9ca <_strtod_l+0xa12>
 801a950:	ee19 2a90 	vmov	r2, s19
 801a954:	4b60      	ldr	r3, [pc, #384]	@ (801aad8 <_strtod_l+0xb20>)
 801a956:	429a      	cmp	r2, r3
 801a958:	d104      	bne.n	801a964 <_strtod_l+0x9ac>
 801a95a:	ee19 3a10 	vmov	r3, s18
 801a95e:	3301      	adds	r3, #1
 801a960:	f43f ad3a 	beq.w	801a3d8 <_strtod_l+0x420>
 801a964:	f8df b170 	ldr.w	fp, [pc, #368]	@ 801aad8 <_strtod_l+0xb20>
 801a968:	f04f 3aff 	mov.w	sl, #4294967295
 801a96c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a96e:	9805      	ldr	r0, [sp, #20]
 801a970:	f7fe fe98 	bl	80196a4 <_Bfree>
 801a974:	9805      	ldr	r0, [sp, #20]
 801a976:	4631      	mov	r1, r6
 801a978:	f7fe fe94 	bl	80196a4 <_Bfree>
 801a97c:	9805      	ldr	r0, [sp, #20]
 801a97e:	4629      	mov	r1, r5
 801a980:	f7fe fe90 	bl	80196a4 <_Bfree>
 801a984:	9805      	ldr	r0, [sp, #20]
 801a986:	4621      	mov	r1, r4
 801a988:	f7fe fe8c 	bl	80196a4 <_Bfree>
 801a98c:	e625      	b.n	801a5da <_strtod_l+0x622>
 801a98e:	f1ba 0f01 	cmp.w	sl, #1
 801a992:	d103      	bne.n	801a99c <_strtod_l+0x9e4>
 801a994:	f1bb 0f00 	cmp.w	fp, #0
 801a998:	f43f adb2 	beq.w	801a500 <_strtod_l+0x548>
 801a99c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 801a9a0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801a9a4:	e7b8      	b.n	801a918 <_strtod_l+0x960>
 801a9a6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801a9aa:	ee20 8b08 	vmul.f64	d8, d0, d8
 801a9ae:	f1b8 0f00 	cmp.w	r8, #0
 801a9b2:	d0af      	beq.n	801a914 <_strtod_l+0x95c>
 801a9b4:	eeb0 ab48 	vmov.f64	d10, d8
 801a9b8:	e7ae      	b.n	801a918 <_strtod_l+0x960>
 801a9ba:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801a9be:	eeb0 8b4a 	vmov.f64	d8, d10
 801a9c2:	e7a9      	b.n	801a918 <_strtod_l+0x960>
 801a9c4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 801a9c8:	e7a6      	b.n	801a918 <_strtod_l+0x960>
 801a9ca:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a9ce:	9b06      	ldr	r3, [sp, #24]
 801a9d0:	46d9      	mov	r9, fp
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d1ca      	bne.n	801a96c <_strtod_l+0x9b4>
 801a9d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a9da:	0d1b      	lsrs	r3, r3, #20
 801a9dc:	051b      	lsls	r3, r3, #20
 801a9de:	429f      	cmp	r7, r3
 801a9e0:	d1c4      	bne.n	801a96c <_strtod_l+0x9b4>
 801a9e2:	ec51 0b18 	vmov	r0, r1, d8
 801a9e6:	f7e5 febf 	bl	8000768 <__aeabi_d2lz>
 801a9ea:	f7e5 fe77 	bl	80006dc <__aeabi_l2d>
 801a9ee:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801a9f2:	ec41 0b17 	vmov	d7, r0, r1
 801a9f6:	ea49 090a 	orr.w	r9, r9, sl
 801a9fa:	ea59 0908 	orrs.w	r9, r9, r8
 801a9fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 801aa02:	d03c      	beq.n	801aa7e <_strtod_l+0xac6>
 801aa04:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801aab8 <_strtod_l+0xb00>
 801aa08:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801aa0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa10:	f53f aced 	bmi.w	801a3ee <_strtod_l+0x436>
 801aa14:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801aac0 <_strtod_l+0xb08>
 801aa18:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801aa1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa20:	dda4      	ble.n	801a96c <_strtod_l+0x9b4>
 801aa22:	e4e4      	b.n	801a3ee <_strtod_l+0x436>
 801aa24:	9906      	ldr	r1, [sp, #24]
 801aa26:	b1e1      	cbz	r1, 801aa62 <_strtod_l+0xaaa>
 801aa28:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801aa2c:	d819      	bhi.n	801aa62 <_strtod_l+0xaaa>
 801aa2e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa36:	d811      	bhi.n	801aa5c <_strtod_l+0xaa4>
 801aa38:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801aa3c:	ee18 3a10 	vmov	r3, s16
 801aa40:	2b01      	cmp	r3, #1
 801aa42:	bf38      	it	cc
 801aa44:	2301      	movcc	r3, #1
 801aa46:	ee08 3a10 	vmov	s16, r3
 801aa4a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801aa4e:	f1b8 0f00 	cmp.w	r8, #0
 801aa52:	d111      	bne.n	801aa78 <_strtod_l+0xac0>
 801aa54:	eeb1 7b48 	vneg.f64	d7, d8
 801aa58:	ec53 2b17 	vmov	r2, r3, d7
 801aa5c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 801aa60:	1bcb      	subs	r3, r1, r7
 801aa62:	eeb0 0b49 	vmov.f64	d0, d9
 801aa66:	ec43 2b1a 	vmov	d10, r2, r3
 801aa6a:	f7ff f94f 	bl	8019d0c <__ulp>
 801aa6e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801aa72:	ec5b ab19 	vmov	sl, fp, d9
 801aa76:	e7aa      	b.n	801a9ce <_strtod_l+0xa16>
 801aa78:	eeb0 7b48 	vmov.f64	d7, d8
 801aa7c:	e7ec      	b.n	801aa58 <_strtod_l+0xaa0>
 801aa7e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801aac8 <_strtod_l+0xb10>
 801aa82:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801aa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa8a:	f57f af6f 	bpl.w	801a96c <_strtod_l+0x9b4>
 801aa8e:	e4ae      	b.n	801a3ee <_strtod_l+0x436>
 801aa90:	2300      	movs	r3, #0
 801aa92:	9308      	str	r3, [sp, #32]
 801aa94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aa96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801aa98:	6013      	str	r3, [r2, #0]
 801aa9a:	f7ff bacc 	b.w	801a036 <_strtod_l+0x7e>
 801aa9e:	2a65      	cmp	r2, #101	@ 0x65
 801aaa0:	f43f abbc 	beq.w	801a21c <_strtod_l+0x264>
 801aaa4:	2a45      	cmp	r2, #69	@ 0x45
 801aaa6:	f43f abb9 	beq.w	801a21c <_strtod_l+0x264>
 801aaaa:	2301      	movs	r3, #1
 801aaac:	9306      	str	r3, [sp, #24]
 801aaae:	f7ff bbf0 	b.w	801a292 <_strtod_l+0x2da>
 801aab2:	bf00      	nop
 801aab4:	f3af 8000 	nop.w
 801aab8:	94a03595 	.word	0x94a03595
 801aabc:	3fdfffff 	.word	0x3fdfffff
 801aac0:	35afe535 	.word	0x35afe535
 801aac4:	3fe00000 	.word	0x3fe00000
 801aac8:	94a03595 	.word	0x94a03595
 801aacc:	3fcfffff 	.word	0x3fcfffff
 801aad0:	000fffff 	.word	0x000fffff
 801aad4:	7ff00000 	.word	0x7ff00000
 801aad8:	7fefffff 	.word	0x7fefffff
 801aadc:	7fe00000 	.word	0x7fe00000
 801aae0:	7c9fffff 	.word	0x7c9fffff

0801aae4 <_strtod_r>:
 801aae4:	4b01      	ldr	r3, [pc, #4]	@ (801aaec <_strtod_r+0x8>)
 801aae6:	f7ff ba67 	b.w	8019fb8 <_strtod_l>
 801aaea:	bf00      	nop
 801aaec:	240001c4 	.word	0x240001c4

0801aaf0 <_strtol_l.constprop.0>:
 801aaf0:	2b24      	cmp	r3, #36	@ 0x24
 801aaf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaf6:	4686      	mov	lr, r0
 801aaf8:	4690      	mov	r8, r2
 801aafa:	d801      	bhi.n	801ab00 <_strtol_l.constprop.0+0x10>
 801aafc:	2b01      	cmp	r3, #1
 801aafe:	d106      	bne.n	801ab0e <_strtol_l.constprop.0+0x1e>
 801ab00:	f7fd fe6e 	bl	80187e0 <__errno>
 801ab04:	2316      	movs	r3, #22
 801ab06:	6003      	str	r3, [r0, #0]
 801ab08:	2000      	movs	r0, #0
 801ab0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab0e:	4834      	ldr	r0, [pc, #208]	@ (801abe0 <_strtol_l.constprop.0+0xf0>)
 801ab10:	460d      	mov	r5, r1
 801ab12:	462a      	mov	r2, r5
 801ab14:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ab18:	5d06      	ldrb	r6, [r0, r4]
 801ab1a:	f016 0608 	ands.w	r6, r6, #8
 801ab1e:	d1f8      	bne.n	801ab12 <_strtol_l.constprop.0+0x22>
 801ab20:	2c2d      	cmp	r4, #45	@ 0x2d
 801ab22:	d12d      	bne.n	801ab80 <_strtol_l.constprop.0+0x90>
 801ab24:	782c      	ldrb	r4, [r5, #0]
 801ab26:	2601      	movs	r6, #1
 801ab28:	1c95      	adds	r5, r2, #2
 801ab2a:	f033 0210 	bics.w	r2, r3, #16
 801ab2e:	d109      	bne.n	801ab44 <_strtol_l.constprop.0+0x54>
 801ab30:	2c30      	cmp	r4, #48	@ 0x30
 801ab32:	d12a      	bne.n	801ab8a <_strtol_l.constprop.0+0x9a>
 801ab34:	782a      	ldrb	r2, [r5, #0]
 801ab36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ab3a:	2a58      	cmp	r2, #88	@ 0x58
 801ab3c:	d125      	bne.n	801ab8a <_strtol_l.constprop.0+0x9a>
 801ab3e:	786c      	ldrb	r4, [r5, #1]
 801ab40:	2310      	movs	r3, #16
 801ab42:	3502      	adds	r5, #2
 801ab44:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801ab48:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ab4c:	2200      	movs	r2, #0
 801ab4e:	fbbc f9f3 	udiv	r9, ip, r3
 801ab52:	4610      	mov	r0, r2
 801ab54:	fb03 ca19 	mls	sl, r3, r9, ip
 801ab58:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801ab5c:	2f09      	cmp	r7, #9
 801ab5e:	d81b      	bhi.n	801ab98 <_strtol_l.constprop.0+0xa8>
 801ab60:	463c      	mov	r4, r7
 801ab62:	42a3      	cmp	r3, r4
 801ab64:	dd27      	ble.n	801abb6 <_strtol_l.constprop.0+0xc6>
 801ab66:	1c57      	adds	r7, r2, #1
 801ab68:	d007      	beq.n	801ab7a <_strtol_l.constprop.0+0x8a>
 801ab6a:	4581      	cmp	r9, r0
 801ab6c:	d320      	bcc.n	801abb0 <_strtol_l.constprop.0+0xc0>
 801ab6e:	d101      	bne.n	801ab74 <_strtol_l.constprop.0+0x84>
 801ab70:	45a2      	cmp	sl, r4
 801ab72:	db1d      	blt.n	801abb0 <_strtol_l.constprop.0+0xc0>
 801ab74:	fb00 4003 	mla	r0, r0, r3, r4
 801ab78:	2201      	movs	r2, #1
 801ab7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ab7e:	e7eb      	b.n	801ab58 <_strtol_l.constprop.0+0x68>
 801ab80:	2c2b      	cmp	r4, #43	@ 0x2b
 801ab82:	bf04      	itt	eq
 801ab84:	782c      	ldrbeq	r4, [r5, #0]
 801ab86:	1c95      	addeq	r5, r2, #2
 801ab88:	e7cf      	b.n	801ab2a <_strtol_l.constprop.0+0x3a>
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d1da      	bne.n	801ab44 <_strtol_l.constprop.0+0x54>
 801ab8e:	2c30      	cmp	r4, #48	@ 0x30
 801ab90:	bf0c      	ite	eq
 801ab92:	2308      	moveq	r3, #8
 801ab94:	230a      	movne	r3, #10
 801ab96:	e7d5      	b.n	801ab44 <_strtol_l.constprop.0+0x54>
 801ab98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801ab9c:	2f19      	cmp	r7, #25
 801ab9e:	d801      	bhi.n	801aba4 <_strtol_l.constprop.0+0xb4>
 801aba0:	3c37      	subs	r4, #55	@ 0x37
 801aba2:	e7de      	b.n	801ab62 <_strtol_l.constprop.0+0x72>
 801aba4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801aba8:	2f19      	cmp	r7, #25
 801abaa:	d804      	bhi.n	801abb6 <_strtol_l.constprop.0+0xc6>
 801abac:	3c57      	subs	r4, #87	@ 0x57
 801abae:	e7d8      	b.n	801ab62 <_strtol_l.constprop.0+0x72>
 801abb0:	f04f 32ff 	mov.w	r2, #4294967295
 801abb4:	e7e1      	b.n	801ab7a <_strtol_l.constprop.0+0x8a>
 801abb6:	1c53      	adds	r3, r2, #1
 801abb8:	d108      	bne.n	801abcc <_strtol_l.constprop.0+0xdc>
 801abba:	2322      	movs	r3, #34	@ 0x22
 801abbc:	f8ce 3000 	str.w	r3, [lr]
 801abc0:	4660      	mov	r0, ip
 801abc2:	f1b8 0f00 	cmp.w	r8, #0
 801abc6:	d0a0      	beq.n	801ab0a <_strtol_l.constprop.0+0x1a>
 801abc8:	1e69      	subs	r1, r5, #1
 801abca:	e006      	b.n	801abda <_strtol_l.constprop.0+0xea>
 801abcc:	b106      	cbz	r6, 801abd0 <_strtol_l.constprop.0+0xe0>
 801abce:	4240      	negs	r0, r0
 801abd0:	f1b8 0f00 	cmp.w	r8, #0
 801abd4:	d099      	beq.n	801ab0a <_strtol_l.constprop.0+0x1a>
 801abd6:	2a00      	cmp	r2, #0
 801abd8:	d1f6      	bne.n	801abc8 <_strtol_l.constprop.0+0xd8>
 801abda:	f8c8 1000 	str.w	r1, [r8]
 801abde:	e794      	b.n	801ab0a <_strtol_l.constprop.0+0x1a>
 801abe0:	0801c579 	.word	0x0801c579

0801abe4 <_strtol_r>:
 801abe4:	f7ff bf84 	b.w	801aaf0 <_strtol_l.constprop.0>

0801abe8 <__ssputs_r>:
 801abe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abec:	688e      	ldr	r6, [r1, #8]
 801abee:	461f      	mov	r7, r3
 801abf0:	42be      	cmp	r6, r7
 801abf2:	680b      	ldr	r3, [r1, #0]
 801abf4:	4682      	mov	sl, r0
 801abf6:	460c      	mov	r4, r1
 801abf8:	4690      	mov	r8, r2
 801abfa:	d82d      	bhi.n	801ac58 <__ssputs_r+0x70>
 801abfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ac00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ac04:	d026      	beq.n	801ac54 <__ssputs_r+0x6c>
 801ac06:	6965      	ldr	r5, [r4, #20]
 801ac08:	6909      	ldr	r1, [r1, #16]
 801ac0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac0e:	eba3 0901 	sub.w	r9, r3, r1
 801ac12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ac16:	1c7b      	adds	r3, r7, #1
 801ac18:	444b      	add	r3, r9
 801ac1a:	106d      	asrs	r5, r5, #1
 801ac1c:	429d      	cmp	r5, r3
 801ac1e:	bf38      	it	cc
 801ac20:	461d      	movcc	r5, r3
 801ac22:	0553      	lsls	r3, r2, #21
 801ac24:	d527      	bpl.n	801ac76 <__ssputs_r+0x8e>
 801ac26:	4629      	mov	r1, r5
 801ac28:	f7fe fc70 	bl	801950c <_malloc_r>
 801ac2c:	4606      	mov	r6, r0
 801ac2e:	b360      	cbz	r0, 801ac8a <__ssputs_r+0xa2>
 801ac30:	6921      	ldr	r1, [r4, #16]
 801ac32:	464a      	mov	r2, r9
 801ac34:	f7fd fe01 	bl	801883a <memcpy>
 801ac38:	89a3      	ldrh	r3, [r4, #12]
 801ac3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ac3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ac42:	81a3      	strh	r3, [r4, #12]
 801ac44:	6126      	str	r6, [r4, #16]
 801ac46:	6165      	str	r5, [r4, #20]
 801ac48:	444e      	add	r6, r9
 801ac4a:	eba5 0509 	sub.w	r5, r5, r9
 801ac4e:	6026      	str	r6, [r4, #0]
 801ac50:	60a5      	str	r5, [r4, #8]
 801ac52:	463e      	mov	r6, r7
 801ac54:	42be      	cmp	r6, r7
 801ac56:	d900      	bls.n	801ac5a <__ssputs_r+0x72>
 801ac58:	463e      	mov	r6, r7
 801ac5a:	6820      	ldr	r0, [r4, #0]
 801ac5c:	4632      	mov	r2, r6
 801ac5e:	4641      	mov	r1, r8
 801ac60:	f000 fb6a 	bl	801b338 <memmove>
 801ac64:	68a3      	ldr	r3, [r4, #8]
 801ac66:	1b9b      	subs	r3, r3, r6
 801ac68:	60a3      	str	r3, [r4, #8]
 801ac6a:	6823      	ldr	r3, [r4, #0]
 801ac6c:	4433      	add	r3, r6
 801ac6e:	6023      	str	r3, [r4, #0]
 801ac70:	2000      	movs	r0, #0
 801ac72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac76:	462a      	mov	r2, r5
 801ac78:	f000 ff43 	bl	801bb02 <_realloc_r>
 801ac7c:	4606      	mov	r6, r0
 801ac7e:	2800      	cmp	r0, #0
 801ac80:	d1e0      	bne.n	801ac44 <__ssputs_r+0x5c>
 801ac82:	6921      	ldr	r1, [r4, #16]
 801ac84:	4650      	mov	r0, sl
 801ac86:	f7fe fbcd 	bl	8019424 <_free_r>
 801ac8a:	230c      	movs	r3, #12
 801ac8c:	f8ca 3000 	str.w	r3, [sl]
 801ac90:	89a3      	ldrh	r3, [r4, #12]
 801ac92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ac96:	81a3      	strh	r3, [r4, #12]
 801ac98:	f04f 30ff 	mov.w	r0, #4294967295
 801ac9c:	e7e9      	b.n	801ac72 <__ssputs_r+0x8a>
	...

0801aca0 <_svfiprintf_r>:
 801aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aca4:	4698      	mov	r8, r3
 801aca6:	898b      	ldrh	r3, [r1, #12]
 801aca8:	061b      	lsls	r3, r3, #24
 801acaa:	b09d      	sub	sp, #116	@ 0x74
 801acac:	4607      	mov	r7, r0
 801acae:	460d      	mov	r5, r1
 801acb0:	4614      	mov	r4, r2
 801acb2:	d510      	bpl.n	801acd6 <_svfiprintf_r+0x36>
 801acb4:	690b      	ldr	r3, [r1, #16]
 801acb6:	b973      	cbnz	r3, 801acd6 <_svfiprintf_r+0x36>
 801acb8:	2140      	movs	r1, #64	@ 0x40
 801acba:	f7fe fc27 	bl	801950c <_malloc_r>
 801acbe:	6028      	str	r0, [r5, #0]
 801acc0:	6128      	str	r0, [r5, #16]
 801acc2:	b930      	cbnz	r0, 801acd2 <_svfiprintf_r+0x32>
 801acc4:	230c      	movs	r3, #12
 801acc6:	603b      	str	r3, [r7, #0]
 801acc8:	f04f 30ff 	mov.w	r0, #4294967295
 801accc:	b01d      	add	sp, #116	@ 0x74
 801acce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acd2:	2340      	movs	r3, #64	@ 0x40
 801acd4:	616b      	str	r3, [r5, #20]
 801acd6:	2300      	movs	r3, #0
 801acd8:	9309      	str	r3, [sp, #36]	@ 0x24
 801acda:	2320      	movs	r3, #32
 801acdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ace0:	f8cd 800c 	str.w	r8, [sp, #12]
 801ace4:	2330      	movs	r3, #48	@ 0x30
 801ace6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ae84 <_svfiprintf_r+0x1e4>
 801acea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801acee:	f04f 0901 	mov.w	r9, #1
 801acf2:	4623      	mov	r3, r4
 801acf4:	469a      	mov	sl, r3
 801acf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801acfa:	b10a      	cbz	r2, 801ad00 <_svfiprintf_r+0x60>
 801acfc:	2a25      	cmp	r2, #37	@ 0x25
 801acfe:	d1f9      	bne.n	801acf4 <_svfiprintf_r+0x54>
 801ad00:	ebba 0b04 	subs.w	fp, sl, r4
 801ad04:	d00b      	beq.n	801ad1e <_svfiprintf_r+0x7e>
 801ad06:	465b      	mov	r3, fp
 801ad08:	4622      	mov	r2, r4
 801ad0a:	4629      	mov	r1, r5
 801ad0c:	4638      	mov	r0, r7
 801ad0e:	f7ff ff6b 	bl	801abe8 <__ssputs_r>
 801ad12:	3001      	adds	r0, #1
 801ad14:	f000 80a7 	beq.w	801ae66 <_svfiprintf_r+0x1c6>
 801ad18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad1a:	445a      	add	r2, fp
 801ad1c:	9209      	str	r2, [sp, #36]	@ 0x24
 801ad1e:	f89a 3000 	ldrb.w	r3, [sl]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	f000 809f 	beq.w	801ae66 <_svfiprintf_r+0x1c6>
 801ad28:	2300      	movs	r3, #0
 801ad2a:	f04f 32ff 	mov.w	r2, #4294967295
 801ad2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad32:	f10a 0a01 	add.w	sl, sl, #1
 801ad36:	9304      	str	r3, [sp, #16]
 801ad38:	9307      	str	r3, [sp, #28]
 801ad3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ad3e:	931a      	str	r3, [sp, #104]	@ 0x68
 801ad40:	4654      	mov	r4, sl
 801ad42:	2205      	movs	r2, #5
 801ad44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad48:	484e      	ldr	r0, [pc, #312]	@ (801ae84 <_svfiprintf_r+0x1e4>)
 801ad4a:	f7e5 fae1 	bl	8000310 <memchr>
 801ad4e:	9a04      	ldr	r2, [sp, #16]
 801ad50:	b9d8      	cbnz	r0, 801ad8a <_svfiprintf_r+0xea>
 801ad52:	06d0      	lsls	r0, r2, #27
 801ad54:	bf44      	itt	mi
 801ad56:	2320      	movmi	r3, #32
 801ad58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad5c:	0711      	lsls	r1, r2, #28
 801ad5e:	bf44      	itt	mi
 801ad60:	232b      	movmi	r3, #43	@ 0x2b
 801ad62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad66:	f89a 3000 	ldrb.w	r3, [sl]
 801ad6a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ad6c:	d015      	beq.n	801ad9a <_svfiprintf_r+0xfa>
 801ad6e:	9a07      	ldr	r2, [sp, #28]
 801ad70:	4654      	mov	r4, sl
 801ad72:	2000      	movs	r0, #0
 801ad74:	f04f 0c0a 	mov.w	ip, #10
 801ad78:	4621      	mov	r1, r4
 801ad7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad7e:	3b30      	subs	r3, #48	@ 0x30
 801ad80:	2b09      	cmp	r3, #9
 801ad82:	d94b      	bls.n	801ae1c <_svfiprintf_r+0x17c>
 801ad84:	b1b0      	cbz	r0, 801adb4 <_svfiprintf_r+0x114>
 801ad86:	9207      	str	r2, [sp, #28]
 801ad88:	e014      	b.n	801adb4 <_svfiprintf_r+0x114>
 801ad8a:	eba0 0308 	sub.w	r3, r0, r8
 801ad8e:	fa09 f303 	lsl.w	r3, r9, r3
 801ad92:	4313      	orrs	r3, r2
 801ad94:	9304      	str	r3, [sp, #16]
 801ad96:	46a2      	mov	sl, r4
 801ad98:	e7d2      	b.n	801ad40 <_svfiprintf_r+0xa0>
 801ad9a:	9b03      	ldr	r3, [sp, #12]
 801ad9c:	1d19      	adds	r1, r3, #4
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	9103      	str	r1, [sp, #12]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	bfbb      	ittet	lt
 801ada6:	425b      	neglt	r3, r3
 801ada8:	f042 0202 	orrlt.w	r2, r2, #2
 801adac:	9307      	strge	r3, [sp, #28]
 801adae:	9307      	strlt	r3, [sp, #28]
 801adb0:	bfb8      	it	lt
 801adb2:	9204      	strlt	r2, [sp, #16]
 801adb4:	7823      	ldrb	r3, [r4, #0]
 801adb6:	2b2e      	cmp	r3, #46	@ 0x2e
 801adb8:	d10a      	bne.n	801add0 <_svfiprintf_r+0x130>
 801adba:	7863      	ldrb	r3, [r4, #1]
 801adbc:	2b2a      	cmp	r3, #42	@ 0x2a
 801adbe:	d132      	bne.n	801ae26 <_svfiprintf_r+0x186>
 801adc0:	9b03      	ldr	r3, [sp, #12]
 801adc2:	1d1a      	adds	r2, r3, #4
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	9203      	str	r2, [sp, #12]
 801adc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801adcc:	3402      	adds	r4, #2
 801adce:	9305      	str	r3, [sp, #20]
 801add0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ae94 <_svfiprintf_r+0x1f4>
 801add4:	7821      	ldrb	r1, [r4, #0]
 801add6:	2203      	movs	r2, #3
 801add8:	4650      	mov	r0, sl
 801adda:	f7e5 fa99 	bl	8000310 <memchr>
 801adde:	b138      	cbz	r0, 801adf0 <_svfiprintf_r+0x150>
 801ade0:	9b04      	ldr	r3, [sp, #16]
 801ade2:	eba0 000a 	sub.w	r0, r0, sl
 801ade6:	2240      	movs	r2, #64	@ 0x40
 801ade8:	4082      	lsls	r2, r0
 801adea:	4313      	orrs	r3, r2
 801adec:	3401      	adds	r4, #1
 801adee:	9304      	str	r3, [sp, #16]
 801adf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801adf4:	4824      	ldr	r0, [pc, #144]	@ (801ae88 <_svfiprintf_r+0x1e8>)
 801adf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801adfa:	2206      	movs	r2, #6
 801adfc:	f7e5 fa88 	bl	8000310 <memchr>
 801ae00:	2800      	cmp	r0, #0
 801ae02:	d036      	beq.n	801ae72 <_svfiprintf_r+0x1d2>
 801ae04:	4b21      	ldr	r3, [pc, #132]	@ (801ae8c <_svfiprintf_r+0x1ec>)
 801ae06:	bb1b      	cbnz	r3, 801ae50 <_svfiprintf_r+0x1b0>
 801ae08:	9b03      	ldr	r3, [sp, #12]
 801ae0a:	3307      	adds	r3, #7
 801ae0c:	f023 0307 	bic.w	r3, r3, #7
 801ae10:	3308      	adds	r3, #8
 801ae12:	9303      	str	r3, [sp, #12]
 801ae14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae16:	4433      	add	r3, r6
 801ae18:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae1a:	e76a      	b.n	801acf2 <_svfiprintf_r+0x52>
 801ae1c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae20:	460c      	mov	r4, r1
 801ae22:	2001      	movs	r0, #1
 801ae24:	e7a8      	b.n	801ad78 <_svfiprintf_r+0xd8>
 801ae26:	2300      	movs	r3, #0
 801ae28:	3401      	adds	r4, #1
 801ae2a:	9305      	str	r3, [sp, #20]
 801ae2c:	4619      	mov	r1, r3
 801ae2e:	f04f 0c0a 	mov.w	ip, #10
 801ae32:	4620      	mov	r0, r4
 801ae34:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae38:	3a30      	subs	r2, #48	@ 0x30
 801ae3a:	2a09      	cmp	r2, #9
 801ae3c:	d903      	bls.n	801ae46 <_svfiprintf_r+0x1a6>
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d0c6      	beq.n	801add0 <_svfiprintf_r+0x130>
 801ae42:	9105      	str	r1, [sp, #20]
 801ae44:	e7c4      	b.n	801add0 <_svfiprintf_r+0x130>
 801ae46:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae4a:	4604      	mov	r4, r0
 801ae4c:	2301      	movs	r3, #1
 801ae4e:	e7f0      	b.n	801ae32 <_svfiprintf_r+0x192>
 801ae50:	ab03      	add	r3, sp, #12
 801ae52:	9300      	str	r3, [sp, #0]
 801ae54:	462a      	mov	r2, r5
 801ae56:	4b0e      	ldr	r3, [pc, #56]	@ (801ae90 <_svfiprintf_r+0x1f0>)
 801ae58:	a904      	add	r1, sp, #16
 801ae5a:	4638      	mov	r0, r7
 801ae5c:	f7fc fc90 	bl	8017780 <_printf_float>
 801ae60:	1c42      	adds	r2, r0, #1
 801ae62:	4606      	mov	r6, r0
 801ae64:	d1d6      	bne.n	801ae14 <_svfiprintf_r+0x174>
 801ae66:	89ab      	ldrh	r3, [r5, #12]
 801ae68:	065b      	lsls	r3, r3, #25
 801ae6a:	f53f af2d 	bmi.w	801acc8 <_svfiprintf_r+0x28>
 801ae6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ae70:	e72c      	b.n	801accc <_svfiprintf_r+0x2c>
 801ae72:	ab03      	add	r3, sp, #12
 801ae74:	9300      	str	r3, [sp, #0]
 801ae76:	462a      	mov	r2, r5
 801ae78:	4b05      	ldr	r3, [pc, #20]	@ (801ae90 <_svfiprintf_r+0x1f0>)
 801ae7a:	a904      	add	r1, sp, #16
 801ae7c:	4638      	mov	r0, r7
 801ae7e:	f7fc ff07 	bl	8017c90 <_printf_i>
 801ae82:	e7ed      	b.n	801ae60 <_svfiprintf_r+0x1c0>
 801ae84:	0801c679 	.word	0x0801c679
 801ae88:	0801c683 	.word	0x0801c683
 801ae8c:	08017781 	.word	0x08017781
 801ae90:	0801abe9 	.word	0x0801abe9
 801ae94:	0801c67f 	.word	0x0801c67f

0801ae98 <__sfputc_r>:
 801ae98:	6893      	ldr	r3, [r2, #8]
 801ae9a:	3b01      	subs	r3, #1
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	b410      	push	{r4}
 801aea0:	6093      	str	r3, [r2, #8]
 801aea2:	da08      	bge.n	801aeb6 <__sfputc_r+0x1e>
 801aea4:	6994      	ldr	r4, [r2, #24]
 801aea6:	42a3      	cmp	r3, r4
 801aea8:	db01      	blt.n	801aeae <__sfputc_r+0x16>
 801aeaa:	290a      	cmp	r1, #10
 801aeac:	d103      	bne.n	801aeb6 <__sfputc_r+0x1e>
 801aeae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aeb2:	f7fd bbae 	b.w	8018612 <__swbuf_r>
 801aeb6:	6813      	ldr	r3, [r2, #0]
 801aeb8:	1c58      	adds	r0, r3, #1
 801aeba:	6010      	str	r0, [r2, #0]
 801aebc:	7019      	strb	r1, [r3, #0]
 801aebe:	4608      	mov	r0, r1
 801aec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aec4:	4770      	bx	lr

0801aec6 <__sfputs_r>:
 801aec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aec8:	4606      	mov	r6, r0
 801aeca:	460f      	mov	r7, r1
 801aecc:	4614      	mov	r4, r2
 801aece:	18d5      	adds	r5, r2, r3
 801aed0:	42ac      	cmp	r4, r5
 801aed2:	d101      	bne.n	801aed8 <__sfputs_r+0x12>
 801aed4:	2000      	movs	r0, #0
 801aed6:	e007      	b.n	801aee8 <__sfputs_r+0x22>
 801aed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aedc:	463a      	mov	r2, r7
 801aede:	4630      	mov	r0, r6
 801aee0:	f7ff ffda 	bl	801ae98 <__sfputc_r>
 801aee4:	1c43      	adds	r3, r0, #1
 801aee6:	d1f3      	bne.n	801aed0 <__sfputs_r+0xa>
 801aee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aeec <_vfiprintf_r>:
 801aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aef0:	460d      	mov	r5, r1
 801aef2:	b09d      	sub	sp, #116	@ 0x74
 801aef4:	4614      	mov	r4, r2
 801aef6:	4698      	mov	r8, r3
 801aef8:	4606      	mov	r6, r0
 801aefa:	b118      	cbz	r0, 801af04 <_vfiprintf_r+0x18>
 801aefc:	6a03      	ldr	r3, [r0, #32]
 801aefe:	b90b      	cbnz	r3, 801af04 <_vfiprintf_r+0x18>
 801af00:	f7fd fa7e 	bl	8018400 <__sinit>
 801af04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801af06:	07d9      	lsls	r1, r3, #31
 801af08:	d405      	bmi.n	801af16 <_vfiprintf_r+0x2a>
 801af0a:	89ab      	ldrh	r3, [r5, #12]
 801af0c:	059a      	lsls	r2, r3, #22
 801af0e:	d402      	bmi.n	801af16 <_vfiprintf_r+0x2a>
 801af10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801af12:	f7fd fc90 	bl	8018836 <__retarget_lock_acquire_recursive>
 801af16:	89ab      	ldrh	r3, [r5, #12]
 801af18:	071b      	lsls	r3, r3, #28
 801af1a:	d501      	bpl.n	801af20 <_vfiprintf_r+0x34>
 801af1c:	692b      	ldr	r3, [r5, #16]
 801af1e:	b99b      	cbnz	r3, 801af48 <_vfiprintf_r+0x5c>
 801af20:	4629      	mov	r1, r5
 801af22:	4630      	mov	r0, r6
 801af24:	f7fd fbb4 	bl	8018690 <__swsetup_r>
 801af28:	b170      	cbz	r0, 801af48 <_vfiprintf_r+0x5c>
 801af2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801af2c:	07dc      	lsls	r4, r3, #31
 801af2e:	d504      	bpl.n	801af3a <_vfiprintf_r+0x4e>
 801af30:	f04f 30ff 	mov.w	r0, #4294967295
 801af34:	b01d      	add	sp, #116	@ 0x74
 801af36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af3a:	89ab      	ldrh	r3, [r5, #12]
 801af3c:	0598      	lsls	r0, r3, #22
 801af3e:	d4f7      	bmi.n	801af30 <_vfiprintf_r+0x44>
 801af40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801af42:	f7fd fc79 	bl	8018838 <__retarget_lock_release_recursive>
 801af46:	e7f3      	b.n	801af30 <_vfiprintf_r+0x44>
 801af48:	2300      	movs	r3, #0
 801af4a:	9309      	str	r3, [sp, #36]	@ 0x24
 801af4c:	2320      	movs	r3, #32
 801af4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801af52:	f8cd 800c 	str.w	r8, [sp, #12]
 801af56:	2330      	movs	r3, #48	@ 0x30
 801af58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b108 <_vfiprintf_r+0x21c>
 801af5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801af60:	f04f 0901 	mov.w	r9, #1
 801af64:	4623      	mov	r3, r4
 801af66:	469a      	mov	sl, r3
 801af68:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af6c:	b10a      	cbz	r2, 801af72 <_vfiprintf_r+0x86>
 801af6e:	2a25      	cmp	r2, #37	@ 0x25
 801af70:	d1f9      	bne.n	801af66 <_vfiprintf_r+0x7a>
 801af72:	ebba 0b04 	subs.w	fp, sl, r4
 801af76:	d00b      	beq.n	801af90 <_vfiprintf_r+0xa4>
 801af78:	465b      	mov	r3, fp
 801af7a:	4622      	mov	r2, r4
 801af7c:	4629      	mov	r1, r5
 801af7e:	4630      	mov	r0, r6
 801af80:	f7ff ffa1 	bl	801aec6 <__sfputs_r>
 801af84:	3001      	adds	r0, #1
 801af86:	f000 80a7 	beq.w	801b0d8 <_vfiprintf_r+0x1ec>
 801af8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af8c:	445a      	add	r2, fp
 801af8e:	9209      	str	r2, [sp, #36]	@ 0x24
 801af90:	f89a 3000 	ldrb.w	r3, [sl]
 801af94:	2b00      	cmp	r3, #0
 801af96:	f000 809f 	beq.w	801b0d8 <_vfiprintf_r+0x1ec>
 801af9a:	2300      	movs	r3, #0
 801af9c:	f04f 32ff 	mov.w	r2, #4294967295
 801afa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801afa4:	f10a 0a01 	add.w	sl, sl, #1
 801afa8:	9304      	str	r3, [sp, #16]
 801afaa:	9307      	str	r3, [sp, #28]
 801afac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801afb0:	931a      	str	r3, [sp, #104]	@ 0x68
 801afb2:	4654      	mov	r4, sl
 801afb4:	2205      	movs	r2, #5
 801afb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801afba:	4853      	ldr	r0, [pc, #332]	@ (801b108 <_vfiprintf_r+0x21c>)
 801afbc:	f7e5 f9a8 	bl	8000310 <memchr>
 801afc0:	9a04      	ldr	r2, [sp, #16]
 801afc2:	b9d8      	cbnz	r0, 801affc <_vfiprintf_r+0x110>
 801afc4:	06d1      	lsls	r1, r2, #27
 801afc6:	bf44      	itt	mi
 801afc8:	2320      	movmi	r3, #32
 801afca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801afce:	0713      	lsls	r3, r2, #28
 801afd0:	bf44      	itt	mi
 801afd2:	232b      	movmi	r3, #43	@ 0x2b
 801afd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801afd8:	f89a 3000 	ldrb.w	r3, [sl]
 801afdc:	2b2a      	cmp	r3, #42	@ 0x2a
 801afde:	d015      	beq.n	801b00c <_vfiprintf_r+0x120>
 801afe0:	9a07      	ldr	r2, [sp, #28]
 801afe2:	4654      	mov	r4, sl
 801afe4:	2000      	movs	r0, #0
 801afe6:	f04f 0c0a 	mov.w	ip, #10
 801afea:	4621      	mov	r1, r4
 801afec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aff0:	3b30      	subs	r3, #48	@ 0x30
 801aff2:	2b09      	cmp	r3, #9
 801aff4:	d94b      	bls.n	801b08e <_vfiprintf_r+0x1a2>
 801aff6:	b1b0      	cbz	r0, 801b026 <_vfiprintf_r+0x13a>
 801aff8:	9207      	str	r2, [sp, #28]
 801affa:	e014      	b.n	801b026 <_vfiprintf_r+0x13a>
 801affc:	eba0 0308 	sub.w	r3, r0, r8
 801b000:	fa09 f303 	lsl.w	r3, r9, r3
 801b004:	4313      	orrs	r3, r2
 801b006:	9304      	str	r3, [sp, #16]
 801b008:	46a2      	mov	sl, r4
 801b00a:	e7d2      	b.n	801afb2 <_vfiprintf_r+0xc6>
 801b00c:	9b03      	ldr	r3, [sp, #12]
 801b00e:	1d19      	adds	r1, r3, #4
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	9103      	str	r1, [sp, #12]
 801b014:	2b00      	cmp	r3, #0
 801b016:	bfbb      	ittet	lt
 801b018:	425b      	neglt	r3, r3
 801b01a:	f042 0202 	orrlt.w	r2, r2, #2
 801b01e:	9307      	strge	r3, [sp, #28]
 801b020:	9307      	strlt	r3, [sp, #28]
 801b022:	bfb8      	it	lt
 801b024:	9204      	strlt	r2, [sp, #16]
 801b026:	7823      	ldrb	r3, [r4, #0]
 801b028:	2b2e      	cmp	r3, #46	@ 0x2e
 801b02a:	d10a      	bne.n	801b042 <_vfiprintf_r+0x156>
 801b02c:	7863      	ldrb	r3, [r4, #1]
 801b02e:	2b2a      	cmp	r3, #42	@ 0x2a
 801b030:	d132      	bne.n	801b098 <_vfiprintf_r+0x1ac>
 801b032:	9b03      	ldr	r3, [sp, #12]
 801b034:	1d1a      	adds	r2, r3, #4
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	9203      	str	r2, [sp, #12]
 801b03a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b03e:	3402      	adds	r4, #2
 801b040:	9305      	str	r3, [sp, #20]
 801b042:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b118 <_vfiprintf_r+0x22c>
 801b046:	7821      	ldrb	r1, [r4, #0]
 801b048:	2203      	movs	r2, #3
 801b04a:	4650      	mov	r0, sl
 801b04c:	f7e5 f960 	bl	8000310 <memchr>
 801b050:	b138      	cbz	r0, 801b062 <_vfiprintf_r+0x176>
 801b052:	9b04      	ldr	r3, [sp, #16]
 801b054:	eba0 000a 	sub.w	r0, r0, sl
 801b058:	2240      	movs	r2, #64	@ 0x40
 801b05a:	4082      	lsls	r2, r0
 801b05c:	4313      	orrs	r3, r2
 801b05e:	3401      	adds	r4, #1
 801b060:	9304      	str	r3, [sp, #16]
 801b062:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b066:	4829      	ldr	r0, [pc, #164]	@ (801b10c <_vfiprintf_r+0x220>)
 801b068:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b06c:	2206      	movs	r2, #6
 801b06e:	f7e5 f94f 	bl	8000310 <memchr>
 801b072:	2800      	cmp	r0, #0
 801b074:	d03f      	beq.n	801b0f6 <_vfiprintf_r+0x20a>
 801b076:	4b26      	ldr	r3, [pc, #152]	@ (801b110 <_vfiprintf_r+0x224>)
 801b078:	bb1b      	cbnz	r3, 801b0c2 <_vfiprintf_r+0x1d6>
 801b07a:	9b03      	ldr	r3, [sp, #12]
 801b07c:	3307      	adds	r3, #7
 801b07e:	f023 0307 	bic.w	r3, r3, #7
 801b082:	3308      	adds	r3, #8
 801b084:	9303      	str	r3, [sp, #12]
 801b086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b088:	443b      	add	r3, r7
 801b08a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b08c:	e76a      	b.n	801af64 <_vfiprintf_r+0x78>
 801b08e:	fb0c 3202 	mla	r2, ip, r2, r3
 801b092:	460c      	mov	r4, r1
 801b094:	2001      	movs	r0, #1
 801b096:	e7a8      	b.n	801afea <_vfiprintf_r+0xfe>
 801b098:	2300      	movs	r3, #0
 801b09a:	3401      	adds	r4, #1
 801b09c:	9305      	str	r3, [sp, #20]
 801b09e:	4619      	mov	r1, r3
 801b0a0:	f04f 0c0a 	mov.w	ip, #10
 801b0a4:	4620      	mov	r0, r4
 801b0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b0aa:	3a30      	subs	r2, #48	@ 0x30
 801b0ac:	2a09      	cmp	r2, #9
 801b0ae:	d903      	bls.n	801b0b8 <_vfiprintf_r+0x1cc>
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d0c6      	beq.n	801b042 <_vfiprintf_r+0x156>
 801b0b4:	9105      	str	r1, [sp, #20]
 801b0b6:	e7c4      	b.n	801b042 <_vfiprintf_r+0x156>
 801b0b8:	fb0c 2101 	mla	r1, ip, r1, r2
 801b0bc:	4604      	mov	r4, r0
 801b0be:	2301      	movs	r3, #1
 801b0c0:	e7f0      	b.n	801b0a4 <_vfiprintf_r+0x1b8>
 801b0c2:	ab03      	add	r3, sp, #12
 801b0c4:	9300      	str	r3, [sp, #0]
 801b0c6:	462a      	mov	r2, r5
 801b0c8:	4b12      	ldr	r3, [pc, #72]	@ (801b114 <_vfiprintf_r+0x228>)
 801b0ca:	a904      	add	r1, sp, #16
 801b0cc:	4630      	mov	r0, r6
 801b0ce:	f7fc fb57 	bl	8017780 <_printf_float>
 801b0d2:	4607      	mov	r7, r0
 801b0d4:	1c78      	adds	r0, r7, #1
 801b0d6:	d1d6      	bne.n	801b086 <_vfiprintf_r+0x19a>
 801b0d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b0da:	07d9      	lsls	r1, r3, #31
 801b0dc:	d405      	bmi.n	801b0ea <_vfiprintf_r+0x1fe>
 801b0de:	89ab      	ldrh	r3, [r5, #12]
 801b0e0:	059a      	lsls	r2, r3, #22
 801b0e2:	d402      	bmi.n	801b0ea <_vfiprintf_r+0x1fe>
 801b0e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b0e6:	f7fd fba7 	bl	8018838 <__retarget_lock_release_recursive>
 801b0ea:	89ab      	ldrh	r3, [r5, #12]
 801b0ec:	065b      	lsls	r3, r3, #25
 801b0ee:	f53f af1f 	bmi.w	801af30 <_vfiprintf_r+0x44>
 801b0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b0f4:	e71e      	b.n	801af34 <_vfiprintf_r+0x48>
 801b0f6:	ab03      	add	r3, sp, #12
 801b0f8:	9300      	str	r3, [sp, #0]
 801b0fa:	462a      	mov	r2, r5
 801b0fc:	4b05      	ldr	r3, [pc, #20]	@ (801b114 <_vfiprintf_r+0x228>)
 801b0fe:	a904      	add	r1, sp, #16
 801b100:	4630      	mov	r0, r6
 801b102:	f7fc fdc5 	bl	8017c90 <_printf_i>
 801b106:	e7e4      	b.n	801b0d2 <_vfiprintf_r+0x1e6>
 801b108:	0801c679 	.word	0x0801c679
 801b10c:	0801c683 	.word	0x0801c683
 801b110:	08017781 	.word	0x08017781
 801b114:	0801aec7 	.word	0x0801aec7
 801b118:	0801c67f 	.word	0x0801c67f

0801b11c <__sflush_r>:
 801b11c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b124:	0716      	lsls	r6, r2, #28
 801b126:	4605      	mov	r5, r0
 801b128:	460c      	mov	r4, r1
 801b12a:	d454      	bmi.n	801b1d6 <__sflush_r+0xba>
 801b12c:	684b      	ldr	r3, [r1, #4]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	dc02      	bgt.n	801b138 <__sflush_r+0x1c>
 801b132:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b134:	2b00      	cmp	r3, #0
 801b136:	dd48      	ble.n	801b1ca <__sflush_r+0xae>
 801b138:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b13a:	2e00      	cmp	r6, #0
 801b13c:	d045      	beq.n	801b1ca <__sflush_r+0xae>
 801b13e:	2300      	movs	r3, #0
 801b140:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b144:	682f      	ldr	r7, [r5, #0]
 801b146:	6a21      	ldr	r1, [r4, #32]
 801b148:	602b      	str	r3, [r5, #0]
 801b14a:	d030      	beq.n	801b1ae <__sflush_r+0x92>
 801b14c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b14e:	89a3      	ldrh	r3, [r4, #12]
 801b150:	0759      	lsls	r1, r3, #29
 801b152:	d505      	bpl.n	801b160 <__sflush_r+0x44>
 801b154:	6863      	ldr	r3, [r4, #4]
 801b156:	1ad2      	subs	r2, r2, r3
 801b158:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b15a:	b10b      	cbz	r3, 801b160 <__sflush_r+0x44>
 801b15c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b15e:	1ad2      	subs	r2, r2, r3
 801b160:	2300      	movs	r3, #0
 801b162:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b164:	6a21      	ldr	r1, [r4, #32]
 801b166:	4628      	mov	r0, r5
 801b168:	47b0      	blx	r6
 801b16a:	1c43      	adds	r3, r0, #1
 801b16c:	89a3      	ldrh	r3, [r4, #12]
 801b16e:	d106      	bne.n	801b17e <__sflush_r+0x62>
 801b170:	6829      	ldr	r1, [r5, #0]
 801b172:	291d      	cmp	r1, #29
 801b174:	d82b      	bhi.n	801b1ce <__sflush_r+0xb2>
 801b176:	4a2a      	ldr	r2, [pc, #168]	@ (801b220 <__sflush_r+0x104>)
 801b178:	410a      	asrs	r2, r1
 801b17a:	07d6      	lsls	r6, r2, #31
 801b17c:	d427      	bmi.n	801b1ce <__sflush_r+0xb2>
 801b17e:	2200      	movs	r2, #0
 801b180:	6062      	str	r2, [r4, #4]
 801b182:	04d9      	lsls	r1, r3, #19
 801b184:	6922      	ldr	r2, [r4, #16]
 801b186:	6022      	str	r2, [r4, #0]
 801b188:	d504      	bpl.n	801b194 <__sflush_r+0x78>
 801b18a:	1c42      	adds	r2, r0, #1
 801b18c:	d101      	bne.n	801b192 <__sflush_r+0x76>
 801b18e:	682b      	ldr	r3, [r5, #0]
 801b190:	b903      	cbnz	r3, 801b194 <__sflush_r+0x78>
 801b192:	6560      	str	r0, [r4, #84]	@ 0x54
 801b194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b196:	602f      	str	r7, [r5, #0]
 801b198:	b1b9      	cbz	r1, 801b1ca <__sflush_r+0xae>
 801b19a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b19e:	4299      	cmp	r1, r3
 801b1a0:	d002      	beq.n	801b1a8 <__sflush_r+0x8c>
 801b1a2:	4628      	mov	r0, r5
 801b1a4:	f7fe f93e 	bl	8019424 <_free_r>
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	6363      	str	r3, [r4, #52]	@ 0x34
 801b1ac:	e00d      	b.n	801b1ca <__sflush_r+0xae>
 801b1ae:	2301      	movs	r3, #1
 801b1b0:	4628      	mov	r0, r5
 801b1b2:	47b0      	blx	r6
 801b1b4:	4602      	mov	r2, r0
 801b1b6:	1c50      	adds	r0, r2, #1
 801b1b8:	d1c9      	bne.n	801b14e <__sflush_r+0x32>
 801b1ba:	682b      	ldr	r3, [r5, #0]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d0c6      	beq.n	801b14e <__sflush_r+0x32>
 801b1c0:	2b1d      	cmp	r3, #29
 801b1c2:	d001      	beq.n	801b1c8 <__sflush_r+0xac>
 801b1c4:	2b16      	cmp	r3, #22
 801b1c6:	d11e      	bne.n	801b206 <__sflush_r+0xea>
 801b1c8:	602f      	str	r7, [r5, #0]
 801b1ca:	2000      	movs	r0, #0
 801b1cc:	e022      	b.n	801b214 <__sflush_r+0xf8>
 801b1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b1d2:	b21b      	sxth	r3, r3
 801b1d4:	e01b      	b.n	801b20e <__sflush_r+0xf2>
 801b1d6:	690f      	ldr	r7, [r1, #16]
 801b1d8:	2f00      	cmp	r7, #0
 801b1da:	d0f6      	beq.n	801b1ca <__sflush_r+0xae>
 801b1dc:	0793      	lsls	r3, r2, #30
 801b1de:	680e      	ldr	r6, [r1, #0]
 801b1e0:	bf08      	it	eq
 801b1e2:	694b      	ldreq	r3, [r1, #20]
 801b1e4:	600f      	str	r7, [r1, #0]
 801b1e6:	bf18      	it	ne
 801b1e8:	2300      	movne	r3, #0
 801b1ea:	eba6 0807 	sub.w	r8, r6, r7
 801b1ee:	608b      	str	r3, [r1, #8]
 801b1f0:	f1b8 0f00 	cmp.w	r8, #0
 801b1f4:	dde9      	ble.n	801b1ca <__sflush_r+0xae>
 801b1f6:	6a21      	ldr	r1, [r4, #32]
 801b1f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b1fa:	4643      	mov	r3, r8
 801b1fc:	463a      	mov	r2, r7
 801b1fe:	4628      	mov	r0, r5
 801b200:	47b0      	blx	r6
 801b202:	2800      	cmp	r0, #0
 801b204:	dc08      	bgt.n	801b218 <__sflush_r+0xfc>
 801b206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b20a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b20e:	81a3      	strh	r3, [r4, #12]
 801b210:	f04f 30ff 	mov.w	r0, #4294967295
 801b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b218:	4407      	add	r7, r0
 801b21a:	eba8 0800 	sub.w	r8, r8, r0
 801b21e:	e7e7      	b.n	801b1f0 <__sflush_r+0xd4>
 801b220:	dfbffffe 	.word	0xdfbffffe

0801b224 <_fflush_r>:
 801b224:	b538      	push	{r3, r4, r5, lr}
 801b226:	690b      	ldr	r3, [r1, #16]
 801b228:	4605      	mov	r5, r0
 801b22a:	460c      	mov	r4, r1
 801b22c:	b913      	cbnz	r3, 801b234 <_fflush_r+0x10>
 801b22e:	2500      	movs	r5, #0
 801b230:	4628      	mov	r0, r5
 801b232:	bd38      	pop	{r3, r4, r5, pc}
 801b234:	b118      	cbz	r0, 801b23e <_fflush_r+0x1a>
 801b236:	6a03      	ldr	r3, [r0, #32]
 801b238:	b90b      	cbnz	r3, 801b23e <_fflush_r+0x1a>
 801b23a:	f7fd f8e1 	bl	8018400 <__sinit>
 801b23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d0f3      	beq.n	801b22e <_fflush_r+0xa>
 801b246:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b248:	07d0      	lsls	r0, r2, #31
 801b24a:	d404      	bmi.n	801b256 <_fflush_r+0x32>
 801b24c:	0599      	lsls	r1, r3, #22
 801b24e:	d402      	bmi.n	801b256 <_fflush_r+0x32>
 801b250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b252:	f7fd faf0 	bl	8018836 <__retarget_lock_acquire_recursive>
 801b256:	4628      	mov	r0, r5
 801b258:	4621      	mov	r1, r4
 801b25a:	f7ff ff5f 	bl	801b11c <__sflush_r>
 801b25e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b260:	07da      	lsls	r2, r3, #31
 801b262:	4605      	mov	r5, r0
 801b264:	d4e4      	bmi.n	801b230 <_fflush_r+0xc>
 801b266:	89a3      	ldrh	r3, [r4, #12]
 801b268:	059b      	lsls	r3, r3, #22
 801b26a:	d4e1      	bmi.n	801b230 <_fflush_r+0xc>
 801b26c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b26e:	f7fd fae3 	bl	8018838 <__retarget_lock_release_recursive>
 801b272:	e7dd      	b.n	801b230 <_fflush_r+0xc>

0801b274 <__swhatbuf_r>:
 801b274:	b570      	push	{r4, r5, r6, lr}
 801b276:	460c      	mov	r4, r1
 801b278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b27c:	2900      	cmp	r1, #0
 801b27e:	b096      	sub	sp, #88	@ 0x58
 801b280:	4615      	mov	r5, r2
 801b282:	461e      	mov	r6, r3
 801b284:	da0d      	bge.n	801b2a2 <__swhatbuf_r+0x2e>
 801b286:	89a3      	ldrh	r3, [r4, #12]
 801b288:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b28c:	f04f 0100 	mov.w	r1, #0
 801b290:	bf14      	ite	ne
 801b292:	2340      	movne	r3, #64	@ 0x40
 801b294:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b298:	2000      	movs	r0, #0
 801b29a:	6031      	str	r1, [r6, #0]
 801b29c:	602b      	str	r3, [r5, #0]
 801b29e:	b016      	add	sp, #88	@ 0x58
 801b2a0:	bd70      	pop	{r4, r5, r6, pc}
 801b2a2:	466a      	mov	r2, sp
 801b2a4:	f000 f874 	bl	801b390 <_fstat_r>
 801b2a8:	2800      	cmp	r0, #0
 801b2aa:	dbec      	blt.n	801b286 <__swhatbuf_r+0x12>
 801b2ac:	9901      	ldr	r1, [sp, #4]
 801b2ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b2b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b2b6:	4259      	negs	r1, r3
 801b2b8:	4159      	adcs	r1, r3
 801b2ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b2be:	e7eb      	b.n	801b298 <__swhatbuf_r+0x24>

0801b2c0 <__smakebuf_r>:
 801b2c0:	898b      	ldrh	r3, [r1, #12]
 801b2c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b2c4:	079d      	lsls	r5, r3, #30
 801b2c6:	4606      	mov	r6, r0
 801b2c8:	460c      	mov	r4, r1
 801b2ca:	d507      	bpl.n	801b2dc <__smakebuf_r+0x1c>
 801b2cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b2d0:	6023      	str	r3, [r4, #0]
 801b2d2:	6123      	str	r3, [r4, #16]
 801b2d4:	2301      	movs	r3, #1
 801b2d6:	6163      	str	r3, [r4, #20]
 801b2d8:	b003      	add	sp, #12
 801b2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2dc:	ab01      	add	r3, sp, #4
 801b2de:	466a      	mov	r2, sp
 801b2e0:	f7ff ffc8 	bl	801b274 <__swhatbuf_r>
 801b2e4:	9f00      	ldr	r7, [sp, #0]
 801b2e6:	4605      	mov	r5, r0
 801b2e8:	4639      	mov	r1, r7
 801b2ea:	4630      	mov	r0, r6
 801b2ec:	f7fe f90e 	bl	801950c <_malloc_r>
 801b2f0:	b948      	cbnz	r0, 801b306 <__smakebuf_r+0x46>
 801b2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2f6:	059a      	lsls	r2, r3, #22
 801b2f8:	d4ee      	bmi.n	801b2d8 <__smakebuf_r+0x18>
 801b2fa:	f023 0303 	bic.w	r3, r3, #3
 801b2fe:	f043 0302 	orr.w	r3, r3, #2
 801b302:	81a3      	strh	r3, [r4, #12]
 801b304:	e7e2      	b.n	801b2cc <__smakebuf_r+0xc>
 801b306:	89a3      	ldrh	r3, [r4, #12]
 801b308:	6020      	str	r0, [r4, #0]
 801b30a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b30e:	81a3      	strh	r3, [r4, #12]
 801b310:	9b01      	ldr	r3, [sp, #4]
 801b312:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b316:	b15b      	cbz	r3, 801b330 <__smakebuf_r+0x70>
 801b318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b31c:	4630      	mov	r0, r6
 801b31e:	f000 f849 	bl	801b3b4 <_isatty_r>
 801b322:	b128      	cbz	r0, 801b330 <__smakebuf_r+0x70>
 801b324:	89a3      	ldrh	r3, [r4, #12]
 801b326:	f023 0303 	bic.w	r3, r3, #3
 801b32a:	f043 0301 	orr.w	r3, r3, #1
 801b32e:	81a3      	strh	r3, [r4, #12]
 801b330:	89a3      	ldrh	r3, [r4, #12]
 801b332:	431d      	orrs	r5, r3
 801b334:	81a5      	strh	r5, [r4, #12]
 801b336:	e7cf      	b.n	801b2d8 <__smakebuf_r+0x18>

0801b338 <memmove>:
 801b338:	4288      	cmp	r0, r1
 801b33a:	b510      	push	{r4, lr}
 801b33c:	eb01 0402 	add.w	r4, r1, r2
 801b340:	d902      	bls.n	801b348 <memmove+0x10>
 801b342:	4284      	cmp	r4, r0
 801b344:	4623      	mov	r3, r4
 801b346:	d807      	bhi.n	801b358 <memmove+0x20>
 801b348:	1e43      	subs	r3, r0, #1
 801b34a:	42a1      	cmp	r1, r4
 801b34c:	d008      	beq.n	801b360 <memmove+0x28>
 801b34e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b352:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b356:	e7f8      	b.n	801b34a <memmove+0x12>
 801b358:	4402      	add	r2, r0
 801b35a:	4601      	mov	r1, r0
 801b35c:	428a      	cmp	r2, r1
 801b35e:	d100      	bne.n	801b362 <memmove+0x2a>
 801b360:	bd10      	pop	{r4, pc}
 801b362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b36a:	e7f7      	b.n	801b35c <memmove+0x24>

0801b36c <strncmp>:
 801b36c:	b510      	push	{r4, lr}
 801b36e:	b16a      	cbz	r2, 801b38c <strncmp+0x20>
 801b370:	3901      	subs	r1, #1
 801b372:	1884      	adds	r4, r0, r2
 801b374:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b378:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b37c:	429a      	cmp	r2, r3
 801b37e:	d103      	bne.n	801b388 <strncmp+0x1c>
 801b380:	42a0      	cmp	r0, r4
 801b382:	d001      	beq.n	801b388 <strncmp+0x1c>
 801b384:	2a00      	cmp	r2, #0
 801b386:	d1f5      	bne.n	801b374 <strncmp+0x8>
 801b388:	1ad0      	subs	r0, r2, r3
 801b38a:	bd10      	pop	{r4, pc}
 801b38c:	4610      	mov	r0, r2
 801b38e:	e7fc      	b.n	801b38a <strncmp+0x1e>

0801b390 <_fstat_r>:
 801b390:	b538      	push	{r3, r4, r5, lr}
 801b392:	4d07      	ldr	r5, [pc, #28]	@ (801b3b0 <_fstat_r+0x20>)
 801b394:	2300      	movs	r3, #0
 801b396:	4604      	mov	r4, r0
 801b398:	4608      	mov	r0, r1
 801b39a:	4611      	mov	r1, r2
 801b39c:	602b      	str	r3, [r5, #0]
 801b39e:	f7ed f967 	bl	8008670 <_fstat>
 801b3a2:	1c43      	adds	r3, r0, #1
 801b3a4:	d102      	bne.n	801b3ac <_fstat_r+0x1c>
 801b3a6:	682b      	ldr	r3, [r5, #0]
 801b3a8:	b103      	cbz	r3, 801b3ac <_fstat_r+0x1c>
 801b3aa:	6023      	str	r3, [r4, #0]
 801b3ac:	bd38      	pop	{r3, r4, r5, pc}
 801b3ae:	bf00      	nop
 801b3b0:	240020a4 	.word	0x240020a4

0801b3b4 <_isatty_r>:
 801b3b4:	b538      	push	{r3, r4, r5, lr}
 801b3b6:	4d06      	ldr	r5, [pc, #24]	@ (801b3d0 <_isatty_r+0x1c>)
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	4604      	mov	r4, r0
 801b3bc:	4608      	mov	r0, r1
 801b3be:	602b      	str	r3, [r5, #0]
 801b3c0:	f7ed f966 	bl	8008690 <_isatty>
 801b3c4:	1c43      	adds	r3, r0, #1
 801b3c6:	d102      	bne.n	801b3ce <_isatty_r+0x1a>
 801b3c8:	682b      	ldr	r3, [r5, #0]
 801b3ca:	b103      	cbz	r3, 801b3ce <_isatty_r+0x1a>
 801b3cc:	6023      	str	r3, [r4, #0]
 801b3ce:	bd38      	pop	{r3, r4, r5, pc}
 801b3d0:	240020a4 	.word	0x240020a4

0801b3d4 <_sbrk_r>:
 801b3d4:	b538      	push	{r3, r4, r5, lr}
 801b3d6:	4d06      	ldr	r5, [pc, #24]	@ (801b3f0 <_sbrk_r+0x1c>)
 801b3d8:	2300      	movs	r3, #0
 801b3da:	4604      	mov	r4, r0
 801b3dc:	4608      	mov	r0, r1
 801b3de:	602b      	str	r3, [r5, #0]
 801b3e0:	f7ed f96e 	bl	80086c0 <_sbrk>
 801b3e4:	1c43      	adds	r3, r0, #1
 801b3e6:	d102      	bne.n	801b3ee <_sbrk_r+0x1a>
 801b3e8:	682b      	ldr	r3, [r5, #0]
 801b3ea:	b103      	cbz	r3, 801b3ee <_sbrk_r+0x1a>
 801b3ec:	6023      	str	r3, [r4, #0]
 801b3ee:	bd38      	pop	{r3, r4, r5, pc}
 801b3f0:	240020a4 	.word	0x240020a4
 801b3f4:	00000000 	.word	0x00000000

0801b3f8 <nan>:
 801b3f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b400 <nan+0x8>
 801b3fc:	4770      	bx	lr
 801b3fe:	bf00      	nop
 801b400:	00000000 	.word	0x00000000
 801b404:	7ff80000 	.word	0x7ff80000

0801b408 <__assert_func>:
 801b408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b40a:	4614      	mov	r4, r2
 801b40c:	461a      	mov	r2, r3
 801b40e:	4b09      	ldr	r3, [pc, #36]	@ (801b434 <__assert_func+0x2c>)
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	4605      	mov	r5, r0
 801b414:	68d8      	ldr	r0, [r3, #12]
 801b416:	b954      	cbnz	r4, 801b42e <__assert_func+0x26>
 801b418:	4b07      	ldr	r3, [pc, #28]	@ (801b438 <__assert_func+0x30>)
 801b41a:	461c      	mov	r4, r3
 801b41c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b420:	9100      	str	r1, [sp, #0]
 801b422:	462b      	mov	r3, r5
 801b424:	4905      	ldr	r1, [pc, #20]	@ (801b43c <__assert_func+0x34>)
 801b426:	f000 fba7 	bl	801bb78 <fiprintf>
 801b42a:	f000 fbb7 	bl	801bb9c <abort>
 801b42e:	4b04      	ldr	r3, [pc, #16]	@ (801b440 <__assert_func+0x38>)
 801b430:	e7f4      	b.n	801b41c <__assert_func+0x14>
 801b432:	bf00      	nop
 801b434:	24000174 	.word	0x24000174
 801b438:	0801c6cd 	.word	0x0801c6cd
 801b43c:	0801c69f 	.word	0x0801c69f
 801b440:	0801c692 	.word	0x0801c692

0801b444 <_calloc_r>:
 801b444:	b570      	push	{r4, r5, r6, lr}
 801b446:	fba1 5402 	umull	r5, r4, r1, r2
 801b44a:	b93c      	cbnz	r4, 801b45c <_calloc_r+0x18>
 801b44c:	4629      	mov	r1, r5
 801b44e:	f7fe f85d 	bl	801950c <_malloc_r>
 801b452:	4606      	mov	r6, r0
 801b454:	b928      	cbnz	r0, 801b462 <_calloc_r+0x1e>
 801b456:	2600      	movs	r6, #0
 801b458:	4630      	mov	r0, r6
 801b45a:	bd70      	pop	{r4, r5, r6, pc}
 801b45c:	220c      	movs	r2, #12
 801b45e:	6002      	str	r2, [r0, #0]
 801b460:	e7f9      	b.n	801b456 <_calloc_r+0x12>
 801b462:	462a      	mov	r2, r5
 801b464:	4621      	mov	r1, r4
 801b466:	f7fd f969 	bl	801873c <memset>
 801b46a:	e7f5      	b.n	801b458 <_calloc_r+0x14>

0801b46c <rshift>:
 801b46c:	6903      	ldr	r3, [r0, #16]
 801b46e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b476:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b47a:	f100 0414 	add.w	r4, r0, #20
 801b47e:	dd45      	ble.n	801b50c <rshift+0xa0>
 801b480:	f011 011f 	ands.w	r1, r1, #31
 801b484:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b488:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b48c:	d10c      	bne.n	801b4a8 <rshift+0x3c>
 801b48e:	f100 0710 	add.w	r7, r0, #16
 801b492:	4629      	mov	r1, r5
 801b494:	42b1      	cmp	r1, r6
 801b496:	d334      	bcc.n	801b502 <rshift+0x96>
 801b498:	1a9b      	subs	r3, r3, r2
 801b49a:	009b      	lsls	r3, r3, #2
 801b49c:	1eea      	subs	r2, r5, #3
 801b49e:	4296      	cmp	r6, r2
 801b4a0:	bf38      	it	cc
 801b4a2:	2300      	movcc	r3, #0
 801b4a4:	4423      	add	r3, r4
 801b4a6:	e015      	b.n	801b4d4 <rshift+0x68>
 801b4a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b4ac:	f1c1 0820 	rsb	r8, r1, #32
 801b4b0:	40cf      	lsrs	r7, r1
 801b4b2:	f105 0e04 	add.w	lr, r5, #4
 801b4b6:	46a1      	mov	r9, r4
 801b4b8:	4576      	cmp	r6, lr
 801b4ba:	46f4      	mov	ip, lr
 801b4bc:	d815      	bhi.n	801b4ea <rshift+0x7e>
 801b4be:	1a9a      	subs	r2, r3, r2
 801b4c0:	0092      	lsls	r2, r2, #2
 801b4c2:	3a04      	subs	r2, #4
 801b4c4:	3501      	adds	r5, #1
 801b4c6:	42ae      	cmp	r6, r5
 801b4c8:	bf38      	it	cc
 801b4ca:	2200      	movcc	r2, #0
 801b4cc:	18a3      	adds	r3, r4, r2
 801b4ce:	50a7      	str	r7, [r4, r2]
 801b4d0:	b107      	cbz	r7, 801b4d4 <rshift+0x68>
 801b4d2:	3304      	adds	r3, #4
 801b4d4:	1b1a      	subs	r2, r3, r4
 801b4d6:	42a3      	cmp	r3, r4
 801b4d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b4dc:	bf08      	it	eq
 801b4de:	2300      	moveq	r3, #0
 801b4e0:	6102      	str	r2, [r0, #16]
 801b4e2:	bf08      	it	eq
 801b4e4:	6143      	streq	r3, [r0, #20]
 801b4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b4ea:	f8dc c000 	ldr.w	ip, [ip]
 801b4ee:	fa0c fc08 	lsl.w	ip, ip, r8
 801b4f2:	ea4c 0707 	orr.w	r7, ip, r7
 801b4f6:	f849 7b04 	str.w	r7, [r9], #4
 801b4fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b4fe:	40cf      	lsrs	r7, r1
 801b500:	e7da      	b.n	801b4b8 <rshift+0x4c>
 801b502:	f851 cb04 	ldr.w	ip, [r1], #4
 801b506:	f847 cf04 	str.w	ip, [r7, #4]!
 801b50a:	e7c3      	b.n	801b494 <rshift+0x28>
 801b50c:	4623      	mov	r3, r4
 801b50e:	e7e1      	b.n	801b4d4 <rshift+0x68>

0801b510 <__hexdig_fun>:
 801b510:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801b514:	2b09      	cmp	r3, #9
 801b516:	d802      	bhi.n	801b51e <__hexdig_fun+0xe>
 801b518:	3820      	subs	r0, #32
 801b51a:	b2c0      	uxtb	r0, r0
 801b51c:	4770      	bx	lr
 801b51e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801b522:	2b05      	cmp	r3, #5
 801b524:	d801      	bhi.n	801b52a <__hexdig_fun+0x1a>
 801b526:	3847      	subs	r0, #71	@ 0x47
 801b528:	e7f7      	b.n	801b51a <__hexdig_fun+0xa>
 801b52a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801b52e:	2b05      	cmp	r3, #5
 801b530:	d801      	bhi.n	801b536 <__hexdig_fun+0x26>
 801b532:	3827      	subs	r0, #39	@ 0x27
 801b534:	e7f1      	b.n	801b51a <__hexdig_fun+0xa>
 801b536:	2000      	movs	r0, #0
 801b538:	4770      	bx	lr
	...

0801b53c <__gethex>:
 801b53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b540:	b085      	sub	sp, #20
 801b542:	468a      	mov	sl, r1
 801b544:	9302      	str	r3, [sp, #8]
 801b546:	680b      	ldr	r3, [r1, #0]
 801b548:	9001      	str	r0, [sp, #4]
 801b54a:	4690      	mov	r8, r2
 801b54c:	1c9c      	adds	r4, r3, #2
 801b54e:	46a1      	mov	r9, r4
 801b550:	f814 0b01 	ldrb.w	r0, [r4], #1
 801b554:	2830      	cmp	r0, #48	@ 0x30
 801b556:	d0fa      	beq.n	801b54e <__gethex+0x12>
 801b558:	eba9 0303 	sub.w	r3, r9, r3
 801b55c:	f1a3 0b02 	sub.w	fp, r3, #2
 801b560:	f7ff ffd6 	bl	801b510 <__hexdig_fun>
 801b564:	4605      	mov	r5, r0
 801b566:	2800      	cmp	r0, #0
 801b568:	d168      	bne.n	801b63c <__gethex+0x100>
 801b56a:	49a0      	ldr	r1, [pc, #640]	@ (801b7ec <__gethex+0x2b0>)
 801b56c:	2201      	movs	r2, #1
 801b56e:	4648      	mov	r0, r9
 801b570:	f7ff fefc 	bl	801b36c <strncmp>
 801b574:	4607      	mov	r7, r0
 801b576:	2800      	cmp	r0, #0
 801b578:	d167      	bne.n	801b64a <__gethex+0x10e>
 801b57a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801b57e:	4626      	mov	r6, r4
 801b580:	f7ff ffc6 	bl	801b510 <__hexdig_fun>
 801b584:	2800      	cmp	r0, #0
 801b586:	d062      	beq.n	801b64e <__gethex+0x112>
 801b588:	4623      	mov	r3, r4
 801b58a:	7818      	ldrb	r0, [r3, #0]
 801b58c:	2830      	cmp	r0, #48	@ 0x30
 801b58e:	4699      	mov	r9, r3
 801b590:	f103 0301 	add.w	r3, r3, #1
 801b594:	d0f9      	beq.n	801b58a <__gethex+0x4e>
 801b596:	f7ff ffbb 	bl	801b510 <__hexdig_fun>
 801b59a:	fab0 f580 	clz	r5, r0
 801b59e:	096d      	lsrs	r5, r5, #5
 801b5a0:	f04f 0b01 	mov.w	fp, #1
 801b5a4:	464a      	mov	r2, r9
 801b5a6:	4616      	mov	r6, r2
 801b5a8:	3201      	adds	r2, #1
 801b5aa:	7830      	ldrb	r0, [r6, #0]
 801b5ac:	f7ff ffb0 	bl	801b510 <__hexdig_fun>
 801b5b0:	2800      	cmp	r0, #0
 801b5b2:	d1f8      	bne.n	801b5a6 <__gethex+0x6a>
 801b5b4:	498d      	ldr	r1, [pc, #564]	@ (801b7ec <__gethex+0x2b0>)
 801b5b6:	2201      	movs	r2, #1
 801b5b8:	4630      	mov	r0, r6
 801b5ba:	f7ff fed7 	bl	801b36c <strncmp>
 801b5be:	2800      	cmp	r0, #0
 801b5c0:	d13f      	bne.n	801b642 <__gethex+0x106>
 801b5c2:	b944      	cbnz	r4, 801b5d6 <__gethex+0x9a>
 801b5c4:	1c74      	adds	r4, r6, #1
 801b5c6:	4622      	mov	r2, r4
 801b5c8:	4616      	mov	r6, r2
 801b5ca:	3201      	adds	r2, #1
 801b5cc:	7830      	ldrb	r0, [r6, #0]
 801b5ce:	f7ff ff9f 	bl	801b510 <__hexdig_fun>
 801b5d2:	2800      	cmp	r0, #0
 801b5d4:	d1f8      	bne.n	801b5c8 <__gethex+0x8c>
 801b5d6:	1ba4      	subs	r4, r4, r6
 801b5d8:	00a7      	lsls	r7, r4, #2
 801b5da:	7833      	ldrb	r3, [r6, #0]
 801b5dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801b5e0:	2b50      	cmp	r3, #80	@ 0x50
 801b5e2:	d13e      	bne.n	801b662 <__gethex+0x126>
 801b5e4:	7873      	ldrb	r3, [r6, #1]
 801b5e6:	2b2b      	cmp	r3, #43	@ 0x2b
 801b5e8:	d033      	beq.n	801b652 <__gethex+0x116>
 801b5ea:	2b2d      	cmp	r3, #45	@ 0x2d
 801b5ec:	d034      	beq.n	801b658 <__gethex+0x11c>
 801b5ee:	1c71      	adds	r1, r6, #1
 801b5f0:	2400      	movs	r4, #0
 801b5f2:	7808      	ldrb	r0, [r1, #0]
 801b5f4:	f7ff ff8c 	bl	801b510 <__hexdig_fun>
 801b5f8:	1e43      	subs	r3, r0, #1
 801b5fa:	b2db      	uxtb	r3, r3
 801b5fc:	2b18      	cmp	r3, #24
 801b5fe:	d830      	bhi.n	801b662 <__gethex+0x126>
 801b600:	f1a0 0210 	sub.w	r2, r0, #16
 801b604:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b608:	f7ff ff82 	bl	801b510 <__hexdig_fun>
 801b60c:	f100 3cff 	add.w	ip, r0, #4294967295
 801b610:	fa5f fc8c 	uxtb.w	ip, ip
 801b614:	f1bc 0f18 	cmp.w	ip, #24
 801b618:	f04f 030a 	mov.w	r3, #10
 801b61c:	d91e      	bls.n	801b65c <__gethex+0x120>
 801b61e:	b104      	cbz	r4, 801b622 <__gethex+0xe6>
 801b620:	4252      	negs	r2, r2
 801b622:	4417      	add	r7, r2
 801b624:	f8ca 1000 	str.w	r1, [sl]
 801b628:	b1ed      	cbz	r5, 801b666 <__gethex+0x12a>
 801b62a:	f1bb 0f00 	cmp.w	fp, #0
 801b62e:	bf0c      	ite	eq
 801b630:	2506      	moveq	r5, #6
 801b632:	2500      	movne	r5, #0
 801b634:	4628      	mov	r0, r5
 801b636:	b005      	add	sp, #20
 801b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b63c:	2500      	movs	r5, #0
 801b63e:	462c      	mov	r4, r5
 801b640:	e7b0      	b.n	801b5a4 <__gethex+0x68>
 801b642:	2c00      	cmp	r4, #0
 801b644:	d1c7      	bne.n	801b5d6 <__gethex+0x9a>
 801b646:	4627      	mov	r7, r4
 801b648:	e7c7      	b.n	801b5da <__gethex+0x9e>
 801b64a:	464e      	mov	r6, r9
 801b64c:	462f      	mov	r7, r5
 801b64e:	2501      	movs	r5, #1
 801b650:	e7c3      	b.n	801b5da <__gethex+0x9e>
 801b652:	2400      	movs	r4, #0
 801b654:	1cb1      	adds	r1, r6, #2
 801b656:	e7cc      	b.n	801b5f2 <__gethex+0xb6>
 801b658:	2401      	movs	r4, #1
 801b65a:	e7fb      	b.n	801b654 <__gethex+0x118>
 801b65c:	fb03 0002 	mla	r0, r3, r2, r0
 801b660:	e7ce      	b.n	801b600 <__gethex+0xc4>
 801b662:	4631      	mov	r1, r6
 801b664:	e7de      	b.n	801b624 <__gethex+0xe8>
 801b666:	eba6 0309 	sub.w	r3, r6, r9
 801b66a:	3b01      	subs	r3, #1
 801b66c:	4629      	mov	r1, r5
 801b66e:	2b07      	cmp	r3, #7
 801b670:	dc0a      	bgt.n	801b688 <__gethex+0x14c>
 801b672:	9801      	ldr	r0, [sp, #4]
 801b674:	f7fd ffd6 	bl	8019624 <_Balloc>
 801b678:	4604      	mov	r4, r0
 801b67a:	b940      	cbnz	r0, 801b68e <__gethex+0x152>
 801b67c:	4b5c      	ldr	r3, [pc, #368]	@ (801b7f0 <__gethex+0x2b4>)
 801b67e:	4602      	mov	r2, r0
 801b680:	21e4      	movs	r1, #228	@ 0xe4
 801b682:	485c      	ldr	r0, [pc, #368]	@ (801b7f4 <__gethex+0x2b8>)
 801b684:	f7ff fec0 	bl	801b408 <__assert_func>
 801b688:	3101      	adds	r1, #1
 801b68a:	105b      	asrs	r3, r3, #1
 801b68c:	e7ef      	b.n	801b66e <__gethex+0x132>
 801b68e:	f100 0a14 	add.w	sl, r0, #20
 801b692:	2300      	movs	r3, #0
 801b694:	4655      	mov	r5, sl
 801b696:	469b      	mov	fp, r3
 801b698:	45b1      	cmp	r9, r6
 801b69a:	d337      	bcc.n	801b70c <__gethex+0x1d0>
 801b69c:	f845 bb04 	str.w	fp, [r5], #4
 801b6a0:	eba5 050a 	sub.w	r5, r5, sl
 801b6a4:	10ad      	asrs	r5, r5, #2
 801b6a6:	6125      	str	r5, [r4, #16]
 801b6a8:	4658      	mov	r0, fp
 801b6aa:	f7fe f8ad 	bl	8019808 <__hi0bits>
 801b6ae:	016d      	lsls	r5, r5, #5
 801b6b0:	f8d8 6000 	ldr.w	r6, [r8]
 801b6b4:	1a2d      	subs	r5, r5, r0
 801b6b6:	42b5      	cmp	r5, r6
 801b6b8:	dd54      	ble.n	801b764 <__gethex+0x228>
 801b6ba:	1bad      	subs	r5, r5, r6
 801b6bc:	4629      	mov	r1, r5
 801b6be:	4620      	mov	r0, r4
 801b6c0:	f7fe fc3e 	bl	8019f40 <__any_on>
 801b6c4:	4681      	mov	r9, r0
 801b6c6:	b178      	cbz	r0, 801b6e8 <__gethex+0x1ac>
 801b6c8:	1e6b      	subs	r3, r5, #1
 801b6ca:	1159      	asrs	r1, r3, #5
 801b6cc:	f003 021f 	and.w	r2, r3, #31
 801b6d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b6d4:	f04f 0901 	mov.w	r9, #1
 801b6d8:	fa09 f202 	lsl.w	r2, r9, r2
 801b6dc:	420a      	tst	r2, r1
 801b6de:	d003      	beq.n	801b6e8 <__gethex+0x1ac>
 801b6e0:	454b      	cmp	r3, r9
 801b6e2:	dc36      	bgt.n	801b752 <__gethex+0x216>
 801b6e4:	f04f 0902 	mov.w	r9, #2
 801b6e8:	4629      	mov	r1, r5
 801b6ea:	4620      	mov	r0, r4
 801b6ec:	f7ff febe 	bl	801b46c <rshift>
 801b6f0:	442f      	add	r7, r5
 801b6f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b6f6:	42bb      	cmp	r3, r7
 801b6f8:	da42      	bge.n	801b780 <__gethex+0x244>
 801b6fa:	9801      	ldr	r0, [sp, #4]
 801b6fc:	4621      	mov	r1, r4
 801b6fe:	f7fd ffd1 	bl	80196a4 <_Bfree>
 801b702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b704:	2300      	movs	r3, #0
 801b706:	6013      	str	r3, [r2, #0]
 801b708:	25a3      	movs	r5, #163	@ 0xa3
 801b70a:	e793      	b.n	801b634 <__gethex+0xf8>
 801b70c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b710:	2a2e      	cmp	r2, #46	@ 0x2e
 801b712:	d012      	beq.n	801b73a <__gethex+0x1fe>
 801b714:	2b20      	cmp	r3, #32
 801b716:	d104      	bne.n	801b722 <__gethex+0x1e6>
 801b718:	f845 bb04 	str.w	fp, [r5], #4
 801b71c:	f04f 0b00 	mov.w	fp, #0
 801b720:	465b      	mov	r3, fp
 801b722:	7830      	ldrb	r0, [r6, #0]
 801b724:	9303      	str	r3, [sp, #12]
 801b726:	f7ff fef3 	bl	801b510 <__hexdig_fun>
 801b72a:	9b03      	ldr	r3, [sp, #12]
 801b72c:	f000 000f 	and.w	r0, r0, #15
 801b730:	4098      	lsls	r0, r3
 801b732:	ea4b 0b00 	orr.w	fp, fp, r0
 801b736:	3304      	adds	r3, #4
 801b738:	e7ae      	b.n	801b698 <__gethex+0x15c>
 801b73a:	45b1      	cmp	r9, r6
 801b73c:	d8ea      	bhi.n	801b714 <__gethex+0x1d8>
 801b73e:	492b      	ldr	r1, [pc, #172]	@ (801b7ec <__gethex+0x2b0>)
 801b740:	9303      	str	r3, [sp, #12]
 801b742:	2201      	movs	r2, #1
 801b744:	4630      	mov	r0, r6
 801b746:	f7ff fe11 	bl	801b36c <strncmp>
 801b74a:	9b03      	ldr	r3, [sp, #12]
 801b74c:	2800      	cmp	r0, #0
 801b74e:	d1e1      	bne.n	801b714 <__gethex+0x1d8>
 801b750:	e7a2      	b.n	801b698 <__gethex+0x15c>
 801b752:	1ea9      	subs	r1, r5, #2
 801b754:	4620      	mov	r0, r4
 801b756:	f7fe fbf3 	bl	8019f40 <__any_on>
 801b75a:	2800      	cmp	r0, #0
 801b75c:	d0c2      	beq.n	801b6e4 <__gethex+0x1a8>
 801b75e:	f04f 0903 	mov.w	r9, #3
 801b762:	e7c1      	b.n	801b6e8 <__gethex+0x1ac>
 801b764:	da09      	bge.n	801b77a <__gethex+0x23e>
 801b766:	1b75      	subs	r5, r6, r5
 801b768:	4621      	mov	r1, r4
 801b76a:	9801      	ldr	r0, [sp, #4]
 801b76c:	462a      	mov	r2, r5
 801b76e:	f7fe f9b1 	bl	8019ad4 <__lshift>
 801b772:	1b7f      	subs	r7, r7, r5
 801b774:	4604      	mov	r4, r0
 801b776:	f100 0a14 	add.w	sl, r0, #20
 801b77a:	f04f 0900 	mov.w	r9, #0
 801b77e:	e7b8      	b.n	801b6f2 <__gethex+0x1b6>
 801b780:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b784:	42bd      	cmp	r5, r7
 801b786:	dd6f      	ble.n	801b868 <__gethex+0x32c>
 801b788:	1bed      	subs	r5, r5, r7
 801b78a:	42ae      	cmp	r6, r5
 801b78c:	dc34      	bgt.n	801b7f8 <__gethex+0x2bc>
 801b78e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b792:	2b02      	cmp	r3, #2
 801b794:	d022      	beq.n	801b7dc <__gethex+0x2a0>
 801b796:	2b03      	cmp	r3, #3
 801b798:	d024      	beq.n	801b7e4 <__gethex+0x2a8>
 801b79a:	2b01      	cmp	r3, #1
 801b79c:	d115      	bne.n	801b7ca <__gethex+0x28e>
 801b79e:	42ae      	cmp	r6, r5
 801b7a0:	d113      	bne.n	801b7ca <__gethex+0x28e>
 801b7a2:	2e01      	cmp	r6, #1
 801b7a4:	d10b      	bne.n	801b7be <__gethex+0x282>
 801b7a6:	9a02      	ldr	r2, [sp, #8]
 801b7a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b7ac:	6013      	str	r3, [r2, #0]
 801b7ae:	2301      	movs	r3, #1
 801b7b0:	6123      	str	r3, [r4, #16]
 801b7b2:	f8ca 3000 	str.w	r3, [sl]
 801b7b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b7b8:	2562      	movs	r5, #98	@ 0x62
 801b7ba:	601c      	str	r4, [r3, #0]
 801b7bc:	e73a      	b.n	801b634 <__gethex+0xf8>
 801b7be:	1e71      	subs	r1, r6, #1
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	f7fe fbbd 	bl	8019f40 <__any_on>
 801b7c6:	2800      	cmp	r0, #0
 801b7c8:	d1ed      	bne.n	801b7a6 <__gethex+0x26a>
 801b7ca:	9801      	ldr	r0, [sp, #4]
 801b7cc:	4621      	mov	r1, r4
 801b7ce:	f7fd ff69 	bl	80196a4 <_Bfree>
 801b7d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b7d4:	2300      	movs	r3, #0
 801b7d6:	6013      	str	r3, [r2, #0]
 801b7d8:	2550      	movs	r5, #80	@ 0x50
 801b7da:	e72b      	b.n	801b634 <__gethex+0xf8>
 801b7dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d1f3      	bne.n	801b7ca <__gethex+0x28e>
 801b7e2:	e7e0      	b.n	801b7a6 <__gethex+0x26a>
 801b7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d1dd      	bne.n	801b7a6 <__gethex+0x26a>
 801b7ea:	e7ee      	b.n	801b7ca <__gethex+0x28e>
 801b7ec:	0801c520 	.word	0x0801c520
 801b7f0:	0801c3b5 	.word	0x0801c3b5
 801b7f4:	0801c6ce 	.word	0x0801c6ce
 801b7f8:	1e6f      	subs	r7, r5, #1
 801b7fa:	f1b9 0f00 	cmp.w	r9, #0
 801b7fe:	d130      	bne.n	801b862 <__gethex+0x326>
 801b800:	b127      	cbz	r7, 801b80c <__gethex+0x2d0>
 801b802:	4639      	mov	r1, r7
 801b804:	4620      	mov	r0, r4
 801b806:	f7fe fb9b 	bl	8019f40 <__any_on>
 801b80a:	4681      	mov	r9, r0
 801b80c:	117a      	asrs	r2, r7, #5
 801b80e:	2301      	movs	r3, #1
 801b810:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b814:	f007 071f 	and.w	r7, r7, #31
 801b818:	40bb      	lsls	r3, r7
 801b81a:	4213      	tst	r3, r2
 801b81c:	4629      	mov	r1, r5
 801b81e:	4620      	mov	r0, r4
 801b820:	bf18      	it	ne
 801b822:	f049 0902 	orrne.w	r9, r9, #2
 801b826:	f7ff fe21 	bl	801b46c <rshift>
 801b82a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b82e:	1b76      	subs	r6, r6, r5
 801b830:	2502      	movs	r5, #2
 801b832:	f1b9 0f00 	cmp.w	r9, #0
 801b836:	d047      	beq.n	801b8c8 <__gethex+0x38c>
 801b838:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b83c:	2b02      	cmp	r3, #2
 801b83e:	d015      	beq.n	801b86c <__gethex+0x330>
 801b840:	2b03      	cmp	r3, #3
 801b842:	d017      	beq.n	801b874 <__gethex+0x338>
 801b844:	2b01      	cmp	r3, #1
 801b846:	d109      	bne.n	801b85c <__gethex+0x320>
 801b848:	f019 0f02 	tst.w	r9, #2
 801b84c:	d006      	beq.n	801b85c <__gethex+0x320>
 801b84e:	f8da 3000 	ldr.w	r3, [sl]
 801b852:	ea49 0903 	orr.w	r9, r9, r3
 801b856:	f019 0f01 	tst.w	r9, #1
 801b85a:	d10e      	bne.n	801b87a <__gethex+0x33e>
 801b85c:	f045 0510 	orr.w	r5, r5, #16
 801b860:	e032      	b.n	801b8c8 <__gethex+0x38c>
 801b862:	f04f 0901 	mov.w	r9, #1
 801b866:	e7d1      	b.n	801b80c <__gethex+0x2d0>
 801b868:	2501      	movs	r5, #1
 801b86a:	e7e2      	b.n	801b832 <__gethex+0x2f6>
 801b86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b86e:	f1c3 0301 	rsb	r3, r3, #1
 801b872:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b876:	2b00      	cmp	r3, #0
 801b878:	d0f0      	beq.n	801b85c <__gethex+0x320>
 801b87a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b87e:	f104 0314 	add.w	r3, r4, #20
 801b882:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b886:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b88a:	f04f 0c00 	mov.w	ip, #0
 801b88e:	4618      	mov	r0, r3
 801b890:	f853 2b04 	ldr.w	r2, [r3], #4
 801b894:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b898:	d01b      	beq.n	801b8d2 <__gethex+0x396>
 801b89a:	3201      	adds	r2, #1
 801b89c:	6002      	str	r2, [r0, #0]
 801b89e:	2d02      	cmp	r5, #2
 801b8a0:	f104 0314 	add.w	r3, r4, #20
 801b8a4:	d13c      	bne.n	801b920 <__gethex+0x3e4>
 801b8a6:	f8d8 2000 	ldr.w	r2, [r8]
 801b8aa:	3a01      	subs	r2, #1
 801b8ac:	42b2      	cmp	r2, r6
 801b8ae:	d109      	bne.n	801b8c4 <__gethex+0x388>
 801b8b0:	1171      	asrs	r1, r6, #5
 801b8b2:	2201      	movs	r2, #1
 801b8b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b8b8:	f006 061f 	and.w	r6, r6, #31
 801b8bc:	fa02 f606 	lsl.w	r6, r2, r6
 801b8c0:	421e      	tst	r6, r3
 801b8c2:	d13a      	bne.n	801b93a <__gethex+0x3fe>
 801b8c4:	f045 0520 	orr.w	r5, r5, #32
 801b8c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b8ca:	601c      	str	r4, [r3, #0]
 801b8cc:	9b02      	ldr	r3, [sp, #8]
 801b8ce:	601f      	str	r7, [r3, #0]
 801b8d0:	e6b0      	b.n	801b634 <__gethex+0xf8>
 801b8d2:	4299      	cmp	r1, r3
 801b8d4:	f843 cc04 	str.w	ip, [r3, #-4]
 801b8d8:	d8d9      	bhi.n	801b88e <__gethex+0x352>
 801b8da:	68a3      	ldr	r3, [r4, #8]
 801b8dc:	459b      	cmp	fp, r3
 801b8de:	db17      	blt.n	801b910 <__gethex+0x3d4>
 801b8e0:	6861      	ldr	r1, [r4, #4]
 801b8e2:	9801      	ldr	r0, [sp, #4]
 801b8e4:	3101      	adds	r1, #1
 801b8e6:	f7fd fe9d 	bl	8019624 <_Balloc>
 801b8ea:	4681      	mov	r9, r0
 801b8ec:	b918      	cbnz	r0, 801b8f6 <__gethex+0x3ba>
 801b8ee:	4b1a      	ldr	r3, [pc, #104]	@ (801b958 <__gethex+0x41c>)
 801b8f0:	4602      	mov	r2, r0
 801b8f2:	2184      	movs	r1, #132	@ 0x84
 801b8f4:	e6c5      	b.n	801b682 <__gethex+0x146>
 801b8f6:	6922      	ldr	r2, [r4, #16]
 801b8f8:	3202      	adds	r2, #2
 801b8fa:	f104 010c 	add.w	r1, r4, #12
 801b8fe:	0092      	lsls	r2, r2, #2
 801b900:	300c      	adds	r0, #12
 801b902:	f7fc ff9a 	bl	801883a <memcpy>
 801b906:	4621      	mov	r1, r4
 801b908:	9801      	ldr	r0, [sp, #4]
 801b90a:	f7fd fecb 	bl	80196a4 <_Bfree>
 801b90e:	464c      	mov	r4, r9
 801b910:	6923      	ldr	r3, [r4, #16]
 801b912:	1c5a      	adds	r2, r3, #1
 801b914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b918:	6122      	str	r2, [r4, #16]
 801b91a:	2201      	movs	r2, #1
 801b91c:	615a      	str	r2, [r3, #20]
 801b91e:	e7be      	b.n	801b89e <__gethex+0x362>
 801b920:	6922      	ldr	r2, [r4, #16]
 801b922:	455a      	cmp	r2, fp
 801b924:	dd0b      	ble.n	801b93e <__gethex+0x402>
 801b926:	2101      	movs	r1, #1
 801b928:	4620      	mov	r0, r4
 801b92a:	f7ff fd9f 	bl	801b46c <rshift>
 801b92e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b932:	3701      	adds	r7, #1
 801b934:	42bb      	cmp	r3, r7
 801b936:	f6ff aee0 	blt.w	801b6fa <__gethex+0x1be>
 801b93a:	2501      	movs	r5, #1
 801b93c:	e7c2      	b.n	801b8c4 <__gethex+0x388>
 801b93e:	f016 061f 	ands.w	r6, r6, #31
 801b942:	d0fa      	beq.n	801b93a <__gethex+0x3fe>
 801b944:	4453      	add	r3, sl
 801b946:	f1c6 0620 	rsb	r6, r6, #32
 801b94a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b94e:	f7fd ff5b 	bl	8019808 <__hi0bits>
 801b952:	42b0      	cmp	r0, r6
 801b954:	dbe7      	blt.n	801b926 <__gethex+0x3ea>
 801b956:	e7f0      	b.n	801b93a <__gethex+0x3fe>
 801b958:	0801c3b5 	.word	0x0801c3b5

0801b95c <L_shift>:
 801b95c:	f1c2 0208 	rsb	r2, r2, #8
 801b960:	0092      	lsls	r2, r2, #2
 801b962:	b570      	push	{r4, r5, r6, lr}
 801b964:	f1c2 0620 	rsb	r6, r2, #32
 801b968:	6843      	ldr	r3, [r0, #4]
 801b96a:	6804      	ldr	r4, [r0, #0]
 801b96c:	fa03 f506 	lsl.w	r5, r3, r6
 801b970:	432c      	orrs	r4, r5
 801b972:	40d3      	lsrs	r3, r2
 801b974:	6004      	str	r4, [r0, #0]
 801b976:	f840 3f04 	str.w	r3, [r0, #4]!
 801b97a:	4288      	cmp	r0, r1
 801b97c:	d3f4      	bcc.n	801b968 <L_shift+0xc>
 801b97e:	bd70      	pop	{r4, r5, r6, pc}

0801b980 <__match>:
 801b980:	b530      	push	{r4, r5, lr}
 801b982:	6803      	ldr	r3, [r0, #0]
 801b984:	3301      	adds	r3, #1
 801b986:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b98a:	b914      	cbnz	r4, 801b992 <__match+0x12>
 801b98c:	6003      	str	r3, [r0, #0]
 801b98e:	2001      	movs	r0, #1
 801b990:	bd30      	pop	{r4, r5, pc}
 801b992:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b996:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b99a:	2d19      	cmp	r5, #25
 801b99c:	bf98      	it	ls
 801b99e:	3220      	addls	r2, #32
 801b9a0:	42a2      	cmp	r2, r4
 801b9a2:	d0f0      	beq.n	801b986 <__match+0x6>
 801b9a4:	2000      	movs	r0, #0
 801b9a6:	e7f3      	b.n	801b990 <__match+0x10>

0801b9a8 <__hexnan>:
 801b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9ac:	680b      	ldr	r3, [r1, #0]
 801b9ae:	6801      	ldr	r1, [r0, #0]
 801b9b0:	115e      	asrs	r6, r3, #5
 801b9b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b9b6:	f013 031f 	ands.w	r3, r3, #31
 801b9ba:	b087      	sub	sp, #28
 801b9bc:	bf18      	it	ne
 801b9be:	3604      	addne	r6, #4
 801b9c0:	2500      	movs	r5, #0
 801b9c2:	1f37      	subs	r7, r6, #4
 801b9c4:	4682      	mov	sl, r0
 801b9c6:	4690      	mov	r8, r2
 801b9c8:	9301      	str	r3, [sp, #4]
 801b9ca:	f846 5c04 	str.w	r5, [r6, #-4]
 801b9ce:	46b9      	mov	r9, r7
 801b9d0:	463c      	mov	r4, r7
 801b9d2:	9502      	str	r5, [sp, #8]
 801b9d4:	46ab      	mov	fp, r5
 801b9d6:	784a      	ldrb	r2, [r1, #1]
 801b9d8:	1c4b      	adds	r3, r1, #1
 801b9da:	9303      	str	r3, [sp, #12]
 801b9dc:	b342      	cbz	r2, 801ba30 <__hexnan+0x88>
 801b9de:	4610      	mov	r0, r2
 801b9e0:	9105      	str	r1, [sp, #20]
 801b9e2:	9204      	str	r2, [sp, #16]
 801b9e4:	f7ff fd94 	bl	801b510 <__hexdig_fun>
 801b9e8:	2800      	cmp	r0, #0
 801b9ea:	d151      	bne.n	801ba90 <__hexnan+0xe8>
 801b9ec:	9a04      	ldr	r2, [sp, #16]
 801b9ee:	9905      	ldr	r1, [sp, #20]
 801b9f0:	2a20      	cmp	r2, #32
 801b9f2:	d818      	bhi.n	801ba26 <__hexnan+0x7e>
 801b9f4:	9b02      	ldr	r3, [sp, #8]
 801b9f6:	459b      	cmp	fp, r3
 801b9f8:	dd13      	ble.n	801ba22 <__hexnan+0x7a>
 801b9fa:	454c      	cmp	r4, r9
 801b9fc:	d206      	bcs.n	801ba0c <__hexnan+0x64>
 801b9fe:	2d07      	cmp	r5, #7
 801ba00:	dc04      	bgt.n	801ba0c <__hexnan+0x64>
 801ba02:	462a      	mov	r2, r5
 801ba04:	4649      	mov	r1, r9
 801ba06:	4620      	mov	r0, r4
 801ba08:	f7ff ffa8 	bl	801b95c <L_shift>
 801ba0c:	4544      	cmp	r4, r8
 801ba0e:	d952      	bls.n	801bab6 <__hexnan+0x10e>
 801ba10:	2300      	movs	r3, #0
 801ba12:	f1a4 0904 	sub.w	r9, r4, #4
 801ba16:	f844 3c04 	str.w	r3, [r4, #-4]
 801ba1a:	f8cd b008 	str.w	fp, [sp, #8]
 801ba1e:	464c      	mov	r4, r9
 801ba20:	461d      	mov	r5, r3
 801ba22:	9903      	ldr	r1, [sp, #12]
 801ba24:	e7d7      	b.n	801b9d6 <__hexnan+0x2e>
 801ba26:	2a29      	cmp	r2, #41	@ 0x29
 801ba28:	d157      	bne.n	801bada <__hexnan+0x132>
 801ba2a:	3102      	adds	r1, #2
 801ba2c:	f8ca 1000 	str.w	r1, [sl]
 801ba30:	f1bb 0f00 	cmp.w	fp, #0
 801ba34:	d051      	beq.n	801bada <__hexnan+0x132>
 801ba36:	454c      	cmp	r4, r9
 801ba38:	d206      	bcs.n	801ba48 <__hexnan+0xa0>
 801ba3a:	2d07      	cmp	r5, #7
 801ba3c:	dc04      	bgt.n	801ba48 <__hexnan+0xa0>
 801ba3e:	462a      	mov	r2, r5
 801ba40:	4649      	mov	r1, r9
 801ba42:	4620      	mov	r0, r4
 801ba44:	f7ff ff8a 	bl	801b95c <L_shift>
 801ba48:	4544      	cmp	r4, r8
 801ba4a:	d936      	bls.n	801baba <__hexnan+0x112>
 801ba4c:	f1a8 0204 	sub.w	r2, r8, #4
 801ba50:	4623      	mov	r3, r4
 801ba52:	f853 1b04 	ldr.w	r1, [r3], #4
 801ba56:	f842 1f04 	str.w	r1, [r2, #4]!
 801ba5a:	429f      	cmp	r7, r3
 801ba5c:	d2f9      	bcs.n	801ba52 <__hexnan+0xaa>
 801ba5e:	1b3b      	subs	r3, r7, r4
 801ba60:	f023 0303 	bic.w	r3, r3, #3
 801ba64:	3304      	adds	r3, #4
 801ba66:	3401      	adds	r4, #1
 801ba68:	3e03      	subs	r6, #3
 801ba6a:	42b4      	cmp	r4, r6
 801ba6c:	bf88      	it	hi
 801ba6e:	2304      	movhi	r3, #4
 801ba70:	4443      	add	r3, r8
 801ba72:	2200      	movs	r2, #0
 801ba74:	f843 2b04 	str.w	r2, [r3], #4
 801ba78:	429f      	cmp	r7, r3
 801ba7a:	d2fb      	bcs.n	801ba74 <__hexnan+0xcc>
 801ba7c:	683b      	ldr	r3, [r7, #0]
 801ba7e:	b91b      	cbnz	r3, 801ba88 <__hexnan+0xe0>
 801ba80:	4547      	cmp	r7, r8
 801ba82:	d128      	bne.n	801bad6 <__hexnan+0x12e>
 801ba84:	2301      	movs	r3, #1
 801ba86:	603b      	str	r3, [r7, #0]
 801ba88:	2005      	movs	r0, #5
 801ba8a:	b007      	add	sp, #28
 801ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba90:	3501      	adds	r5, #1
 801ba92:	2d08      	cmp	r5, #8
 801ba94:	f10b 0b01 	add.w	fp, fp, #1
 801ba98:	dd06      	ble.n	801baa8 <__hexnan+0x100>
 801ba9a:	4544      	cmp	r4, r8
 801ba9c:	d9c1      	bls.n	801ba22 <__hexnan+0x7a>
 801ba9e:	2300      	movs	r3, #0
 801baa0:	f844 3c04 	str.w	r3, [r4, #-4]
 801baa4:	2501      	movs	r5, #1
 801baa6:	3c04      	subs	r4, #4
 801baa8:	6822      	ldr	r2, [r4, #0]
 801baaa:	f000 000f 	and.w	r0, r0, #15
 801baae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801bab2:	6020      	str	r0, [r4, #0]
 801bab4:	e7b5      	b.n	801ba22 <__hexnan+0x7a>
 801bab6:	2508      	movs	r5, #8
 801bab8:	e7b3      	b.n	801ba22 <__hexnan+0x7a>
 801baba:	9b01      	ldr	r3, [sp, #4]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d0dd      	beq.n	801ba7c <__hexnan+0xd4>
 801bac0:	f1c3 0320 	rsb	r3, r3, #32
 801bac4:	f04f 32ff 	mov.w	r2, #4294967295
 801bac8:	40da      	lsrs	r2, r3
 801baca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801bace:	4013      	ands	r3, r2
 801bad0:	f846 3c04 	str.w	r3, [r6, #-4]
 801bad4:	e7d2      	b.n	801ba7c <__hexnan+0xd4>
 801bad6:	3f04      	subs	r7, #4
 801bad8:	e7d0      	b.n	801ba7c <__hexnan+0xd4>
 801bada:	2004      	movs	r0, #4
 801badc:	e7d5      	b.n	801ba8a <__hexnan+0xe2>

0801bade <__ascii_mbtowc>:
 801bade:	b082      	sub	sp, #8
 801bae0:	b901      	cbnz	r1, 801bae4 <__ascii_mbtowc+0x6>
 801bae2:	a901      	add	r1, sp, #4
 801bae4:	b142      	cbz	r2, 801baf8 <__ascii_mbtowc+0x1a>
 801bae6:	b14b      	cbz	r3, 801bafc <__ascii_mbtowc+0x1e>
 801bae8:	7813      	ldrb	r3, [r2, #0]
 801baea:	600b      	str	r3, [r1, #0]
 801baec:	7812      	ldrb	r2, [r2, #0]
 801baee:	1e10      	subs	r0, r2, #0
 801baf0:	bf18      	it	ne
 801baf2:	2001      	movne	r0, #1
 801baf4:	b002      	add	sp, #8
 801baf6:	4770      	bx	lr
 801baf8:	4610      	mov	r0, r2
 801bafa:	e7fb      	b.n	801baf4 <__ascii_mbtowc+0x16>
 801bafc:	f06f 0001 	mvn.w	r0, #1
 801bb00:	e7f8      	b.n	801baf4 <__ascii_mbtowc+0x16>

0801bb02 <_realloc_r>:
 801bb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb06:	4680      	mov	r8, r0
 801bb08:	4615      	mov	r5, r2
 801bb0a:	460c      	mov	r4, r1
 801bb0c:	b921      	cbnz	r1, 801bb18 <_realloc_r+0x16>
 801bb0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb12:	4611      	mov	r1, r2
 801bb14:	f7fd bcfa 	b.w	801950c <_malloc_r>
 801bb18:	b92a      	cbnz	r2, 801bb26 <_realloc_r+0x24>
 801bb1a:	f7fd fc83 	bl	8019424 <_free_r>
 801bb1e:	2400      	movs	r4, #0
 801bb20:	4620      	mov	r0, r4
 801bb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb26:	f000 f840 	bl	801bbaa <_malloc_usable_size_r>
 801bb2a:	4285      	cmp	r5, r0
 801bb2c:	4606      	mov	r6, r0
 801bb2e:	d802      	bhi.n	801bb36 <_realloc_r+0x34>
 801bb30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801bb34:	d8f4      	bhi.n	801bb20 <_realloc_r+0x1e>
 801bb36:	4629      	mov	r1, r5
 801bb38:	4640      	mov	r0, r8
 801bb3a:	f7fd fce7 	bl	801950c <_malloc_r>
 801bb3e:	4607      	mov	r7, r0
 801bb40:	2800      	cmp	r0, #0
 801bb42:	d0ec      	beq.n	801bb1e <_realloc_r+0x1c>
 801bb44:	42b5      	cmp	r5, r6
 801bb46:	462a      	mov	r2, r5
 801bb48:	4621      	mov	r1, r4
 801bb4a:	bf28      	it	cs
 801bb4c:	4632      	movcs	r2, r6
 801bb4e:	f7fc fe74 	bl	801883a <memcpy>
 801bb52:	4621      	mov	r1, r4
 801bb54:	4640      	mov	r0, r8
 801bb56:	f7fd fc65 	bl	8019424 <_free_r>
 801bb5a:	463c      	mov	r4, r7
 801bb5c:	e7e0      	b.n	801bb20 <_realloc_r+0x1e>

0801bb5e <__ascii_wctomb>:
 801bb5e:	4603      	mov	r3, r0
 801bb60:	4608      	mov	r0, r1
 801bb62:	b141      	cbz	r1, 801bb76 <__ascii_wctomb+0x18>
 801bb64:	2aff      	cmp	r2, #255	@ 0xff
 801bb66:	d904      	bls.n	801bb72 <__ascii_wctomb+0x14>
 801bb68:	228a      	movs	r2, #138	@ 0x8a
 801bb6a:	601a      	str	r2, [r3, #0]
 801bb6c:	f04f 30ff 	mov.w	r0, #4294967295
 801bb70:	4770      	bx	lr
 801bb72:	700a      	strb	r2, [r1, #0]
 801bb74:	2001      	movs	r0, #1
 801bb76:	4770      	bx	lr

0801bb78 <fiprintf>:
 801bb78:	b40e      	push	{r1, r2, r3}
 801bb7a:	b503      	push	{r0, r1, lr}
 801bb7c:	4601      	mov	r1, r0
 801bb7e:	ab03      	add	r3, sp, #12
 801bb80:	4805      	ldr	r0, [pc, #20]	@ (801bb98 <fiprintf+0x20>)
 801bb82:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb86:	6800      	ldr	r0, [r0, #0]
 801bb88:	9301      	str	r3, [sp, #4]
 801bb8a:	f7ff f9af 	bl	801aeec <_vfiprintf_r>
 801bb8e:	b002      	add	sp, #8
 801bb90:	f85d eb04 	ldr.w	lr, [sp], #4
 801bb94:	b003      	add	sp, #12
 801bb96:	4770      	bx	lr
 801bb98:	24000174 	.word	0x24000174

0801bb9c <abort>:
 801bb9c:	b508      	push	{r3, lr}
 801bb9e:	2006      	movs	r0, #6
 801bba0:	f000 f834 	bl	801bc0c <raise>
 801bba4:	2001      	movs	r0, #1
 801bba6:	f7ec fd2f 	bl	8008608 <_exit>

0801bbaa <_malloc_usable_size_r>:
 801bbaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bbae:	1f18      	subs	r0, r3, #4
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	bfbc      	itt	lt
 801bbb4:	580b      	ldrlt	r3, [r1, r0]
 801bbb6:	18c0      	addlt	r0, r0, r3
 801bbb8:	4770      	bx	lr

0801bbba <_raise_r>:
 801bbba:	291f      	cmp	r1, #31
 801bbbc:	b538      	push	{r3, r4, r5, lr}
 801bbbe:	4605      	mov	r5, r0
 801bbc0:	460c      	mov	r4, r1
 801bbc2:	d904      	bls.n	801bbce <_raise_r+0x14>
 801bbc4:	2316      	movs	r3, #22
 801bbc6:	6003      	str	r3, [r0, #0]
 801bbc8:	f04f 30ff 	mov.w	r0, #4294967295
 801bbcc:	bd38      	pop	{r3, r4, r5, pc}
 801bbce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801bbd0:	b112      	cbz	r2, 801bbd8 <_raise_r+0x1e>
 801bbd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bbd6:	b94b      	cbnz	r3, 801bbec <_raise_r+0x32>
 801bbd8:	4628      	mov	r0, r5
 801bbda:	f000 f831 	bl	801bc40 <_getpid_r>
 801bbde:	4622      	mov	r2, r4
 801bbe0:	4601      	mov	r1, r0
 801bbe2:	4628      	mov	r0, r5
 801bbe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bbe8:	f000 b818 	b.w	801bc1c <_kill_r>
 801bbec:	2b01      	cmp	r3, #1
 801bbee:	d00a      	beq.n	801bc06 <_raise_r+0x4c>
 801bbf0:	1c59      	adds	r1, r3, #1
 801bbf2:	d103      	bne.n	801bbfc <_raise_r+0x42>
 801bbf4:	2316      	movs	r3, #22
 801bbf6:	6003      	str	r3, [r0, #0]
 801bbf8:	2001      	movs	r0, #1
 801bbfa:	e7e7      	b.n	801bbcc <_raise_r+0x12>
 801bbfc:	2100      	movs	r1, #0
 801bbfe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801bc02:	4620      	mov	r0, r4
 801bc04:	4798      	blx	r3
 801bc06:	2000      	movs	r0, #0
 801bc08:	e7e0      	b.n	801bbcc <_raise_r+0x12>
	...

0801bc0c <raise>:
 801bc0c:	4b02      	ldr	r3, [pc, #8]	@ (801bc18 <raise+0xc>)
 801bc0e:	4601      	mov	r1, r0
 801bc10:	6818      	ldr	r0, [r3, #0]
 801bc12:	f7ff bfd2 	b.w	801bbba <_raise_r>
 801bc16:	bf00      	nop
 801bc18:	24000174 	.word	0x24000174

0801bc1c <_kill_r>:
 801bc1c:	b538      	push	{r3, r4, r5, lr}
 801bc1e:	4d07      	ldr	r5, [pc, #28]	@ (801bc3c <_kill_r+0x20>)
 801bc20:	2300      	movs	r3, #0
 801bc22:	4604      	mov	r4, r0
 801bc24:	4608      	mov	r0, r1
 801bc26:	4611      	mov	r1, r2
 801bc28:	602b      	str	r3, [r5, #0]
 801bc2a:	f7ec fcdd 	bl	80085e8 <_kill>
 801bc2e:	1c43      	adds	r3, r0, #1
 801bc30:	d102      	bne.n	801bc38 <_kill_r+0x1c>
 801bc32:	682b      	ldr	r3, [r5, #0]
 801bc34:	b103      	cbz	r3, 801bc38 <_kill_r+0x1c>
 801bc36:	6023      	str	r3, [r4, #0]
 801bc38:	bd38      	pop	{r3, r4, r5, pc}
 801bc3a:	bf00      	nop
 801bc3c:	240020a4 	.word	0x240020a4

0801bc40 <_getpid_r>:
 801bc40:	f7ec bcca 	b.w	80085d8 <_getpid>

0801bc44 <_init>:
 801bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc46:	bf00      	nop
 801bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc4a:	bc08      	pop	{r3}
 801bc4c:	469e      	mov	lr, r3
 801bc4e:	4770      	bx	lr

0801bc50 <_fini>:
 801bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc52:	bf00      	nop
 801bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc56:	bc08      	pop	{r3}
 801bc58:	469e      	mov	lr, r3
 801bc5a:	4770      	bx	lr
