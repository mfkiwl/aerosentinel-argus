
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c9c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  08011f70  08011f70  00012f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080126f8  080126f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012700  08012700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012704  08012704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  24000000  08012708  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b4c  240001e8  080128ec  000141e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000d34  080128ec  00014d34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a49  00000000  00000000  00014212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003cfc  00000000  00000000  00037c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e78  00000000  00000000  0003b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001843  00000000  00000000  0003d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00008009  00000000  00000000  0003f013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002907f  00000000  00000000  0004701c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165341  00000000  00000000  0007009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d53dc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000989c  00000000  00000000  001d5420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001decbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011f54 	.word	0x08011f54

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	08011f54 	.word	0x08011f54

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <bno055_init>:
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	23ff      	movs	r3, #255	@ 0xff
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73bb      	strb	r3, [r7, #14]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	737b      	strb	r3, [r7, #13]
 8000aac:	2300      	movs	r3, #0
 8000aae:	813b      	strh	r3, [r7, #8]
 8000ab0:	4a58      	ldr	r2, [pc, #352]	@ (8000c14 <bno055_init+0x17c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	4b57      	ldr	r3, [pc, #348]	@ (8000c14 <bno055_init+0x17c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68dc      	ldr	r4, [r3, #12]
 8000abc:	4b55      	ldr	r3, [pc, #340]	@ (8000c14 <bno055_init+0x17c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	7a58      	ldrb	r0, [r3, #9]
 8000ac2:	f107 020d 	add.w	r2, r7, #13
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	2107      	movs	r1, #7
 8000aca:	47a0      	blx	r4
 8000acc:	4603      	mov	r3, r0
 8000ace:	73fb      	strb	r3, [r7, #15]
 8000ad0:	4b50      	ldr	r3, [pc, #320]	@ (8000c14 <bno055_init+0x17c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	691c      	ldr	r4, [r3, #16]
 8000ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c14 <bno055_init+0x17c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	7a58      	ldrb	r0, [r3, #9]
 8000adc:	f107 020e 	add.w	r2, r7, #14
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	47a0      	blx	r4
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	4413      	add	r3, r2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	4b48      	ldr	r3, [pc, #288]	@ (8000c14 <bno055_init+0x17c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	7bba      	ldrb	r2, [r7, #14]
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	4b46      	ldr	r3, [pc, #280]	@ (8000c14 <bno055_init+0x17c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	691c      	ldr	r4, [r3, #16]
 8000b00:	4b44      	ldr	r3, [pc, #272]	@ (8000c14 <bno055_init+0x17c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	7a58      	ldrb	r0, [r3, #9]
 8000b06:	f107 020e 	add.w	r2, r7, #14
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	47a0      	blx	r4
 8000b10:	4603      	mov	r3, r0
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	4413      	add	r3, r2
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c14 <bno055_init+0x17c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	7bba      	ldrb	r2, [r7, #14]
 8000b22:	715a      	strb	r2, [r3, #5]
 8000b24:	4b3b      	ldr	r3, [pc, #236]	@ (8000c14 <bno055_init+0x17c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	691c      	ldr	r4, [r3, #16]
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c14 <bno055_init+0x17c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	7a58      	ldrb	r0, [r3, #9]
 8000b30:	f107 020e 	add.w	r2, r7, #14
 8000b34:	2301      	movs	r3, #1
 8000b36:	2102      	movs	r1, #2
 8000b38:	47a0      	blx	r4
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	4413      	add	r3, r2
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	4b33      	ldr	r3, [pc, #204]	@ (8000c14 <bno055_init+0x17c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	7bba      	ldrb	r2, [r7, #14]
 8000b4c:	719a      	strb	r2, [r3, #6]
 8000b4e:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <bno055_init+0x17c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	691c      	ldr	r4, [r3, #16]
 8000b54:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <bno055_init+0x17c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	7a58      	ldrb	r0, [r3, #9]
 8000b5a:	f107 020e 	add.w	r2, r7, #14
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2103      	movs	r1, #3
 8000b62:	47a0      	blx	r4
 8000b64:	4603      	mov	r3, r0
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <bno055_init+0x17c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	7bba      	ldrb	r2, [r7, #14]
 8000b76:	71da      	strb	r2, [r3, #7]
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <bno055_init+0x17c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	691c      	ldr	r4, [r3, #16]
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <bno055_init+0x17c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	7a58      	ldrb	r0, [r3, #9]
 8000b84:	f107 020e 	add.w	r2, r7, #14
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2106      	movs	r1, #6
 8000b8c:	47a0      	blx	r4
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	4413      	add	r3, r2
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <bno055_init+0x17c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	7bba      	ldrb	r2, [r7, #14]
 8000ba0:	721a      	strb	r2, [r3, #8]
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <bno055_init+0x17c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	691c      	ldr	r4, [r3, #16]
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <bno055_init+0x17c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	7a58      	ldrb	r0, [r3, #9]
 8000bae:	f107 0208 	add.w	r2, r7, #8
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	47a0      	blx	r4
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	7a3b      	ldrb	r3, [r7, #8]
 8000bc6:	723b      	strb	r3, [r7, #8]
 8000bc8:	7a7b      	ldrb	r3, [r7, #9]
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	7a3b      	ldrb	r3, [r7, #8]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <bno055_init+0x17c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	b292      	uxth	r2, r2
 8000bda:	805a      	strh	r2, [r3, #2]
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <bno055_init+0x17c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	691c      	ldr	r4, [r3, #16]
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <bno055_init+0x17c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	7a58      	ldrb	r0, [r3, #9]
 8000be8:	f107 020e 	add.w	r2, r7, #14
 8000bec:	2301      	movs	r3, #1
 8000bee:	2107      	movs	r1, #7
 8000bf0:	47a0      	blx	r4
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <bno055_init+0x17c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	7bba      	ldrb	r2, [r7, #14]
 8000c04:	711a      	strb	r2, [r3, #4]
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	24000204 	.word	0x24000204

08000c18 <bno055_write_register>:
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	4613      	mov	r3, r2
 8000c26:	71bb      	strb	r3, [r7, #6]
 8000c28:	23ff      	movs	r3, #255	@ 0xff
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <bno055_write_register+0x48>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <bno055_write_register+0x22>
 8000c34:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000c38:	e00d      	b.n	8000c56 <bno055_write_register+0x3e>
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <bno055_write_register+0x48>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68dc      	ldr	r4, [r3, #12]
 8000c40:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <bno055_write_register+0x48>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	7a58      	ldrb	r0, [r3, #9]
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	79f9      	ldrb	r1, [r7, #7]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	47a0      	blx	r4
 8000c4e:	4603      	mov	r3, r0
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24000204 	.word	0x24000204

08000c64 <bno055_write_page_id>:
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	23ff      	movs	r3, #255	@ 0xff
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	2300      	movs	r3, #0
 8000c74:	73bb      	strb	r3, [r7, #14]
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <bno055_write_page_id+0x20>
 8000c7e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000c82:	e030      	b.n	8000ce6 <bno055_write_page_id+0x82>
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	691c      	ldr	r4, [r3, #16]
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	7a58      	ldrb	r0, [r3, #9]
 8000c90:	f107 020e 	add.w	r2, r7, #14
 8000c94:	2301      	movs	r3, #1
 8000c96:	2107      	movs	r1, #7
 8000c98:	47a0      	blx	r4
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d11b      	bne.n	8000cde <bno055_write_page_id+0x7a>
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	73bb      	strb	r3, [r7, #14]
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68dc      	ldr	r4, [r3, #12]
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	7a58      	ldrb	r0, [r3, #9]
 8000cb6:	f107 020e 	add.w	r2, r7, #14
 8000cba:	2301      	movs	r3, #1
 8000cbc:	2107      	movs	r1, #7
 8000cbe:	47a0      	blx	r4
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d106      	bne.n	8000ce2 <bno055_write_page_id+0x7e>
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <bno055_write_page_id+0x8c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	711a      	strb	r2, [r3, #4]
 8000cdc:	e001      	b.n	8000ce2 <bno055_write_page_id+0x7e>
 8000cde:	23ff      	movs	r3, #255	@ 0xff
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	24000204 	.word	0x24000204

08000cf4 <bno055_read_accel_xyz>:
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	23ff      	movs	r3, #255	@ 0xff
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	4a31      	ldr	r2, [pc, #196]	@ (8000dc8 <bno055_read_accel_xyz+0xd4>)
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d0a:	6018      	str	r0, [r3, #0]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	8019      	strh	r1, [r3, #0]
 8000d10:	23ff      	movs	r3, #255	@ 0xff
 8000d12:	73bb      	strb	r3, [r7, #14]
 8000d14:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <bno055_read_accel_xyz+0x2e>
 8000d1c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000d20:	e04e      	b.n	8000dc0 <bno055_read_accel_xyz+0xcc>
 8000d22:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d004      	beq.n	8000d36 <bno055_read_accel_xyz+0x42>
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff ff99 	bl	8000c64 <bno055_write_page_id>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73bb      	strb	r3, [r7, #14]
 8000d36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <bno055_read_accel_xyz+0x54>
 8000d3e:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d137      	bne.n	8000db8 <bno055_read_accel_xyz+0xc4>
 8000d48:	4b20      	ldr	r3, [pc, #128]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	691c      	ldr	r4, [r3, #16]
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <bno055_read_accel_xyz+0xd8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	7a58      	ldrb	r0, [r3, #9]
 8000d54:	f107 0208 	add.w	r2, r7, #8
 8000d58:	2306      	movs	r3, #6
 8000d5a:	2108      	movs	r1, #8
 8000d5c:	47a0      	blx	r4
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	7a3b      	ldrb	r3, [r7, #8]
 8000d64:	723b      	strb	r3, [r7, #8]
 8000d66:	7a7b      	ldrb	r3, [r7, #9]
 8000d68:	727b      	strb	r3, [r7, #9]
 8000d6a:	7a7b      	ldrb	r3, [r7, #9]
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	7a3b      	ldrb	r3, [r7, #8]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	801a      	strh	r2, [r3, #0]
 8000d7e:	7abb      	ldrb	r3, [r7, #10]
 8000d80:	72bb      	strb	r3, [r7, #10]
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	72fb      	strb	r3, [r7, #11]
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	7abb      	ldrb	r3, [r7, #10]
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	805a      	strh	r2, [r3, #2]
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	733b      	strb	r3, [r7, #12]
 8000d9e:	7b7b      	ldrb	r3, [r7, #13]
 8000da0:	737b      	strb	r3, [r7, #13]
 8000da2:	7b7b      	ldrb	r3, [r7, #13]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	809a      	strh	r2, [r3, #4]
 8000db6:	e001      	b.n	8000dbc <bno055_read_accel_xyz+0xc8>
 8000db8:	23ff      	movs	r3, #255	@ 0xff
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	08011f70 	.word	0x08011f70
 8000dcc:	24000204 	.word	0x24000204

08000dd0 <bno055_read_mag_x>:
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	23ff      	movs	r3, #255	@ 0xff
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	81bb      	strh	r3, [r7, #12]
 8000de0:	23ff      	movs	r3, #255	@ 0xff
 8000de2:	73bb      	strb	r3, [r7, #14]
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <bno055_read_mag_x+0x22>
 8000dec:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000df0:	e032      	b.n	8000e58 <bno055_read_mag_x+0x88>
 8000df2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <bno055_read_mag_x+0x36>
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff31 	bl	8000c64 <bno055_write_page_id>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73bb      	strb	r3, [r7, #14]
 8000e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d004      	beq.n	8000e18 <bno055_read_mag_x+0x48>
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	791b      	ldrb	r3, [r3, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d11b      	bne.n	8000e50 <bno055_read_mag_x+0x80>
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	691c      	ldr	r4, [r3, #16]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <bno055_read_mag_x+0x90>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	7a58      	ldrb	r0, [r3, #9]
 8000e24:	f107 020c 	add.w	r2, r7, #12
 8000e28:	2302      	movs	r3, #2
 8000e2a:	210e      	movs	r1, #14
 8000e2c:	47a0      	blx	r4
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	7b3b      	ldrb	r3, [r7, #12]
 8000e34:	733b      	strb	r3, [r7, #12]
 8000e36:	7b7b      	ldrb	r3, [r7, #13]
 8000e38:	737b      	strb	r3, [r7, #13]
 8000e3a:	7b7b      	ldrb	r3, [r7, #13]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	7b3b      	ldrb	r3, [r7, #12]
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	801a      	strh	r2, [r3, #0]
 8000e4e:	e001      	b.n	8000e54 <bno055_read_mag_x+0x84>
 8000e50:	23ff      	movs	r3, #255	@ 0xff
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	24000204 	.word	0x24000204

08000e64 <bno055_read_mag_y>:
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	23ff      	movs	r3, #255	@ 0xff
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	2300      	movs	r3, #0
 8000e72:	81bb      	strh	r3, [r7, #12]
 8000e74:	23ff      	movs	r3, #255	@ 0xff
 8000e76:	73bb      	strb	r3, [r7, #14]
 8000e78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <bno055_read_mag_y+0x22>
 8000e80:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000e84:	e032      	b.n	8000eec <bno055_read_mag_y+0x88>
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <bno055_read_mag_y+0x36>
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fee7 	bl	8000c64 <bno055_write_page_id>
 8000e96:	4603      	mov	r3, r0
 8000e98:	73bb      	strb	r3, [r7, #14]
 8000e9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <bno055_read_mag_y+0x48>
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	791b      	ldrb	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d11b      	bne.n	8000ee4 <bno055_read_mag_y+0x80>
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691c      	ldr	r4, [r3, #16]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <bno055_read_mag_y+0x90>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	7a58      	ldrb	r0, [r3, #9]
 8000eb8:	f107 020c 	add.w	r2, r7, #12
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	47a0      	blx	r4
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	7b3b      	ldrb	r3, [r7, #12]
 8000ec8:	733b      	strb	r3, [r7, #12]
 8000eca:	7b7b      	ldrb	r3, [r7, #13]
 8000ecc:	737b      	strb	r3, [r7, #13]
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	7b3b      	ldrb	r3, [r7, #12]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	801a      	strh	r2, [r3, #0]
 8000ee2:	e001      	b.n	8000ee8 <bno055_read_mag_y+0x84>
 8000ee4:	23ff      	movs	r3, #255	@ 0xff
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	24000204 	.word	0x24000204

08000ef8 <bno055_read_mag_z>:
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	23ff      	movs	r3, #255	@ 0xff
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	2300      	movs	r3, #0
 8000f06:	81bb      	strh	r3, [r7, #12]
 8000f08:	23ff      	movs	r3, #255	@ 0xff
 8000f0a:	73bb      	strb	r3, [r7, #14]
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <bno055_read_mag_z+0x22>
 8000f14:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000f18:	e032      	b.n	8000f80 <bno055_read_mag_z+0x88>
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	791b      	ldrb	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <bno055_read_mag_z+0x36>
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fe9d 	bl	8000c64 <bno055_write_page_id>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73bb      	strb	r3, [r7, #14]
 8000f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d004      	beq.n	8000f40 <bno055_read_mag_z+0x48>
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	791b      	ldrb	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d11b      	bne.n	8000f78 <bno055_read_mag_z+0x80>
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691c      	ldr	r4, [r3, #16]
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <bno055_read_mag_z+0x90>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	7a58      	ldrb	r0, [r3, #9]
 8000f4c:	f107 020c 	add.w	r2, r7, #12
 8000f50:	2302      	movs	r3, #2
 8000f52:	2112      	movs	r1, #18
 8000f54:	47a0      	blx	r4
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	7b3b      	ldrb	r3, [r7, #12]
 8000f5c:	733b      	strb	r3, [r7, #12]
 8000f5e:	7b7b      	ldrb	r3, [r7, #13]
 8000f60:	737b      	strb	r3, [r7, #13]
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	7b3b      	ldrb	r3, [r7, #12]
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	801a      	strh	r2, [r3, #0]
 8000f76:	e001      	b.n	8000f7c <bno055_read_mag_z+0x84>
 8000f78:	23ff      	movs	r3, #255	@ 0xff
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	24000204 	.word	0x24000204

08000f8c <bno055_read_gyro_xyz>:
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	23ff      	movs	r3, #255	@ 0xff
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	4a31      	ldr	r2, [pc, #196]	@ (8001060 <bno055_read_gyro_xyz+0xd4>)
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa2:	6018      	str	r0, [r3, #0]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	8019      	strh	r1, [r3, #0]
 8000fa8:	23ff      	movs	r3, #255	@ 0xff
 8000faa:	73bb      	strb	r3, [r7, #14]
 8000fac:	4b2d      	ldr	r3, [pc, #180]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <bno055_read_gyro_xyz+0x2e>
 8000fb4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000fb8:	e04e      	b.n	8001058 <bno055_read_gyro_xyz+0xcc>
 8000fba:	4b2a      	ldr	r3, [pc, #168]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	791b      	ldrb	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <bno055_read_gyro_xyz+0x42>
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fe4d 	bl	8000c64 <bno055_write_page_id>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73bb      	strb	r3, [r7, #14]
 8000fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <bno055_read_gyro_xyz+0x54>
 8000fd6:	4b23      	ldr	r3, [pc, #140]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d137      	bne.n	8001050 <bno055_read_gyro_xyz+0xc4>
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	691c      	ldr	r4, [r3, #16]
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <bno055_read_gyro_xyz+0xd8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	7a58      	ldrb	r0, [r3, #9]
 8000fec:	f107 0208 	add.w	r2, r7, #8
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	2114      	movs	r1, #20
 8000ff4:	47a0      	blx	r4
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	7a3b      	ldrb	r3, [r7, #8]
 8000ffc:	723b      	strb	r3, [r7, #8]
 8000ffe:	7a7b      	ldrb	r3, [r7, #9]
 8001000:	727b      	strb	r3, [r7, #9]
 8001002:	7a7b      	ldrb	r3, [r7, #9]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	7a3b      	ldrb	r3, [r7, #8]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	801a      	strh	r2, [r3, #0]
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	72bb      	strb	r3, [r7, #10]
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	72fb      	strb	r3, [r7, #11]
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	b25b      	sxtb	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	7abb      	ldrb	r3, [r7, #10]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	805a      	strh	r2, [r3, #2]
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	733b      	strb	r3, [r7, #12]
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	737b      	strb	r3, [r7, #13]
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	b25b      	sxtb	r3, r3
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21a      	sxth	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	809a      	strh	r2, [r3, #4]
 800104e:	e001      	b.n	8001054 <bno055_read_gyro_xyz+0xc8>
 8001050:	23ff      	movs	r3, #255	@ 0xff
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	08011f70 	.word	0x08011f70
 8001064:	24000204 	.word	0x24000204

08001068 <bno055_read_euler_hrp>:
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	23ff      	movs	r3, #255	@ 0xff
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	4a31      	ldr	r2, [pc, #196]	@ (800113c <bno055_read_euler_hrp+0xd4>)
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107e:	6018      	str	r0, [r3, #0]
 8001080:	3304      	adds	r3, #4
 8001082:	8019      	strh	r1, [r3, #0]
 8001084:	23ff      	movs	r3, #255	@ 0xff
 8001086:	73bb      	strb	r3, [r7, #14]
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <bno055_read_euler_hrp+0x2e>
 8001090:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001094:	e04e      	b.n	8001134 <bno055_read_euler_hrp+0xcc>
 8001096:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <bno055_read_euler_hrp+0x42>
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fddf 	bl	8000c64 <bno055_write_page_id>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <bno055_read_euler_hrp+0x54>
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	791b      	ldrb	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d137      	bne.n	800112c <bno055_read_euler_hrp+0xc4>
 80010bc:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	691c      	ldr	r4, [r3, #16]
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <bno055_read_euler_hrp+0xd8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	7a58      	ldrb	r0, [r3, #9]
 80010c8:	f107 0208 	add.w	r2, r7, #8
 80010cc:	2306      	movs	r3, #6
 80010ce:	211a      	movs	r1, #26
 80010d0:	47a0      	blx	r4
 80010d2:	4603      	mov	r3, r0
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	7a3b      	ldrb	r3, [r7, #8]
 80010d8:	723b      	strb	r3, [r7, #8]
 80010da:	7a7b      	ldrb	r3, [r7, #9]
 80010dc:	727b      	strb	r3, [r7, #9]
 80010de:	7a7b      	ldrb	r3, [r7, #9]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	7a3b      	ldrb	r3, [r7, #8]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	801a      	strh	r2, [r3, #0]
 80010f2:	7abb      	ldrb	r3, [r7, #10]
 80010f4:	72bb      	strb	r3, [r7, #10]
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	72fb      	strb	r3, [r7, #11]
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	7abb      	ldrb	r3, [r7, #10]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	805a      	strh	r2, [r3, #2]
 800110e:	7b3b      	ldrb	r3, [r7, #12]
 8001110:	733b      	strb	r3, [r7, #12]
 8001112:	7b7b      	ldrb	r3, [r7, #13]
 8001114:	737b      	strb	r3, [r7, #13]
 8001116:	7b7b      	ldrb	r3, [r7, #13]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	809a      	strh	r2, [r3, #4]
 800112a:	e001      	b.n	8001130 <bno055_read_euler_hrp+0xc8>
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	08011f70 	.word	0x08011f70
 8001140:	24000204 	.word	0x24000204

08001144 <bno055_read_quaternion_wxyz>:
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	23ff      	movs	r3, #255	@ 0xff
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	4a38      	ldr	r2, [pc, #224]	@ (8001234 <bno055_read_quaternion_wxyz+0xf0>)
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115a:	e883 0003 	stmia.w	r3, {r0, r1}
 800115e:	23ff      	movs	r3, #255	@ 0xff
 8001160:	75bb      	strb	r3, [r7, #22]
 8001162:	4b35      	ldr	r3, [pc, #212]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <bno055_read_quaternion_wxyz+0x2c>
 800116a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800116e:	e05c      	b.n	800122a <bno055_read_quaternion_wxyz+0xe6>
 8001170:	4b31      	ldr	r3, [pc, #196]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <bno055_read_quaternion_wxyz+0x40>
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff fd72 	bl	8000c64 <bno055_write_page_id>
 8001180:	4603      	mov	r3, r0
 8001182:	75bb      	strb	r3, [r7, #22]
 8001184:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <bno055_read_quaternion_wxyz+0x52>
 800118c:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	791b      	ldrb	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d145      	bne.n	8001222 <bno055_read_quaternion_wxyz+0xde>
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	691c      	ldr	r4, [r3, #16]
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <bno055_read_quaternion_wxyz+0xf4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	7a58      	ldrb	r0, [r3, #9]
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	2308      	movs	r3, #8
 80011a8:	2120      	movs	r1, #32
 80011aa:	47a0      	blx	r4
 80011ac:	4603      	mov	r3, r0
 80011ae:	75fb      	strb	r3, [r7, #23]
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	733b      	strb	r3, [r7, #12]
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	737b      	strb	r3, [r7, #13]
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	7b3b      	ldrb	r3, [r7, #12]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	801a      	strh	r2, [r3, #0]
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	73bb      	strb	r3, [r7, #14]
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	805a      	strh	r2, [r3, #2]
 80011e8:	7c3b      	ldrb	r3, [r7, #16]
 80011ea:	743b      	strb	r3, [r7, #16]
 80011ec:	7c7b      	ldrb	r3, [r7, #17]
 80011ee:	747b      	strb	r3, [r7, #17]
 80011f0:	7c7b      	ldrb	r3, [r7, #17]
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	7c3b      	ldrb	r3, [r7, #16]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21a      	sxth	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	809a      	strh	r2, [r3, #4]
 8001204:	7cbb      	ldrb	r3, [r7, #18]
 8001206:	74bb      	strb	r3, [r7, #18]
 8001208:	7cfb      	ldrb	r3, [r7, #19]
 800120a:	74fb      	strb	r3, [r7, #19]
 800120c:	7cfb      	ldrb	r3, [r7, #19]
 800120e:	b25b      	sxtb	r3, r3
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
 8001214:	7cbb      	ldrb	r3, [r7, #18]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21a      	sxth	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	80da      	strh	r2, [r3, #6]
 8001220:	e001      	b.n	8001226 <bno055_read_quaternion_wxyz+0xe2>
 8001222:	23ff      	movs	r3, #255	@ 0xff
 8001224:	75fb      	strb	r3, [r7, #23]
 8001226:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800122a:	4618      	mov	r0, r3
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	08011f78 	.word	0x08011f78
 8001238:	24000204 	.word	0x24000204

0800123c <bno055_read_gravity_xyz>:
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	23ff      	movs	r3, #255	@ 0xff
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	4a31      	ldr	r2, [pc, #196]	@ (8001310 <bno055_read_gravity_xyz+0xd4>)
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001252:	6018      	str	r0, [r3, #0]
 8001254:	3304      	adds	r3, #4
 8001256:	8019      	strh	r1, [r3, #0]
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	73bb      	strb	r3, [r7, #14]
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <bno055_read_gravity_xyz+0x2e>
 8001264:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001268:	e04e      	b.n	8001308 <bno055_read_gravity_xyz+0xcc>
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	791b      	ldrb	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <bno055_read_gravity_xyz+0x42>
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fcf5 	bl	8000c64 <bno055_write_page_id>
 800127a:	4603      	mov	r3, r0
 800127c:	73bb      	strb	r3, [r7, #14]
 800127e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <bno055_read_gravity_xyz+0x54>
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	791b      	ldrb	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d137      	bne.n	8001300 <bno055_read_gravity_xyz+0xc4>
 8001290:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691c      	ldr	r4, [r3, #16]
 8001296:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <bno055_read_gravity_xyz+0xd8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7a58      	ldrb	r0, [r3, #9]
 800129c:	f107 0208 	add.w	r2, r7, #8
 80012a0:	2306      	movs	r3, #6
 80012a2:	212e      	movs	r1, #46	@ 0x2e
 80012a4:	47a0      	blx	r4
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	7a3b      	ldrb	r3, [r7, #8]
 80012ac:	723b      	strb	r3, [r7, #8]
 80012ae:	7a7b      	ldrb	r3, [r7, #9]
 80012b0:	727b      	strb	r3, [r7, #9]
 80012b2:	7a7b      	ldrb	r3, [r7, #9]
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7a3b      	ldrb	r3, [r7, #8]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	72bb      	strb	r3, [r7, #10]
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	72fb      	strb	r3, [r7, #11]
 80012ce:	7afb      	ldrb	r3, [r7, #11]
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	805a      	strh	r2, [r3, #2]
 80012e2:	7b3b      	ldrb	r3, [r7, #12]
 80012e4:	733b      	strb	r3, [r7, #12]
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	737b      	strb	r3, [r7, #13]
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	809a      	strh	r2, [r3, #4]
 80012fe:	e001      	b.n	8001304 <bno055_read_gravity_xyz+0xc8>
 8001300:	23ff      	movs	r3, #255	@ 0xff
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	08011f70 	.word	0x08011f70
 8001314:	24000204 	.word	0x24000204

08001318 <bno055_read_temp_data>:
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	23ff      	movs	r3, #255	@ 0xff
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	2300      	movs	r3, #0
 8001326:	737b      	strb	r3, [r7, #13]
 8001328:	23ff      	movs	r3, #255	@ 0xff
 800132a:	73bb      	strb	r3, [r7, #14]
 800132c:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <bno055_read_temp_data+0x7c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <bno055_read_temp_data+0x22>
 8001334:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001338:	e028      	b.n	800138c <bno055_read_temp_data+0x74>
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <bno055_read_temp_data+0x7c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <bno055_read_temp_data+0x36>
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fc8d 	bl	8000c64 <bno055_write_page_id>
 800134a:	4603      	mov	r3, r0
 800134c:	73bb      	strb	r3, [r7, #14]
 800134e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <bno055_read_temp_data+0x48>
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <bno055_read_temp_data+0x7c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <bno055_read_temp_data+0x6c>
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <bno055_read_temp_data+0x7c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691c      	ldr	r4, [r3, #16]
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <bno055_read_temp_data+0x7c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	7a58      	ldrb	r0, [r3, #9]
 800136c:	f107 020d 	add.w	r2, r7, #13
 8001370:	2301      	movs	r3, #1
 8001372:	2134      	movs	r1, #52	@ 0x34
 8001374:	47a0      	blx	r4
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	7b7b      	ldrb	r3, [r7, #13]
 800137c:	b25a      	sxtb	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e001      	b.n	8001388 <bno055_read_temp_data+0x70>
 8001384:	23ff      	movs	r3, #255	@ 0xff
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	24000204 	.word	0x24000204

08001398 <bno055_convert_float_euler_hpr_deg>:
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	23ff      	movs	r3, #255	@ 0xff
 80013a2:	75fb      	strb	r3, [r7, #23]
 80013a4:	2300      	movs	r3, #0
 80013a6:	823b      	strh	r3, [r7, #16]
 80013a8:	2300      	movs	r3, #0
 80013aa:	827b      	strh	r3, [r7, #18]
 80013ac:	2300      	movs	r3, #0
 80013ae:	82bb      	strh	r3, [r7, #20]
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	f107 030f 	add.w	r3, r7, #15
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fbd5 	bl	8001b68 <bno055_get_euler_unit>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <bno055_convert_float_euler_hpr_deg+0x42>
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 fc11 	bl	8001bf0 <bno055_set_euler_unit>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	4413      	add	r3, r2
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	75fb      	strb	r3, [r7, #23]
 80013da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d13f      	bne.n	8001462 <bno055_convert_float_euler_hpr_deg+0xca>
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe3e 	bl	8001068 <bno055_read_euler_hrp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	75fb      	strb	r3, [r7, #23]
 80013f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d12d      	bne.n	800145c <bno055_convert_float_euler_hpr_deg+0xc4>
 8001400:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800140c:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001410:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001414:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edc3 7a00 	vstr	s15, [r3]
 800141e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800142a:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800142e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001432:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edc3 7a02 	vstr	s15, [r3, #8]
 800143c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001448:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800144c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001450:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edc3 7a01 	vstr	s15, [r3, #4]
 800145a:	e004      	b.n	8001466 <bno055_convert_float_euler_hpr_deg+0xce>
 800145c:	23ff      	movs	r3, #255	@ 0xff
 800145e:	75fb      	strb	r3, [r7, #23]
 8001460:	e001      	b.n	8001466 <bno055_convert_float_euler_hpr_deg+0xce>
 8001462:	23ff      	movs	r3, #255	@ 0xff
 8001464:	75fb      	strb	r3, [r7, #23]
 8001466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	0000      	movs	r0, r0
 8001474:	0000      	movs	r0, r0
	...

08001478 <bno055_convert_float_gravity_xyz_msq>:
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	23ff      	movs	r3, #255	@ 0xff
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	2300      	movs	r3, #0
 8001486:	813b      	strh	r3, [r7, #8]
 8001488:	2300      	movs	r3, #0
 800148a:	817b      	strh	r3, [r7, #10]
 800148c:	2300      	movs	r3, #0
 800148e:	81bb      	strh	r3, [r7, #12]
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fed1 	bl	800123c <bno055_read_gravity_xyz>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d12d      	bne.n	8001502 <bno055_convert_float_gravity_xyz_msq+0x8a>
 80014a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014b2:	ed9f 5b19 	vldr	d5, [pc, #100]	@ 8001518 <bno055_convert_float_gravity_xyz_msq+0xa0>
 80014b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edc3 7a00 	vstr	s15, [r3]
 80014c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014d0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001518 <bno055_convert_float_gravity_xyz_msq+0xa0>
 80014d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edc3 7a01 	vstr	s15, [r3, #4]
 80014e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014ee:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8001518 <bno055_convert_float_gravity_xyz_msq+0xa0>
 80014f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edc3 7a02 	vstr	s15, [r3, #8]
 8001500:	e001      	b.n	8001506 <bno055_convert_float_gravity_xyz_msq+0x8e>
 8001502:	23ff      	movs	r3, #255	@ 0xff
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	00000000 	.word	0x00000000
 800151c:	40590000 	.word	0x40590000

08001520 <bno055_convert_float_temp_celsius>:
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	23ff      	movs	r3, #255	@ 0xff
 800152a:	75fb      	strb	r3, [r7, #23]
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	2300      	movs	r3, #0
 8001538:	73bb      	strb	r3, [r7, #14]
 800153a:	f107 030e 	add.w	r3, r7, #14
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fbd2 	bl	8001ce8 <bno055_get_temp_unit>
 8001544:	4603      	mov	r3, r0
 8001546:	75fb      	strb	r3, [r7, #23]
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <bno055_convert_float_temp_celsius+0x40>
 800154e:	2000      	movs	r0, #0
 8001550:	f000 fc0e 	bl	8001d70 <bno055_set_temp_unit>
 8001554:	4603      	mov	r3, r0
 8001556:	b2da      	uxtb	r2, r3
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	4413      	add	r3, r2
 800155c:	b2db      	uxtb	r3, r3
 800155e:	75fb      	strb	r3, [r7, #23]
 8001560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11f      	bne.n	80015a8 <bno055_convert_float_temp_celsius+0x88>
 8001568:	f107 030f 	add.w	r3, r7, #15
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fed3 	bl	8001318 <bno055_read_temp_data>
 8001572:	4603      	mov	r3, r0
 8001574:	b2da      	uxtb	r2, r3
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	4413      	add	r3, r2
 800157a:	b2db      	uxtb	r3, r3
 800157c:	75fb      	strb	r3, [r7, #23]
 800157e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <bno055_convert_float_temp_celsius+0x82>
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001592:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001596:	edc7 7a04 	vstr	s15, [r7, #16]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e004      	b.n	80015ac <bno055_convert_float_temp_celsius+0x8c>
 80015a2:	23ff      	movs	r3, #255	@ 0xff
 80015a4:	75fb      	strb	r3, [r7, #23]
 80015a6:	e001      	b.n	80015ac <bno055_convert_float_temp_celsius+0x8c>
 80015a8:	23ff      	movs	r3, #255	@ 0xff
 80015aa:	75fb      	strb	r3, [r7, #23]
 80015ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <bno055_convert_double_accel_xyz_mg>:
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	23ff      	movs	r3, #255	@ 0xff
 80015c2:	75fb      	strb	r3, [r7, #23]
 80015c4:	2300      	movs	r3, #0
 80015c6:	823b      	strh	r3, [r7, #16]
 80015c8:	2300      	movs	r3, #0
 80015ca:	827b      	strh	r3, [r7, #18]
 80015cc:	2300      	movs	r3, #0
 80015ce:	82bb      	strh	r3, [r7, #20]
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	f107 030f 	add.w	r3, r7, #15
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f949 	bl	8001870 <bno055_get_accel_unit>
 80015de:	4603      	mov	r3, r0
 80015e0:	75fb      	strb	r3, [r7, #23]
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d008      	beq.n	80015fa <bno055_convert_double_accel_xyz_mg+0x42>
 80015e8:	2001      	movs	r0, #1
 80015ea:	f000 f983 	bl	80018f4 <bno055_set_accel_unit>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	4413      	add	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	75fb      	strb	r3, [r7, #23]
 80015fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d12d      	bne.n	800165e <bno055_convert_double_accel_xyz_mg+0xa6>
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fb74 	bl	8000cf4 <bno055_read_accel_xyz>
 800160c:	4603      	mov	r3, r0
 800160e:	b2da      	uxtb	r2, r3
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	4413      	add	r3, r2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	75fb      	strb	r3, [r7, #23]
 8001618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d11b      	bne.n	8001658 <bno055_convert_double_accel_xyz_mg+0xa0>
 8001620:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	ed83 7b00 	vstr	d7, [r3]
 8001632:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	ed83 7b02 	vstr	d7, [r3, #8]
 8001644:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	ed83 7b04 	vstr	d7, [r3, #16]
 8001656:	e004      	b.n	8001662 <bno055_convert_double_accel_xyz_mg+0xaa>
 8001658:	23ff      	movs	r3, #255	@ 0xff
 800165a:	75fb      	strb	r3, [r7, #23]
 800165c:	e001      	b.n	8001662 <bno055_convert_double_accel_xyz_mg+0xaa>
 800165e:	23ff      	movs	r3, #255	@ 0xff
 8001660:	75fb      	strb	r3, [r7, #23]
 8001662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <bno055_convert_double_mag_x_uT>:
 800166e:	b580      	push	{r7, lr}
 8001670:	b088      	sub	sp, #32
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	23ff      	movs	r3, #255	@ 0xff
 8001678:	77fb      	strb	r3, [r7, #31]
 800167a:	2300      	movs	r3, #0
 800167c:	81fb      	strh	r3, [r7, #14]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800168a:	f107 030e 	add.w	r3, r7, #14
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fb9e 	bl	8000dd0 <bno055_read_mag_x>
 8001694:	4603      	mov	r3, r0
 8001696:	77fb      	strb	r3, [r7, #31]
 8001698:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d111      	bne.n	80016c4 <bno055_convert_double_mag_x_uT+0x56>
 80016a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016ac:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016b4:	ed87 7b04 	vstr	d7, [r7, #16]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016be:	e9c1 2300 	strd	r2, r3, [r1]
 80016c2:	e001      	b.n	80016c8 <bno055_convert_double_mag_x_uT+0x5a>
 80016c4:	23ff      	movs	r3, #255	@ 0xff
 80016c6:	77fb      	strb	r3, [r7, #31]
 80016c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016cc:	4618      	mov	r0, r3
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <bno055_convert_double_mag_y_uT>:
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	77fb      	strb	r3, [r7, #31]
 80016e0:	2300      	movs	r3, #0
 80016e2:	81fb      	strh	r3, [r7, #14]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80016f0:	f107 030e 	add.w	r3, r7, #14
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fbb5 	bl	8000e64 <bno055_read_mag_y>
 80016fa:	4603      	mov	r3, r0
 80016fc:	77fb      	strb	r3, [r7, #31]
 80016fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d111      	bne.n	800172a <bno055_convert_double_mag_y_uT+0x56>
 8001706:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001712:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001716:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800171a:	ed87 7b04 	vstr	d7, [r7, #16]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001724:	e9c1 2300 	strd	r2, r3, [r1]
 8001728:	e001      	b.n	800172e <bno055_convert_double_mag_y_uT+0x5a>
 800172a:	23ff      	movs	r3, #255	@ 0xff
 800172c:	77fb      	strb	r3, [r7, #31]
 800172e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <bno055_convert_double_mag_z_uT>:
 800173a:	b580      	push	{r7, lr}
 800173c:	b088      	sub	sp, #32
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	23ff      	movs	r3, #255	@ 0xff
 8001744:	77fb      	strb	r3, [r7, #31]
 8001746:	2300      	movs	r3, #0
 8001748:	81fb      	strh	r3, [r7, #14]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001756:	f107 030e 	add.w	r3, r7, #14
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fbcc 	bl	8000ef8 <bno055_read_mag_z>
 8001760:	4603      	mov	r3, r0
 8001762:	77fb      	strb	r3, [r7, #31]
 8001764:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <bno055_convert_double_mag_z_uT+0x56>
 800176c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001778:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800177c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001780:	ed87 7b04 	vstr	d7, [r7, #16]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800178a:	e9c1 2300 	strd	r2, r3, [r1]
 800178e:	e001      	b.n	8001794 <bno055_convert_double_mag_z_uT+0x5a>
 8001790:	23ff      	movs	r3, #255	@ 0xff
 8001792:	77fb      	strb	r3, [r7, #31]
 8001794:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001798:	4618      	mov	r0, r3
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <bno055_convert_double_gyro_xyz_dps>:
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	23ff      	movs	r3, #255	@ 0xff
 80017aa:	75fb      	strb	r3, [r7, #23]
 80017ac:	2300      	movs	r3, #0
 80017ae:	823b      	strh	r3, [r7, #16]
 80017b0:	2300      	movs	r3, #0
 80017b2:	827b      	strh	r3, [r7, #18]
 80017b4:	2300      	movs	r3, #0
 80017b6:	82bb      	strh	r3, [r7, #20]
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	f107 030f 	add.w	r3, r7, #15
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f911 	bl	80019e8 <bno055_get_gyro_unit>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <bno055_convert_double_gyro_xyz_dps+0x42>
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 f94d 	bl	8001a70 <bno055_set_gyro_unit>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	4413      	add	r3, r2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	75fb      	strb	r3, [r7, #23]
 80017e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d139      	bne.n	800185e <bno055_convert_double_gyro_xyz_dps+0xbe>
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fbcc 	bl	8000f8c <bno055_read_gyro_xyz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	4413      	add	r3, r2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	75fb      	strb	r3, [r7, #23]
 8001800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d127      	bne.n	8001858 <bno055_convert_double_gyro_xyz_dps+0xb8>
 8001808:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001814:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001818:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	ed83 7b00 	vstr	d7, [r3]
 8001822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800182e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001832:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	ed83 7b02 	vstr	d7, [r3, #8]
 800183c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001848:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800184c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	ed83 7b04 	vstr	d7, [r3, #16]
 8001856:	e004      	b.n	8001862 <bno055_convert_double_gyro_xyz_dps+0xc2>
 8001858:	23ff      	movs	r3, #255	@ 0xff
 800185a:	75fb      	strb	r3, [r7, #23]
 800185c:	e001      	b.n	8001862 <bno055_convert_double_gyro_xyz_dps+0xc2>
 800185e:	23ff      	movs	r3, #255	@ 0xff
 8001860:	75fb      	strb	r3, [r7, #23]
 8001862:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <bno055_get_accel_unit>:
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	23ff      	movs	r3, #255	@ 0xff
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	2300      	movs	r3, #0
 800187e:	737b      	strb	r3, [r7, #13]
 8001880:	23ff      	movs	r3, #255	@ 0xff
 8001882:	73bb      	strb	r3, [r7, #14]
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <bno055_get_accel_unit+0x22>
 800188c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001890:	e02a      	b.n	80018e8 <bno055_get_accel_unit+0x78>
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	791b      	ldrb	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <bno055_get_accel_unit+0x36>
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff f9e1 	bl	8000c64 <bno055_write_page_id>
 80018a2:	4603      	mov	r3, r0
 80018a4:	73bb      	strb	r3, [r7, #14]
 80018a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <bno055_get_accel_unit+0x48>
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	791b      	ldrb	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d113      	bne.n	80018e0 <bno055_get_accel_unit+0x70>
 80018b8:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691c      	ldr	r4, [r3, #16]
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <bno055_get_accel_unit+0x80>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	7a58      	ldrb	r0, [r3, #9]
 80018c4:	f107 020d 	add.w	r2, r7, #13
 80018c8:	2301      	movs	r3, #1
 80018ca:	213b      	movs	r1, #59	@ 0x3b
 80018cc:	47a0      	blx	r4
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	e001      	b.n	80018e4 <bno055_get_accel_unit+0x74>
 80018e0:	23ff      	movs	r3, #255	@ 0xff
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	24000204 	.word	0x24000204

080018f4 <bno055_set_accel_unit>:
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	23ff      	movs	r3, #255	@ 0xff
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	2300      	movs	r3, #0
 8001904:	737b      	strb	r3, [r7, #13]
 8001906:	2300      	movs	r3, #0
 8001908:	733b      	strb	r3, [r7, #12]
 800190a:	23ff      	movs	r3, #255	@ 0xff
 800190c:	73bb      	strb	r3, [r7, #14]
 800190e:	4b35      	ldr	r3, [pc, #212]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <bno055_set_accel_unit+0x28>
 8001916:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800191a:	e05f      	b.n	80019dc <bno055_set_accel_unit+0xe8>
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4618      	mov	r0, r3
 8001922:	f000 faa1 	bl	8001e68 <bno055_get_operation_mode>
 8001926:	4603      	mov	r3, r0
 8001928:	73bb      	strb	r3, [r7, #14]
 800192a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d143      	bne.n	80019ba <bno055_set_accel_unit+0xc6>
 8001932:	7b3b      	ldrb	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <bno055_set_accel_unit+0x56>
 8001938:	2000      	movs	r0, #0
 800193a:	f000 fad7 	bl	8001eec <bno055_set_operation_mode>
 800193e:	4603      	mov	r3, r0
 8001940:	b2da      	uxtb	r2, r3
 8001942:	7bbb      	ldrb	r3, [r7, #14]
 8001944:	4413      	add	r3, r2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	73bb      	strb	r3, [r7, #14]
 800194a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d130      	bne.n	80019b4 <bno055_set_accel_unit+0xc0>
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691c      	ldr	r4, [r3, #16]
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	7a58      	ldrb	r0, [r3, #9]
 800195e:	f107 020d 	add.w	r2, r7, #13
 8001962:	2301      	movs	r3, #1
 8001964:	213b      	movs	r1, #59	@ 0x3b
 8001966:	47a0      	blx	r4
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d124      	bne.n	80019be <bno055_set_accel_unit+0xca>
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	b25b      	sxtb	r3, r3
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	b25a      	sxtb	r2, r3
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	b25b      	sxtb	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b25b      	sxtb	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	737b      	strb	r3, [r7, #13]
 8001990:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68dc      	ldr	r4, [r3, #12]
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <bno055_set_accel_unit+0xf0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	7a58      	ldrb	r0, [r3, #9]
 800199c:	f107 020d 	add.w	r2, r7, #13
 80019a0:	2301      	movs	r3, #1
 80019a2:	213b      	movs	r1, #59	@ 0x3b
 80019a4:	47a0      	blx	r4
 80019a6:	4603      	mov	r3, r0
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	4413      	add	r3, r2
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e004      	b.n	80019be <bno055_set_accel_unit+0xca>
 80019b4:	23ff      	movs	r3, #255	@ 0xff
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	e001      	b.n	80019be <bno055_set_accel_unit+0xca>
 80019ba:	23ff      	movs	r3, #255	@ 0xff
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	7b3b      	ldrb	r3, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <bno055_set_accel_unit+0xe4>
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fa90 	bl	8001eec <bno055_set_operation_mode>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	4413      	add	r3, r2
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	24000204 	.word	0x24000204

080019e8 <bno055_get_gyro_unit>:
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	23ff      	movs	r3, #255	@ 0xff
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	2300      	movs	r3, #0
 80019f6:	737b      	strb	r3, [r7, #13]
 80019f8:	23ff      	movs	r3, #255	@ 0xff
 80019fa:	73bb      	strb	r3, [r7, #14]
 80019fc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <bno055_get_gyro_unit+0x22>
 8001a04:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001a08:	e02c      	b.n	8001a64 <bno055_get_gyro_unit+0x7c>
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	791b      	ldrb	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <bno055_get_gyro_unit+0x36>
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff f925 	bl	8000c64 <bno055_write_page_id>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73bb      	strb	r3, [r7, #14]
 8001a1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <bno055_get_gyro_unit+0x48>
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	791b      	ldrb	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d115      	bne.n	8001a5c <bno055_get_gyro_unit+0x74>
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691c      	ldr	r4, [r3, #16]
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <bno055_get_gyro_unit+0x84>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	7a58      	ldrb	r0, [r3, #9]
 8001a3c:	f107 020d 	add.w	r2, r7, #13
 8001a40:	2301      	movs	r3, #1
 8001a42:	213b      	movs	r1, #59	@ 0x3b
 8001a44:	47a0      	blx	r4
 8001a46:	4603      	mov	r3, r0
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	7b7b      	ldrb	r3, [r7, #13]
 8001a4c:	105b      	asrs	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e001      	b.n	8001a60 <bno055_get_gyro_unit+0x78>
 8001a5c:	23ff      	movs	r3, #255	@ 0xff
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	24000204 	.word	0x24000204

08001a70 <bno055_set_gyro_unit>:
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	23ff      	movs	r3, #255	@ 0xff
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	737b      	strb	r3, [r7, #13]
 8001a82:	2300      	movs	r3, #0
 8001a84:	733b      	strb	r3, [r7, #12]
 8001a86:	23ff      	movs	r3, #255	@ 0xff
 8001a88:	73bb      	strb	r3, [r7, #14]
 8001a8a:	4b36      	ldr	r3, [pc, #216]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <bno055_set_gyro_unit+0x28>
 8001a92:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001a96:	e060      	b.n	8001b5a <bno055_set_gyro_unit+0xea>
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 f9e3 	bl	8001e68 <bno055_get_operation_mode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	73bb      	strb	r3, [r7, #14]
 8001aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d144      	bne.n	8001b38 <bno055_set_gyro_unit+0xc8>
 8001aae:	7b3b      	ldrb	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <bno055_set_gyro_unit+0x56>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f000 fa19 	bl	8001eec <bno055_set_operation_mode>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	73bb      	strb	r3, [r7, #14]
 8001ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d131      	bne.n	8001b32 <bno055_set_gyro_unit+0xc2>
 8001ace:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691c      	ldr	r4, [r3, #16]
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	7a58      	ldrb	r0, [r3, #9]
 8001ada:	f107 020d 	add.w	r2, r7, #13
 8001ade:	2301      	movs	r3, #1
 8001ae0:	213b      	movs	r1, #59	@ 0x3b
 8001ae2:	47a0      	blx	r4
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d125      	bne.n	8001b3c <bno055_set_gyro_unit+0xcc>
 8001af0:	7b7b      	ldrb	r3, [r7, #13]
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	f023 0302 	bic.w	r3, r3, #2
 8001af8:	b25a      	sxtb	r2, r3
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b25b      	sxtb	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	737b      	strb	r3, [r7, #13]
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68dc      	ldr	r4, [r3, #12]
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <bno055_set_gyro_unit+0xf4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	7a58      	ldrb	r0, [r3, #9]
 8001b1a:	f107 020d 	add.w	r2, r7, #13
 8001b1e:	2301      	movs	r3, #1
 8001b20:	213b      	movs	r1, #59	@ 0x3b
 8001b22:	47a0      	blx	r4
 8001b24:	4603      	mov	r3, r0
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e004      	b.n	8001b3c <bno055_set_gyro_unit+0xcc>
 8001b32:	23ff      	movs	r3, #255	@ 0xff
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e001      	b.n	8001b3c <bno055_set_gyro_unit+0xcc>
 8001b38:	23ff      	movs	r3, #255	@ 0xff
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	7b3b      	ldrb	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <bno055_set_gyro_unit+0xe6>
 8001b42:	7b3b      	ldrb	r3, [r7, #12]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f9d1 	bl	8001eec <bno055_set_operation_mode>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	4413      	add	r3, r2
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	24000204 	.word	0x24000204

08001b68 <bno055_get_euler_unit>:
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	23ff      	movs	r3, #255	@ 0xff
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	2300      	movs	r3, #0
 8001b76:	737b      	strb	r3, [r7, #13]
 8001b78:	23ff      	movs	r3, #255	@ 0xff
 8001b7a:	73bb      	strb	r3, [r7, #14]
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <bno055_get_euler_unit+0x22>
 8001b84:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001b88:	e02c      	b.n	8001be4 <bno055_get_euler_unit+0x7c>
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	791b      	ldrb	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <bno055_get_euler_unit+0x36>
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff f865 	bl	8000c64 <bno055_write_page_id>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73bb      	strb	r3, [r7, #14]
 8001b9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <bno055_get_euler_unit+0x48>
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	791b      	ldrb	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <bno055_get_euler_unit+0x74>
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691c      	ldr	r4, [r3, #16]
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <bno055_get_euler_unit+0x84>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	7a58      	ldrb	r0, [r3, #9]
 8001bbc:	f107 020d 	add.w	r2, r7, #13
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	213b      	movs	r1, #59	@ 0x3b
 8001bc4:	47a0      	blx	r4
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	7b7b      	ldrb	r3, [r7, #13]
 8001bcc:	109b      	asrs	r3, r3, #2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e001      	b.n	8001be0 <bno055_get_euler_unit+0x78>
 8001bdc:	23ff      	movs	r3, #255	@ 0xff
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	24000204 	.word	0x24000204

08001bf0 <bno055_set_euler_unit>:
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	23ff      	movs	r3, #255	@ 0xff
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	737b      	strb	r3, [r7, #13]
 8001c02:	2300      	movs	r3, #0
 8001c04:	733b      	strb	r3, [r7, #12]
 8001c06:	23ff      	movs	r3, #255	@ 0xff
 8001c08:	73bb      	strb	r3, [r7, #14]
 8001c0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <bno055_set_euler_unit+0x28>
 8001c12:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001c16:	e060      	b.n	8001cda <bno055_set_euler_unit+0xea>
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f923 	bl	8001e68 <bno055_get_operation_mode>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73bb      	strb	r3, [r7, #14]
 8001c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d144      	bne.n	8001cb8 <bno055_set_euler_unit+0xc8>
 8001c2e:	7b3b      	ldrb	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <bno055_set_euler_unit+0x56>
 8001c34:	2000      	movs	r0, #0
 8001c36:	f000 f959 	bl	8001eec <bno055_set_operation_mode>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	4413      	add	r3, r2
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	73bb      	strb	r3, [r7, #14]
 8001c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d131      	bne.n	8001cb2 <bno055_set_euler_unit+0xc2>
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691c      	ldr	r4, [r3, #16]
 8001c54:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	7a58      	ldrb	r0, [r3, #9]
 8001c5a:	f107 020d 	add.w	r2, r7, #13
 8001c5e:	2301      	movs	r3, #1
 8001c60:	213b      	movs	r1, #59	@ 0x3b
 8001c62:	47a0      	blx	r4
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d125      	bne.n	8001cbc <bno055_set_euler_unit+0xcc>
 8001c70:	7b7b      	ldrb	r3, [r7, #13]
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	b25a      	sxtb	r2, r3
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	b25b      	sxtb	r3, r3
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	4313      	orrs	r3, r2
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	737b      	strb	r3, [r7, #13]
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68dc      	ldr	r4, [r3, #12]
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <bno055_set_euler_unit+0xf4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	7a58      	ldrb	r0, [r3, #9]
 8001c9a:	f107 020d 	add.w	r2, r7, #13
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	213b      	movs	r1, #59	@ 0x3b
 8001ca2:	47a0      	blx	r4
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e004      	b.n	8001cbc <bno055_set_euler_unit+0xcc>
 8001cb2:	23ff      	movs	r3, #255	@ 0xff
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e001      	b.n	8001cbc <bno055_set_euler_unit+0xcc>
 8001cb8:	23ff      	movs	r3, #255	@ 0xff
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <bno055_set_euler_unit+0xe6>
 8001cc2:	7b3b      	ldrb	r3, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f911 	bl	8001eec <bno055_set_operation_mode>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd90      	pop	{r4, r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	24000204 	.word	0x24000204

08001ce8 <bno055_get_temp_unit>:
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	23ff      	movs	r3, #255	@ 0xff
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	737b      	strb	r3, [r7, #13]
 8001cf8:	23ff      	movs	r3, #255	@ 0xff
 8001cfa:	73bb      	strb	r3, [r7, #14]
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <bno055_get_temp_unit+0x22>
 8001d04:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001d08:	e02c      	b.n	8001d64 <bno055_get_temp_unit+0x7c>
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	791b      	ldrb	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <bno055_get_temp_unit+0x36>
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7fe ffa5 	bl	8000c64 <bno055_write_page_id>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73bb      	strb	r3, [r7, #14]
 8001d1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <bno055_get_temp_unit+0x48>
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	791b      	ldrb	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d115      	bne.n	8001d5c <bno055_get_temp_unit+0x74>
 8001d30:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691c      	ldr	r4, [r3, #16]
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <bno055_get_temp_unit+0x84>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	7a58      	ldrb	r0, [r3, #9]
 8001d3c:	f107 020d 	add.w	r2, r7, #13
 8001d40:	2301      	movs	r3, #1
 8001d42:	213b      	movs	r1, #59	@ 0x3b
 8001d44:	47a0      	blx	r4
 8001d46:	4603      	mov	r3, r0
 8001d48:	73fb      	strb	r3, [r7, #15]
 8001d4a:	7b7b      	ldrb	r3, [r7, #13]
 8001d4c:	111b      	asrs	r3, r3, #4
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e001      	b.n	8001d60 <bno055_get_temp_unit+0x78>
 8001d5c:	23ff      	movs	r3, #255	@ 0xff
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	24000204 	.word	0x24000204

08001d70 <bno055_set_temp_unit>:
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	23ff      	movs	r3, #255	@ 0xff
 8001d7c:	73fb      	strb	r3, [r7, #15]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	737b      	strb	r3, [r7, #13]
 8001d82:	2300      	movs	r3, #0
 8001d84:	733b      	strb	r3, [r7, #12]
 8001d86:	23ff      	movs	r3, #255	@ 0xff
 8001d88:	73bb      	strb	r3, [r7, #14]
 8001d8a:	4b36      	ldr	r3, [pc, #216]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <bno055_set_temp_unit+0x28>
 8001d92:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001d96:	e060      	b.n	8001e5a <bno055_set_temp_unit+0xea>
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f863 	bl	8001e68 <bno055_get_operation_mode>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73bb      	strb	r3, [r7, #14]
 8001da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d144      	bne.n	8001e38 <bno055_set_temp_unit+0xc8>
 8001dae:	7b3b      	ldrb	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <bno055_set_temp_unit+0x56>
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 f899 	bl	8001eec <bno055_set_operation_mode>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	73bb      	strb	r3, [r7, #14]
 8001dc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d131      	bne.n	8001e32 <bno055_set_temp_unit+0xc2>
 8001dce:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691c      	ldr	r4, [r3, #16]
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	7a58      	ldrb	r0, [r3, #9]
 8001dda:	f107 020d 	add.w	r2, r7, #13
 8001dde:	2301      	movs	r3, #1
 8001de0:	213b      	movs	r1, #59	@ 0x3b
 8001de2:	47a0      	blx	r4
 8001de4:	4603      	mov	r3, r0
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d125      	bne.n	8001e3c <bno055_set_temp_unit+0xcc>
 8001df0:	7b7b      	ldrb	r3, [r7, #13]
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	f023 0310 	bic.w	r3, r3, #16
 8001df8:	b25a      	sxtb	r2, r3
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	737b      	strb	r3, [r7, #13]
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68dc      	ldr	r4, [r3, #12]
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <bno055_set_temp_unit+0xf4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	7a58      	ldrb	r0, [r3, #9]
 8001e1a:	f107 020d 	add.w	r2, r7, #13
 8001e1e:	2301      	movs	r3, #1
 8001e20:	213b      	movs	r1, #59	@ 0x3b
 8001e22:	47a0      	blx	r4
 8001e24:	4603      	mov	r3, r0
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e004      	b.n	8001e3c <bno055_set_temp_unit+0xcc>
 8001e32:	23ff      	movs	r3, #255	@ 0xff
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e001      	b.n	8001e3c <bno055_set_temp_unit+0xcc>
 8001e38:	23ff      	movs	r3, #255	@ 0xff
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	7b3b      	ldrb	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <bno055_set_temp_unit+0xe6>
 8001e42:	7b3b      	ldrb	r3, [r7, #12]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f851 	bl	8001eec <bno055_set_operation_mode>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	4413      	add	r3, r2
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	24000204 	.word	0x24000204

08001e68 <bno055_get_operation_mode>:
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	23ff      	movs	r3, #255	@ 0xff
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	2300      	movs	r3, #0
 8001e76:	737b      	strb	r3, [r7, #13]
 8001e78:	23ff      	movs	r3, #255	@ 0xff
 8001e7a:	73bb      	strb	r3, [r7, #14]
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <bno055_get_operation_mode+0x22>
 8001e84:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001e88:	e02a      	b.n	8001ee0 <bno055_get_operation_mode+0x78>
 8001e8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <bno055_get_operation_mode+0x36>
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7fe fee5 	bl	8000c64 <bno055_write_page_id>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73bb      	strb	r3, [r7, #14]
 8001e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <bno055_get_operation_mode+0x48>
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d113      	bne.n	8001ed8 <bno055_get_operation_mode+0x70>
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691c      	ldr	r4, [r3, #16]
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <bno055_get_operation_mode+0x80>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	7a58      	ldrb	r0, [r3, #9]
 8001ebc:	f107 020d 	add.w	r2, r7, #13
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	213d      	movs	r1, #61	@ 0x3d
 8001ec4:	47a0      	blx	r4
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	7b7b      	ldrb	r3, [r7, #13]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e001      	b.n	8001edc <bno055_get_operation_mode+0x74>
 8001ed8:	23ff      	movs	r3, #255	@ 0xff
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}
 8001ee8:	24000204 	.word	0x24000204

08001eec <bno055_set_operation_mode>:
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	23ff      	movs	r3, #255	@ 0xff
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	2300      	movs	r3, #0
 8001efc:	737b      	strb	r3, [r7, #13]
 8001efe:	2300      	movs	r3, #0
 8001f00:	733b      	strb	r3, [r7, #12]
 8001f02:	23ff      	movs	r3, #255	@ 0xff
 8001f04:	73bb      	strb	r3, [r7, #14]
 8001f06:	4b5c      	ldr	r3, [pc, #368]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <bno055_set_operation_mode+0x28>
 8001f0e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001f12:	e0ac      	b.n	800206e <bno055_set_operation_mode+0x182>
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ffa5 	bl	8001e68 <bno055_get_operation_mode>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73bb      	strb	r3, [r7, #14]
 8001f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 809d 	bne.w	8002066 <bno055_set_operation_mode+0x17a>
 8001f2c:	7b3b      	ldrb	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d137      	bne.n	8001fa2 <bno055_set_operation_mode+0xb6>
 8001f32:	4b51      	ldr	r3, [pc, #324]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691c      	ldr	r4, [r3, #16]
 8001f38:	4b4f      	ldr	r3, [pc, #316]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	7a58      	ldrb	r0, [r3, #9]
 8001f3e:	f107 020d 	add.w	r2, r7, #13
 8001f42:	2301      	movs	r3, #1
 8001f44:	213d      	movs	r1, #61	@ 0x3d
 8001f46:	47a0      	blx	r4
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f040 808a 	bne.w	800206a <bno055_set_operation_mode+0x17e>
 8001f56:	7b7b      	ldrb	r3, [r7, #13]
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	f023 030f 	bic.w	r3, r3, #15
 8001f5e:	b25a      	sxtb	r2, r3
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	737b      	strb	r3, [r7, #13]
 8001f72:	4b41      	ldr	r3, [pc, #260]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68dc      	ldr	r4, [r3, #12]
 8001f78:	4b3f      	ldr	r3, [pc, #252]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	7a58      	ldrb	r0, [r3, #9]
 8001f7e:	f107 020d 	add.w	r2, r7, #13
 8001f82:	2301      	movs	r3, #1
 8001f84:	213d      	movs	r1, #61	@ 0x3d
 8001f86:	47a0      	blx	r4
 8001f88:	4603      	mov	r3, r0
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001f9e:	4798      	blx	r3
 8001fa0:	e063      	b.n	800206a <bno055_set_operation_mode+0x17e>
 8001fa2:	4b35      	ldr	r3, [pc, #212]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691c      	ldr	r4, [r3, #16]
 8001fa8:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	7a58      	ldrb	r0, [r3, #9]
 8001fae:	f107 020d 	add.w	r2, r7, #13
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	213d      	movs	r1, #61	@ 0x3d
 8001fb6:	47a0      	blx	r4
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d116      	bne.n	8001ff2 <bno055_set_operation_mode+0x106>
 8001fc4:	7b7b      	ldrb	r3, [r7, #13]
 8001fc6:	f023 030f 	bic.w	r3, r3, #15
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	737b      	strb	r3, [r7, #13]
 8001fce:	f107 030d 	add.w	r3, r7, #13
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	203d      	movs	r0, #61	@ 0x3d
 8001fd8:	f7fe fe1e 	bl	8000c18 <bno055_write_register>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2014      	movs	r0, #20
 8001ff0:	4798      	blx	r3
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d038      	beq.n	800206a <bno055_set_operation_mode+0x17e>
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691c      	ldr	r4, [r3, #16]
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	7a58      	ldrb	r0, [r3, #9]
 8002004:	f107 020d 	add.w	r2, r7, #13
 8002008:	2301      	movs	r3, #1
 800200a:	213d      	movs	r1, #61	@ 0x3d
 800200c:	47a0      	blx	r4
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d127      	bne.n	800206a <bno055_set_operation_mode+0x17e>
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	b25b      	sxtb	r3, r3
 800201e:	f023 030f 	bic.w	r3, r3, #15
 8002022:	b25a      	sxtb	r2, r3
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	b25b      	sxtb	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b25b      	sxtb	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	737b      	strb	r3, [r7, #13]
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68dc      	ldr	r4, [r3, #12]
 800203c:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	7a58      	ldrb	r0, [r3, #9]
 8002042:	f107 020d 	add.w	r2, r7, #13
 8002046:	2301      	movs	r3, #1
 8002048:	213d      	movs	r1, #61	@ 0x3d
 800204a:	47a0      	blx	r4
 800204c:	4603      	mov	r3, r0
 800204e:	b2da      	uxtb	r2, r3
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	4413      	add	r3, r2
 8002054:	b2db      	uxtb	r3, r3
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <bno055_set_operation_mode+0x18c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002062:	4798      	blx	r3
 8002064:	e001      	b.n	800206a <bno055_set_operation_mode+0x17e>
 8002066:	23ff      	movs	r3, #255	@ 0xff
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bd90      	pop	{r4, r7, pc}
 8002076:	bf00      	nop
 8002078:	24000204 	.word	0x24000204

0800207c <bno055_set_power_mode>:
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
 8002086:	23ff      	movs	r3, #255	@ 0xff
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	2300      	movs	r3, #0
 800208c:	737b      	strb	r3, [r7, #13]
 800208e:	2300      	movs	r3, #0
 8002090:	733b      	strb	r3, [r7, #12]
 8002092:	23ff      	movs	r3, #255	@ 0xff
 8002094:	73bb      	strb	r3, [r7, #14]
 8002096:	4b35      	ldr	r3, [pc, #212]	@ (800216c <bno055_set_power_mode+0xf0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <bno055_set_power_mode+0x28>
 800209e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80020a2:	e05f      	b.n	8002164 <bno055_set_power_mode+0xe8>
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fedd 	bl	8001e68 <bno055_get_operation_mode>
 80020ae:	4603      	mov	r3, r0
 80020b0:	73bb      	strb	r3, [r7, #14]
 80020b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d143      	bne.n	8002142 <bno055_set_power_mode+0xc6>
 80020ba:	7b3b      	ldrb	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <bno055_set_power_mode+0x56>
 80020c0:	2000      	movs	r0, #0
 80020c2:	f7ff ff13 	bl	8001eec <bno055_set_operation_mode>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	4413      	add	r3, r2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	73bb      	strb	r3, [r7, #14]
 80020d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d130      	bne.n	800213c <bno055_set_power_mode+0xc0>
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <bno055_set_power_mode+0xf0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691c      	ldr	r4, [r3, #16]
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <bno055_set_power_mode+0xf0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	7a58      	ldrb	r0, [r3, #9]
 80020e6:	f107 020d 	add.w	r2, r7, #13
 80020ea:	2301      	movs	r3, #1
 80020ec:	213e      	movs	r1, #62	@ 0x3e
 80020ee:	47a0      	blx	r4
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d124      	bne.n	8002146 <bno055_set_power_mode+0xca>
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	f023 0303 	bic.w	r3, r3, #3
 8002104:	b25a      	sxtb	r2, r3
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	b25b      	sxtb	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b25b      	sxtb	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	737b      	strb	r3, [r7, #13]
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <bno055_set_power_mode+0xf0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68dc      	ldr	r4, [r3, #12]
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <bno055_set_power_mode+0xf0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	7a58      	ldrb	r0, [r3, #9]
 8002124:	f107 020d 	add.w	r2, r7, #13
 8002128:	2301      	movs	r3, #1
 800212a:	213e      	movs	r1, #62	@ 0x3e
 800212c:	47a0      	blx	r4
 800212e:	4603      	mov	r3, r0
 8002130:	b2da      	uxtb	r2, r3
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4413      	add	r3, r2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e004      	b.n	8002146 <bno055_set_power_mode+0xca>
 800213c:	23ff      	movs	r3, #255	@ 0xff
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e001      	b.n	8002146 <bno055_set_power_mode+0xca>
 8002142:	23ff      	movs	r3, #255	@ 0xff
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	7b3b      	ldrb	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d009      	beq.n	8002160 <bno055_set_power_mode+0xe4>
 800214c:	7b3b      	ldrb	r3, [r7, #12]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fecc 	bl	8001eec <bno055_set_operation_mode>
 8002154:	4603      	mov	r3, r0
 8002156:	b2da      	uxtb	r2, r3
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	4413      	add	r3, r2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}
 800216c:	24000204 	.word	0x24000204

08002170 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af02      	add	r7, sp, #8
 8002176:	603a      	str	r2, [r7, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
 800217e:	460b      	mov	r3, r1
 8002180:	71bb      	strb	r3, [r7, #6]
 8002182:	4613      	mov	r3, r2
 8002184:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	b29b      	uxth	r3, r3
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 800218e:	1dba      	adds	r2, r7, #6
 8002190:	89f9      	ldrh	r1, [r7, #14]
 8002192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	4809      	ldr	r0, [pc, #36]	@ (80021c0 <bno055_platform_read+0x50>)
 800219c:	f002 ffba 	bl	8005114 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 80021a0:	797b      	ldrb	r3, [r7, #5]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	89f9      	ldrh	r1, [r7, #14]
 80021a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021aa:	9200      	str	r2, [sp, #0]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4804      	ldr	r0, [pc, #16]	@ (80021c0 <bno055_platform_read+0x50>)
 80021b0:	f003 f8c8 	bl	8005344 <HAL_I2C_Master_Receive>
    return 0;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2400048c 	.word	0x2400048c

080021c4 <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	603a      	str	r2, [r7, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	460b      	mov	r3, r1
 80021d4:	71bb      	strb	r3, [r7, #6]
 80021d6:	4613      	mov	r3, r2
 80021d8:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 80021e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <bno055_platform_write+0x54>)
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 80021e8:	797b      	ldrb	r3, [r7, #5]
 80021ea:	461a      	mov	r2, r3
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	480b      	ldr	r0, [pc, #44]	@ (800221c <bno055_platform_write+0x58>)
 80021f0:	f00c fcab 	bl	800eb4a <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 80021f4:	797b      	ldrb	r3, [r7, #5]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	89f9      	ldrh	r1, [r7, #14]
 80021fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <bno055_platform_write+0x54>)
 8002206:	4806      	ldr	r0, [pc, #24]	@ (8002220 <bno055_platform_write+0x5c>)
 8002208:	f002 ff84 	bl	8005114 <HAL_I2C_Master_Transmit>
    return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	24000220 	.word	0x24000220
 800221c:	24000221 	.word	0x24000221
 8002220:	2400048c 	.word	0x2400048c

08002224 <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(Delay--)
 800222c:	e008      	b.n	8002240 <DelayUs+0x1c>
	{
		for(i = 0; i < 84; i++)
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e002      	b.n	800223a <DelayUs+0x16>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b53      	cmp	r3, #83	@ 0x53
 800223e:	d9f9      	bls.n	8002234 <DelayUs+0x10>
	while(Delay--)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f1      	bne.n	800222e <DelayUs+0xa>
			;
		}
	}

	//HAL_Delay(Delay);
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
int8_t BNO055_Init(){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 800225e:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <BNO055_Init+0x94>)
 8002260:	4a23      	ldr	r2, [pc, #140]	@ (80022f0 <BNO055_Init+0x98>)
 8002262:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8002264:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <BNO055_Init+0x94>)
 8002266:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <BNO055_Init+0x9c>)
 8002268:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <BNO055_Init+0x94>)
 800226c:	4a22      	ldr	r2, [pc, #136]	@ (80022f8 <BNO055_Init+0xa0>)
 800226e:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 8002270:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <BNO055_Init+0x94>)
 8002272:	2228      	movs	r2, #40	@ 0x28
 8002274:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 8002276:	1dfa      	adds	r2, r7, #7
 8002278:	2301      	movs	r3, #1
 800227a:	2100      	movs	r1, #0
 800227c:	2028      	movs	r0, #40	@ 0x28
 800227e:	f7ff ff77 	bl	8002170 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 8002282:	481a      	ldr	r0, [pc, #104]	@ (80022ec <BNO055_Init+0x94>)
 8002284:	f7fe fc08 	bl	8000a98 <bno055_init>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <BNO055_Init+0xa4>)
 800228e:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <BNO055_Init+0xa8>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 8002296:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <BNO055_Init+0xa8>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff feee 	bl	800207c <bno055_set_power_mode>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <BNO055_Init+0xa4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a14      	ldr	r2, [pc, #80]	@ (80022fc <BNO055_Init+0xa4>)
 80022ac:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
	    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 80022ae:	200c      	movs	r0, #12
 80022b0:	f7ff fe1c 	bl	8001eec <bno055_set_operation_mode>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <BNO055_Init+0xa4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	4a0f      	ldr	r2, [pc, #60]	@ (80022fc <BNO055_Init+0xa4>)
 80022c0:	6013      	str	r3, [r2, #0]
	    comres += bno055_get_operation_mode(&op_mode_current);
 80022c2:	4810      	ldr	r0, [pc, #64]	@ (8002304 <BNO055_Init+0xac>)
 80022c4:	f7ff fdd0 	bl	8001e68 <bno055_get_operation_mode>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <BNO055_Init+0xa4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <BNO055_Init+0xa4>)
 80022d4:	6013      	str	r3, [r2, #0]
//		}
//		else
//		{
//			printf("bno055_init failed, comres=%d\r\n", comres);
//		}
	    DelayUs(1000000); // 1 second
 80022d6:	480c      	ldr	r0, [pc, #48]	@ (8002308 <BNO055_Init+0xb0>)
 80022d8:	f7ff ffa4 	bl	8002224 <DelayUs>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 80022dc:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <BNO055_Init+0xa4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b25b      	sxtb	r3, r3
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	24000208 	.word	0x24000208
 80022f0:	080021c5 	.word	0x080021c5
 80022f4:	08002171 	.word	0x08002171
 80022f8:	08002225 	.word	0x08002225
 80022fc:	24000000 	.word	0x24000000
 8002300:	24000435 	.word	0x24000435
 8002304:	24000434 	.word	0x24000434
 8002308:	000f4240 	.word	0x000f4240
 800230c:	00000000 	.word	0x00000000

08002310 <bno_read_fusion_data>:

AHRS_9_Axis_Data bno_read_fusion_data(){
 8002310:	b580      	push	{r7, lr}
 8002312:	b0aa      	sub	sp, #168	@ 0xa8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

    int8_t comres = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Initialize the return structure
    AHRS_9_Axis_Data data = {0};
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	2298      	movs	r2, #152	@ 0x98
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f00c fb90 	bl	800ea4c <memset>

    // Read Euler angles (Orientation)
    comres += bno055_convert_float_euler_hpr_deg(euler_temp_data);
 800232c:	4b86      	ldr	r3, [pc, #536]	@ (8002548 <bno_read_fusion_data+0x238>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f831 	bl	8001398 <bno055_convert_float_euler_hpr_deg>
 8002336:	4603      	mov	r3, r0
 8002338:	b2da      	uxtb	r2, r3
 800233a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800233e:	4413      	add	r3, r2
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.orientation[0] = euler_temp_data->p;
 8002346:	4b80      	ldr	r3, [pc, #512]	@ (8002548 <bno_read_fusion_data+0x238>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	60bb      	str	r3, [r7, #8]
    data.orientation[1] = euler_temp_data->r;
 800234e:	4b7e      	ldr	r3, [pc, #504]	@ (8002548 <bno_read_fusion_data+0x238>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60fb      	str	r3, [r7, #12]
    data.orientation[2] = euler_temp_data->h;
 8002356:	4b7c      	ldr	r3, [pc, #496]	@ (8002548 <bno_read_fusion_data+0x238>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	613b      	str	r3, [r7, #16]

    // Read Quaternion data -> Added scaling factor division for quaternion normalization (-1 ; +1)
    comres += bno055_read_quaternion_wxyz(quaternion_temp_data);
 800235e:	4b7b      	ldr	r3, [pc, #492]	@ (800254c <bno_read_fusion_data+0x23c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe feee 	bl	8001144 <bno055_read_quaternion_wxyz>
 8002368:	4603      	mov	r3, r0
 800236a:	b2da      	uxtb	r2, r3
 800236c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002370:	4413      	add	r3, r2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.quaternion.w = quaternion_temp_data->w / QUAT_SCALING_FACT;
 8002378:	4b74      	ldr	r3, [pc, #464]	@ (800254c <bno_read_fusion_data+0x23c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002388:	ed9f 5b6b 	vldr	d5, [pc, #428]	@ 8002538 <bno_read_fusion_data+0x228>
 800238c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002390:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    data.quaternion.x = quaternion_temp_data->x / QUAT_SCALING_FACT;
 8002394:	4b6d      	ldr	r3, [pc, #436]	@ (800254c <bno_read_fusion_data+0x23c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023a4:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 8002538 <bno_read_fusion_data+0x228>
 80023a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023ac:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    data.quaternion.y = quaternion_temp_data->y / QUAT_SCALING_FACT;
 80023b0:	4b66      	ldr	r3, [pc, #408]	@ (800254c <bno_read_fusion_data+0x23c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023c0:	ed9f 5b5d 	vldr	d5, [pc, #372]	@ 8002538 <bno_read_fusion_data+0x228>
 80023c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023c8:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    data.quaternion.z = quaternion_temp_data->z / QUAT_SCALING_FACT;
 80023cc:	4b5f      	ldr	r3, [pc, #380]	@ (800254c <bno_read_fusion_data+0x23c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023dc:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8002538 <bno_read_fusion_data+0x228>
 80023e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023e4:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98

    // Read Linear acceleration
    comres += bno055_convert_double_accel_xyz_mg(accel_temp_data);
 80023e8:	4b59      	ldr	r3, [pc, #356]	@ (8002550 <bno_read_fusion_data+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff f8e3 	bl	80015b8 <bno055_convert_double_accel_xyz_mg>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80023fa:	4413      	add	r3, r2
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.acceleration[0] = accel_temp_data->x / 1000; // Division by 1000 -> Converts millig to g
 8002402:	4b53      	ldr	r3, [pc, #332]	@ (8002550 <bno_read_fusion_data+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	ed93 6b00 	vldr	d6, [r3]
 800240a:	ed9f 5b4d 	vldr	d5, [pc, #308]	@ 8002540 <bno_read_fusion_data+0x230>
 800240e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002412:	ed87 7b08 	vstr	d7, [r7, #32]
    data.acceleration[1] = accel_temp_data->y / 1000; // Division by 1000 -> Converts millig to g
 8002416:	4b4e      	ldr	r3, [pc, #312]	@ (8002550 <bno_read_fusion_data+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	ed93 6b02 	vldr	d6, [r3, #8]
 800241e:	ed9f 5b48 	vldr	d5, [pc, #288]	@ 8002540 <bno_read_fusion_data+0x230>
 8002422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002426:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    data.acceleration[2] = accel_temp_data->z / 1000; // Division by 1000 -> Converts millig to g
 800242a:	4b49      	ldr	r3, [pc, #292]	@ (8002550 <bno_read_fusion_data+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	ed93 6b04 	vldr	d6, [r3, #16]
 8002432:	ed9f 5b43 	vldr	d5, [pc, #268]	@ 8002540 <bno_read_fusion_data+0x230>
 8002436:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800243a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

    comres += bno055_convert_double_gyro_xyz_dps(gyro_temp_xyz);
 800243e:	4b45      	ldr	r3, [pc, #276]	@ (8002554 <bno_read_fusion_data+0x244>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f9ac 	bl	80017a0 <bno055_convert_double_gyro_xyz_dps>
 8002448:	4603      	mov	r3, r0
 800244a:	b2da      	uxtb	r2, r3
 800244c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002450:	4413      	add	r3, r2
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.gyroscope[0] = gyro_temp_xyz->x;
 8002458:	4b3e      	ldr	r3, [pc, #248]	@ (8002554 <bno_read_fusion_data+0x244>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    data.gyroscope[1] = gyro_temp_xyz->y;
 8002464:	4b3b      	ldr	r3, [pc, #236]	@ (8002554 <bno_read_fusion_data+0x244>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800246c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    data.gyroscope[2] = gyro_temp_xyz->z;
 8002470:	4b38      	ldr	r3, [pc, #224]	@ (8002554 <bno_read_fusion_data+0x244>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002478:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    // Read Gravity data
    comres += bno055_convert_float_gravity_xyz_msq(gravity_temp_data);
 800247c:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <bno_read_fusion_data+0x248>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fff9 	bl	8001478 <bno055_convert_float_gravity_xyz_msq>
 8002486:	4603      	mov	r3, r0
 8002488:	b2da      	uxtb	r2, r3
 800248a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800248e:	4413      	add	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.gravity[0] = gravity_temp_data->x;
 8002496:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <bno_read_fusion_data+0x248>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	653b      	str	r3, [r7, #80]	@ 0x50
    data.gravity[1] = gravity_temp_data->y;
 800249e:	4b2e      	ldr	r3, [pc, #184]	@ (8002558 <bno_read_fusion_data+0x248>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	657b      	str	r3, [r7, #84]	@ 0x54
    data.gravity[2] = gravity_temp_data->z;
 80024a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002558 <bno_read_fusion_data+0x248>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	65bb      	str	r3, [r7, #88]	@ 0x58

    // Read Magnetometer data
    comres += bno055_convert_double_mag_x_uT(&data.magnetometer[0]);
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	3358      	adds	r3, #88	@ 0x58
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f8da 	bl	800166e <bno055_convert_double_mag_x_uT>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80024c2:	4413      	add	r3, r2
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    comres += bno055_convert_double_mag_y_uT(&data.magnetometer[1]);
 80024ca:	f107 0308 	add.w	r3, r7, #8
 80024ce:	3360      	adds	r3, #96	@ 0x60
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f8ff 	bl	80016d4 <bno055_convert_double_mag_y_uT>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80024de:	4413      	add	r3, r2
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    comres += bno055_convert_double_mag_z_uT(&data.magnetometer[2]);
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	3368      	adds	r3, #104	@ 0x68
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f924 	bl	800173a <bno055_convert_double_mag_z_uT>
 80024f2:	4603      	mov	r3, r0
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80024fa:	4413      	add	r3, r2
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    comres += bno055_convert_float_temp_celsius(&data.temperature);
 8002502:	f107 0308 	add.w	r3, r7, #8
 8002506:	3370      	adds	r3, #112	@ 0x70
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f809 	bl	8001520 <bno055_convert_float_temp_celsius>
 800250e:	4603      	mov	r3, r0
 8002510:	b2da      	uxtb	r2, r3
 8002512:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002516:	4413      	add	r3, r2
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    // Check communication results (Optional, for debugging)
    if (comres != 0) {
        //printf("Communication error: %d\n", comres);
    }

    return data;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	2298      	movs	r2, #152	@ 0x98
 8002528:	4619      	mov	r1, r3
 800252a:	f00c fb0e 	bl	800eb4a <memcpy>
}
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	37a8      	adds	r7, #168	@ 0xa8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	00000000 	.word	0x00000000
 800253c:	40d00000 	.word	0x40d00000
 8002540:	00000000 	.word	0x00000000
 8002544:	408f4000 	.word	0x408f4000
 8002548:	24000420 	.word	0x24000420
 800254c:	24000424 	.word	0x24000424
 8002550:	24000428 	.word	0x24000428
 8002554:	2400042c 	.word	0x2400042c
 8002558:	24000430 	.word	0x24000430

0800255c <Send_Quat_To_IMU_Visualizer>:

void Send_Quat_To_IMU_Visualizer(quaternion_vect q)
{
 800255c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002560:	b0ab      	sub	sp, #172	@ 0xac
 8002562:	af08      	add	r7, sp, #32
 8002564:	eeb0 4b40 	vmov.f64	d4, d0
 8002568:	eeb0 5b41 	vmov.f64	d5, d1
 800256c:	eeb0 6b42 	vmov.f64	d6, d2
 8002570:	eeb0 7b43 	vmov.f64	d7, d3
 8002574:	ed87 4b00 	vstr	d4, [r7]
 8002578:	ed87 5b02 	vstr	d5, [r7, #8]
 800257c:	ed87 6b04 	vstr	d6, [r7, #16]
 8002580:	ed87 7b06 	vstr	d7, [r7, #24]
char quaternionStr[100];
float lama = 0.1;
 8002584:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <Send_Quat_To_IMU_Visualizer+0x8c>)
 8002586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
// Format quaternion (W, X, Y, Z vectors) as a comma-separated string
sprintf(quaternionStr, "%.6f,%.6f,%.6f,%.6f,%.6f\r\n", q.w, q.x, q.y, q.z, lama);
 800258a:	e9d7 8900 	ldrd	r8, r9, [r7]
 800258e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002596:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800259a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800259e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025a2:	f107 0620 	add.w	r6, r7, #32
 80025a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80025aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80025ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80025b2:	e9cd 2300 	strd	r2, r3, [sp]
 80025b6:	4642      	mov	r2, r8
 80025b8:	464b      	mov	r3, r9
 80025ba:	490c      	ldr	r1, [pc, #48]	@ (80025ec <Send_Quat_To_IMU_Visualizer+0x90>)
 80025bc:	4630      	mov	r0, r6
 80025be:	f00c f94d 	bl	800e85c <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)quaternionStr, strlen(quaternionStr), HAL_MAX_DELAY);
 80025c2:	f107 0320 	add.w	r3, r7, #32
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd fef2 	bl	80003b0 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f107 0120 	add.w	r1, r7, #32
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	4805      	ldr	r0, [pc, #20]	@ (80025f0 <Send_Quat_To_IMU_Visualizer+0x94>)
 80025da:	f008 fbae 	bl	800ad3a <HAL_UART_Transmit>
}
 80025de:	bf00      	nop
 80025e0:	378c      	adds	r7, #140	@ 0x8c
 80025e2:	46bd      	mov	sp, r7
 80025e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025e8:	3dcccccd 	.word	0x3dcccccd
 80025ec:	08011f94 	.word	0x08011f94
 80025f0:	240007dc 	.word	0x240007dc

080025f4 <bno055_print_fusion_data>:

void bno055_print_fusion_data(AHRS_9_Axis_Data *data) {
 80025f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025f8:	b088      	sub	sp, #32
 80025fa:	af06      	add	r7, sp, #24
 80025fc:	6078      	str	r0, [r7, #4]
printf("BNO055 AHRS: \n");
 80025fe:	485d      	ldr	r0, [pc, #372]	@ (8002774 <bno055_print_fusion_data+0x180>)
 8002600:	f00c f924 	bl	800e84c <puts>
// Print orientation (Pitch, Roll, Yaw)
printf("Orientation -> ");
 8002604:	485c      	ldr	r0, [pc, #368]	@ (8002778 <bno055_print_fusion_data+0x184>)
 8002606:	f00c f8b9 	bl	800e77c <iprintf>
printf("Pitch: %.2f deg, Roll: %.2f deg, Yaw: %.2f deg \n", data->orientation[0], data->orientation[1], data->orientation[2]);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	edd3 7a01 	vldr	s15, [r3, #4]
 800261a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	edd3 6a02 	vldr	s13, [r3, #8]
 8002624:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002628:	ed8d 6b02 	vstr	d6, [sp, #8]
 800262c:	ed8d 7b00 	vstr	d7, [sp]
 8002630:	ec53 2b15 	vmov	r2, r3, d5
 8002634:	4851      	ldr	r0, [pc, #324]	@ (800277c <bno055_print_fusion_data+0x188>)
 8002636:	f00c f8a1 	bl	800e77c <iprintf>

//printf("Orientation from Quaternions -> ");
//printf("Pitch: %.2f deg, Roll: %.2f deg, Yaw: %.2f deg \n", data->orientation_q[0], data->orientation_q[1], data->orientation_q[2]);

// Print quaternion (W, X, Y, Z vectors)
printf("Quaternion -> ");
 800263a:	4851      	ldr	r0, [pc, #324]	@ (8002780 <bno055_print_fusion_data+0x18c>)
 800263c:	f00c f89e 	bl	800e77c <iprintf>
printf("W: %.2f , X: %.2f , Y: %.2f , Z: %.2f \n", data->quaternion.w, data->quaternion.x, data->quaternion.y, data->quaternion.z);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	@ 0x78
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	e9d1 0122 	ldrd	r0, r1, [r1, #136]	@ 0x88
 8002652:	687c      	ldr	r4, [r7, #4]
 8002654:	e9d4 4524 	ldrd	r4, r5, [r4, #144]	@ 0x90
 8002658:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800265c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002660:	e9cd 2300 	strd	r2, r3, [sp]
 8002664:	4642      	mov	r2, r8
 8002666:	464b      	mov	r3, r9
 8002668:	4846      	ldr	r0, [pc, #280]	@ (8002784 <bno055_print_fusion_data+0x190>)
 800266a:	f00c f887 	bl	800e77c <iprintf>

Send_Quat_To_IMU_Visualizer(data->quaternion);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	ed93 4b1e 	vldr	d4, [r3, #120]	@ 0x78
 8002674:	ed93 5b20 	vldr	d5, [r3, #128]	@ 0x80
 8002678:	ed93 6b22 	vldr	d6, [r3, #136]	@ 0x88
 800267c:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 8002680:	eeb0 0b44 	vmov.f64	d0, d4
 8002684:	eeb0 1b45 	vmov.f64	d1, d5
 8002688:	eeb0 2b46 	vmov.f64	d2, d6
 800268c:	eeb0 3b47 	vmov.f64	d3, d7
 8002690:	f7ff ff64 	bl	800255c <Send_Quat_To_IMU_Visualizer>

// Print acceleration (X, Y, Z)
printf("Acceleration -> ");
 8002694:	483c      	ldr	r0, [pc, #240]	@ (8002788 <bno055_print_fusion_data+0x194>)
 8002696:	f00c f871 	bl	800e77c <iprintf>
printf("X: %.2f g, Y: %.2f g, Z: %.2f g \n", data->acceleration[0], data->acceleration[1], data->acceleration[2]);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	@ 0x28
 80026ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026b0:	e9cd 2300 	strd	r2, r3, [sp]
 80026b4:	4622      	mov	r2, r4
 80026b6:	462b      	mov	r3, r5
 80026b8:	4834      	ldr	r0, [pc, #208]	@ (800278c <bno055_print_fusion_data+0x198>)
 80026ba:	f00c f85f 	bl	800e77c <iprintf>

// Print gyroscope data (X, Y, Z)
printf("Angular Rate -> ");
 80026be:	4834      	ldr	r0, [pc, #208]	@ (8002790 <bno055_print_fusion_data+0x19c>)
 80026c0:	f00c f85c 	bl	800e77c <iprintf>
printf("X: %.2f dps, Y: %.2f dps, Z: %.2f dps \n", data->gyroscope[0], data->gyroscope[1], data->gyroscope[2]);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	@ 0x40
 80026d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026da:	e9cd 2300 	strd	r2, r3, [sp]
 80026de:	4622      	mov	r2, r4
 80026e0:	462b      	mov	r3, r5
 80026e2:	482c      	ldr	r0, [pc, #176]	@ (8002794 <bno055_print_fusion_data+0x1a0>)
 80026e4:	f00c f84a 	bl	800e77c <iprintf>

// Print gravity data (X, Y, Z)
printf("Gravity -> ");
 80026e8:	482b      	ldr	r0, [pc, #172]	@ (8002798 <bno055_print_fusion_data+0x1a4>)
 80026ea:	f00c f847 	bl	800e77c <iprintf>
printf("X: %.2f m/s^2, Y: %.2f m/s^2, Z: %.2f m/s^2\n", data->gravity[0], data->gravity[1], data->gravity[2]);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80026f4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80026fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8002708:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800270c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002710:	ed8d 7b00 	vstr	d7, [sp]
 8002714:	ec53 2b15 	vmov	r2, r3, d5
 8002718:	4820      	ldr	r0, [pc, #128]	@ (800279c <bno055_print_fusion_data+0x1a8>)
 800271a:	f00c f82f 	bl	800e77c <iprintf>

// Print magnetometer data (X, Y, Z)
printf("Magnetometer -> ");
 800271e:	4820      	ldr	r0, [pc, #128]	@ (80027a0 <bno055_print_fusion_data+0x1ac>)
 8002720:	f00c f82c 	bl	800e77c <iprintf>
printf("X: %.2f µT, Y: %.2f µT, Z: %.2f µT \n", data->magnetometer[0], data->magnetometer[1], data->magnetometer[2]);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	e9d1 011a 	ldrd	r0, r1, [r1, #104]	@ 0x68
 8002736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800273a:	e9cd 2300 	strd	r2, r3, [sp]
 800273e:	4622      	mov	r2, r4
 8002740:	462b      	mov	r3, r5
 8002742:	4818      	ldr	r0, [pc, #96]	@ (80027a4 <bno055_print_fusion_data+0x1b0>)
 8002744:	f00c f81a 	bl	800e77c <iprintf>

// Print magnetometer data (X, Y, Z)
printf("Temperature -> ");
 8002748:	4817      	ldr	r0, [pc, #92]	@ (80027a8 <bno055_print_fusion_data+0x1b4>)
 800274a:	f00c f817 	bl	800e77c <iprintf>
printf("Temperature: %.2f degC \n", data->temperature);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002754:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002758:	ec53 2b17 	vmov	r2, r3, d7
 800275c:	4813      	ldr	r0, [pc, #76]	@ (80027ac <bno055_print_fusion_data+0x1b8>)
 800275e:	f00c f80d 	bl	800e77c <iprintf>

printf("----- \n");
 8002762:	4813      	ldr	r0, [pc, #76]	@ (80027b0 <bno055_print_fusion_data+0x1bc>)
 8002764:	f00c f872 	bl	800e84c <puts>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002772:	bf00      	nop
 8002774:	08011fb0 	.word	0x08011fb0
 8002778:	08011fc0 	.word	0x08011fc0
 800277c:	08011fd0 	.word	0x08011fd0
 8002780:	08012004 	.word	0x08012004
 8002784:	08012014 	.word	0x08012014
 8002788:	0801203c 	.word	0x0801203c
 800278c:	08012050 	.word	0x08012050
 8002790:	08012074 	.word	0x08012074
 8002794:	08012088 	.word	0x08012088
 8002798:	080120b0 	.word	0x080120b0
 800279c:	080120bc 	.word	0x080120bc
 80027a0:	080120ec 	.word	0x080120ec
 80027a4:	08012100 	.word	0x08012100
 80027a8:	08012128 	.word	0x08012128
 80027ac:	08012138 	.word	0x08012138
 80027b0:	08012154 	.word	0x08012154

080027b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80027bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80027c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80027cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80027d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80027d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80027dc:	e000      	b.n	80027e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80027de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80027e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f9      	beq.n	80027de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80027ea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
	int i=0;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e009      	b.n	800282c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ffc7 	bl	80027b4 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbf1      	blt.n	8002818 <_write+0x16>
	}
	return len;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002842:	f000 fc19 	bl	8003078 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002846:	f001 fa4d 	bl	8003ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800284a:	f000 f81d 	bl	8002888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800284e:	f000 fb01 	bl	8002e54 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8002852:	f000 f947 	bl	8002ae4 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8002856:	f000 f885 	bl	8002964 <MX_I2C1_Init>
  MX_I2C2_Init();
 800285a:	f000 f8c3 	bl	80029e4 <MX_I2C2_Init>
  MX_I2C4_Init();
 800285e:	f000 f901 	bl	8002a64 <MX_I2C4_Init>
  MX_SPI1_Init();
 8002862:	f000 f95d 	bl	8002b20 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002866:	f000 f9b1 	bl	8002bcc <MX_SPI2_Init>
  MX_UART8_Init();
 800286a:	f000 fa5b 	bl	8002d24 <MX_UART8_Init>
  MX_USART1_UART_Init();
 800286e:	f000 faa5 	bl	8002dbc <MX_USART1_UART_Init>
  MX_SPI4_Init();
 8002872:	f000 fa01 	bl	8002c78 <MX_SPI4_Init>
  MX_FATFS_Init();
 8002876:	f00a fe81 	bl	800d57c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 800287a:	f001 f953 	bl	8003b24 <SensorManager_Init>
  TestTelemetry();
 800287e:	f001 f9e1 	bl	8003c44 <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002882:	bf00      	nop
 8002884:	e7fd      	b.n	8002882 <main+0x44>
	...

08002888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b09c      	sub	sp, #112	@ 0x70
 800288c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002892:	224c      	movs	r2, #76	@ 0x4c
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f00c f8d8 	bl	800ea4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2220      	movs	r2, #32
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f00c f8d2 	bl	800ea4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80028a8:	2002      	movs	r0, #2
 80028aa:	f003 f97f 	bl	8005bac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80028ae:	2300      	movs	r3, #0
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <SystemClock_Config+0xd8>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002960 <SystemClock_Config+0xd8>)
 80028b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80028bc:	6193      	str	r3, [r2, #24]
 80028be:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <SystemClock_Config+0xd8>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028ca:	bf00      	nop
 80028cc:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <SystemClock_Config+0xd8>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028d8:	d1f8      	bne.n	80028cc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028da:	2301      	movs	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e4:	2302      	movs	r3, #2
 80028e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028e8:	2302      	movs	r3, #2
 80028ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80028ec:	2303      	movs	r3, #3
 80028ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80028f0:	231f      	movs	r3, #31
 80028f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028f8:	2302      	movs	r3, #2
 80028fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028fc:	2302      	movs	r3, #2
 80028fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002900:	230c      	movs	r3, #12
 8002902:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002904:	2300      	movs	r3, #0
 8002906:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8002908:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800290c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800290e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002912:	4618      	mov	r0, r3
 8002914:	f003 f984 	bl	8005c20 <HAL_RCC_OscConfig>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800291e:	f000 fbd7 	bl	80030d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002922:	233f      	movs	r3, #63	@ 0x3f
 8002924:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002926:	2303      	movs	r3, #3
 8002928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800292e:	2308      	movs	r3, #8
 8002930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002932:	2340      	movs	r3, #64	@ 0x40
 8002934:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002936:	2340      	movs	r3, #64	@ 0x40
 8002938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800293a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800293e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002940:	2340      	movs	r3, #64	@ 0x40
 8002942:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2103      	movs	r1, #3
 8002948:	4618      	mov	r0, r3
 800294a:	f003 fd43 	bl	80063d4 <HAL_RCC_ClockConfig>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002954:	f000 fbbc 	bl	80030d0 <Error_Handler>
  }
}
 8002958:	bf00      	nop
 800295a:	3770      	adds	r7, #112	@ 0x70
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	58024800 	.word	0x58024800

08002964 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002968:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <MX_I2C1_Init+0x74>)
 800296a:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <MX_I2C1_Init+0x78>)
 800296c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <MX_I2C1_Init+0x74>)
 8002970:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <MX_I2C1_Init+0x7c>)
 8002972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002974:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <MX_I2C1_Init+0x74>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800297a:	4b17      	ldr	r3, [pc, #92]	@ (80029d8 <MX_I2C1_Init+0x74>)
 800297c:	2201      	movs	r2, #1
 800297e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <MX_I2C1_Init+0x74>)
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002986:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <MX_I2C1_Init+0x74>)
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <MX_I2C1_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002992:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <MX_I2C1_Init+0x74>)
 8002994:	2200      	movs	r2, #0
 8002996:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002998:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <MX_I2C1_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800299e:	480e      	ldr	r0, [pc, #56]	@ (80029d8 <MX_I2C1_Init+0x74>)
 80029a0:	f002 fb1c 	bl	8004fdc <HAL_I2C_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029aa:	f000 fb91 	bl	80030d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029ae:	2100      	movs	r1, #0
 80029b0:	4809      	ldr	r0, [pc, #36]	@ (80029d8 <MX_I2C1_Init+0x74>)
 80029b2:	f003 f863 	bl	8005a7c <HAL_I2CEx_ConfigAnalogFilter>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029bc:	f000 fb88 	bl	80030d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029c0:	2100      	movs	r1, #0
 80029c2:	4805      	ldr	r0, [pc, #20]	@ (80029d8 <MX_I2C1_Init+0x74>)
 80029c4:	f003 f8a5 	bl	8005b12 <HAL_I2CEx_ConfigDigitalFilter>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029ce:	f000 fb7f 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	24000438 	.word	0x24000438
 80029dc:	40005400 	.word	0x40005400
 80029e0:	20a0a3f6 	.word	0x20a0a3f6

080029e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <MX_I2C2_Init+0x74>)
 80029ea:	4a1c      	ldr	r2, [pc, #112]	@ (8002a5c <MX_I2C2_Init+0x78>)
 80029ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <MX_I2C2_Init+0x74>)
 80029f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <MX_I2C2_Init+0x7c>)
 80029f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80029f4:	4b18      	ldr	r3, [pc, #96]	@ (8002a58 <MX_I2C2_Init+0x74>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029fa:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <MX_I2C2_Init+0x74>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a00:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <MX_I2C2_Init+0x74>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <MX_I2C2_Init+0x74>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <MX_I2C2_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a12:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <MX_I2C2_Init+0x74>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <MX_I2C2_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a1e:	480e      	ldr	r0, [pc, #56]	@ (8002a58 <MX_I2C2_Init+0x74>)
 8002a20:	f002 fadc 	bl	8004fdc <HAL_I2C_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002a2a:	f000 fb51 	bl	80030d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4809      	ldr	r0, [pc, #36]	@ (8002a58 <MX_I2C2_Init+0x74>)
 8002a32:	f003 f823 	bl	8005a7c <HAL_I2CEx_ConfigAnalogFilter>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002a3c:	f000 fb48 	bl	80030d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a40:	2100      	movs	r1, #0
 8002a42:	4805      	ldr	r0, [pc, #20]	@ (8002a58 <MX_I2C2_Init+0x74>)
 8002a44:	f003 f865 	bl	8005b12 <HAL_I2CEx_ConfigDigitalFilter>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002a4e:	f000 fb3f 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2400048c 	.word	0x2400048c
 8002a5c:	40005800 	.word	0x40005800
 8002a60:	20a0a3f6 	.word	0x20a0a3f6

08002a64 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002adc <MX_I2C4_Init+0x78>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002a70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae0 <MX_I2C4_Init+0x7c>)
 8002a72:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002a74:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a80:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002a9e:	480e      	ldr	r0, [pc, #56]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002aa0:	f002 fa9c 	bl	8004fdc <HAL_I2C_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002aaa:	f000 fb11 	bl	80030d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002aae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ab2:	4809      	ldr	r0, [pc, #36]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002ab4:	f002 ffe2 	bl	8005a7c <HAL_I2CEx_ConfigAnalogFilter>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8002abe:	f000 fb07 	bl	80030d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4804      	ldr	r0, [pc, #16]	@ (8002ad8 <MX_I2C4_Init+0x74>)
 8002ac6:	f003 f824 	bl	8005b12 <HAL_I2CEx_ConfigDigitalFilter>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8002ad0:	f000 fafe 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	240004e0 	.word	0x240004e0
 8002adc:	58001c00 	.word	0x58001c00
 8002ae0:	60405858 	.word	0x60405858

08002ae4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <MX_SDMMC1_SD_Init+0x34>)
 8002aea:	4a0c      	ldr	r2, [pc, #48]	@ (8002b1c <MX_SDMMC1_SD_Init+0x38>)
 8002aec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <MX_SDMMC1_SD_Init+0x34>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002af4:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <MX_SDMMC1_SD_Init+0x34>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <MX_SDMMC1_SD_Init+0x34>)
 8002afc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b00:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <MX_SDMMC1_SD_Init+0x34>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <MX_SDMMC1_SD_Init+0x34>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	24000534 	.word	0x24000534
 8002b1c:	52007000 	.word	0x52007000

08002b20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b24:	4b27      	ldr	r3, [pc, #156]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b26:	4a28      	ldr	r2, [pc, #160]	@ (8002bc8 <MX_SPI1_Init+0xa8>)
 8002b28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b2a:	4b26      	ldr	r3, [pc, #152]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b2c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002b30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b32:	4b24      	ldr	r3, [pc, #144]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b38:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b3a:	2207      	movs	r2, #7
 8002b3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b3e:	4b21      	ldr	r3, [pc, #132]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b44:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b4c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b52:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b54:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002b58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b60:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b66:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002b6c:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b72:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b78:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b7a:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b80:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b86:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b92:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ba4:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002baa:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bb0:	4804      	ldr	r0, [pc, #16]	@ (8002bc4 <MX_SPI1_Init+0xa4>)
 8002bb2:	f007 ff33 	bl	800aa1c <HAL_SPI_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002bbc:	f000 fa88 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	240005b0 	.word	0x240005b0
 8002bc8:	40013000 	.word	0x40013000

08002bcc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002bd2:	4a28      	ldr	r2, [pc, #160]	@ (8002c74 <MX_SPI2_Init+0xa8>)
 8002bd4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002bd8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002bdc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bde:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002be4:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002be6:	2207      	movs	r2, #7
 8002be8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bea:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002bf8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bfc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c00:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002c04:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c0c:	4b18      	ldr	r3, [pc, #96]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c12:	4b17      	ldr	r3, [pc, #92]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002c18:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c24:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c38:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c44:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c4a:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c50:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c5c:	4804      	ldr	r0, [pc, #16]	@ (8002c70 <MX_SPI2_Init+0xa4>)
 8002c5e:	f007 fedd 	bl	800aa1c <HAL_SPI_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002c68:	f000 fa32 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	24000638 	.word	0x24000638
 8002c74:	40003800 	.word	0x40003800

08002c78 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002c7c:	4b27      	ldr	r3, [pc, #156]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002c7e:	4a28      	ldr	r2, [pc, #160]	@ (8002d20 <MX_SPI4_Init+0xa8>)
 8002c80:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002c84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002c88:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002c8a:	4b24      	ldr	r3, [pc, #144]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c90:	4b22      	ldr	r3, [pc, #136]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002c92:	2207      	movs	r2, #7
 8002c94:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c96:	4b21      	ldr	r3, [pc, #132]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002ca4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ca8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cac:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002cb0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cb8:	4b18      	ldr	r3, [pc, #96]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cca:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002ccc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002cd2:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002cd8:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cde:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002cea:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002cf6:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d02:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002d08:	4804      	ldr	r0, [pc, #16]	@ (8002d1c <MX_SPI4_Init+0xa4>)
 8002d0a:	f007 fe87 	bl	800aa1c <HAL_SPI_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8002d14:	f000 f9dc 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	240006c0 	.word	0x240006c0
 8002d20:	40013400 	.word	0x40013400

08002d24 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002d28:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d2a:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <MX_UART8_Init+0x94>)
 8002d2c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8002d2e:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d34:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002d36:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002d42:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002d48:	4b1a      	ldr	r3, [pc, #104]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4e:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d54:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d5a:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d60:	4b14      	ldr	r3, [pc, #80]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d66:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002d6c:	4811      	ldr	r0, [pc, #68]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d6e:	f007 ff94 	bl	800ac9a <HAL_UART_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002d78:	f000 f9aa 	bl	80030d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	480d      	ldr	r0, [pc, #52]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d80:	f009 fd68 	bl	800c854 <HAL_UARTEx_SetTxFifoThreshold>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002d8a:	f000 f9a1 	bl	80030d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4808      	ldr	r0, [pc, #32]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002d92:	f009 fd9d 	bl	800c8d0 <HAL_UARTEx_SetRxFifoThreshold>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002d9c:	f000 f998 	bl	80030d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002da0:	4804      	ldr	r0, [pc, #16]	@ (8002db4 <MX_UART8_Init+0x90>)
 8002da2:	f009 fd1e 	bl	800c7e2 <HAL_UARTEx_DisableFifoMode>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002dac:	f000 f990 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	24000748 	.word	0x24000748
 8002db8:	40007c00 	.word	0x40007c00

08002dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dc0:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002dc2:	4a23      	ldr	r2, [pc, #140]	@ (8002e50 <MX_USART1_UART_Init+0x94>)
 8002dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dc6:	4b21      	ldr	r3, [pc, #132]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002dc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dce:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dda:	4b1c      	ldr	r3, [pc, #112]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002de0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002de2:	220c      	movs	r2, #12
 8002de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de6:	4b19      	ldr	r3, [pc, #100]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dec:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df2:	4b16      	ldr	r3, [pc, #88]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002df8:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e04:	4811      	ldr	r0, [pc, #68]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002e06:	f007 ff48 	bl	800ac9a <HAL_UART_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e10:	f000 f95e 	bl	80030d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e14:	2100      	movs	r1, #0
 8002e16:	480d      	ldr	r0, [pc, #52]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002e18:	f009 fd1c 	bl	800c854 <HAL_UARTEx_SetTxFifoThreshold>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e22:	f000 f955 	bl	80030d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e26:	2100      	movs	r1, #0
 8002e28:	4808      	ldr	r0, [pc, #32]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002e2a:	f009 fd51 	bl	800c8d0 <HAL_UARTEx_SetRxFifoThreshold>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e34:	f000 f94c 	bl	80030d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e38:	4804      	ldr	r0, [pc, #16]	@ (8002e4c <MX_USART1_UART_Init+0x90>)
 8002e3a:	f009 fcd2 	bl	800c7e2 <HAL_UARTEx_DisableFifoMode>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e44:	f000 f944 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	240007dc 	.word	0x240007dc
 8002e50:	40011000 	.word	0x40011000

08002e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	@ 0x30
 8002e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e70:	4a7b      	ldr	r2, [pc, #492]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e7a:	4b79      	ldr	r3, [pc, #484]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e88:	4b75      	ldr	r3, [pc, #468]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e8e:	4a74      	ldr	r2, [pc, #464]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002e90:	f043 0310 	orr.w	r3, r3, #16
 8002e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e98:	4b71      	ldr	r3, [pc, #452]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eac:	4a6c      	ldr	r2, [pc, #432]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec4:	4b66      	ldr	r3, [pc, #408]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eca:	4a65      	ldr	r2, [pc, #404]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ed4:	4b62      	ldr	r3, [pc, #392]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ee8:	4a5d      	ldr	r2, [pc, #372]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002eea:	f043 0308 	orr.w	r3, r3, #8
 8002eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f00:	4b57      	ldr	r3, [pc, #348]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f06:	4a56      	ldr	r2, [pc, #344]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f10:	4b53      	ldr	r3, [pc, #332]	@ (8003060 <MX_GPIO_Init+0x20c>)
 8002f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2110      	movs	r1, #16
 8002f22:	4850      	ldr	r0, [pc, #320]	@ (8003064 <MX_GPIO_Init+0x210>)
 8002f24:	f002 f840 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2110      	movs	r1, #16
 8002f2c:	484e      	ldr	r0, [pc, #312]	@ (8003068 <MX_GPIO_Init+0x214>)
 8002f2e:	f002 f83b 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 8002f32:	2200      	movs	r2, #0
 8002f34:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8002f38:	484c      	ldr	r0, [pc, #304]	@ (800306c <MX_GPIO_Init+0x218>)
 8002f3a:	f002 f835 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8002f3e:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8002f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f44:	2300      	movs	r3, #0
 8002f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4847      	ldr	r0, [pc, #284]	@ (8003070 <MX_GPIO_Init+0x21c>)
 8002f54:	f001 fe68 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8002f58:	2310      	movs	r3, #16
 8002f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f64:	2302      	movs	r3, #2
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	483d      	ldr	r0, [pc, #244]	@ (8003064 <MX_GPIO_Init+0x210>)
 8002f70:	f001 fe5a 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f74:	2302      	movs	r3, #2
 8002f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f80:	f107 031c 	add.w	r3, r7, #28
 8002f84:	4619      	mov	r1, r3
 8002f86:	483b      	ldr	r0, [pc, #236]	@ (8003074 <MX_GPIO_Init+0x220>)
 8002f88:	f001 fe4e 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f90:	2303      	movs	r3, #3
 8002f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f98:	f107 031c 	add.w	r3, r7, #28
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4834      	ldr	r0, [pc, #208]	@ (8003070 <MX_GPIO_Init+0x21c>)
 8002fa0:	f001 fe42 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	4619      	mov	r1, r3
 8002fba:	482b      	ldr	r0, [pc, #172]	@ (8003068 <MX_GPIO_Init+0x214>)
 8002fbc:	f001 fe34 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4826      	ldr	r0, [pc, #152]	@ (800306c <MX_GPIO_Init+0x218>)
 8002fd4:	f001 fe28 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8002fd8:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8002fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	4619      	mov	r1, r3
 8002fec:	481d      	ldr	r0, [pc, #116]	@ (8003064 <MX_GPIO_Init+0x210>)
 8002fee:	f001 fe1b 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 8002ff2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8002ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2300      	movs	r3, #0
 8003002:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	4619      	mov	r1, r3
 800300a:	4818      	ldr	r0, [pc, #96]	@ (800306c <MX_GPIO_Init+0x218>)
 800300c:	f001 fe0c 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003010:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003016:	2303      	movs	r3, #3
 8003018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800301e:	f107 031c 	add.w	r3, r7, #28
 8003022:	4619      	mov	r1, r3
 8003024:	480f      	ldr	r0, [pc, #60]	@ (8003064 <MX_GPIO_Init+0x210>)
 8003026:	f001 fdff 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800302a:	2308      	movs	r3, #8
 800302c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800302e:	2303      	movs	r3, #3
 8003030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 031c 	add.w	r3, r7, #28
 800303a:	4619      	mov	r1, r3
 800303c:	480a      	ldr	r0, [pc, #40]	@ (8003068 <MX_GPIO_Init+0x214>)
 800303e:	f001 fdf3 	bl	8004c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 8003042:	2200      	movs	r2, #0
 8003044:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003048:	4808      	ldr	r0, [pc, #32]	@ (800306c <MX_GPIO_Init+0x218>)
 800304a:	f001 ffad 	bl	8004fa8 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 800304e:	2200      	movs	r2, #0
 8003050:	2110      	movs	r1, #16
 8003052:	4805      	ldr	r0, [pc, #20]	@ (8003068 <MX_GPIO_Init+0x214>)
 8003054:	f001 ffa8 	bl	8004fa8 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8003058:	bf00      	nop
 800305a:	3730      	adds	r7, #48	@ 0x30
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	58024400 	.word	0x58024400
 8003064:	58021000 	.word	0x58021000
 8003068:	58020000 	.word	0x58020000
 800306c:	58020400 	.word	0x58020400
 8003070:	58020800 	.word	0x58020800
 8003074:	58020c00 	.word	0x58020c00

08003078 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800307e:	463b      	mov	r3, r7
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800308a:	f000 fff1 	bl	8004070 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800308e:	2301      	movs	r3, #1
 8003090:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003092:	2300      	movs	r3, #0
 8003094:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800309a:	231f      	movs	r3, #31
 800309c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800309e:	2387      	movs	r3, #135	@ 0x87
 80030a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80030a6:	2300      	movs	r3, #0
 80030a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80030ae:	2301      	movs	r3, #1
 80030b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80030ba:	463b      	mov	r3, r7
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 f80f 	bl	80040e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80030c2:	2004      	movs	r0, #4
 80030c4:	f000 ffec 	bl	80040a0 <HAL_MPU_Enable>

}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030d4:	b672      	cpsid	i
}
 80030d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <Error_Handler+0x8>

080030dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_MspInit+0x30>)
 80030e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030e8:	4a08      	ldr	r2, [pc, #32]	@ (800310c <HAL_MspInit+0x30>)
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80030f2:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_MspInit+0x30>)
 80030f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	58024400 	.word	0x58024400

08003110 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b0bc      	sub	sp, #240	@ 0xf0
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003128:	f107 0320 	add.w	r3, r7, #32
 800312c:	22b8      	movs	r2, #184	@ 0xb8
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f00b fc8b 	bl	800ea4c <memset>
  if(hi2c->Instance==I2C1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a74      	ldr	r2, [pc, #464]	@ (800330c <HAL_I2C_MspInit+0x1fc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d147      	bne.n	80031d0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003140:	f04f 0208 	mov.w	r2, #8
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003152:	f107 0320 	add.w	r3, r7, #32
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fcc8 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003162:	f7ff ffb5 	bl	80030d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003166:	4b6a      	ldr	r3, [pc, #424]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 8003168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800316c:	4a68      	ldr	r2, [pc, #416]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003176:	4b66      	ldr	r3, [pc, #408]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 8003178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003184:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003188:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800318c:	2312      	movs	r3, #18
 800318e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800319e:	2304      	movs	r3, #4
 80031a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031a8:	4619      	mov	r1, r3
 80031aa:	485a      	ldr	r0, [pc, #360]	@ (8003314 <HAL_I2C_MspInit+0x204>)
 80031ac:	f001 fd3c 	bl	8004c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031b0:	4b57      	ldr	r3, [pc, #348]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 80031b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031b6:	4a56      	ldr	r2, [pc, #344]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 80031b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031c0:	4b53      	ldr	r3, [pc, #332]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 80031c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80031ce:	e098      	b.n	8003302 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a50      	ldr	r2, [pc, #320]	@ (8003318 <HAL_I2C_MspInit+0x208>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d147      	bne.n	800326a <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80031da:	f04f 0208 	mov.w	r2, #8
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ec:	f107 0320 	add.w	r3, r7, #32
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fc7b 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80031fc:	f7ff ff68 	bl	80030d0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003200:	4b43      	ldr	r3, [pc, #268]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003206:	4a42      	ldr	r2, [pc, #264]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003210:	4b3f      	ldr	r3, [pc, #252]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 8003212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800321e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003226:	2312      	movs	r3, #18
 8003228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003238:	2304      	movs	r3, #4
 800323a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003242:	4619      	mov	r1, r3
 8003244:	4833      	ldr	r0, [pc, #204]	@ (8003314 <HAL_I2C_MspInit+0x204>)
 8003246:	f001 fcef 	bl	8004c28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800324a:	4b31      	ldr	r3, [pc, #196]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 800324c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003250:	4a2f      	ldr	r2, [pc, #188]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 8003252:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003256:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800325a:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 800325c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]
}
 8003268:	e04b      	b.n	8003302 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2b      	ldr	r2, [pc, #172]	@ (800331c <HAL_I2C_MspInit+0x20c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d146      	bne.n	8003302 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003274:	f04f 0210 	mov.w	r2, #16
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003286:	f107 0320 	add.w	r3, r7, #32
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fc2e 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8003296:	f7ff ff1b 	bl	80030d0 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800329a:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 800329c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032aa:	4b19      	ldr	r3, [pc, #100]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 80032ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80032b8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80032bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c0:	2312      	movs	r3, #18
 80032c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032cc:	2303      	movs	r3, #3
 80032ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80032d2:	2304      	movs	r3, #4
 80032d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80032dc:	4619      	mov	r1, r3
 80032de:	4810      	ldr	r0, [pc, #64]	@ (8003320 <HAL_I2C_MspInit+0x210>)
 80032e0:	f001 fca2 	bl	8004c28 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80032e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 80032e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032ea:	4a09      	ldr	r2, [pc, #36]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 80032ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_I2C_MspInit+0x200>)
 80032f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
}
 8003302:	bf00      	nop
 8003304:	37f0      	adds	r7, #240	@ 0xf0
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40005400 	.word	0x40005400
 8003310:	58024400 	.word	0x58024400
 8003314:	58020400 	.word	0x58020400
 8003318:	40005800 	.word	0x40005800
 800331c:	58001c00 	.word	0x58001c00
 8003320:	58020c00 	.word	0x58020c00

08003324 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b0ba      	sub	sp, #232	@ 0xe8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800333c:	f107 0318 	add.w	r3, r7, #24
 8003340:	22b8      	movs	r2, #184	@ 0xb8
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f00b fb81 	bl	800ea4c <memset>
  if(hsd->Instance==SDMMC1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a38      	ldr	r2, [pc, #224]	@ (8003430 <HAL_SD_MspInit+0x10c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d169      	bne.n	8003428 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003354:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003360:	2300      	movs	r3, #0
 8003362:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003364:	f107 0318 	add.w	r3, r7, #24
 8003368:	4618      	mov	r0, r3
 800336a:	f003 fbbf 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003374:	f7ff feac 	bl	80030d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003378:	4b2e      	ldr	r3, [pc, #184]	@ (8003434 <HAL_SD_MspInit+0x110>)
 800337a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800337e:	4a2d      	ldr	r2, [pc, #180]	@ (8003434 <HAL_SD_MspInit+0x110>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003384:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003388:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <HAL_SD_MspInit+0x110>)
 800338a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800338e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003396:	4b27      	ldr	r3, [pc, #156]	@ (8003434 <HAL_SD_MspInit+0x110>)
 8003398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800339c:	4a25      	ldr	r2, [pc, #148]	@ (8003434 <HAL_SD_MspInit+0x110>)
 800339e:	f043 0308 	orr.w	r3, r3, #8
 80033a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033a6:	4b23      	ldr	r3, [pc, #140]	@ (8003434 <HAL_SD_MspInit+0x110>)
 80033a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003434 <HAL_SD_MspInit+0x110>)
 80033b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003434 <HAL_SD_MspInit+0x110>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <HAL_SD_MspInit+0x110>)
 80033c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033d2:	2304      	movs	r3, #4
 80033d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e4:	2303      	movs	r3, #3
 80033e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80033ea:	230c      	movs	r3, #12
 80033ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4810      	ldr	r0, [pc, #64]	@ (8003438 <HAL_SD_MspInit+0x114>)
 80033f8:	f001 fc16 	bl	8004c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 80033fc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003400:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003410:	2303      	movs	r3, #3
 8003412:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003416:	230c      	movs	r3, #12
 8003418:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003420:	4619      	mov	r1, r3
 8003422:	4806      	ldr	r0, [pc, #24]	@ (800343c <HAL_SD_MspInit+0x118>)
 8003424:	f001 fc00 	bl	8004c28 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003428:	bf00      	nop
 800342a:	37e8      	adds	r7, #232	@ 0xe8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	52007000 	.word	0x52007000
 8003434:	58024400 	.word	0x58024400
 8003438:	58020c00 	.word	0x58020c00
 800343c:	58020800 	.word	0x58020800

08003440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b0be      	sub	sp, #248	@ 0xf8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003458:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800345c:	22b8      	movs	r2, #184	@ 0xb8
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f00b faf3 	bl	800ea4c <memset>
  if(hspi->Instance==SPI1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a97      	ldr	r2, [pc, #604]	@ (80036c8 <HAL_SPI_MspInit+0x288>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d16a      	bne.n	8003546 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003470:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003482:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003486:	4618      	mov	r0, r3
 8003488:	f003 fb30 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8003492:	f7ff fe1d 	bl	80030d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003496:	4b8d      	ldr	r3, [pc, #564]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 8003498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800349c:	4a8b      	ldr	r2, [pc, #556]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 800349e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034a6:	4b89      	ldr	r3, [pc, #548]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80034a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b4:	4b85      	ldr	r3, [pc, #532]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80034b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ba:	4a84      	ldr	r2, [pc, #528]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034c4:	4b81      	ldr	r3, [pc, #516]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80034c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	4b7e      	ldr	r3, [pc, #504]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80034d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d8:	4a7c      	ldr	r2, [pc, #496]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034e2:	4b7a      	ldr	r3, [pc, #488]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80034e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034f0:	2310      	movs	r3, #16
 80034f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003508:	2305      	movs	r3, #5
 800350a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003512:	4619      	mov	r1, r3
 8003514:	486e      	ldr	r0, [pc, #440]	@ (80036d0 <HAL_SPI_MspInit+0x290>)
 8003516:	f001 fb87 	bl	8004c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800351a:	23a0      	movs	r3, #160	@ 0xa0
 800351c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003532:	2305      	movs	r3, #5
 8003534:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003538:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800353c:	4619      	mov	r1, r3
 800353e:	4865      	ldr	r0, [pc, #404]	@ (80036d4 <HAL_SPI_MspInit+0x294>)
 8003540:	f001 fb72 	bl	8004c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003544:	e0bb      	b.n	80036be <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a63      	ldr	r2, [pc, #396]	@ (80036d8 <HAL_SPI_MspInit+0x298>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d16b      	bne.n	8003628 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003550:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003566:	4618      	mov	r0, r3
 8003568:	f003 fac0 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8003572:	f7ff fdad 	bl	80030d0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003576:	4b55      	ldr	r3, [pc, #340]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 8003578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800357c:	4a53      	ldr	r2, [pc, #332]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 800357e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003582:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003586:	4b51      	ldr	r3, [pc, #324]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 8003588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800358c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003594:	4b4d      	ldr	r3, [pc, #308]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 8003596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800359a:	4a4c      	ldr	r2, [pc, #304]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035a4:	4b49      	ldr	r3, [pc, #292]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80035a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b2:	4b46      	ldr	r3, [pc, #280]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80035b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035b8:	4a44      	ldr	r2, [pc, #272]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80035ba:	f043 0304 	orr.w	r3, r3, #4
 80035be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035c2:	4b42      	ldr	r3, [pc, #264]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 80035c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80035d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035ea:	2305      	movs	r3, #5
 80035ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4837      	ldr	r0, [pc, #220]	@ (80036d4 <HAL_SPI_MspInit+0x294>)
 80035f8:	f001 fb16 	bl	8004c28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 80035fc:	2306      	movs	r3, #6
 80035fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003614:	2305      	movs	r3, #5
 8003616:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800361e:	4619      	mov	r1, r3
 8003620:	482e      	ldr	r0, [pc, #184]	@ (80036dc <HAL_SPI_MspInit+0x29c>)
 8003622:	f001 fb01 	bl	8004c28 <HAL_GPIO_Init>
}
 8003626:	e04a      	b.n	80036be <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2c      	ldr	r2, [pc, #176]	@ (80036e0 <HAL_SPI_MspInit+0x2a0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d145      	bne.n	80036be <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8003632:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003644:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fa4f 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 8003654:	f7ff fd3c 	bl	80030d0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003658:	4b1c      	ldr	r3, [pc, #112]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 800365a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800365e:	4a1b      	ldr	r2, [pc, #108]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 8003660:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003664:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003668:	4b18      	ldr	r3, [pc, #96]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 800366a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800366e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 8003678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800367c:	4a13      	ldr	r2, [pc, #76]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 800367e:	f043 0310 	orr.w	r3, r3, #16
 8003682:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003686:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <HAL_SPI_MspInit+0x28c>)
 8003688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003694:	2364      	movs	r3, #100	@ 0x64
 8003696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369a:	2302      	movs	r3, #2
 800369c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80036ac:	2305      	movs	r3, #5
 80036ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036b2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80036b6:	4619      	mov	r1, r3
 80036b8:	480a      	ldr	r0, [pc, #40]	@ (80036e4 <HAL_SPI_MspInit+0x2a4>)
 80036ba:	f001 fab5 	bl	8004c28 <HAL_GPIO_Init>
}
 80036be:	bf00      	nop
 80036c0:	37f8      	adds	r7, #248	@ 0xf8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40013000 	.word	0x40013000
 80036cc:	58024400 	.word	0x58024400
 80036d0:	58020400 	.word	0x58020400
 80036d4:	58020000 	.word	0x58020000
 80036d8:	40003800 	.word	0x40003800
 80036dc:	58020800 	.word	0x58020800
 80036e0:	40013400 	.word	0x40013400
 80036e4:	58021000 	.word	0x58021000

080036e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b0ba      	sub	sp, #232	@ 0xe8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003700:	f107 0318 	add.w	r3, r7, #24
 8003704:	22b8      	movs	r2, #184	@ 0xb8
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f00b f99f 	bl	800ea4c <memset>
  if(huart->Instance==UART8)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a51      	ldr	r2, [pc, #324]	@ (8003858 <HAL_UART_MspInit+0x170>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d14e      	bne.n	80037b6 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003718:	f04f 0202 	mov.w	r2, #2
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800372a:	f107 0318 	add.w	r3, r7, #24
 800372e:	4618      	mov	r0, r3
 8003730:	f003 f9dc 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800373a:	f7ff fcc9 	bl	80030d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_UART_MspInit+0x174>)
 8003740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003744:	4a45      	ldr	r2, [pc, #276]	@ (800385c <HAL_UART_MspInit+0x174>)
 8003746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800374a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800374e:	4b43      	ldr	r3, [pc, #268]	@ (800385c <HAL_UART_MspInit+0x174>)
 8003750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003754:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800375c:	4b3f      	ldr	r3, [pc, #252]	@ (800385c <HAL_UART_MspInit+0x174>)
 800375e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003762:	4a3e      	ldr	r2, [pc, #248]	@ (800385c <HAL_UART_MspInit+0x174>)
 8003764:	f043 0310 	orr.w	r3, r3, #16
 8003768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800376c:	4b3b      	ldr	r3, [pc, #236]	@ (800385c <HAL_UART_MspInit+0x174>)
 800376e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800377a:	2303      	movs	r3, #3
 800377c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003792:	2308      	movs	r3, #8
 8003794:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003798:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800379c:	4619      	mov	r1, r3
 800379e:	4830      	ldr	r0, [pc, #192]	@ (8003860 <HAL_UART_MspInit+0x178>)
 80037a0:	f001 fa42 	bl	8004c28 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80037a4:	2200      	movs	r2, #0
 80037a6:	2100      	movs	r1, #0
 80037a8:	2053      	movs	r0, #83	@ 0x53
 80037aa:	f000 fc2c 	bl	8004006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80037ae:	2053      	movs	r0, #83	@ 0x53
 80037b0:	f000 fc43 	bl	800403a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80037b4:	e04b      	b.n	800384e <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003864 <HAL_UART_MspInit+0x17c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d146      	bne.n	800384e <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037c0:	f04f 0201 	mov.w	r2, #1
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037d2:	f107 0318 	add.w	r3, r7, #24
 80037d6:	4618      	mov	r0, r3
 80037d8:	f003 f988 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 80037e2:	f7ff fc75 	bl	80030d0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80037e6:	4b1d      	ldr	r3, [pc, #116]	@ (800385c <HAL_UART_MspInit+0x174>)
 80037e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037ec:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <HAL_UART_MspInit+0x174>)
 80037ee:	f043 0310 	orr.w	r3, r3, #16
 80037f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037f6:	4b19      	ldr	r3, [pc, #100]	@ (800385c <HAL_UART_MspInit+0x174>)
 80037f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003804:	4b15      	ldr	r3, [pc, #84]	@ (800385c <HAL_UART_MspInit+0x174>)
 8003806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800380a:	4a14      	ldr	r2, [pc, #80]	@ (800385c <HAL_UART_MspInit+0x174>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003814:	4b11      	ldr	r3, [pc, #68]	@ (800385c <HAL_UART_MspInit+0x174>)
 8003816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003822:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003826:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800383c:	2307      	movs	r3, #7
 800383e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003842:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003846:	4619      	mov	r1, r3
 8003848:	4807      	ldr	r0, [pc, #28]	@ (8003868 <HAL_UART_MspInit+0x180>)
 800384a:	f001 f9ed 	bl	8004c28 <HAL_GPIO_Init>
}
 800384e:	bf00      	nop
 8003850:	37e8      	adds	r7, #232	@ 0xe8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40007c00 	.word	0x40007c00
 800385c:	58024400 	.word	0x58024400
 8003860:	58021000 	.word	0x58021000
 8003864:	40011000 	.word	0x40011000
 8003868:	58020000 	.word	0x58020000

0800386c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <NMI_Handler+0x4>

08003874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <HardFault_Handler+0x4>

0800387c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003880:	bf00      	nop
 8003882:	e7fd      	b.n	8003880 <MemManage_Handler+0x4>

08003884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003888:	bf00      	nop
 800388a:	e7fd      	b.n	8003888 <BusFault_Handler+0x4>

0800388c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <UsageFault_Handler+0x4>

08003894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c2:	f000 fa81 	bl	8003dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80038d0:	4802      	ldr	r0, [pc, #8]	@ (80038dc <UART8_IRQHandler+0x10>)
 80038d2:	f007 fac1 	bl	800ae58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	24000748 	.word	0x24000748

080038e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return 1;
 80038e4:	2301      	movs	r3, #1
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_kill>:

int _kill(int pid, int sig)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038fa:	f00b f8f9 	bl	800eaf0 <__errno>
 80038fe:	4603      	mov	r3, r0
 8003900:	2216      	movs	r2, #22
 8003902:	601a      	str	r2, [r3, #0]
  return -1;
 8003904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <_exit>:

void _exit (int status)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003918:	f04f 31ff 	mov.w	r1, #4294967295
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ffe7 	bl	80038f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003922:	bf00      	nop
 8003924:	e7fd      	b.n	8003922 <_exit+0x12>

08003926 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e00a      	b.n	800394e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003938:	f3af 8000 	nop.w
 800393c:	4601      	mov	r1, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	60ba      	str	r2, [r7, #8]
 8003944:	b2ca      	uxtb	r2, r1
 8003946:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	dbf0      	blt.n	8003938 <_read+0x12>
  }

  return len;
 8003956:	687b      	ldr	r3, [r7, #4]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003988:	605a      	str	r2, [r3, #4]
  return 0;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <_isatty>:

int _isatty(int file)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039a0:	2301      	movs	r3, #1
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039d0:	4a14      	ldr	r2, [pc, #80]	@ (8003a24 <_sbrk+0x5c>)
 80039d2:	4b15      	ldr	r3, [pc, #84]	@ (8003a28 <_sbrk+0x60>)
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039dc:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <_sbrk+0x64>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039e4:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <_sbrk+0x64>)
 80039e6:	4a12      	ldr	r2, [pc, #72]	@ (8003a30 <_sbrk+0x68>)
 80039e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ea:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <_sbrk+0x64>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d207      	bcs.n	8003a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039f8:	f00b f87a 	bl	800eaf0 <__errno>
 80039fc:	4603      	mov	r3, r0
 80039fe:	220c      	movs	r2, #12
 8003a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a02:	f04f 33ff 	mov.w	r3, #4294967295
 8003a06:	e009      	b.n	8003a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a08:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <_sbrk+0x64>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a0e:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <_sbrk+0x64>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	4a05      	ldr	r2, [pc, #20]	@ (8003a2c <_sbrk+0x64>)
 8003a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	24050000 	.word	0x24050000
 8003a28:	00000400 	.word	0x00000400
 8003a2c:	24000870 	.word	0x24000870
 8003a30:	24000d38 	.word	0x24000d38

08003a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a38:	4b32      	ldr	r3, [pc, #200]	@ (8003b04 <SystemInit+0xd0>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	4a31      	ldr	r2, [pc, #196]	@ (8003b04 <SystemInit+0xd0>)
 8003a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003a48:	4b2f      	ldr	r3, [pc, #188]	@ (8003b08 <SystemInit+0xd4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d807      	bhi.n	8003a64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003a54:	4b2c      	ldr	r3, [pc, #176]	@ (8003b08 <SystemInit+0xd4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 030f 	bic.w	r3, r3, #15
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003b08 <SystemInit+0xd4>)
 8003a5e:	f043 0307 	orr.w	r3, r3, #7
 8003a62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003a64:	4b29      	ldr	r3, [pc, #164]	@ (8003b0c <SystemInit+0xd8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a28      	ldr	r2, [pc, #160]	@ (8003b0c <SystemInit+0xd8>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a70:	4b26      	ldr	r3, [pc, #152]	@ (8003b0c <SystemInit+0xd8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003a76:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <SystemInit+0xd8>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4924      	ldr	r1, [pc, #144]	@ (8003b0c <SystemInit+0xd8>)
 8003a7c:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <SystemInit+0xdc>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003a82:	4b21      	ldr	r3, [pc, #132]	@ (8003b08 <SystemInit+0xd4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b08 <SystemInit+0xd4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 030f 	bic.w	r3, r3, #15
 8003a96:	4a1c      	ldr	r2, [pc, #112]	@ (8003b08 <SystemInit+0xd4>)
 8003a98:	f043 0307 	orr.w	r3, r3, #7
 8003a9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <SystemInit+0xd8>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003aa4:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <SystemInit+0xd8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003aaa:	4b18      	ldr	r3, [pc, #96]	@ (8003b0c <SystemInit+0xd8>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003ab0:	4b16      	ldr	r3, [pc, #88]	@ (8003b0c <SystemInit+0xd8>)
 8003ab2:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <SystemInit+0xe0>)
 8003ab4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003ab6:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <SystemInit+0xd8>)
 8003ab8:	4a17      	ldr	r2, [pc, #92]	@ (8003b18 <SystemInit+0xe4>)
 8003aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003abc:	4b13      	ldr	r3, [pc, #76]	@ (8003b0c <SystemInit+0xd8>)
 8003abe:	4a17      	ldr	r2, [pc, #92]	@ (8003b1c <SystemInit+0xe8>)
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ac2:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <SystemInit+0xd8>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003ac8:	4b10      	ldr	r3, [pc, #64]	@ (8003b0c <SystemInit+0xd8>)
 8003aca:	4a14      	ldr	r2, [pc, #80]	@ (8003b1c <SystemInit+0xe8>)
 8003acc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003ace:	4b0f      	ldr	r3, [pc, #60]	@ (8003b0c <SystemInit+0xd8>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <SystemInit+0xd8>)
 8003ad6:	4a11      	ldr	r2, [pc, #68]	@ (8003b1c <SystemInit+0xe8>)
 8003ad8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003ada:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <SystemInit+0xd8>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <SystemInit+0xd8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a09      	ldr	r2, [pc, #36]	@ (8003b0c <SystemInit+0xd8>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003aec:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <SystemInit+0xd8>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003af2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <SystemInit+0xec>)
 8003af4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003af8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00
 8003b08:	52002000 	.word	0x52002000
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	eaf6ed7f 	.word	0xeaf6ed7f
 8003b14:	02020200 	.word	0x02020200
 8003b18:	01ff0000 	.word	0x01ff0000
 8003b1c:	01010280 	.word	0x01010280
 8003b20:	52004000 	.word	0x52004000

08003b24 <SensorManager_Init>:
//    {MS5607_Init, "MS5607"},
//    {GPS_Init, "ATGM336H"}
};


telemetry_init_status SensorManager_Init(void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
    printf("Sensors Initialization routine started.\n");
 8003b2a:	4826      	ldr	r0, [pc, #152]	@ (8003bc4 <SensorManager_Init+0xa0>)
 8003b2c:	f00a fe8e 	bl	800e84c <puts>

    size_t num_sensors = sizeof(sensors) / sizeof(sensors[0]);
 8003b30:	2301      	movs	r3, #1
 8003b32:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	e024      	b.n	8003b8c <SensorManager_Init+0x68>
        int8_t status = sensors[i].init_function();
 8003b42:	4a21      	ldr	r2, [pc, #132]	@ (8003bc8 <SensorManager_Init+0xa4>)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b4a:	4798      	blx	r3
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 8003b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <SensorManager_Init+0x4c>
            printf("%s initialization failed.\n", sensors[i].sensor_name);
 8003b58:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc8 <SensorManager_Init+0xa4>)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4619      	mov	r1, r3
 8003b64:	4819      	ldr	r0, [pc, #100]	@ (8003bcc <SensorManager_Init+0xa8>)
 8003b66:	f00a fe09 	bl	800e77c <iprintf>
            all_success = false;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	e00a      	b.n	8003b86 <SensorManager_Init+0x62>
        } else {
            printf("[%s] device found! Initialization succeeded.\n", sensors[i].sensor_name);
 8003b70:	4a15      	ldr	r2, [pc, #84]	@ (8003bc8 <SensorManager_Init+0xa4>)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4814      	ldr	r0, [pc, #80]	@ (8003bd0 <SensorManager_Init+0xac>)
 8003b7e:	f00a fdfd 	bl	800e77c <iprintf>
            any_success = true;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d3d6      	bcc.n	8003b42 <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <SensorManager_Init+0x80>
        printf("All sensors initialized successfully.\n");
 8003b9a:	480e      	ldr	r0, [pc, #56]	@ (8003bd4 <SensorManager_Init+0xb0>)
 8003b9c:	f00a fe56 	bl	800e84c <puts>
        return TELEMETRY_INIT_SUCCESS;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e00b      	b.n	8003bbc <SensorManager_Init+0x98>
    } else if (any_success) {
 8003ba4:	7bbb      	ldrb	r3, [r7, #14]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <SensorManager_Init+0x90>
        printf("Partial initialization success.\n");
 8003baa:	480b      	ldr	r0, [pc, #44]	@ (8003bd8 <SensorManager_Init+0xb4>)
 8003bac:	f00a fe4e 	bl	800e84c <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e003      	b.n	8003bbc <SensorManager_Init+0x98>
    } else {
        printf("All sensors initialization failed.\n");
 8003bb4:	4809      	ldr	r0, [pc, #36]	@ (8003bdc <SensorManager_Init+0xb8>)
 8003bb6:	f00a fe49 	bl	800e84c <puts>
        return TELEMETRY_INIT_FAILURE;
 8003bba:	2302      	movs	r3, #2
    }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	08012164 	.word	0x08012164
 8003bc8:	2400000c 	.word	0x2400000c
 8003bcc:	0801218c 	.word	0x0801218c
 8003bd0:	080121a8 	.word	0x080121a8
 8003bd4:	080121d8 	.word	0x080121d8
 8003bd8:	08012200 	.word	0x08012200
 8003bdc:	08012220 	.word	0x08012220

08003be0 <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b0a9      	sub	sp, #164	@ 0xa4
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    // Update data from each sensor
//	telemetry.bmi323_data = bmi323_data_poll();
	telemetry.bno055_data = bno_read_fusion_data();
 8003bea:	4c08      	ldr	r4, [pc, #32]	@ (8003c0c <SensorManager_UpdateData+0x2c>)
 8003bec:	463b      	mov	r3, r7
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fb8e 	bl	8002310 <bno_read_fusion_data>
 8003bf4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8003bf8:	4639      	mov	r1, r7
 8003bfa:	2298      	movs	r2, #152	@ 0x98
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f00a ffa4 	bl	800eb4a <memcpy>

    //FOR VERSION 2 OF ARGUS
//    ASM330LHH_ReadData(&data->asm330lhh_data);
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);

}
 8003c02:	bf00      	nop
 8003c04:	37a4      	adds	r7, #164	@ 0xa4
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd90      	pop	{r4, r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	24000878 	.word	0x24000878

08003c10 <delay_us_func>:

void delay_us_func(uint32_t period)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8003c18:	e008      	b.n	8003c2c <delay_us_func+0x1c>
	{
		for(i = 0; i < 96; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e002      	b.n	8003c26 <delay_us_func+0x16>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3301      	adds	r3, #1
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b5f      	cmp	r3, #95	@ 0x5f
 8003c2a:	d9f9      	bls.n	8003c20 <delay_us_func+0x10>
	while(period--)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	1e5a      	subs	r2, r3, #1
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f1      	bne.n	8003c1a <delay_us_func+0xa>
		{
			;
		}
	}
}
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <TestTelemetry>:

void TestTelemetry(){
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
	for(int i = 0; i < 10000 ; i++){
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	e00f      	b.n	8003c70 <TestTelemetry+0x2c>

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 8003c50:	480c      	ldr	r0, [pc, #48]	@ (8003c84 <TestTelemetry+0x40>)
 8003c52:	f7ff ffc5 	bl	8003be0 <SensorManager_UpdateData>

	// Sensor Data Print
//	bmi323_print_sensor_data(&telemetry.bmi323_data);
	bno055_print_fusion_data(&telemetry.bno055_data);
 8003c56:	480c      	ldr	r0, [pc, #48]	@ (8003c88 <TestTelemetry+0x44>)
 8003c58:	f7fe fccc 	bl	80025f4 <bno055_print_fusion_data>
//	ms5607_print_barometer_data(&telemetry.ms5607_data);
//	bme680_print_barometer_data(&telemetry.bme680_data);
//	gps_print_positionning_data(&telemetry.gps_data);

	printf("// --------------------------------------------- // \n");
 8003c5c:	480b      	ldr	r0, [pc, #44]	@ (8003c8c <TestTelemetry+0x48>)
 8003c5e:	f00a fdf5 	bl	800e84c <puts>

	//DELAY BETWEEN READINGS TO DESIGN CORRECTLY
//    HAL_Delay(150);
    delay_us_func(50000);  //50 ms
 8003c62:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c66:	f7ff ffd3 	bl	8003c10 <delay_us_func>
	for(int i = 0; i < 10000 ; i++){
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003c76:	4293      	cmp	r3, r2
 8003c78:	ddea      	ble.n	8003c50 <TestTelemetry+0xc>
//    delay_us_func(100000); //100 ms
//    delay_us_func(200000); //200 ms
//      delay_us_func(1000000); //1 s
    	}
}
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	24000878 	.word	0x24000878
 8003c88:	240008b8 	.word	0x240008b8
 8003c8c:	08012244 	.word	0x08012244

08003c90 <Reset_Handler>:
 8003c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003cc8 <LoopFillZerobss+0xe>
 8003c94:	f7ff fece 	bl	8003a34 <SystemInit>
 8003c98:	480c      	ldr	r0, [pc, #48]	@ (8003ccc <LoopFillZerobss+0x12>)
 8003c9a:	490d      	ldr	r1, [pc, #52]	@ (8003cd0 <LoopFillZerobss+0x16>)
 8003c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd4 <LoopFillZerobss+0x1a>)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e002      	b.n	8003ca8 <LoopCopyDataInit>

08003ca2 <CopyDataInit>:
 8003ca2:	58d4      	ldr	r4, [r2, r3]
 8003ca4:	50c4      	str	r4, [r0, r3]
 8003ca6:	3304      	adds	r3, #4

08003ca8 <LoopCopyDataInit>:
 8003ca8:	18c4      	adds	r4, r0, r3
 8003caa:	428c      	cmp	r4, r1
 8003cac:	d3f9      	bcc.n	8003ca2 <CopyDataInit>
 8003cae:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <LoopFillZerobss+0x1e>)
 8003cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8003cdc <LoopFillZerobss+0x22>)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e001      	b.n	8003cba <LoopFillZerobss>

08003cb6 <FillZerobss>:
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	3204      	adds	r2, #4

08003cba <LoopFillZerobss>:
 8003cba:	42a2      	cmp	r2, r4
 8003cbc:	d3fb      	bcc.n	8003cb6 <FillZerobss>
 8003cbe:	f00a ff1d 	bl	800eafc <__libc_init_array>
 8003cc2:	f7fe fdbc 	bl	800283e <main>
 8003cc6:	4770      	bx	lr
 8003cc8:	24050000 	.word	0x24050000
 8003ccc:	24000000 	.word	0x24000000
 8003cd0:	240001e4 	.word	0x240001e4
 8003cd4:	08012708 	.word	0x08012708
 8003cd8:	240001e8 	.word	0x240001e8
 8003cdc:	24000d34 	.word	0x24000d34

08003ce0 <ADC3_IRQHandler>:
 8003ce0:	e7fe      	b.n	8003ce0 <ADC3_IRQHandler>
	...

08003ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cea:	2003      	movs	r0, #3
 8003cec:	f000 f980 	bl	8003ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cf0:	f002 fd26 	bl	8006740 <HAL_RCC_GetSysClockFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <HAL_Init+0x68>)
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	4913      	ldr	r1, [pc, #76]	@ (8003d50 <HAL_Init+0x6c>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <HAL_Init+0x68>)
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4a0e      	ldr	r2, [pc, #56]	@ (8003d50 <HAL_Init+0x6c>)
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
 8003d24:	4a0b      	ldr	r2, [pc, #44]	@ (8003d54 <HAL_Init+0x70>)
 8003d26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d28:	4a0b      	ldr	r2, [pc, #44]	@ (8003d58 <HAL_Init+0x74>)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f000 f814 	bl	8003d5c <HAL_InitTick>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e002      	b.n	8003d44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d3e:	f7ff f9cd 	bl	80030dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	0801227c 	.word	0x0801227c
 8003d54:	24000008 	.word	0x24000008
 8003d58:	24000004 	.word	0x24000004

08003d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003d64:	4b15      	ldr	r3, [pc, #84]	@ (8003dbc <HAL_InitTick+0x60>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e021      	b.n	8003db4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003d70:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <HAL_InitTick+0x64>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b11      	ldr	r3, [pc, #68]	@ (8003dbc <HAL_InitTick+0x60>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f965 	bl	8004056 <HAL_SYSTICK_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00e      	b.n	8003db4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b0f      	cmp	r3, #15
 8003d9a:	d80a      	bhi.n	8003db2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	f000 f92f 	bl	8004006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003da8:	4a06      	ldr	r2, [pc, #24]	@ (8003dc4 <HAL_InitTick+0x68>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e000      	b.n	8003db4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	24000018 	.word	0x24000018
 8003dc0:	24000004 	.word	0x24000004
 8003dc4:	24000014 	.word	0x24000014

08003dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <HAL_IncTick+0x20>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_IncTick+0x24>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a04      	ldr	r2, [pc, #16]	@ (8003dec <HAL_IncTick+0x24>)
 8003dda:	6013      	str	r3, [r2, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	24000018 	.word	0x24000018
 8003dec:	24000bd0 	.word	0x24000bd0

08003df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return uwTick;
 8003df4:	4b03      	ldr	r3, [pc, #12]	@ (8003e04 <HAL_GetTick+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	24000bd0 	.word	0x24000bd0

08003e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e10:	f7ff ffee 	bl	8003df0 <HAL_GetTick>
 8003e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d005      	beq.n	8003e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e22:	4b0a      	ldr	r3, [pc, #40]	@ (8003e4c <HAL_Delay+0x44>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e2e:	bf00      	nop
 8003e30:	f7ff ffde 	bl	8003df0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d8f7      	bhi.n	8003e30 <HAL_Delay+0x28>
  {
  }
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	24000018 	.word	0x24000018

08003e50 <__NVIC_SetPriorityGrouping>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <__NVIC_SetPriorityGrouping+0x40>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e78:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <__NVIC_SetPriorityGrouping+0x44>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e7e:	4a04      	ldr	r2, [pc, #16]	@ (8003e90 <__NVIC_SetPriorityGrouping+0x40>)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	60d3      	str	r3, [r2, #12]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	e000ed00 	.word	0xe000ed00
 8003e94:	05fa0000 	.word	0x05fa0000

08003e98 <__NVIC_GetPriorityGrouping>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e9c:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	f003 0307 	and.w	r3, r3, #7
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <__NVIC_EnableIRQ>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	db0b      	blt.n	8003ede <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	f003 021f 	and.w	r2, r3, #31
 8003ecc:	4907      	ldr	r1, [pc, #28]	@ (8003eec <__NVIC_EnableIRQ+0x38>)
 8003ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	e000e100 	.word	0xe000e100

08003ef0 <__NVIC_SetPriority>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	6039      	str	r1, [r7, #0]
 8003efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	db0a      	blt.n	8003f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	490c      	ldr	r1, [pc, #48]	@ (8003f3c <__NVIC_SetPriority+0x4c>)
 8003f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f0e:	0112      	lsls	r2, r2, #4
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	440b      	add	r3, r1
 8003f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f18:	e00a      	b.n	8003f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	4908      	ldr	r1, [pc, #32]	@ (8003f40 <__NVIC_SetPriority+0x50>)
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	3b04      	subs	r3, #4
 8003f28:	0112      	lsls	r2, r2, #4
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	761a      	strb	r2, [r3, #24]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000e100 	.word	0xe000e100
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <NVIC_EncodePriority>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	b089      	sub	sp, #36	@ 0x24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f1c3 0307 	rsb	r3, r3, #7
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	bf28      	it	cs
 8003f62:	2304      	movcs	r3, #4
 8003f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2b06      	cmp	r3, #6
 8003f6c:	d902      	bls.n	8003f74 <NVIC_EncodePriority+0x30>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3b03      	subs	r3, #3
 8003f72:	e000      	b.n	8003f76 <NVIC_EncodePriority+0x32>
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43da      	mvns	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	401a      	ands	r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	43d9      	mvns	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f9c:	4313      	orrs	r3, r2
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3724      	adds	r7, #36	@ 0x24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <SysTick_Config>:
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fbc:	d301      	bcc.n	8003fc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e00f      	b.n	8003fe2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <SysTick_Config+0x40>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fca:	210f      	movs	r1, #15
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	f7ff ff8e 	bl	8003ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <SysTick_Config+0x40>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fda:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <SysTick_Config+0x40>)
 8003fdc:	2207      	movs	r2, #7
 8003fde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	e000e010 	.word	0xe000e010

08003ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff29 	bl	8003e50 <__NVIC_SetPriorityGrouping>
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af00      	add	r7, sp, #0
 800400c:	4603      	mov	r3, r0
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004014:	f7ff ff40 	bl	8003e98 <__NVIC_GetPriorityGrouping>
 8004018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	6978      	ldr	r0, [r7, #20]
 8004020:	f7ff ff90 	bl	8003f44 <NVIC_EncodePriority>
 8004024:	4602      	mov	r2, r0
 8004026:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff ff5f 	bl	8003ef0 <__NVIC_SetPriority>
}
 8004032:	bf00      	nop
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	4603      	mov	r3, r0
 8004042:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ff33 	bl	8003eb4 <__NVIC_EnableIRQ>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ffa4 	bl	8003fac <SysTick_Config>
 8004064:	4603      	mov	r3, r0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004074:	f3bf 8f5f 	dmb	sy
}
 8004078:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800407a:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <HAL_MPU_Disable+0x28>)
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	4a06      	ldr	r2, [pc, #24]	@ (8004098 <HAL_MPU_Disable+0x28>)
 8004080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004084:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004086:	4b05      	ldr	r3, [pc, #20]	@ (800409c <HAL_MPU_Disable+0x2c>)
 8004088:	2200      	movs	r2, #0
 800408a:	605a      	str	r2, [r3, #4]
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	e000ed00 	.word	0xe000ed00
 800409c:	e000ed90 	.word	0xe000ed90

080040a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80040a8:	4a0b      	ldr	r2, [pc, #44]	@ (80040d8 <HAL_MPU_Enable+0x38>)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80040b2:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <HAL_MPU_Enable+0x3c>)
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	4a09      	ldr	r2, [pc, #36]	@ (80040dc <HAL_MPU_Enable+0x3c>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040bc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80040be:	f3bf 8f4f 	dsb	sy
}
 80040c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040c4:	f3bf 8f6f 	isb	sy
}
 80040c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000ed90 	.word	0xe000ed90
 80040dc:	e000ed00 	.word	0xe000ed00

080040e0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	785a      	ldrb	r2, [r3, #1]
 80040ec:	4b1b      	ldr	r3, [pc, #108]	@ (800415c <HAL_MPU_ConfigRegion+0x7c>)
 80040ee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80040f0:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <HAL_MPU_ConfigRegion+0x7c>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	4a19      	ldr	r2, [pc, #100]	@ (800415c <HAL_MPU_ConfigRegion+0x7c>)
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80040fc:	4a17      	ldr	r2, [pc, #92]	@ (800415c <HAL_MPU_ConfigRegion+0x7c>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7b1b      	ldrb	r3, [r3, #12]
 8004108:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	7adb      	ldrb	r3, [r3, #11]
 800410e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004110:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	7a9b      	ldrb	r3, [r3, #10]
 8004116:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004118:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7b5b      	ldrb	r3, [r3, #13]
 800411e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004120:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7b9b      	ldrb	r3, [r3, #14]
 8004126:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004128:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7bdb      	ldrb	r3, [r3, #15]
 800412e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004130:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	7a5b      	ldrb	r3, [r3, #9]
 8004136:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004138:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	7a1b      	ldrb	r3, [r3, #8]
 800413e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004140:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	7812      	ldrb	r2, [r2, #0]
 8004146:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004148:	4a04      	ldr	r2, [pc, #16]	@ (800415c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800414a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800414c:	6113      	str	r3, [r2, #16]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	e000ed90 	.word	0xe000ed90

08004160 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004168:	f7ff fe42 	bl	8003df0 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e2dc      	b.n	8004732 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d008      	beq.n	8004196 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2280      	movs	r2, #128	@ 0x80
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e2cd      	b.n	8004732 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a76      	ldr	r2, [pc, #472]	@ (8004374 <HAL_DMA_Abort+0x214>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d04a      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a74      	ldr	r2, [pc, #464]	@ (8004378 <HAL_DMA_Abort+0x218>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d045      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a73      	ldr	r2, [pc, #460]	@ (800437c <HAL_DMA_Abort+0x21c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d040      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a71      	ldr	r2, [pc, #452]	@ (8004380 <HAL_DMA_Abort+0x220>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d03b      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a70      	ldr	r2, [pc, #448]	@ (8004384 <HAL_DMA_Abort+0x224>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d036      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004388 <HAL_DMA_Abort+0x228>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d031      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6d      	ldr	r2, [pc, #436]	@ (800438c <HAL_DMA_Abort+0x22c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d02c      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a6b      	ldr	r2, [pc, #428]	@ (8004390 <HAL_DMA_Abort+0x230>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d027      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6a      	ldr	r2, [pc, #424]	@ (8004394 <HAL_DMA_Abort+0x234>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a68      	ldr	r2, [pc, #416]	@ (8004398 <HAL_DMA_Abort+0x238>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01d      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a67      	ldr	r2, [pc, #412]	@ (800439c <HAL_DMA_Abort+0x23c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d018      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a65      	ldr	r2, [pc, #404]	@ (80043a0 <HAL_DMA_Abort+0x240>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a64      	ldr	r2, [pc, #400]	@ (80043a4 <HAL_DMA_Abort+0x244>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a62      	ldr	r2, [pc, #392]	@ (80043a8 <HAL_DMA_Abort+0x248>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a61      	ldr	r2, [pc, #388]	@ (80043ac <HAL_DMA_Abort+0x24c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_DMA_Abort+0xd6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a5f      	ldr	r2, [pc, #380]	@ (80043b0 <HAL_DMA_Abort+0x250>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_DMA_Abort+0xda>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <HAL_DMA_Abort+0xdc>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 021e 	bic.w	r2, r2, #30
 800424e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800425e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e00a      	b.n	800427e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 020e 	bic.w	r2, r2, #14
 8004276:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a3c      	ldr	r2, [pc, #240]	@ (8004374 <HAL_DMA_Abort+0x214>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d072      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a3a      	ldr	r2, [pc, #232]	@ (8004378 <HAL_DMA_Abort+0x218>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d06d      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a39      	ldr	r2, [pc, #228]	@ (800437c <HAL_DMA_Abort+0x21c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d068      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a37      	ldr	r2, [pc, #220]	@ (8004380 <HAL_DMA_Abort+0x220>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d063      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a36      	ldr	r2, [pc, #216]	@ (8004384 <HAL_DMA_Abort+0x224>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d05e      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a34      	ldr	r2, [pc, #208]	@ (8004388 <HAL_DMA_Abort+0x228>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d059      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a33      	ldr	r2, [pc, #204]	@ (800438c <HAL_DMA_Abort+0x22c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d054      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a31      	ldr	r2, [pc, #196]	@ (8004390 <HAL_DMA_Abort+0x230>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d04f      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a30      	ldr	r2, [pc, #192]	@ (8004394 <HAL_DMA_Abort+0x234>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004398 <HAL_DMA_Abort+0x238>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2d      	ldr	r2, [pc, #180]	@ (800439c <HAL_DMA_Abort+0x23c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <HAL_DMA_Abort+0x240>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2a      	ldr	r2, [pc, #168]	@ (80043a4 <HAL_DMA_Abort+0x244>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a28      	ldr	r2, [pc, #160]	@ (80043a8 <HAL_DMA_Abort+0x248>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a27      	ldr	r2, [pc, #156]	@ (80043ac <HAL_DMA_Abort+0x24c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a25      	ldr	r2, [pc, #148]	@ (80043b0 <HAL_DMA_Abort+0x250>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a24      	ldr	r2, [pc, #144]	@ (80043b4 <HAL_DMA_Abort+0x254>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a22      	ldr	r2, [pc, #136]	@ (80043b8 <HAL_DMA_Abort+0x258>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a21      	ldr	r2, [pc, #132]	@ (80043bc <HAL_DMA_Abort+0x25c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1f      	ldr	r2, [pc, #124]	@ (80043c0 <HAL_DMA_Abort+0x260>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <HAL_DMA_Abort+0x264>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <HAL_DMA_Abort+0x268>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1b      	ldr	r2, [pc, #108]	@ (80043cc <HAL_DMA_Abort+0x26c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_DMA_Abort+0x20e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a19      	ldr	r2, [pc, #100]	@ (80043d0 <HAL_DMA_Abort+0x270>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d132      	bne.n	80043d4 <HAL_DMA_Abort+0x274>
 800436e:	2301      	movs	r3, #1
 8004370:	e031      	b.n	80043d6 <HAL_DMA_Abort+0x276>
 8004372:	bf00      	nop
 8004374:	40020010 	.word	0x40020010
 8004378:	40020028 	.word	0x40020028
 800437c:	40020040 	.word	0x40020040
 8004380:	40020058 	.word	0x40020058
 8004384:	40020070 	.word	0x40020070
 8004388:	40020088 	.word	0x40020088
 800438c:	400200a0 	.word	0x400200a0
 8004390:	400200b8 	.word	0x400200b8
 8004394:	40020410 	.word	0x40020410
 8004398:	40020428 	.word	0x40020428
 800439c:	40020440 	.word	0x40020440
 80043a0:	40020458 	.word	0x40020458
 80043a4:	40020470 	.word	0x40020470
 80043a8:	40020488 	.word	0x40020488
 80043ac:	400204a0 	.word	0x400204a0
 80043b0:	400204b8 	.word	0x400204b8
 80043b4:	58025408 	.word	0x58025408
 80043b8:	5802541c 	.word	0x5802541c
 80043bc:	58025430 	.word	0x58025430
 80043c0:	58025444 	.word	0x58025444
 80043c4:	58025458 	.word	0x58025458
 80043c8:	5802546c 	.word	0x5802546c
 80043cc:	58025480 	.word	0x58025480
 80043d0:	58025494 	.word	0x58025494
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6d      	ldr	r2, [pc, #436]	@ (80045a4 <HAL_DMA_Abort+0x444>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d04a      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6b      	ldr	r2, [pc, #428]	@ (80045a8 <HAL_DMA_Abort+0x448>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d045      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a6a      	ldr	r2, [pc, #424]	@ (80045ac <HAL_DMA_Abort+0x44c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d040      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a68      	ldr	r2, [pc, #416]	@ (80045b0 <HAL_DMA_Abort+0x450>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d03b      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a67      	ldr	r2, [pc, #412]	@ (80045b4 <HAL_DMA_Abort+0x454>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d036      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a65      	ldr	r2, [pc, #404]	@ (80045b8 <HAL_DMA_Abort+0x458>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d031      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a64      	ldr	r2, [pc, #400]	@ (80045bc <HAL_DMA_Abort+0x45c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d02c      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a62      	ldr	r2, [pc, #392]	@ (80045c0 <HAL_DMA_Abort+0x460>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d027      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a61      	ldr	r2, [pc, #388]	@ (80045c4 <HAL_DMA_Abort+0x464>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d022      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a5f      	ldr	r2, [pc, #380]	@ (80045c8 <HAL_DMA_Abort+0x468>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01d      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a5e      	ldr	r2, [pc, #376]	@ (80045cc <HAL_DMA_Abort+0x46c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d018      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a5c      	ldr	r2, [pc, #368]	@ (80045d0 <HAL_DMA_Abort+0x470>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a5b      	ldr	r2, [pc, #364]	@ (80045d4 <HAL_DMA_Abort+0x474>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00e      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a59      	ldr	r2, [pc, #356]	@ (80045d8 <HAL_DMA_Abort+0x478>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a58      	ldr	r2, [pc, #352]	@ (80045dc <HAL_DMA_Abort+0x47c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_DMA_Abort+0x32a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a56      	ldr	r2, [pc, #344]	@ (80045e0 <HAL_DMA_Abort+0x480>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <HAL_DMA_Abort+0x33c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e007      	b.n	80044ac <HAL_DMA_Abort+0x34c>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044ac:	e013      	b.n	80044d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ae:	f7ff fc9f 	bl	8003df0 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	d90c      	bls.n	80044d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2203      	movs	r2, #3
 80044c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e12d      	b.n	8004732 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e5      	bne.n	80044ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2f      	ldr	r2, [pc, #188]	@ (80045a4 <HAL_DMA_Abort+0x444>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d04a      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a2d      	ldr	r2, [pc, #180]	@ (80045a8 <HAL_DMA_Abort+0x448>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d045      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a2c      	ldr	r2, [pc, #176]	@ (80045ac <HAL_DMA_Abort+0x44c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d040      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2a      	ldr	r2, [pc, #168]	@ (80045b0 <HAL_DMA_Abort+0x450>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d03b      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a29      	ldr	r2, [pc, #164]	@ (80045b4 <HAL_DMA_Abort+0x454>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d036      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a27      	ldr	r2, [pc, #156]	@ (80045b8 <HAL_DMA_Abort+0x458>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d031      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a26      	ldr	r2, [pc, #152]	@ (80045bc <HAL_DMA_Abort+0x45c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d02c      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a24      	ldr	r2, [pc, #144]	@ (80045c0 <HAL_DMA_Abort+0x460>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d027      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a23      	ldr	r2, [pc, #140]	@ (80045c4 <HAL_DMA_Abort+0x464>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d022      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a21      	ldr	r2, [pc, #132]	@ (80045c8 <HAL_DMA_Abort+0x468>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01d      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a20      	ldr	r2, [pc, #128]	@ (80045cc <HAL_DMA_Abort+0x46c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d018      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1e      	ldr	r2, [pc, #120]	@ (80045d0 <HAL_DMA_Abort+0x470>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1d      	ldr	r2, [pc, #116]	@ (80045d4 <HAL_DMA_Abort+0x474>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00e      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1b      	ldr	r2, [pc, #108]	@ (80045d8 <HAL_DMA_Abort+0x478>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d009      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1a      	ldr	r2, [pc, #104]	@ (80045dc <HAL_DMA_Abort+0x47c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d004      	beq.n	8004582 <HAL_DMA_Abort+0x422>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a18      	ldr	r2, [pc, #96]	@ (80045e0 <HAL_DMA_Abort+0x480>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d101      	bne.n	8004586 <HAL_DMA_Abort+0x426>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_DMA_Abort+0x428>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d02b      	beq.n	80045e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004590:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	223f      	movs	r2, #63	@ 0x3f
 800459c:	409a      	lsls	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]
 80045a2:	e02a      	b.n	80045fa <HAL_DMA_Abort+0x49a>
 80045a4:	40020010 	.word	0x40020010
 80045a8:	40020028 	.word	0x40020028
 80045ac:	40020040 	.word	0x40020040
 80045b0:	40020058 	.word	0x40020058
 80045b4:	40020070 	.word	0x40020070
 80045b8:	40020088 	.word	0x40020088
 80045bc:	400200a0 	.word	0x400200a0
 80045c0:	400200b8 	.word	0x400200b8
 80045c4:	40020410 	.word	0x40020410
 80045c8:	40020428 	.word	0x40020428
 80045cc:	40020440 	.word	0x40020440
 80045d0:	40020458 	.word	0x40020458
 80045d4:	40020470 	.word	0x40020470
 80045d8:	40020488 	.word	0x40020488
 80045dc:	400204a0 	.word	0x400204a0
 80045e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	2201      	movs	r2, #1
 80045f4:	409a      	lsls	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a4f      	ldr	r2, [pc, #316]	@ (800473c <HAL_DMA_Abort+0x5dc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d072      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4d      	ldr	r2, [pc, #308]	@ (8004740 <HAL_DMA_Abort+0x5e0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d06d      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4c      	ldr	r2, [pc, #304]	@ (8004744 <HAL_DMA_Abort+0x5e4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d068      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a4a      	ldr	r2, [pc, #296]	@ (8004748 <HAL_DMA_Abort+0x5e8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d063      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a49      	ldr	r2, [pc, #292]	@ (800474c <HAL_DMA_Abort+0x5ec>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d05e      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a47      	ldr	r2, [pc, #284]	@ (8004750 <HAL_DMA_Abort+0x5f0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d059      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a46      	ldr	r2, [pc, #280]	@ (8004754 <HAL_DMA_Abort+0x5f4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d054      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a44      	ldr	r2, [pc, #272]	@ (8004758 <HAL_DMA_Abort+0x5f8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d04f      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a43      	ldr	r2, [pc, #268]	@ (800475c <HAL_DMA_Abort+0x5fc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d04a      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a41      	ldr	r2, [pc, #260]	@ (8004760 <HAL_DMA_Abort+0x600>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d045      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a40      	ldr	r2, [pc, #256]	@ (8004764 <HAL_DMA_Abort+0x604>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d040      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3e      	ldr	r2, [pc, #248]	@ (8004768 <HAL_DMA_Abort+0x608>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d03b      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a3d      	ldr	r2, [pc, #244]	@ (800476c <HAL_DMA_Abort+0x60c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d036      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a3b      	ldr	r2, [pc, #236]	@ (8004770 <HAL_DMA_Abort+0x610>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d031      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3a      	ldr	r2, [pc, #232]	@ (8004774 <HAL_DMA_Abort+0x614>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d02c      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a38      	ldr	r2, [pc, #224]	@ (8004778 <HAL_DMA_Abort+0x618>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d027      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a37      	ldr	r2, [pc, #220]	@ (800477c <HAL_DMA_Abort+0x61c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d022      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a35      	ldr	r2, [pc, #212]	@ (8004780 <HAL_DMA_Abort+0x620>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01d      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a34      	ldr	r2, [pc, #208]	@ (8004784 <HAL_DMA_Abort+0x624>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d018      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a32      	ldr	r2, [pc, #200]	@ (8004788 <HAL_DMA_Abort+0x628>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a31      	ldr	r2, [pc, #196]	@ (800478c <HAL_DMA_Abort+0x62c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <HAL_DMA_Abort+0x630>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2e      	ldr	r2, [pc, #184]	@ (8004794 <HAL_DMA_Abort+0x634>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_DMA_Abort+0x58a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004798 <HAL_DMA_Abort+0x638>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_DMA_Abort+0x58e>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_DMA_Abort+0x590>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d015      	beq.n	8004720 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80046fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00c      	beq.n	8004720 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004714:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800471e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
 800477c:	58025408 	.word	0x58025408
 8004780:	5802541c 	.word	0x5802541c
 8004784:	58025430 	.word	0x58025430
 8004788:	58025444 	.word	0x58025444
 800478c:	58025458 	.word	0x58025458
 8004790:	5802546c 	.word	0x5802546c
 8004794:	58025480 	.word	0x58025480
 8004798:	58025494 	.word	0x58025494

0800479c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e237      	b.n	8004c1e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d004      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2280      	movs	r2, #128	@ 0x80
 80047be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e22c      	b.n	8004c1e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a5c      	ldr	r2, [pc, #368]	@ (800493c <HAL_DMA_Abort_IT+0x1a0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d04a      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004940 <HAL_DMA_Abort_IT+0x1a4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d045      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a59      	ldr	r2, [pc, #356]	@ (8004944 <HAL_DMA_Abort_IT+0x1a8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d040      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a58      	ldr	r2, [pc, #352]	@ (8004948 <HAL_DMA_Abort_IT+0x1ac>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d03b      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a56      	ldr	r2, [pc, #344]	@ (800494c <HAL_DMA_Abort_IT+0x1b0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d036      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a55      	ldr	r2, [pc, #340]	@ (8004950 <HAL_DMA_Abort_IT+0x1b4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d031      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a53      	ldr	r2, [pc, #332]	@ (8004954 <HAL_DMA_Abort_IT+0x1b8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d02c      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a52      	ldr	r2, [pc, #328]	@ (8004958 <HAL_DMA_Abort_IT+0x1bc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d027      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a50      	ldr	r2, [pc, #320]	@ (800495c <HAL_DMA_Abort_IT+0x1c0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d022      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a4f      	ldr	r2, [pc, #316]	@ (8004960 <HAL_DMA_Abort_IT+0x1c4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d01d      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a4d      	ldr	r2, [pc, #308]	@ (8004964 <HAL_DMA_Abort_IT+0x1c8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d018      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a4c      	ldr	r2, [pc, #304]	@ (8004968 <HAL_DMA_Abort_IT+0x1cc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a4a      	ldr	r2, [pc, #296]	@ (800496c <HAL_DMA_Abort_IT+0x1d0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00e      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a49      	ldr	r2, [pc, #292]	@ (8004970 <HAL_DMA_Abort_IT+0x1d4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a47      	ldr	r2, [pc, #284]	@ (8004974 <HAL_DMA_Abort_IT+0x1d8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a46      	ldr	r2, [pc, #280]	@ (8004978 <HAL_DMA_Abort_IT+0x1dc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_DMA_Abort_IT+0xcc>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_DMA_Abort_IT+0xce>
 8004868:	2300      	movs	r3, #0
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8086 	beq.w	800497c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2204      	movs	r2, #4
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2f      	ldr	r2, [pc, #188]	@ (800493c <HAL_DMA_Abort_IT+0x1a0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04a      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2e      	ldr	r2, [pc, #184]	@ (8004940 <HAL_DMA_Abort_IT+0x1a4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d045      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2c      	ldr	r2, [pc, #176]	@ (8004944 <HAL_DMA_Abort_IT+0x1a8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d040      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2b      	ldr	r2, [pc, #172]	@ (8004948 <HAL_DMA_Abort_IT+0x1ac>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d03b      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a29      	ldr	r2, [pc, #164]	@ (800494c <HAL_DMA_Abort_IT+0x1b0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d036      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a28      	ldr	r2, [pc, #160]	@ (8004950 <HAL_DMA_Abort_IT+0x1b4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d031      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a26      	ldr	r2, [pc, #152]	@ (8004954 <HAL_DMA_Abort_IT+0x1b8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d02c      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a25      	ldr	r2, [pc, #148]	@ (8004958 <HAL_DMA_Abort_IT+0x1bc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d027      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a23      	ldr	r2, [pc, #140]	@ (800495c <HAL_DMA_Abort_IT+0x1c0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d022      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a22      	ldr	r2, [pc, #136]	@ (8004960 <HAL_DMA_Abort_IT+0x1c4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d01d      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a20      	ldr	r2, [pc, #128]	@ (8004964 <HAL_DMA_Abort_IT+0x1c8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d018      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004968 <HAL_DMA_Abort_IT+0x1cc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d013      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1d      	ldr	r2, [pc, #116]	@ (800496c <HAL_DMA_Abort_IT+0x1d0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00e      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004970 <HAL_DMA_Abort_IT+0x1d4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d009      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1a      	ldr	r2, [pc, #104]	@ (8004974 <HAL_DMA_Abort_IT+0x1d8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_DMA_Abort_IT+0x17c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a19      	ldr	r2, [pc, #100]	@ (8004978 <HAL_DMA_Abort_IT+0x1dc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d108      	bne.n	800492a <HAL_DMA_Abort_IT+0x18e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e178      	b.n	8004c1c <HAL_DMA_Abort_IT+0x480>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e16f      	b.n	8004c1c <HAL_DMA_Abort_IT+0x480>
 800493c:	40020010 	.word	0x40020010
 8004940:	40020028 	.word	0x40020028
 8004944:	40020040 	.word	0x40020040
 8004948:	40020058 	.word	0x40020058
 800494c:	40020070 	.word	0x40020070
 8004950:	40020088 	.word	0x40020088
 8004954:	400200a0 	.word	0x400200a0
 8004958:	400200b8 	.word	0x400200b8
 800495c:	40020410 	.word	0x40020410
 8004960:	40020428 	.word	0x40020428
 8004964:	40020440 	.word	0x40020440
 8004968:	40020458 	.word	0x40020458
 800496c:	40020470 	.word	0x40020470
 8004970:	40020488 	.word	0x40020488
 8004974:	400204a0 	.word	0x400204a0
 8004978:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 020e 	bic.w	r2, r2, #14
 800498a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a6c      	ldr	r2, [pc, #432]	@ (8004b44 <HAL_DMA_Abort_IT+0x3a8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d04a      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6b      	ldr	r2, [pc, #428]	@ (8004b48 <HAL_DMA_Abort_IT+0x3ac>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d045      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a69      	ldr	r2, [pc, #420]	@ (8004b4c <HAL_DMA_Abort_IT+0x3b0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d040      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a68      	ldr	r2, [pc, #416]	@ (8004b50 <HAL_DMA_Abort_IT+0x3b4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d03b      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a66      	ldr	r2, [pc, #408]	@ (8004b54 <HAL_DMA_Abort_IT+0x3b8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d036      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a65      	ldr	r2, [pc, #404]	@ (8004b58 <HAL_DMA_Abort_IT+0x3bc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d031      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a63      	ldr	r2, [pc, #396]	@ (8004b5c <HAL_DMA_Abort_IT+0x3c0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d02c      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a62      	ldr	r2, [pc, #392]	@ (8004b60 <HAL_DMA_Abort_IT+0x3c4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d027      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a60      	ldr	r2, [pc, #384]	@ (8004b64 <HAL_DMA_Abort_IT+0x3c8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d022      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a5f      	ldr	r2, [pc, #380]	@ (8004b68 <HAL_DMA_Abort_IT+0x3cc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d01d      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b6c <HAL_DMA_Abort_IT+0x3d0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d018      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004b70 <HAL_DMA_Abort_IT+0x3d4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a5a      	ldr	r2, [pc, #360]	@ (8004b74 <HAL_DMA_Abort_IT+0x3d8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00e      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a59      	ldr	r2, [pc, #356]	@ (8004b78 <HAL_DMA_Abort_IT+0x3dc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d009      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a57      	ldr	r2, [pc, #348]	@ (8004b7c <HAL_DMA_Abort_IT+0x3e0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x290>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a56      	ldr	r2, [pc, #344]	@ (8004b80 <HAL_DMA_Abort_IT+0x3e4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d108      	bne.n	8004a3e <HAL_DMA_Abort_IT+0x2a2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e007      	b.n	8004a4e <HAL_DMA_Abort_IT+0x2b2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3c      	ldr	r2, [pc, #240]	@ (8004b44 <HAL_DMA_Abort_IT+0x3a8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d072      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8004b48 <HAL_DMA_Abort_IT+0x3ac>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d06d      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a39      	ldr	r2, [pc, #228]	@ (8004b4c <HAL_DMA_Abort_IT+0x3b0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d068      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a37      	ldr	r2, [pc, #220]	@ (8004b50 <HAL_DMA_Abort_IT+0x3b4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d063      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a36      	ldr	r2, [pc, #216]	@ (8004b54 <HAL_DMA_Abort_IT+0x3b8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d05e      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a34      	ldr	r2, [pc, #208]	@ (8004b58 <HAL_DMA_Abort_IT+0x3bc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d059      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a33      	ldr	r2, [pc, #204]	@ (8004b5c <HAL_DMA_Abort_IT+0x3c0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d054      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a31      	ldr	r2, [pc, #196]	@ (8004b60 <HAL_DMA_Abort_IT+0x3c4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d04f      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a30      	ldr	r2, [pc, #192]	@ (8004b64 <HAL_DMA_Abort_IT+0x3c8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d04a      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2e      	ldr	r2, [pc, #184]	@ (8004b68 <HAL_DMA_Abort_IT+0x3cc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d045      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8004b6c <HAL_DMA_Abort_IT+0x3d0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d040      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b70 <HAL_DMA_Abort_IT+0x3d4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d03b      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a2a      	ldr	r2, [pc, #168]	@ (8004b74 <HAL_DMA_Abort_IT+0x3d8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d036      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a28      	ldr	r2, [pc, #160]	@ (8004b78 <HAL_DMA_Abort_IT+0x3dc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d031      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a27      	ldr	r2, [pc, #156]	@ (8004b7c <HAL_DMA_Abort_IT+0x3e0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d02c      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a25      	ldr	r2, [pc, #148]	@ (8004b80 <HAL_DMA_Abort_IT+0x3e4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d027      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a24      	ldr	r2, [pc, #144]	@ (8004b84 <HAL_DMA_Abort_IT+0x3e8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a22      	ldr	r2, [pc, #136]	@ (8004b88 <HAL_DMA_Abort_IT+0x3ec>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01d      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a21      	ldr	r2, [pc, #132]	@ (8004b8c <HAL_DMA_Abort_IT+0x3f0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1f      	ldr	r2, [pc, #124]	@ (8004b90 <HAL_DMA_Abort_IT+0x3f4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b94 <HAL_DMA_Abort_IT+0x3f8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1c      	ldr	r2, [pc, #112]	@ (8004b98 <HAL_DMA_Abort_IT+0x3fc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <HAL_DMA_Abort_IT+0x400>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x3a2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a19      	ldr	r2, [pc, #100]	@ (8004ba0 <HAL_DMA_Abort_IT+0x404>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d132      	bne.n	8004ba4 <HAL_DMA_Abort_IT+0x408>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e031      	b.n	8004ba6 <HAL_DMA_Abort_IT+0x40a>
 8004b42:	bf00      	nop
 8004b44:	40020010 	.word	0x40020010
 8004b48:	40020028 	.word	0x40020028
 8004b4c:	40020040 	.word	0x40020040
 8004b50:	40020058 	.word	0x40020058
 8004b54:	40020070 	.word	0x40020070
 8004b58:	40020088 	.word	0x40020088
 8004b5c:	400200a0 	.word	0x400200a0
 8004b60:	400200b8 	.word	0x400200b8
 8004b64:	40020410 	.word	0x40020410
 8004b68:	40020428 	.word	0x40020428
 8004b6c:	40020440 	.word	0x40020440
 8004b70:	40020458 	.word	0x40020458
 8004b74:	40020470 	.word	0x40020470
 8004b78:	40020488 	.word	0x40020488
 8004b7c:	400204a0 	.word	0x400204a0
 8004b80:	400204b8 	.word	0x400204b8
 8004b84:	58025408 	.word	0x58025408
 8004b88:	5802541c 	.word	0x5802541c
 8004b8c:	58025430 	.word	0x58025430
 8004b90:	58025444 	.word	0x58025444
 8004b94:	58025458 	.word	0x58025458
 8004b98:	5802546c 	.word	0x5802546c
 8004b9c:	58025480 	.word	0x58025480
 8004ba0:	58025494 	.word	0x58025494
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d028      	beq.n	8004bfc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2201      	movs	r2, #1
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bd8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bf0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bfa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop

08004c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	@ 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c36:	4b86      	ldr	r3, [pc, #536]	@ (8004e50 <HAL_GPIO_Init+0x228>)
 8004c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c3a:	e18c      	b.n	8004f56 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	2101      	movs	r1, #1
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	4013      	ands	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 817e 	beq.w	8004f50 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d005      	beq.n	8004c6c <HAL_GPIO_Init+0x44>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d130      	bne.n	8004cce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	2203      	movs	r2, #3
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 0201 	and.w	r2, r3, #1
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d017      	beq.n	8004d0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d123      	bne.n	8004d5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	08da      	lsrs	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3208      	adds	r2, #8
 8004d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	220f      	movs	r2, #15
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	08da      	lsrs	r2, r3, #3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3208      	adds	r2, #8
 8004d58:	69b9      	ldr	r1, [r7, #24]
 8004d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	2203      	movs	r2, #3
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 0203 	and.w	r2, r3, #3
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80d8 	beq.w	8004f50 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e54 <HAL_GPIO_Init+0x22c>)
 8004da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004da6:	4a2b      	ldr	r2, [pc, #172]	@ (8004e54 <HAL_GPIO_Init+0x22c>)
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004db0:	4b28      	ldr	r3, [pc, #160]	@ (8004e54 <HAL_GPIO_Init+0x22c>)
 8004db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dbe:	4a26      	ldr	r2, [pc, #152]	@ (8004e58 <HAL_GPIO_Init+0x230>)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	220f      	movs	r2, #15
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e5c <HAL_GPIO_Init+0x234>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d04a      	beq.n	8004e80 <HAL_GPIO_Init+0x258>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a1c      	ldr	r2, [pc, #112]	@ (8004e60 <HAL_GPIO_Init+0x238>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d02b      	beq.n	8004e4a <HAL_GPIO_Init+0x222>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e64 <HAL_GPIO_Init+0x23c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d025      	beq.n	8004e46 <HAL_GPIO_Init+0x21e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e68 <HAL_GPIO_Init+0x240>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01f      	beq.n	8004e42 <HAL_GPIO_Init+0x21a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a19      	ldr	r2, [pc, #100]	@ (8004e6c <HAL_GPIO_Init+0x244>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d019      	beq.n	8004e3e <HAL_GPIO_Init+0x216>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a18      	ldr	r2, [pc, #96]	@ (8004e70 <HAL_GPIO_Init+0x248>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_GPIO_Init+0x212>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <HAL_GPIO_Init+0x24c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00d      	beq.n	8004e36 <HAL_GPIO_Init+0x20e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	@ (8004e78 <HAL_GPIO_Init+0x250>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <HAL_GPIO_Init+0x20a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <HAL_GPIO_Init+0x254>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <HAL_GPIO_Init+0x206>
 8004e2a:	2309      	movs	r3, #9
 8004e2c:	e029      	b.n	8004e82 <HAL_GPIO_Init+0x25a>
 8004e2e:	230a      	movs	r3, #10
 8004e30:	e027      	b.n	8004e82 <HAL_GPIO_Init+0x25a>
 8004e32:	2307      	movs	r3, #7
 8004e34:	e025      	b.n	8004e82 <HAL_GPIO_Init+0x25a>
 8004e36:	2306      	movs	r3, #6
 8004e38:	e023      	b.n	8004e82 <HAL_GPIO_Init+0x25a>
 8004e3a:	2305      	movs	r3, #5
 8004e3c:	e021      	b.n	8004e82 <HAL_GPIO_Init+0x25a>
 8004e3e:	2304      	movs	r3, #4
 8004e40:	e01f      	b.n	8004e82 <HAL_GPIO_Init+0x25a>
 8004e42:	2303      	movs	r3, #3
 8004e44:	e01d      	b.n	8004e82 <HAL_GPIO_Init+0x25a>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e01b      	b.n	8004e82 <HAL_GPIO_Init+0x25a>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e019      	b.n	8004e82 <HAL_GPIO_Init+0x25a>
 8004e4e:	bf00      	nop
 8004e50:	58000080 	.word	0x58000080
 8004e54:	58024400 	.word	0x58024400
 8004e58:	58000400 	.word	0x58000400
 8004e5c:	58020000 	.word	0x58020000
 8004e60:	58020400 	.word	0x58020400
 8004e64:	58020800 	.word	0x58020800
 8004e68:	58020c00 	.word	0x58020c00
 8004e6c:	58021000 	.word	0x58021000
 8004e70:	58021400 	.word	0x58021400
 8004e74:	58021800 	.word	0x58021800
 8004e78:	58021c00 	.word	0x58021c00
 8004e7c:	58022400 	.word	0x58022400
 8004e80:	2300      	movs	r3, #0
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	f002 0203 	and.w	r2, r2, #3
 8004e88:	0092      	lsls	r2, r2, #2
 8004e8a:	4093      	lsls	r3, r2
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e92:	4938      	ldr	r1, [pc, #224]	@ (8004f74 <HAL_GPIO_Init+0x34c>)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	089b      	lsrs	r3, r3, #2
 8004e98:	3302      	adds	r3, #2
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4013      	ands	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ef4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	3301      	adds	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f47f ae6b 	bne.w	8004c3c <HAL_GPIO_Init+0x14>
  }
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	3724      	adds	r7, #36	@ 0x24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	58000400 	.word	0x58000400

08004f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	887b      	ldrh	r3, [r7, #2]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
 8004f94:	e001      	b.n	8004f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fb8:	787b      	ldrb	r3, [r7, #1]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fbe:	887a      	ldrh	r2, [r7, #2]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004fc4:	e003      	b.n	8004fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004fc6:	887b      	ldrh	r3, [r7, #2]
 8004fc8:	041a      	lsls	r2, r3, #16
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	619a      	str	r2, [r3, #24]
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e08b      	b.n	8005106 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fe f884 	bl	8003110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	@ 0x24
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800502c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800503c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	e006      	b.n	8005064 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005062:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d108      	bne.n	800507e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800507a:	605a      	str	r2, [r3, #4]
 800507c:	e007      	b.n	800508e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6859      	ldr	r1, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b1d      	ldr	r3, [pc, #116]	@ (8005110 <HAL_I2C_Init+0x134>)
 800509a:	430b      	orrs	r3, r1
 800509c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69d9      	ldr	r1, [r3, #28]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	02008000 	.word	0x02008000

08005114 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	461a      	mov	r2, r3
 8005120:	460b      	mov	r3, r1
 8005122:	817b      	strh	r3, [r7, #10]
 8005124:	4613      	mov	r3, r2
 8005126:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b20      	cmp	r3, #32
 8005132:	f040 80fd 	bne.w	8005330 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_I2C_Master_Transmit+0x30>
 8005140:	2302      	movs	r3, #2
 8005142:	e0f6      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800514c:	f7fe fe50 	bl	8003df0 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2319      	movs	r3, #25
 8005158:	2201      	movs	r2, #1
 800515a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fa0a 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e0e1      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2221      	movs	r2, #33	@ 0x21
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2210      	movs	r2, #16
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	893a      	ldrh	r2, [r7, #8]
 800518e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	2bff      	cmp	r3, #255	@ 0xff
 800519e:	d906      	bls.n	80051ae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	22ff      	movs	r2, #255	@ 0xff
 80051a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80051a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e007      	b.n	80051be <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d024      	beq.n	8005210 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	781a      	ldrb	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	3301      	adds	r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	8979      	ldrh	r1, [r7, #10]
 8005202:	4b4e      	ldr	r3, [pc, #312]	@ (800533c <HAL_I2C_Master_Transmit+0x228>)
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fc05 	bl	8005a18 <I2C_TransferConfig>
 800520e:	e066      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005214:	b2da      	uxtb	r2, r3
 8005216:	8979      	ldrh	r1, [r7, #10]
 8005218:	4b48      	ldr	r3, [pc, #288]	@ (800533c <HAL_I2C_Master_Transmit+0x228>)
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 fbfa 	bl	8005a18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005224:	e05b      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	6a39      	ldr	r1, [r7, #32]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f9fd 	bl	800562a <I2C_WaitOnTXISFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e07b      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d034      	beq.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d130      	bne.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	2200      	movs	r2, #0
 8005284:	2180      	movs	r1, #128	@ 0x80
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f976 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e04d      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	2bff      	cmp	r3, #255	@ 0xff
 800529e:	d90e      	bls.n	80052be <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	22ff      	movs	r2, #255	@ 0xff
 80052a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	8979      	ldrh	r1, [r7, #10]
 80052ae:	2300      	movs	r3, #0
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fbae 	bl	8005a18 <I2C_TransferConfig>
 80052bc:	e00f      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	8979      	ldrh	r1, [r7, #10]
 80052d0:	2300      	movs	r3, #0
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fb9d 	bl	8005a18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d19e      	bne.n	8005226 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	6a39      	ldr	r1, [r7, #32]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f9e3 	bl	80056b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e01a      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2220      	movs	r2, #32
 8005302:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4b0c      	ldr	r3, [pc, #48]	@ (8005340 <HAL_I2C_Master_Transmit+0x22c>)
 8005310:	400b      	ands	r3, r1
 8005312:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	e000      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	80002000 	.word	0x80002000
 8005340:	fe00e800 	.word	0xfe00e800

08005344 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	461a      	mov	r2, r3
 8005350:	460b      	mov	r3, r1
 8005352:	817b      	strh	r3, [r7, #10]
 8005354:	4613      	mov	r3, r2
 8005356:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b20      	cmp	r3, #32
 8005362:	f040 80db 	bne.w	800551c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_I2C_Master_Receive+0x30>
 8005370:	2302      	movs	r3, #2
 8005372:	e0d4      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800537c:	f7fe fd38 	bl	8003df0 <HAL_GetTick>
 8005380:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2319      	movs	r3, #25
 8005388:	2201      	movs	r2, #1
 800538a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f8f2 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e0bf      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2222      	movs	r2, #34	@ 0x22
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2210      	movs	r2, #16
 80053aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	893a      	ldrh	r2, [r7, #8]
 80053be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2bff      	cmp	r3, #255	@ 0xff
 80053ce:	d90e      	bls.n	80053ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	22ff      	movs	r2, #255	@ 0xff
 80053d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	8979      	ldrh	r1, [r7, #10]
 80053de:	4b52      	ldr	r3, [pc, #328]	@ (8005528 <HAL_I2C_Master_Receive+0x1e4>)
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fb16 	bl	8005a18 <I2C_TransferConfig>
 80053ec:	e06d      	b.n	80054ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	8979      	ldrh	r1, [r7, #10]
 8005400:	4b49      	ldr	r3, [pc, #292]	@ (8005528 <HAL_I2C_Master_Receive+0x1e4>)
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fb05 	bl	8005a18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800540e:	e05c      	b.n	80054ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	6a39      	ldr	r1, [r7, #32]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f993 	bl	8005740 <I2C_WaitOnRXNEFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e07c      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d034      	beq.n	80054ca <HAL_I2C_Master_Receive+0x186>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005464:	2b00      	cmp	r3, #0
 8005466:	d130      	bne.n	80054ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	2200      	movs	r2, #0
 8005470:	2180      	movs	r1, #128	@ 0x80
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f880 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e04d      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	2bff      	cmp	r3, #255	@ 0xff
 800548a:	d90e      	bls.n	80054aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	22ff      	movs	r2, #255	@ 0xff
 8005490:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005496:	b2da      	uxtb	r2, r3
 8005498:	8979      	ldrh	r1, [r7, #10]
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fab8 	bl	8005a18 <I2C_TransferConfig>
 80054a8:	e00f      	b.n	80054ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	8979      	ldrh	r1, [r7, #10]
 80054bc:	2300      	movs	r3, #0
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 faa7 	bl	8005a18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d19d      	bne.n	8005410 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	6a39      	ldr	r1, [r7, #32]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f8ed 	bl	80056b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e01a      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2220      	movs	r2, #32
 80054ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b0c      	ldr	r3, [pc, #48]	@ (800552c <HAL_I2C_Master_Receive+0x1e8>)
 80054fc:	400b      	ands	r3, r1
 80054fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	80002400 	.word	0x80002400
 800552c:	fe00e800 	.word	0xfe00e800

08005530 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d103      	bne.n	800554e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d007      	beq.n	800556c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	619a      	str	r2, [r3, #24]
  }
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005588:	e03b      	b.n	8005602 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f962 	bl	8005858 <I2C_IsErrorOccurred>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e041      	b.n	8005622 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d02d      	beq.n	8005602 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a6:	f7fe fc23 	bl	8003df0 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d122      	bne.n	8005602 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d113      	bne.n	8005602 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055de:	f043 0220 	orr.w	r2, r3, #32
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e00f      	b.n	8005622 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699a      	ldr	r2, [r3, #24]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	429a      	cmp	r2, r3
 800561e:	d0b4      	beq.n	800558a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005636:	e033      	b.n	80056a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f90b 	bl	8005858 <I2C_IsErrorOccurred>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e031      	b.n	80056b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d025      	beq.n	80056a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005654:	f7fe fbcc 	bl	8003df0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d302      	bcc.n	800566a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d11a      	bne.n	80056a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b02      	cmp	r3, #2
 8005676:	d013      	beq.n	80056a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e007      	b.n	80056b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d1c4      	bne.n	8005638 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056c4:	e02f      	b.n	8005726 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f8c4 	bl	8005858 <I2C_IsErrorOccurred>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e02d      	b.n	8005736 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056da:	f7fe fb89 	bl	8003df0 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11a      	bne.n	8005726 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d013      	beq.n	8005726 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e007      	b.n	8005736 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b20      	cmp	r3, #32
 8005732:	d1c8      	bne.n	80056c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005750:	e071      	b.n	8005836 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f87e 	bl	8005858 <I2C_IsErrorOccurred>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b20      	cmp	r3, #32
 8005772:	d13b      	bne.n	80057ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d138      	bne.n	80057ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b04      	cmp	r3, #4
 8005786:	d105      	bne.n	8005794 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b10      	cmp	r3, #16
 80057a0:	d121      	bne.n	80057e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2210      	movs	r2, #16
 80057a8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2204      	movs	r2, #4
 80057ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2220      	movs	r2, #32
 80057b6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6859      	ldr	r1, [r3, #4]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b24      	ldr	r3, [pc, #144]	@ (8005854 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80057c4:	400b      	ands	r3, r1
 80057c6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	75fb      	strb	r3, [r7, #23]
 80057e4:	e002      	b.n	80057ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80057ec:	f7fe fb00 	bl	8003df0 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d119      	bne.n	8005836 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005802:	7dfb      	ldrb	r3, [r7, #23]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d116      	bne.n	8005836 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d00f      	beq.n	8005836 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b04      	cmp	r3, #4
 8005842:	d002      	beq.n	800584a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005844:	7dfb      	ldrb	r3, [r7, #23]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d083      	beq.n	8005752 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800584a:	7dfb      	ldrb	r3, [r7, #23]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	fe00e800 	.word	0xfe00e800

08005858 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	@ 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	d068      	beq.n	8005956 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2210      	movs	r2, #16
 800588a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800588c:	e049      	b.n	8005922 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d045      	beq.n	8005922 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005896:	f7fe faab 	bl	8003df0 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <I2C_IsErrorOccurred+0x54>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d13a      	bne.n	8005922 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ce:	d121      	bne.n	8005914 <I2C_IsErrorOccurred+0xbc>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058d6:	d01d      	beq.n	8005914 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80058d8:	7cfb      	ldrb	r3, [r7, #19]
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d01a      	beq.n	8005914 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80058ee:	f7fe fa7f 	bl	8003df0 <HAL_GetTick>
 80058f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058f4:	e00e      	b.n	8005914 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80058f6:	f7fe fa7b 	bl	8003df0 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b19      	cmp	r3, #25
 8005902:	d907      	bls.n	8005914 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	f043 0320 	orr.w	r3, r3, #32
 800590a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005912:	e006      	b.n	8005922 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b20      	cmp	r3, #32
 8005920:	d1e9      	bne.n	80058f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b20      	cmp	r3, #32
 800592e:	d003      	beq.n	8005938 <I2C_IsErrorOccurred+0xe0>
 8005930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0aa      	beq.n	800588e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800593c:	2b00      	cmp	r3, #0
 800593e:	d103      	bne.n	8005948 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2220      	movs	r2, #32
 8005946:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	f043 0304 	orr.w	r3, r3, #4
 800594e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005978:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	f043 0308 	orr.w	r3, r3, #8
 8005990:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800599a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	f043 0302 	orr.w	r3, r3, #2
 80059b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80059c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01c      	beq.n	8005a06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff fdaf 	bl	8005530 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6859      	ldr	r1, [r3, #4]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a14 <I2C_IsErrorOccurred+0x1bc>)
 80059de:	400b      	ands	r3, r1
 80059e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3728      	adds	r7, #40	@ 0x28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	fe00e800 	.word	0xfe00e800

08005a18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	607b      	str	r3, [r7, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	817b      	strh	r3, [r7, #10]
 8005a26:	4613      	mov	r3, r2
 8005a28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a2a:	897b      	ldrh	r3, [r7, #10]
 8005a2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a30:	7a7b      	ldrb	r3, [r7, #9]
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	0d5b      	lsrs	r3, r3, #21
 8005a52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005a56:	4b08      	ldr	r3, [pc, #32]	@ (8005a78 <I2C_TransferConfig+0x60>)
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	ea02 0103 	and.w	r1, r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	03ff63ff 	.word	0x03ff63ff

08005a7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d138      	bne.n	8005b04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e032      	b.n	8005b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2224      	movs	r2, #36	@ 0x24
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ace:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e000      	b.n	8005b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b04:	2302      	movs	r3, #2
  }
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d139      	bne.n	8005b9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e033      	b.n	8005b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2224      	movs	r2, #36	@ 0x24
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0201 	bic.w	r2, r2, #1
 8005b54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
  }
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005bb4:	4b19      	ldr	r3, [pc, #100]	@ (8005c1c <HAL_PWREx_ConfigSupply+0x70>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005bc0:	4b16      	ldr	r3, [pc, #88]	@ (8005c1c <HAL_PWREx_ConfigSupply+0x70>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d001      	beq.n	8005bd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e01f      	b.n	8005c12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e01d      	b.n	8005c12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005bd6:	4b11      	ldr	r3, [pc, #68]	@ (8005c1c <HAL_PWREx_ConfigSupply+0x70>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f023 0207 	bic.w	r2, r3, #7
 8005bde:	490f      	ldr	r1, [pc, #60]	@ (8005c1c <HAL_PWREx_ConfigSupply+0x70>)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005be6:	f7fe f903 	bl	8003df0 <HAL_GetTick>
 8005bea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bec:	e009      	b.n	8005c02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005bee:	f7fe f8ff 	bl	8003df0 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bfc:	d901      	bls.n	8005c02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e007      	b.n	8005c12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c02:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <HAL_PWREx_ConfigSupply+0x70>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c0e:	d1ee      	bne.n	8005bee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	58024800 	.word	0x58024800

08005c20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08c      	sub	sp, #48	@ 0x30
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e3c8      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8087 	beq.w	8005d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c40:	4b88      	ldr	r3, [pc, #544]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c4a:	4b86      	ldr	r3, [pc, #536]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	2b10      	cmp	r3, #16
 8005c54:	d007      	beq.n	8005c66 <HAL_RCC_OscConfig+0x46>
 8005c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c58:	2b18      	cmp	r3, #24
 8005c5a:	d110      	bne.n	8005c7e <HAL_RCC_OscConfig+0x5e>
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d10b      	bne.n	8005c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c66:	4b7f      	ldr	r3, [pc, #508]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d06c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x12c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d168      	bne.n	8005d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e3a2      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c86:	d106      	bne.n	8005c96 <HAL_RCC_OscConfig+0x76>
 8005c88:	4b76      	ldr	r3, [pc, #472]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a75      	ldr	r2, [pc, #468]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e02e      	b.n	8005cf4 <HAL_RCC_OscConfig+0xd4>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x98>
 8005c9e:	4b71      	ldr	r3, [pc, #452]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a70      	ldr	r2, [pc, #448]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b6e      	ldr	r3, [pc, #440]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a6d      	ldr	r2, [pc, #436]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e01d      	b.n	8005cf4 <HAL_RCC_OscConfig+0xd4>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0xbc>
 8005cc2:	4b68      	ldr	r3, [pc, #416]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a67      	ldr	r2, [pc, #412]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	4b65      	ldr	r3, [pc, #404]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a64      	ldr	r2, [pc, #400]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCC_OscConfig+0xd4>
 8005cdc:	4b61      	ldr	r3, [pc, #388]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a60      	ldr	r2, [pc, #384]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	4b5e      	ldr	r3, [pc, #376]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a5d      	ldr	r2, [pc, #372]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d013      	beq.n	8005d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fe f878 	bl	8003df0 <HAL_GetTick>
 8005d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d04:	f7fe f874 	bl	8003df0 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b64      	cmp	r3, #100	@ 0x64
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e356      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d16:	4b53      	ldr	r3, [pc, #332]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0xe4>
 8005d22:	e014      	b.n	8005d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fe f864 	bl	8003df0 <HAL_GetTick>
 8005d28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d2c:	f7fe f860 	bl	8003df0 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	@ 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e342      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d3e:	4b49      	ldr	r3, [pc, #292]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x10c>
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 808c 	beq.w	8005e74 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d5c:	4b41      	ldr	r3, [pc, #260]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d66:	4b3f      	ldr	r3, [pc, #252]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_RCC_OscConfig+0x162>
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2b18      	cmp	r3, #24
 8005d76:	d137      	bne.n	8005de8 <HAL_RCC_OscConfig+0x1c8>
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d132      	bne.n	8005de8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d82:	4b38      	ldr	r3, [pc, #224]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_RCC_OscConfig+0x17a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e314      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d9a:	4b32      	ldr	r3, [pc, #200]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 0219 	bic.w	r2, r3, #25
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	492f      	ldr	r1, [pc, #188]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fe f820 	bl	8003df0 <HAL_GetTick>
 8005db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005db4:	f7fe f81c 	bl	8003df0 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e2fe      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dc6:	4b27      	ldr	r3, [pc, #156]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd2:	4b24      	ldr	r3, [pc, #144]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	061b      	lsls	r3, r3, #24
 8005de0:	4920      	ldr	r1, [pc, #128]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de6:	e045      	b.n	8005e74 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d026      	beq.n	8005e3e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005df0:	4b1c      	ldr	r3, [pc, #112]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f023 0219 	bic.w	r2, r3, #25
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	4919      	ldr	r1, [pc, #100]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e02:	f7fd fff5 	bl	8003df0 <HAL_GetTick>
 8005e06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e0a:	f7fd fff1 	bl	8003df0 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e2d3      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e1c:	4b11      	ldr	r3, [pc, #68]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0f0      	beq.n	8005e0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e28:	4b0e      	ldr	r3, [pc, #56]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	490b      	ldr	r1, [pc, #44]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	604b      	str	r3, [r1, #4]
 8005e3c:	e01a      	b.n	8005e74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e3e:	4b09      	ldr	r3, [pc, #36]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a08      	ldr	r2, [pc, #32]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fd ffd1 	bl	8003df0 <HAL_GetTick>
 8005e4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e50:	e00a      	b.n	8005e68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e52:	f7fd ffcd 	bl	8003df0 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d903      	bls.n	8005e68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e2af      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
 8005e64:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e68:	4b96      	ldr	r3, [pc, #600]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1ee      	bne.n	8005e52 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d06a      	beq.n	8005f56 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e80:	4b90      	ldr	r3, [pc, #576]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e8a:	4b8e      	ldr	r3, [pc, #568]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d007      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x286>
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b18      	cmp	r3, #24
 8005e9a:	d11b      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x2b4>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d116      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ea6:	4b87      	ldr	r3, [pc, #540]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_RCC_OscConfig+0x29e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	2b80      	cmp	r3, #128	@ 0x80
 8005eb8:	d001      	beq.n	8005ebe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e282      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ebe:	4b81      	ldr	r3, [pc, #516]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	061b      	lsls	r3, r3, #24
 8005ecc:	497d      	ldr	r1, [pc, #500]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ed2:	e040      	b.n	8005f56 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d023      	beq.n	8005f24 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005edc:	4b79      	ldr	r3, [pc, #484]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a78      	ldr	r2, [pc, #480]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fd ff82 	bl	8003df0 <HAL_GetTick>
 8005eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ef0:	f7fd ff7e 	bl	8003df0 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e260      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f02:	4b70      	ldr	r3, [pc, #448]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	061b      	lsls	r3, r3, #24
 8005f1c:	4969      	ldr	r1, [pc, #420]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60cb      	str	r3, [r1, #12]
 8005f22:	e018      	b.n	8005f56 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f24:	4b67      	ldr	r3, [pc, #412]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a66      	ldr	r2, [pc, #408]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fd ff5e 	bl	8003df0 <HAL_GetTick>
 8005f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f38:	f7fd ff5a 	bl	8003df0 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e23c      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d036      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d019      	beq.n	8005f9e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f6a:	4b56      	ldr	r3, [pc, #344]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f6e:	4a55      	ldr	r2, [pc, #340]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f76:	f7fd ff3b 	bl	8003df0 <HAL_GetTick>
 8005f7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f7e:	f7fd ff37 	bl	8003df0 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e219      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f90:	4b4c      	ldr	r3, [pc, #304]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCC_OscConfig+0x35e>
 8005f9c:	e018      	b.n	8005fd0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f9e:	4b49      	ldr	r3, [pc, #292]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fa2:	4a48      	ldr	r2, [pc, #288]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005faa:	f7fd ff21 	bl	8003df0 <HAL_GetTick>
 8005fae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb2:	f7fd ff1d 	bl	8003df0 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e1ff      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f0      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d036      	beq.n	800604a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d019      	beq.n	8006018 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fe4:	4b37      	ldr	r3, [pc, #220]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a36      	ldr	r2, [pc, #216]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8005fea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005fee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ff0:	f7fd fefe 	bl	8003df0 <HAL_GetTick>
 8005ff4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ff8:	f7fd fefa 	bl	8003df0 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e1dc      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800600a:	4b2e      	ldr	r3, [pc, #184]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0f0      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x3d8>
 8006016:	e018      	b.n	800604a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006018:	4b2a      	ldr	r3, [pc, #168]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a29      	ldr	r2, [pc, #164]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 800601e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006022:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006024:	f7fd fee4 	bl	8003df0 <HAL_GetTick>
 8006028:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800602c:	f7fd fee0 	bl	8003df0 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e1c2      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800603e:	4b21      	ldr	r3, [pc, #132]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8086 	beq.w	8006164 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006058:	4b1b      	ldr	r3, [pc, #108]	@ (80060c8 <HAL_RCC_OscConfig+0x4a8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1a      	ldr	r2, [pc, #104]	@ (80060c8 <HAL_RCC_OscConfig+0x4a8>)
 800605e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006064:	f7fd fec4 	bl	8003df0 <HAL_GetTick>
 8006068:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606c:	f7fd fec0 	bl	8003df0 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b64      	cmp	r3, #100	@ 0x64
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e1a2      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800607e:	4b12      	ldr	r3, [pc, #72]	@ (80060c8 <HAL_RCC_OscConfig+0x4a8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f0      	beq.n	800606c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d106      	bne.n	80060a0 <HAL_RCC_OscConfig+0x480>
 8006092:	4b0c      	ldr	r3, [pc, #48]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006096:	4a0b      	ldr	r2, [pc, #44]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	6713      	str	r3, [r2, #112]	@ 0x70
 800609e:	e032      	b.n	8006106 <HAL_RCC_OscConfig+0x4e6>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d111      	bne.n	80060cc <HAL_RCC_OscConfig+0x4ac>
 80060a8:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ac:	4a05      	ldr	r2, [pc, #20]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060b4:	4b03      	ldr	r3, [pc, #12]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 80060b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b8:	4a02      	ldr	r2, [pc, #8]	@ (80060c4 <HAL_RCC_OscConfig+0x4a4>)
 80060ba:	f023 0304 	bic.w	r3, r3, #4
 80060be:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c0:	e021      	b.n	8006106 <HAL_RCC_OscConfig+0x4e6>
 80060c2:	bf00      	nop
 80060c4:	58024400 	.word	0x58024400
 80060c8:	58024800 	.word	0x58024800
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d10c      	bne.n	80060ee <HAL_RCC_OscConfig+0x4ce>
 80060d4:	4b83      	ldr	r3, [pc, #524]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80060d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d8:	4a82      	ldr	r2, [pc, #520]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80060da:	f043 0304 	orr.w	r3, r3, #4
 80060de:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e0:	4b80      	ldr	r3, [pc, #512]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e4:	4a7f      	ldr	r2, [pc, #508]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ec:	e00b      	b.n	8006106 <HAL_RCC_OscConfig+0x4e6>
 80060ee:	4b7d      	ldr	r3, [pc, #500]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f2:	4a7c      	ldr	r2, [pc, #496]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060fa:	4b7a      	ldr	r3, [pc, #488]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80060fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fe:	4a79      	ldr	r2, [pc, #484]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006100:	f023 0304 	bic.w	r3, r3, #4
 8006104:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d015      	beq.n	800613a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610e:	f7fd fe6f 	bl	8003df0 <HAL_GetTick>
 8006112:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006114:	e00a      	b.n	800612c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006116:	f7fd fe6b 	bl	8003df0 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006124:	4293      	cmp	r3, r2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e14b      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800612c:	4b6d      	ldr	r3, [pc, #436]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800612e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0ee      	beq.n	8006116 <HAL_RCC_OscConfig+0x4f6>
 8006138:	e014      	b.n	8006164 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613a:	f7fd fe59 	bl	8003df0 <HAL_GetTick>
 800613e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006140:	e00a      	b.n	8006158 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006142:	f7fd fe55 	bl	8003df0 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006150:	4293      	cmp	r3, r2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e135      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006158:	4b62      	ldr	r3, [pc, #392]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800615a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1ee      	bne.n	8006142 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 812a 	beq.w	80063c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800616e:	4b5d      	ldr	r3, [pc, #372]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006176:	2b18      	cmp	r3, #24
 8006178:	f000 80ba 	beq.w	80062f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	2b02      	cmp	r3, #2
 8006182:	f040 8095 	bne.w	80062b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006186:	4b57      	ldr	r3, [pc, #348]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a56      	ldr	r2, [pc, #344]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800618c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fd fe2d 	bl	8003df0 <HAL_GetTick>
 8006196:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619a:	f7fd fe29 	bl	8003df0 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e10b      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ac:	4b4d      	ldr	r3, [pc, #308]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f0      	bne.n	800619a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061b8:	4b4a      	ldr	r3, [pc, #296]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80061ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061bc:	4b4a      	ldr	r3, [pc, #296]	@ (80062e8 <HAL_RCC_OscConfig+0x6c8>)
 80061be:	4013      	ands	r3, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061c8:	0112      	lsls	r2, r2, #4
 80061ca:	430a      	orrs	r2, r1
 80061cc:	4945      	ldr	r1, [pc, #276]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	628b      	str	r3, [r1, #40]	@ 0x28
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d6:	3b01      	subs	r3, #1
 80061d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e0:	3b01      	subs	r3, #1
 80061e2:	025b      	lsls	r3, r3, #9
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ec:	3b01      	subs	r3, #1
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fa:	3b01      	subs	r3, #1
 80061fc:	061b      	lsls	r3, r3, #24
 80061fe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006202:	4938      	ldr	r1, [pc, #224]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006204:	4313      	orrs	r3, r2
 8006206:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006208:	4b36      	ldr	r3, [pc, #216]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	4a35      	ldr	r2, [pc, #212]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006214:	4b33      	ldr	r3, [pc, #204]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006218:	4b34      	ldr	r3, [pc, #208]	@ (80062ec <HAL_RCC_OscConfig+0x6cc>)
 800621a:	4013      	ands	r3, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006220:	00d2      	lsls	r2, r2, #3
 8006222:	4930      	ldr	r1, [pc, #192]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006224:	4313      	orrs	r3, r2
 8006226:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006228:	4b2e      	ldr	r3, [pc, #184]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	f023 020c 	bic.w	r2, r3, #12
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006234:	492b      	ldr	r1, [pc, #172]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006236:	4313      	orrs	r3, r2
 8006238:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800623a:	4b2a      	ldr	r3, [pc, #168]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	f023 0202 	bic.w	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	4927      	ldr	r1, [pc, #156]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006248:	4313      	orrs	r3, r2
 800624a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800624c:	4b25      	ldr	r3, [pc, #148]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	4a24      	ldr	r2, [pc, #144]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006258:	4b22      	ldr	r3, [pc, #136]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800625a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625c:	4a21      	ldr	r2, [pc, #132]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800625e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006264:	4b1f      	ldr	r3, [pc, #124]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	4a1e      	ldr	r2, [pc, #120]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800626a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800626e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006270:	4b1c      	ldr	r3, [pc, #112]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006274:	4a1b      	ldr	r2, [pc, #108]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006276:	f043 0301 	orr.w	r3, r3, #1
 800627a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800627c:	4b19      	ldr	r3, [pc, #100]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a18      	ldr	r2, [pc, #96]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 8006282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006288:	f7fd fdb2 	bl	8003df0 <HAL_GetTick>
 800628c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006290:	f7fd fdae 	bl	8003df0 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e090      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062a2:	4b10      	ldr	r3, [pc, #64]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCC_OscConfig+0x670>
 80062ae:	e088      	b.n	80063c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b0:	4b0c      	ldr	r3, [pc, #48]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a0b      	ldr	r2, [pc, #44]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80062b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fd fd98 	bl	8003df0 <HAL_GetTick>
 80062c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c4:	f7fd fd94 	bl	8003df0 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e076      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062d6:	4b03      	ldr	r3, [pc, #12]	@ (80062e4 <HAL_RCC_OscConfig+0x6c4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0x6a4>
 80062e2:	e06e      	b.n	80063c2 <HAL_RCC_OscConfig+0x7a2>
 80062e4:	58024400 	.word	0x58024400
 80062e8:	fffffc0c 	.word	0xfffffc0c
 80062ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062f0:	4b36      	ldr	r3, [pc, #216]	@ (80063cc <HAL_RCC_OscConfig+0x7ac>)
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062f6:	4b35      	ldr	r3, [pc, #212]	@ (80063cc <HAL_RCC_OscConfig+0x7ac>)
 80062f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006300:	2b01      	cmp	r3, #1
 8006302:	d031      	beq.n	8006368 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f003 0203 	and.w	r2, r3, #3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800630e:	429a      	cmp	r2, r3
 8006310:	d12a      	bne.n	8006368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631e:	429a      	cmp	r2, r3
 8006320:	d122      	bne.n	8006368 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800632e:	429a      	cmp	r2, r3
 8006330:	d11a      	bne.n	8006368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	0a5b      	lsrs	r3, r3, #9
 8006336:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006340:	429a      	cmp	r2, r3
 8006342:	d111      	bne.n	8006368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006350:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d108      	bne.n	8006368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	0e1b      	lsrs	r3, r3, #24
 800635a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006362:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e02b      	b.n	80063c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800636c:	4b17      	ldr	r3, [pc, #92]	@ (80063cc <HAL_RCC_OscConfig+0x7ac>)
 800636e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006370:	08db      	lsrs	r3, r3, #3
 8006372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006376:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	429a      	cmp	r2, r3
 8006380:	d01f      	beq.n	80063c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006382:	4b12      	ldr	r3, [pc, #72]	@ (80063cc <HAL_RCC_OscConfig+0x7ac>)
 8006384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006386:	4a11      	ldr	r2, [pc, #68]	@ (80063cc <HAL_RCC_OscConfig+0x7ac>)
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800638e:	f7fd fd2f 	bl	8003df0 <HAL_GetTick>
 8006392:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006394:	bf00      	nop
 8006396:	f7fd fd2b 	bl	8003df0 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	4293      	cmp	r3, r2
 80063a0:	d0f9      	beq.n	8006396 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063a2:	4b0a      	ldr	r3, [pc, #40]	@ (80063cc <HAL_RCC_OscConfig+0x7ac>)
 80063a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063a6:	4b0a      	ldr	r3, [pc, #40]	@ (80063d0 <HAL_RCC_OscConfig+0x7b0>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063ae:	00d2      	lsls	r2, r2, #3
 80063b0:	4906      	ldr	r1, [pc, #24]	@ (80063cc <HAL_RCC_OscConfig+0x7ac>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80063b6:	4b05      	ldr	r3, [pc, #20]	@ (80063cc <HAL_RCC_OscConfig+0x7ac>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	4a04      	ldr	r2, [pc, #16]	@ (80063cc <HAL_RCC_OscConfig+0x7ac>)
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3730      	adds	r7, #48	@ 0x30
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	58024400 	.word	0x58024400
 80063d0:	ffff0007 	.word	0xffff0007

080063d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e19c      	b.n	8006722 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063e8:	4b8a      	ldr	r3, [pc, #552]	@ (8006614 <HAL_RCC_ClockConfig+0x240>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d910      	bls.n	8006418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f6:	4b87      	ldr	r3, [pc, #540]	@ (8006614 <HAL_RCC_ClockConfig+0x240>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 020f 	bic.w	r2, r3, #15
 80063fe:	4985      	ldr	r1, [pc, #532]	@ (8006614 <HAL_RCC_ClockConfig+0x240>)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	4313      	orrs	r3, r2
 8006404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006406:	4b83      	ldr	r3, [pc, #524]	@ (8006614 <HAL_RCC_ClockConfig+0x240>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e184      	b.n	8006722 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d010      	beq.n	8006446 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	4b7b      	ldr	r3, [pc, #492]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006430:	429a      	cmp	r2, r3
 8006432:	d908      	bls.n	8006446 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006434:	4b78      	ldr	r3, [pc, #480]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	4975      	ldr	r1, [pc, #468]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006442:	4313      	orrs	r3, r2
 8006444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d010      	beq.n	8006474 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	4b70      	ldr	r3, [pc, #448]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800645e:	429a      	cmp	r2, r3
 8006460:	d908      	bls.n	8006474 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006462:	4b6d      	ldr	r3, [pc, #436]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	496a      	ldr	r1, [pc, #424]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006470:	4313      	orrs	r3, r2
 8006472:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b00      	cmp	r3, #0
 800647e:	d010      	beq.n	80064a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	4b64      	ldr	r3, [pc, #400]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800648c:	429a      	cmp	r2, r3
 800648e:	d908      	bls.n	80064a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006490:	4b61      	ldr	r3, [pc, #388]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	495e      	ldr	r1, [pc, #376]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d010      	beq.n	80064d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69da      	ldr	r2, [r3, #28]
 80064b2:	4b59      	ldr	r3, [pc, #356]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d908      	bls.n	80064d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064be:	4b56      	ldr	r3, [pc, #344]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	4953      	ldr	r1, [pc, #332]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d010      	beq.n	80064fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d908      	bls.n	80064fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f023 020f 	bic.w	r2, r3, #15
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	4947      	ldr	r1, [pc, #284]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d055      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800650a:	4b43      	ldr	r3, [pc, #268]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	4940      	ldr	r1, [pc, #256]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006518:	4313      	orrs	r3, r2
 800651a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d107      	bne.n	8006534 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006524:	4b3c      	ldr	r3, [pc, #240]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d121      	bne.n	8006574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0f6      	b.n	8006722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d107      	bne.n	800654c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800653c:	4b36      	ldr	r3, [pc, #216]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d115      	bne.n	8006574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0ea      	b.n	8006722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d107      	bne.n	8006564 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006554:	4b30      	ldr	r3, [pc, #192]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e0de      	b.n	8006722 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006564:	4b2c      	ldr	r3, [pc, #176]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e0d6      	b.n	8006722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006574:	4b28      	ldr	r3, [pc, #160]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f023 0207 	bic.w	r2, r3, #7
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4925      	ldr	r1, [pc, #148]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 8006582:	4313      	orrs	r3, r2
 8006584:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006586:	f7fd fc33 	bl	8003df0 <HAL_GetTick>
 800658a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658c:	e00a      	b.n	80065a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800658e:	f7fd fc2f 	bl	8003df0 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659c:	4293      	cmp	r3, r2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e0be      	b.n	8006722 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d1eb      	bne.n	800658e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d010      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	4b14      	ldr	r3, [pc, #80]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d208      	bcs.n	80065e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065d2:	4b11      	ldr	r3, [pc, #68]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f023 020f 	bic.w	r2, r3, #15
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	490e      	ldr	r1, [pc, #56]	@ (8006618 <HAL_RCC_ClockConfig+0x244>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <HAL_RCC_ClockConfig+0x240>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d214      	bcs.n	800661c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f2:	4b08      	ldr	r3, [pc, #32]	@ (8006614 <HAL_RCC_ClockConfig+0x240>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f023 020f 	bic.w	r2, r3, #15
 80065fa:	4906      	ldr	r1, [pc, #24]	@ (8006614 <HAL_RCC_ClockConfig+0x240>)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	4313      	orrs	r3, r2
 8006600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006602:	4b04      	ldr	r3, [pc, #16]	@ (8006614 <HAL_RCC_ClockConfig+0x240>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d005      	beq.n	800661c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e086      	b.n	8006722 <HAL_RCC_ClockConfig+0x34e>
 8006614:	52002000 	.word	0x52002000
 8006618:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d010      	beq.n	800664a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	4b3f      	ldr	r3, [pc, #252]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006634:	429a      	cmp	r2, r3
 8006636:	d208      	bcs.n	800664a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006638:	4b3c      	ldr	r3, [pc, #240]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	4939      	ldr	r1, [pc, #228]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 8006646:	4313      	orrs	r3, r2
 8006648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d010      	beq.n	8006678 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695a      	ldr	r2, [r3, #20]
 800665a:	4b34      	ldr	r3, [pc, #208]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006662:	429a      	cmp	r2, r3
 8006664:	d208      	bcs.n	8006678 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006666:	4b31      	ldr	r3, [pc, #196]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	492e      	ldr	r1, [pc, #184]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 8006674:	4313      	orrs	r3, r2
 8006676:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b00      	cmp	r3, #0
 8006682:	d010      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699a      	ldr	r2, [r3, #24]
 8006688:	4b28      	ldr	r3, [pc, #160]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006690:	429a      	cmp	r2, r3
 8006692:	d208      	bcs.n	80066a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006694:	4b25      	ldr	r3, [pc, #148]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	4922      	ldr	r1, [pc, #136]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d010      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69da      	ldr	r2, [r3, #28]
 80066b6:	4b1d      	ldr	r3, [pc, #116]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066be:	429a      	cmp	r2, r3
 80066c0:	d208      	bcs.n	80066d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066c2:	4b1a      	ldr	r3, [pc, #104]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	4917      	ldr	r1, [pc, #92]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066d4:	f000 f834 	bl	8006740 <HAL_RCC_GetSysClockFreq>
 80066d8:	4602      	mov	r2, r0
 80066da:	4b14      	ldr	r3, [pc, #80]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	4912      	ldr	r1, [pc, #72]	@ (8006730 <HAL_RCC_ClockConfig+0x35c>)
 80066e6:	5ccb      	ldrb	r3, [r1, r3]
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
 80066f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066f2:	4b0e      	ldr	r3, [pc, #56]	@ (800672c <HAL_RCC_ClockConfig+0x358>)
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006730 <HAL_RCC_ClockConfig+0x35c>)
 80066fc:	5cd3      	ldrb	r3, [r2, r3]
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
 8006708:	4a0a      	ldr	r2, [pc, #40]	@ (8006734 <HAL_RCC_ClockConfig+0x360>)
 800670a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800670c:	4a0a      	ldr	r2, [pc, #40]	@ (8006738 <HAL_RCC_ClockConfig+0x364>)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006712:	4b0a      	ldr	r3, [pc, #40]	@ (800673c <HAL_RCC_ClockConfig+0x368>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f7fd fb20 	bl	8003d5c <HAL_InitTick>
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	58024400 	.word	0x58024400
 8006730:	0801227c 	.word	0x0801227c
 8006734:	24000008 	.word	0x24000008
 8006738:	24000004 	.word	0x24000004
 800673c:	24000014 	.word	0x24000014

08006740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006740:	b480      	push	{r7}
 8006742:	b089      	sub	sp, #36	@ 0x24
 8006744:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006746:	4bb3      	ldr	r3, [pc, #716]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800674e:	2b18      	cmp	r3, #24
 8006750:	f200 8155 	bhi.w	80069fe <HAL_RCC_GetSysClockFreq+0x2be>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	080067c1 	.word	0x080067c1
 8006760:	080069ff 	.word	0x080069ff
 8006764:	080069ff 	.word	0x080069ff
 8006768:	080069ff 	.word	0x080069ff
 800676c:	080069ff 	.word	0x080069ff
 8006770:	080069ff 	.word	0x080069ff
 8006774:	080069ff 	.word	0x080069ff
 8006778:	080069ff 	.word	0x080069ff
 800677c:	080067e7 	.word	0x080067e7
 8006780:	080069ff 	.word	0x080069ff
 8006784:	080069ff 	.word	0x080069ff
 8006788:	080069ff 	.word	0x080069ff
 800678c:	080069ff 	.word	0x080069ff
 8006790:	080069ff 	.word	0x080069ff
 8006794:	080069ff 	.word	0x080069ff
 8006798:	080069ff 	.word	0x080069ff
 800679c:	080067ed 	.word	0x080067ed
 80067a0:	080069ff 	.word	0x080069ff
 80067a4:	080069ff 	.word	0x080069ff
 80067a8:	080069ff 	.word	0x080069ff
 80067ac:	080069ff 	.word	0x080069ff
 80067b0:	080069ff 	.word	0x080069ff
 80067b4:	080069ff 	.word	0x080069ff
 80067b8:	080069ff 	.word	0x080069ff
 80067bc:	080067f3 	.word	0x080067f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067c0:	4b94      	ldr	r3, [pc, #592]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d009      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067cc:	4b91      	ldr	r3, [pc, #580]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	08db      	lsrs	r3, r3, #3
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	4a90      	ldr	r2, [pc, #576]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067d8:	fa22 f303 	lsr.w	r3, r2, r3
 80067dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80067de:	e111      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067e0:	4b8d      	ldr	r3, [pc, #564]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067e2:	61bb      	str	r3, [r7, #24]
      break;
 80067e4:	e10e      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80067e6:	4b8d      	ldr	r3, [pc, #564]	@ (8006a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067e8:	61bb      	str	r3, [r7, #24]
      break;
 80067ea:	e10b      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80067ec:	4b8c      	ldr	r3, [pc, #560]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80067ee:	61bb      	str	r3, [r7, #24]
      break;
 80067f0:	e108      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067f2:	4b88      	ldr	r3, [pc, #544]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80067fc:	4b85      	ldr	r3, [pc, #532]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006806:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006808:	4b82      	ldr	r3, [pc, #520]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006812:	4b80      	ldr	r3, [pc, #512]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006816:	08db      	lsrs	r3, r3, #3
 8006818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	fb02 f303 	mul.w	r3, r2, r3
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80e1 	beq.w	80069f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b02      	cmp	r3, #2
 800683a:	f000 8083 	beq.w	8006944 <HAL_RCC_GetSysClockFreq+0x204>
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b02      	cmp	r3, #2
 8006842:	f200 80a1 	bhi.w	8006988 <HAL_RCC_GetSysClockFreq+0x248>
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x114>
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d056      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006852:	e099      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006854:	4b6f      	ldr	r3, [pc, #444]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02d      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006860:	4b6c      	ldr	r3, [pc, #432]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	08db      	lsrs	r3, r3, #3
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	4a6b      	ldr	r2, [pc, #428]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800688a:	4b62      	ldr	r3, [pc, #392]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800689a:	ed97 6a02 	vldr	s12, [r7, #8]
 800689e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80068ba:	e087      	b.n	80069cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006a28 <HAL_RCC_GetSysClockFreq+0x2e8>
 80068ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ce:	4b51      	ldr	r3, [pc, #324]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068de:	ed97 6a02 	vldr	s12, [r7, #8]
 80068e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068fe:	e065      	b.n	80069cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006912:	4b40      	ldr	r3, [pc, #256]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006922:	ed97 6a02 	vldr	s12, [r7, #8]
 8006926:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006942:	e043      	b.n	80069cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006956:	4b2f      	ldr	r3, [pc, #188]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006966:	ed97 6a02 	vldr	s12, [r7, #8]
 800696a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800696e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800697a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006986:	e021      	b.n	80069cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699a:	4b1e      	ldr	r3, [pc, #120]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80069cc:	4b11      	ldr	r3, [pc, #68]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d0:	0a5b      	lsrs	r3, r3, #9
 80069d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069d6:	3301      	adds	r3, #1
 80069d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f0:	ee17 3a90 	vmov	r3, s15
 80069f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80069f6:	e005      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61bb      	str	r3, [r7, #24]
      break;
 80069fc:	e002      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80069fe:	4b07      	ldr	r3, [pc, #28]	@ (8006a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a00:	61bb      	str	r3, [r7, #24]
      break;
 8006a02:	bf00      	nop
  }

  return sysclockfreq;
 8006a04:	69bb      	ldr	r3, [r7, #24]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3724      	adds	r7, #36	@ 0x24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	58024400 	.word	0x58024400
 8006a18:	03d09000 	.word	0x03d09000
 8006a1c:	003d0900 	.word	0x003d0900
 8006a20:	02dc6c00 	.word	0x02dc6c00
 8006a24:	46000000 	.word	0x46000000
 8006a28:	4c742400 	.word	0x4c742400
 8006a2c:	4a742400 	.word	0x4a742400
 8006a30:	4c371b00 	.word	0x4c371b00

08006a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a3a:	f7ff fe81 	bl	8006740 <HAL_RCC_GetSysClockFreq>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	4b10      	ldr	r3, [pc, #64]	@ (8006a84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	0a1b      	lsrs	r3, r3, #8
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	490f      	ldr	r1, [pc, #60]	@ (8006a88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a4c:	5ccb      	ldrb	r3, [r1, r3]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	fa22 f303 	lsr.w	r3, r2, r3
 8006a56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a58:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	4a09      	ldr	r2, [pc, #36]	@ (8006a88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a62:	5cd3      	ldrb	r3, [r2, r3]
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6e:	4a07      	ldr	r2, [pc, #28]	@ (8006a8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006a70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a72:	4a07      	ldr	r2, [pc, #28]	@ (8006a90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a78:	4b04      	ldr	r3, [pc, #16]	@ (8006a8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	58024400 	.word	0x58024400
 8006a88:	0801227c 	.word	0x0801227c
 8006a8c:	24000008 	.word	0x24000008
 8006a90:	24000004 	.word	0x24000004

08006a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a98:	f7ff ffcc 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	4904      	ldr	r1, [pc, #16]	@ (8006abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006aaa:	5ccb      	ldrb	r3, [r1, r3]
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	0801227c 	.word	0x0801227c

08006ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ac4:	f7ff ffb6 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	4b06      	ldr	r3, [pc, #24]	@ (8006ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	0a1b      	lsrs	r3, r3, #8
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	4904      	ldr	r1, [pc, #16]	@ (8006ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ad6:	5ccb      	ldrb	r3, [r1, r3]
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	58024400 	.word	0x58024400
 8006ae8:	0801227c 	.word	0x0801227c

08006aec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006af0:	b0c6      	sub	sp, #280	@ 0x118
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006af8:	2300      	movs	r3, #0
 8006afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006afe:	2300      	movs	r3, #0
 8006b00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006b10:	2500      	movs	r5, #0
 8006b12:	ea54 0305 	orrs.w	r3, r4, r5
 8006b16:	d049      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b22:	d02f      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b28:	d828      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b2e:	d01a      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b34:	d822      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b3e:	d007      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b40:	e01c      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b42:	4bab      	ldr	r3, [pc, #684]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b46:	4aaa      	ldr	r2, [pc, #680]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b4e:	e01a      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	3308      	adds	r3, #8
 8006b56:	2102      	movs	r1, #2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f002 fa49 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b64:	e00f      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	3328      	adds	r3, #40	@ 0x28
 8006b6c:	2102      	movs	r1, #2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f002 faf0 	bl	8009154 <RCCEx_PLL3_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b7a:	e004      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b82:	e000      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b8e:	4b98      	ldr	r3, [pc, #608]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9c:	4a94      	ldr	r2, [pc, #592]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ba2:	e003      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006bb8:	f04f 0900 	mov.w	r9, #0
 8006bbc:	ea58 0309 	orrs.w	r3, r8, r9
 8006bc0:	d047      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d82a      	bhi.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006be9 	.word	0x08006be9
 8006bd8:	08006bf7 	.word	0x08006bf7
 8006bdc:	08006c0d 	.word	0x08006c0d
 8006be0:	08006c2b 	.word	0x08006c2b
 8006be4:	08006c2b 	.word	0x08006c2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be8:	4b81      	ldr	r3, [pc, #516]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	4a80      	ldr	r2, [pc, #512]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bf4:	e01a      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f002 f9f6 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c0a:	e00f      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	3328      	adds	r3, #40	@ 0x28
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f002 fa9d 	bl	8009154 <RCCEx_PLL3_Config>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c20:	e004      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c28:	e000      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c34:	4b6e      	ldr	r3, [pc, #440]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c38:	f023 0107 	bic.w	r1, r3, #7
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c42:	4a6b      	ldr	r2, [pc, #428]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c44:	430b      	orrs	r3, r1
 8006c46:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c48:	e003      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006c5e:	f04f 0b00 	mov.w	fp, #0
 8006c62:	ea5a 030b 	orrs.w	r3, sl, fp
 8006c66:	d05b      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c70:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006c74:	d03b      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006c76:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006c7a:	d834      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c80:	d037      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006c82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c86:	d82e      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c8c:	d033      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006c8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c92:	d828      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c98:	d01a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c9e:	d822      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006ca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ca8:	d007      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006caa:	e01c      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cac:	4b50      	ldr	r3, [pc, #320]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cb8:	e01e      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f002 f994 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cce:	e013      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd4:	3328      	adds	r3, #40	@ 0x28
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f002 fa3b 	bl	8009154 <RCCEx_PLL3_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cec:	e004      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d00:	4b3b      	ldr	r3, [pc, #236]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d04:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d10:	4a37      	ldr	r2, [pc, #220]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d12:	430b      	orrs	r3, r1
 8006d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d16:	e003      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006d36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	d05d      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d48:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006d4c:	d03b      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006d4e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006d52:	d834      	bhi.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d58:	d037      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006d5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d5e:	d82e      	bhi.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d64:	d033      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006d66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d6a:	d828      	bhi.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d70:	d01a      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d76:	d822      	bhi.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d80:	d007      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006d82:	e01c      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d84:	4b1a      	ldr	r3, [pc, #104]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d88:	4a19      	ldr	r2, [pc, #100]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d90:	e01e      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	3308      	adds	r3, #8
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f002 f928 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006da6:	e013      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dac:	3328      	adds	r3, #40	@ 0x28
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f002 f9cf 	bl	8009154 <RCCEx_PLL3_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dc4:	e004      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006dc6:	bf00      	nop
 8006dc8:	e002      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006dca:	bf00      	nop
 8006dcc:	e000      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10d      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006dd8:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ddc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006de8:	4a01      	ldr	r2, [pc, #4]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006dea:	430b      	orrs	r3, r1
 8006dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dee:	e005      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006df0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006e08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e12:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	d03a      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e22:	2b30      	cmp	r3, #48	@ 0x30
 8006e24:	d01f      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006e26:	2b30      	cmp	r3, #48	@ 0x30
 8006e28:	d819      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d00c      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d815      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d019      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006e36:	2b10      	cmp	r3, #16
 8006e38:	d111      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e3a:	4baa      	ldr	r3, [pc, #680]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	4aa9      	ldr	r2, [pc, #676]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e46:	e011      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	2102      	movs	r1, #2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f002 f8cd 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e5c:	e006      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e74:	4b9b      	ldr	r3, [pc, #620]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e78:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e82:	4a98      	ldr	r2, [pc, #608]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e84:	430b      	orrs	r3, r1
 8006e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e88:	e003      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ea8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006eac:	460b      	mov	r3, r1
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	d051      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ebc:	d035      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006ebe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ec2:	d82e      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ec4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ec8:	d031      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006eca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ece:	d828      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ed4:	d01a      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eda:	d822      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ee4:	d007      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006ee6:	e01c      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	4a7d      	ldr	r2, [pc, #500]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ef4:	e01c      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	3308      	adds	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f002 f876 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f0a:	e011      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f10:	3328      	adds	r3, #40	@ 0x28
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f002 f91d 	bl	8009154 <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f20:	e006      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006f2a:	bf00      	nop
 8006f2c:	e000      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f38:	4b6a      	ldr	r3, [pc, #424]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f46:	4a67      	ldr	r2, [pc, #412]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f4c:	e003      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006f62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f6c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4313      	orrs	r3, r2
 8006f74:	d053      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f80:	d033      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006f82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f86:	d82c      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f8c:	d02f      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006f8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f92:	d826      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f98:	d02b      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006f9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f9e:	d820      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006fa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fa4:	d012      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006faa:	d81a      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d022      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fb4:	d115      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fba:	3308      	adds	r3, #8
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 f816 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fca:	e015      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd0:	3328      	adds	r3, #40	@ 0x28
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f002 f8bd 	bl	8009154 <RCCEx_PLL3_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fe0:	e00a      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fe8:	e006      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006fea:	bf00      	nop
 8006fec:	e004      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006fee:	bf00      	nop
 8006ff0:	e002      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ff2:	bf00      	nop
 8006ff4:	e000      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007000:	4b38      	ldr	r3, [pc, #224]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007004:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700e:	4a35      	ldr	r2, [pc, #212]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007010:	430b      	orrs	r3, r1
 8007012:	6513      	str	r3, [r2, #80]	@ 0x50
 8007014:	e003      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800701a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800702a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800702e:	2300      	movs	r3, #0
 8007030:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007034:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007038:	460b      	mov	r3, r1
 800703a:	4313      	orrs	r3, r2
 800703c:	d058      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007042:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800704a:	d033      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800704c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007050:	d82c      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007056:	d02f      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705c:	d826      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800705e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007062:	d02b      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007064:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007068:	d820      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800706a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800706e:	d012      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007074:	d81a      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007076:	2b00      	cmp	r3, #0
 8007078:	d022      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800707a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800707e:	d115      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007084:	3308      	adds	r3, #8
 8007086:	2101      	movs	r1, #1
 8007088:	4618      	mov	r0, r3
 800708a:	f001 ffb1 	bl	8008ff0 <RCCEx_PLL2_Config>
 800708e:	4603      	mov	r3, r0
 8007090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007094:	e015      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709a:	3328      	adds	r3, #40	@ 0x28
 800709c:	2101      	movs	r1, #1
 800709e:	4618      	mov	r0, r3
 80070a0:	f002 f858 	bl	8009154 <RCCEx_PLL3_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070aa:	e00a      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070b2:	e006      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070b4:	bf00      	nop
 80070b6:	e004      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070b8:	bf00      	nop
 80070ba:	e002      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070bc:	bf00      	nop
 80070be:	e000      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10e      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070ca:	4b06      	ldr	r3, [pc, #24]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070da:	4a02      	ldr	r2, [pc, #8]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070dc:	430b      	orrs	r3, r1
 80070de:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e0:	e006      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80070fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007100:	2300      	movs	r3, #0
 8007102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007106:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d037      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800711a:	d00e      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800711c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007120:	d816      	bhi.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d018      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800712a:	d111      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712c:	4bc4      	ldr	r3, [pc, #784]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007130:	4ac3      	ldr	r2, [pc, #780]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007138:	e00f      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	3308      	adds	r3, #8
 8007140:	2101      	movs	r1, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f001 ff54 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800714e:	e004      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007156:	e000      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007162:	4bb7      	ldr	r3, [pc, #732]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007166:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007170:	4ab3      	ldr	r2, [pc, #716]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007172:	430b      	orrs	r3, r1
 8007174:	6513      	str	r3, [r2, #80]	@ 0x50
 8007176:	e003      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800717c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800718c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007196:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d039      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d81c      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071ed 	.word	0x080071ed
 80071b4:	080071c1 	.word	0x080071c1
 80071b8:	080071cf 	.word	0x080071cf
 80071bc:	080071ed 	.word	0x080071ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c0:	4b9f      	ldr	r3, [pc, #636]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	4a9e      	ldr	r2, [pc, #632]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071cc:	e00f      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d2:	3308      	adds	r3, #8
 80071d4:	2102      	movs	r1, #2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 ff0a 	bl	8008ff0 <RCCEx_PLL2_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071e2:	e004      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071ea:	e000      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80071ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071f6:	4b92      	ldr	r3, [pc, #584]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071fa:	f023 0103 	bic.w	r1, r3, #3
 80071fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007204:	4a8e      	ldr	r2, [pc, #568]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007206:	430b      	orrs	r3, r1
 8007208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800720a:	e003      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007220:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007224:	2300      	movs	r3, #0
 8007226:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800722a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800722e:	460b      	mov	r3, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	f000 8099 	beq.w	8007368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007236:	4b83      	ldr	r3, [pc, #524]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a82      	ldr	r2, [pc, #520]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800723c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007242:	f7fc fdd5 	bl	8003df0 <HAL_GetTick>
 8007246:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800724a:	e00b      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800724c:	f7fc fdd0 	bl	8003df0 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b64      	cmp	r3, #100	@ 0x64
 800725a:	d903      	bls.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007262:	e005      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007264:	4b77      	ldr	r3, [pc, #476]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0ed      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007274:	2b00      	cmp	r3, #0
 8007276:	d173      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007278:	4b71      	ldr	r3, [pc, #452]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800727a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007284:	4053      	eors	r3, r2
 8007286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800728a:	2b00      	cmp	r3, #0
 800728c:	d015      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800728e:	4b6c      	ldr	r3, [pc, #432]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007296:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800729a:	4b69      	ldr	r3, [pc, #420]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729e:	4a68      	ldr	r2, [pc, #416]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072a6:	4b66      	ldr	r3, [pc, #408]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072aa:	4a65      	ldr	r2, [pc, #404]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072b2:	4a63      	ldr	r2, [pc, #396]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c6:	d118      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c8:	f7fc fd92 	bl	8003df0 <HAL_GetTick>
 80072cc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072d0:	e00d      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d2:	f7fc fd8d 	bl	8003df0 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80072dc:	1ad2      	subs	r2, r2, r3
 80072de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d903      	bls.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80072ec:	e005      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ee:	4b54      	ldr	r3, [pc, #336]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0eb      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80072fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d129      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800730a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800730e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007312:	d10e      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007314:	4b4a      	ldr	r3, [pc, #296]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007324:	091a      	lsrs	r2, r3, #4
 8007326:	4b48      	ldr	r3, [pc, #288]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007328:	4013      	ands	r3, r2
 800732a:	4a45      	ldr	r2, [pc, #276]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800732c:	430b      	orrs	r3, r1
 800732e:	6113      	str	r3, [r2, #16]
 8007330:	e005      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007332:	4b43      	ldr	r3, [pc, #268]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	4a42      	ldr	r2, [pc, #264]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007338:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800733c:	6113      	str	r3, [r2, #16]
 800733e:	4b40      	ldr	r3, [pc, #256]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007340:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800734a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800734e:	4a3c      	ldr	r2, [pc, #240]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007350:	430b      	orrs	r3, r1
 8007352:	6713      	str	r3, [r2, #112]	@ 0x70
 8007354:	e008      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800735a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800735e:	e003      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f002 0301 	and.w	r3, r2, #1
 8007374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007378:	2300      	movs	r3, #0
 800737a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800737e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007382:	460b      	mov	r3, r1
 8007384:	4313      	orrs	r3, r2
 8007386:	f000 808f 	beq.w	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007390:	2b28      	cmp	r3, #40	@ 0x28
 8007392:	d871      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007394:	a201      	add	r2, pc, #4	@ (adr r2, 800739c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	08007481 	.word	0x08007481
 80073a0:	08007479 	.word	0x08007479
 80073a4:	08007479 	.word	0x08007479
 80073a8:	08007479 	.word	0x08007479
 80073ac:	08007479 	.word	0x08007479
 80073b0:	08007479 	.word	0x08007479
 80073b4:	08007479 	.word	0x08007479
 80073b8:	08007479 	.word	0x08007479
 80073bc:	0800744d 	.word	0x0800744d
 80073c0:	08007479 	.word	0x08007479
 80073c4:	08007479 	.word	0x08007479
 80073c8:	08007479 	.word	0x08007479
 80073cc:	08007479 	.word	0x08007479
 80073d0:	08007479 	.word	0x08007479
 80073d4:	08007479 	.word	0x08007479
 80073d8:	08007479 	.word	0x08007479
 80073dc:	08007463 	.word	0x08007463
 80073e0:	08007479 	.word	0x08007479
 80073e4:	08007479 	.word	0x08007479
 80073e8:	08007479 	.word	0x08007479
 80073ec:	08007479 	.word	0x08007479
 80073f0:	08007479 	.word	0x08007479
 80073f4:	08007479 	.word	0x08007479
 80073f8:	08007479 	.word	0x08007479
 80073fc:	08007481 	.word	0x08007481
 8007400:	08007479 	.word	0x08007479
 8007404:	08007479 	.word	0x08007479
 8007408:	08007479 	.word	0x08007479
 800740c:	08007479 	.word	0x08007479
 8007410:	08007479 	.word	0x08007479
 8007414:	08007479 	.word	0x08007479
 8007418:	08007479 	.word	0x08007479
 800741c:	08007481 	.word	0x08007481
 8007420:	08007479 	.word	0x08007479
 8007424:	08007479 	.word	0x08007479
 8007428:	08007479 	.word	0x08007479
 800742c:	08007479 	.word	0x08007479
 8007430:	08007479 	.word	0x08007479
 8007434:	08007479 	.word	0x08007479
 8007438:	08007479 	.word	0x08007479
 800743c:	08007481 	.word	0x08007481
 8007440:	58024400 	.word	0x58024400
 8007444:	58024800 	.word	0x58024800
 8007448:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800744c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007450:	3308      	adds	r3, #8
 8007452:	2101      	movs	r1, #1
 8007454:	4618      	mov	r0, r3
 8007456:	f001 fdcb 	bl	8008ff0 <RCCEx_PLL2_Config>
 800745a:	4603      	mov	r3, r0
 800745c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007460:	e00f      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007466:	3328      	adds	r3, #40	@ 0x28
 8007468:	2101      	movs	r1, #1
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fe72 	bl	8009154 <RCCEx_PLL3_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800748a:	4bbf      	ldr	r3, [pc, #764]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800748c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800748e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007496:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007498:	4abb      	ldr	r2, [pc, #748]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800749a:	430b      	orrs	r3, r1
 800749c:	6553      	str	r3, [r2, #84]	@ 0x54
 800749e:	e003      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f002 0302 	and.w	r3, r2, #2
 80074b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4313      	orrs	r3, r2
 80074c6:	d041      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d824      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80074d2:	a201      	add	r2, pc, #4	@ (adr r2, 80074d8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	08007525 	.word	0x08007525
 80074dc:	080074f1 	.word	0x080074f1
 80074e0:	08007507 	.word	0x08007507
 80074e4:	08007525 	.word	0x08007525
 80074e8:	08007525 	.word	0x08007525
 80074ec:	08007525 	.word	0x08007525
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f4:	3308      	adds	r3, #8
 80074f6:	2101      	movs	r1, #1
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 fd79 	bl	8008ff0 <RCCEx_PLL2_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007504:	e00f      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	3328      	adds	r3, #40	@ 0x28
 800750c:	2101      	movs	r1, #1
 800750e:	4618      	mov	r0, r3
 8007510:	f001 fe20 	bl	8009154 <RCCEx_PLL3_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800751a:	e004      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007522:	e000      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007526:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800752e:	4b96      	ldr	r3, [pc, #600]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007532:	f023 0107 	bic.w	r1, r3, #7
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800753c:	4a92      	ldr	r2, [pc, #584]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800753e:	430b      	orrs	r3, r1
 8007540:	6553      	str	r3, [r2, #84]	@ 0x54
 8007542:	e003      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007544:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007548:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f002 0304 	and.w	r3, r2, #4
 8007558:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800755c:	2300      	movs	r3, #0
 800755e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007562:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007566:	460b      	mov	r3, r1
 8007568:	4313      	orrs	r3, r2
 800756a:	d044      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007574:	2b05      	cmp	r3, #5
 8007576:	d825      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007578:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075cd 	.word	0x080075cd
 8007584:	08007599 	.word	0x08007599
 8007588:	080075af 	.word	0x080075af
 800758c:	080075cd 	.word	0x080075cd
 8007590:	080075cd 	.word	0x080075cd
 8007594:	080075cd 	.word	0x080075cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759c:	3308      	adds	r3, #8
 800759e:	2101      	movs	r1, #1
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 fd25 	bl	8008ff0 <RCCEx_PLL2_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075ac:	e00f      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	3328      	adds	r3, #40	@ 0x28
 80075b4:	2101      	movs	r1, #1
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 fdcc 	bl	8009154 <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075c2:	e004      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075ca:	e000      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80075cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075d6:	4b6c      	ldr	r3, [pc, #432]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075da:	f023 0107 	bic.w	r1, r3, #7
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e6:	4a68      	ldr	r2, [pc, #416]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075e8:	430b      	orrs	r3, r1
 80075ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ec:	e003      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f002 0320 	and.w	r3, r2, #32
 8007602:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007606:	2300      	movs	r3, #0
 8007608:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800760c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007610:	460b      	mov	r3, r1
 8007612:	4313      	orrs	r3, r2
 8007614:	d055      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800761e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007622:	d033      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007628:	d82c      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762e:	d02f      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007634:	d826      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007636:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800763a:	d02b      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800763c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007640:	d820      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007646:	d012      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800764c:	d81a      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d022      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007656:	d115      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765c:	3308      	adds	r3, #8
 800765e:	2100      	movs	r1, #0
 8007660:	4618      	mov	r0, r3
 8007662:	f001 fcc5 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800766c:	e015      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007672:	3328      	adds	r3, #40	@ 0x28
 8007674:	2102      	movs	r1, #2
 8007676:	4618      	mov	r0, r3
 8007678:	f001 fd6c 	bl	8009154 <RCCEx_PLL3_Config>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007682:	e00a      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800768a:	e006      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800768c:	bf00      	nop
 800768e:	e004      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007690:	bf00      	nop
 8007692:	e002      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800769a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076a2:	4b39      	ldr	r3, [pc, #228]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076b2:	4a35      	ldr	r2, [pc, #212]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80076b8:	e003      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80076ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076d2:	2300      	movs	r3, #0
 80076d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076d8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80076dc:	460b      	mov	r3, r1
 80076de:	4313      	orrs	r3, r2
 80076e0:	d058      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076ee:	d033      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80076f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076f4:	d82c      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fa:	d02f      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007700:	d826      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007702:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007706:	d02b      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007708:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800770c:	d820      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800770e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007712:	d012      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007718:	d81a      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d022      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800771e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007722:	d115      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007728:	3308      	adds	r3, #8
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f001 fc5f 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007738:	e015      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773e:	3328      	adds	r3, #40	@ 0x28
 8007740:	2102      	movs	r1, #2
 8007742:	4618      	mov	r0, r3
 8007744:	f001 fd06 	bl	8009154 <RCCEx_PLL3_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800774e:	e00a      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007756:	e006      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007758:	bf00      	nop
 800775a:	e004      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800775c:	bf00      	nop
 800775e:	e002      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007760:	bf00      	nop
 8007762:	e000      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007766:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10e      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800776e:	4b06      	ldr	r3, [pc, #24]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007772:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800777e:	4a02      	ldr	r2, [pc, #8]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007780:	430b      	orrs	r3, r1
 8007782:	6593      	str	r3, [r2, #88]	@ 0x58
 8007784:	e006      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007786:	bf00      	nop
 8007788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007790:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80077a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80077ae:	460b      	mov	r3, r1
 80077b0:	4313      	orrs	r3, r2
 80077b2:	d055      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80077c0:	d033      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80077c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80077c6:	d82c      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077cc:	d02f      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80077ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d2:	d826      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077d8:	d02b      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80077da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077de:	d820      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077e4:	d012      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80077e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ea:	d81a      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d022      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80077f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077f4:	d115      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fa:	3308      	adds	r3, #8
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 fbf6 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800780a:	e015      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007810:	3328      	adds	r3, #40	@ 0x28
 8007812:	2102      	movs	r1, #2
 8007814:	4618      	mov	r0, r3
 8007816:	f001 fc9d 	bl	8009154 <RCCEx_PLL3_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007820:	e00a      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007828:	e006      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007840:	4ba0      	ldr	r3, [pc, #640]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007844:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007850:	4a9c      	ldr	r2, [pc, #624]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007852:	430b      	orrs	r3, r1
 8007854:	6593      	str	r3, [r2, #88]	@ 0x58
 8007856:	e003      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800785c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f002 0308 	and.w	r3, r2, #8
 800786c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007870:	2300      	movs	r3, #0
 8007872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007876:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d01e      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800788c:	d10c      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007892:	3328      	adds	r3, #40	@ 0x28
 8007894:	2102      	movs	r1, #2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fc5c 	bl	8009154 <RCCEx_PLL3_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80078a8:	4b86      	ldr	r3, [pc, #536]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078b8:	4a82      	ldr	r2, [pc, #520]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f002 0310 	and.w	r3, r2, #16
 80078ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078ce:	2300      	movs	r3, #0
 80078d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80078d8:	460b      	mov	r3, r1
 80078da:	4313      	orrs	r3, r2
 80078dc:	d01e      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ea:	d10c      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f0:	3328      	adds	r3, #40	@ 0x28
 80078f2:	2102      	movs	r1, #2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 fc2d 	bl	8009154 <RCCEx_PLL3_Config>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007906:	4b6f      	ldr	r3, [pc, #444]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800790a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007916:	4a6b      	ldr	r2, [pc, #428]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007918:	430b      	orrs	r3, r1
 800791a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800792a:	2300      	movs	r3, #0
 800792c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800792e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007932:	460b      	mov	r3, r1
 8007934:	4313      	orrs	r3, r2
 8007936:	d03e      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007944:	d022      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007946:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800794a:	d81b      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007954:	d00b      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007956:	e015      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795c:	3308      	adds	r3, #8
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f001 fb45 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007966:	4603      	mov	r3, r0
 8007968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800796c:	e00f      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800796e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007972:	3328      	adds	r3, #40	@ 0x28
 8007974:	2102      	movs	r1, #2
 8007976:	4618      	mov	r0, r3
 8007978:	f001 fbec 	bl	8009154 <RCCEx_PLL3_Config>
 800797c:	4603      	mov	r3, r0
 800797e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007982:	e004      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800798a:	e000      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800798c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007996:	4b4b      	ldr	r3, [pc, #300]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079a6:	4a47      	ldr	r2, [pc, #284]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80079ac:	e003      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80079c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80079c4:	2300      	movs	r3, #0
 80079c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80079c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80079cc:	460b      	mov	r3, r1
 80079ce:	4313      	orrs	r3, r2
 80079d0:	d03b      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079de:	d01f      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80079e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079e4:	d818      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80079e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80079ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079f0:	d007      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80079f2:	e011      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b33      	ldr	r3, [pc, #204]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f8:	4a32      	ldr	r2, [pc, #200]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a00:	e00f      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a06:	3328      	adds	r3, #40	@ 0x28
 8007a08:	2101      	movs	r1, #1
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f001 fba2 	bl	8009154 <RCCEx_PLL3_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a16:	e004      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a1e:	e000      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a2a:	4b26      	ldr	r3, [pc, #152]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a3a:	4a22      	ldr	r2, [pc, #136]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a40:	e003      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007a56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a58:	2300      	movs	r3, #0
 8007a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a5c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007a60:	460b      	mov	r3, r1
 8007a62:	4313      	orrs	r3, r2
 8007a64:	d034      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a74:	d007      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007a76:	e011      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a78:	4b12      	ldr	r3, [pc, #72]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	4a11      	ldr	r2, [pc, #68]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a84:	e00e      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f001 faae 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a9a:	e003      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10d      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007aac:	4b05      	ldr	r3, [pc, #20]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aba:	4a02      	ldr	r2, [pc, #8]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007abc:	430b      	orrs	r3, r1
 8007abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ac0:	e006      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007ac2:	bf00      	nop
 8007ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007adc:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ade:	2300      	movs	r3, #0
 8007ae0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ae2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	d00c      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af0:	3328      	adds	r3, #40	@ 0x28
 8007af2:	2102      	movs	r1, #2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 fb2d 	bl	8009154 <RCCEx_PLL3_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007b12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b14:	2300      	movs	r3, #0
 8007b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b18:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	d036      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b2c:	d018      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b32:	d811      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b38:	d014      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b3e:	d80b      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d011      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b48:	d106      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4a:	4bb7      	ldr	r3, [pc, #732]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4e:	4ab6      	ldr	r2, [pc, #728]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b56:	e008      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b5e:	e004      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007b60:	bf00      	nop
 8007b62:	e002      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007b64:	bf00      	nop
 8007b66:	e000      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b72:	4bad      	ldr	r3, [pc, #692]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b80:	4aa9      	ldr	r2, [pc, #676]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b82:	430b      	orrs	r3, r1
 8007b84:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b86:	e003      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ba2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	d009      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bac:	4b9e      	ldr	r3, [pc, #632]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bba:	4a9b      	ldr	r2, [pc, #620]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bce:	2300      	movs	r3, #0
 8007bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bd2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	d009      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bdc:	4b92      	ldr	r3, [pc, #584]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bea:	4a8f      	ldr	r2, [pc, #572]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007bfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bfe:	2300      	movs	r3, #0
 8007c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007c06:	460b      	mov	r3, r1
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	d00e      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c0c:	4b86      	ldr	r3, [pc, #536]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	4a85      	ldr	r2, [pc, #532]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c16:	6113      	str	r3, [r2, #16]
 8007c18:	4b83      	ldr	r3, [pc, #524]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c1a:	6919      	ldr	r1, [r3, #16]
 8007c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c24:	4a80      	ldr	r2, [pc, #512]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c26:	430b      	orrs	r3, r1
 8007c28:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c38:	2300      	movs	r3, #0
 8007c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007c40:	460b      	mov	r3, r1
 8007c42:	4313      	orrs	r3, r2
 8007c44:	d009      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c46:	4b78      	ldr	r3, [pc, #480]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c54:	4a74      	ldr	r2, [pc, #464]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c56:	430b      	orrs	r3, r1
 8007c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c68:	2300      	movs	r3, #0
 8007c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c70:	460b      	mov	r3, r1
 8007c72:	4313      	orrs	r3, r2
 8007c74:	d00a      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c76:	4b6c      	ldr	r3, [pc, #432]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c86:	4a68      	ldr	r2, [pc, #416]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	2100      	movs	r1, #0
 8007c96:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	d011      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	3308      	adds	r3, #8
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 f99d 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6239      	str	r1, [r7, #32]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cde:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	d011      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cec:	3308      	adds	r3, #8
 8007cee:	2101      	movs	r1, #1
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 f97d 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	2100      	movs	r1, #0
 8007d16:	61b9      	str	r1, [r7, #24]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d22:	460b      	mov	r3, r1
 8007d24:	4313      	orrs	r3, r2
 8007d26:	d011      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	2102      	movs	r1, #2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f001 f95d 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	2100      	movs	r1, #0
 8007d56:	6139      	str	r1, [r7, #16]
 8007d58:	f003 0308 	and.w	r3, r3, #8
 8007d5c:	617b      	str	r3, [r7, #20]
 8007d5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d62:	460b      	mov	r3, r1
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d011      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6c:	3328      	adds	r3, #40	@ 0x28
 8007d6e:	2100      	movs	r1, #0
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 f9ef 	bl	8009154 <RCCEx_PLL3_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	2100      	movs	r1, #0
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007da2:	460b      	mov	r3, r1
 8007da4:	4313      	orrs	r3, r2
 8007da6:	d011      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dac:	3328      	adds	r3, #40	@ 0x28
 8007dae:	2101      	movs	r1, #1
 8007db0:	4618      	mov	r0, r3
 8007db2:	f001 f9cf 	bl	8009154 <RCCEx_PLL3_Config>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	6039      	str	r1, [r7, #0]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007de2:	460b      	mov	r3, r1
 8007de4:	4313      	orrs	r3, r2
 8007de6:	d011      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dec:	3328      	adds	r3, #40	@ 0x28
 8007dee:	2102      	movs	r1, #2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 f9af 	bl	8009154 <RCCEx_PLL3_Config>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007e0c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	e000      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007e20:	46bd      	mov	sp, r7
 8007e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e26:	bf00      	nop
 8007e28:	58024400 	.word	0x58024400

08007e2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b090      	sub	sp, #64	@ 0x40
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e3a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	f040 8094 	bne.w	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007e44:	4b9b      	ldr	r3, [pc, #620]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	f200 8087 	bhi.w	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007e56:	a201      	add	r2, pc, #4	@ (adr r2, 8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5c:	08007e71 	.word	0x08007e71
 8007e60:	08007e99 	.word	0x08007e99
 8007e64:	08007ec1 	.word	0x08007ec1
 8007e68:	08007f5d 	.word	0x08007f5d
 8007e6c:	08007ee9 	.word	0x08007ee9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e70:	4b90      	ldr	r3, [pc, #576]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e7c:	d108      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 ff62 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8c:	f000 bc93 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e94:	f000 bc8f 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e98:	4b86      	ldr	r3, [pc, #536]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ea4:	d108      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0318 	add.w	r3, r7, #24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fca6 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb4:	f000 bc7f 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ebc:	f000 bc7b 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ec0:	4b7c      	ldr	r3, [pc, #496]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ecc:	d108      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ece:	f107 030c 	add.w	r3, r7, #12
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fde6 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007edc:	f000 bc6b 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee4:	f000 bc67 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ee8:	4b72      	ldr	r3, [pc, #456]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ef0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ef2:	4b70      	ldr	r3, [pc, #448]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d10c      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d109      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f04:	4b6b      	ldr	r3, [pc, #428]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	08db      	lsrs	r3, r3, #3
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	4a6a      	ldr	r2, [pc, #424]	@ (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007f10:	fa22 f303 	lsr.w	r3, r2, r3
 8007f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f16:	e01f      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f18:	4b66      	ldr	r3, [pc, #408]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f24:	d106      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f2c:	d102      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f2e:	4b63      	ldr	r3, [pc, #396]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f32:	e011      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f34:	4b5f      	ldr	r3, [pc, #380]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f40:	d106      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f48:	d102      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f4e:	e003      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f54:	f000 bc2f 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f58:	f000 bc2d 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f5c:	4b59      	ldr	r3, [pc, #356]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f60:	f000 bc29 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f68:	f000 bc25 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f70:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007f74:	430b      	orrs	r3, r1
 8007f76:	f040 80a7 	bne.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f7e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007f82:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f8a:	d054      	beq.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f92:	f200 808b 	bhi.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f9c:	f000 8083 	beq.w	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007fa6:	f200 8081 	bhi.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fb0:	d02f      	beq.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fb8:	d878      	bhi.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fc6:	d012      	beq.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007fc8:	e070      	b.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fca:	4b3a      	ldr	r3, [pc, #232]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fd6:	d107      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 feb5 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe6:	e3e6      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fec:	e3e3      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fee:	4b31      	ldr	r3, [pc, #196]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ffa:	d107      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffc:	f107 0318 	add.w	r3, r7, #24
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fbfb 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800800a:	e3d4      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008010:	e3d1      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008012:	4b28      	ldr	r3, [pc, #160]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800801a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800801e:	d107      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008020:	f107 030c 	add.w	r3, r7, #12
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fd3d 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800802e:	e3c2      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008034:	e3bf      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008036:	4b1f      	ldr	r3, [pc, #124]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800803a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800803e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008040:	4b1c      	ldr	r3, [pc, #112]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b04      	cmp	r3, #4
 800804a:	d10c      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800804c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804e:	2b00      	cmp	r3, #0
 8008050:	d109      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008052:	4b18      	ldr	r3, [pc, #96]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	08db      	lsrs	r3, r3, #3
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	4a16      	ldr	r2, [pc, #88]	@ (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800805e:	fa22 f303 	lsr.w	r3, r2, r3
 8008062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008064:	e01e      	b.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008066:	4b13      	ldr	r3, [pc, #76]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800806e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008072:	d106      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800807a:	d102      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800807c:	4b0f      	ldr	r3, [pc, #60]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800807e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008080:	e010      	b.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008082:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800808a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800808e:	d106      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008096:	d102      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008098:	4b09      	ldr	r3, [pc, #36]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800809a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800809c:	e002      	b.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80080a2:	e388      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80080a4:	e387      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080a6:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080aa:	e384      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b0:	e381      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80080b2:	bf00      	nop
 80080b4:	58024400 	.word	0x58024400
 80080b8:	03d09000 	.word	0x03d09000
 80080bc:	003d0900 	.word	0x003d0900
 80080c0:	02dc6c00 	.word	0x02dc6c00
 80080c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80080c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080cc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80080d0:	430b      	orrs	r3, r1
 80080d2:	f040 809c 	bne.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80080d6:	4b9e      	ldr	r3, [pc, #632]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080da:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80080de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80080e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080e6:	d054      	beq.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080ee:	f200 808b 	bhi.w	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080f8:	f000 8083 	beq.w	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80080fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008102:	f200 8081 	bhi.w	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800810c:	d02f      	beq.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008114:	d878      	bhi.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800811c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008122:	d012      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008124:	e070      	b.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008126:	4b8a      	ldr	r3, [pc, #552]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800812e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008132:	d107      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fe07 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008142:	e338      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008148:	e335      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800814a:	4b81      	ldr	r3, [pc, #516]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008156:	d107      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008158:	f107 0318 	add.w	r3, r7, #24
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fb4d 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008166:	e326      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800816c:	e323      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800816e:	4b78      	ldr	r3, [pc, #480]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800817a:	d107      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800817c:	f107 030c 	add.w	r3, r7, #12
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fc8f 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800818a:	e314      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008190:	e311      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008192:	4b6f      	ldr	r3, [pc, #444]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008196:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800819a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800819c:	4b6c      	ldr	r3, [pc, #432]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d10c      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80081a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d109      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081ae:	4b68      	ldr	r3, [pc, #416]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	4a66      	ldr	r2, [pc, #408]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081c0:	e01e      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081c2:	4b63      	ldr	r3, [pc, #396]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ce:	d106      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80081d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081d6:	d102      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081d8:	4b5f      	ldr	r3, [pc, #380]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80081da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081dc:	e010      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081de:	4b5c      	ldr	r3, [pc, #368]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081ea:	d106      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80081ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081f2:	d102      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081f4:	4b59      	ldr	r3, [pc, #356]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f8:	e002      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081fe:	e2da      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008200:	e2d9      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008202:	4b57      	ldr	r3, [pc, #348]	@ (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008206:	e2d6      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800820c:	e2d3      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800820e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008212:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008216:	430b      	orrs	r3, r1
 8008218:	f040 80a7 	bne.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800821c:	4b4c      	ldr	r3, [pc, #304]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800821e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008220:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008224:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008228:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800822c:	d055      	beq.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008234:	f200 8096 	bhi.w	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800823e:	f000 8084 	beq.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008244:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008248:	f200 808c 	bhi.w	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800824c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008252:	d030      	beq.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800825a:	f200 8083 	bhi.w	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	2b00      	cmp	r3, #0
 8008262:	d004      	beq.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800826a:	d012      	beq.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800826c:	e07a      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800826e:	4b38      	ldr	r3, [pc, #224]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008276:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800827a:	d107      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800827c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fd63 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800828a:	e294      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008290:	e291      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008292:	4b2f      	ldr	r3, [pc, #188]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800829a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800829e:	d107      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082a0:	f107 0318 	add.w	r3, r7, #24
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 faa9 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ae:	e282      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b4:	e27f      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082b6:	4b26      	ldr	r3, [pc, #152]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082c2:	d107      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c4:	f107 030c 	add.w	r3, r7, #12
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fbeb 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d2:	e270      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d8:	e26d      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082da:	4b1d      	ldr	r3, [pc, #116]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d10c      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80082f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d109      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082f6:	4b16      	ldr	r3, [pc, #88]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	08db      	lsrs	r3, r3, #3
 80082fc:	f003 0303 	and.w	r3, r3, #3
 8008300:	4a14      	ldr	r2, [pc, #80]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008302:	fa22 f303 	lsr.w	r3, r2, r3
 8008306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008308:	e01e      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800830a:	4b11      	ldr	r3, [pc, #68]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008316:	d106      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800831e:	d102      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008320:	4b0d      	ldr	r3, [pc, #52]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008324:	e010      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008326:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800832e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008332:	d106      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008336:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800833a:	d102      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800833c:	4b07      	ldr	r3, [pc, #28]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008340:	e002      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008346:	e236      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008348:	e235      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800834a:	4b05      	ldr	r3, [pc, #20]	@ (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800834c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800834e:	e232      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008350:	58024400 	.word	0x58024400
 8008354:	03d09000 	.word	0x03d09000
 8008358:	003d0900 	.word	0x003d0900
 800835c:	02dc6c00 	.word	0x02dc6c00
 8008360:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008368:	e225      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800836a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800836e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008372:	430b      	orrs	r3, r1
 8008374:	f040 8085 	bne.w	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008378:	4b9c      	ldr	r3, [pc, #624]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800837a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800837c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008380:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008388:	d06b      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800838a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008390:	d874      	bhi.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008394:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008398:	d056      	beq.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083a0:	d86c      	bhi.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083a8:	d03b      	beq.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80083aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083b0:	d864      	bhi.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083b8:	d021      	beq.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083c0:	d85c      	bhi.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80083c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ce:	d004      	beq.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80083d0:	e054      	b.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80083d2:	f7fe fb5f 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 80083d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80083d8:	e1ed      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083da:	4b84      	ldr	r3, [pc, #528]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083e6:	d107      	bne.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e8:	f107 0318 	add.w	r3, r7, #24
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fa05 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083f6:	e1de      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083fc:	e1db      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083fe:	4b7b      	ldr	r3, [pc, #492]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800840a:	d107      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800840c:	f107 030c 	add.w	r3, r7, #12
 8008410:	4618      	mov	r0, r3
 8008412:	f000 fb47 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800841a:	e1cc      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008420:	e1c9      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008422:	4b72      	ldr	r3, [pc, #456]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0304 	and.w	r3, r3, #4
 800842a:	2b04      	cmp	r3, #4
 800842c:	d109      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800842e:	4b6f      	ldr	r3, [pc, #444]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	08db      	lsrs	r3, r3, #3
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	4a6d      	ldr	r2, [pc, #436]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008440:	e1b9      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008446:	e1b6      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008448:	4b68      	ldr	r3, [pc, #416]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008454:	d102      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008456:	4b67      	ldr	r3, [pc, #412]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800845a:	e1ac      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008460:	e1a9      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008462:	4b62      	ldr	r3, [pc, #392]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800846e:	d102      	bne.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008470:	4b61      	ldr	r3, [pc, #388]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008474:	e19f      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847a:	e19c      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008480:	e199      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008486:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800848a:	430b      	orrs	r3, r1
 800848c:	d173      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800848e:	4b57      	ldr	r3, [pc, #348]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008492:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008496:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800849e:	d02f      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084a6:	d863      	bhi.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80084ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084b4:	d012      	beq.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80084b6:	e05b      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084b8:	4b4c      	ldr	r3, [pc, #304]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084c4:	d107      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c6:	f107 0318 	add.w	r3, r7, #24
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f996 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d4:	e16f      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084da:	e16c      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084dc:	4b43      	ldr	r3, [pc, #268]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084e8:	d107      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ea:	f107 030c 	add.w	r3, r7, #12
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fad8 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f8:	e15d      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084fe:	e15a      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008500:	4b3a      	ldr	r3, [pc, #232]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008504:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008508:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800850a:	4b38      	ldr	r3, [pc, #224]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b04      	cmp	r3, #4
 8008514:	d10c      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008518:	2b00      	cmp	r3, #0
 800851a:	d109      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800851c:	4b33      	ldr	r3, [pc, #204]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	08db      	lsrs	r3, r3, #3
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	4a32      	ldr	r2, [pc, #200]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008528:	fa22 f303 	lsr.w	r3, r2, r3
 800852c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800852e:	e01e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008530:	4b2e      	ldr	r3, [pc, #184]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800853c:	d106      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800853e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008544:	d102      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008546:	4b2b      	ldr	r3, [pc, #172]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800854a:	e010      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800854c:	4b27      	ldr	r3, [pc, #156]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008558:	d106      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800855a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800855c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008560:	d102      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008562:	4b25      	ldr	r3, [pc, #148]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008566:	e002      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800856c:	e123      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800856e:	e122      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008574:	e11f      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800857e:	430b      	orrs	r3, r1
 8008580:	d13c      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008582:	4b1a      	ldr	r3, [pc, #104]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800858a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008598:	d012      	beq.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800859a:	e023      	b.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800859c:	4b13      	ldr	r3, [pc, #76]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085a8:	d107      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fbcc 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b8:	e0fd      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085be:	e0fa      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085c0:	4b0a      	ldr	r3, [pc, #40]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085cc:	d107      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ce:	f107 0318 	add.w	r3, r7, #24
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f912 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085dc:	e0eb      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e2:	e0e8      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e8:	e0e5      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80085ea:	bf00      	nop
 80085ec:	58024400 	.word	0x58024400
 80085f0:	03d09000 	.word	0x03d09000
 80085f4:	003d0900 	.word	0x003d0900
 80085f8:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80085fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008600:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008604:	430b      	orrs	r3, r1
 8008606:	f040 8085 	bne.w	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800860a:	4b6d      	ldr	r3, [pc, #436]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800860c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800860e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008612:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800861a:	d06b      	beq.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008622:	d874      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800862a:	d056      	beq.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008632:	d86c      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008636:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800863a:	d03b      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008642:	d864      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800864a:	d021      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800864c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008652:	d85c      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008656:	2b00      	cmp	r3, #0
 8008658:	d004      	beq.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800865a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008660:	d004      	beq.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008662:	e054      	b.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008664:	f000 f8b4 	bl	80087d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008668:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800866a:	e0a4      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800866c:	4b54      	ldr	r3, [pc, #336]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008678:	d107      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867a:	f107 0318 	add.w	r3, r7, #24
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f8bc 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008688:	e095      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868e:	e092      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008690:	4b4b      	ldr	r3, [pc, #300]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800869c:	d107      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800869e:	f107 030c 	add.w	r3, r7, #12
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f9fe 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	e083      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b2:	e080      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086b4:	4b42      	ldr	r3, [pc, #264]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d109      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c0:	4b3f      	ldr	r3, [pc, #252]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	08db      	lsrs	r3, r3, #3
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	4a3e      	ldr	r2, [pc, #248]	@ (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
 80086d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d2:	e070      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d8:	e06d      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086da:	4b39      	ldr	r3, [pc, #228]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e6:	d102      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80086e8:	4b37      	ldr	r3, [pc, #220]	@ (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ec:	e063      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f2:	e060      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086f4:	4b32      	ldr	r3, [pc, #200]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008700:	d102      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008702:	4b32      	ldr	r3, [pc, #200]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008706:	e056      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800870c:	e053      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008712:	e050      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008718:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800871c:	430b      	orrs	r3, r1
 800871e:	d148      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008720:	4b27      	ldr	r3, [pc, #156]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008724:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008728:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008730:	d02a      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008738:	d838      	bhi.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800873a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873c:	2b00      	cmp	r3, #0
 800873e:	d004      	beq.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008746:	d00d      	beq.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008748:	e030      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800874a:	4b1d      	ldr	r3, [pc, #116]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008756:	d102      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008758:	4b1c      	ldr	r3, [pc, #112]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800875a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800875c:	e02b      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008762:	e028      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008764:	4b16      	ldr	r3, [pc, #88]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800876c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008770:	d107      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fae8 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800877c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008780:	e019      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008786:	e016      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008788:	4b0d      	ldr	r3, [pc, #52]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008794:	d107      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008796:	f107 0318 	add.w	r3, r7, #24
 800879a:	4618      	mov	r0, r3
 800879c:	f000 f82e 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a4:	e007      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087aa:	e004      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087b0:	e001      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80087b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3740      	adds	r7, #64	@ 0x40
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	58024400 	.word	0x58024400
 80087c4:	03d09000 	.word	0x03d09000
 80087c8:	003d0900 	.word	0x003d0900
 80087cc:	02dc6c00 	.word	0x02dc6c00

080087d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087d4:	f7fe f92e 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 80087d8:	4602      	mov	r2, r0
 80087da:	4b06      	ldr	r3, [pc, #24]	@ (80087f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	091b      	lsrs	r3, r3, #4
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	4904      	ldr	r1, [pc, #16]	@ (80087f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087e6:	5ccb      	ldrb	r3, [r1, r3]
 80087e8:	f003 031f 	and.w	r3, r3, #31
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	58024400 	.word	0x58024400
 80087f8:	0801227c 	.word	0x0801227c

080087fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b089      	sub	sp, #36	@ 0x24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008804:	4ba1      	ldr	r3, [pc, #644]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800880e:	4b9f      	ldr	r3, [pc, #636]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008812:	0b1b      	lsrs	r3, r3, #12
 8008814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008818:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800881a:	4b9c      	ldr	r3, [pc, #624]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881e:	091b      	lsrs	r3, r3, #4
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008826:	4b99      	ldr	r3, [pc, #612]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882a:	08db      	lsrs	r3, r3, #3
 800882c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	fb02 f303 	mul.w	r3, r2, r3
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8111 	beq.w	8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b02      	cmp	r3, #2
 800884e:	f000 8083 	beq.w	8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b02      	cmp	r3, #2
 8008856:	f200 80a1 	bhi.w	800899c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d056      	beq.n	8008914 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008866:	e099      	b.n	800899c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008868:	4b88      	ldr	r3, [pc, #544]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b00      	cmp	r3, #0
 8008872:	d02d      	beq.n	80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008874:	4b85      	ldr	r3, [pc, #532]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	08db      	lsrs	r3, r3, #3
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	4a84      	ldr	r2, [pc, #528]	@ (8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008880:	fa22 f303 	lsr.w	r3, r2, r3
 8008884:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800889e:	4b7b      	ldr	r3, [pc, #492]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088ce:	e087      	b.n	80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e2:	4b6a      	ldr	r3, [pc, #424]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ea:	ee07 3a90 	vmov	s15, r3
 80088ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008912:	e065      	b.n	80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008926:	4b59      	ldr	r3, [pc, #356]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892e:	ee07 3a90 	vmov	s15, r3
 8008932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008936:	ed97 6a03 	vldr	s12, [r7, #12]
 800893a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800893e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800894a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800894e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008956:	e043      	b.n	80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008962:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800896a:	4b48      	ldr	r3, [pc, #288]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800896c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008972:	ee07 3a90 	vmov	s15, r3
 8008976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800897a:	ed97 6a03 	vldr	s12, [r7, #12]
 800897e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800898a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800898e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800899a:	e021      	b.n	80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ae:	4b37      	ldr	r3, [pc, #220]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089be:	ed97 6a03 	vldr	s12, [r7, #12]
 80089c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80089e0:	4b2a      	ldr	r3, [pc, #168]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e4:	0a5b      	lsrs	r3, r3, #9
 80089e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a06:	ee17 2a90 	vmov	r2, s15
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a12:	0c1b      	lsrs	r3, r3, #16
 8008a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a18:	ee07 3a90 	vmov	s15, r3
 8008a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a34:	ee17 2a90 	vmov	r2, s15
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a3c:	4b13      	ldr	r3, [pc, #76]	@ (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a40:	0e1b      	lsrs	r3, r3, #24
 8008a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a62:	ee17 2a90 	vmov	r2, s15
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a6a:	e008      	b.n	8008a7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	609a      	str	r2, [r3, #8]
}
 8008a7e:	bf00      	nop
 8008a80:	3724      	adds	r7, #36	@ 0x24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	03d09000 	.word	0x03d09000
 8008a94:	46000000 	.word	0x46000000
 8008a98:	4c742400 	.word	0x4c742400
 8008a9c:	4a742400 	.word	0x4a742400
 8008aa0:	4c371b00 	.word	0x4c371b00

08008aa4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b089      	sub	sp, #36	@ 0x24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008aac:	4ba1      	ldr	r3, [pc, #644]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab0:	f003 0303 	and.w	r3, r3, #3
 8008ab4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ab6:	4b9f      	ldr	r3, [pc, #636]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aba:	0d1b      	lsrs	r3, r3, #20
 8008abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ac0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac6:	0a1b      	lsrs	r3, r3, #8
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ace:	4b99      	ldr	r3, [pc, #612]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ad2:	08db      	lsrs	r3, r3, #3
 8008ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	fb02 f303 	mul.w	r3, r2, r3
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8111 	beq.w	8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	f000 8083 	beq.w	8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	f200 80a1 	bhi.w	8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d056      	beq.n	8008bbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b0e:	e099      	b.n	8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b10:	4b88      	ldr	r3, [pc, #544]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0320 	and.w	r3, r3, #32
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d02d      	beq.n	8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b1c:	4b85      	ldr	r3, [pc, #532]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	08db      	lsrs	r3, r3, #3
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	4a84      	ldr	r2, [pc, #528]	@ (8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b28:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	ee07 3a90 	vmov	s15, r3
 8008b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b46:	4b7b      	ldr	r3, [pc, #492]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b76:	e087      	b.n	8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bba:	e065      	b.n	8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bce:	4b59      	ldr	r3, [pc, #356]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bfe:	e043      	b.n	8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c12:	4b48      	ldr	r3, [pc, #288]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c42:	e021      	b.n	8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c56:	4b37      	ldr	r3, [pc, #220]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c88:	4b2a      	ldr	r3, [pc, #168]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8c:	0a5b      	lsrs	r3, r3, #9
 8008c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cae:	ee17 2a90 	vmov	r2, s15
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cba:	0c1b      	lsrs	r3, r3, #16
 8008cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cc0:	ee07 3a90 	vmov	s15, r3
 8008cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cdc:	ee17 2a90 	vmov	r2, s15
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ce4:	4b13      	ldr	r3, [pc, #76]	@ (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce8:	0e1b      	lsrs	r3, r3, #24
 8008cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d0a:	ee17 2a90 	vmov	r2, s15
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d12:	e008      	b.n	8008d26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	609a      	str	r2, [r3, #8]
}
 8008d26:	bf00      	nop
 8008d28:	3724      	adds	r7, #36	@ 0x24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	58024400 	.word	0x58024400
 8008d38:	03d09000 	.word	0x03d09000
 8008d3c:	46000000 	.word	0x46000000
 8008d40:	4c742400 	.word	0x4c742400
 8008d44:	4a742400 	.word	0x4a742400
 8008d48:	4c371b00 	.word	0x4c371b00

08008d4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b089      	sub	sp, #36	@ 0x24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d54:	4ba0      	ldr	r3, [pc, #640]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d58:	f003 0303 	and.w	r3, r3, #3
 8008d5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008d5e:	4b9e      	ldr	r3, [pc, #632]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d62:	091b      	lsrs	r3, r3, #4
 8008d64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d6a:	4b9b      	ldr	r3, [pc, #620]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d74:	4b98      	ldr	r3, [pc, #608]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d78:	08db      	lsrs	r3, r3, #3
 8008d7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	fb02 f303 	mul.w	r3, r2, r3
 8008d84:	ee07 3a90 	vmov	s15, r3
 8008d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 8111 	beq.w	8008fba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	f000 8083 	beq.w	8008ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	f200 80a1 	bhi.w	8008eea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d056      	beq.n	8008e62 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008db4:	e099      	b.n	8008eea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008db6:	4b88      	ldr	r3, [pc, #544]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d02d      	beq.n	8008e1e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dc2:	4b85      	ldr	r3, [pc, #532]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	08db      	lsrs	r3, r3, #3
 8008dc8:	f003 0303 	and.w	r3, r3, #3
 8008dcc:	4a83      	ldr	r2, [pc, #524]	@ (8008fdc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008dce:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	ee07 3a90 	vmov	s15, r3
 8008de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dec:	4b7a      	ldr	r3, [pc, #488]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df4:	ee07 3a90 	vmov	s15, r3
 8008df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e00:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e18:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e1c:	e087      	b.n	8008f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	ee07 3a90 	vmov	s15, r3
 8008e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e28:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e30:	4b69      	ldr	r3, [pc, #420]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e38:	ee07 3a90 	vmov	s15, r3
 8008e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e44:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e60:	e065      	b.n	8008f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	ee07 3a90 	vmov	s15, r3
 8008e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e74:	4b58      	ldr	r3, [pc, #352]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e7c:	ee07 3a90 	vmov	s15, r3
 8008e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e88:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ea4:	e043      	b.n	8008f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008fec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb8:	4b47      	ldr	r3, [pc, #284]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec0:	ee07 3a90 	vmov	s15, r3
 8008ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ecc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ee8:	e021      	b.n	8008f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008efc:	4b36      	ldr	r3, [pc, #216]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f04:	ee07 3a90 	vmov	s15, r3
 8008f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f10:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f2c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f32:	0a5b      	lsrs	r3, r3, #9
 8008f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f38:	ee07 3a90 	vmov	s15, r3
 8008f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f54:	ee17 2a90 	vmov	r2, s15
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f82:	ee17 2a90 	vmov	r2, s15
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f8a:	4b13      	ldr	r3, [pc, #76]	@ (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f8e:	0e1b      	lsrs	r3, r3, #24
 8008f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f94:	ee07 3a90 	vmov	s15, r3
 8008f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb0:	ee17 2a90 	vmov	r2, s15
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008fb8:	e008      	b.n	8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	3724      	adds	r7, #36	@ 0x24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	58024400 	.word	0x58024400
 8008fdc:	03d09000 	.word	0x03d09000
 8008fe0:	46000000 	.word	0x46000000
 8008fe4:	4c742400 	.word	0x4c742400
 8008fe8:	4a742400 	.word	0x4a742400
 8008fec:	4c371b00 	.word	0x4c371b00

08008ff0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ffe:	4b53      	ldr	r3, [pc, #332]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	2b03      	cmp	r3, #3
 8009008:	d101      	bne.n	800900e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e099      	b.n	8009142 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800900e:	4b4f      	ldr	r3, [pc, #316]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a4e      	ldr	r2, [pc, #312]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009014:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800901a:	f7fa fee9 	bl	8003df0 <HAL_GetTick>
 800901e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009020:	e008      	b.n	8009034 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009022:	f7fa fee5 	bl	8003df0 <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d901      	bls.n	8009034 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e086      	b.n	8009142 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009034:	4b45      	ldr	r3, [pc, #276]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1f0      	bne.n	8009022 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009040:	4b42      	ldr	r3, [pc, #264]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009044:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	031b      	lsls	r3, r3, #12
 800904e:	493f      	ldr	r1, [pc, #252]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009050:	4313      	orrs	r3, r2
 8009052:	628b      	str	r3, [r1, #40]	@ 0x28
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	3b01      	subs	r3, #1
 800905a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	3b01      	subs	r3, #1
 8009064:	025b      	lsls	r3, r3, #9
 8009066:	b29b      	uxth	r3, r3
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	3b01      	subs	r3, #1
 8009070:	041b      	lsls	r3, r3, #16
 8009072:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	3b01      	subs	r3, #1
 800907e:	061b      	lsls	r3, r3, #24
 8009080:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009084:	4931      	ldr	r1, [pc, #196]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009086:	4313      	orrs	r3, r2
 8009088:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800908a:	4b30      	ldr	r3, [pc, #192]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 800908c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	492d      	ldr	r1, [pc, #180]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009098:	4313      	orrs	r3, r2
 800909a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800909c:	4b2b      	ldr	r3, [pc, #172]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 800909e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a0:	f023 0220 	bic.w	r2, r3, #32
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	4928      	ldr	r1, [pc, #160]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80090ae:	4b27      	ldr	r3, [pc, #156]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b2:	4a26      	ldr	r2, [pc, #152]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090b4:	f023 0310 	bic.w	r3, r3, #16
 80090b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80090ba:	4b24      	ldr	r3, [pc, #144]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090be:	4b24      	ldr	r3, [pc, #144]	@ (8009150 <RCCEx_PLL2_Config+0x160>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	69d2      	ldr	r2, [r2, #28]
 80090c6:	00d2      	lsls	r2, r2, #3
 80090c8:	4920      	ldr	r1, [pc, #128]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80090ce:	4b1f      	ldr	r3, [pc, #124]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d2:	4a1e      	ldr	r2, [pc, #120]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090d4:	f043 0310 	orr.w	r3, r3, #16
 80090d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d106      	bne.n	80090ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090e0:	4b1a      	ldr	r3, [pc, #104]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e4:	4a19      	ldr	r2, [pc, #100]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090ec:	e00f      	b.n	800910e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d106      	bne.n	8009102 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090f4:	4b15      	ldr	r3, [pc, #84]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f8:	4a14      	ldr	r2, [pc, #80]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 80090fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009100:	e005      	b.n	800910e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009102:	4b12      	ldr	r3, [pc, #72]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009106:	4a11      	ldr	r2, [pc, #68]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009108:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800910c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800910e:	4b0f      	ldr	r3, [pc, #60]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a0e      	ldr	r2, [pc, #56]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009114:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800911a:	f7fa fe69 	bl	8003df0 <HAL_GetTick>
 800911e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009120:	e008      	b.n	8009134 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009122:	f7fa fe65 	bl	8003df0 <HAL_GetTick>
 8009126:	4602      	mov	r2, r0
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	2b02      	cmp	r3, #2
 800912e:	d901      	bls.n	8009134 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e006      	b.n	8009142 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009134:	4b05      	ldr	r3, [pc, #20]	@ (800914c <RCCEx_PLL2_Config+0x15c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0f0      	beq.n	8009122 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	58024400 	.word	0x58024400
 8009150:	ffff0007 	.word	0xffff0007

08009154 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009162:	4b53      	ldr	r3, [pc, #332]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b03      	cmp	r3, #3
 800916c:	d101      	bne.n	8009172 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e099      	b.n	80092a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009172:	4b4f      	ldr	r3, [pc, #316]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a4e      	ldr	r2, [pc, #312]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800917c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800917e:	f7fa fe37 	bl	8003df0 <HAL_GetTick>
 8009182:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009184:	e008      	b.n	8009198 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009186:	f7fa fe33 	bl	8003df0 <HAL_GetTick>
 800918a:	4602      	mov	r2, r0
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	2b02      	cmp	r3, #2
 8009192:	d901      	bls.n	8009198 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e086      	b.n	80092a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009198:	4b45      	ldr	r3, [pc, #276]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1f0      	bne.n	8009186 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80091a4:	4b42      	ldr	r3, [pc, #264]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	051b      	lsls	r3, r3, #20
 80091b2:	493f      	ldr	r1, [pc, #252]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	3b01      	subs	r3, #1
 80091be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	025b      	lsls	r3, r3, #9
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	431a      	orrs	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	041b      	lsls	r3, r3, #16
 80091d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80091da:	431a      	orrs	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	061b      	lsls	r3, r3, #24
 80091e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80091e8:	4931      	ldr	r1, [pc, #196]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80091ee:	4b30      	ldr	r3, [pc, #192]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	492d      	ldr	r1, [pc, #180]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009200:	4b2b      	ldr	r3, [pc, #172]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009204:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	4928      	ldr	r1, [pc, #160]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800920e:	4313      	orrs	r3, r2
 8009210:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009212:	4b27      	ldr	r3, [pc, #156]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009216:	4a26      	ldr	r2, [pc, #152]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800921c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800921e:	4b24      	ldr	r3, [pc, #144]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009222:	4b24      	ldr	r3, [pc, #144]	@ (80092b4 <RCCEx_PLL3_Config+0x160>)
 8009224:	4013      	ands	r3, r2
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	69d2      	ldr	r2, [r2, #28]
 800922a:	00d2      	lsls	r2, r2, #3
 800922c:	4920      	ldr	r1, [pc, #128]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800922e:	4313      	orrs	r3, r2
 8009230:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009232:	4b1f      	ldr	r3, [pc, #124]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009236:	4a1e      	ldr	r2, [pc, #120]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800923c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d106      	bne.n	8009252 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009244:	4b1a      	ldr	r3, [pc, #104]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009248:	4a19      	ldr	r2, [pc, #100]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800924a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800924e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009250:	e00f      	b.n	8009272 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d106      	bne.n	8009266 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009258:	4b15      	ldr	r3, [pc, #84]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800925a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925c:	4a14      	ldr	r2, [pc, #80]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800925e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009262:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009264:	e005      	b.n	8009272 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009266:	4b12      	ldr	r3, [pc, #72]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926a:	4a11      	ldr	r2, [pc, #68]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800926c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009270:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009272:	4b0f      	ldr	r3, [pc, #60]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a0e      	ldr	r2, [pc, #56]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800927c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800927e:	f7fa fdb7 	bl	8003df0 <HAL_GetTick>
 8009282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009284:	e008      	b.n	8009298 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009286:	f7fa fdb3 	bl	8003df0 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e006      	b.n	80092a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009298:	4b05      	ldr	r3, [pc, #20]	@ (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0f0      	beq.n	8009286 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	58024400 	.word	0x58024400
 80092b4:	ffff0007 	.word	0xffff0007

080092b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	@ 0x28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e075      	b.n	80093b6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d105      	bne.n	80092e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7fa f821 	bl	8003324 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2204      	movs	r2, #4
 80092e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f868 	bl	80093c0 <HAL_SD_InitCard>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e05d      	b.n	80093b6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80092fa:	f107 0308 	add.w	r3, r7, #8
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fdb5 	bl	8009e70 <HAL_SD_GetCardStatus>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e052      	b.n	80093b6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009310:	7e3b      	ldrb	r3, [r7, #24]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009316:	7e7b      	ldrb	r3, [r7, #25]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009320:	2b01      	cmp	r3, #1
 8009322:	d10a      	bne.n	800933a <HAL_SD_Init+0x82>
 8009324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009326:	2b00      	cmp	r3, #0
 8009328:	d102      	bne.n	8009330 <HAL_SD_Init+0x78>
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d004      	beq.n	800933a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009336:	659a      	str	r2, [r3, #88]	@ 0x58
 8009338:	e00b      	b.n	8009352 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933e:	2b01      	cmp	r3, #1
 8009340:	d104      	bne.n	800934c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009348:	659a      	str	r2, [r3, #88]	@ 0x58
 800934a:	e002      	b.n	8009352 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fe73 	bl	800a044 <HAL_SD_ConfigWideBusOperation>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e026      	b.n	80093b6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009368:	f7fa fd42 	bl	8003df0 <HAL_GetTick>
 800936c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800936e:	e011      	b.n	8009394 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009370:	f7fa fd3e 	bl	8003df0 <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937e:	d109      	bne.n	8009394 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009386:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e010      	b.n	80093b6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 ff67 	bl	800a268 <HAL_SD_GetCardState>
 800939a:	4603      	mov	r3, r0
 800939c:	2b04      	cmp	r3, #4
 800939e:	d1e7      	bne.n	8009370 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3728      	adds	r7, #40	@ 0x28
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80093c0:	b590      	push	{r4, r7, lr}
 80093c2:	b08d      	sub	sp, #52	@ 0x34
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80093d0:	2300      	movs	r3, #0
 80093d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80093d4:	2300      	movs	r3, #0
 80093d6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80093d8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80093dc:	f04f 0100 	mov.w	r1, #0
 80093e0:	f7fe fd24 	bl	8007e2c <HAL_RCCEx_GetPeriphCLKFreq>
 80093e4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80093e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d109      	bne.n	8009400 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80093fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e070      	b.n	80094e2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009402:	0a1b      	lsrs	r3, r3, #8
 8009404:	4a39      	ldr	r2, [pc, #228]	@ (80094ec <HAL_SD_InitCard+0x12c>)
 8009406:	fba2 2303 	umull	r2, r3, r2, r3
 800940a:	091b      	lsrs	r3, r3, #4
 800940c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681c      	ldr	r4, [r3, #0]
 8009412:	466a      	mov	r2, sp
 8009414:	f107 0318 	add.w	r3, r7, #24
 8009418:	e893 0003 	ldmia.w	r3, {r0, r1}
 800941c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009420:	f107 030c 	add.w	r3, r7, #12
 8009424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009426:	4620      	mov	r0, r4
 8009428:	f003 fade 	bl	800c9e8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4618      	mov	r0, r3
 8009432:	f003 fb21 	bl	800ca78 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009442:	fbb2 f3f3 	udiv	r3, r2, r3
 8009446:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800944e:	4a28      	ldr	r2, [pc, #160]	@ (80094f0 <HAL_SD_InitCard+0x130>)
 8009450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009452:	fbb2 f3f3 	udiv	r3, r2, r3
 8009456:	3301      	adds	r3, #1
 8009458:	4618      	mov	r0, r3
 800945a:	f7fa fcd5 	bl	8003e08 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fff0 	bl	800a444 <SD_PowerON>
 8009464:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	431a      	orrs	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e02e      	b.n	80094e2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 ff0f 	bl	800a2a8 <SD_InitCard>
 800948a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00b      	beq.n	80094aa <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	431a      	orrs	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e01b      	b.n	80094e2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80094b2:	4618      	mov	r0, r3
 80094b4:	f003 fb76 	bl	800cba4 <SDMMC_CmdBlockLength>
 80094b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00f      	beq.n	80094e0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a0b      	ldr	r2, [pc, #44]	@ (80094f4 <HAL_SD_InitCard+0x134>)
 80094c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e000      	b.n	80094e2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	372c      	adds	r7, #44	@ 0x2c
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd90      	pop	{r4, r7, pc}
 80094ea:	bf00      	nop
 80094ec:	014f8b59 	.word	0x014f8b59
 80094f0:	00012110 	.word	0x00012110
 80094f4:	1fe00fff 	.word	0x1fe00fff

080094f8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b092      	sub	sp, #72	@ 0x48
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009506:	f7fa fc73 	bl	8003df0 <HAL_GetTick>
 800950a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d107      	bne.n	800952a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800951e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e167      	b.n	80097fa <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b01      	cmp	r3, #1
 8009534:	f040 815a 	bne.w	80097ec <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800953e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	441a      	add	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009548:	429a      	cmp	r2, r3
 800954a:	d907      	bls.n	800955c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009550:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e14e      	b.n	80097fa <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2203      	movs	r2, #3
 8009560:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2200      	movs	r2, #0
 800956a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009570:	2b01      	cmp	r3, #1
 8009572:	d002      	beq.n	800957a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009576:	025b      	lsls	r3, r3, #9
 8009578:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800957a:	f04f 33ff 	mov.w	r3, #4294967295
 800957e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	025b      	lsls	r3, r3, #9
 8009584:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009586:	2390      	movs	r3, #144	@ 0x90
 8009588:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800958a:	2302      	movs	r3, #2
 800958c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800958e:	2300      	movs	r3, #0
 8009590:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009592:	2300      	movs	r3, #0
 8009594:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f107 0214 	add.w	r2, r7, #20
 800959e:	4611      	mov	r1, r2
 80095a0:	4618      	mov	r0, r3
 80095a2:	f003 fad3 	bl	800cb4c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68da      	ldr	r2, [r3, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095b4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d90a      	bls.n	80095d2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2202      	movs	r2, #2
 80095c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80095c8:	4618      	mov	r0, r3
 80095ca:	f003 fb31 	bl	800cc30 <SDMMC_CmdReadMultiBlock>
 80095ce:	6478      	str	r0, [r7, #68]	@ 0x44
 80095d0:	e009      	b.n	80095e6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2201      	movs	r2, #1
 80095d6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80095de:	4618      	mov	r0, r3
 80095e0:	f003 fb03 	bl	800cbea <SDMMC_CmdReadSingleBlock>
 80095e4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80095e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d012      	beq.n	8009612 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a84      	ldr	r2, [pc, #528]	@ (8009804 <HAL_SD_ReadBlocks+0x30c>)
 80095f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095fa:	431a      	orrs	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e0f3      	b.n	80097fa <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009616:	e058      	b.n	80096ca <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800961e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d033      	beq.n	800968e <HAL_SD_ReadBlocks+0x196>
 8009626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009628:	2b1f      	cmp	r3, #31
 800962a:	d930      	bls.n	800968e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800962c:	2300      	movs	r3, #0
 800962e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009630:	e027      	b.n	8009682 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f003 fa00 	bl	800ca3c <SDMMC_ReadFIFO>
 800963c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800963e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009640:	b2da      	uxtb	r2, r3
 8009642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009644:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009648:	3301      	adds	r3, #1
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	b2da      	uxtb	r2, r3
 8009652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009654:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009658:	3301      	adds	r3, #1
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800965c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965e:	0c1b      	lsrs	r3, r3, #16
 8009660:	b2da      	uxtb	r2, r3
 8009662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009664:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009668:	3301      	adds	r3, #1
 800966a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800966c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966e:	0e1b      	lsrs	r3, r3, #24
 8009670:	b2da      	uxtb	r2, r3
 8009672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009674:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009678:	3301      	adds	r3, #1
 800967a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800967c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800967e:	3301      	adds	r3, #1
 8009680:	643b      	str	r3, [r7, #64]	@ 0x40
 8009682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009684:	2b07      	cmp	r3, #7
 8009686:	d9d4      	bls.n	8009632 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800968a:	3b20      	subs	r3, #32
 800968c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800968e:	f7fa fbaf 	bl	8003df0 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800969a:	429a      	cmp	r2, r3
 800969c:	d902      	bls.n	80096a4 <HAL_SD_ReadBlocks+0x1ac>
 800969e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d112      	bne.n	80096ca <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a56      	ldr	r2, [pc, #344]	@ (8009804 <HAL_SD_ReadBlocks+0x30c>)
 80096aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e097      	b.n	80097fa <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096d0:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d09f      	beq.n	8009618 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096e6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d022      	beq.n	800973c <HAL_SD_ReadBlocks+0x244>
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d91f      	bls.n	800973c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009700:	2b03      	cmp	r3, #3
 8009702:	d01b      	beq.n	800973c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	f003 fafb 	bl	800cd04 <SDMMC_CmdStopTransfer>
 800970e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009712:	2b00      	cmp	r3, #0
 8009714:	d012      	beq.n	800973c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a3a      	ldr	r2, [pc, #232]	@ (8009804 <HAL_SD_ReadBlocks+0x30c>)
 800971c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009724:	431a      	orrs	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e05e      	b.n	80097fa <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009742:	f003 0308 	and.w	r3, r3, #8
 8009746:	2b00      	cmp	r3, #0
 8009748:	d012      	beq.n	8009770 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a2d      	ldr	r2, [pc, #180]	@ (8009804 <HAL_SD_ReadBlocks+0x30c>)
 8009750:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009756:	f043 0208 	orr.w	r2, r3, #8
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e044      	b.n	80097fa <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d012      	beq.n	80097a4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a20      	ldr	r2, [pc, #128]	@ (8009804 <HAL_SD_ReadBlocks+0x30c>)
 8009784:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800978a:	f043 0202 	orr.w	r2, r3, #2
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e02a      	b.n	80097fa <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d012      	beq.n	80097d8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a13      	ldr	r2, [pc, #76]	@ (8009804 <HAL_SD_ReadBlocks+0x30c>)
 80097b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097be:	f043 0220 	orr.w	r2, r3, #32
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e010      	b.n	80097fa <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009808 <HAL_SD_ReadBlocks+0x310>)
 80097de:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	e006      	b.n	80097fa <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
  }
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3748      	adds	r7, #72	@ 0x48
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	1fe00fff 	.word	0x1fe00fff
 8009808:	18000f3a 	.word	0x18000f3a

0800980c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b092      	sub	sp, #72	@ 0x48
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800981a:	f7fa fae9 	bl	8003df0 <HAL_GetTick>
 800981e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d107      	bne.n	800983e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009832:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e16b      	b.n	8009b16 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b01      	cmp	r3, #1
 8009848:	f040 815e 	bne.w	8009b08 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009852:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	441a      	add	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800985c:	429a      	cmp	r2, r3
 800985e:	d907      	bls.n	8009870 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009864:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e152      	b.n	8009b16 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2203      	movs	r2, #3
 8009874:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2200      	movs	r2, #0
 800987e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009884:	2b01      	cmp	r3, #1
 8009886:	d002      	beq.n	800988e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988a:	025b      	lsls	r3, r3, #9
 800988c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800988e:	f04f 33ff 	mov.w	r3, #4294967295
 8009892:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	025b      	lsls	r3, r3, #9
 8009898:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800989a:	2390      	movs	r3, #144	@ 0x90
 800989c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800989e:	2300      	movs	r3, #0
 80098a0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f107 0218 	add.w	r2, r7, #24
 80098b2:	4611      	mov	r1, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f003 f949 	bl	800cb4c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098c8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d90a      	bls.n	80098e6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80098dc:	4618      	mov	r0, r3
 80098de:	f003 f9ed 	bl	800ccbc <SDMMC_CmdWriteMultiBlock>
 80098e2:	6478      	str	r0, [r7, #68]	@ 0x44
 80098e4:	e009      	b.n	80098fa <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2210      	movs	r2, #16
 80098ea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80098f2:	4618      	mov	r0, r3
 80098f4:	f003 f9bf 	bl	800cc76 <SDMMC_CmdWriteSingleBlock>
 80098f8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80098fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d012      	beq.n	8009926 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a86      	ldr	r2, [pc, #536]	@ (8009b20 <HAL_SD_WriteBlocks+0x314>)
 8009906:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800990c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800990e:	431a      	orrs	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e0f7      	b.n	8009b16 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800992a:	e05c      	b.n	80099e6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d037      	beq.n	80099aa <HAL_SD_WriteBlocks+0x19e>
 800993a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800993c:	2b1f      	cmp	r3, #31
 800993e:	d934      	bls.n	80099aa <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8009940:	2300      	movs	r3, #0
 8009942:	643b      	str	r3, [r7, #64]	@ 0x40
 8009944:	e02b      	b.n	800999e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8009946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800994c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800994e:	3301      	adds	r3, #1
 8009950:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	021a      	lsls	r2, r3, #8
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	4313      	orrs	r3, r2
 800995c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800995e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009960:	3301      	adds	r3, #1
 8009962:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	041a      	lsls	r2, r3, #16
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	4313      	orrs	r3, r2
 800996e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009972:	3301      	adds	r3, #1
 8009974:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	061a      	lsls	r2, r3, #24
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	4313      	orrs	r3, r2
 8009980:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009984:	3301      	adds	r3, #1
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f107 0214 	add.w	r2, r7, #20
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f003 f85f 	bl	800ca56 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800999a:	3301      	adds	r3, #1
 800999c:	643b      	str	r3, [r7, #64]	@ 0x40
 800999e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099a0:	2b07      	cmp	r3, #7
 80099a2:	d9d0      	bls.n	8009946 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80099a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a6:	3b20      	subs	r3, #32
 80099a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80099aa:	f7fa fa21 	bl	8003df0 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d902      	bls.n	80099c0 <HAL_SD_WriteBlocks+0x1b4>
 80099ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d112      	bne.n	80099e6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a56      	ldr	r2, [pc, #344]	@ (8009b20 <HAL_SD_WriteBlocks+0x314>)
 80099c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ce:	431a      	orrs	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e097      	b.n	8009b16 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ec:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d09b      	beq.n	800992c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68da      	ldr	r2, [r3, #12]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a02:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d022      	beq.n	8009a58 <HAL_SD_WriteBlocks+0x24c>
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d91f      	bls.n	8009a58 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d01b      	beq.n	8009a58 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f003 f96d 	bl	800cd04 <SDMMC_CmdStopTransfer>
 8009a2a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d012      	beq.n	8009a58 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a3a      	ldr	r2, [pc, #232]	@ (8009b20 <HAL_SD_WriteBlocks+0x314>)
 8009a38:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a40:	431a      	orrs	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e05e      	b.n	8009b16 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d012      	beq.n	8009a8c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8009b20 <HAL_SD_WriteBlocks+0x314>)
 8009a6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a72:	f043 0208 	orr.w	r2, r3, #8
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e044      	b.n	8009b16 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d012      	beq.n	8009ac0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a20      	ldr	r2, [pc, #128]	@ (8009b20 <HAL_SD_WriteBlocks+0x314>)
 8009aa0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa6:	f043 0202 	orr.w	r2, r3, #2
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e02a      	b.n	8009b16 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ac6:	f003 0310 	and.w	r3, r3, #16
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d012      	beq.n	8009af4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a13      	ldr	r2, [pc, #76]	@ (8009b20 <HAL_SD_WriteBlocks+0x314>)
 8009ad4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ada:	f043 0210 	orr.w	r2, r3, #16
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e010      	b.n	8009b16 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a0a      	ldr	r2, [pc, #40]	@ (8009b24 <HAL_SD_WriteBlocks+0x318>)
 8009afa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	e006      	b.n	8009b16 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b0c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
  }
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3748      	adds	r7, #72	@ 0x48
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	1fe00fff 	.word	0x1fe00fff
 8009b24:	18000f3a 	.word	0x18000f3a

08009b28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b36:	0f9b      	lsrs	r3, r3, #30
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b42:	0e9b      	lsrs	r3, r3, #26
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	f003 030f 	and.w	r3, r3, #15
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b54:	0e1b      	lsrs	r3, r3, #24
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b66:	0c1b      	lsrs	r3, r3, #16
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b72:	0a1b      	lsrs	r3, r3, #8
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b88:	0d1b      	lsrs	r3, r3, #20
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b94:	0c1b      	lsrs	r3, r3, #16
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	f003 030f 	and.w	r3, r3, #15
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ba6:	0bdb      	lsrs	r3, r3, #15
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bb8:	0b9b      	lsrs	r3, r3, #14
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bca:	0b5b      	lsrs	r3, r3, #13
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bdc:	0b1b      	lsrs	r3, r3, #12
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2200      	movs	r2, #0
 8009bee:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d163      	bne.n	8009cc0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bfc:	009a      	lsls	r2, r3, #2
 8009bfe:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009c02:	4013      	ands	r3, r2
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009c08:	0f92      	lsrs	r2, r2, #30
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c14:	0edb      	lsrs	r3, r3, #27
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c26:	0e1b      	lsrs	r3, r3, #24
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	f003 0307 	and.w	r3, r3, #7
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c38:	0d5b      	lsrs	r3, r3, #21
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f003 0307 	and.w	r3, r3, #7
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c4a:	0c9b      	lsrs	r3, r3, #18
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	f003 0307 	and.w	r3, r3, #7
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c5c:	0bdb      	lsrs	r3, r3, #15
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	7e1b      	ldrb	r3, [r3, #24]
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	3302      	adds	r3, #2
 8009c80:	2201      	movs	r2, #1
 8009c82:	fa02 f303 	lsl.w	r3, r2, r3
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009c8a:	fb03 f202 	mul.w	r2, r3, r2
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	7a1b      	ldrb	r3, [r3, #8]
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f003 030f 	and.w	r3, r3, #15
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	409a      	lsls	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009cac:	0a52      	lsrs	r2, r2, #9
 8009cae:	fb03 f202 	mul.w	r2, r3, r2
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8009cbe:	e031      	b.n	8009d24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d11d      	bne.n	8009d04 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ccc:	041b      	lsls	r3, r3, #16
 8009cce:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cd6:	0c1b      	lsrs	r3, r3, #16
 8009cd8:	431a      	orrs	r2, r3
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	029a      	lsls	r2, r3, #10
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	655a      	str	r2, [r3, #84]	@ 0x54
 8009d02:	e00f      	b.n	8009d24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a58      	ldr	r2, [pc, #352]	@ (8009e6c <HAL_SD_GetCardCSD+0x344>)
 8009d0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e09d      	b.n	8009e60 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d28:	0b9b      	lsrs	r3, r3, #14
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d3a:	09db      	lsrs	r3, r3, #7
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d5c:	0fdb      	lsrs	r3, r3, #31
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d68:	0f5b      	lsrs	r3, r3, #29
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f003 0303 	and.w	r3, r3, #3
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d7a:	0e9b      	lsrs	r3, r3, #26
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0307 	and.w	r3, r3, #7
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d8c:	0d9b      	lsrs	r3, r3, #22
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 030f 	and.w	r3, r3, #15
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d9e:	0d5b      	lsrs	r3, r3, #21
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dba:	0c1b      	lsrs	r3, r3, #16
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dce:	0bdb      	lsrs	r3, r3, #15
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009de2:	0b9b      	lsrs	r3, r3, #14
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009df6:	0b5b      	lsrs	r3, r3, #13
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e0a:	0b1b      	lsrs	r3, r3, #12
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e1e:	0a9b      	lsrs	r3, r3, #10
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	f003 0303 	and.w	r3, r3, #3
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	f003 0303 	and.w	r3, r3, #3
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e46:	085b      	lsrs	r3, r3, #1
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	1fe00fff 	.word	0x1fe00fff

08009e70 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b094      	sub	sp, #80	@ 0x50
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	d101      	bne.n	8009e90 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e0a7      	b.n	8009fe0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009e90:	f107 0308 	add.w	r3, r7, #8
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fb62 	bl	800a560 <SD_SendSDStatus>
 8009e9c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d011      	beq.n	8009ec8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8009fe8 <HAL_SD_GetCardStatus+0x178>)
 8009eaa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009ec6:	e070      	b.n	8009faa <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	099b      	lsrs	r3, r3, #6
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	f003 0303 	and.w	r3, r3, #3
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	095b      	lsrs	r3, r3, #5
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	0e1b      	lsrs	r3, r3, #24
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	4313      	orrs	r3, r2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	061a      	lsls	r2, r3, #24
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	021b      	lsls	r3, r3, #8
 8009f0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009f0e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	0a1b      	lsrs	r3, r3, #8
 8009f14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009f18:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	0e1b      	lsrs	r3, r3, #24
 8009f1e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	0a1b      	lsrs	r3, r3, #8
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	0d1b      	lsrs	r3, r3, #20
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	f003 030f 	and.w	r3, r3, #15
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	0c1b      	lsrs	r3, r3, #16
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	0a9b      	lsrs	r3, r3, #10
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	0a1b      	lsrs	r3, r3, #8
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	f003 0303 	and.w	r3, r3, #3
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	091b      	lsrs	r3, r3, #4
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f003 030f 	and.w	r3, r3, #15
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	0e1b      	lsrs	r3, r3, #24
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f002 fdf6 	bl	800cba4 <SDMMC_CmdBlockLength>
 8009fb8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00d      	beq.n	8009fdc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a08      	ldr	r2, [pc, #32]	@ (8009fe8 <HAL_SD_GetCardStatus+0x178>)
 8009fc6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fcc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009fdc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3750      	adds	r7, #80	@ 0x50
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	1fe00fff 	.word	0x1fe00fff

08009fec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a044:	b590      	push	{r4, r7, lr}
 800a046:	b08d      	sub	sp, #52	@ 0x34
 800a048:	af02      	add	r7, sp, #8
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2203      	movs	r2, #3
 800a058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a060:	2b03      	cmp	r3, #3
 800a062:	d02e      	beq.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a06a:	d106      	bne.n	800a07a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a070:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	635a      	str	r2, [r3, #52]	@ 0x34
 800a078:	e029      	b.n	800a0ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a080:	d10a      	bne.n	800a098 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fb64 	bl	800a750 <SD_WideBus_Enable>
 800a088:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	431a      	orrs	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	635a      	str	r2, [r3, #52]	@ 0x34
 800a096:	e01a      	b.n	800a0ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10a      	bne.n	800a0b4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fba1 	bl	800a7e6 <SD_WideBus_Disable>
 800a0a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	635a      	str	r2, [r3, #52]	@ 0x34
 800a0b2:	e00c      	b.n	800a0ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	635a      	str	r2, [r3, #52]	@ 0x34
 800a0c0:	e005      	b.n	800a0ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d007      	beq.n	800a0e6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a5f      	ldr	r2, [pc, #380]	@ (800a258 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a0dc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a0e4:	e096      	b.n	800a214 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a0e6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a0ea:	f04f 0100 	mov.w	r1, #0
 800a0ee:	f7fd fe9d 	bl	8007e2c <HAL_RCCEx_GetPeriphCLKFreq>
 800a0f2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 8083 	beq.w	800a202 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695a      	ldr	r2, [r3, #20]
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	4950      	ldr	r1, [pc, #320]	@ (800a25c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a11a:	fba1 1303 	umull	r1, r3, r1, r3
 800a11e:	0e1b      	lsrs	r3, r3, #24
 800a120:	429a      	cmp	r2, r3
 800a122:	d303      	bcc.n	800a12c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	e05a      	b.n	800a1e2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a134:	d103      	bne.n	800a13e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	61bb      	str	r3, [r7, #24]
 800a13c:	e051      	b.n	800a1e2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a146:	d126      	bne.n	800a196 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10e      	bne.n	800a16e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	4a43      	ldr	r2, [pc, #268]	@ (800a260 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d906      	bls.n	800a166 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	4a40      	ldr	r2, [pc, #256]	@ (800a25c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a15c:	fba2 2303 	umull	r2, r3, r2, r3
 800a160:	0e5b      	lsrs	r3, r3, #25
 800a162:	61bb      	str	r3, [r7, #24]
 800a164:	e03d      	b.n	800a1e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	61bb      	str	r3, [r7, #24]
 800a16c:	e039      	b.n	800a1e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	fbb2 f3f3 	udiv	r3, r2, r3
 800a17a:	4a39      	ldr	r2, [pc, #228]	@ (800a260 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d906      	bls.n	800a18e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	4a36      	ldr	r2, [pc, #216]	@ (800a25c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a184:	fba2 2303 	umull	r2, r3, r2, r3
 800a188:	0e5b      	lsrs	r3, r3, #25
 800a18a:	61bb      	str	r3, [r7, #24]
 800a18c:	e029      	b.n	800a1e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	61bb      	str	r3, [r7, #24]
 800a194:	e025      	b.n	800a1e2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10e      	bne.n	800a1bc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	4a30      	ldr	r2, [pc, #192]	@ (800a264 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d906      	bls.n	800a1b4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	4a2c      	ldr	r2, [pc, #176]	@ (800a25c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ae:	0e1b      	lsrs	r3, r3, #24
 800a1b0:	61bb      	str	r3, [r7, #24]
 800a1b2:	e016      	b.n	800a1e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	61bb      	str	r3, [r7, #24]
 800a1ba:	e012      	b.n	800a1e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c8:	4a26      	ldr	r2, [pc, #152]	@ (800a264 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d906      	bls.n	800a1dc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	4a22      	ldr	r2, [pc, #136]	@ (800a25c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d6:	0e1b      	lsrs	r3, r3, #24
 800a1d8:	61bb      	str	r3, [r7, #24]
 800a1da:	e002      	b.n	800a1e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681c      	ldr	r4, [r3, #0]
 800a1e6:	466a      	mov	r2, sp
 800a1e8:	f107 0314 	add.w	r3, r7, #20
 800a1ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a1f0:	e882 0003 	stmia.w	r2, {r0, r1}
 800a1f4:	f107 0308 	add.w	r3, r7, #8
 800a1f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f002 fbf4 	bl	800c9e8 <SDMMC_Init>
 800a200:	e008      	b.n	800a214 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a206:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a21c:	4618      	mov	r0, r3
 800a21e:	f002 fcc1 	bl	800cba4 <SDMMC_CmdBlockLength>
 800a222:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00c      	beq.n	800a244 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a0a      	ldr	r2, [pc, #40]	@ (800a258 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a230:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a24c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a250:	4618      	mov	r0, r3
 800a252:	372c      	adds	r7, #44	@ 0x2c
 800a254:	46bd      	mov	sp, r7
 800a256:	bd90      	pop	{r4, r7, pc}
 800a258:	1fe00fff 	.word	0x1fe00fff
 800a25c:	55e63b89 	.word	0x55e63b89
 800a260:	02faf080 	.word	0x02faf080
 800a264:	017d7840 	.word	0x017d7840

0800a268 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a274:	f107 030c 	add.w	r3, r7, #12
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fa40 	bl	800a700 <SD_SendStatus>
 800a280:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	431a      	orrs	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	0a5b      	lsrs	r3, r3, #9
 800a298:	f003 030f 	and.w	r3, r3, #15
 800a29c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a29e:	693b      	ldr	r3, [r7, #16]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b090      	sub	sp, #64	@ 0x40
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a2b4:	f7f9 fd9c 	bl	8003df0 <HAL_GetTick>
 800a2b8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f002 fbeb 	bl	800ca9a <SDMMC_GetPowerState>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a2ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a2ce:	e0b5      	b.n	800a43c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d4:	2b03      	cmp	r3, #3
 800a2d6:	d02e      	beq.n	800a336 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f002 fe36 	bl	800cf4e <SDMMC_CmdSendCID>
 800a2e2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <SD_InitCard+0x46>
    {
      return errorstate;
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ec:	e0a6      	b.n	800a43c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f002 fc16 	bl	800cb26 <SDMMC_GetResponse>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2104      	movs	r1, #4
 800a306:	4618      	mov	r0, r3
 800a308:	f002 fc0d 	bl	800cb26 <SDMMC_GetResponse>
 800a30c:	4602      	mov	r2, r0
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2108      	movs	r1, #8
 800a318:	4618      	mov	r0, r3
 800a31a:	f002 fc04 	bl	800cb26 <SDMMC_GetResponse>
 800a31e:	4602      	mov	r2, r0
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	210c      	movs	r1, #12
 800a32a:	4618      	mov	r0, r3
 800a32c:	f002 fbfb 	bl	800cb26 <SDMMC_GetResponse>
 800a330:	4602      	mov	r2, r0
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d01d      	beq.n	800a37a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a33e:	e019      	b.n	800a374 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f107 020a 	add.w	r2, r7, #10
 800a348:	4611      	mov	r1, r2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f002 fe3e 	bl	800cfcc <SDMMC_CmdSetRelAdd>
 800a350:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <SD_InitCard+0xb4>
      {
        return errorstate;
 800a358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35a:	e06f      	b.n	800a43c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a35c:	f7f9 fd48 	bl	8003df0 <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d902      	bls.n	800a374 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a36e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a372:	e063      	b.n	800a43c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a374:	897b      	ldrh	r3, [r7, #10]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0e2      	beq.n	800a340 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d036      	beq.n	800a3f0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a382:	897b      	ldrh	r3, [r7, #10]
 800a384:	461a      	mov	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a392:	041b      	lsls	r3, r3, #16
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f002 fdf8 	bl	800cf8c <SDMMC_CmdSendCSD>
 800a39c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <SD_InitCard+0x100>
    {
      return errorstate;
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a6:	e049      	b.n	800a43c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f002 fbb9 	bl	800cb26 <SDMMC_GetResponse>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2104      	movs	r1, #4
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f002 fbb0 	bl	800cb26 <SDMMC_GetResponse>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2108      	movs	r1, #8
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f002 fba7 	bl	800cb26 <SDMMC_GetResponse>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	210c      	movs	r1, #12
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f002 fb9e 	bl	800cb26 <SDMMC_GetResponse>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2104      	movs	r1, #4
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f002 fb95 	bl	800cb26 <SDMMC_GetResponse>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	0d1a      	lsrs	r2, r3, #20
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a404:	f107 030c 	add.w	r3, r7, #12
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff fb8c 	bl	8009b28 <HAL_SD_GetCardCSD>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a416:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a41a:	e00f      	b.n	800a43c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a424:	041b      	lsls	r3, r3, #16
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f002 fca7 	bl	800cd7c <SDMMC_CmdSelDesel>
 800a42e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <SD_InitCard+0x192>
  {
    return errorstate;
 800a436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a438:	e000      	b.n	800a43c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3740      	adds	r7, #64	@ 0x40
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f002 fcb0 	bl	800cdc2 <SDMMC_CmdGoIdleState>
 800a462:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	e072      	b.n	800a554 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f002 fcc3 	bl	800cdfe <SDMMC_CmdOperCond>
 800a478:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a480:	d10d      	bne.n	800a49e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f002 fc98 	bl	800cdc2 <SDMMC_CmdGoIdleState>
 800a492:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <SD_PowerON+0x60>
    {
      return errorstate;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	e05a      	b.n	800a554 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d137      	bne.n	800a51c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f002 fcc3 	bl	800ce3e <SDMMC_CmdAppCommand>
 800a4b8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d02d      	beq.n	800a51c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a4c4:	e046      	b.n	800a554 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f002 fcb6 	bl	800ce3e <SDMMC_CmdAppCommand>
 800a4d2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <SD_PowerON+0x9a>
    {
      return errorstate;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	e03a      	b.n	800a554 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	491e      	ldr	r1, [pc, #120]	@ (800a55c <SD_PowerON+0x118>)
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f002 fccd 	bl	800ce84 <SDMMC_CmdAppOperCommand>
 800a4ea:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a4f6:	e02d      	b.n	800a554 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f002 fb11 	bl	800cb26 <SDMMC_GetResponse>
 800a504:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	0fdb      	lsrs	r3, r3, #31
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d101      	bne.n	800a512 <SD_PowerON+0xce>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <SD_PowerON+0xd0>
 800a512:	2300      	movs	r3, #0
 800a514:	613b      	str	r3, [r7, #16]

    count++;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3301      	adds	r3, #1
 800a51a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a522:	4293      	cmp	r3, r2
 800a524:	d802      	bhi.n	800a52c <SD_PowerON+0xe8>
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d0cc      	beq.n	800a4c6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a532:	4293      	cmp	r3, r2
 800a534:	d902      	bls.n	800a53c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a536:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a53a:	e00b      	b.n	800a554 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3718      	adds	r7, #24
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	c1100000 	.word	0xc1100000

0800a560 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b08c      	sub	sp, #48	@ 0x30
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a56a:	f7f9 fc41 	bl	8003df0 <HAL_GetTick>
 800a56e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2100      	movs	r1, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f002 fad3 	bl	800cb26 <SDMMC_GetResponse>
 800a580:	4603      	mov	r3, r0
 800a582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a58a:	d102      	bne.n	800a592 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a58c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a590:	e0b0      	b.n	800a6f4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2140      	movs	r1, #64	@ 0x40
 800a598:	4618      	mov	r0, r3
 800a59a:	f002 fb03 	bl	800cba4 <SDMMC_CmdBlockLength>
 800a59e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d005      	beq.n	800a5b2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	e0a0      	b.n	800a6f4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ba:	041b      	lsls	r3, r3, #16
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f002 fc3d 	bl	800ce3e <SDMMC_CmdAppCommand>
 800a5c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d005      	beq.n	800a5d8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	e08d      	b.n	800a6f4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5dc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a5de:	2340      	movs	r3, #64	@ 0x40
 800a5e0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a5e2:	2360      	movs	r3, #96	@ 0x60
 800a5e4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f107 0208 	add.w	r2, r7, #8
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f002 faa5 	bl	800cb4c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4618      	mov	r0, r3
 800a608:	f002 fd25 	bl	800d056 <SDMMC_CmdStatusRegister>
 800a60c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d02b      	beq.n	800a66c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	e069      	b.n	800a6f4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d013      	beq.n	800a656 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a62e:	2300      	movs	r3, #0
 800a630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a632:	e00d      	b.n	800a650 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4618      	mov	r0, r3
 800a63a:	f002 f9ff 	bl	800ca3c <SDMMC_ReadFIFO>
 800a63e:	4602      	mov	r2, r0
 800a640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a642:	601a      	str	r2, [r3, #0]
        pData++;
 800a644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a646:	3304      	adds	r3, #4
 800a648:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800a64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a64c:	3301      	adds	r3, #1
 800a64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a652:	2b07      	cmp	r3, #7
 800a654:	d9ee      	bls.n	800a634 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a656:	f7f9 fbcb 	bl	8003df0 <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a664:	d102      	bne.n	800a66c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a666:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a66a:	e043      	b.n	800a6f4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a672:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0d2      	beq.n	800a620 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a680:	f003 0308 	and.w	r3, r3, #8
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a688:	2308      	movs	r3, #8
 800a68a:	e033      	b.n	800a6f4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a69a:	2302      	movs	r3, #2
 800a69c:	e02a      	b.n	800a6f4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d017      	beq.n	800a6dc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a6ac:	2320      	movs	r3, #32
 800a6ae:	e021      	b.n	800a6f4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f002 f9c1 	bl	800ca3c <SDMMC_ReadFIFO>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6be:	601a      	str	r2, [r3, #0]
    pData++;
 800a6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a6c6:	f7f9 fb93 	bl	8003df0 <HAL_GetTick>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d102      	bne.n	800a6dc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a6d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6da:	e00b      	b.n	800a6f4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e2      	bne.n	800a6b0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a03      	ldr	r2, [pc, #12]	@ (800a6fc <SD_SendSDStatus+0x19c>)
 800a6f0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3730      	adds	r7, #48	@ 0x30
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	18000f3a 	.word	0x18000f3a

0800a700 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d102      	bne.n	800a716 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a710:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a714:	e018      	b.n	800a748 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	4619      	mov	r1, r3
 800a722:	4610      	mov	r0, r2
 800a724:	f002 fc74 	bl	800d010 <SDMMC_CmdSendStatus>
 800a728:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	e009      	b.n	800a748 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2100      	movs	r1, #0
 800a73a:	4618      	mov	r0, r3
 800a73c:	f002 f9f3 	bl	800cb26 <SDMMC_GetResponse>
 800a740:	4602      	mov	r2, r0
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a758:	2300      	movs	r3, #0
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	2300      	movs	r3, #0
 800a75e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2100      	movs	r1, #0
 800a766:	4618      	mov	r0, r3
 800a768:	f002 f9dd 	bl	800cb26 <SDMMC_GetResponse>
 800a76c:	4603      	mov	r3, r0
 800a76e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a772:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a776:	d102      	bne.n	800a77e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a778:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a77c:	e02f      	b.n	800a7de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a77e:	f107 030c 	add.w	r3, r7, #12
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f879 	bl	800a87c <SD_FindSCR>
 800a78a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d001      	beq.n	800a796 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	e023      	b.n	800a7de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d01c      	beq.n	800a7da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a8:	041b      	lsls	r3, r3, #16
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f002 fb46 	bl	800ce3e <SDMMC_CmdAppCommand>
 800a7b2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	e00f      	b.n	800a7de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2102      	movs	r1, #2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f002 fb7d 	bl	800cec4 <SDMMC_CmdBusWidth>
 800a7ca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	e003      	b.n	800a7de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	e001      	b.n	800a7de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a7da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b086      	sub	sp, #24
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f002 f992 	bl	800cb26 <SDMMC_GetResponse>
 800a802:	4603      	mov	r3, r0
 800a804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a808:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a80c:	d102      	bne.n	800a814 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a80e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a812:	e02f      	b.n	800a874 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a814:	f107 030c 	add.w	r3, r7, #12
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f82e 	bl	800a87c <SD_FindSCR>
 800a820:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	e023      	b.n	800a874 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d01c      	beq.n	800a870 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a83e:	041b      	lsls	r3, r3, #16
 800a840:	4619      	mov	r1, r3
 800a842:	4610      	mov	r0, r2
 800a844:	f002 fafb 	bl	800ce3e <SDMMC_CmdAppCommand>
 800a848:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	e00f      	b.n	800a874 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2100      	movs	r1, #0
 800a85a:	4618      	mov	r0, r3
 800a85c:	f002 fb32 	bl	800cec4 <SDMMC_CmdBusWidth>
 800a860:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	e003      	b.n	800a874 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	e001      	b.n	800a874 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a870:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a874:	4618      	mov	r0, r3
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08e      	sub	sp, #56	@ 0x38
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a886:	f7f9 fab3 	bl	8003df0 <HAL_GetTick>
 800a88a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a890:	2300      	movs	r3, #0
 800a892:	60bb      	str	r3, [r7, #8]
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2108      	movs	r1, #8
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f002 f97e 	bl	800cba4 <SDMMC_CmdBlockLength>
 800a8a8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b2:	e0ad      	b.n	800aa10 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8bc:	041b      	lsls	r3, r3, #16
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	f002 fabc 	bl	800ce3e <SDMMC_CmdAppCommand>
 800a8c6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d0:	e09e      	b.n	800aa10 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a8d8:	2308      	movs	r3, #8
 800a8da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a8dc:	2330      	movs	r3, #48	@ 0x30
 800a8de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f107 0210 	add.w	r2, r7, #16
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f002 f928 	bl	800cb4c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4618      	mov	r0, r3
 800a902:	f002 fb02 	bl	800cf0a <SDMMC_CmdSendSCR>
 800a906:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d027      	beq.n	800a95e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a910:	e07e      	b.n	800aa10 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d113      	bne.n	800a948 <SD_FindSCR+0xcc>
 800a920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a922:	2b00      	cmp	r3, #0
 800a924:	d110      	bne.n	800a948 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f002 f886 	bl	800ca3c <SDMMC_ReadFIFO>
 800a930:	4603      	mov	r3, r0
 800a932:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4618      	mov	r0, r3
 800a93a:	f002 f87f 	bl	800ca3c <SDMMC_ReadFIFO>
 800a93e:	4603      	mov	r3, r0
 800a940:	60fb      	str	r3, [r7, #12]
      index++;
 800a942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a944:	3301      	adds	r3, #1
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a948:	f7f9 fa52 	bl	8003df0 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d102      	bne.n	800a95e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a958:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a95c:	e058      	b.n	800aa10 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a964:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a968:	4013      	ands	r3, r2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0d1      	beq.n	800a912 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a974:	f003 0308 	and.w	r3, r3, #8
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d005      	beq.n	800a988 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2208      	movs	r2, #8
 800a982:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a984:	2308      	movs	r3, #8
 800a986:	e043      	b.n	800aa10 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2202      	movs	r2, #2
 800a99c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a99e:	2302      	movs	r3, #2
 800a9a0:	e036      	b.n	800aa10 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9a8:	f003 0320 	and.w	r3, r3, #32
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d005      	beq.n	800a9bc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a9b8:	2320      	movs	r3, #32
 800a9ba:	e029      	b.n	800aa10 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a15      	ldr	r2, [pc, #84]	@ (800aa18 <SD_FindSCR+0x19c>)
 800a9c2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	061a      	lsls	r2, r3, #24
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	021b      	lsls	r3, r3, #8
 800a9cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a9d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	0a1b      	lsrs	r3, r3, #8
 800a9d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a9da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	0e1b      	lsrs	r3, r3, #24
 800a9e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e4:	601a      	str	r2, [r3, #0]
    scr++;
 800a9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	061a      	lsls	r2, r3, #24
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	021b      	lsls	r3, r3, #8
 800a9f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a9f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	0a1b      	lsrs	r3, r3, #8
 800a9fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800aa02:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	0e1b      	lsrs	r3, r3, #24
 800aa08:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800aa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3738      	adds	r7, #56	@ 0x38
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	18000f3a 	.word	0x18000f3a

0800aa1c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e10f      	b.n	800ac4e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a87      	ldr	r2, [pc, #540]	@ (800ac58 <HAL_SPI_Init+0x23c>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d00f      	beq.n	800aa5e <HAL_SPI_Init+0x42>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a86      	ldr	r2, [pc, #536]	@ (800ac5c <HAL_SPI_Init+0x240>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d00a      	beq.n	800aa5e <HAL_SPI_Init+0x42>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a84      	ldr	r2, [pc, #528]	@ (800ac60 <HAL_SPI_Init+0x244>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d005      	beq.n	800aa5e <HAL_SPI_Init+0x42>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	2b0f      	cmp	r3, #15
 800aa58:	d901      	bls.n	800aa5e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e0f7      	b.n	800ac4e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f900 	bl	800ac64 <SPI_GetPacketSize>
 800aa64:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a7b      	ldr	r2, [pc, #492]	@ (800ac58 <HAL_SPI_Init+0x23c>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d00c      	beq.n	800aa8a <HAL_SPI_Init+0x6e>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a79      	ldr	r2, [pc, #484]	@ (800ac5c <HAL_SPI_Init+0x240>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d007      	beq.n	800aa8a <HAL_SPI_Init+0x6e>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a78      	ldr	r2, [pc, #480]	@ (800ac60 <HAL_SPI_Init+0x244>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d002      	beq.n	800aa8a <HAL_SPI_Init+0x6e>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b08      	cmp	r3, #8
 800aa88:	d811      	bhi.n	800aaae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa8e:	4a72      	ldr	r2, [pc, #456]	@ (800ac58 <HAL_SPI_Init+0x23c>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d009      	beq.n	800aaa8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a70      	ldr	r2, [pc, #448]	@ (800ac5c <HAL_SPI_Init+0x240>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d004      	beq.n	800aaa8 <HAL_SPI_Init+0x8c>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a6f      	ldr	r2, [pc, #444]	@ (800ac60 <HAL_SPI_Init+0x244>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d104      	bne.n	800aab2 <HAL_SPI_Init+0x96>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b10      	cmp	r3, #16
 800aaac:	d901      	bls.n	800aab2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e0cd      	b.n	800ac4e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d106      	bne.n	800aacc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7f8 fcba 	bl	8003440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0201 	bic.w	r2, r2, #1
 800aae2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800aaee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aaf8:	d119      	bne.n	800ab2e <HAL_SPI_Init+0x112>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab02:	d103      	bne.n	800ab0c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d008      	beq.n	800ab1e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10c      	bne.n	800ab2e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ab18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab1c:	d107      	bne.n	800ab2e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ab2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00f      	beq.n	800ab5a <HAL_SPI_Init+0x13e>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	2b06      	cmp	r3, #6
 800ab40:	d90b      	bls.n	800ab5a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	430a      	orrs	r2, r1
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	e007      	b.n	800ab6a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	69da      	ldr	r2, [r3, #28]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab72:	431a      	orrs	r2, r3
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	431a      	orrs	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7c:	ea42 0103 	orr.w	r1, r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68da      	ldr	r2, [r3, #12]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab94:	431a      	orrs	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	431a      	orrs	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	431a      	orrs	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	431a      	orrs	r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	431a      	orrs	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	431a      	orrs	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abbe:	431a      	orrs	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	431a      	orrs	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abca:	ea42 0103 	orr.w	r1, r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d113      	bne.n	800ac0a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800abf4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac08:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f022 0201 	bic.w	r2, r2, #1
 800ac18:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	430a      	orrs	r2, r1
 800ac3a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	40013000 	.word	0x40013000
 800ac5c:	40003800 	.word	0x40003800
 800ac60:	40003c00 	.word	0x40003c00

0800ac64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac70:	095b      	lsrs	r3, r3, #5
 800ac72:	3301      	adds	r3, #1
 800ac74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	3307      	adds	r3, #7
 800ac82:	08db      	lsrs	r3, r3, #3
 800ac84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e042      	b.n	800ad32 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7f8 fd12 	bl	80036e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2224      	movs	r2, #36	@ 0x24
 800acc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0201 	bic.w	r2, r2, #1
 800acda:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f001 fafd 	bl	800c2e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fc8e 	bl	800b60c <UART_SetConfig>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d101      	bne.n	800acfa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e01b      	b.n	800ad32 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ad08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ad18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f042 0201 	orr.w	r2, r2, #1
 800ad28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 fb7c 	bl	800c428 <UART_CheckIdleState>
 800ad30:	4603      	mov	r3, r0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b08a      	sub	sp, #40	@ 0x28
 800ad3e:	af02      	add	r7, sp, #8
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	603b      	str	r3, [r7, #0]
 800ad46:	4613      	mov	r3, r2
 800ad48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad50:	2b20      	cmp	r3, #32
 800ad52:	d17b      	bne.n	800ae4c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <HAL_UART_Transmit+0x26>
 800ad5a:	88fb      	ldrh	r3, [r7, #6]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e074      	b.n	800ae4e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2221      	movs	r2, #33	@ 0x21
 800ad70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad74:	f7f9 f83c 	bl	8003df0 <HAL_GetTick>
 800ad78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	88fa      	ldrh	r2, [r7, #6]
 800ad7e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	88fa      	ldrh	r2, [r7, #6]
 800ad86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad92:	d108      	bne.n	800ada6 <HAL_UART_Transmit+0x6c>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	61bb      	str	r3, [r7, #24]
 800ada4:	e003      	b.n	800adae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800adaa:	2300      	movs	r3, #0
 800adac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800adae:	e030      	b.n	800ae12 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	2200      	movs	r2, #0
 800adb8:	2180      	movs	r1, #128	@ 0x80
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f001 fbde 	bl	800c57c <UART_WaitOnFlagUntilTimeout>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d005      	beq.n	800add2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2220      	movs	r2, #32
 800adca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e03d      	b.n	800ae4e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10b      	bne.n	800adf0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	461a      	mov	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ade6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	3302      	adds	r3, #2
 800adec:	61bb      	str	r3, [r7, #24]
 800adee:	e007      	b.n	800ae00 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	781a      	ldrb	r2, [r3, #0]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	3301      	adds	r3, #1
 800adfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1c8      	bne.n	800adb0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2200      	movs	r2, #0
 800ae26:	2140      	movs	r1, #64	@ 0x40
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f001 fba7 	bl	800c57c <UART_WaitOnFlagUntilTimeout>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2220      	movs	r2, #32
 800ae38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e006      	b.n	800ae4e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e000      	b.n	800ae4e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ae4c:	2302      	movs	r3, #2
  }
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b0ba      	sub	sp, #232	@ 0xe8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ae82:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ae86:	4013      	ands	r3, r2
 800ae88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ae8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d11b      	bne.n	800aecc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae98:	f003 0320 	and.w	r3, r3, #32
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d015      	beq.n	800aecc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aea4:	f003 0320 	and.w	r3, r3, #32
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d105      	bne.n	800aeb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aeac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aeb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d009      	beq.n	800aecc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f000 8377 	beq.w	800b5b0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
      }
      return;
 800aeca:	e371      	b.n	800b5b0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 8123 	beq.w	800b11c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aed6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aeda:	4b8d      	ldr	r3, [pc, #564]	@ (800b110 <HAL_UART_IRQHandler+0x2b8>)
 800aedc:	4013      	ands	r3, r2
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d106      	bne.n	800aef0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aee6:	4b8b      	ldr	r3, [pc, #556]	@ (800b114 <HAL_UART_IRQHandler+0x2bc>)
 800aee8:	4013      	ands	r3, r2
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 8116 	beq.w	800b11c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d011      	beq.n	800af20 <HAL_UART_IRQHandler+0xc8>
 800aefc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2201      	movs	r2, #1
 800af0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af16:	f043 0201 	orr.w	r2, r3, #1
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af24:	f003 0302 	and.w	r3, r3, #2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d011      	beq.n	800af50 <HAL_UART_IRQHandler+0xf8>
 800af2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00b      	beq.n	800af50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2202      	movs	r2, #2
 800af3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af46:	f043 0204 	orr.w	r2, r3, #4
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d011      	beq.n	800af80 <HAL_UART_IRQHandler+0x128>
 800af5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00b      	beq.n	800af80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2204      	movs	r2, #4
 800af6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af76:	f043 0202 	orr.w	r2, r3, #2
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af84:	f003 0308 	and.w	r3, r3, #8
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d017      	beq.n	800afbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800af8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af90:	f003 0320 	and.w	r3, r3, #32
 800af94:	2b00      	cmp	r3, #0
 800af96:	d105      	bne.n	800afa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800af98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800af9c:	4b5c      	ldr	r3, [pc, #368]	@ (800b110 <HAL_UART_IRQHandler+0x2b8>)
 800af9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00b      	beq.n	800afbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2208      	movs	r2, #8
 800afaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb2:	f043 0208 	orr.w	r2, r3, #8
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800afbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d012      	beq.n	800afee <HAL_UART_IRQHandler+0x196>
 800afc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00c      	beq.n	800afee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800afdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afe4:	f043 0220 	orr.w	r2, r3, #32
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f000 82dd 	beq.w	800b5b4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800affa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b00      	cmp	r3, #0
 800b004:	d013      	beq.n	800b02e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b00a:	f003 0320 	and.w	r3, r3, #32
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d105      	bne.n	800b01e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d007      	beq.n	800b02e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b034:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b042:	2b40      	cmp	r3, #64	@ 0x40
 800b044:	d005      	beq.n	800b052 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b04a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d054      	beq.n	800b0fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f001 fb00 	bl	800c658 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b062:	2b40      	cmp	r3, #64	@ 0x40
 800b064:	d146      	bne.n	800b0f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3308      	adds	r3, #8
 800b06c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b07c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3308      	adds	r3, #8
 800b08e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b092:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b09e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b0aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1d9      	bne.n	800b066 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d017      	beq.n	800b0ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0c2:	4a15      	ldr	r2, [pc, #84]	@ (800b118 <HAL_UART_IRQHandler+0x2c0>)
 800b0c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7f9 fb65 	bl	800479c <HAL_DMA_Abort_IT>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d019      	beq.n	800b10c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0ea:	e00f      	b.n	800b10c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fa77 	bl	800b5e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f2:	e00b      	b.n	800b10c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fa73 	bl	800b5e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0fa:	e007      	b.n	800b10c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fa6f 	bl	800b5e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b10a:	e253      	b.n	800b5b4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b10c:	bf00      	nop
    return;
 800b10e:	e251      	b.n	800b5b4 <HAL_UART_IRQHandler+0x75c>
 800b110:	10000001 	.word	0x10000001
 800b114:	04000120 	.word	0x04000120
 800b118:	0800c725 	.word	0x0800c725

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b120:	2b01      	cmp	r3, #1
 800b122:	f040 81e7 	bne.w	800b4f4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b12a:	f003 0310 	and.w	r3, r3, #16
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f000 81e0 	beq.w	800b4f4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b138:	f003 0310 	and.w	r3, r3, #16
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 81d9 	beq.w	800b4f4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2210      	movs	r2, #16
 800b148:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b154:	2b40      	cmp	r3, #64	@ 0x40
 800b156:	f040 8151 	bne.w	800b3fc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a96      	ldr	r2, [pc, #600]	@ (800b3bc <HAL_UART_IRQHandler+0x564>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d068      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a93      	ldr	r2, [pc, #588]	@ (800b3c0 <HAL_UART_IRQHandler+0x568>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d061      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a91      	ldr	r2, [pc, #580]	@ (800b3c4 <HAL_UART_IRQHandler+0x56c>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d05a      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a8e      	ldr	r2, [pc, #568]	@ (800b3c8 <HAL_UART_IRQHandler+0x570>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d053      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a8c      	ldr	r2, [pc, #560]	@ (800b3cc <HAL_UART_IRQHandler+0x574>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d04c      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a89      	ldr	r2, [pc, #548]	@ (800b3d0 <HAL_UART_IRQHandler+0x578>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d045      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a87      	ldr	r2, [pc, #540]	@ (800b3d4 <HAL_UART_IRQHandler+0x57c>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d03e      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a84      	ldr	r2, [pc, #528]	@ (800b3d8 <HAL_UART_IRQHandler+0x580>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d037      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a82      	ldr	r2, [pc, #520]	@ (800b3dc <HAL_UART_IRQHandler+0x584>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d030      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a7f      	ldr	r2, [pc, #508]	@ (800b3e0 <HAL_UART_IRQHandler+0x588>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d029      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a7d      	ldr	r2, [pc, #500]	@ (800b3e4 <HAL_UART_IRQHandler+0x58c>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d022      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a7a      	ldr	r2, [pc, #488]	@ (800b3e8 <HAL_UART_IRQHandler+0x590>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d01b      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a78      	ldr	r2, [pc, #480]	@ (800b3ec <HAL_UART_IRQHandler+0x594>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d014      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a75      	ldr	r2, [pc, #468]	@ (800b3f0 <HAL_UART_IRQHandler+0x598>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d00d      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a73      	ldr	r2, [pc, #460]	@ (800b3f4 <HAL_UART_IRQHandler+0x59c>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d006      	beq.n	800b23a <HAL_UART_IRQHandler+0x3e2>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a70      	ldr	r2, [pc, #448]	@ (800b3f8 <HAL_UART_IRQHandler+0x5a0>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d106      	bne.n	800b248 <HAL_UART_IRQHandler+0x3f0>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	b29b      	uxth	r3, r3
 800b246:	e005      	b.n	800b254 <HAL_UART_IRQHandler+0x3fc>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	b29b      	uxth	r3, r3
 800b254:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 81ab 	beq.w	800b5b8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b268:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b26c:	429a      	cmp	r2, r3
 800b26e:	f080 81a3 	bcs.w	800b5b8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b278:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b288:	f000 8087 	beq.w	800b39a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b294:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b298:	e853 3f00 	ldrex	r3, [r3]
 800b29c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b2a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b2b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b2ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b2c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b2c6:	e841 2300 	strex	r3, r2, [r1]
 800b2ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b2ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1da      	bne.n	800b28c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3308      	adds	r3, #8
 800b2dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2e0:	e853 3f00 	ldrex	r3, [r3]
 800b2e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b2e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2e8:	f023 0301 	bic.w	r3, r3, #1
 800b2ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b2fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b2fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b300:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b302:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b30c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e1      	bne.n	800b2d6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3308      	adds	r3, #8
 800b318:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3308      	adds	r3, #8
 800b332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b336:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b338:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b33c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e3      	bne.n	800b312 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2220      	movs	r2, #32
 800b34e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b360:	e853 3f00 	ldrex	r3, [r3]
 800b364:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b368:	f023 0310 	bic.w	r3, r3, #16
 800b36c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b37a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b37c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b382:	e841 2300 	strex	r3, r2, [r1]
 800b386:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1e4      	bne.n	800b358 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b394:	4618      	mov	r0, r3
 800b396:	f7f8 fee3 	bl	8004160 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2202      	movs	r2, #2
 800b39e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f91d 	bl	800b5f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3ba:	e0fd      	b.n	800b5b8 <HAL_UART_IRQHandler+0x760>
 800b3bc:	40020010 	.word	0x40020010
 800b3c0:	40020028 	.word	0x40020028
 800b3c4:	40020040 	.word	0x40020040
 800b3c8:	40020058 	.word	0x40020058
 800b3cc:	40020070 	.word	0x40020070
 800b3d0:	40020088 	.word	0x40020088
 800b3d4:	400200a0 	.word	0x400200a0
 800b3d8:	400200b8 	.word	0x400200b8
 800b3dc:	40020410 	.word	0x40020410
 800b3e0:	40020428 	.word	0x40020428
 800b3e4:	40020440 	.word	0x40020440
 800b3e8:	40020458 	.word	0x40020458
 800b3ec:	40020470 	.word	0x40020470
 800b3f0:	40020488 	.word	0x40020488
 800b3f4:	400204a0 	.word	0x400204a0
 800b3f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b408:	b29b      	uxth	r3, r3
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b416:	b29b      	uxth	r3, r3
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 80cf 	beq.w	800b5bc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b41e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80ca 	beq.w	800b5bc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b430:	e853 3f00 	ldrex	r3, [r3]
 800b434:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b43c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	461a      	mov	r2, r3
 800b446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b44a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b44c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b450:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b452:	e841 2300 	strex	r3, r2, [r1]
 800b456:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1e4      	bne.n	800b428 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3308      	adds	r3, #8
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b468:	e853 3f00 	ldrex	r3, [r3]
 800b46c:	623b      	str	r3, [r7, #32]
   return(result);
 800b46e:	6a3a      	ldr	r2, [r7, #32]
 800b470:	4b55      	ldr	r3, [pc, #340]	@ (800b5c8 <HAL_UART_IRQHandler+0x770>)
 800b472:	4013      	ands	r3, r2
 800b474:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3308      	adds	r3, #8
 800b47e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b482:	633a      	str	r2, [r7, #48]	@ 0x30
 800b484:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b48a:	e841 2300 	strex	r3, r2, [r1]
 800b48e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1e3      	bne.n	800b45e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2220      	movs	r2, #32
 800b49a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	e853 3f00 	ldrex	r3, [r3]
 800b4b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f023 0310 	bic.w	r3, r3, #16
 800b4be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b4cc:	61fb      	str	r3, [r7, #28]
 800b4ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d0:	69b9      	ldr	r1, [r7, #24]
 800b4d2:	69fa      	ldr	r2, [r7, #28]
 800b4d4:	e841 2300 	strex	r3, r2, [r1]
 800b4d8:	617b      	str	r3, [r7, #20]
   return(result);
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1e4      	bne.n	800b4aa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f881 	bl	800b5f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4f2:	e063      	b.n	800b5bc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00e      	beq.n	800b51e <HAL_UART_IRQHandler+0x6c6>
 800b500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d008      	beq.n	800b51e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f001 f945 	bl	800c7a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b51c:	e051      	b.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b526:	2b00      	cmp	r3, #0
 800b528:	d014      	beq.n	800b554 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b52e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b532:	2b00      	cmp	r3, #0
 800b534:	d105      	bne.n	800b542 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b53a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d008      	beq.n	800b554 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b546:	2b00      	cmp	r3, #0
 800b548:	d03a      	beq.n	800b5c0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	4798      	blx	r3
    }
    return;
 800b552:	e035      	b.n	800b5c0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d009      	beq.n	800b574 <HAL_UART_IRQHandler+0x71c>
 800b560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d003      	beq.n	800b574 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f001 f8ef 	bl	800c750 <UART_EndTransmit_IT>
    return;
 800b572:	e026      	b.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b578:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d009      	beq.n	800b594 <HAL_UART_IRQHandler+0x73c>
 800b580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b584:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d003      	beq.n	800b594 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f001 f91e 	bl	800c7ce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b592:	e016      	b.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d010      	beq.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
 800b5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	da0c      	bge.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f001 f906 	bl	800c7ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5ae:	e008      	b.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
      return;
 800b5b0:	bf00      	nop
 800b5b2:	e006      	b.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
    return;
 800b5b4:	bf00      	nop
 800b5b6:	e004      	b.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
      return;
 800b5b8:	bf00      	nop
 800b5ba:	e002      	b.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
      return;
 800b5bc:	bf00      	nop
 800b5be:	e000      	b.n	800b5c2 <HAL_UART_IRQHandler+0x76a>
    return;
 800b5c0:	bf00      	nop
  }
}
 800b5c2:	37e8      	adds	r7, #232	@ 0xe8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	effffffe 	.word	0xeffffffe

0800b5cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b60c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b610:	b092      	sub	sp, #72	@ 0x48
 800b612:	af00      	add	r7, sp, #0
 800b614:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	431a      	orrs	r2, r3
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	431a      	orrs	r2, r3
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	69db      	ldr	r3, [r3, #28]
 800b630:	4313      	orrs	r3, r2
 800b632:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	4bbe      	ldr	r3, [pc, #760]	@ (800b934 <UART_SetConfig+0x328>)
 800b63c:	4013      	ands	r3, r2
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	6812      	ldr	r2, [r2, #0]
 800b642:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b644:	430b      	orrs	r3, r1
 800b646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	68da      	ldr	r2, [r3, #12]
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4ab3      	ldr	r2, [pc, #716]	@ (800b938 <UART_SetConfig+0x32c>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d004      	beq.n	800b678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b674:	4313      	orrs	r3, r2
 800b676:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	689a      	ldr	r2, [r3, #8]
 800b67e:	4baf      	ldr	r3, [pc, #700]	@ (800b93c <UART_SetConfig+0x330>)
 800b680:	4013      	ands	r3, r2
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	6812      	ldr	r2, [r2, #0]
 800b686:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b688:	430b      	orrs	r3, r1
 800b68a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b692:	f023 010f 	bic.w	r1, r3, #15
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	430a      	orrs	r2, r1
 800b6a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4aa6      	ldr	r2, [pc, #664]	@ (800b940 <UART_SetConfig+0x334>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d177      	bne.n	800b79c <UART_SetConfig+0x190>
 800b6ac:	4ba5      	ldr	r3, [pc, #660]	@ (800b944 <UART_SetConfig+0x338>)
 800b6ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b6b4:	2b28      	cmp	r3, #40	@ 0x28
 800b6b6:	d86d      	bhi.n	800b794 <UART_SetConfig+0x188>
 800b6b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c0 <UART_SetConfig+0xb4>)
 800b6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6be:	bf00      	nop
 800b6c0:	0800b765 	.word	0x0800b765
 800b6c4:	0800b795 	.word	0x0800b795
 800b6c8:	0800b795 	.word	0x0800b795
 800b6cc:	0800b795 	.word	0x0800b795
 800b6d0:	0800b795 	.word	0x0800b795
 800b6d4:	0800b795 	.word	0x0800b795
 800b6d8:	0800b795 	.word	0x0800b795
 800b6dc:	0800b795 	.word	0x0800b795
 800b6e0:	0800b76d 	.word	0x0800b76d
 800b6e4:	0800b795 	.word	0x0800b795
 800b6e8:	0800b795 	.word	0x0800b795
 800b6ec:	0800b795 	.word	0x0800b795
 800b6f0:	0800b795 	.word	0x0800b795
 800b6f4:	0800b795 	.word	0x0800b795
 800b6f8:	0800b795 	.word	0x0800b795
 800b6fc:	0800b795 	.word	0x0800b795
 800b700:	0800b775 	.word	0x0800b775
 800b704:	0800b795 	.word	0x0800b795
 800b708:	0800b795 	.word	0x0800b795
 800b70c:	0800b795 	.word	0x0800b795
 800b710:	0800b795 	.word	0x0800b795
 800b714:	0800b795 	.word	0x0800b795
 800b718:	0800b795 	.word	0x0800b795
 800b71c:	0800b795 	.word	0x0800b795
 800b720:	0800b77d 	.word	0x0800b77d
 800b724:	0800b795 	.word	0x0800b795
 800b728:	0800b795 	.word	0x0800b795
 800b72c:	0800b795 	.word	0x0800b795
 800b730:	0800b795 	.word	0x0800b795
 800b734:	0800b795 	.word	0x0800b795
 800b738:	0800b795 	.word	0x0800b795
 800b73c:	0800b795 	.word	0x0800b795
 800b740:	0800b785 	.word	0x0800b785
 800b744:	0800b795 	.word	0x0800b795
 800b748:	0800b795 	.word	0x0800b795
 800b74c:	0800b795 	.word	0x0800b795
 800b750:	0800b795 	.word	0x0800b795
 800b754:	0800b795 	.word	0x0800b795
 800b758:	0800b795 	.word	0x0800b795
 800b75c:	0800b795 	.word	0x0800b795
 800b760:	0800b78d 	.word	0x0800b78d
 800b764:	2301      	movs	r3, #1
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76a:	e326      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b76c:	2304      	movs	r3, #4
 800b76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b772:	e322      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b774:	2308      	movs	r3, #8
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77a:	e31e      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b77c:	2310      	movs	r3, #16
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b782:	e31a      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b784:	2320      	movs	r3, #32
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78a:	e316      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b78c:	2340      	movs	r3, #64	@ 0x40
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b792:	e312      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b794:	2380      	movs	r3, #128	@ 0x80
 800b796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b79a:	e30e      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a69      	ldr	r2, [pc, #420]	@ (800b948 <UART_SetConfig+0x33c>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d130      	bne.n	800b808 <UART_SetConfig+0x1fc>
 800b7a6:	4b67      	ldr	r3, [pc, #412]	@ (800b944 <UART_SetConfig+0x338>)
 800b7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7aa:	f003 0307 	and.w	r3, r3, #7
 800b7ae:	2b05      	cmp	r3, #5
 800b7b0:	d826      	bhi.n	800b800 <UART_SetConfig+0x1f4>
 800b7b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b7b8 <UART_SetConfig+0x1ac>)
 800b7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b8:	0800b7d1 	.word	0x0800b7d1
 800b7bc:	0800b7d9 	.word	0x0800b7d9
 800b7c0:	0800b7e1 	.word	0x0800b7e1
 800b7c4:	0800b7e9 	.word	0x0800b7e9
 800b7c8:	0800b7f1 	.word	0x0800b7f1
 800b7cc:	0800b7f9 	.word	0x0800b7f9
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7d6:	e2f0      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b7d8:	2304      	movs	r3, #4
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7de:	e2ec      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b7e0:	2308      	movs	r3, #8
 800b7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7e6:	e2e8      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b7e8:	2310      	movs	r3, #16
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ee:	e2e4      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b7f0:	2320      	movs	r3, #32
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f6:	e2e0      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b7f8:	2340      	movs	r3, #64	@ 0x40
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fe:	e2dc      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b800:	2380      	movs	r3, #128	@ 0x80
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b806:	e2d8      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a4f      	ldr	r2, [pc, #316]	@ (800b94c <UART_SetConfig+0x340>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d130      	bne.n	800b874 <UART_SetConfig+0x268>
 800b812:	4b4c      	ldr	r3, [pc, #304]	@ (800b944 <UART_SetConfig+0x338>)
 800b814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b05      	cmp	r3, #5
 800b81c:	d826      	bhi.n	800b86c <UART_SetConfig+0x260>
 800b81e:	a201      	add	r2, pc, #4	@ (adr r2, 800b824 <UART_SetConfig+0x218>)
 800b820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b824:	0800b83d 	.word	0x0800b83d
 800b828:	0800b845 	.word	0x0800b845
 800b82c:	0800b84d 	.word	0x0800b84d
 800b830:	0800b855 	.word	0x0800b855
 800b834:	0800b85d 	.word	0x0800b85d
 800b838:	0800b865 	.word	0x0800b865
 800b83c:	2300      	movs	r3, #0
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b842:	e2ba      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b844:	2304      	movs	r3, #4
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84a:	e2b6      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b84c:	2308      	movs	r3, #8
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b852:	e2b2      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b854:	2310      	movs	r3, #16
 800b856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b85a:	e2ae      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b85c:	2320      	movs	r3, #32
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b862:	e2aa      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b864:	2340      	movs	r3, #64	@ 0x40
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86a:	e2a6      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b86c:	2380      	movs	r3, #128	@ 0x80
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b872:	e2a2      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a35      	ldr	r2, [pc, #212]	@ (800b950 <UART_SetConfig+0x344>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d130      	bne.n	800b8e0 <UART_SetConfig+0x2d4>
 800b87e:	4b31      	ldr	r3, [pc, #196]	@ (800b944 <UART_SetConfig+0x338>)
 800b880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	2b05      	cmp	r3, #5
 800b888:	d826      	bhi.n	800b8d8 <UART_SetConfig+0x2cc>
 800b88a:	a201      	add	r2, pc, #4	@ (adr r2, 800b890 <UART_SetConfig+0x284>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b8a9 	.word	0x0800b8a9
 800b894:	0800b8b1 	.word	0x0800b8b1
 800b898:	0800b8b9 	.word	0x0800b8b9
 800b89c:	0800b8c1 	.word	0x0800b8c1
 800b8a0:	0800b8c9 	.word	0x0800b8c9
 800b8a4:	0800b8d1 	.word	0x0800b8d1
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ae:	e284      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b8b0:	2304      	movs	r3, #4
 800b8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b6:	e280      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b8b8:	2308      	movs	r3, #8
 800b8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8be:	e27c      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b8c0:	2310      	movs	r3, #16
 800b8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8c6:	e278      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b8c8:	2320      	movs	r3, #32
 800b8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ce:	e274      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b8d0:	2340      	movs	r3, #64	@ 0x40
 800b8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8d6:	e270      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b8d8:	2380      	movs	r3, #128	@ 0x80
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8de:	e26c      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b954 <UART_SetConfig+0x348>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d142      	bne.n	800b970 <UART_SetConfig+0x364>
 800b8ea:	4b16      	ldr	r3, [pc, #88]	@ (800b944 <UART_SetConfig+0x338>)
 800b8ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ee:	f003 0307 	and.w	r3, r3, #7
 800b8f2:	2b05      	cmp	r3, #5
 800b8f4:	d838      	bhi.n	800b968 <UART_SetConfig+0x35c>
 800b8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b8fc <UART_SetConfig+0x2f0>)
 800b8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fc:	0800b915 	.word	0x0800b915
 800b900:	0800b91d 	.word	0x0800b91d
 800b904:	0800b925 	.word	0x0800b925
 800b908:	0800b92d 	.word	0x0800b92d
 800b90c:	0800b959 	.word	0x0800b959
 800b910:	0800b961 	.word	0x0800b961
 800b914:	2300      	movs	r3, #0
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91a:	e24e      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b91c:	2304      	movs	r3, #4
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b922:	e24a      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b924:	2308      	movs	r3, #8
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92a:	e246      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b92c:	2310      	movs	r3, #16
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b932:	e242      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b934:	cfff69f3 	.word	0xcfff69f3
 800b938:	58000c00 	.word	0x58000c00
 800b93c:	11fff4ff 	.word	0x11fff4ff
 800b940:	40011000 	.word	0x40011000
 800b944:	58024400 	.word	0x58024400
 800b948:	40004400 	.word	0x40004400
 800b94c:	40004800 	.word	0x40004800
 800b950:	40004c00 	.word	0x40004c00
 800b954:	40005000 	.word	0x40005000
 800b958:	2320      	movs	r3, #32
 800b95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95e:	e22c      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b960:	2340      	movs	r3, #64	@ 0x40
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b966:	e228      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b968:	2380      	movs	r3, #128	@ 0x80
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e224      	b.n	800bdba <UART_SetConfig+0x7ae>
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4ab1      	ldr	r2, [pc, #708]	@ (800bc3c <UART_SetConfig+0x630>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d176      	bne.n	800ba68 <UART_SetConfig+0x45c>
 800b97a:	4bb1      	ldr	r3, [pc, #708]	@ (800bc40 <UART_SetConfig+0x634>)
 800b97c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b97e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b982:	2b28      	cmp	r3, #40	@ 0x28
 800b984:	d86c      	bhi.n	800ba60 <UART_SetConfig+0x454>
 800b986:	a201      	add	r2, pc, #4	@ (adr r2, 800b98c <UART_SetConfig+0x380>)
 800b988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98c:	0800ba31 	.word	0x0800ba31
 800b990:	0800ba61 	.word	0x0800ba61
 800b994:	0800ba61 	.word	0x0800ba61
 800b998:	0800ba61 	.word	0x0800ba61
 800b99c:	0800ba61 	.word	0x0800ba61
 800b9a0:	0800ba61 	.word	0x0800ba61
 800b9a4:	0800ba61 	.word	0x0800ba61
 800b9a8:	0800ba61 	.word	0x0800ba61
 800b9ac:	0800ba39 	.word	0x0800ba39
 800b9b0:	0800ba61 	.word	0x0800ba61
 800b9b4:	0800ba61 	.word	0x0800ba61
 800b9b8:	0800ba61 	.word	0x0800ba61
 800b9bc:	0800ba61 	.word	0x0800ba61
 800b9c0:	0800ba61 	.word	0x0800ba61
 800b9c4:	0800ba61 	.word	0x0800ba61
 800b9c8:	0800ba61 	.word	0x0800ba61
 800b9cc:	0800ba41 	.word	0x0800ba41
 800b9d0:	0800ba61 	.word	0x0800ba61
 800b9d4:	0800ba61 	.word	0x0800ba61
 800b9d8:	0800ba61 	.word	0x0800ba61
 800b9dc:	0800ba61 	.word	0x0800ba61
 800b9e0:	0800ba61 	.word	0x0800ba61
 800b9e4:	0800ba61 	.word	0x0800ba61
 800b9e8:	0800ba61 	.word	0x0800ba61
 800b9ec:	0800ba49 	.word	0x0800ba49
 800b9f0:	0800ba61 	.word	0x0800ba61
 800b9f4:	0800ba61 	.word	0x0800ba61
 800b9f8:	0800ba61 	.word	0x0800ba61
 800b9fc:	0800ba61 	.word	0x0800ba61
 800ba00:	0800ba61 	.word	0x0800ba61
 800ba04:	0800ba61 	.word	0x0800ba61
 800ba08:	0800ba61 	.word	0x0800ba61
 800ba0c:	0800ba51 	.word	0x0800ba51
 800ba10:	0800ba61 	.word	0x0800ba61
 800ba14:	0800ba61 	.word	0x0800ba61
 800ba18:	0800ba61 	.word	0x0800ba61
 800ba1c:	0800ba61 	.word	0x0800ba61
 800ba20:	0800ba61 	.word	0x0800ba61
 800ba24:	0800ba61 	.word	0x0800ba61
 800ba28:	0800ba61 	.word	0x0800ba61
 800ba2c:	0800ba59 	.word	0x0800ba59
 800ba30:	2301      	movs	r3, #1
 800ba32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba36:	e1c0      	b.n	800bdba <UART_SetConfig+0x7ae>
 800ba38:	2304      	movs	r3, #4
 800ba3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba3e:	e1bc      	b.n	800bdba <UART_SetConfig+0x7ae>
 800ba40:	2308      	movs	r3, #8
 800ba42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba46:	e1b8      	b.n	800bdba <UART_SetConfig+0x7ae>
 800ba48:	2310      	movs	r3, #16
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4e:	e1b4      	b.n	800bdba <UART_SetConfig+0x7ae>
 800ba50:	2320      	movs	r3, #32
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba56:	e1b0      	b.n	800bdba <UART_SetConfig+0x7ae>
 800ba58:	2340      	movs	r3, #64	@ 0x40
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5e:	e1ac      	b.n	800bdba <UART_SetConfig+0x7ae>
 800ba60:	2380      	movs	r3, #128	@ 0x80
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba66:	e1a8      	b.n	800bdba <UART_SetConfig+0x7ae>
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a75      	ldr	r2, [pc, #468]	@ (800bc44 <UART_SetConfig+0x638>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d130      	bne.n	800bad4 <UART_SetConfig+0x4c8>
 800ba72:	4b73      	ldr	r3, [pc, #460]	@ (800bc40 <UART_SetConfig+0x634>)
 800ba74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba76:	f003 0307 	and.w	r3, r3, #7
 800ba7a:	2b05      	cmp	r3, #5
 800ba7c:	d826      	bhi.n	800bacc <UART_SetConfig+0x4c0>
 800ba7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba84 <UART_SetConfig+0x478>)
 800ba80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba84:	0800ba9d 	.word	0x0800ba9d
 800ba88:	0800baa5 	.word	0x0800baa5
 800ba8c:	0800baad 	.word	0x0800baad
 800ba90:	0800bab5 	.word	0x0800bab5
 800ba94:	0800babd 	.word	0x0800babd
 800ba98:	0800bac5 	.word	0x0800bac5
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baa2:	e18a      	b.n	800bdba <UART_SetConfig+0x7ae>
 800baa4:	2304      	movs	r3, #4
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baaa:	e186      	b.n	800bdba <UART_SetConfig+0x7ae>
 800baac:	2308      	movs	r3, #8
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab2:	e182      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bab4:	2310      	movs	r3, #16
 800bab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baba:	e17e      	b.n	800bdba <UART_SetConfig+0x7ae>
 800babc:	2320      	movs	r3, #32
 800babe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac2:	e17a      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bac4:	2340      	movs	r3, #64	@ 0x40
 800bac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baca:	e176      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bacc:	2380      	movs	r3, #128	@ 0x80
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad2:	e172      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a5b      	ldr	r2, [pc, #364]	@ (800bc48 <UART_SetConfig+0x63c>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d130      	bne.n	800bb40 <UART_SetConfig+0x534>
 800bade:	4b58      	ldr	r3, [pc, #352]	@ (800bc40 <UART_SetConfig+0x634>)
 800bae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bae2:	f003 0307 	and.w	r3, r3, #7
 800bae6:	2b05      	cmp	r3, #5
 800bae8:	d826      	bhi.n	800bb38 <UART_SetConfig+0x52c>
 800baea:	a201      	add	r2, pc, #4	@ (adr r2, 800baf0 <UART_SetConfig+0x4e4>)
 800baec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf0:	0800bb09 	.word	0x0800bb09
 800baf4:	0800bb11 	.word	0x0800bb11
 800baf8:	0800bb19 	.word	0x0800bb19
 800bafc:	0800bb21 	.word	0x0800bb21
 800bb00:	0800bb29 	.word	0x0800bb29
 800bb04:	0800bb31 	.word	0x0800bb31
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb0e:	e154      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bb10:	2304      	movs	r3, #4
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e150      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bb18:	2308      	movs	r3, #8
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e14c      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bb20:	2310      	movs	r3, #16
 800bb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb26:	e148      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bb28:	2320      	movs	r3, #32
 800bb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2e:	e144      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bb30:	2340      	movs	r3, #64	@ 0x40
 800bb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb36:	e140      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bb38:	2380      	movs	r3, #128	@ 0x80
 800bb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb3e:	e13c      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a41      	ldr	r2, [pc, #260]	@ (800bc4c <UART_SetConfig+0x640>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	f040 8082 	bne.w	800bc50 <UART_SetConfig+0x644>
 800bb4c:	4b3c      	ldr	r3, [pc, #240]	@ (800bc40 <UART_SetConfig+0x634>)
 800bb4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb54:	2b28      	cmp	r3, #40	@ 0x28
 800bb56:	d86d      	bhi.n	800bc34 <UART_SetConfig+0x628>
 800bb58:	a201      	add	r2, pc, #4	@ (adr r2, 800bb60 <UART_SetConfig+0x554>)
 800bb5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5e:	bf00      	nop
 800bb60:	0800bc05 	.word	0x0800bc05
 800bb64:	0800bc35 	.word	0x0800bc35
 800bb68:	0800bc35 	.word	0x0800bc35
 800bb6c:	0800bc35 	.word	0x0800bc35
 800bb70:	0800bc35 	.word	0x0800bc35
 800bb74:	0800bc35 	.word	0x0800bc35
 800bb78:	0800bc35 	.word	0x0800bc35
 800bb7c:	0800bc35 	.word	0x0800bc35
 800bb80:	0800bc0d 	.word	0x0800bc0d
 800bb84:	0800bc35 	.word	0x0800bc35
 800bb88:	0800bc35 	.word	0x0800bc35
 800bb8c:	0800bc35 	.word	0x0800bc35
 800bb90:	0800bc35 	.word	0x0800bc35
 800bb94:	0800bc35 	.word	0x0800bc35
 800bb98:	0800bc35 	.word	0x0800bc35
 800bb9c:	0800bc35 	.word	0x0800bc35
 800bba0:	0800bc15 	.word	0x0800bc15
 800bba4:	0800bc35 	.word	0x0800bc35
 800bba8:	0800bc35 	.word	0x0800bc35
 800bbac:	0800bc35 	.word	0x0800bc35
 800bbb0:	0800bc35 	.word	0x0800bc35
 800bbb4:	0800bc35 	.word	0x0800bc35
 800bbb8:	0800bc35 	.word	0x0800bc35
 800bbbc:	0800bc35 	.word	0x0800bc35
 800bbc0:	0800bc1d 	.word	0x0800bc1d
 800bbc4:	0800bc35 	.word	0x0800bc35
 800bbc8:	0800bc35 	.word	0x0800bc35
 800bbcc:	0800bc35 	.word	0x0800bc35
 800bbd0:	0800bc35 	.word	0x0800bc35
 800bbd4:	0800bc35 	.word	0x0800bc35
 800bbd8:	0800bc35 	.word	0x0800bc35
 800bbdc:	0800bc35 	.word	0x0800bc35
 800bbe0:	0800bc25 	.word	0x0800bc25
 800bbe4:	0800bc35 	.word	0x0800bc35
 800bbe8:	0800bc35 	.word	0x0800bc35
 800bbec:	0800bc35 	.word	0x0800bc35
 800bbf0:	0800bc35 	.word	0x0800bc35
 800bbf4:	0800bc35 	.word	0x0800bc35
 800bbf8:	0800bc35 	.word	0x0800bc35
 800bbfc:	0800bc35 	.word	0x0800bc35
 800bc00:	0800bc2d 	.word	0x0800bc2d
 800bc04:	2301      	movs	r3, #1
 800bc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc0a:	e0d6      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc12:	e0d2      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bc14:	2308      	movs	r3, #8
 800bc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc1a:	e0ce      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bc1c:	2310      	movs	r3, #16
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc22:	e0ca      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bc24:	2320      	movs	r3, #32
 800bc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc2a:	e0c6      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bc2c:	2340      	movs	r3, #64	@ 0x40
 800bc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc32:	e0c2      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bc34:	2380      	movs	r3, #128	@ 0x80
 800bc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3a:	e0be      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bc3c:	40011400 	.word	0x40011400
 800bc40:	58024400 	.word	0x58024400
 800bc44:	40007800 	.word	0x40007800
 800bc48:	40007c00 	.word	0x40007c00
 800bc4c:	40011800 	.word	0x40011800
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4aad      	ldr	r2, [pc, #692]	@ (800bf0c <UART_SetConfig+0x900>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d176      	bne.n	800bd48 <UART_SetConfig+0x73c>
 800bc5a:	4bad      	ldr	r3, [pc, #692]	@ (800bf10 <UART_SetConfig+0x904>)
 800bc5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc62:	2b28      	cmp	r3, #40	@ 0x28
 800bc64:	d86c      	bhi.n	800bd40 <UART_SetConfig+0x734>
 800bc66:	a201      	add	r2, pc, #4	@ (adr r2, 800bc6c <UART_SetConfig+0x660>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bd11 	.word	0x0800bd11
 800bc70:	0800bd41 	.word	0x0800bd41
 800bc74:	0800bd41 	.word	0x0800bd41
 800bc78:	0800bd41 	.word	0x0800bd41
 800bc7c:	0800bd41 	.word	0x0800bd41
 800bc80:	0800bd41 	.word	0x0800bd41
 800bc84:	0800bd41 	.word	0x0800bd41
 800bc88:	0800bd41 	.word	0x0800bd41
 800bc8c:	0800bd19 	.word	0x0800bd19
 800bc90:	0800bd41 	.word	0x0800bd41
 800bc94:	0800bd41 	.word	0x0800bd41
 800bc98:	0800bd41 	.word	0x0800bd41
 800bc9c:	0800bd41 	.word	0x0800bd41
 800bca0:	0800bd41 	.word	0x0800bd41
 800bca4:	0800bd41 	.word	0x0800bd41
 800bca8:	0800bd41 	.word	0x0800bd41
 800bcac:	0800bd21 	.word	0x0800bd21
 800bcb0:	0800bd41 	.word	0x0800bd41
 800bcb4:	0800bd41 	.word	0x0800bd41
 800bcb8:	0800bd41 	.word	0x0800bd41
 800bcbc:	0800bd41 	.word	0x0800bd41
 800bcc0:	0800bd41 	.word	0x0800bd41
 800bcc4:	0800bd41 	.word	0x0800bd41
 800bcc8:	0800bd41 	.word	0x0800bd41
 800bccc:	0800bd29 	.word	0x0800bd29
 800bcd0:	0800bd41 	.word	0x0800bd41
 800bcd4:	0800bd41 	.word	0x0800bd41
 800bcd8:	0800bd41 	.word	0x0800bd41
 800bcdc:	0800bd41 	.word	0x0800bd41
 800bce0:	0800bd41 	.word	0x0800bd41
 800bce4:	0800bd41 	.word	0x0800bd41
 800bce8:	0800bd41 	.word	0x0800bd41
 800bcec:	0800bd31 	.word	0x0800bd31
 800bcf0:	0800bd41 	.word	0x0800bd41
 800bcf4:	0800bd41 	.word	0x0800bd41
 800bcf8:	0800bd41 	.word	0x0800bd41
 800bcfc:	0800bd41 	.word	0x0800bd41
 800bd00:	0800bd41 	.word	0x0800bd41
 800bd04:	0800bd41 	.word	0x0800bd41
 800bd08:	0800bd41 	.word	0x0800bd41
 800bd0c:	0800bd39 	.word	0x0800bd39
 800bd10:	2301      	movs	r3, #1
 800bd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd16:	e050      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd18:	2304      	movs	r3, #4
 800bd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd1e:	e04c      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd20:	2308      	movs	r3, #8
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd26:	e048      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd28:	2310      	movs	r3, #16
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2e:	e044      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd30:	2320      	movs	r3, #32
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd36:	e040      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd38:	2340      	movs	r3, #64	@ 0x40
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3e:	e03c      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd40:	2380      	movs	r3, #128	@ 0x80
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd46:	e038      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a71      	ldr	r2, [pc, #452]	@ (800bf14 <UART_SetConfig+0x908>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d130      	bne.n	800bdb4 <UART_SetConfig+0x7a8>
 800bd52:	4b6f      	ldr	r3, [pc, #444]	@ (800bf10 <UART_SetConfig+0x904>)
 800bd54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd56:	f003 0307 	and.w	r3, r3, #7
 800bd5a:	2b05      	cmp	r3, #5
 800bd5c:	d826      	bhi.n	800bdac <UART_SetConfig+0x7a0>
 800bd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd64 <UART_SetConfig+0x758>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bd7d 	.word	0x0800bd7d
 800bd68:	0800bd85 	.word	0x0800bd85
 800bd6c:	0800bd8d 	.word	0x0800bd8d
 800bd70:	0800bd95 	.word	0x0800bd95
 800bd74:	0800bd9d 	.word	0x0800bd9d
 800bd78:	0800bda5 	.word	0x0800bda5
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd82:	e01a      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd84:	2304      	movs	r3, #4
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd8a:	e016      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd8c:	2308      	movs	r3, #8
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd92:	e012      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd94:	2310      	movs	r3, #16
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd9a:	e00e      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bd9c:	2320      	movs	r3, #32
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda2:	e00a      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bda4:	2340      	movs	r3, #64	@ 0x40
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdaa:	e006      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bdac:	2380      	movs	r3, #128	@ 0x80
 800bdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdb2:	e002      	b.n	800bdba <UART_SetConfig+0x7ae>
 800bdb4:	2380      	movs	r3, #128	@ 0x80
 800bdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a55      	ldr	r2, [pc, #340]	@ (800bf14 <UART_SetConfig+0x908>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	f040 80f8 	bne.w	800bfb6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bdc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bdca:	2b20      	cmp	r3, #32
 800bdcc:	dc46      	bgt.n	800be5c <UART_SetConfig+0x850>
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	db75      	blt.n	800bebe <UART_SetConfig+0x8b2>
 800bdd2:	3b02      	subs	r3, #2
 800bdd4:	2b1e      	cmp	r3, #30
 800bdd6:	d872      	bhi.n	800bebe <UART_SetConfig+0x8b2>
 800bdd8:	a201      	add	r2, pc, #4	@ (adr r2, 800bde0 <UART_SetConfig+0x7d4>)
 800bdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdde:	bf00      	nop
 800bde0:	0800be63 	.word	0x0800be63
 800bde4:	0800bebf 	.word	0x0800bebf
 800bde8:	0800be6b 	.word	0x0800be6b
 800bdec:	0800bebf 	.word	0x0800bebf
 800bdf0:	0800bebf 	.word	0x0800bebf
 800bdf4:	0800bebf 	.word	0x0800bebf
 800bdf8:	0800be7b 	.word	0x0800be7b
 800bdfc:	0800bebf 	.word	0x0800bebf
 800be00:	0800bebf 	.word	0x0800bebf
 800be04:	0800bebf 	.word	0x0800bebf
 800be08:	0800bebf 	.word	0x0800bebf
 800be0c:	0800bebf 	.word	0x0800bebf
 800be10:	0800bebf 	.word	0x0800bebf
 800be14:	0800bebf 	.word	0x0800bebf
 800be18:	0800be8b 	.word	0x0800be8b
 800be1c:	0800bebf 	.word	0x0800bebf
 800be20:	0800bebf 	.word	0x0800bebf
 800be24:	0800bebf 	.word	0x0800bebf
 800be28:	0800bebf 	.word	0x0800bebf
 800be2c:	0800bebf 	.word	0x0800bebf
 800be30:	0800bebf 	.word	0x0800bebf
 800be34:	0800bebf 	.word	0x0800bebf
 800be38:	0800bebf 	.word	0x0800bebf
 800be3c:	0800bebf 	.word	0x0800bebf
 800be40:	0800bebf 	.word	0x0800bebf
 800be44:	0800bebf 	.word	0x0800bebf
 800be48:	0800bebf 	.word	0x0800bebf
 800be4c:	0800bebf 	.word	0x0800bebf
 800be50:	0800bebf 	.word	0x0800bebf
 800be54:	0800bebf 	.word	0x0800bebf
 800be58:	0800beb1 	.word	0x0800beb1
 800be5c:	2b40      	cmp	r3, #64	@ 0x40
 800be5e:	d02a      	beq.n	800beb6 <UART_SetConfig+0x8aa>
 800be60:	e02d      	b.n	800bebe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be62:	f7fc fcb5 	bl	80087d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800be66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be68:	e02f      	b.n	800beca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fc fcc4 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be78:	e027      	b.n	800beca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be7a:	f107 0318 	add.w	r3, r7, #24
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fc fe10 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be88:	e01f      	b.n	800beca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be8a:	4b21      	ldr	r3, [pc, #132]	@ (800bf10 <UART_SetConfig+0x904>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 0320 	and.w	r3, r3, #32
 800be92:	2b00      	cmp	r3, #0
 800be94:	d009      	beq.n	800beaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be96:	4b1e      	ldr	r3, [pc, #120]	@ (800bf10 <UART_SetConfig+0x904>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	08db      	lsrs	r3, r3, #3
 800be9c:	f003 0303 	and.w	r3, r3, #3
 800bea0:	4a1d      	ldr	r2, [pc, #116]	@ (800bf18 <UART_SetConfig+0x90c>)
 800bea2:	fa22 f303 	lsr.w	r3, r2, r3
 800bea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bea8:	e00f      	b.n	800beca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800beaa:	4b1b      	ldr	r3, [pc, #108]	@ (800bf18 <UART_SetConfig+0x90c>)
 800beac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beae:	e00c      	b.n	800beca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800beb0:	4b1a      	ldr	r3, [pc, #104]	@ (800bf1c <UART_SetConfig+0x910>)
 800beb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beb4:	e009      	b.n	800beca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800beba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bebc:	e005      	b.n	800beca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bec8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800beca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 81ee 	beq.w	800c2ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed6:	4a12      	ldr	r2, [pc, #72]	@ (800bf20 <UART_SetConfig+0x914>)
 800bed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bedc:	461a      	mov	r2, r3
 800bede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bee0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bee4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	4613      	mov	r3, r2
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	4413      	add	r3, r2
 800bef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d305      	bcc.n	800bf02 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800befc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800befe:	429a      	cmp	r2, r3
 800bf00:	d910      	bls.n	800bf24 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800bf02:	2301      	movs	r3, #1
 800bf04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bf08:	e1d1      	b.n	800c2ae <UART_SetConfig+0xca2>
 800bf0a:	bf00      	nop
 800bf0c:	40011c00 	.word	0x40011c00
 800bf10:	58024400 	.word	0x58024400
 800bf14:	58000c00 	.word	0x58000c00
 800bf18:	03d09000 	.word	0x03d09000
 800bf1c:	003d0900 	.word	0x003d0900
 800bf20:	0801228c 	.word	0x0801228c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf26:	2200      	movs	r2, #0
 800bf28:	60bb      	str	r3, [r7, #8]
 800bf2a:	60fa      	str	r2, [r7, #12]
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf30:	4ac0      	ldr	r2, [pc, #768]	@ (800c234 <UART_SetConfig+0xc28>)
 800bf32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	2200      	movs	r2, #0
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	607a      	str	r2, [r7, #4]
 800bf3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf46:	f7f4 fbf7 	bl	8000738 <__aeabi_uldivmod>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4610      	mov	r0, r2
 800bf50:	4619      	mov	r1, r3
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	f04f 0300 	mov.w	r3, #0
 800bf5a:	020b      	lsls	r3, r1, #8
 800bf5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf60:	0202      	lsls	r2, r0, #8
 800bf62:	6979      	ldr	r1, [r7, #20]
 800bf64:	6849      	ldr	r1, [r1, #4]
 800bf66:	0849      	lsrs	r1, r1, #1
 800bf68:	2000      	movs	r0, #0
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	eb12 0804 	adds.w	r8, r2, r4
 800bf72:	eb43 0905 	adc.w	r9, r3, r5
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	469a      	mov	sl, r3
 800bf7e:	4693      	mov	fp, r2
 800bf80:	4652      	mov	r2, sl
 800bf82:	465b      	mov	r3, fp
 800bf84:	4640      	mov	r0, r8
 800bf86:	4649      	mov	r1, r9
 800bf88:	f7f4 fbd6 	bl	8000738 <__aeabi_uldivmod>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	4613      	mov	r3, r2
 800bf92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf9a:	d308      	bcc.n	800bfae <UART_SetConfig+0x9a2>
 800bf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfa2:	d204      	bcs.n	800bfae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfaa:	60da      	str	r2, [r3, #12]
 800bfac:	e17f      	b.n	800c2ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bfb4:	e17b      	b.n	800c2ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	69db      	ldr	r3, [r3, #28]
 800bfba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfbe:	f040 80bd 	bne.w	800c13c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800bfc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bfc6:	2b20      	cmp	r3, #32
 800bfc8:	dc48      	bgt.n	800c05c <UART_SetConfig+0xa50>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	db7b      	blt.n	800c0c6 <UART_SetConfig+0xaba>
 800bfce:	2b20      	cmp	r3, #32
 800bfd0:	d879      	bhi.n	800c0c6 <UART_SetConfig+0xaba>
 800bfd2:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd8 <UART_SetConfig+0x9cc>)
 800bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd8:	0800c063 	.word	0x0800c063
 800bfdc:	0800c06b 	.word	0x0800c06b
 800bfe0:	0800c0c7 	.word	0x0800c0c7
 800bfe4:	0800c0c7 	.word	0x0800c0c7
 800bfe8:	0800c073 	.word	0x0800c073
 800bfec:	0800c0c7 	.word	0x0800c0c7
 800bff0:	0800c0c7 	.word	0x0800c0c7
 800bff4:	0800c0c7 	.word	0x0800c0c7
 800bff8:	0800c083 	.word	0x0800c083
 800bffc:	0800c0c7 	.word	0x0800c0c7
 800c000:	0800c0c7 	.word	0x0800c0c7
 800c004:	0800c0c7 	.word	0x0800c0c7
 800c008:	0800c0c7 	.word	0x0800c0c7
 800c00c:	0800c0c7 	.word	0x0800c0c7
 800c010:	0800c0c7 	.word	0x0800c0c7
 800c014:	0800c0c7 	.word	0x0800c0c7
 800c018:	0800c093 	.word	0x0800c093
 800c01c:	0800c0c7 	.word	0x0800c0c7
 800c020:	0800c0c7 	.word	0x0800c0c7
 800c024:	0800c0c7 	.word	0x0800c0c7
 800c028:	0800c0c7 	.word	0x0800c0c7
 800c02c:	0800c0c7 	.word	0x0800c0c7
 800c030:	0800c0c7 	.word	0x0800c0c7
 800c034:	0800c0c7 	.word	0x0800c0c7
 800c038:	0800c0c7 	.word	0x0800c0c7
 800c03c:	0800c0c7 	.word	0x0800c0c7
 800c040:	0800c0c7 	.word	0x0800c0c7
 800c044:	0800c0c7 	.word	0x0800c0c7
 800c048:	0800c0c7 	.word	0x0800c0c7
 800c04c:	0800c0c7 	.word	0x0800c0c7
 800c050:	0800c0c7 	.word	0x0800c0c7
 800c054:	0800c0c7 	.word	0x0800c0c7
 800c058:	0800c0b9 	.word	0x0800c0b9
 800c05c:	2b40      	cmp	r3, #64	@ 0x40
 800c05e:	d02e      	beq.n	800c0be <UART_SetConfig+0xab2>
 800c060:	e031      	b.n	800c0c6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c062:	f7fa fd17 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 800c066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c068:	e033      	b.n	800c0d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c06a:	f7fa fd29 	bl	8006ac0 <HAL_RCC_GetPCLK2Freq>
 800c06e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c070:	e02f      	b.n	800c0d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c076:	4618      	mov	r0, r3
 800c078:	f7fc fbc0 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c080:	e027      	b.n	800c0d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c082:	f107 0318 	add.w	r3, r7, #24
 800c086:	4618      	mov	r0, r3
 800c088:	f7fc fd0c 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c090:	e01f      	b.n	800c0d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c092:	4b69      	ldr	r3, [pc, #420]	@ (800c238 <UART_SetConfig+0xc2c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f003 0320 	and.w	r3, r3, #32
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d009      	beq.n	800c0b2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c09e:	4b66      	ldr	r3, [pc, #408]	@ (800c238 <UART_SetConfig+0xc2c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	08db      	lsrs	r3, r3, #3
 800c0a4:	f003 0303 	and.w	r3, r3, #3
 800c0a8:	4a64      	ldr	r2, [pc, #400]	@ (800c23c <UART_SetConfig+0xc30>)
 800c0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0b0:	e00f      	b.n	800c0d2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c0b2:	4b62      	ldr	r3, [pc, #392]	@ (800c23c <UART_SetConfig+0xc30>)
 800c0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b6:	e00c      	b.n	800c0d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0b8:	4b61      	ldr	r3, [pc, #388]	@ (800c240 <UART_SetConfig+0xc34>)
 800c0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0bc:	e009      	b.n	800c0d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0c4:	e005      	b.n	800c0d2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c0d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 80ea 	beq.w	800c2ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0de:	4a55      	ldr	r2, [pc, #340]	@ (800c234 <UART_SetConfig+0xc28>)
 800c0e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0ec:	005a      	lsls	r2, r3, #1
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	085b      	lsrs	r3, r3, #1
 800c0f4:	441a      	add	r2, r3
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c102:	2b0f      	cmp	r3, #15
 800c104:	d916      	bls.n	800c134 <UART_SetConfig+0xb28>
 800c106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c10c:	d212      	bcs.n	800c134 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c110:	b29b      	uxth	r3, r3
 800c112:	f023 030f 	bic.w	r3, r3, #15
 800c116:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11a:	085b      	lsrs	r3, r3, #1
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	f003 0307 	and.w	r3, r3, #7
 800c122:	b29a      	uxth	r2, r3
 800c124:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c126:	4313      	orrs	r3, r2
 800c128:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c130:	60da      	str	r2, [r3, #12]
 800c132:	e0bc      	b.n	800c2ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c13a:	e0b8      	b.n	800c2ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c13c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c140:	2b20      	cmp	r3, #32
 800c142:	dc4b      	bgt.n	800c1dc <UART_SetConfig+0xbd0>
 800c144:	2b00      	cmp	r3, #0
 800c146:	f2c0 8087 	blt.w	800c258 <UART_SetConfig+0xc4c>
 800c14a:	2b20      	cmp	r3, #32
 800c14c:	f200 8084 	bhi.w	800c258 <UART_SetConfig+0xc4c>
 800c150:	a201      	add	r2, pc, #4	@ (adr r2, 800c158 <UART_SetConfig+0xb4c>)
 800c152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c156:	bf00      	nop
 800c158:	0800c1e3 	.word	0x0800c1e3
 800c15c:	0800c1eb 	.word	0x0800c1eb
 800c160:	0800c259 	.word	0x0800c259
 800c164:	0800c259 	.word	0x0800c259
 800c168:	0800c1f3 	.word	0x0800c1f3
 800c16c:	0800c259 	.word	0x0800c259
 800c170:	0800c259 	.word	0x0800c259
 800c174:	0800c259 	.word	0x0800c259
 800c178:	0800c203 	.word	0x0800c203
 800c17c:	0800c259 	.word	0x0800c259
 800c180:	0800c259 	.word	0x0800c259
 800c184:	0800c259 	.word	0x0800c259
 800c188:	0800c259 	.word	0x0800c259
 800c18c:	0800c259 	.word	0x0800c259
 800c190:	0800c259 	.word	0x0800c259
 800c194:	0800c259 	.word	0x0800c259
 800c198:	0800c213 	.word	0x0800c213
 800c19c:	0800c259 	.word	0x0800c259
 800c1a0:	0800c259 	.word	0x0800c259
 800c1a4:	0800c259 	.word	0x0800c259
 800c1a8:	0800c259 	.word	0x0800c259
 800c1ac:	0800c259 	.word	0x0800c259
 800c1b0:	0800c259 	.word	0x0800c259
 800c1b4:	0800c259 	.word	0x0800c259
 800c1b8:	0800c259 	.word	0x0800c259
 800c1bc:	0800c259 	.word	0x0800c259
 800c1c0:	0800c259 	.word	0x0800c259
 800c1c4:	0800c259 	.word	0x0800c259
 800c1c8:	0800c259 	.word	0x0800c259
 800c1cc:	0800c259 	.word	0x0800c259
 800c1d0:	0800c259 	.word	0x0800c259
 800c1d4:	0800c259 	.word	0x0800c259
 800c1d8:	0800c24b 	.word	0x0800c24b
 800c1dc:	2b40      	cmp	r3, #64	@ 0x40
 800c1de:	d037      	beq.n	800c250 <UART_SetConfig+0xc44>
 800c1e0:	e03a      	b.n	800c258 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1e2:	f7fa fc57 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 800c1e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1e8:	e03c      	b.n	800c264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1ea:	f7fa fc69 	bl	8006ac0 <HAL_RCC_GetPCLK2Freq>
 800c1ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1f0:	e038      	b.n	800c264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fc fb00 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c200:	e030      	b.n	800c264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c202:	f107 0318 	add.w	r3, r7, #24
 800c206:	4618      	mov	r0, r3
 800c208:	f7fc fc4c 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c210:	e028      	b.n	800c264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c212:	4b09      	ldr	r3, [pc, #36]	@ (800c238 <UART_SetConfig+0xc2c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d012      	beq.n	800c244 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c21e:	4b06      	ldr	r3, [pc, #24]	@ (800c238 <UART_SetConfig+0xc2c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	08db      	lsrs	r3, r3, #3
 800c224:	f003 0303 	and.w	r3, r3, #3
 800c228:	4a04      	ldr	r2, [pc, #16]	@ (800c23c <UART_SetConfig+0xc30>)
 800c22a:	fa22 f303 	lsr.w	r3, r2, r3
 800c22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c230:	e018      	b.n	800c264 <UART_SetConfig+0xc58>
 800c232:	bf00      	nop
 800c234:	0801228c 	.word	0x0801228c
 800c238:	58024400 	.word	0x58024400
 800c23c:	03d09000 	.word	0x03d09000
 800c240:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c244:	4b24      	ldr	r3, [pc, #144]	@ (800c2d8 <UART_SetConfig+0xccc>)
 800c246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c248:	e00c      	b.n	800c264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c24a:	4b24      	ldr	r3, [pc, #144]	@ (800c2dc <UART_SetConfig+0xcd0>)
 800c24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c24e:	e009      	b.n	800c264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c250:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c256:	e005      	b.n	800c264 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c258:	2300      	movs	r3, #0
 800c25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c262:	bf00      	nop
    }

    if (pclk != 0U)
 800c264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d021      	beq.n	800c2ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c26e:	4a1c      	ldr	r2, [pc, #112]	@ (800c2e0 <UART_SetConfig+0xcd4>)
 800c270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c274:	461a      	mov	r2, r3
 800c276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c278:	fbb3 f2f2 	udiv	r2, r3, r2
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	085b      	lsrs	r3, r3, #1
 800c282:	441a      	add	r2, r3
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c290:	2b0f      	cmp	r3, #15
 800c292:	d909      	bls.n	800c2a8 <UART_SetConfig+0xc9c>
 800c294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c29a:	d205      	bcs.n	800c2a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	60da      	str	r2, [r3, #12]
 800c2a6:	e002      	b.n	800c2ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c2ca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3748      	adds	r7, #72	@ 0x48
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c2d8:	03d09000 	.word	0x03d09000
 800c2dc:	003d0900 	.word	0x003d0900
 800c2e0:	0801228c 	.word	0x0801228c

0800c2e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2f0:	f003 0308 	and.w	r3, r3, #8
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00a      	beq.n	800c30e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	430a      	orrs	r2, r1
 800c30c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c312:	f003 0301 	and.w	r3, r3, #1
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	430a      	orrs	r2, r1
 800c32e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c334:	f003 0302 	and.w	r3, r3, #2
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00a      	beq.n	800c352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c356:	f003 0304 	and.w	r3, r3, #4
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00a      	beq.n	800c374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	430a      	orrs	r2, r1
 800c372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c378:	f003 0310 	and.w	r3, r3, #16
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00a      	beq.n	800c396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	430a      	orrs	r2, r1
 800c394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c39a:	f003 0320 	and.w	r3, r3, #32
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00a      	beq.n	800c3b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	430a      	orrs	r2, r1
 800c3b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d01a      	beq.n	800c3fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	430a      	orrs	r2, r1
 800c3d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3e2:	d10a      	bne.n	800c3fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	430a      	orrs	r2, r1
 800c3f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00a      	beq.n	800c41c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	430a      	orrs	r2, r1
 800c41a:	605a      	str	r2, [r3, #4]
  }
}
 800c41c:	bf00      	nop
 800c41e:	370c      	adds	r7, #12
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b098      	sub	sp, #96	@ 0x60
 800c42c:	af02      	add	r7, sp, #8
 800c42e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c438:	f7f7 fcda 	bl	8003df0 <HAL_GetTick>
 800c43c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 0308 	and.w	r3, r3, #8
 800c448:	2b08      	cmp	r3, #8
 800c44a:	d12f      	bne.n	800c4ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c44c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c454:	2200      	movs	r2, #0
 800c456:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f88e 	bl	800c57c <UART_WaitOnFlagUntilTimeout>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d022      	beq.n	800c4ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46e:	e853 3f00 	ldrex	r3, [r3]
 800c472:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c47a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	461a      	mov	r2, r3
 800c482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c484:	647b      	str	r3, [r7, #68]	@ 0x44
 800c486:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c488:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c48a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c48c:	e841 2300 	strex	r3, r2, [r1]
 800c490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e6      	bne.n	800c466 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2220      	movs	r2, #32
 800c49c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4a8:	2303      	movs	r3, #3
 800c4aa:	e063      	b.n	800c574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f003 0304 	and.w	r3, r3, #4
 800c4b6:	2b04      	cmp	r3, #4
 800c4b8:	d149      	bne.n	800c54e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f857 	bl	800c57c <UART_WaitOnFlagUntilTimeout>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d03c      	beq.n	800c54e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	e853 3f00 	ldrex	r3, [r3]
 800c4e0:	623b      	str	r3, [r7, #32]
   return(result);
 800c4e2:	6a3b      	ldr	r3, [r7, #32]
 800c4e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4fa:	e841 2300 	strex	r3, r2, [r1]
 800c4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1e6      	bne.n	800c4d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3308      	adds	r3, #8
 800c50c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	60fb      	str	r3, [r7, #12]
   return(result);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f023 0301 	bic.w	r3, r3, #1
 800c51c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3308      	adds	r3, #8
 800c524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c526:	61fa      	str	r2, [r7, #28]
 800c528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52a:	69b9      	ldr	r1, [r7, #24]
 800c52c:	69fa      	ldr	r2, [r7, #28]
 800c52e:	e841 2300 	strex	r3, r2, [r1]
 800c532:	617b      	str	r3, [r7, #20]
   return(result);
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e5      	bne.n	800c506 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2220      	movs	r2, #32
 800c53e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e012      	b.n	800c574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2220      	movs	r2, #32
 800c552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2220      	movs	r2, #32
 800c55a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3758      	adds	r7, #88	@ 0x58
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	603b      	str	r3, [r7, #0]
 800c588:	4613      	mov	r3, r2
 800c58a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c58c:	e04f      	b.n	800c62e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c594:	d04b      	beq.n	800c62e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c596:	f7f7 fc2b 	bl	8003df0 <HAL_GetTick>
 800c59a:	4602      	mov	r2, r0
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	69ba      	ldr	r2, [r7, #24]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d302      	bcc.n	800c5ac <UART_WaitOnFlagUntilTimeout+0x30>
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d101      	bne.n	800c5b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	e04e      	b.n	800c64e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d037      	beq.n	800c62e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	2b80      	cmp	r3, #128	@ 0x80
 800c5c2:	d034      	beq.n	800c62e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b40      	cmp	r3, #64	@ 0x40
 800c5c8:	d031      	beq.n	800c62e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	69db      	ldr	r3, [r3, #28]
 800c5d0:	f003 0308 	and.w	r3, r3, #8
 800c5d4:	2b08      	cmp	r3, #8
 800c5d6:	d110      	bne.n	800c5fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2208      	movs	r2, #8
 800c5de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f000 f839 	bl	800c658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2208      	movs	r2, #8
 800c5ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e029      	b.n	800c64e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	69db      	ldr	r3, [r3, #28]
 800c600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c608:	d111      	bne.n	800c62e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 f81f 	bl	800c658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2220      	movs	r2, #32
 800c61e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c62a:	2303      	movs	r3, #3
 800c62c:	e00f      	b.n	800c64e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	69da      	ldr	r2, [r3, #28]
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	4013      	ands	r3, r2
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	bf0c      	ite	eq
 800c63e:	2301      	moveq	r3, #1
 800c640:	2300      	movne	r3, #0
 800c642:	b2db      	uxtb	r3, r3
 800c644:	461a      	mov	r2, r3
 800c646:	79fb      	ldrb	r3, [r7, #7]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d0a0      	beq.n	800c58e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
	...

0800c658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c658:	b480      	push	{r7}
 800c65a:	b095      	sub	sp, #84	@ 0x54
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c668:	e853 3f00 	ldrex	r3, [r3]
 800c66c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	461a      	mov	r2, r3
 800c67c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c67e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c680:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c682:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c684:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c686:	e841 2300 	strex	r3, r2, [r1]
 800c68a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1e6      	bne.n	800c660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3308      	adds	r3, #8
 800c698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	e853 3f00 	ldrex	r3, [r3]
 800c6a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6a2:	69fa      	ldr	r2, [r7, #28]
 800c6a4:	4b1e      	ldr	r3, [pc, #120]	@ (800c720 <UART_EndRxTransfer+0xc8>)
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6ba:	e841 2300 	strex	r3, r2, [r1]
 800c6be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1e5      	bne.n	800c692 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d118      	bne.n	800c700 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	e853 3f00 	ldrex	r3, [r3]
 800c6da:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	f023 0310 	bic.w	r3, r3, #16
 800c6e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ec:	61bb      	str	r3, [r7, #24]
 800c6ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f0:	6979      	ldr	r1, [r7, #20]
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	e841 2300 	strex	r3, r2, [r1]
 800c6f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e6      	bne.n	800c6ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2220      	movs	r2, #32
 800c704:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c714:	bf00      	nop
 800c716:	3754      	adds	r7, #84	@ 0x54
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	effffffe 	.word	0xeffffffe

0800c724 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2200      	movs	r2, #0
 800c736:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7fe ff4c 	bl	800b5e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c748:	bf00      	nop
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b088      	sub	sp, #32
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	60bb      	str	r3, [r7, #8]
   return(result);
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	461a      	mov	r2, r3
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	61bb      	str	r3, [r7, #24]
 800c778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77a:	6979      	ldr	r1, [r7, #20]
 800c77c:	69ba      	ldr	r2, [r7, #24]
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	613b      	str	r3, [r7, #16]
   return(result);
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e6      	bne.n	800c758 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2220      	movs	r2, #32
 800c78e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7fe ff17 	bl	800b5cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c79e:	bf00      	nop
 800c7a0:	3720      	adds	r7, #32
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c7ae:	bf00      	nop
 800c7b0:	370c      	adds	r7, #12
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr

0800c7ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	b083      	sub	sp, #12
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c7c2:	bf00      	nop
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b083      	sub	sp, #12
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c7d6:	bf00      	nop
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b085      	sub	sp, #20
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d101      	bne.n	800c7f8 <HAL_UARTEx_DisableFifoMode+0x16>
 800c7f4:	2302      	movs	r3, #2
 800c7f6:	e027      	b.n	800c848 <HAL_UARTEx_DisableFifoMode+0x66>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2224      	movs	r2, #36	@ 0x24
 800c804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f022 0201 	bic.w	r2, r2, #1
 800c81e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c826:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2220      	movs	r2, #32
 800c83a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c864:	2b01      	cmp	r3, #1
 800c866:	d101      	bne.n	800c86c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c868:	2302      	movs	r3, #2
 800c86a:	e02d      	b.n	800c8c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2224      	movs	r2, #36	@ 0x24
 800c878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f022 0201 	bic.w	r2, r2, #1
 800c892:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	430a      	orrs	r2, r1
 800c8a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f84f 	bl	800c94c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2220      	movs	r2, #32
 800c8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d101      	bne.n	800c8e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e02d      	b.n	800c944 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2224      	movs	r2, #36	@ 0x24
 800c8f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f022 0201 	bic.w	r2, r2, #1
 800c90e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	430a      	orrs	r2, r1
 800c922:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 f811 	bl	800c94c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2220      	movs	r2, #32
 800c936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d108      	bne.n	800c96e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2201      	movs	r2, #1
 800c968:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c96c:	e031      	b.n	800c9d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c96e:	2310      	movs	r3, #16
 800c970:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c972:	2310      	movs	r3, #16
 800c974:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	0e5b      	lsrs	r3, r3, #25
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	f003 0307 	and.w	r3, r3, #7
 800c984:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	0f5b      	lsrs	r3, r3, #29
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	f003 0307 	and.w	r3, r3, #7
 800c994:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c996:	7bbb      	ldrb	r3, [r7, #14]
 800c998:	7b3a      	ldrb	r2, [r7, #12]
 800c99a:	4911      	ldr	r1, [pc, #68]	@ (800c9e0 <UARTEx_SetNbDataToProcess+0x94>)
 800c99c:	5c8a      	ldrb	r2, [r1, r2]
 800c99e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c9a2:	7b3a      	ldrb	r2, [r7, #12]
 800c9a4:	490f      	ldr	r1, [pc, #60]	@ (800c9e4 <UARTEx_SetNbDataToProcess+0x98>)
 800c9a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	7b7a      	ldrb	r2, [r7, #13]
 800c9b8:	4909      	ldr	r1, [pc, #36]	@ (800c9e0 <UARTEx_SetNbDataToProcess+0x94>)
 800c9ba:	5c8a      	ldrb	r2, [r1, r2]
 800c9bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9c0:	7b7a      	ldrb	r2, [r7, #13]
 800c9c2:	4908      	ldr	r1, [pc, #32]	@ (800c9e4 <UARTEx_SetNbDataToProcess+0x98>)
 800c9c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c9d2:	bf00      	nop
 800c9d4:	3714      	adds	r7, #20
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	080122a4 	.word	0x080122a4
 800c9e4:	080122ac 	.word	0x080122ac

0800c9e8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c9e8:	b084      	sub	sp, #16
 800c9ea:	b480      	push	{r7}
 800c9ec:	b085      	sub	sp, #20
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	f107 001c 	add.w	r0, r7, #28
 800c9f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c9fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ca00:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ca02:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ca04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800ca06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ca08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800ca0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ca0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800ca0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	4313      	orrs	r3, r2
 800ca14:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	685a      	ldr	r2, [r3, #4]
 800ca1a:	4b07      	ldr	r3, [pc, #28]	@ (800ca38 <SDMMC_Init+0x50>)
 800ca1c:	4013      	ands	r3, r2
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	431a      	orrs	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	b004      	add	sp, #16
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	ffc02c00 	.word	0xffc02c00

0800ca3c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ca56:	b480      	push	{r7}
 800ca58:	b083      	sub	sp, #12
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f043 0203 	orr.w	r2, r3, #3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ca8c:	2300      	movs	r3, #0
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	370c      	adds	r7, #12
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr

0800ca9a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ca9a:	b480      	push	{r7}
 800ca9c:	b083      	sub	sp, #12
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 0303 	and.w	r3, r3, #3
}
 800caaa:	4618      	mov	r0, r3
 800caac:	370c      	adds	r7, #12
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
	...

0800cab8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cad6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800cadc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800cae2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	68da      	ldr	r2, [r3, #12]
 800caee:	4b06      	ldr	r3, [pc, #24]	@ (800cb08 <SDMMC_SendCommand+0x50>)
 800caf0:	4013      	ands	r3, r2
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	431a      	orrs	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	fffee0c0 	.word	0xfffee0c0

0800cb0c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	b2db      	uxtb	r3, r3
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cb26:	b480      	push	{r7}
 800cb28:	b085      	sub	sp, #20
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
 800cb2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	3314      	adds	r3, #20
 800cb34:	461a      	mov	r2, r3
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	4413      	add	r3, r2
 800cb3a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3714      	adds	r7, #20
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	685a      	ldr	r2, [r3, #4]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cb72:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800cb78:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800cb7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	431a      	orrs	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cb96:	2300      	movs	r3, #0

}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3714      	adds	r7, #20
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b088      	sub	sp, #32
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cbb2:	2310      	movs	r3, #16
 800cbb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbc6:	f107 0308 	add.w	r3, r7, #8
 800cbca:	4619      	mov	r1, r3
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7ff ff73 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cbd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbd6:	2110      	movs	r1, #16
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 fa5f 	bl	800d09c <SDMMC_GetCmdResp1>
 800cbde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3720      	adds	r7, #32
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b088      	sub	sp, #32
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cbf8:	2311      	movs	r3, #17
 800cbfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc02:	2300      	movs	r3, #0
 800cc04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc0c:	f107 0308 	add.w	r3, r7, #8
 800cc10:	4619      	mov	r1, r3
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7ff ff50 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cc18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc1c:	2111      	movs	r1, #17
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fa3c 	bl	800d09c <SDMMC_GetCmdResp1>
 800cc24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc26:	69fb      	ldr	r3, [r7, #28]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3720      	adds	r7, #32
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b088      	sub	sp, #32
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cc3e:	2312      	movs	r3, #18
 800cc40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc52:	f107 0308 	add.w	r3, r7, #8
 800cc56:	4619      	mov	r1, r3
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff ff2d 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cc5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc62:	2112      	movs	r1, #18
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fa19 	bl	800d09c <SDMMC_GetCmdResp1>
 800cc6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc6c:	69fb      	ldr	r3, [r7, #28]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3720      	adds	r7, #32
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b088      	sub	sp, #32
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cc84:	2318      	movs	r3, #24
 800cc86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc98:	f107 0308 	add.w	r3, r7, #8
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7ff ff0a 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cca8:	2118      	movs	r1, #24
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f9f6 	bl	800d09c <SDMMC_GetCmdResp1>
 800ccb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccb2:	69fb      	ldr	r3, [r7, #28]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3720      	adds	r7, #32
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b088      	sub	sp, #32
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ccca:	2319      	movs	r3, #25
 800cccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ccd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccde:	f107 0308 	add.w	r3, r7, #8
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7ff fee7 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ccea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccee:	2119      	movs	r1, #25
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 f9d3 	bl	800d09c <SDMMC_GetCmdResp1>
 800ccf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3720      	adds	r7, #32
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
	...

0800cd04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b088      	sub	sp, #32
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd10:	230c      	movs	r3, #12
 800cd12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd22:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd3c:	f107 0308 	add.w	r3, r7, #8
 800cd40:	4619      	mov	r1, r3
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7ff feb8 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cd48:	4a0b      	ldr	r2, [pc, #44]	@ (800cd78 <SDMMC_CmdStopTransfer+0x74>)
 800cd4a:	210c      	movs	r1, #12
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f9a5 	bl	800d09c <SDMMC_GetCmdResp1>
 800cd52:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd66:	d101      	bne.n	800cd6c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3720      	adds	r7, #32
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	05f5e100 	.word	0x05f5e100

0800cd7c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cd8a:	2307      	movs	r3, #7
 800cd8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd94:	2300      	movs	r3, #0
 800cd96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd9e:	f107 0308 	add.w	r3, r7, #8
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7ff fe87 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cdaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdae:	2107      	movs	r1, #7
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 f973 	bl	800d09c <SDMMC_GetCmdResp1>
 800cdb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdb8:	69fb      	ldr	r3, [r7, #28]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3720      	adds	r7, #32
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b088      	sub	sp, #32
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cdde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cde0:	f107 0308 	add.w	r3, r7, #8
 800cde4:	4619      	mov	r1, r3
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f7ff fe66 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 fb97 	bl	800d520 <SDMMC_GetCmdError>
 800cdf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdf4:	69fb      	ldr	r3, [r7, #28]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3720      	adds	r7, #32
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b088      	sub	sp, #32
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce06:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ce0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce0c:	2308      	movs	r3, #8
 800ce0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce16:	2300      	movs	r3, #0
 800ce18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce20:	f107 0308 	add.w	r3, r7, #8
 800ce24:	4619      	mov	r1, r3
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff fe46 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fb29 	bl	800d484 <SDMMC_GetCmdResp7>
 800ce32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce34:	69fb      	ldr	r3, [r7, #28]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3720      	adds	r7, #32
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b088      	sub	sp, #32
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ce4c:	2337      	movs	r3, #55	@ 0x37
 800ce4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce56:	2300      	movs	r3, #0
 800ce58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce60:	f107 0308 	add.w	r3, r7, #8
 800ce64:	4619      	mov	r1, r3
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7ff fe26 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ce6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce70:	2137      	movs	r1, #55	@ 0x37
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 f912 	bl	800d09c <SDMMC_GetCmdResp1>
 800ce78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce7a:	69fb      	ldr	r3, [r7, #28]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3720      	adds	r7, #32
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b088      	sub	sp, #32
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ce92:	2329      	movs	r3, #41	@ 0x29
 800ce94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cea4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cea6:	f107 0308 	add.w	r3, r7, #8
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7ff fe03 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fa2e 	bl	800d314 <SDMMC_GetCmdResp3>
 800ceb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceba:	69fb      	ldr	r3, [r7, #28]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3720      	adds	r7, #32
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ced2:	2306      	movs	r3, #6
 800ced4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ced6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ceda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cedc:	2300      	movs	r3, #0
 800cede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cee4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cee6:	f107 0308 	add.w	r3, r7, #8
 800ceea:	4619      	mov	r1, r3
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f7ff fde3 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cef6:	2106      	movs	r1, #6
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f8cf 	bl	800d09c <SDMMC_GetCmdResp1>
 800cefe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf00:	69fb      	ldr	r3, [r7, #28]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3720      	adds	r7, #32
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b088      	sub	sp, #32
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cf12:	2300      	movs	r3, #0
 800cf14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cf16:	2333      	movs	r3, #51	@ 0x33
 800cf18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf20:	2300      	movs	r3, #0
 800cf22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf2a:	f107 0308 	add.w	r3, r7, #8
 800cf2e:	4619      	mov	r1, r3
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7ff fdc1 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cf36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf3a:	2133      	movs	r1, #51	@ 0x33
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f8ad 	bl	800d09c <SDMMC_GetCmdResp1>
 800cf42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf44:	69fb      	ldr	r3, [r7, #28]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3720      	adds	r7, #32
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b088      	sub	sp, #32
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cf56:	2300      	movs	r3, #0
 800cf58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf5a:	2302      	movs	r3, #2
 800cf5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cf62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf64:	2300      	movs	r3, #0
 800cf66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf6e:	f107 0308 	add.w	r3, r7, #8
 800cf72:	4619      	mov	r1, r3
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7ff fd9f 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f980 	bl	800d280 <SDMMC_GetCmdResp2>
 800cf80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf82:	69fb      	ldr	r3, [r7, #28]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3720      	adds	r7, #32
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b088      	sub	sp, #32
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cf9a:	2309      	movs	r3, #9
 800cf9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cfa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7ff fd7f 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 f960 	bl	800d280 <SDMMC_GetCmdResp2>
 800cfc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfc2:	69fb      	ldr	r3, [r7, #28]
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3720      	adds	r7, #32
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b088      	sub	sp, #32
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cfda:	2303      	movs	r3, #3
 800cfdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cfe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfee:	f107 0308 	add.w	r3, r7, #8
 800cff2:	4619      	mov	r1, r3
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7ff fd5f 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	2103      	movs	r1, #3
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f9c8 	bl	800d394 <SDMMC_GetCmdResp6>
 800d004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d006:	69fb      	ldr	r3, [r7, #28]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3720      	adds	r7, #32
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b088      	sub	sp, #32
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d01e:	230d      	movs	r3, #13
 800d020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d022:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d028:	2300      	movs	r3, #0
 800d02a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d02c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d030:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d032:	f107 0308 	add.w	r3, r7, #8
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7ff fd3d 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d03e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d042:	210d      	movs	r1, #13
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f829 	bl	800d09c <SDMMC_GetCmdResp1>
 800d04a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d04c:	69fb      	ldr	r3, [r7, #28]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3720      	adds	r7, #32
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b088      	sub	sp, #32
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d05e:	2300      	movs	r3, #0
 800d060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d062:	230d      	movs	r3, #13
 800d064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d066:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d06a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d06c:	2300      	movs	r3, #0
 800d06e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d074:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d076:	f107 0308 	add.w	r3, r7, #8
 800d07a:	4619      	mov	r1, r3
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f7ff fd1b 	bl	800cab8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d082:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d086:	210d      	movs	r1, #13
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f807 	bl	800d09c <SDMMC_GetCmdResp1>
 800d08e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d090:	69fb      	ldr	r3, [r7, #28]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3720      	adds	r7, #32
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
	...

0800d09c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b088      	sub	sp, #32
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	607a      	str	r2, [r7, #4]
 800d0a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d0aa:	4b70      	ldr	r3, [pc, #448]	@ (800d26c <SDMMC_GetCmdResp1+0x1d0>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a70      	ldr	r2, [pc, #448]	@ (800d270 <SDMMC_GetCmdResp1+0x1d4>)
 800d0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0b4:	0a5a      	lsrs	r2, r3, #9
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	fb02 f303 	mul.w	r3, r2, r3
 800d0bc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	1e5a      	subs	r2, r3, #1
 800d0c2:	61fa      	str	r2, [r7, #28]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d102      	bne.n	800d0ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d0cc:	e0c9      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0d2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d0d4:	69ba      	ldr	r2, [r7, #24]
 800d0d6:	4b67      	ldr	r3, [pc, #412]	@ (800d274 <SDMMC_GetCmdResp1+0x1d8>)
 800d0d8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d0ef      	beq.n	800d0be <SDMMC_GetCmdResp1+0x22>
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d1ea      	bne.n	800d0be <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ec:	f003 0304 	and.w	r3, r3, #4
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d004      	beq.n	800d0fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2204      	movs	r2, #4
 800d0f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0fa:	2304      	movs	r3, #4
 800d0fc:	e0b1      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d102:	f003 0301 	and.w	r3, r3, #1
 800d106:	2b00      	cmp	r3, #0
 800d108:	d004      	beq.n	800d114 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2201      	movs	r2, #1
 800d10e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d110:	2301      	movs	r3, #1
 800d112:	e0a6      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	4a58      	ldr	r2, [pc, #352]	@ (800d278 <SDMMC_GetCmdResp1+0x1dc>)
 800d118:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f7ff fcf6 	bl	800cb0c <SDMMC_GetCommandResponse>
 800d120:	4603      	mov	r3, r0
 800d122:	461a      	mov	r2, r3
 800d124:	7afb      	ldrb	r3, [r7, #11]
 800d126:	4293      	cmp	r3, r2
 800d128:	d001      	beq.n	800d12e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e099      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d12e:	2100      	movs	r1, #0
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7ff fcf8 	bl	800cb26 <SDMMC_GetResponse>
 800d136:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	4b50      	ldr	r3, [pc, #320]	@ (800d27c <SDMMC_GetCmdResp1+0x1e0>)
 800d13c:	4013      	ands	r3, r2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d142:	2300      	movs	r3, #0
 800d144:	e08d      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	da02      	bge.n	800d152 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d14c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d150:	e087      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d001      	beq.n	800d160 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d15c:	2340      	movs	r3, #64	@ 0x40
 800d15e:	e080      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d166:	2b00      	cmp	r3, #0
 800d168:	d001      	beq.n	800d16e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d16a:	2380      	movs	r3, #128	@ 0x80
 800d16c:	e079      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d174:	2b00      	cmp	r3, #0
 800d176:	d002      	beq.n	800d17e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d178:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d17c:	e071      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d184:	2b00      	cmp	r3, #0
 800d186:	d002      	beq.n	800d18e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d18c:	e069      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d194:	2b00      	cmp	r3, #0
 800d196:	d002      	beq.n	800d19e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d198:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d19c:	e061      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d1a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d1ac:	e059      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d002      	beq.n	800d1be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d1b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1bc:	e051      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d002      	beq.n	800d1ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d1c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d1cc:	e049      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d002      	beq.n	800d1de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d1d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d1dc:	e041      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d002      	beq.n	800d1ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d1e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1ec:	e039      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d1f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d1fc:	e031      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d002      	beq.n	800d20e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d208:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d20c:	e029      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d218:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d21c:	e021      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d228:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d22c:	e019      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d238:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d23c:	e011      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d248:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d24c:	e009      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	f003 0308 	and.w	r3, r3, #8
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d258:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d25c:	e001      	b.n	800d262 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d25e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d262:	4618      	mov	r0, r3
 800d264:	3720      	adds	r7, #32
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	24000004 	.word	0x24000004
 800d270:	10624dd3 	.word	0x10624dd3
 800d274:	00200045 	.word	0x00200045
 800d278:	002000c5 	.word	0x002000c5
 800d27c:	fdffe008 	.word	0xfdffe008

0800d280 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d288:	4b1f      	ldr	r3, [pc, #124]	@ (800d308 <SDMMC_GetCmdResp2+0x88>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a1f      	ldr	r2, [pc, #124]	@ (800d30c <SDMMC_GetCmdResp2+0x8c>)
 800d28e:	fba2 2303 	umull	r2, r3, r2, r3
 800d292:	0a5b      	lsrs	r3, r3, #9
 800d294:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d298:	fb02 f303 	mul.w	r3, r2, r3
 800d29c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	1e5a      	subs	r2, r3, #1
 800d2a2:	60fa      	str	r2, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d102      	bne.n	800d2ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2ac:	e026      	b.n	800d2fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d0ef      	beq.n	800d29e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1ea      	bne.n	800d29e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2cc:	f003 0304 	and.w	r3, r3, #4
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d004      	beq.n	800d2de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2204      	movs	r2, #4
 800d2d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2da:	2304      	movs	r3, #4
 800d2dc:	e00e      	b.n	800d2fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d004      	beq.n	800d2f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e003      	b.n	800d2fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a06      	ldr	r2, [pc, #24]	@ (800d310 <SDMMC_GetCmdResp2+0x90>)
 800d2f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	24000004 	.word	0x24000004
 800d30c:	10624dd3 	.word	0x10624dd3
 800d310:	002000c5 	.word	0x002000c5

0800d314 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d314:	b480      	push	{r7}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d31c:	4b1a      	ldr	r3, [pc, #104]	@ (800d388 <SDMMC_GetCmdResp3+0x74>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a1a      	ldr	r2, [pc, #104]	@ (800d38c <SDMMC_GetCmdResp3+0x78>)
 800d322:	fba2 2303 	umull	r2, r3, r2, r3
 800d326:	0a5b      	lsrs	r3, r3, #9
 800d328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d32c:	fb02 f303 	mul.w	r3, r2, r3
 800d330:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	1e5a      	subs	r2, r3, #1
 800d336:	60fa      	str	r2, [r7, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d33c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d340:	e01b      	b.n	800d37a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d346:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d0ef      	beq.n	800d332 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1ea      	bne.n	800d332 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d004      	beq.n	800d372 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2204      	movs	r2, #4
 800d36c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d36e:	2304      	movs	r3, #4
 800d370:	e003      	b.n	800d37a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a06      	ldr	r2, [pc, #24]	@ (800d390 <SDMMC_GetCmdResp3+0x7c>)
 800d376:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	24000004 	.word	0x24000004
 800d38c:	10624dd3 	.word	0x10624dd3
 800d390:	002000c5 	.word	0x002000c5

0800d394 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b088      	sub	sp, #32
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	460b      	mov	r3, r1
 800d39e:	607a      	str	r2, [r7, #4]
 800d3a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d3a2:	4b35      	ldr	r3, [pc, #212]	@ (800d478 <SDMMC_GetCmdResp6+0xe4>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a35      	ldr	r2, [pc, #212]	@ (800d47c <SDMMC_GetCmdResp6+0xe8>)
 800d3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ac:	0a5b      	lsrs	r3, r3, #9
 800d3ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3b2:	fb02 f303 	mul.w	r3, r2, r3
 800d3b6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	1e5a      	subs	r2, r3, #1
 800d3bc:	61fa      	str	r2, [r7, #28]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d102      	bne.n	800d3c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3c6:	e052      	b.n	800d46e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3cc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d0ef      	beq.n	800d3b8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1ea      	bne.n	800d3b8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3e6:	f003 0304 	and.w	r3, r3, #4
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d004      	beq.n	800d3f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2204      	movs	r2, #4
 800d3f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3f4:	2304      	movs	r3, #4
 800d3f6:	e03a      	b.n	800d46e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	2b00      	cmp	r3, #0
 800d402:	d004      	beq.n	800d40e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2201      	movs	r2, #1
 800d408:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e02f      	b.n	800d46e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f7ff fb7c 	bl	800cb0c <SDMMC_GetCommandResponse>
 800d414:	4603      	mov	r3, r0
 800d416:	461a      	mov	r2, r3
 800d418:	7afb      	ldrb	r3, [r7, #11]
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d001      	beq.n	800d422 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d41e:	2301      	movs	r3, #1
 800d420:	e025      	b.n	800d46e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	4a16      	ldr	r2, [pc, #88]	@ (800d480 <SDMMC_GetCmdResp6+0xec>)
 800d426:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d428:	2100      	movs	r1, #0
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f7ff fb7b 	bl	800cb26 <SDMMC_GetResponse>
 800d430:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d106      	bne.n	800d44a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	0c1b      	lsrs	r3, r3, #16
 800d440:	b29a      	uxth	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d446:	2300      	movs	r3, #0
 800d448:	e011      	b.n	800d46e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d454:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d458:	e009      	b.n	800d46e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d460:	2b00      	cmp	r3, #0
 800d462:	d002      	beq.n	800d46a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d468:	e001      	b.n	800d46e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d46a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3720      	adds	r7, #32
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	24000004 	.word	0x24000004
 800d47c:	10624dd3 	.word	0x10624dd3
 800d480:	002000c5 	.word	0x002000c5

0800d484 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d48c:	4b22      	ldr	r3, [pc, #136]	@ (800d518 <SDMMC_GetCmdResp7+0x94>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a22      	ldr	r2, [pc, #136]	@ (800d51c <SDMMC_GetCmdResp7+0x98>)
 800d492:	fba2 2303 	umull	r2, r3, r2, r3
 800d496:	0a5b      	lsrs	r3, r3, #9
 800d498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d49c:	fb02 f303 	mul.w	r3, r2, r3
 800d4a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	1e5a      	subs	r2, r3, #1
 800d4a6:	60fa      	str	r2, [r7, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d102      	bne.n	800d4b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d4b0:	e02c      	b.n	800d50c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d0ef      	beq.n	800d4a2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1ea      	bne.n	800d4a2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4d0:	f003 0304 	and.w	r3, r3, #4
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d004      	beq.n	800d4e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2204      	movs	r2, #4
 800d4dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4de:	2304      	movs	r3, #4
 800d4e0:	e014      	b.n	800d50c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d004      	beq.n	800d4f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e009      	b.n	800d50c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2240      	movs	r2, #64	@ 0x40
 800d508:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d50a:	2300      	movs	r3, #0

}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	24000004 	.word	0x24000004
 800d51c:	10624dd3 	.word	0x10624dd3

0800d520 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d528:	4b11      	ldr	r3, [pc, #68]	@ (800d570 <SDMMC_GetCmdError+0x50>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a11      	ldr	r2, [pc, #68]	@ (800d574 <SDMMC_GetCmdError+0x54>)
 800d52e:	fba2 2303 	umull	r2, r3, r2, r3
 800d532:	0a5b      	lsrs	r3, r3, #9
 800d534:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d538:	fb02 f303 	mul.w	r3, r2, r3
 800d53c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	1e5a      	subs	r2, r3, #1
 800d542:	60fa      	str	r2, [r7, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d102      	bne.n	800d54e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d548:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d54c:	e009      	b.n	800d562 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d556:	2b00      	cmp	r3, #0
 800d558:	d0f1      	beq.n	800d53e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a06      	ldr	r2, [pc, #24]	@ (800d578 <SDMMC_GetCmdError+0x58>)
 800d55e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d560:	2300      	movs	r3, #0
}
 800d562:	4618      	mov	r0, r3
 800d564:	3714      	adds	r7, #20
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	24000004 	.word	0x24000004
 800d574:	10624dd3 	.word	0x10624dd3
 800d578:	002000c5 	.word	0x002000c5

0800d57c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d580:	4904      	ldr	r1, [pc, #16]	@ (800d594 <MX_FATFS_Init+0x18>)
 800d582:	4805      	ldr	r0, [pc, #20]	@ (800d598 <MX_FATFS_Init+0x1c>)
 800d584:	f000 f9e4 	bl	800d950 <FATFS_LinkDriver>
 800d588:	4603      	mov	r3, r0
 800d58a:	461a      	mov	r2, r3
 800d58c:	4b03      	ldr	r3, [pc, #12]	@ (800d59c <MX_FATFS_Init+0x20>)
 800d58e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d590:	bf00      	nop
 800d592:	bd80      	pop	{r7, pc}
 800d594:	24000bd8 	.word	0x24000bd8
 800d598:	080122b4 	.word	0x080122b4
 800d59c:	24000bd4 	.word	0x24000bd4

0800d5a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d5aa:	f000 f879 	bl	800d6a0 <BSP_SD_IsDetected>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d001      	beq.n	800d5b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	e012      	b.n	800d5de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d5b8:	480b      	ldr	r0, [pc, #44]	@ (800d5e8 <BSP_SD_Init+0x48>)
 800d5ba:	f7fb fe7d 	bl	80092b8 <HAL_SD_Init>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d5c2:	79fb      	ldrb	r3, [r7, #7]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d109      	bne.n	800d5dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d5c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d5cc:	4806      	ldr	r0, [pc, #24]	@ (800d5e8 <BSP_SD_Init+0x48>)
 800d5ce:	f7fc fd39 	bl	800a044 <HAL_SD_ConfigWideBusOperation>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d001      	beq.n	800d5dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	24000534 	.word	0x24000534

0800d5ec <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b088      	sub	sp, #32
 800d5f0:	af02      	add	r7, sp, #8
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	607a      	str	r2, [r7, #4]
 800d5f8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	68ba      	ldr	r2, [r7, #8]
 800d606:	68f9      	ldr	r1, [r7, #12]
 800d608:	4806      	ldr	r0, [pc, #24]	@ (800d624 <BSP_SD_ReadBlocks+0x38>)
 800d60a:	f7fb ff75 	bl	80094f8 <HAL_SD_ReadBlocks>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d618:	7dfb      	ldrb	r3, [r7, #23]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	24000534 	.word	0x24000534

0800d628 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b088      	sub	sp, #32
 800d62c:	af02      	add	r7, sp, #8
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
 800d634:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	68f9      	ldr	r1, [r7, #12]
 800d644:	4806      	ldr	r0, [pc, #24]	@ (800d660 <BSP_SD_WriteBlocks+0x38>)
 800d646:	f7fc f8e1 	bl	800980c <HAL_SD_WriteBlocks>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d654:	7dfb      	ldrb	r3, [r7, #23]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3718      	adds	r7, #24
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	24000534 	.word	0x24000534

0800d664 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d668:	4805      	ldr	r0, [pc, #20]	@ (800d680 <BSP_SD_GetCardState+0x1c>)
 800d66a:	f7fc fdfd 	bl	800a268 <HAL_SD_GetCardState>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b04      	cmp	r3, #4
 800d672:	bf14      	ite	ne
 800d674:	2301      	movne	r3, #1
 800d676:	2300      	moveq	r3, #0
 800d678:	b2db      	uxtb	r3, r3
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	24000534 	.word	0x24000534

0800d684 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d68c:	6879      	ldr	r1, [r7, #4]
 800d68e:	4803      	ldr	r0, [pc, #12]	@ (800d69c <BSP_SD_GetCardInfo+0x18>)
 800d690:	f7fc fcac 	bl	8009fec <HAL_SD_GetCardInfo>
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	24000534 	.word	0x24000534

0800d6a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d6aa:	f000 f80b 	bl	800d6c4 <BSP_PlatformIsDetected>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d6b8:	79fb      	ldrb	r3, [r7, #7]
 800d6ba:	b2db      	uxtb	r3, r3
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d6ce:	2180      	movs	r1, #128	@ 0x80
 800d6d0:	4806      	ldr	r0, [pc, #24]	@ (800d6ec <BSP_PlatformIsDetected+0x28>)
 800d6d2:	f7f7 fc51 	bl	8004f78 <HAL_GPIO_ReadPin>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d001      	beq.n	800d6e0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d6e0:	79fb      	ldrb	r3, [r7, #7]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	58020800 	.word	0x58020800

0800d6f0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d728 <SD_CheckStatus+0x38>)
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d700:	f7ff ffb0 	bl	800d664 <BSP_SD_GetCardState>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d107      	bne.n	800d71a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d70a:	4b07      	ldr	r3, [pc, #28]	@ (800d728 <SD_CheckStatus+0x38>)
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	f023 0301 	bic.w	r3, r3, #1
 800d714:	b2da      	uxtb	r2, r3
 800d716:	4b04      	ldr	r3, [pc, #16]	@ (800d728 <SD_CheckStatus+0x38>)
 800d718:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d71a:	4b03      	ldr	r3, [pc, #12]	@ (800d728 <SD_CheckStatus+0x38>)
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	b2db      	uxtb	r3, r3
}
 800d720:	4618      	mov	r0, r3
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	24000019 	.word	0x24000019

0800d72c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	4603      	mov	r3, r0
 800d734:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d736:	4b0b      	ldr	r3, [pc, #44]	@ (800d764 <SD_initialize+0x38>)
 800d738:	2201      	movs	r2, #1
 800d73a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d73c:	f7ff ff30 	bl	800d5a0 <BSP_SD_Init>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d107      	bne.n	800d756 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	4618      	mov	r0, r3
 800d74a:	f7ff ffd1 	bl	800d6f0 <SD_CheckStatus>
 800d74e:	4603      	mov	r3, r0
 800d750:	461a      	mov	r2, r3
 800d752:	4b04      	ldr	r3, [pc, #16]	@ (800d764 <SD_initialize+0x38>)
 800d754:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d756:	4b03      	ldr	r3, [pc, #12]	@ (800d764 <SD_initialize+0x38>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	b2db      	uxtb	r3, r3
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	24000019 	.word	0x24000019

0800d768 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	4618      	mov	r0, r3
 800d776:	f7ff ffbb 	bl	800d6f0 <SD_CheckStatus>
 800d77a:	4603      	mov	r3, r0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60b9      	str	r1, [r7, #8]
 800d78c:	607a      	str	r2, [r7, #4]
 800d78e:	603b      	str	r3, [r7, #0]
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d794:	2301      	movs	r3, #1
 800d796:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d798:	f04f 33ff 	mov.w	r3, #4294967295
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	6879      	ldr	r1, [r7, #4]
 800d7a0:	68b8      	ldr	r0, [r7, #8]
 800d7a2:	f7ff ff23 	bl	800d5ec <BSP_SD_ReadBlocks>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d107      	bne.n	800d7bc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d7ac:	bf00      	nop
 800d7ae:	f7ff ff59 	bl	800d664 <BSP_SD_GetCardState>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1fa      	bne.n	800d7ae <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b086      	sub	sp, #24
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
 800d7d0:	603b      	str	r3, [r7, #0]
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d7da:	f04f 33ff 	mov.w	r3, #4294967295
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	6879      	ldr	r1, [r7, #4]
 800d7e2:	68b8      	ldr	r0, [r7, #8]
 800d7e4:	f7ff ff20 	bl	800d628 <BSP_SD_WriteBlocks>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d107      	bne.n	800d7fe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d7ee:	bf00      	nop
 800d7f0:	f7ff ff38 	bl	800d664 <BSP_SD_GetCardState>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1fa      	bne.n	800d7f0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3718      	adds	r7, #24
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b08c      	sub	sp, #48	@ 0x30
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	4603      	mov	r3, r0
 800d810:	603a      	str	r2, [r7, #0]
 800d812:	71fb      	strb	r3, [r7, #7]
 800d814:	460b      	mov	r3, r1
 800d816:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d818:	2301      	movs	r3, #1
 800d81a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d81e:	4b25      	ldr	r3, [pc, #148]	@ (800d8b4 <SD_ioctl+0xac>)
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d001      	beq.n	800d830 <SD_ioctl+0x28>
 800d82c:	2303      	movs	r3, #3
 800d82e:	e03c      	b.n	800d8aa <SD_ioctl+0xa2>

  switch (cmd)
 800d830:	79bb      	ldrb	r3, [r7, #6]
 800d832:	2b03      	cmp	r3, #3
 800d834:	d834      	bhi.n	800d8a0 <SD_ioctl+0x98>
 800d836:	a201      	add	r2, pc, #4	@ (adr r2, 800d83c <SD_ioctl+0x34>)
 800d838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d83c:	0800d84d 	.word	0x0800d84d
 800d840:	0800d855 	.word	0x0800d855
 800d844:	0800d86d 	.word	0x0800d86d
 800d848:	0800d887 	.word	0x0800d887
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d852:	e028      	b.n	800d8a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d854:	f107 0308 	add.w	r3, r7, #8
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff ff13 	bl	800d684 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d85e:	6a3a      	ldr	r2, [r7, #32]
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d86a:	e01c      	b.n	800d8a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d86c:	f107 0308 	add.w	r3, r7, #8
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff ff07 	bl	800d684 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d878:	b29a      	uxth	r2, r3
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d884:	e00f      	b.n	800d8a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d886:	f107 0308 	add.w	r3, r7, #8
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fefa 	bl	800d684 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d892:	0a5a      	lsrs	r2, r3, #9
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d89e:	e002      	b.n	800d8a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d8a0:	2304      	movs	r3, #4
 800d8a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3730      	adds	r7, #48	@ 0x30
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	24000019 	.word	0x24000019

0800d8b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b087      	sub	sp, #28
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d8ce:	4b1f      	ldr	r3, [pc, #124]	@ (800d94c <FATFS_LinkDriverEx+0x94>)
 800d8d0:	7a5b      	ldrb	r3, [r3, #9]
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d131      	bne.n	800d93c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d8d8:	4b1c      	ldr	r3, [pc, #112]	@ (800d94c <FATFS_LinkDriverEx+0x94>)
 800d8da:	7a5b      	ldrb	r3, [r3, #9]
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	461a      	mov	r2, r3
 800d8e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d94c <FATFS_LinkDriverEx+0x94>)
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d8e6:	4b19      	ldr	r3, [pc, #100]	@ (800d94c <FATFS_LinkDriverEx+0x94>)
 800d8e8:	7a5b      	ldrb	r3, [r3, #9]
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	4a17      	ldr	r2, [pc, #92]	@ (800d94c <FATFS_LinkDriverEx+0x94>)
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	4413      	add	r3, r2
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d8f6:	4b15      	ldr	r3, [pc, #84]	@ (800d94c <FATFS_LinkDriverEx+0x94>)
 800d8f8:	7a5b      	ldrb	r3, [r3, #9]
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	4b13      	ldr	r3, [pc, #76]	@ (800d94c <FATFS_LinkDriverEx+0x94>)
 800d900:	4413      	add	r3, r2
 800d902:	79fa      	ldrb	r2, [r7, #7]
 800d904:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d906:	4b11      	ldr	r3, [pc, #68]	@ (800d94c <FATFS_LinkDriverEx+0x94>)
 800d908:	7a5b      	ldrb	r3, [r3, #9]
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	1c5a      	adds	r2, r3, #1
 800d90e:	b2d1      	uxtb	r1, r2
 800d910:	4a0e      	ldr	r2, [pc, #56]	@ (800d94c <FATFS_LinkDriverEx+0x94>)
 800d912:	7251      	strb	r1, [r2, #9]
 800d914:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d916:	7dbb      	ldrb	r3, [r7, #22]
 800d918:	3330      	adds	r3, #48	@ 0x30
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	3301      	adds	r3, #1
 800d924:	223a      	movs	r2, #58	@ 0x3a
 800d926:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	3302      	adds	r3, #2
 800d92c:	222f      	movs	r2, #47	@ 0x2f
 800d92e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	3303      	adds	r3, #3
 800d934:	2200      	movs	r2, #0
 800d936:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d938:	2300      	movs	r3, #0
 800d93a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	371c      	adds	r7, #28
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr
 800d94a:	bf00      	nop
 800d94c:	24000bdc 	.word	0x24000bdc

0800d950 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d95a:	2200      	movs	r2, #0
 800d95c:	6839      	ldr	r1, [r7, #0]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7ff ffaa 	bl	800d8b8 <FATFS_LinkDriverEx>
 800d964:	4603      	mov	r3, r0
}
 800d966:	4618      	mov	r0, r3
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <__cvt>:
 800d96e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d970:	ed2d 8b02 	vpush	{d8}
 800d974:	eeb0 8b40 	vmov.f64	d8, d0
 800d978:	b085      	sub	sp, #20
 800d97a:	4617      	mov	r7, r2
 800d97c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d97e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d980:	ee18 2a90 	vmov	r2, s17
 800d984:	f025 0520 	bic.w	r5, r5, #32
 800d988:	2a00      	cmp	r2, #0
 800d98a:	bfb6      	itet	lt
 800d98c:	222d      	movlt	r2, #45	@ 0x2d
 800d98e:	2200      	movge	r2, #0
 800d990:	eeb1 8b40 	vneglt.f64	d8, d0
 800d994:	2d46      	cmp	r5, #70	@ 0x46
 800d996:	460c      	mov	r4, r1
 800d998:	701a      	strb	r2, [r3, #0]
 800d99a:	d004      	beq.n	800d9a6 <__cvt+0x38>
 800d99c:	2d45      	cmp	r5, #69	@ 0x45
 800d99e:	d100      	bne.n	800d9a2 <__cvt+0x34>
 800d9a0:	3401      	adds	r4, #1
 800d9a2:	2102      	movs	r1, #2
 800d9a4:	e000      	b.n	800d9a8 <__cvt+0x3a>
 800d9a6:	2103      	movs	r1, #3
 800d9a8:	ab03      	add	r3, sp, #12
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	ab02      	add	r3, sp, #8
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	4622      	mov	r2, r4
 800d9b2:	4633      	mov	r3, r6
 800d9b4:	eeb0 0b48 	vmov.f64	d0, d8
 800d9b8:	f001 f966 	bl	800ec88 <_dtoa_r>
 800d9bc:	2d47      	cmp	r5, #71	@ 0x47
 800d9be:	d114      	bne.n	800d9ea <__cvt+0x7c>
 800d9c0:	07fb      	lsls	r3, r7, #31
 800d9c2:	d50a      	bpl.n	800d9da <__cvt+0x6c>
 800d9c4:	1902      	adds	r2, r0, r4
 800d9c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ce:	bf08      	it	eq
 800d9d0:	9203      	streq	r2, [sp, #12]
 800d9d2:	2130      	movs	r1, #48	@ 0x30
 800d9d4:	9b03      	ldr	r3, [sp, #12]
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d319      	bcc.n	800da0e <__cvt+0xa0>
 800d9da:	9b03      	ldr	r3, [sp, #12]
 800d9dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9de:	1a1b      	subs	r3, r3, r0
 800d9e0:	6013      	str	r3, [r2, #0]
 800d9e2:	b005      	add	sp, #20
 800d9e4:	ecbd 8b02 	vpop	{d8}
 800d9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ea:	2d46      	cmp	r5, #70	@ 0x46
 800d9ec:	eb00 0204 	add.w	r2, r0, r4
 800d9f0:	d1e9      	bne.n	800d9c6 <__cvt+0x58>
 800d9f2:	7803      	ldrb	r3, [r0, #0]
 800d9f4:	2b30      	cmp	r3, #48	@ 0x30
 800d9f6:	d107      	bne.n	800da08 <__cvt+0x9a>
 800d9f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da00:	bf1c      	itt	ne
 800da02:	f1c4 0401 	rsbne	r4, r4, #1
 800da06:	6034      	strne	r4, [r6, #0]
 800da08:	6833      	ldr	r3, [r6, #0]
 800da0a:	441a      	add	r2, r3
 800da0c:	e7db      	b.n	800d9c6 <__cvt+0x58>
 800da0e:	1c5c      	adds	r4, r3, #1
 800da10:	9403      	str	r4, [sp, #12]
 800da12:	7019      	strb	r1, [r3, #0]
 800da14:	e7de      	b.n	800d9d4 <__cvt+0x66>

0800da16 <__exponent>:
 800da16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da18:	2900      	cmp	r1, #0
 800da1a:	bfba      	itte	lt
 800da1c:	4249      	neglt	r1, r1
 800da1e:	232d      	movlt	r3, #45	@ 0x2d
 800da20:	232b      	movge	r3, #43	@ 0x2b
 800da22:	2909      	cmp	r1, #9
 800da24:	7002      	strb	r2, [r0, #0]
 800da26:	7043      	strb	r3, [r0, #1]
 800da28:	dd29      	ble.n	800da7e <__exponent+0x68>
 800da2a:	f10d 0307 	add.w	r3, sp, #7
 800da2e:	461d      	mov	r5, r3
 800da30:	270a      	movs	r7, #10
 800da32:	461a      	mov	r2, r3
 800da34:	fbb1 f6f7 	udiv	r6, r1, r7
 800da38:	fb07 1416 	mls	r4, r7, r6, r1
 800da3c:	3430      	adds	r4, #48	@ 0x30
 800da3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800da42:	460c      	mov	r4, r1
 800da44:	2c63      	cmp	r4, #99	@ 0x63
 800da46:	f103 33ff 	add.w	r3, r3, #4294967295
 800da4a:	4631      	mov	r1, r6
 800da4c:	dcf1      	bgt.n	800da32 <__exponent+0x1c>
 800da4e:	3130      	adds	r1, #48	@ 0x30
 800da50:	1e94      	subs	r4, r2, #2
 800da52:	f803 1c01 	strb.w	r1, [r3, #-1]
 800da56:	1c41      	adds	r1, r0, #1
 800da58:	4623      	mov	r3, r4
 800da5a:	42ab      	cmp	r3, r5
 800da5c:	d30a      	bcc.n	800da74 <__exponent+0x5e>
 800da5e:	f10d 0309 	add.w	r3, sp, #9
 800da62:	1a9b      	subs	r3, r3, r2
 800da64:	42ac      	cmp	r4, r5
 800da66:	bf88      	it	hi
 800da68:	2300      	movhi	r3, #0
 800da6a:	3302      	adds	r3, #2
 800da6c:	4403      	add	r3, r0
 800da6e:	1a18      	subs	r0, r3, r0
 800da70:	b003      	add	sp, #12
 800da72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da74:	f813 6b01 	ldrb.w	r6, [r3], #1
 800da78:	f801 6f01 	strb.w	r6, [r1, #1]!
 800da7c:	e7ed      	b.n	800da5a <__exponent+0x44>
 800da7e:	2330      	movs	r3, #48	@ 0x30
 800da80:	3130      	adds	r1, #48	@ 0x30
 800da82:	7083      	strb	r3, [r0, #2]
 800da84:	70c1      	strb	r1, [r0, #3]
 800da86:	1d03      	adds	r3, r0, #4
 800da88:	e7f1      	b.n	800da6e <__exponent+0x58>
 800da8a:	0000      	movs	r0, r0
 800da8c:	0000      	movs	r0, r0
	...

0800da90 <_printf_float>:
 800da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da94:	b08d      	sub	sp, #52	@ 0x34
 800da96:	460c      	mov	r4, r1
 800da98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800da9c:	4616      	mov	r6, r2
 800da9e:	461f      	mov	r7, r3
 800daa0:	4605      	mov	r5, r0
 800daa2:	f000 ffdb 	bl	800ea5c <_localeconv_r>
 800daa6:	f8d0 b000 	ldr.w	fp, [r0]
 800daaa:	4658      	mov	r0, fp
 800daac:	f7f2 fc80 	bl	80003b0 <strlen>
 800dab0:	2300      	movs	r3, #0
 800dab2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dab4:	f8d8 3000 	ldr.w	r3, [r8]
 800dab8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dabc:	6822      	ldr	r2, [r4, #0]
 800dabe:	9005      	str	r0, [sp, #20]
 800dac0:	3307      	adds	r3, #7
 800dac2:	f023 0307 	bic.w	r3, r3, #7
 800dac6:	f103 0108 	add.w	r1, r3, #8
 800daca:	f8c8 1000 	str.w	r1, [r8]
 800dace:	ed93 0b00 	vldr	d0, [r3]
 800dad2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800dd30 <_printf_float+0x2a0>
 800dad6:	eeb0 7bc0 	vabs.f64	d7, d0
 800dada:	eeb4 7b46 	vcmp.f64	d7, d6
 800dade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800dae6:	dd24      	ble.n	800db32 <_printf_float+0xa2>
 800dae8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800daec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf0:	d502      	bpl.n	800daf8 <_printf_float+0x68>
 800daf2:	232d      	movs	r3, #45	@ 0x2d
 800daf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daf8:	498f      	ldr	r1, [pc, #572]	@ (800dd38 <_printf_float+0x2a8>)
 800dafa:	4b90      	ldr	r3, [pc, #576]	@ (800dd3c <_printf_float+0x2ac>)
 800dafc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800db00:	bf94      	ite	ls
 800db02:	4688      	movls	r8, r1
 800db04:	4698      	movhi	r8, r3
 800db06:	f022 0204 	bic.w	r2, r2, #4
 800db0a:	2303      	movs	r3, #3
 800db0c:	6123      	str	r3, [r4, #16]
 800db0e:	6022      	str	r2, [r4, #0]
 800db10:	f04f 0a00 	mov.w	sl, #0
 800db14:	9700      	str	r7, [sp, #0]
 800db16:	4633      	mov	r3, r6
 800db18:	aa0b      	add	r2, sp, #44	@ 0x2c
 800db1a:	4621      	mov	r1, r4
 800db1c:	4628      	mov	r0, r5
 800db1e:	f000 f9d1 	bl	800dec4 <_printf_common>
 800db22:	3001      	adds	r0, #1
 800db24:	f040 8089 	bne.w	800dc3a <_printf_float+0x1aa>
 800db28:	f04f 30ff 	mov.w	r0, #4294967295
 800db2c:	b00d      	add	sp, #52	@ 0x34
 800db2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db32:	eeb4 0b40 	vcmp.f64	d0, d0
 800db36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3a:	d709      	bvc.n	800db50 <_printf_float+0xc0>
 800db3c:	ee10 3a90 	vmov	r3, s1
 800db40:	2b00      	cmp	r3, #0
 800db42:	bfbc      	itt	lt
 800db44:	232d      	movlt	r3, #45	@ 0x2d
 800db46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800db4a:	497d      	ldr	r1, [pc, #500]	@ (800dd40 <_printf_float+0x2b0>)
 800db4c:	4b7d      	ldr	r3, [pc, #500]	@ (800dd44 <_printf_float+0x2b4>)
 800db4e:	e7d5      	b.n	800dafc <_printf_float+0x6c>
 800db50:	6863      	ldr	r3, [r4, #4]
 800db52:	1c59      	adds	r1, r3, #1
 800db54:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800db58:	d139      	bne.n	800dbce <_printf_float+0x13e>
 800db5a:	2306      	movs	r3, #6
 800db5c:	6063      	str	r3, [r4, #4]
 800db5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800db62:	2300      	movs	r3, #0
 800db64:	6022      	str	r2, [r4, #0]
 800db66:	9303      	str	r3, [sp, #12]
 800db68:	ab0a      	add	r3, sp, #40	@ 0x28
 800db6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800db6e:	ab09      	add	r3, sp, #36	@ 0x24
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	6861      	ldr	r1, [r4, #4]
 800db74:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800db78:	4628      	mov	r0, r5
 800db7a:	f7ff fef8 	bl	800d96e <__cvt>
 800db7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800db82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db84:	4680      	mov	r8, r0
 800db86:	d129      	bne.n	800dbdc <_printf_float+0x14c>
 800db88:	1cc8      	adds	r0, r1, #3
 800db8a:	db02      	blt.n	800db92 <_printf_float+0x102>
 800db8c:	6863      	ldr	r3, [r4, #4]
 800db8e:	4299      	cmp	r1, r3
 800db90:	dd41      	ble.n	800dc16 <_printf_float+0x186>
 800db92:	f1a9 0902 	sub.w	r9, r9, #2
 800db96:	fa5f f989 	uxtb.w	r9, r9
 800db9a:	3901      	subs	r1, #1
 800db9c:	464a      	mov	r2, r9
 800db9e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dba2:	9109      	str	r1, [sp, #36]	@ 0x24
 800dba4:	f7ff ff37 	bl	800da16 <__exponent>
 800dba8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbaa:	1813      	adds	r3, r2, r0
 800dbac:	2a01      	cmp	r2, #1
 800dbae:	4682      	mov	sl, r0
 800dbb0:	6123      	str	r3, [r4, #16]
 800dbb2:	dc02      	bgt.n	800dbba <_printf_float+0x12a>
 800dbb4:	6822      	ldr	r2, [r4, #0]
 800dbb6:	07d2      	lsls	r2, r2, #31
 800dbb8:	d501      	bpl.n	800dbbe <_printf_float+0x12e>
 800dbba:	3301      	adds	r3, #1
 800dbbc:	6123      	str	r3, [r4, #16]
 800dbbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d0a6      	beq.n	800db14 <_printf_float+0x84>
 800dbc6:	232d      	movs	r3, #45	@ 0x2d
 800dbc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbcc:	e7a2      	b.n	800db14 <_printf_float+0x84>
 800dbce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dbd2:	d1c4      	bne.n	800db5e <_printf_float+0xce>
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1c2      	bne.n	800db5e <_printf_float+0xce>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	e7bf      	b.n	800db5c <_printf_float+0xcc>
 800dbdc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800dbe0:	d9db      	bls.n	800db9a <_printf_float+0x10a>
 800dbe2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800dbe6:	d118      	bne.n	800dc1a <_printf_float+0x18a>
 800dbe8:	2900      	cmp	r1, #0
 800dbea:	6863      	ldr	r3, [r4, #4]
 800dbec:	dd0b      	ble.n	800dc06 <_printf_float+0x176>
 800dbee:	6121      	str	r1, [r4, #16]
 800dbf0:	b913      	cbnz	r3, 800dbf8 <_printf_float+0x168>
 800dbf2:	6822      	ldr	r2, [r4, #0]
 800dbf4:	07d0      	lsls	r0, r2, #31
 800dbf6:	d502      	bpl.n	800dbfe <_printf_float+0x16e>
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	440b      	add	r3, r1
 800dbfc:	6123      	str	r3, [r4, #16]
 800dbfe:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dc00:	f04f 0a00 	mov.w	sl, #0
 800dc04:	e7db      	b.n	800dbbe <_printf_float+0x12e>
 800dc06:	b913      	cbnz	r3, 800dc0e <_printf_float+0x17e>
 800dc08:	6822      	ldr	r2, [r4, #0]
 800dc0a:	07d2      	lsls	r2, r2, #31
 800dc0c:	d501      	bpl.n	800dc12 <_printf_float+0x182>
 800dc0e:	3302      	adds	r3, #2
 800dc10:	e7f4      	b.n	800dbfc <_printf_float+0x16c>
 800dc12:	2301      	movs	r3, #1
 800dc14:	e7f2      	b.n	800dbfc <_printf_float+0x16c>
 800dc16:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800dc1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc1c:	4299      	cmp	r1, r3
 800dc1e:	db05      	blt.n	800dc2c <_printf_float+0x19c>
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	6121      	str	r1, [r4, #16]
 800dc24:	07d8      	lsls	r0, r3, #31
 800dc26:	d5ea      	bpl.n	800dbfe <_printf_float+0x16e>
 800dc28:	1c4b      	adds	r3, r1, #1
 800dc2a:	e7e7      	b.n	800dbfc <_printf_float+0x16c>
 800dc2c:	2900      	cmp	r1, #0
 800dc2e:	bfd4      	ite	le
 800dc30:	f1c1 0202 	rsble	r2, r1, #2
 800dc34:	2201      	movgt	r2, #1
 800dc36:	4413      	add	r3, r2
 800dc38:	e7e0      	b.n	800dbfc <_printf_float+0x16c>
 800dc3a:	6823      	ldr	r3, [r4, #0]
 800dc3c:	055a      	lsls	r2, r3, #21
 800dc3e:	d407      	bmi.n	800dc50 <_printf_float+0x1c0>
 800dc40:	6923      	ldr	r3, [r4, #16]
 800dc42:	4642      	mov	r2, r8
 800dc44:	4631      	mov	r1, r6
 800dc46:	4628      	mov	r0, r5
 800dc48:	47b8      	blx	r7
 800dc4a:	3001      	adds	r0, #1
 800dc4c:	d12a      	bne.n	800dca4 <_printf_float+0x214>
 800dc4e:	e76b      	b.n	800db28 <_printf_float+0x98>
 800dc50:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800dc54:	f240 80e0 	bls.w	800de18 <_printf_float+0x388>
 800dc58:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800dc5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc64:	d133      	bne.n	800dcce <_printf_float+0x23e>
 800dc66:	4a38      	ldr	r2, [pc, #224]	@ (800dd48 <_printf_float+0x2b8>)
 800dc68:	2301      	movs	r3, #1
 800dc6a:	4631      	mov	r1, r6
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	47b8      	blx	r7
 800dc70:	3001      	adds	r0, #1
 800dc72:	f43f af59 	beq.w	800db28 <_printf_float+0x98>
 800dc76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dc7a:	4543      	cmp	r3, r8
 800dc7c:	db02      	blt.n	800dc84 <_printf_float+0x1f4>
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	07d8      	lsls	r0, r3, #31
 800dc82:	d50f      	bpl.n	800dca4 <_printf_float+0x214>
 800dc84:	9b05      	ldr	r3, [sp, #20]
 800dc86:	465a      	mov	r2, fp
 800dc88:	4631      	mov	r1, r6
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	47b8      	blx	r7
 800dc8e:	3001      	adds	r0, #1
 800dc90:	f43f af4a 	beq.w	800db28 <_printf_float+0x98>
 800dc94:	f04f 0900 	mov.w	r9, #0
 800dc98:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc9c:	f104 0a1a 	add.w	sl, r4, #26
 800dca0:	45c8      	cmp	r8, r9
 800dca2:	dc09      	bgt.n	800dcb8 <_printf_float+0x228>
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	079b      	lsls	r3, r3, #30
 800dca8:	f100 8107 	bmi.w	800deba <_printf_float+0x42a>
 800dcac:	68e0      	ldr	r0, [r4, #12]
 800dcae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcb0:	4298      	cmp	r0, r3
 800dcb2:	bfb8      	it	lt
 800dcb4:	4618      	movlt	r0, r3
 800dcb6:	e739      	b.n	800db2c <_printf_float+0x9c>
 800dcb8:	2301      	movs	r3, #1
 800dcba:	4652      	mov	r2, sl
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	47b8      	blx	r7
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	f43f af30 	beq.w	800db28 <_printf_float+0x98>
 800dcc8:	f109 0901 	add.w	r9, r9, #1
 800dccc:	e7e8      	b.n	800dca0 <_printf_float+0x210>
 800dcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	dc3b      	bgt.n	800dd4c <_printf_float+0x2bc>
 800dcd4:	4a1c      	ldr	r2, [pc, #112]	@ (800dd48 <_printf_float+0x2b8>)
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	4631      	mov	r1, r6
 800dcda:	4628      	mov	r0, r5
 800dcdc:	47b8      	blx	r7
 800dcde:	3001      	adds	r0, #1
 800dce0:	f43f af22 	beq.w	800db28 <_printf_float+0x98>
 800dce4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dce8:	ea59 0303 	orrs.w	r3, r9, r3
 800dcec:	d102      	bne.n	800dcf4 <_printf_float+0x264>
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	07d9      	lsls	r1, r3, #31
 800dcf2:	d5d7      	bpl.n	800dca4 <_printf_float+0x214>
 800dcf4:	9b05      	ldr	r3, [sp, #20]
 800dcf6:	465a      	mov	r2, fp
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b8      	blx	r7
 800dcfe:	3001      	adds	r0, #1
 800dd00:	f43f af12 	beq.w	800db28 <_printf_float+0x98>
 800dd04:	f04f 0a00 	mov.w	sl, #0
 800dd08:	f104 0b1a 	add.w	fp, r4, #26
 800dd0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0e:	425b      	negs	r3, r3
 800dd10:	4553      	cmp	r3, sl
 800dd12:	dc01      	bgt.n	800dd18 <_printf_float+0x288>
 800dd14:	464b      	mov	r3, r9
 800dd16:	e794      	b.n	800dc42 <_printf_float+0x1b2>
 800dd18:	2301      	movs	r3, #1
 800dd1a:	465a      	mov	r2, fp
 800dd1c:	4631      	mov	r1, r6
 800dd1e:	4628      	mov	r0, r5
 800dd20:	47b8      	blx	r7
 800dd22:	3001      	adds	r0, #1
 800dd24:	f43f af00 	beq.w	800db28 <_printf_float+0x98>
 800dd28:	f10a 0a01 	add.w	sl, sl, #1
 800dd2c:	e7ee      	b.n	800dd0c <_printf_float+0x27c>
 800dd2e:	bf00      	nop
 800dd30:	ffffffff 	.word	0xffffffff
 800dd34:	7fefffff 	.word	0x7fefffff
 800dd38:	080122c8 	.word	0x080122c8
 800dd3c:	080122cc 	.word	0x080122cc
 800dd40:	080122d0 	.word	0x080122d0
 800dd44:	080122d4 	.word	0x080122d4
 800dd48:	080122d8 	.word	0x080122d8
 800dd4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd52:	4553      	cmp	r3, sl
 800dd54:	bfa8      	it	ge
 800dd56:	4653      	movge	r3, sl
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	4699      	mov	r9, r3
 800dd5c:	dc37      	bgt.n	800ddce <_printf_float+0x33e>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	9307      	str	r3, [sp, #28]
 800dd62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd66:	f104 021a 	add.w	r2, r4, #26
 800dd6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd6c:	9907      	ldr	r1, [sp, #28]
 800dd6e:	9306      	str	r3, [sp, #24]
 800dd70:	eba3 0309 	sub.w	r3, r3, r9
 800dd74:	428b      	cmp	r3, r1
 800dd76:	dc31      	bgt.n	800dddc <_printf_float+0x34c>
 800dd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd7a:	459a      	cmp	sl, r3
 800dd7c:	dc3b      	bgt.n	800ddf6 <_printf_float+0x366>
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	07da      	lsls	r2, r3, #31
 800dd82:	d438      	bmi.n	800ddf6 <_printf_float+0x366>
 800dd84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd86:	ebaa 0903 	sub.w	r9, sl, r3
 800dd8a:	9b06      	ldr	r3, [sp, #24]
 800dd8c:	ebaa 0303 	sub.w	r3, sl, r3
 800dd90:	4599      	cmp	r9, r3
 800dd92:	bfa8      	it	ge
 800dd94:	4699      	movge	r9, r3
 800dd96:	f1b9 0f00 	cmp.w	r9, #0
 800dd9a:	dc34      	bgt.n	800de06 <_printf_float+0x376>
 800dd9c:	f04f 0800 	mov.w	r8, #0
 800dda0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dda4:	f104 0b1a 	add.w	fp, r4, #26
 800dda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddaa:	ebaa 0303 	sub.w	r3, sl, r3
 800ddae:	eba3 0309 	sub.w	r3, r3, r9
 800ddb2:	4543      	cmp	r3, r8
 800ddb4:	f77f af76 	ble.w	800dca4 <_printf_float+0x214>
 800ddb8:	2301      	movs	r3, #1
 800ddba:	465a      	mov	r2, fp
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	47b8      	blx	r7
 800ddc2:	3001      	adds	r0, #1
 800ddc4:	f43f aeb0 	beq.w	800db28 <_printf_float+0x98>
 800ddc8:	f108 0801 	add.w	r8, r8, #1
 800ddcc:	e7ec      	b.n	800dda8 <_printf_float+0x318>
 800ddce:	4642      	mov	r2, r8
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	47b8      	blx	r7
 800ddd6:	3001      	adds	r0, #1
 800ddd8:	d1c1      	bne.n	800dd5e <_printf_float+0x2ce>
 800ddda:	e6a5      	b.n	800db28 <_printf_float+0x98>
 800dddc:	2301      	movs	r3, #1
 800ddde:	4631      	mov	r1, r6
 800dde0:	4628      	mov	r0, r5
 800dde2:	9206      	str	r2, [sp, #24]
 800dde4:	47b8      	blx	r7
 800dde6:	3001      	adds	r0, #1
 800dde8:	f43f ae9e 	beq.w	800db28 <_printf_float+0x98>
 800ddec:	9b07      	ldr	r3, [sp, #28]
 800ddee:	9a06      	ldr	r2, [sp, #24]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	9307      	str	r3, [sp, #28]
 800ddf4:	e7b9      	b.n	800dd6a <_printf_float+0x2da>
 800ddf6:	9b05      	ldr	r3, [sp, #20]
 800ddf8:	465a      	mov	r2, fp
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b8      	blx	r7
 800de00:	3001      	adds	r0, #1
 800de02:	d1bf      	bne.n	800dd84 <_printf_float+0x2f4>
 800de04:	e690      	b.n	800db28 <_printf_float+0x98>
 800de06:	9a06      	ldr	r2, [sp, #24]
 800de08:	464b      	mov	r3, r9
 800de0a:	4442      	add	r2, r8
 800de0c:	4631      	mov	r1, r6
 800de0e:	4628      	mov	r0, r5
 800de10:	47b8      	blx	r7
 800de12:	3001      	adds	r0, #1
 800de14:	d1c2      	bne.n	800dd9c <_printf_float+0x30c>
 800de16:	e687      	b.n	800db28 <_printf_float+0x98>
 800de18:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800de1c:	f1b9 0f01 	cmp.w	r9, #1
 800de20:	dc01      	bgt.n	800de26 <_printf_float+0x396>
 800de22:	07db      	lsls	r3, r3, #31
 800de24:	d536      	bpl.n	800de94 <_printf_float+0x404>
 800de26:	2301      	movs	r3, #1
 800de28:	4642      	mov	r2, r8
 800de2a:	4631      	mov	r1, r6
 800de2c:	4628      	mov	r0, r5
 800de2e:	47b8      	blx	r7
 800de30:	3001      	adds	r0, #1
 800de32:	f43f ae79 	beq.w	800db28 <_printf_float+0x98>
 800de36:	9b05      	ldr	r3, [sp, #20]
 800de38:	465a      	mov	r2, fp
 800de3a:	4631      	mov	r1, r6
 800de3c:	4628      	mov	r0, r5
 800de3e:	47b8      	blx	r7
 800de40:	3001      	adds	r0, #1
 800de42:	f43f ae71 	beq.w	800db28 <_printf_float+0x98>
 800de46:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800de4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de52:	f109 39ff 	add.w	r9, r9, #4294967295
 800de56:	d018      	beq.n	800de8a <_printf_float+0x3fa>
 800de58:	464b      	mov	r3, r9
 800de5a:	f108 0201 	add.w	r2, r8, #1
 800de5e:	4631      	mov	r1, r6
 800de60:	4628      	mov	r0, r5
 800de62:	47b8      	blx	r7
 800de64:	3001      	adds	r0, #1
 800de66:	d10c      	bne.n	800de82 <_printf_float+0x3f2>
 800de68:	e65e      	b.n	800db28 <_printf_float+0x98>
 800de6a:	2301      	movs	r3, #1
 800de6c:	465a      	mov	r2, fp
 800de6e:	4631      	mov	r1, r6
 800de70:	4628      	mov	r0, r5
 800de72:	47b8      	blx	r7
 800de74:	3001      	adds	r0, #1
 800de76:	f43f ae57 	beq.w	800db28 <_printf_float+0x98>
 800de7a:	f108 0801 	add.w	r8, r8, #1
 800de7e:	45c8      	cmp	r8, r9
 800de80:	dbf3      	blt.n	800de6a <_printf_float+0x3da>
 800de82:	4653      	mov	r3, sl
 800de84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800de88:	e6dc      	b.n	800dc44 <_printf_float+0x1b4>
 800de8a:	f04f 0800 	mov.w	r8, #0
 800de8e:	f104 0b1a 	add.w	fp, r4, #26
 800de92:	e7f4      	b.n	800de7e <_printf_float+0x3ee>
 800de94:	2301      	movs	r3, #1
 800de96:	4642      	mov	r2, r8
 800de98:	e7e1      	b.n	800de5e <_printf_float+0x3ce>
 800de9a:	2301      	movs	r3, #1
 800de9c:	464a      	mov	r2, r9
 800de9e:	4631      	mov	r1, r6
 800dea0:	4628      	mov	r0, r5
 800dea2:	47b8      	blx	r7
 800dea4:	3001      	adds	r0, #1
 800dea6:	f43f ae3f 	beq.w	800db28 <_printf_float+0x98>
 800deaa:	f108 0801 	add.w	r8, r8, #1
 800deae:	68e3      	ldr	r3, [r4, #12]
 800deb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800deb2:	1a5b      	subs	r3, r3, r1
 800deb4:	4543      	cmp	r3, r8
 800deb6:	dcf0      	bgt.n	800de9a <_printf_float+0x40a>
 800deb8:	e6f8      	b.n	800dcac <_printf_float+0x21c>
 800deba:	f04f 0800 	mov.w	r8, #0
 800debe:	f104 0919 	add.w	r9, r4, #25
 800dec2:	e7f4      	b.n	800deae <_printf_float+0x41e>

0800dec4 <_printf_common>:
 800dec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dec8:	4616      	mov	r6, r2
 800deca:	4698      	mov	r8, r3
 800decc:	688a      	ldr	r2, [r1, #8]
 800dece:	690b      	ldr	r3, [r1, #16]
 800ded0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ded4:	4293      	cmp	r3, r2
 800ded6:	bfb8      	it	lt
 800ded8:	4613      	movlt	r3, r2
 800deda:	6033      	str	r3, [r6, #0]
 800dedc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dee0:	4607      	mov	r7, r0
 800dee2:	460c      	mov	r4, r1
 800dee4:	b10a      	cbz	r2, 800deea <_printf_common+0x26>
 800dee6:	3301      	adds	r3, #1
 800dee8:	6033      	str	r3, [r6, #0]
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	0699      	lsls	r1, r3, #26
 800deee:	bf42      	ittt	mi
 800def0:	6833      	ldrmi	r3, [r6, #0]
 800def2:	3302      	addmi	r3, #2
 800def4:	6033      	strmi	r3, [r6, #0]
 800def6:	6825      	ldr	r5, [r4, #0]
 800def8:	f015 0506 	ands.w	r5, r5, #6
 800defc:	d106      	bne.n	800df0c <_printf_common+0x48>
 800defe:	f104 0a19 	add.w	sl, r4, #25
 800df02:	68e3      	ldr	r3, [r4, #12]
 800df04:	6832      	ldr	r2, [r6, #0]
 800df06:	1a9b      	subs	r3, r3, r2
 800df08:	42ab      	cmp	r3, r5
 800df0a:	dc26      	bgt.n	800df5a <_printf_common+0x96>
 800df0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df10:	6822      	ldr	r2, [r4, #0]
 800df12:	3b00      	subs	r3, #0
 800df14:	bf18      	it	ne
 800df16:	2301      	movne	r3, #1
 800df18:	0692      	lsls	r2, r2, #26
 800df1a:	d42b      	bmi.n	800df74 <_printf_common+0xb0>
 800df1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df20:	4641      	mov	r1, r8
 800df22:	4638      	mov	r0, r7
 800df24:	47c8      	blx	r9
 800df26:	3001      	adds	r0, #1
 800df28:	d01e      	beq.n	800df68 <_printf_common+0xa4>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	6922      	ldr	r2, [r4, #16]
 800df2e:	f003 0306 	and.w	r3, r3, #6
 800df32:	2b04      	cmp	r3, #4
 800df34:	bf02      	ittt	eq
 800df36:	68e5      	ldreq	r5, [r4, #12]
 800df38:	6833      	ldreq	r3, [r6, #0]
 800df3a:	1aed      	subeq	r5, r5, r3
 800df3c:	68a3      	ldr	r3, [r4, #8]
 800df3e:	bf0c      	ite	eq
 800df40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df44:	2500      	movne	r5, #0
 800df46:	4293      	cmp	r3, r2
 800df48:	bfc4      	itt	gt
 800df4a:	1a9b      	subgt	r3, r3, r2
 800df4c:	18ed      	addgt	r5, r5, r3
 800df4e:	2600      	movs	r6, #0
 800df50:	341a      	adds	r4, #26
 800df52:	42b5      	cmp	r5, r6
 800df54:	d11a      	bne.n	800df8c <_printf_common+0xc8>
 800df56:	2000      	movs	r0, #0
 800df58:	e008      	b.n	800df6c <_printf_common+0xa8>
 800df5a:	2301      	movs	r3, #1
 800df5c:	4652      	mov	r2, sl
 800df5e:	4641      	mov	r1, r8
 800df60:	4638      	mov	r0, r7
 800df62:	47c8      	blx	r9
 800df64:	3001      	adds	r0, #1
 800df66:	d103      	bne.n	800df70 <_printf_common+0xac>
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df70:	3501      	adds	r5, #1
 800df72:	e7c6      	b.n	800df02 <_printf_common+0x3e>
 800df74:	18e1      	adds	r1, r4, r3
 800df76:	1c5a      	adds	r2, r3, #1
 800df78:	2030      	movs	r0, #48	@ 0x30
 800df7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df7e:	4422      	add	r2, r4
 800df80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df88:	3302      	adds	r3, #2
 800df8a:	e7c7      	b.n	800df1c <_printf_common+0x58>
 800df8c:	2301      	movs	r3, #1
 800df8e:	4622      	mov	r2, r4
 800df90:	4641      	mov	r1, r8
 800df92:	4638      	mov	r0, r7
 800df94:	47c8      	blx	r9
 800df96:	3001      	adds	r0, #1
 800df98:	d0e6      	beq.n	800df68 <_printf_common+0xa4>
 800df9a:	3601      	adds	r6, #1
 800df9c:	e7d9      	b.n	800df52 <_printf_common+0x8e>
	...

0800dfa0 <_printf_i>:
 800dfa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa4:	7e0f      	ldrb	r7, [r1, #24]
 800dfa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfa8:	2f78      	cmp	r7, #120	@ 0x78
 800dfaa:	4691      	mov	r9, r2
 800dfac:	4680      	mov	r8, r0
 800dfae:	460c      	mov	r4, r1
 800dfb0:	469a      	mov	sl, r3
 800dfb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dfb6:	d807      	bhi.n	800dfc8 <_printf_i+0x28>
 800dfb8:	2f62      	cmp	r7, #98	@ 0x62
 800dfba:	d80a      	bhi.n	800dfd2 <_printf_i+0x32>
 800dfbc:	2f00      	cmp	r7, #0
 800dfbe:	f000 80d2 	beq.w	800e166 <_printf_i+0x1c6>
 800dfc2:	2f58      	cmp	r7, #88	@ 0x58
 800dfc4:	f000 80b9 	beq.w	800e13a <_printf_i+0x19a>
 800dfc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dfd0:	e03a      	b.n	800e048 <_printf_i+0xa8>
 800dfd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dfd6:	2b15      	cmp	r3, #21
 800dfd8:	d8f6      	bhi.n	800dfc8 <_printf_i+0x28>
 800dfda:	a101      	add	r1, pc, #4	@ (adr r1, 800dfe0 <_printf_i+0x40>)
 800dfdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfe0:	0800e039 	.word	0x0800e039
 800dfe4:	0800e04d 	.word	0x0800e04d
 800dfe8:	0800dfc9 	.word	0x0800dfc9
 800dfec:	0800dfc9 	.word	0x0800dfc9
 800dff0:	0800dfc9 	.word	0x0800dfc9
 800dff4:	0800dfc9 	.word	0x0800dfc9
 800dff8:	0800e04d 	.word	0x0800e04d
 800dffc:	0800dfc9 	.word	0x0800dfc9
 800e000:	0800dfc9 	.word	0x0800dfc9
 800e004:	0800dfc9 	.word	0x0800dfc9
 800e008:	0800dfc9 	.word	0x0800dfc9
 800e00c:	0800e14d 	.word	0x0800e14d
 800e010:	0800e077 	.word	0x0800e077
 800e014:	0800e107 	.word	0x0800e107
 800e018:	0800dfc9 	.word	0x0800dfc9
 800e01c:	0800dfc9 	.word	0x0800dfc9
 800e020:	0800e16f 	.word	0x0800e16f
 800e024:	0800dfc9 	.word	0x0800dfc9
 800e028:	0800e077 	.word	0x0800e077
 800e02c:	0800dfc9 	.word	0x0800dfc9
 800e030:	0800dfc9 	.word	0x0800dfc9
 800e034:	0800e10f 	.word	0x0800e10f
 800e038:	6833      	ldr	r3, [r6, #0]
 800e03a:	1d1a      	adds	r2, r3, #4
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	6032      	str	r2, [r6, #0]
 800e040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e044:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e048:	2301      	movs	r3, #1
 800e04a:	e09d      	b.n	800e188 <_printf_i+0x1e8>
 800e04c:	6833      	ldr	r3, [r6, #0]
 800e04e:	6820      	ldr	r0, [r4, #0]
 800e050:	1d19      	adds	r1, r3, #4
 800e052:	6031      	str	r1, [r6, #0]
 800e054:	0606      	lsls	r6, r0, #24
 800e056:	d501      	bpl.n	800e05c <_printf_i+0xbc>
 800e058:	681d      	ldr	r5, [r3, #0]
 800e05a:	e003      	b.n	800e064 <_printf_i+0xc4>
 800e05c:	0645      	lsls	r5, r0, #25
 800e05e:	d5fb      	bpl.n	800e058 <_printf_i+0xb8>
 800e060:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e064:	2d00      	cmp	r5, #0
 800e066:	da03      	bge.n	800e070 <_printf_i+0xd0>
 800e068:	232d      	movs	r3, #45	@ 0x2d
 800e06a:	426d      	negs	r5, r5
 800e06c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e070:	4859      	ldr	r0, [pc, #356]	@ (800e1d8 <_printf_i+0x238>)
 800e072:	230a      	movs	r3, #10
 800e074:	e011      	b.n	800e09a <_printf_i+0xfa>
 800e076:	6821      	ldr	r1, [r4, #0]
 800e078:	6833      	ldr	r3, [r6, #0]
 800e07a:	0608      	lsls	r0, r1, #24
 800e07c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e080:	d402      	bmi.n	800e088 <_printf_i+0xe8>
 800e082:	0649      	lsls	r1, r1, #25
 800e084:	bf48      	it	mi
 800e086:	b2ad      	uxthmi	r5, r5
 800e088:	2f6f      	cmp	r7, #111	@ 0x6f
 800e08a:	4853      	ldr	r0, [pc, #332]	@ (800e1d8 <_printf_i+0x238>)
 800e08c:	6033      	str	r3, [r6, #0]
 800e08e:	bf14      	ite	ne
 800e090:	230a      	movne	r3, #10
 800e092:	2308      	moveq	r3, #8
 800e094:	2100      	movs	r1, #0
 800e096:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e09a:	6866      	ldr	r6, [r4, #4]
 800e09c:	60a6      	str	r6, [r4, #8]
 800e09e:	2e00      	cmp	r6, #0
 800e0a0:	bfa2      	ittt	ge
 800e0a2:	6821      	ldrge	r1, [r4, #0]
 800e0a4:	f021 0104 	bicge.w	r1, r1, #4
 800e0a8:	6021      	strge	r1, [r4, #0]
 800e0aa:	b90d      	cbnz	r5, 800e0b0 <_printf_i+0x110>
 800e0ac:	2e00      	cmp	r6, #0
 800e0ae:	d04b      	beq.n	800e148 <_printf_i+0x1a8>
 800e0b0:	4616      	mov	r6, r2
 800e0b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0b6:	fb03 5711 	mls	r7, r3, r1, r5
 800e0ba:	5dc7      	ldrb	r7, [r0, r7]
 800e0bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0c0:	462f      	mov	r7, r5
 800e0c2:	42bb      	cmp	r3, r7
 800e0c4:	460d      	mov	r5, r1
 800e0c6:	d9f4      	bls.n	800e0b2 <_printf_i+0x112>
 800e0c8:	2b08      	cmp	r3, #8
 800e0ca:	d10b      	bne.n	800e0e4 <_printf_i+0x144>
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	07df      	lsls	r7, r3, #31
 800e0d0:	d508      	bpl.n	800e0e4 <_printf_i+0x144>
 800e0d2:	6923      	ldr	r3, [r4, #16]
 800e0d4:	6861      	ldr	r1, [r4, #4]
 800e0d6:	4299      	cmp	r1, r3
 800e0d8:	bfde      	ittt	le
 800e0da:	2330      	movle	r3, #48	@ 0x30
 800e0dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0e4:	1b92      	subs	r2, r2, r6
 800e0e6:	6122      	str	r2, [r4, #16]
 800e0e8:	f8cd a000 	str.w	sl, [sp]
 800e0ec:	464b      	mov	r3, r9
 800e0ee:	aa03      	add	r2, sp, #12
 800e0f0:	4621      	mov	r1, r4
 800e0f2:	4640      	mov	r0, r8
 800e0f4:	f7ff fee6 	bl	800dec4 <_printf_common>
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	d14a      	bne.n	800e192 <_printf_i+0x1f2>
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	b004      	add	sp, #16
 800e102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e106:	6823      	ldr	r3, [r4, #0]
 800e108:	f043 0320 	orr.w	r3, r3, #32
 800e10c:	6023      	str	r3, [r4, #0]
 800e10e:	4833      	ldr	r0, [pc, #204]	@ (800e1dc <_printf_i+0x23c>)
 800e110:	2778      	movs	r7, #120	@ 0x78
 800e112:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e116:	6823      	ldr	r3, [r4, #0]
 800e118:	6831      	ldr	r1, [r6, #0]
 800e11a:	061f      	lsls	r7, r3, #24
 800e11c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e120:	d402      	bmi.n	800e128 <_printf_i+0x188>
 800e122:	065f      	lsls	r7, r3, #25
 800e124:	bf48      	it	mi
 800e126:	b2ad      	uxthmi	r5, r5
 800e128:	6031      	str	r1, [r6, #0]
 800e12a:	07d9      	lsls	r1, r3, #31
 800e12c:	bf44      	itt	mi
 800e12e:	f043 0320 	orrmi.w	r3, r3, #32
 800e132:	6023      	strmi	r3, [r4, #0]
 800e134:	b11d      	cbz	r5, 800e13e <_printf_i+0x19e>
 800e136:	2310      	movs	r3, #16
 800e138:	e7ac      	b.n	800e094 <_printf_i+0xf4>
 800e13a:	4827      	ldr	r0, [pc, #156]	@ (800e1d8 <_printf_i+0x238>)
 800e13c:	e7e9      	b.n	800e112 <_printf_i+0x172>
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	f023 0320 	bic.w	r3, r3, #32
 800e144:	6023      	str	r3, [r4, #0]
 800e146:	e7f6      	b.n	800e136 <_printf_i+0x196>
 800e148:	4616      	mov	r6, r2
 800e14a:	e7bd      	b.n	800e0c8 <_printf_i+0x128>
 800e14c:	6833      	ldr	r3, [r6, #0]
 800e14e:	6825      	ldr	r5, [r4, #0]
 800e150:	6961      	ldr	r1, [r4, #20]
 800e152:	1d18      	adds	r0, r3, #4
 800e154:	6030      	str	r0, [r6, #0]
 800e156:	062e      	lsls	r6, r5, #24
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	d501      	bpl.n	800e160 <_printf_i+0x1c0>
 800e15c:	6019      	str	r1, [r3, #0]
 800e15e:	e002      	b.n	800e166 <_printf_i+0x1c6>
 800e160:	0668      	lsls	r0, r5, #25
 800e162:	d5fb      	bpl.n	800e15c <_printf_i+0x1bc>
 800e164:	8019      	strh	r1, [r3, #0]
 800e166:	2300      	movs	r3, #0
 800e168:	6123      	str	r3, [r4, #16]
 800e16a:	4616      	mov	r6, r2
 800e16c:	e7bc      	b.n	800e0e8 <_printf_i+0x148>
 800e16e:	6833      	ldr	r3, [r6, #0]
 800e170:	1d1a      	adds	r2, r3, #4
 800e172:	6032      	str	r2, [r6, #0]
 800e174:	681e      	ldr	r6, [r3, #0]
 800e176:	6862      	ldr	r2, [r4, #4]
 800e178:	2100      	movs	r1, #0
 800e17a:	4630      	mov	r0, r6
 800e17c:	f7f2 f8c8 	bl	8000310 <memchr>
 800e180:	b108      	cbz	r0, 800e186 <_printf_i+0x1e6>
 800e182:	1b80      	subs	r0, r0, r6
 800e184:	6060      	str	r0, [r4, #4]
 800e186:	6863      	ldr	r3, [r4, #4]
 800e188:	6123      	str	r3, [r4, #16]
 800e18a:	2300      	movs	r3, #0
 800e18c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e190:	e7aa      	b.n	800e0e8 <_printf_i+0x148>
 800e192:	6923      	ldr	r3, [r4, #16]
 800e194:	4632      	mov	r2, r6
 800e196:	4649      	mov	r1, r9
 800e198:	4640      	mov	r0, r8
 800e19a:	47d0      	blx	sl
 800e19c:	3001      	adds	r0, #1
 800e19e:	d0ad      	beq.n	800e0fc <_printf_i+0x15c>
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	079b      	lsls	r3, r3, #30
 800e1a4:	d413      	bmi.n	800e1ce <_printf_i+0x22e>
 800e1a6:	68e0      	ldr	r0, [r4, #12]
 800e1a8:	9b03      	ldr	r3, [sp, #12]
 800e1aa:	4298      	cmp	r0, r3
 800e1ac:	bfb8      	it	lt
 800e1ae:	4618      	movlt	r0, r3
 800e1b0:	e7a6      	b.n	800e100 <_printf_i+0x160>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	4649      	mov	r1, r9
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	47d0      	blx	sl
 800e1bc:	3001      	adds	r0, #1
 800e1be:	d09d      	beq.n	800e0fc <_printf_i+0x15c>
 800e1c0:	3501      	adds	r5, #1
 800e1c2:	68e3      	ldr	r3, [r4, #12]
 800e1c4:	9903      	ldr	r1, [sp, #12]
 800e1c6:	1a5b      	subs	r3, r3, r1
 800e1c8:	42ab      	cmp	r3, r5
 800e1ca:	dcf2      	bgt.n	800e1b2 <_printf_i+0x212>
 800e1cc:	e7eb      	b.n	800e1a6 <_printf_i+0x206>
 800e1ce:	2500      	movs	r5, #0
 800e1d0:	f104 0619 	add.w	r6, r4, #25
 800e1d4:	e7f5      	b.n	800e1c2 <_printf_i+0x222>
 800e1d6:	bf00      	nop
 800e1d8:	080122da 	.word	0x080122da
 800e1dc:	080122eb 	.word	0x080122eb

0800e1e0 <_scanf_float>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	b087      	sub	sp, #28
 800e1e6:	4617      	mov	r7, r2
 800e1e8:	9303      	str	r3, [sp, #12]
 800e1ea:	688b      	ldr	r3, [r1, #8]
 800e1ec:	1e5a      	subs	r2, r3, #1
 800e1ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e1f2:	bf81      	itttt	hi
 800e1f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e1f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800e1fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e200:	608b      	strhi	r3, [r1, #8]
 800e202:	680b      	ldr	r3, [r1, #0]
 800e204:	460a      	mov	r2, r1
 800e206:	f04f 0500 	mov.w	r5, #0
 800e20a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e20e:	f842 3b1c 	str.w	r3, [r2], #28
 800e212:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e216:	4680      	mov	r8, r0
 800e218:	460c      	mov	r4, r1
 800e21a:	bf98      	it	ls
 800e21c:	f04f 0b00 	movls.w	fp, #0
 800e220:	9201      	str	r2, [sp, #4]
 800e222:	4616      	mov	r6, r2
 800e224:	46aa      	mov	sl, r5
 800e226:	46a9      	mov	r9, r5
 800e228:	9502      	str	r5, [sp, #8]
 800e22a:	68a2      	ldr	r2, [r4, #8]
 800e22c:	b152      	cbz	r2, 800e244 <_scanf_float+0x64>
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	2b4e      	cmp	r3, #78	@ 0x4e
 800e234:	d864      	bhi.n	800e300 <_scanf_float+0x120>
 800e236:	2b40      	cmp	r3, #64	@ 0x40
 800e238:	d83c      	bhi.n	800e2b4 <_scanf_float+0xd4>
 800e23a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e23e:	b2c8      	uxtb	r0, r1
 800e240:	280e      	cmp	r0, #14
 800e242:	d93a      	bls.n	800e2ba <_scanf_float+0xda>
 800e244:	f1b9 0f00 	cmp.w	r9, #0
 800e248:	d003      	beq.n	800e252 <_scanf_float+0x72>
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e250:	6023      	str	r3, [r4, #0]
 800e252:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e256:	f1ba 0f01 	cmp.w	sl, #1
 800e25a:	f200 8117 	bhi.w	800e48c <_scanf_float+0x2ac>
 800e25e:	9b01      	ldr	r3, [sp, #4]
 800e260:	429e      	cmp	r6, r3
 800e262:	f200 8108 	bhi.w	800e476 <_scanf_float+0x296>
 800e266:	2001      	movs	r0, #1
 800e268:	b007      	add	sp, #28
 800e26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e26e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e272:	2a0d      	cmp	r2, #13
 800e274:	d8e6      	bhi.n	800e244 <_scanf_float+0x64>
 800e276:	a101      	add	r1, pc, #4	@ (adr r1, 800e27c <_scanf_float+0x9c>)
 800e278:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e27c:	0800e3c3 	.word	0x0800e3c3
 800e280:	0800e245 	.word	0x0800e245
 800e284:	0800e245 	.word	0x0800e245
 800e288:	0800e245 	.word	0x0800e245
 800e28c:	0800e423 	.word	0x0800e423
 800e290:	0800e3fb 	.word	0x0800e3fb
 800e294:	0800e245 	.word	0x0800e245
 800e298:	0800e245 	.word	0x0800e245
 800e29c:	0800e3d1 	.word	0x0800e3d1
 800e2a0:	0800e245 	.word	0x0800e245
 800e2a4:	0800e245 	.word	0x0800e245
 800e2a8:	0800e245 	.word	0x0800e245
 800e2ac:	0800e245 	.word	0x0800e245
 800e2b0:	0800e389 	.word	0x0800e389
 800e2b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e2b8:	e7db      	b.n	800e272 <_scanf_float+0x92>
 800e2ba:	290e      	cmp	r1, #14
 800e2bc:	d8c2      	bhi.n	800e244 <_scanf_float+0x64>
 800e2be:	a001      	add	r0, pc, #4	@ (adr r0, 800e2c4 <_scanf_float+0xe4>)
 800e2c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e2c4:	0800e379 	.word	0x0800e379
 800e2c8:	0800e245 	.word	0x0800e245
 800e2cc:	0800e379 	.word	0x0800e379
 800e2d0:	0800e40f 	.word	0x0800e40f
 800e2d4:	0800e245 	.word	0x0800e245
 800e2d8:	0800e321 	.word	0x0800e321
 800e2dc:	0800e35f 	.word	0x0800e35f
 800e2e0:	0800e35f 	.word	0x0800e35f
 800e2e4:	0800e35f 	.word	0x0800e35f
 800e2e8:	0800e35f 	.word	0x0800e35f
 800e2ec:	0800e35f 	.word	0x0800e35f
 800e2f0:	0800e35f 	.word	0x0800e35f
 800e2f4:	0800e35f 	.word	0x0800e35f
 800e2f8:	0800e35f 	.word	0x0800e35f
 800e2fc:	0800e35f 	.word	0x0800e35f
 800e300:	2b6e      	cmp	r3, #110	@ 0x6e
 800e302:	d809      	bhi.n	800e318 <_scanf_float+0x138>
 800e304:	2b60      	cmp	r3, #96	@ 0x60
 800e306:	d8b2      	bhi.n	800e26e <_scanf_float+0x8e>
 800e308:	2b54      	cmp	r3, #84	@ 0x54
 800e30a:	d07b      	beq.n	800e404 <_scanf_float+0x224>
 800e30c:	2b59      	cmp	r3, #89	@ 0x59
 800e30e:	d199      	bne.n	800e244 <_scanf_float+0x64>
 800e310:	2d07      	cmp	r5, #7
 800e312:	d197      	bne.n	800e244 <_scanf_float+0x64>
 800e314:	2508      	movs	r5, #8
 800e316:	e02c      	b.n	800e372 <_scanf_float+0x192>
 800e318:	2b74      	cmp	r3, #116	@ 0x74
 800e31a:	d073      	beq.n	800e404 <_scanf_float+0x224>
 800e31c:	2b79      	cmp	r3, #121	@ 0x79
 800e31e:	e7f6      	b.n	800e30e <_scanf_float+0x12e>
 800e320:	6821      	ldr	r1, [r4, #0]
 800e322:	05c8      	lsls	r0, r1, #23
 800e324:	d51b      	bpl.n	800e35e <_scanf_float+0x17e>
 800e326:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e32a:	6021      	str	r1, [r4, #0]
 800e32c:	f109 0901 	add.w	r9, r9, #1
 800e330:	f1bb 0f00 	cmp.w	fp, #0
 800e334:	d003      	beq.n	800e33e <_scanf_float+0x15e>
 800e336:	3201      	adds	r2, #1
 800e338:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e33c:	60a2      	str	r2, [r4, #8]
 800e33e:	68a3      	ldr	r3, [r4, #8]
 800e340:	3b01      	subs	r3, #1
 800e342:	60a3      	str	r3, [r4, #8]
 800e344:	6923      	ldr	r3, [r4, #16]
 800e346:	3301      	adds	r3, #1
 800e348:	6123      	str	r3, [r4, #16]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	3b01      	subs	r3, #1
 800e34e:	2b00      	cmp	r3, #0
 800e350:	607b      	str	r3, [r7, #4]
 800e352:	f340 8087 	ble.w	800e464 <_scanf_float+0x284>
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	3301      	adds	r3, #1
 800e35a:	603b      	str	r3, [r7, #0]
 800e35c:	e765      	b.n	800e22a <_scanf_float+0x4a>
 800e35e:	eb1a 0105 	adds.w	r1, sl, r5
 800e362:	f47f af6f 	bne.w	800e244 <_scanf_float+0x64>
 800e366:	6822      	ldr	r2, [r4, #0]
 800e368:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e36c:	6022      	str	r2, [r4, #0]
 800e36e:	460d      	mov	r5, r1
 800e370:	468a      	mov	sl, r1
 800e372:	f806 3b01 	strb.w	r3, [r6], #1
 800e376:	e7e2      	b.n	800e33e <_scanf_float+0x15e>
 800e378:	6822      	ldr	r2, [r4, #0]
 800e37a:	0610      	lsls	r0, r2, #24
 800e37c:	f57f af62 	bpl.w	800e244 <_scanf_float+0x64>
 800e380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e384:	6022      	str	r2, [r4, #0]
 800e386:	e7f4      	b.n	800e372 <_scanf_float+0x192>
 800e388:	f1ba 0f00 	cmp.w	sl, #0
 800e38c:	d10e      	bne.n	800e3ac <_scanf_float+0x1cc>
 800e38e:	f1b9 0f00 	cmp.w	r9, #0
 800e392:	d10e      	bne.n	800e3b2 <_scanf_float+0x1d2>
 800e394:	6822      	ldr	r2, [r4, #0]
 800e396:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e39a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e39e:	d108      	bne.n	800e3b2 <_scanf_float+0x1d2>
 800e3a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e3a4:	6022      	str	r2, [r4, #0]
 800e3a6:	f04f 0a01 	mov.w	sl, #1
 800e3aa:	e7e2      	b.n	800e372 <_scanf_float+0x192>
 800e3ac:	f1ba 0f02 	cmp.w	sl, #2
 800e3b0:	d055      	beq.n	800e45e <_scanf_float+0x27e>
 800e3b2:	2d01      	cmp	r5, #1
 800e3b4:	d002      	beq.n	800e3bc <_scanf_float+0x1dc>
 800e3b6:	2d04      	cmp	r5, #4
 800e3b8:	f47f af44 	bne.w	800e244 <_scanf_float+0x64>
 800e3bc:	3501      	adds	r5, #1
 800e3be:	b2ed      	uxtb	r5, r5
 800e3c0:	e7d7      	b.n	800e372 <_scanf_float+0x192>
 800e3c2:	f1ba 0f01 	cmp.w	sl, #1
 800e3c6:	f47f af3d 	bne.w	800e244 <_scanf_float+0x64>
 800e3ca:	f04f 0a02 	mov.w	sl, #2
 800e3ce:	e7d0      	b.n	800e372 <_scanf_float+0x192>
 800e3d0:	b97d      	cbnz	r5, 800e3f2 <_scanf_float+0x212>
 800e3d2:	f1b9 0f00 	cmp.w	r9, #0
 800e3d6:	f47f af38 	bne.w	800e24a <_scanf_float+0x6a>
 800e3da:	6822      	ldr	r2, [r4, #0]
 800e3dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e3e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e3e4:	f040 8101 	bne.w	800e5ea <_scanf_float+0x40a>
 800e3e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e3ec:	6022      	str	r2, [r4, #0]
 800e3ee:	2501      	movs	r5, #1
 800e3f0:	e7bf      	b.n	800e372 <_scanf_float+0x192>
 800e3f2:	2d03      	cmp	r5, #3
 800e3f4:	d0e2      	beq.n	800e3bc <_scanf_float+0x1dc>
 800e3f6:	2d05      	cmp	r5, #5
 800e3f8:	e7de      	b.n	800e3b8 <_scanf_float+0x1d8>
 800e3fa:	2d02      	cmp	r5, #2
 800e3fc:	f47f af22 	bne.w	800e244 <_scanf_float+0x64>
 800e400:	2503      	movs	r5, #3
 800e402:	e7b6      	b.n	800e372 <_scanf_float+0x192>
 800e404:	2d06      	cmp	r5, #6
 800e406:	f47f af1d 	bne.w	800e244 <_scanf_float+0x64>
 800e40a:	2507      	movs	r5, #7
 800e40c:	e7b1      	b.n	800e372 <_scanf_float+0x192>
 800e40e:	6822      	ldr	r2, [r4, #0]
 800e410:	0591      	lsls	r1, r2, #22
 800e412:	f57f af17 	bpl.w	800e244 <_scanf_float+0x64>
 800e416:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e41a:	6022      	str	r2, [r4, #0]
 800e41c:	f8cd 9008 	str.w	r9, [sp, #8]
 800e420:	e7a7      	b.n	800e372 <_scanf_float+0x192>
 800e422:	6822      	ldr	r2, [r4, #0]
 800e424:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e428:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e42c:	d006      	beq.n	800e43c <_scanf_float+0x25c>
 800e42e:	0550      	lsls	r0, r2, #21
 800e430:	f57f af08 	bpl.w	800e244 <_scanf_float+0x64>
 800e434:	f1b9 0f00 	cmp.w	r9, #0
 800e438:	f000 80d7 	beq.w	800e5ea <_scanf_float+0x40a>
 800e43c:	0591      	lsls	r1, r2, #22
 800e43e:	bf58      	it	pl
 800e440:	9902      	ldrpl	r1, [sp, #8]
 800e442:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e446:	bf58      	it	pl
 800e448:	eba9 0101 	subpl.w	r1, r9, r1
 800e44c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e450:	bf58      	it	pl
 800e452:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e456:	6022      	str	r2, [r4, #0]
 800e458:	f04f 0900 	mov.w	r9, #0
 800e45c:	e789      	b.n	800e372 <_scanf_float+0x192>
 800e45e:	f04f 0a03 	mov.w	sl, #3
 800e462:	e786      	b.n	800e372 <_scanf_float+0x192>
 800e464:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e468:	4639      	mov	r1, r7
 800e46a:	4640      	mov	r0, r8
 800e46c:	4798      	blx	r3
 800e46e:	2800      	cmp	r0, #0
 800e470:	f43f aedb 	beq.w	800e22a <_scanf_float+0x4a>
 800e474:	e6e6      	b.n	800e244 <_scanf_float+0x64>
 800e476:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e47a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e47e:	463a      	mov	r2, r7
 800e480:	4640      	mov	r0, r8
 800e482:	4798      	blx	r3
 800e484:	6923      	ldr	r3, [r4, #16]
 800e486:	3b01      	subs	r3, #1
 800e488:	6123      	str	r3, [r4, #16]
 800e48a:	e6e8      	b.n	800e25e <_scanf_float+0x7e>
 800e48c:	1e6b      	subs	r3, r5, #1
 800e48e:	2b06      	cmp	r3, #6
 800e490:	d824      	bhi.n	800e4dc <_scanf_float+0x2fc>
 800e492:	2d02      	cmp	r5, #2
 800e494:	d836      	bhi.n	800e504 <_scanf_float+0x324>
 800e496:	9b01      	ldr	r3, [sp, #4]
 800e498:	429e      	cmp	r6, r3
 800e49a:	f67f aee4 	bls.w	800e266 <_scanf_float+0x86>
 800e49e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4a6:	463a      	mov	r2, r7
 800e4a8:	4640      	mov	r0, r8
 800e4aa:	4798      	blx	r3
 800e4ac:	6923      	ldr	r3, [r4, #16]
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	6123      	str	r3, [r4, #16]
 800e4b2:	e7f0      	b.n	800e496 <_scanf_float+0x2b6>
 800e4b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e4bc:	463a      	mov	r2, r7
 800e4be:	4640      	mov	r0, r8
 800e4c0:	4798      	blx	r3
 800e4c2:	6923      	ldr	r3, [r4, #16]
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	6123      	str	r3, [r4, #16]
 800e4c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4cc:	fa5f fa8a 	uxtb.w	sl, sl
 800e4d0:	f1ba 0f02 	cmp.w	sl, #2
 800e4d4:	d1ee      	bne.n	800e4b4 <_scanf_float+0x2d4>
 800e4d6:	3d03      	subs	r5, #3
 800e4d8:	b2ed      	uxtb	r5, r5
 800e4da:	1b76      	subs	r6, r6, r5
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	05da      	lsls	r2, r3, #23
 800e4e0:	d530      	bpl.n	800e544 <_scanf_float+0x364>
 800e4e2:	055b      	lsls	r3, r3, #21
 800e4e4:	d511      	bpl.n	800e50a <_scanf_float+0x32a>
 800e4e6:	9b01      	ldr	r3, [sp, #4]
 800e4e8:	429e      	cmp	r6, r3
 800e4ea:	f67f aebc 	bls.w	800e266 <_scanf_float+0x86>
 800e4ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4f6:	463a      	mov	r2, r7
 800e4f8:	4640      	mov	r0, r8
 800e4fa:	4798      	blx	r3
 800e4fc:	6923      	ldr	r3, [r4, #16]
 800e4fe:	3b01      	subs	r3, #1
 800e500:	6123      	str	r3, [r4, #16]
 800e502:	e7f0      	b.n	800e4e6 <_scanf_float+0x306>
 800e504:	46aa      	mov	sl, r5
 800e506:	46b3      	mov	fp, r6
 800e508:	e7de      	b.n	800e4c8 <_scanf_float+0x2e8>
 800e50a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e50e:	6923      	ldr	r3, [r4, #16]
 800e510:	2965      	cmp	r1, #101	@ 0x65
 800e512:	f103 33ff 	add.w	r3, r3, #4294967295
 800e516:	f106 35ff 	add.w	r5, r6, #4294967295
 800e51a:	6123      	str	r3, [r4, #16]
 800e51c:	d00c      	beq.n	800e538 <_scanf_float+0x358>
 800e51e:	2945      	cmp	r1, #69	@ 0x45
 800e520:	d00a      	beq.n	800e538 <_scanf_float+0x358>
 800e522:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e526:	463a      	mov	r2, r7
 800e528:	4640      	mov	r0, r8
 800e52a:	4798      	blx	r3
 800e52c:	6923      	ldr	r3, [r4, #16]
 800e52e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e532:	3b01      	subs	r3, #1
 800e534:	1eb5      	subs	r5, r6, #2
 800e536:	6123      	str	r3, [r4, #16]
 800e538:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e53c:	463a      	mov	r2, r7
 800e53e:	4640      	mov	r0, r8
 800e540:	4798      	blx	r3
 800e542:	462e      	mov	r6, r5
 800e544:	6822      	ldr	r2, [r4, #0]
 800e546:	f012 0210 	ands.w	r2, r2, #16
 800e54a:	d001      	beq.n	800e550 <_scanf_float+0x370>
 800e54c:	2000      	movs	r0, #0
 800e54e:	e68b      	b.n	800e268 <_scanf_float+0x88>
 800e550:	7032      	strb	r2, [r6, #0]
 800e552:	6823      	ldr	r3, [r4, #0]
 800e554:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e55c:	d11a      	bne.n	800e594 <_scanf_float+0x3b4>
 800e55e:	9b02      	ldr	r3, [sp, #8]
 800e560:	454b      	cmp	r3, r9
 800e562:	eba3 0209 	sub.w	r2, r3, r9
 800e566:	d121      	bne.n	800e5ac <_scanf_float+0x3cc>
 800e568:	9901      	ldr	r1, [sp, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	4640      	mov	r0, r8
 800e56e:	f002 fc41 	bl	8010df4 <_strtod_r>
 800e572:	9b03      	ldr	r3, [sp, #12]
 800e574:	6821      	ldr	r1, [r4, #0]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f011 0f02 	tst.w	r1, #2
 800e57c:	f103 0204 	add.w	r2, r3, #4
 800e580:	d01f      	beq.n	800e5c2 <_scanf_float+0x3e2>
 800e582:	9903      	ldr	r1, [sp, #12]
 800e584:	600a      	str	r2, [r1, #0]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	ed83 0b00 	vstr	d0, [r3]
 800e58c:	68e3      	ldr	r3, [r4, #12]
 800e58e:	3301      	adds	r3, #1
 800e590:	60e3      	str	r3, [r4, #12]
 800e592:	e7db      	b.n	800e54c <_scanf_float+0x36c>
 800e594:	9b04      	ldr	r3, [sp, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d0e6      	beq.n	800e568 <_scanf_float+0x388>
 800e59a:	9905      	ldr	r1, [sp, #20]
 800e59c:	230a      	movs	r3, #10
 800e59e:	3101      	adds	r1, #1
 800e5a0:	4640      	mov	r0, r8
 800e5a2:	f002 fca7 	bl	8010ef4 <_strtol_r>
 800e5a6:	9b04      	ldr	r3, [sp, #16]
 800e5a8:	9e05      	ldr	r6, [sp, #20]
 800e5aa:	1ac2      	subs	r2, r0, r3
 800e5ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e5b0:	429e      	cmp	r6, r3
 800e5b2:	bf28      	it	cs
 800e5b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e5b8:	490d      	ldr	r1, [pc, #52]	@ (800e5f0 <_scanf_float+0x410>)
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	f000 f94e 	bl	800e85c <siprintf>
 800e5c0:	e7d2      	b.n	800e568 <_scanf_float+0x388>
 800e5c2:	f011 0f04 	tst.w	r1, #4
 800e5c6:	9903      	ldr	r1, [sp, #12]
 800e5c8:	600a      	str	r2, [r1, #0]
 800e5ca:	d1dc      	bne.n	800e586 <_scanf_float+0x3a6>
 800e5cc:	eeb4 0b40 	vcmp.f64	d0, d0
 800e5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5d4:	681d      	ldr	r5, [r3, #0]
 800e5d6:	d705      	bvc.n	800e5e4 <_scanf_float+0x404>
 800e5d8:	4806      	ldr	r0, [pc, #24]	@ (800e5f4 <_scanf_float+0x414>)
 800e5da:	f000 fac5 	bl	800eb68 <nanf>
 800e5de:	ed85 0a00 	vstr	s0, [r5]
 800e5e2:	e7d3      	b.n	800e58c <_scanf_float+0x3ac>
 800e5e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e5e8:	e7f9      	b.n	800e5de <_scanf_float+0x3fe>
 800e5ea:	f04f 0900 	mov.w	r9, #0
 800e5ee:	e630      	b.n	800e252 <_scanf_float+0x72>
 800e5f0:	080122fc 	.word	0x080122fc
 800e5f4:	08012695 	.word	0x08012695

0800e5f8 <std>:
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	b510      	push	{r4, lr}
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	e9c0 3300 	strd	r3, r3, [r0]
 800e602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e606:	6083      	str	r3, [r0, #8]
 800e608:	8181      	strh	r1, [r0, #12]
 800e60a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e60c:	81c2      	strh	r2, [r0, #14]
 800e60e:	6183      	str	r3, [r0, #24]
 800e610:	4619      	mov	r1, r3
 800e612:	2208      	movs	r2, #8
 800e614:	305c      	adds	r0, #92	@ 0x5c
 800e616:	f000 fa19 	bl	800ea4c <memset>
 800e61a:	4b0d      	ldr	r3, [pc, #52]	@ (800e650 <std+0x58>)
 800e61c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e61e:	4b0d      	ldr	r3, [pc, #52]	@ (800e654 <std+0x5c>)
 800e620:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e622:	4b0d      	ldr	r3, [pc, #52]	@ (800e658 <std+0x60>)
 800e624:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e626:	4b0d      	ldr	r3, [pc, #52]	@ (800e65c <std+0x64>)
 800e628:	6323      	str	r3, [r4, #48]	@ 0x30
 800e62a:	4b0d      	ldr	r3, [pc, #52]	@ (800e660 <std+0x68>)
 800e62c:	6224      	str	r4, [r4, #32]
 800e62e:	429c      	cmp	r4, r3
 800e630:	d006      	beq.n	800e640 <std+0x48>
 800e632:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e636:	4294      	cmp	r4, r2
 800e638:	d002      	beq.n	800e640 <std+0x48>
 800e63a:	33d0      	adds	r3, #208	@ 0xd0
 800e63c:	429c      	cmp	r4, r3
 800e63e:	d105      	bne.n	800e64c <std+0x54>
 800e640:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e648:	f000 ba7c 	b.w	800eb44 <__retarget_lock_init_recursive>
 800e64c:	bd10      	pop	{r4, pc}
 800e64e:	bf00      	nop
 800e650:	0800e89d 	.word	0x0800e89d
 800e654:	0800e8bf 	.word	0x0800e8bf
 800e658:	0800e8f7 	.word	0x0800e8f7
 800e65c:	0800e91b 	.word	0x0800e91b
 800e660:	24000be8 	.word	0x24000be8

0800e664 <stdio_exit_handler>:
 800e664:	4a02      	ldr	r2, [pc, #8]	@ (800e670 <stdio_exit_handler+0xc>)
 800e666:	4903      	ldr	r1, [pc, #12]	@ (800e674 <stdio_exit_handler+0x10>)
 800e668:	4803      	ldr	r0, [pc, #12]	@ (800e678 <stdio_exit_handler+0x14>)
 800e66a:	f000 b869 	b.w	800e740 <_fwalk_sglue>
 800e66e:	bf00      	nop
 800e670:	2400001c 	.word	0x2400001c
 800e674:	08011535 	.word	0x08011535
 800e678:	2400002c 	.word	0x2400002c

0800e67c <cleanup_stdio>:
 800e67c:	6841      	ldr	r1, [r0, #4]
 800e67e:	4b0c      	ldr	r3, [pc, #48]	@ (800e6b0 <cleanup_stdio+0x34>)
 800e680:	4299      	cmp	r1, r3
 800e682:	b510      	push	{r4, lr}
 800e684:	4604      	mov	r4, r0
 800e686:	d001      	beq.n	800e68c <cleanup_stdio+0x10>
 800e688:	f002 ff54 	bl	8011534 <_fflush_r>
 800e68c:	68a1      	ldr	r1, [r4, #8]
 800e68e:	4b09      	ldr	r3, [pc, #36]	@ (800e6b4 <cleanup_stdio+0x38>)
 800e690:	4299      	cmp	r1, r3
 800e692:	d002      	beq.n	800e69a <cleanup_stdio+0x1e>
 800e694:	4620      	mov	r0, r4
 800e696:	f002 ff4d 	bl	8011534 <_fflush_r>
 800e69a:	68e1      	ldr	r1, [r4, #12]
 800e69c:	4b06      	ldr	r3, [pc, #24]	@ (800e6b8 <cleanup_stdio+0x3c>)
 800e69e:	4299      	cmp	r1, r3
 800e6a0:	d004      	beq.n	800e6ac <cleanup_stdio+0x30>
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6a8:	f002 bf44 	b.w	8011534 <_fflush_r>
 800e6ac:	bd10      	pop	{r4, pc}
 800e6ae:	bf00      	nop
 800e6b0:	24000be8 	.word	0x24000be8
 800e6b4:	24000c50 	.word	0x24000c50
 800e6b8:	24000cb8 	.word	0x24000cb8

0800e6bc <global_stdio_init.part.0>:
 800e6bc:	b510      	push	{r4, lr}
 800e6be:	4b0b      	ldr	r3, [pc, #44]	@ (800e6ec <global_stdio_init.part.0+0x30>)
 800e6c0:	4c0b      	ldr	r4, [pc, #44]	@ (800e6f0 <global_stdio_init.part.0+0x34>)
 800e6c2:	4a0c      	ldr	r2, [pc, #48]	@ (800e6f4 <global_stdio_init.part.0+0x38>)
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	2104      	movs	r1, #4
 800e6cc:	f7ff ff94 	bl	800e5f8 <std>
 800e6d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	2109      	movs	r1, #9
 800e6d8:	f7ff ff8e 	bl	800e5f8 <std>
 800e6dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6e6:	2112      	movs	r1, #18
 800e6e8:	f7ff bf86 	b.w	800e5f8 <std>
 800e6ec:	24000d20 	.word	0x24000d20
 800e6f0:	24000be8 	.word	0x24000be8
 800e6f4:	0800e665 	.word	0x0800e665

0800e6f8 <__sfp_lock_acquire>:
 800e6f8:	4801      	ldr	r0, [pc, #4]	@ (800e700 <__sfp_lock_acquire+0x8>)
 800e6fa:	f000 ba24 	b.w	800eb46 <__retarget_lock_acquire_recursive>
 800e6fe:	bf00      	nop
 800e700:	24000d29 	.word	0x24000d29

0800e704 <__sfp_lock_release>:
 800e704:	4801      	ldr	r0, [pc, #4]	@ (800e70c <__sfp_lock_release+0x8>)
 800e706:	f000 ba1f 	b.w	800eb48 <__retarget_lock_release_recursive>
 800e70a:	bf00      	nop
 800e70c:	24000d29 	.word	0x24000d29

0800e710 <__sinit>:
 800e710:	b510      	push	{r4, lr}
 800e712:	4604      	mov	r4, r0
 800e714:	f7ff fff0 	bl	800e6f8 <__sfp_lock_acquire>
 800e718:	6a23      	ldr	r3, [r4, #32]
 800e71a:	b11b      	cbz	r3, 800e724 <__sinit+0x14>
 800e71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e720:	f7ff bff0 	b.w	800e704 <__sfp_lock_release>
 800e724:	4b04      	ldr	r3, [pc, #16]	@ (800e738 <__sinit+0x28>)
 800e726:	6223      	str	r3, [r4, #32]
 800e728:	4b04      	ldr	r3, [pc, #16]	@ (800e73c <__sinit+0x2c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1f5      	bne.n	800e71c <__sinit+0xc>
 800e730:	f7ff ffc4 	bl	800e6bc <global_stdio_init.part.0>
 800e734:	e7f2      	b.n	800e71c <__sinit+0xc>
 800e736:	bf00      	nop
 800e738:	0800e67d 	.word	0x0800e67d
 800e73c:	24000d20 	.word	0x24000d20

0800e740 <_fwalk_sglue>:
 800e740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e744:	4607      	mov	r7, r0
 800e746:	4688      	mov	r8, r1
 800e748:	4614      	mov	r4, r2
 800e74a:	2600      	movs	r6, #0
 800e74c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e750:	f1b9 0901 	subs.w	r9, r9, #1
 800e754:	d505      	bpl.n	800e762 <_fwalk_sglue+0x22>
 800e756:	6824      	ldr	r4, [r4, #0]
 800e758:	2c00      	cmp	r4, #0
 800e75a:	d1f7      	bne.n	800e74c <_fwalk_sglue+0xc>
 800e75c:	4630      	mov	r0, r6
 800e75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e762:	89ab      	ldrh	r3, [r5, #12]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d907      	bls.n	800e778 <_fwalk_sglue+0x38>
 800e768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e76c:	3301      	adds	r3, #1
 800e76e:	d003      	beq.n	800e778 <_fwalk_sglue+0x38>
 800e770:	4629      	mov	r1, r5
 800e772:	4638      	mov	r0, r7
 800e774:	47c0      	blx	r8
 800e776:	4306      	orrs	r6, r0
 800e778:	3568      	adds	r5, #104	@ 0x68
 800e77a:	e7e9      	b.n	800e750 <_fwalk_sglue+0x10>

0800e77c <iprintf>:
 800e77c:	b40f      	push	{r0, r1, r2, r3}
 800e77e:	b507      	push	{r0, r1, r2, lr}
 800e780:	4906      	ldr	r1, [pc, #24]	@ (800e79c <iprintf+0x20>)
 800e782:	ab04      	add	r3, sp, #16
 800e784:	6808      	ldr	r0, [r1, #0]
 800e786:	f853 2b04 	ldr.w	r2, [r3], #4
 800e78a:	6881      	ldr	r1, [r0, #8]
 800e78c:	9301      	str	r3, [sp, #4]
 800e78e:	f002 fd35 	bl	80111fc <_vfiprintf_r>
 800e792:	b003      	add	sp, #12
 800e794:	f85d eb04 	ldr.w	lr, [sp], #4
 800e798:	b004      	add	sp, #16
 800e79a:	4770      	bx	lr
 800e79c:	24000028 	.word	0x24000028

0800e7a0 <_puts_r>:
 800e7a0:	6a03      	ldr	r3, [r0, #32]
 800e7a2:	b570      	push	{r4, r5, r6, lr}
 800e7a4:	6884      	ldr	r4, [r0, #8]
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	460e      	mov	r6, r1
 800e7aa:	b90b      	cbnz	r3, 800e7b0 <_puts_r+0x10>
 800e7ac:	f7ff ffb0 	bl	800e710 <__sinit>
 800e7b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7b2:	07db      	lsls	r3, r3, #31
 800e7b4:	d405      	bmi.n	800e7c2 <_puts_r+0x22>
 800e7b6:	89a3      	ldrh	r3, [r4, #12]
 800e7b8:	0598      	lsls	r0, r3, #22
 800e7ba:	d402      	bmi.n	800e7c2 <_puts_r+0x22>
 800e7bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7be:	f000 f9c2 	bl	800eb46 <__retarget_lock_acquire_recursive>
 800e7c2:	89a3      	ldrh	r3, [r4, #12]
 800e7c4:	0719      	lsls	r1, r3, #28
 800e7c6:	d502      	bpl.n	800e7ce <_puts_r+0x2e>
 800e7c8:	6923      	ldr	r3, [r4, #16]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d135      	bne.n	800e83a <_puts_r+0x9a>
 800e7ce:	4621      	mov	r1, r4
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	f000 f8e5 	bl	800e9a0 <__swsetup_r>
 800e7d6:	b380      	cbz	r0, 800e83a <_puts_r+0x9a>
 800e7d8:	f04f 35ff 	mov.w	r5, #4294967295
 800e7dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7de:	07da      	lsls	r2, r3, #31
 800e7e0:	d405      	bmi.n	800e7ee <_puts_r+0x4e>
 800e7e2:	89a3      	ldrh	r3, [r4, #12]
 800e7e4:	059b      	lsls	r3, r3, #22
 800e7e6:	d402      	bmi.n	800e7ee <_puts_r+0x4e>
 800e7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7ea:	f000 f9ad 	bl	800eb48 <__retarget_lock_release_recursive>
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	bd70      	pop	{r4, r5, r6, pc}
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	da04      	bge.n	800e800 <_puts_r+0x60>
 800e7f6:	69a2      	ldr	r2, [r4, #24]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	dc17      	bgt.n	800e82c <_puts_r+0x8c>
 800e7fc:	290a      	cmp	r1, #10
 800e7fe:	d015      	beq.n	800e82c <_puts_r+0x8c>
 800e800:	6823      	ldr	r3, [r4, #0]
 800e802:	1c5a      	adds	r2, r3, #1
 800e804:	6022      	str	r2, [r4, #0]
 800e806:	7019      	strb	r1, [r3, #0]
 800e808:	68a3      	ldr	r3, [r4, #8]
 800e80a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e80e:	3b01      	subs	r3, #1
 800e810:	60a3      	str	r3, [r4, #8]
 800e812:	2900      	cmp	r1, #0
 800e814:	d1ed      	bne.n	800e7f2 <_puts_r+0x52>
 800e816:	2b00      	cmp	r3, #0
 800e818:	da11      	bge.n	800e83e <_puts_r+0x9e>
 800e81a:	4622      	mov	r2, r4
 800e81c:	210a      	movs	r1, #10
 800e81e:	4628      	mov	r0, r5
 800e820:	f000 f87f 	bl	800e922 <__swbuf_r>
 800e824:	3001      	adds	r0, #1
 800e826:	d0d7      	beq.n	800e7d8 <_puts_r+0x38>
 800e828:	250a      	movs	r5, #10
 800e82a:	e7d7      	b.n	800e7dc <_puts_r+0x3c>
 800e82c:	4622      	mov	r2, r4
 800e82e:	4628      	mov	r0, r5
 800e830:	f000 f877 	bl	800e922 <__swbuf_r>
 800e834:	3001      	adds	r0, #1
 800e836:	d1e7      	bne.n	800e808 <_puts_r+0x68>
 800e838:	e7ce      	b.n	800e7d8 <_puts_r+0x38>
 800e83a:	3e01      	subs	r6, #1
 800e83c:	e7e4      	b.n	800e808 <_puts_r+0x68>
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	1c5a      	adds	r2, r3, #1
 800e842:	6022      	str	r2, [r4, #0]
 800e844:	220a      	movs	r2, #10
 800e846:	701a      	strb	r2, [r3, #0]
 800e848:	e7ee      	b.n	800e828 <_puts_r+0x88>
	...

0800e84c <puts>:
 800e84c:	4b02      	ldr	r3, [pc, #8]	@ (800e858 <puts+0xc>)
 800e84e:	4601      	mov	r1, r0
 800e850:	6818      	ldr	r0, [r3, #0]
 800e852:	f7ff bfa5 	b.w	800e7a0 <_puts_r>
 800e856:	bf00      	nop
 800e858:	24000028 	.word	0x24000028

0800e85c <siprintf>:
 800e85c:	b40e      	push	{r1, r2, r3}
 800e85e:	b500      	push	{lr}
 800e860:	b09c      	sub	sp, #112	@ 0x70
 800e862:	ab1d      	add	r3, sp, #116	@ 0x74
 800e864:	9002      	str	r0, [sp, #8]
 800e866:	9006      	str	r0, [sp, #24]
 800e868:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e86c:	4809      	ldr	r0, [pc, #36]	@ (800e894 <siprintf+0x38>)
 800e86e:	9107      	str	r1, [sp, #28]
 800e870:	9104      	str	r1, [sp, #16]
 800e872:	4909      	ldr	r1, [pc, #36]	@ (800e898 <siprintf+0x3c>)
 800e874:	f853 2b04 	ldr.w	r2, [r3], #4
 800e878:	9105      	str	r1, [sp, #20]
 800e87a:	6800      	ldr	r0, [r0, #0]
 800e87c:	9301      	str	r3, [sp, #4]
 800e87e:	a902      	add	r1, sp, #8
 800e880:	f002 fb96 	bl	8010fb0 <_svfiprintf_r>
 800e884:	9b02      	ldr	r3, [sp, #8]
 800e886:	2200      	movs	r2, #0
 800e888:	701a      	strb	r2, [r3, #0]
 800e88a:	b01c      	add	sp, #112	@ 0x70
 800e88c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e890:	b003      	add	sp, #12
 800e892:	4770      	bx	lr
 800e894:	24000028 	.word	0x24000028
 800e898:	ffff0208 	.word	0xffff0208

0800e89c <__sread>:
 800e89c:	b510      	push	{r4, lr}
 800e89e:	460c      	mov	r4, r1
 800e8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8a4:	f000 f900 	bl	800eaa8 <_read_r>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	bfab      	itete	ge
 800e8ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e8ae:	89a3      	ldrhlt	r3, [r4, #12]
 800e8b0:	181b      	addge	r3, r3, r0
 800e8b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e8b6:	bfac      	ite	ge
 800e8b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e8ba:	81a3      	strhlt	r3, [r4, #12]
 800e8bc:	bd10      	pop	{r4, pc}

0800e8be <__swrite>:
 800e8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c2:	461f      	mov	r7, r3
 800e8c4:	898b      	ldrh	r3, [r1, #12]
 800e8c6:	05db      	lsls	r3, r3, #23
 800e8c8:	4605      	mov	r5, r0
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	4616      	mov	r6, r2
 800e8ce:	d505      	bpl.n	800e8dc <__swrite+0x1e>
 800e8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d4:	2302      	movs	r3, #2
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f000 f8d4 	bl	800ea84 <_lseek_r>
 800e8dc:	89a3      	ldrh	r3, [r4, #12]
 800e8de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e8e6:	81a3      	strh	r3, [r4, #12]
 800e8e8:	4632      	mov	r2, r6
 800e8ea:	463b      	mov	r3, r7
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8f2:	f000 b8eb 	b.w	800eacc <_write_r>

0800e8f6 <__sseek>:
 800e8f6:	b510      	push	{r4, lr}
 800e8f8:	460c      	mov	r4, r1
 800e8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8fe:	f000 f8c1 	bl	800ea84 <_lseek_r>
 800e902:	1c43      	adds	r3, r0, #1
 800e904:	89a3      	ldrh	r3, [r4, #12]
 800e906:	bf15      	itete	ne
 800e908:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e90a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e90e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e912:	81a3      	strheq	r3, [r4, #12]
 800e914:	bf18      	it	ne
 800e916:	81a3      	strhne	r3, [r4, #12]
 800e918:	bd10      	pop	{r4, pc}

0800e91a <__sclose>:
 800e91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e91e:	f000 b8a1 	b.w	800ea64 <_close_r>

0800e922 <__swbuf_r>:
 800e922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e924:	460e      	mov	r6, r1
 800e926:	4614      	mov	r4, r2
 800e928:	4605      	mov	r5, r0
 800e92a:	b118      	cbz	r0, 800e934 <__swbuf_r+0x12>
 800e92c:	6a03      	ldr	r3, [r0, #32]
 800e92e:	b90b      	cbnz	r3, 800e934 <__swbuf_r+0x12>
 800e930:	f7ff feee 	bl	800e710 <__sinit>
 800e934:	69a3      	ldr	r3, [r4, #24]
 800e936:	60a3      	str	r3, [r4, #8]
 800e938:	89a3      	ldrh	r3, [r4, #12]
 800e93a:	071a      	lsls	r2, r3, #28
 800e93c:	d501      	bpl.n	800e942 <__swbuf_r+0x20>
 800e93e:	6923      	ldr	r3, [r4, #16]
 800e940:	b943      	cbnz	r3, 800e954 <__swbuf_r+0x32>
 800e942:	4621      	mov	r1, r4
 800e944:	4628      	mov	r0, r5
 800e946:	f000 f82b 	bl	800e9a0 <__swsetup_r>
 800e94a:	b118      	cbz	r0, 800e954 <__swbuf_r+0x32>
 800e94c:	f04f 37ff 	mov.w	r7, #4294967295
 800e950:	4638      	mov	r0, r7
 800e952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e954:	6823      	ldr	r3, [r4, #0]
 800e956:	6922      	ldr	r2, [r4, #16]
 800e958:	1a98      	subs	r0, r3, r2
 800e95a:	6963      	ldr	r3, [r4, #20]
 800e95c:	b2f6      	uxtb	r6, r6
 800e95e:	4283      	cmp	r3, r0
 800e960:	4637      	mov	r7, r6
 800e962:	dc05      	bgt.n	800e970 <__swbuf_r+0x4e>
 800e964:	4621      	mov	r1, r4
 800e966:	4628      	mov	r0, r5
 800e968:	f002 fde4 	bl	8011534 <_fflush_r>
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d1ed      	bne.n	800e94c <__swbuf_r+0x2a>
 800e970:	68a3      	ldr	r3, [r4, #8]
 800e972:	3b01      	subs	r3, #1
 800e974:	60a3      	str	r3, [r4, #8]
 800e976:	6823      	ldr	r3, [r4, #0]
 800e978:	1c5a      	adds	r2, r3, #1
 800e97a:	6022      	str	r2, [r4, #0]
 800e97c:	701e      	strb	r6, [r3, #0]
 800e97e:	6962      	ldr	r2, [r4, #20]
 800e980:	1c43      	adds	r3, r0, #1
 800e982:	429a      	cmp	r2, r3
 800e984:	d004      	beq.n	800e990 <__swbuf_r+0x6e>
 800e986:	89a3      	ldrh	r3, [r4, #12]
 800e988:	07db      	lsls	r3, r3, #31
 800e98a:	d5e1      	bpl.n	800e950 <__swbuf_r+0x2e>
 800e98c:	2e0a      	cmp	r6, #10
 800e98e:	d1df      	bne.n	800e950 <__swbuf_r+0x2e>
 800e990:	4621      	mov	r1, r4
 800e992:	4628      	mov	r0, r5
 800e994:	f002 fdce 	bl	8011534 <_fflush_r>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d0d9      	beq.n	800e950 <__swbuf_r+0x2e>
 800e99c:	e7d6      	b.n	800e94c <__swbuf_r+0x2a>
	...

0800e9a0 <__swsetup_r>:
 800e9a0:	b538      	push	{r3, r4, r5, lr}
 800e9a2:	4b29      	ldr	r3, [pc, #164]	@ (800ea48 <__swsetup_r+0xa8>)
 800e9a4:	4605      	mov	r5, r0
 800e9a6:	6818      	ldr	r0, [r3, #0]
 800e9a8:	460c      	mov	r4, r1
 800e9aa:	b118      	cbz	r0, 800e9b4 <__swsetup_r+0x14>
 800e9ac:	6a03      	ldr	r3, [r0, #32]
 800e9ae:	b90b      	cbnz	r3, 800e9b4 <__swsetup_r+0x14>
 800e9b0:	f7ff feae 	bl	800e710 <__sinit>
 800e9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9b8:	0719      	lsls	r1, r3, #28
 800e9ba:	d422      	bmi.n	800ea02 <__swsetup_r+0x62>
 800e9bc:	06da      	lsls	r2, r3, #27
 800e9be:	d407      	bmi.n	800e9d0 <__swsetup_r+0x30>
 800e9c0:	2209      	movs	r2, #9
 800e9c2:	602a      	str	r2, [r5, #0]
 800e9c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9c8:	81a3      	strh	r3, [r4, #12]
 800e9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ce:	e033      	b.n	800ea38 <__swsetup_r+0x98>
 800e9d0:	0758      	lsls	r0, r3, #29
 800e9d2:	d512      	bpl.n	800e9fa <__swsetup_r+0x5a>
 800e9d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e9d6:	b141      	cbz	r1, 800e9ea <__swsetup_r+0x4a>
 800e9d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e9dc:	4299      	cmp	r1, r3
 800e9de:	d002      	beq.n	800e9e6 <__swsetup_r+0x46>
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	f000 fea7 	bl	800f734 <_free_r>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e9ea:	89a3      	ldrh	r3, [r4, #12]
 800e9ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e9f0:	81a3      	strh	r3, [r4, #12]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	6063      	str	r3, [r4, #4]
 800e9f6:	6923      	ldr	r3, [r4, #16]
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	89a3      	ldrh	r3, [r4, #12]
 800e9fc:	f043 0308 	orr.w	r3, r3, #8
 800ea00:	81a3      	strh	r3, [r4, #12]
 800ea02:	6923      	ldr	r3, [r4, #16]
 800ea04:	b94b      	cbnz	r3, 800ea1a <__swsetup_r+0x7a>
 800ea06:	89a3      	ldrh	r3, [r4, #12]
 800ea08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ea0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea10:	d003      	beq.n	800ea1a <__swsetup_r+0x7a>
 800ea12:	4621      	mov	r1, r4
 800ea14:	4628      	mov	r0, r5
 800ea16:	f002 fddb 	bl	80115d0 <__smakebuf_r>
 800ea1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea1e:	f013 0201 	ands.w	r2, r3, #1
 800ea22:	d00a      	beq.n	800ea3a <__swsetup_r+0x9a>
 800ea24:	2200      	movs	r2, #0
 800ea26:	60a2      	str	r2, [r4, #8]
 800ea28:	6962      	ldr	r2, [r4, #20]
 800ea2a:	4252      	negs	r2, r2
 800ea2c:	61a2      	str	r2, [r4, #24]
 800ea2e:	6922      	ldr	r2, [r4, #16]
 800ea30:	b942      	cbnz	r2, 800ea44 <__swsetup_r+0xa4>
 800ea32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ea36:	d1c5      	bne.n	800e9c4 <__swsetup_r+0x24>
 800ea38:	bd38      	pop	{r3, r4, r5, pc}
 800ea3a:	0799      	lsls	r1, r3, #30
 800ea3c:	bf58      	it	pl
 800ea3e:	6962      	ldrpl	r2, [r4, #20]
 800ea40:	60a2      	str	r2, [r4, #8]
 800ea42:	e7f4      	b.n	800ea2e <__swsetup_r+0x8e>
 800ea44:	2000      	movs	r0, #0
 800ea46:	e7f7      	b.n	800ea38 <__swsetup_r+0x98>
 800ea48:	24000028 	.word	0x24000028

0800ea4c <memset>:
 800ea4c:	4402      	add	r2, r0
 800ea4e:	4603      	mov	r3, r0
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d100      	bne.n	800ea56 <memset+0xa>
 800ea54:	4770      	bx	lr
 800ea56:	f803 1b01 	strb.w	r1, [r3], #1
 800ea5a:	e7f9      	b.n	800ea50 <memset+0x4>

0800ea5c <_localeconv_r>:
 800ea5c:	4800      	ldr	r0, [pc, #0]	@ (800ea60 <_localeconv_r+0x4>)
 800ea5e:	4770      	bx	lr
 800ea60:	24000168 	.word	0x24000168

0800ea64 <_close_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d06      	ldr	r5, [pc, #24]	@ (800ea80 <_close_r+0x1c>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	602b      	str	r3, [r5, #0]
 800ea70:	f7f4 ff76 	bl	8003960 <_close>
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	d102      	bne.n	800ea7e <_close_r+0x1a>
 800ea78:	682b      	ldr	r3, [r5, #0]
 800ea7a:	b103      	cbz	r3, 800ea7e <_close_r+0x1a>
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
 800ea80:	24000d24 	.word	0x24000d24

0800ea84 <_lseek_r>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	4d07      	ldr	r5, [pc, #28]	@ (800eaa4 <_lseek_r+0x20>)
 800ea88:	4604      	mov	r4, r0
 800ea8a:	4608      	mov	r0, r1
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	2200      	movs	r2, #0
 800ea90:	602a      	str	r2, [r5, #0]
 800ea92:	461a      	mov	r2, r3
 800ea94:	f7f4 ff8b 	bl	80039ae <_lseek>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	d102      	bne.n	800eaa2 <_lseek_r+0x1e>
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	b103      	cbz	r3, 800eaa2 <_lseek_r+0x1e>
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	24000d24 	.word	0x24000d24

0800eaa8 <_read_r>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	4d07      	ldr	r5, [pc, #28]	@ (800eac8 <_read_r+0x20>)
 800eaac:	4604      	mov	r4, r0
 800eaae:	4608      	mov	r0, r1
 800eab0:	4611      	mov	r1, r2
 800eab2:	2200      	movs	r2, #0
 800eab4:	602a      	str	r2, [r5, #0]
 800eab6:	461a      	mov	r2, r3
 800eab8:	f7f4 ff35 	bl	8003926 <_read>
 800eabc:	1c43      	adds	r3, r0, #1
 800eabe:	d102      	bne.n	800eac6 <_read_r+0x1e>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	b103      	cbz	r3, 800eac6 <_read_r+0x1e>
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	24000d24 	.word	0x24000d24

0800eacc <_write_r>:
 800eacc:	b538      	push	{r3, r4, r5, lr}
 800eace:	4d07      	ldr	r5, [pc, #28]	@ (800eaec <_write_r+0x20>)
 800ead0:	4604      	mov	r4, r0
 800ead2:	4608      	mov	r0, r1
 800ead4:	4611      	mov	r1, r2
 800ead6:	2200      	movs	r2, #0
 800ead8:	602a      	str	r2, [r5, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	f7f3 fe91 	bl	8002802 <_write>
 800eae0:	1c43      	adds	r3, r0, #1
 800eae2:	d102      	bne.n	800eaea <_write_r+0x1e>
 800eae4:	682b      	ldr	r3, [r5, #0]
 800eae6:	b103      	cbz	r3, 800eaea <_write_r+0x1e>
 800eae8:	6023      	str	r3, [r4, #0]
 800eaea:	bd38      	pop	{r3, r4, r5, pc}
 800eaec:	24000d24 	.word	0x24000d24

0800eaf0 <__errno>:
 800eaf0:	4b01      	ldr	r3, [pc, #4]	@ (800eaf8 <__errno+0x8>)
 800eaf2:	6818      	ldr	r0, [r3, #0]
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	24000028 	.word	0x24000028

0800eafc <__libc_init_array>:
 800eafc:	b570      	push	{r4, r5, r6, lr}
 800eafe:	4d0d      	ldr	r5, [pc, #52]	@ (800eb34 <__libc_init_array+0x38>)
 800eb00:	4c0d      	ldr	r4, [pc, #52]	@ (800eb38 <__libc_init_array+0x3c>)
 800eb02:	1b64      	subs	r4, r4, r5
 800eb04:	10a4      	asrs	r4, r4, #2
 800eb06:	2600      	movs	r6, #0
 800eb08:	42a6      	cmp	r6, r4
 800eb0a:	d109      	bne.n	800eb20 <__libc_init_array+0x24>
 800eb0c:	4d0b      	ldr	r5, [pc, #44]	@ (800eb3c <__libc_init_array+0x40>)
 800eb0e:	4c0c      	ldr	r4, [pc, #48]	@ (800eb40 <__libc_init_array+0x44>)
 800eb10:	f003 fa20 	bl	8011f54 <_init>
 800eb14:	1b64      	subs	r4, r4, r5
 800eb16:	10a4      	asrs	r4, r4, #2
 800eb18:	2600      	movs	r6, #0
 800eb1a:	42a6      	cmp	r6, r4
 800eb1c:	d105      	bne.n	800eb2a <__libc_init_array+0x2e>
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}
 800eb20:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb24:	4798      	blx	r3
 800eb26:	3601      	adds	r6, #1
 800eb28:	e7ee      	b.n	800eb08 <__libc_init_array+0xc>
 800eb2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb2e:	4798      	blx	r3
 800eb30:	3601      	adds	r6, #1
 800eb32:	e7f2      	b.n	800eb1a <__libc_init_array+0x1e>
 800eb34:	08012700 	.word	0x08012700
 800eb38:	08012700 	.word	0x08012700
 800eb3c:	08012700 	.word	0x08012700
 800eb40:	08012704 	.word	0x08012704

0800eb44 <__retarget_lock_init_recursive>:
 800eb44:	4770      	bx	lr

0800eb46 <__retarget_lock_acquire_recursive>:
 800eb46:	4770      	bx	lr

0800eb48 <__retarget_lock_release_recursive>:
 800eb48:	4770      	bx	lr

0800eb4a <memcpy>:
 800eb4a:	440a      	add	r2, r1
 800eb4c:	4291      	cmp	r1, r2
 800eb4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb52:	d100      	bne.n	800eb56 <memcpy+0xc>
 800eb54:	4770      	bx	lr
 800eb56:	b510      	push	{r4, lr}
 800eb58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb60:	4291      	cmp	r1, r2
 800eb62:	d1f9      	bne.n	800eb58 <memcpy+0xe>
 800eb64:	bd10      	pop	{r4, pc}
	...

0800eb68 <nanf>:
 800eb68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb70 <nanf+0x8>
 800eb6c:	4770      	bx	lr
 800eb6e:	bf00      	nop
 800eb70:	7fc00000 	.word	0x7fc00000

0800eb74 <quorem>:
 800eb74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb78:	6903      	ldr	r3, [r0, #16]
 800eb7a:	690c      	ldr	r4, [r1, #16]
 800eb7c:	42a3      	cmp	r3, r4
 800eb7e:	4607      	mov	r7, r0
 800eb80:	db7e      	blt.n	800ec80 <quorem+0x10c>
 800eb82:	3c01      	subs	r4, #1
 800eb84:	f101 0814 	add.w	r8, r1, #20
 800eb88:	00a3      	lsls	r3, r4, #2
 800eb8a:	f100 0514 	add.w	r5, r0, #20
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	429a      	cmp	r2, r3
 800eba2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eba6:	fbb2 f6f3 	udiv	r6, r2, r3
 800ebaa:	d32e      	bcc.n	800ec0a <quorem+0x96>
 800ebac:	f04f 0a00 	mov.w	sl, #0
 800ebb0:	46c4      	mov	ip, r8
 800ebb2:	46ae      	mov	lr, r5
 800ebb4:	46d3      	mov	fp, sl
 800ebb6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ebba:	b298      	uxth	r0, r3
 800ebbc:	fb06 a000 	mla	r0, r6, r0, sl
 800ebc0:	0c02      	lsrs	r2, r0, #16
 800ebc2:	0c1b      	lsrs	r3, r3, #16
 800ebc4:	fb06 2303 	mla	r3, r6, r3, r2
 800ebc8:	f8de 2000 	ldr.w	r2, [lr]
 800ebcc:	b280      	uxth	r0, r0
 800ebce:	b292      	uxth	r2, r2
 800ebd0:	1a12      	subs	r2, r2, r0
 800ebd2:	445a      	add	r2, fp
 800ebd4:	f8de 0000 	ldr.w	r0, [lr]
 800ebd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ebe2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ebe6:	b292      	uxth	r2, r2
 800ebe8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ebec:	45e1      	cmp	r9, ip
 800ebee:	f84e 2b04 	str.w	r2, [lr], #4
 800ebf2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ebf6:	d2de      	bcs.n	800ebb6 <quorem+0x42>
 800ebf8:	9b00      	ldr	r3, [sp, #0]
 800ebfa:	58eb      	ldr	r3, [r5, r3]
 800ebfc:	b92b      	cbnz	r3, 800ec0a <quorem+0x96>
 800ebfe:	9b01      	ldr	r3, [sp, #4]
 800ec00:	3b04      	subs	r3, #4
 800ec02:	429d      	cmp	r5, r3
 800ec04:	461a      	mov	r2, r3
 800ec06:	d32f      	bcc.n	800ec68 <quorem+0xf4>
 800ec08:	613c      	str	r4, [r7, #16]
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	f001 f956 	bl	800febc <__mcmp>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	db25      	blt.n	800ec60 <quorem+0xec>
 800ec14:	4629      	mov	r1, r5
 800ec16:	2000      	movs	r0, #0
 800ec18:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec1c:	f8d1 c000 	ldr.w	ip, [r1]
 800ec20:	fa1f fe82 	uxth.w	lr, r2
 800ec24:	fa1f f38c 	uxth.w	r3, ip
 800ec28:	eba3 030e 	sub.w	r3, r3, lr
 800ec2c:	4403      	add	r3, r0
 800ec2e:	0c12      	lsrs	r2, r2, #16
 800ec30:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ec34:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec3e:	45c1      	cmp	r9, r8
 800ec40:	f841 3b04 	str.w	r3, [r1], #4
 800ec44:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ec48:	d2e6      	bcs.n	800ec18 <quorem+0xa4>
 800ec4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec52:	b922      	cbnz	r2, 800ec5e <quorem+0xea>
 800ec54:	3b04      	subs	r3, #4
 800ec56:	429d      	cmp	r5, r3
 800ec58:	461a      	mov	r2, r3
 800ec5a:	d30b      	bcc.n	800ec74 <quorem+0x100>
 800ec5c:	613c      	str	r4, [r7, #16]
 800ec5e:	3601      	adds	r6, #1
 800ec60:	4630      	mov	r0, r6
 800ec62:	b003      	add	sp, #12
 800ec64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec68:	6812      	ldr	r2, [r2, #0]
 800ec6a:	3b04      	subs	r3, #4
 800ec6c:	2a00      	cmp	r2, #0
 800ec6e:	d1cb      	bne.n	800ec08 <quorem+0x94>
 800ec70:	3c01      	subs	r4, #1
 800ec72:	e7c6      	b.n	800ec02 <quorem+0x8e>
 800ec74:	6812      	ldr	r2, [r2, #0]
 800ec76:	3b04      	subs	r3, #4
 800ec78:	2a00      	cmp	r2, #0
 800ec7a:	d1ef      	bne.n	800ec5c <quorem+0xe8>
 800ec7c:	3c01      	subs	r4, #1
 800ec7e:	e7ea      	b.n	800ec56 <quorem+0xe2>
 800ec80:	2000      	movs	r0, #0
 800ec82:	e7ee      	b.n	800ec62 <quorem+0xee>
 800ec84:	0000      	movs	r0, r0
	...

0800ec88 <_dtoa_r>:
 800ec88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8c:	ed2d 8b02 	vpush	{d8}
 800ec90:	69c7      	ldr	r7, [r0, #28]
 800ec92:	b091      	sub	sp, #68	@ 0x44
 800ec94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec98:	ec55 4b10 	vmov	r4, r5, d0
 800ec9c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ec9e:	9107      	str	r1, [sp, #28]
 800eca0:	4681      	mov	r9, r0
 800eca2:	9209      	str	r2, [sp, #36]	@ 0x24
 800eca4:	930d      	str	r3, [sp, #52]	@ 0x34
 800eca6:	b97f      	cbnz	r7, 800ecc8 <_dtoa_r+0x40>
 800eca8:	2010      	movs	r0, #16
 800ecaa:	f000 fd8d 	bl	800f7c8 <malloc>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	f8c9 001c 	str.w	r0, [r9, #28]
 800ecb4:	b920      	cbnz	r0, 800ecc0 <_dtoa_r+0x38>
 800ecb6:	4ba0      	ldr	r3, [pc, #640]	@ (800ef38 <_dtoa_r+0x2b0>)
 800ecb8:	21ef      	movs	r1, #239	@ 0xef
 800ecba:	48a0      	ldr	r0, [pc, #640]	@ (800ef3c <_dtoa_r+0x2b4>)
 800ecbc:	f002 fd2c 	bl	8011718 <__assert_func>
 800ecc0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ecc4:	6007      	str	r7, [r0, #0]
 800ecc6:	60c7      	str	r7, [r0, #12]
 800ecc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eccc:	6819      	ldr	r1, [r3, #0]
 800ecce:	b159      	cbz	r1, 800ece8 <_dtoa_r+0x60>
 800ecd0:	685a      	ldr	r2, [r3, #4]
 800ecd2:	604a      	str	r2, [r1, #4]
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	4093      	lsls	r3, r2
 800ecd8:	608b      	str	r3, [r1, #8]
 800ecda:	4648      	mov	r0, r9
 800ecdc:	f000 fe6a 	bl	800f9b4 <_Bfree>
 800ece0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ece4:	2200      	movs	r2, #0
 800ece6:	601a      	str	r2, [r3, #0]
 800ece8:	1e2b      	subs	r3, r5, #0
 800ecea:	bfbb      	ittet	lt
 800ecec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ecf0:	9303      	strlt	r3, [sp, #12]
 800ecf2:	2300      	movge	r3, #0
 800ecf4:	2201      	movlt	r2, #1
 800ecf6:	bfac      	ite	ge
 800ecf8:	6033      	strge	r3, [r6, #0]
 800ecfa:	6032      	strlt	r2, [r6, #0]
 800ecfc:	4b90      	ldr	r3, [pc, #576]	@ (800ef40 <_dtoa_r+0x2b8>)
 800ecfe:	9e03      	ldr	r6, [sp, #12]
 800ed00:	43b3      	bics	r3, r6
 800ed02:	d110      	bne.n	800ed26 <_dtoa_r+0x9e>
 800ed04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed06:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ed0a:	6013      	str	r3, [r2, #0]
 800ed0c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ed10:	4323      	orrs	r3, r4
 800ed12:	f000 84de 	beq.w	800f6d2 <_dtoa_r+0xa4a>
 800ed16:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed18:	4f8a      	ldr	r7, [pc, #552]	@ (800ef44 <_dtoa_r+0x2bc>)
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f000 84e0 	beq.w	800f6e0 <_dtoa_r+0xa58>
 800ed20:	1cfb      	adds	r3, r7, #3
 800ed22:	f000 bcdb 	b.w	800f6dc <_dtoa_r+0xa54>
 800ed26:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ed2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ed2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed32:	d10a      	bne.n	800ed4a <_dtoa_r+0xc2>
 800ed34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed36:	2301      	movs	r3, #1
 800ed38:	6013      	str	r3, [r2, #0]
 800ed3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed3c:	b113      	cbz	r3, 800ed44 <_dtoa_r+0xbc>
 800ed3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ed40:	4b81      	ldr	r3, [pc, #516]	@ (800ef48 <_dtoa_r+0x2c0>)
 800ed42:	6013      	str	r3, [r2, #0]
 800ed44:	4f81      	ldr	r7, [pc, #516]	@ (800ef4c <_dtoa_r+0x2c4>)
 800ed46:	f000 bccb 	b.w	800f6e0 <_dtoa_r+0xa58>
 800ed4a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ed4c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ed4e:	4648      	mov	r0, r9
 800ed50:	eeb0 0b48 	vmov.f64	d0, d8
 800ed54:	f001 f9d2 	bl	80100fc <__d2b>
 800ed58:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ed5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed5e:	9001      	str	r0, [sp, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d045      	beq.n	800edf0 <_dtoa_r+0x168>
 800ed64:	eeb0 7b48 	vmov.f64	d7, d8
 800ed68:	ee18 1a90 	vmov	r1, s17
 800ed6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ed70:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ed74:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ed78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ed7c:	2500      	movs	r5, #0
 800ed7e:	ee07 1a90 	vmov	s15, r1
 800ed82:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ed86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ef20 <_dtoa_r+0x298>
 800ed8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed8e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ef28 <_dtoa_r+0x2a0>
 800ed92:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ed96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ef30 <_dtoa_r+0x2a8>
 800ed9a:	ee07 3a90 	vmov	s15, r3
 800ed9e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800eda2:	eeb0 7b46 	vmov.f64	d7, d6
 800eda6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800edaa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800edae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800edb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb6:	ee16 8a90 	vmov	r8, s13
 800edba:	d508      	bpl.n	800edce <_dtoa_r+0x146>
 800edbc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800edc0:	eeb4 6b47 	vcmp.f64	d6, d7
 800edc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc8:	bf18      	it	ne
 800edca:	f108 38ff 	addne.w	r8, r8, #4294967295
 800edce:	f1b8 0f16 	cmp.w	r8, #22
 800edd2:	d82b      	bhi.n	800ee2c <_dtoa_r+0x1a4>
 800edd4:	495e      	ldr	r1, [pc, #376]	@ (800ef50 <_dtoa_r+0x2c8>)
 800edd6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800edda:	ed91 7b00 	vldr	d7, [r1]
 800edde:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ede2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede6:	d501      	bpl.n	800edec <_dtoa_r+0x164>
 800ede8:	f108 38ff 	add.w	r8, r8, #4294967295
 800edec:	2100      	movs	r1, #0
 800edee:	e01e      	b.n	800ee2e <_dtoa_r+0x1a6>
 800edf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edf2:	4413      	add	r3, r2
 800edf4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800edf8:	2920      	cmp	r1, #32
 800edfa:	bfc1      	itttt	gt
 800edfc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ee00:	408e      	lslgt	r6, r1
 800ee02:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ee06:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ee0a:	bfd6      	itet	le
 800ee0c:	f1c1 0120 	rsble	r1, r1, #32
 800ee10:	4331      	orrgt	r1, r6
 800ee12:	fa04 f101 	lslle.w	r1, r4, r1
 800ee16:	ee07 1a90 	vmov	s15, r1
 800ee1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	ee17 1a90 	vmov	r1, s15
 800ee24:	2501      	movs	r5, #1
 800ee26:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ee2a:	e7a8      	b.n	800ed7e <_dtoa_r+0xf6>
 800ee2c:	2101      	movs	r1, #1
 800ee2e:	1ad2      	subs	r2, r2, r3
 800ee30:	1e53      	subs	r3, r2, #1
 800ee32:	9306      	str	r3, [sp, #24]
 800ee34:	bf45      	ittet	mi
 800ee36:	f1c2 0301 	rsbmi	r3, r2, #1
 800ee3a:	9305      	strmi	r3, [sp, #20]
 800ee3c:	2300      	movpl	r3, #0
 800ee3e:	2300      	movmi	r3, #0
 800ee40:	bf4c      	ite	mi
 800ee42:	9306      	strmi	r3, [sp, #24]
 800ee44:	9305      	strpl	r3, [sp, #20]
 800ee46:	f1b8 0f00 	cmp.w	r8, #0
 800ee4a:	910c      	str	r1, [sp, #48]	@ 0x30
 800ee4c:	db18      	blt.n	800ee80 <_dtoa_r+0x1f8>
 800ee4e:	9b06      	ldr	r3, [sp, #24]
 800ee50:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ee54:	4443      	add	r3, r8
 800ee56:	9306      	str	r3, [sp, #24]
 800ee58:	2300      	movs	r3, #0
 800ee5a:	9a07      	ldr	r2, [sp, #28]
 800ee5c:	2a09      	cmp	r2, #9
 800ee5e:	d849      	bhi.n	800eef4 <_dtoa_r+0x26c>
 800ee60:	2a05      	cmp	r2, #5
 800ee62:	bfc4      	itt	gt
 800ee64:	3a04      	subgt	r2, #4
 800ee66:	9207      	strgt	r2, [sp, #28]
 800ee68:	9a07      	ldr	r2, [sp, #28]
 800ee6a:	f1a2 0202 	sub.w	r2, r2, #2
 800ee6e:	bfcc      	ite	gt
 800ee70:	2400      	movgt	r4, #0
 800ee72:	2401      	movle	r4, #1
 800ee74:	2a03      	cmp	r2, #3
 800ee76:	d848      	bhi.n	800ef0a <_dtoa_r+0x282>
 800ee78:	e8df f002 	tbb	[pc, r2]
 800ee7c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ee80:	9b05      	ldr	r3, [sp, #20]
 800ee82:	2200      	movs	r2, #0
 800ee84:	eba3 0308 	sub.w	r3, r3, r8
 800ee88:	9305      	str	r3, [sp, #20]
 800ee8a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ee8c:	f1c8 0300 	rsb	r3, r8, #0
 800ee90:	e7e3      	b.n	800ee5a <_dtoa_r+0x1d2>
 800ee92:	2200      	movs	r2, #0
 800ee94:	9208      	str	r2, [sp, #32]
 800ee96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee98:	2a00      	cmp	r2, #0
 800ee9a:	dc39      	bgt.n	800ef10 <_dtoa_r+0x288>
 800ee9c:	f04f 0b01 	mov.w	fp, #1
 800eea0:	46da      	mov	sl, fp
 800eea2:	465a      	mov	r2, fp
 800eea4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800eea8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800eeac:	2100      	movs	r1, #0
 800eeae:	2004      	movs	r0, #4
 800eeb0:	f100 0614 	add.w	r6, r0, #20
 800eeb4:	4296      	cmp	r6, r2
 800eeb6:	d930      	bls.n	800ef1a <_dtoa_r+0x292>
 800eeb8:	6079      	str	r1, [r7, #4]
 800eeba:	4648      	mov	r0, r9
 800eebc:	9304      	str	r3, [sp, #16]
 800eebe:	f000 fd39 	bl	800f934 <_Balloc>
 800eec2:	9b04      	ldr	r3, [sp, #16]
 800eec4:	4607      	mov	r7, r0
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d146      	bne.n	800ef58 <_dtoa_r+0x2d0>
 800eeca:	4b22      	ldr	r3, [pc, #136]	@ (800ef54 <_dtoa_r+0x2cc>)
 800eecc:	4602      	mov	r2, r0
 800eece:	f240 11af 	movw	r1, #431	@ 0x1af
 800eed2:	e6f2      	b.n	800ecba <_dtoa_r+0x32>
 800eed4:	2201      	movs	r2, #1
 800eed6:	e7dd      	b.n	800ee94 <_dtoa_r+0x20c>
 800eed8:	2200      	movs	r2, #0
 800eeda:	9208      	str	r2, [sp, #32]
 800eedc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eede:	eb08 0b02 	add.w	fp, r8, r2
 800eee2:	f10b 0a01 	add.w	sl, fp, #1
 800eee6:	4652      	mov	r2, sl
 800eee8:	2a01      	cmp	r2, #1
 800eeea:	bfb8      	it	lt
 800eeec:	2201      	movlt	r2, #1
 800eeee:	e7db      	b.n	800eea8 <_dtoa_r+0x220>
 800eef0:	2201      	movs	r2, #1
 800eef2:	e7f2      	b.n	800eeda <_dtoa_r+0x252>
 800eef4:	2401      	movs	r4, #1
 800eef6:	2200      	movs	r2, #0
 800eef8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800eefc:	f04f 3bff 	mov.w	fp, #4294967295
 800ef00:	2100      	movs	r1, #0
 800ef02:	46da      	mov	sl, fp
 800ef04:	2212      	movs	r2, #18
 800ef06:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef08:	e7ce      	b.n	800eea8 <_dtoa_r+0x220>
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	9208      	str	r2, [sp, #32]
 800ef0e:	e7f5      	b.n	800eefc <_dtoa_r+0x274>
 800ef10:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ef14:	46da      	mov	sl, fp
 800ef16:	465a      	mov	r2, fp
 800ef18:	e7c6      	b.n	800eea8 <_dtoa_r+0x220>
 800ef1a:	3101      	adds	r1, #1
 800ef1c:	0040      	lsls	r0, r0, #1
 800ef1e:	e7c7      	b.n	800eeb0 <_dtoa_r+0x228>
 800ef20:	636f4361 	.word	0x636f4361
 800ef24:	3fd287a7 	.word	0x3fd287a7
 800ef28:	8b60c8b3 	.word	0x8b60c8b3
 800ef2c:	3fc68a28 	.word	0x3fc68a28
 800ef30:	509f79fb 	.word	0x509f79fb
 800ef34:	3fd34413 	.word	0x3fd34413
 800ef38:	0801230e 	.word	0x0801230e
 800ef3c:	08012325 	.word	0x08012325
 800ef40:	7ff00000 	.word	0x7ff00000
 800ef44:	0801230a 	.word	0x0801230a
 800ef48:	080122d9 	.word	0x080122d9
 800ef4c:	080122d8 	.word	0x080122d8
 800ef50:	08012420 	.word	0x08012420
 800ef54:	0801237d 	.word	0x0801237d
 800ef58:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ef5c:	f1ba 0f0e 	cmp.w	sl, #14
 800ef60:	6010      	str	r0, [r2, #0]
 800ef62:	d86f      	bhi.n	800f044 <_dtoa_r+0x3bc>
 800ef64:	2c00      	cmp	r4, #0
 800ef66:	d06d      	beq.n	800f044 <_dtoa_r+0x3bc>
 800ef68:	f1b8 0f00 	cmp.w	r8, #0
 800ef6c:	f340 80c2 	ble.w	800f0f4 <_dtoa_r+0x46c>
 800ef70:	4aca      	ldr	r2, [pc, #808]	@ (800f29c <_dtoa_r+0x614>)
 800ef72:	f008 010f 	and.w	r1, r8, #15
 800ef76:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ef7a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ef7e:	ed92 7b00 	vldr	d7, [r2]
 800ef82:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ef86:	f000 80a9 	beq.w	800f0dc <_dtoa_r+0x454>
 800ef8a:	4ac5      	ldr	r2, [pc, #788]	@ (800f2a0 <_dtoa_r+0x618>)
 800ef8c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ef90:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ef94:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ef98:	f001 010f 	and.w	r1, r1, #15
 800ef9c:	2203      	movs	r2, #3
 800ef9e:	48c0      	ldr	r0, [pc, #768]	@ (800f2a0 <_dtoa_r+0x618>)
 800efa0:	2900      	cmp	r1, #0
 800efa2:	f040 809d 	bne.w	800f0e0 <_dtoa_r+0x458>
 800efa6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800efaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800efae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800efb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800efb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800efb8:	2900      	cmp	r1, #0
 800efba:	f000 80c1 	beq.w	800f140 <_dtoa_r+0x4b8>
 800efbe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800efc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800efc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efca:	f140 80b9 	bpl.w	800f140 <_dtoa_r+0x4b8>
 800efce:	f1ba 0f00 	cmp.w	sl, #0
 800efd2:	f000 80b5 	beq.w	800f140 <_dtoa_r+0x4b8>
 800efd6:	f1bb 0f00 	cmp.w	fp, #0
 800efda:	dd31      	ble.n	800f040 <_dtoa_r+0x3b8>
 800efdc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800efe0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800efe4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800efe8:	f108 31ff 	add.w	r1, r8, #4294967295
 800efec:	9104      	str	r1, [sp, #16]
 800efee:	3201      	adds	r2, #1
 800eff0:	465c      	mov	r4, fp
 800eff2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800eff6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800effa:	ee07 2a90 	vmov	s15, r2
 800effe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f002:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f006:	ee15 2a90 	vmov	r2, s11
 800f00a:	ec51 0b15 	vmov	r0, r1, d5
 800f00e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f012:	2c00      	cmp	r4, #0
 800f014:	f040 8098 	bne.w	800f148 <_dtoa_r+0x4c0>
 800f018:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f01c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f020:	ec41 0b17 	vmov	d7, r0, r1
 800f024:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02c:	f300 8261 	bgt.w	800f4f2 <_dtoa_r+0x86a>
 800f030:	eeb1 7b47 	vneg.f64	d7, d7
 800f034:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03c:	f100 80f5 	bmi.w	800f22a <_dtoa_r+0x5a2>
 800f040:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f044:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f046:	2a00      	cmp	r2, #0
 800f048:	f2c0 812c 	blt.w	800f2a4 <_dtoa_r+0x61c>
 800f04c:	f1b8 0f0e 	cmp.w	r8, #14
 800f050:	f300 8128 	bgt.w	800f2a4 <_dtoa_r+0x61c>
 800f054:	4b91      	ldr	r3, [pc, #580]	@ (800f29c <_dtoa_r+0x614>)
 800f056:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f05a:	ed93 6b00 	vldr	d6, [r3]
 800f05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f060:	2b00      	cmp	r3, #0
 800f062:	da03      	bge.n	800f06c <_dtoa_r+0x3e4>
 800f064:	f1ba 0f00 	cmp.w	sl, #0
 800f068:	f340 80d2 	ble.w	800f210 <_dtoa_r+0x588>
 800f06c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f070:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f074:	463e      	mov	r6, r7
 800f076:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f07a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f07e:	ee15 3a10 	vmov	r3, s10
 800f082:	3330      	adds	r3, #48	@ 0x30
 800f084:	f806 3b01 	strb.w	r3, [r6], #1
 800f088:	1bf3      	subs	r3, r6, r7
 800f08a:	459a      	cmp	sl, r3
 800f08c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f090:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f094:	f040 80f8 	bne.w	800f288 <_dtoa_r+0x600>
 800f098:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f09c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a4:	f300 80dd 	bgt.w	800f262 <_dtoa_r+0x5da>
 800f0a8:	eeb4 7b46 	vcmp.f64	d7, d6
 800f0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b0:	d104      	bne.n	800f0bc <_dtoa_r+0x434>
 800f0b2:	ee15 3a10 	vmov	r3, s10
 800f0b6:	07db      	lsls	r3, r3, #31
 800f0b8:	f100 80d3 	bmi.w	800f262 <_dtoa_r+0x5da>
 800f0bc:	9901      	ldr	r1, [sp, #4]
 800f0be:	4648      	mov	r0, r9
 800f0c0:	f000 fc78 	bl	800f9b4 <_Bfree>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f0c8:	7033      	strb	r3, [r6, #0]
 800f0ca:	f108 0301 	add.w	r3, r8, #1
 800f0ce:	6013      	str	r3, [r2, #0]
 800f0d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f000 8304 	beq.w	800f6e0 <_dtoa_r+0xa58>
 800f0d8:	601e      	str	r6, [r3, #0]
 800f0da:	e301      	b.n	800f6e0 <_dtoa_r+0xa58>
 800f0dc:	2202      	movs	r2, #2
 800f0de:	e75e      	b.n	800ef9e <_dtoa_r+0x316>
 800f0e0:	07cc      	lsls	r4, r1, #31
 800f0e2:	d504      	bpl.n	800f0ee <_dtoa_r+0x466>
 800f0e4:	ed90 6b00 	vldr	d6, [r0]
 800f0e8:	3201      	adds	r2, #1
 800f0ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f0ee:	1049      	asrs	r1, r1, #1
 800f0f0:	3008      	adds	r0, #8
 800f0f2:	e755      	b.n	800efa0 <_dtoa_r+0x318>
 800f0f4:	d022      	beq.n	800f13c <_dtoa_r+0x4b4>
 800f0f6:	f1c8 0100 	rsb	r1, r8, #0
 800f0fa:	4a68      	ldr	r2, [pc, #416]	@ (800f29c <_dtoa_r+0x614>)
 800f0fc:	f001 000f 	and.w	r0, r1, #15
 800f100:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f104:	ed92 7b00 	vldr	d7, [r2]
 800f108:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f10c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f110:	4863      	ldr	r0, [pc, #396]	@ (800f2a0 <_dtoa_r+0x618>)
 800f112:	1109      	asrs	r1, r1, #4
 800f114:	2400      	movs	r4, #0
 800f116:	2202      	movs	r2, #2
 800f118:	b929      	cbnz	r1, 800f126 <_dtoa_r+0x49e>
 800f11a:	2c00      	cmp	r4, #0
 800f11c:	f43f af49 	beq.w	800efb2 <_dtoa_r+0x32a>
 800f120:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f124:	e745      	b.n	800efb2 <_dtoa_r+0x32a>
 800f126:	07ce      	lsls	r6, r1, #31
 800f128:	d505      	bpl.n	800f136 <_dtoa_r+0x4ae>
 800f12a:	ed90 6b00 	vldr	d6, [r0]
 800f12e:	3201      	adds	r2, #1
 800f130:	2401      	movs	r4, #1
 800f132:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f136:	1049      	asrs	r1, r1, #1
 800f138:	3008      	adds	r0, #8
 800f13a:	e7ed      	b.n	800f118 <_dtoa_r+0x490>
 800f13c:	2202      	movs	r2, #2
 800f13e:	e738      	b.n	800efb2 <_dtoa_r+0x32a>
 800f140:	f8cd 8010 	str.w	r8, [sp, #16]
 800f144:	4654      	mov	r4, sl
 800f146:	e754      	b.n	800eff2 <_dtoa_r+0x36a>
 800f148:	4a54      	ldr	r2, [pc, #336]	@ (800f29c <_dtoa_r+0x614>)
 800f14a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f14e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f152:	9a08      	ldr	r2, [sp, #32]
 800f154:	ec41 0b17 	vmov	d7, r0, r1
 800f158:	443c      	add	r4, r7
 800f15a:	b34a      	cbz	r2, 800f1b0 <_dtoa_r+0x528>
 800f15c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f160:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f164:	463e      	mov	r6, r7
 800f166:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f16a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f16e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f172:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f176:	ee14 2a90 	vmov	r2, s9
 800f17a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f17e:	3230      	adds	r2, #48	@ 0x30
 800f180:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f184:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f18c:	f806 2b01 	strb.w	r2, [r6], #1
 800f190:	d438      	bmi.n	800f204 <_dtoa_r+0x57c>
 800f192:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f196:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19e:	d462      	bmi.n	800f266 <_dtoa_r+0x5de>
 800f1a0:	42a6      	cmp	r6, r4
 800f1a2:	f43f af4d 	beq.w	800f040 <_dtoa_r+0x3b8>
 800f1a6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f1aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f1ae:	e7e0      	b.n	800f172 <_dtoa_r+0x4ea>
 800f1b0:	4621      	mov	r1, r4
 800f1b2:	463e      	mov	r6, r7
 800f1b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f1b8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f1bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f1c0:	ee14 2a90 	vmov	r2, s9
 800f1c4:	3230      	adds	r2, #48	@ 0x30
 800f1c6:	f806 2b01 	strb.w	r2, [r6], #1
 800f1ca:	42a6      	cmp	r6, r4
 800f1cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f1d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f1d4:	d119      	bne.n	800f20a <_dtoa_r+0x582>
 800f1d6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f1da:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f1de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e6:	dc3e      	bgt.n	800f266 <_dtoa_r+0x5de>
 800f1e8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f1ec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f4:	f57f af24 	bpl.w	800f040 <_dtoa_r+0x3b8>
 800f1f8:	460e      	mov	r6, r1
 800f1fa:	3901      	subs	r1, #1
 800f1fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f200:	2b30      	cmp	r3, #48	@ 0x30
 800f202:	d0f9      	beq.n	800f1f8 <_dtoa_r+0x570>
 800f204:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f208:	e758      	b.n	800f0bc <_dtoa_r+0x434>
 800f20a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f20e:	e7d5      	b.n	800f1bc <_dtoa_r+0x534>
 800f210:	d10b      	bne.n	800f22a <_dtoa_r+0x5a2>
 800f212:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f216:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f21a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f21e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f226:	f2c0 8161 	blt.w	800f4ec <_dtoa_r+0x864>
 800f22a:	2400      	movs	r4, #0
 800f22c:	4625      	mov	r5, r4
 800f22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f230:	43db      	mvns	r3, r3
 800f232:	9304      	str	r3, [sp, #16]
 800f234:	463e      	mov	r6, r7
 800f236:	f04f 0800 	mov.w	r8, #0
 800f23a:	4621      	mov	r1, r4
 800f23c:	4648      	mov	r0, r9
 800f23e:	f000 fbb9 	bl	800f9b4 <_Bfree>
 800f242:	2d00      	cmp	r5, #0
 800f244:	d0de      	beq.n	800f204 <_dtoa_r+0x57c>
 800f246:	f1b8 0f00 	cmp.w	r8, #0
 800f24a:	d005      	beq.n	800f258 <_dtoa_r+0x5d0>
 800f24c:	45a8      	cmp	r8, r5
 800f24e:	d003      	beq.n	800f258 <_dtoa_r+0x5d0>
 800f250:	4641      	mov	r1, r8
 800f252:	4648      	mov	r0, r9
 800f254:	f000 fbae 	bl	800f9b4 <_Bfree>
 800f258:	4629      	mov	r1, r5
 800f25a:	4648      	mov	r0, r9
 800f25c:	f000 fbaa 	bl	800f9b4 <_Bfree>
 800f260:	e7d0      	b.n	800f204 <_dtoa_r+0x57c>
 800f262:	f8cd 8010 	str.w	r8, [sp, #16]
 800f266:	4633      	mov	r3, r6
 800f268:	461e      	mov	r6, r3
 800f26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f26e:	2a39      	cmp	r2, #57	@ 0x39
 800f270:	d106      	bne.n	800f280 <_dtoa_r+0x5f8>
 800f272:	429f      	cmp	r7, r3
 800f274:	d1f8      	bne.n	800f268 <_dtoa_r+0x5e0>
 800f276:	9a04      	ldr	r2, [sp, #16]
 800f278:	3201      	adds	r2, #1
 800f27a:	9204      	str	r2, [sp, #16]
 800f27c:	2230      	movs	r2, #48	@ 0x30
 800f27e:	703a      	strb	r2, [r7, #0]
 800f280:	781a      	ldrb	r2, [r3, #0]
 800f282:	3201      	adds	r2, #1
 800f284:	701a      	strb	r2, [r3, #0]
 800f286:	e7bd      	b.n	800f204 <_dtoa_r+0x57c>
 800f288:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f28c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f294:	f47f aeef 	bne.w	800f076 <_dtoa_r+0x3ee>
 800f298:	e710      	b.n	800f0bc <_dtoa_r+0x434>
 800f29a:	bf00      	nop
 800f29c:	08012420 	.word	0x08012420
 800f2a0:	080123f8 	.word	0x080123f8
 800f2a4:	9908      	ldr	r1, [sp, #32]
 800f2a6:	2900      	cmp	r1, #0
 800f2a8:	f000 80e3 	beq.w	800f472 <_dtoa_r+0x7ea>
 800f2ac:	9907      	ldr	r1, [sp, #28]
 800f2ae:	2901      	cmp	r1, #1
 800f2b0:	f300 80c8 	bgt.w	800f444 <_dtoa_r+0x7bc>
 800f2b4:	2d00      	cmp	r5, #0
 800f2b6:	f000 80c1 	beq.w	800f43c <_dtoa_r+0x7b4>
 800f2ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f2be:	9e05      	ldr	r6, [sp, #20]
 800f2c0:	461c      	mov	r4, r3
 800f2c2:	9304      	str	r3, [sp, #16]
 800f2c4:	9b05      	ldr	r3, [sp, #20]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	9305      	str	r3, [sp, #20]
 800f2ca:	9b06      	ldr	r3, [sp, #24]
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	4413      	add	r3, r2
 800f2d0:	4648      	mov	r0, r9
 800f2d2:	9306      	str	r3, [sp, #24]
 800f2d4:	f000 fc6c 	bl	800fbb0 <__i2b>
 800f2d8:	9b04      	ldr	r3, [sp, #16]
 800f2da:	4605      	mov	r5, r0
 800f2dc:	b166      	cbz	r6, 800f2f8 <_dtoa_r+0x670>
 800f2de:	9a06      	ldr	r2, [sp, #24]
 800f2e0:	2a00      	cmp	r2, #0
 800f2e2:	dd09      	ble.n	800f2f8 <_dtoa_r+0x670>
 800f2e4:	42b2      	cmp	r2, r6
 800f2e6:	9905      	ldr	r1, [sp, #20]
 800f2e8:	bfa8      	it	ge
 800f2ea:	4632      	movge	r2, r6
 800f2ec:	1a89      	subs	r1, r1, r2
 800f2ee:	9105      	str	r1, [sp, #20]
 800f2f0:	9906      	ldr	r1, [sp, #24]
 800f2f2:	1ab6      	subs	r6, r6, r2
 800f2f4:	1a8a      	subs	r2, r1, r2
 800f2f6:	9206      	str	r2, [sp, #24]
 800f2f8:	b1fb      	cbz	r3, 800f33a <_dtoa_r+0x6b2>
 800f2fa:	9a08      	ldr	r2, [sp, #32]
 800f2fc:	2a00      	cmp	r2, #0
 800f2fe:	f000 80bc 	beq.w	800f47a <_dtoa_r+0x7f2>
 800f302:	b19c      	cbz	r4, 800f32c <_dtoa_r+0x6a4>
 800f304:	4629      	mov	r1, r5
 800f306:	4622      	mov	r2, r4
 800f308:	4648      	mov	r0, r9
 800f30a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f30c:	f000 fd10 	bl	800fd30 <__pow5mult>
 800f310:	9a01      	ldr	r2, [sp, #4]
 800f312:	4601      	mov	r1, r0
 800f314:	4605      	mov	r5, r0
 800f316:	4648      	mov	r0, r9
 800f318:	f000 fc60 	bl	800fbdc <__multiply>
 800f31c:	9901      	ldr	r1, [sp, #4]
 800f31e:	9004      	str	r0, [sp, #16]
 800f320:	4648      	mov	r0, r9
 800f322:	f000 fb47 	bl	800f9b4 <_Bfree>
 800f326:	9a04      	ldr	r2, [sp, #16]
 800f328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f32a:	9201      	str	r2, [sp, #4]
 800f32c:	1b1a      	subs	r2, r3, r4
 800f32e:	d004      	beq.n	800f33a <_dtoa_r+0x6b2>
 800f330:	9901      	ldr	r1, [sp, #4]
 800f332:	4648      	mov	r0, r9
 800f334:	f000 fcfc 	bl	800fd30 <__pow5mult>
 800f338:	9001      	str	r0, [sp, #4]
 800f33a:	2101      	movs	r1, #1
 800f33c:	4648      	mov	r0, r9
 800f33e:	f000 fc37 	bl	800fbb0 <__i2b>
 800f342:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f344:	4604      	mov	r4, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	f000 81d0 	beq.w	800f6ec <_dtoa_r+0xa64>
 800f34c:	461a      	mov	r2, r3
 800f34e:	4601      	mov	r1, r0
 800f350:	4648      	mov	r0, r9
 800f352:	f000 fced 	bl	800fd30 <__pow5mult>
 800f356:	9b07      	ldr	r3, [sp, #28]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	4604      	mov	r4, r0
 800f35c:	f300 8095 	bgt.w	800f48a <_dtoa_r+0x802>
 800f360:	9b02      	ldr	r3, [sp, #8]
 800f362:	2b00      	cmp	r3, #0
 800f364:	f040 808b 	bne.w	800f47e <_dtoa_r+0x7f6>
 800f368:	9b03      	ldr	r3, [sp, #12]
 800f36a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f36e:	2a00      	cmp	r2, #0
 800f370:	f040 8087 	bne.w	800f482 <_dtoa_r+0x7fa>
 800f374:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f378:	0d12      	lsrs	r2, r2, #20
 800f37a:	0512      	lsls	r2, r2, #20
 800f37c:	2a00      	cmp	r2, #0
 800f37e:	f000 8082 	beq.w	800f486 <_dtoa_r+0x7fe>
 800f382:	9b05      	ldr	r3, [sp, #20]
 800f384:	3301      	adds	r3, #1
 800f386:	9305      	str	r3, [sp, #20]
 800f388:	9b06      	ldr	r3, [sp, #24]
 800f38a:	3301      	adds	r3, #1
 800f38c:	9306      	str	r3, [sp, #24]
 800f38e:	2301      	movs	r3, #1
 800f390:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f394:	2b00      	cmp	r3, #0
 800f396:	f000 81af 	beq.w	800f6f8 <_dtoa_r+0xa70>
 800f39a:	6922      	ldr	r2, [r4, #16]
 800f39c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f3a0:	6910      	ldr	r0, [r2, #16]
 800f3a2:	f000 fbb9 	bl	800fb18 <__hi0bits>
 800f3a6:	f1c0 0020 	rsb	r0, r0, #32
 800f3aa:	9b06      	ldr	r3, [sp, #24]
 800f3ac:	4418      	add	r0, r3
 800f3ae:	f010 001f 	ands.w	r0, r0, #31
 800f3b2:	d076      	beq.n	800f4a2 <_dtoa_r+0x81a>
 800f3b4:	f1c0 0220 	rsb	r2, r0, #32
 800f3b8:	2a04      	cmp	r2, #4
 800f3ba:	dd69      	ble.n	800f490 <_dtoa_r+0x808>
 800f3bc:	9b05      	ldr	r3, [sp, #20]
 800f3be:	f1c0 001c 	rsb	r0, r0, #28
 800f3c2:	4403      	add	r3, r0
 800f3c4:	9305      	str	r3, [sp, #20]
 800f3c6:	9b06      	ldr	r3, [sp, #24]
 800f3c8:	4406      	add	r6, r0
 800f3ca:	4403      	add	r3, r0
 800f3cc:	9306      	str	r3, [sp, #24]
 800f3ce:	9b05      	ldr	r3, [sp, #20]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	dd05      	ble.n	800f3e0 <_dtoa_r+0x758>
 800f3d4:	9901      	ldr	r1, [sp, #4]
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	4648      	mov	r0, r9
 800f3da:	f000 fd03 	bl	800fde4 <__lshift>
 800f3de:	9001      	str	r0, [sp, #4]
 800f3e0:	9b06      	ldr	r3, [sp, #24]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	dd05      	ble.n	800f3f2 <_dtoa_r+0x76a>
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	4648      	mov	r0, r9
 800f3ec:	f000 fcfa 	bl	800fde4 <__lshift>
 800f3f0:	4604      	mov	r4, r0
 800f3f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d056      	beq.n	800f4a6 <_dtoa_r+0x81e>
 800f3f8:	9801      	ldr	r0, [sp, #4]
 800f3fa:	4621      	mov	r1, r4
 800f3fc:	f000 fd5e 	bl	800febc <__mcmp>
 800f400:	2800      	cmp	r0, #0
 800f402:	da50      	bge.n	800f4a6 <_dtoa_r+0x81e>
 800f404:	f108 33ff 	add.w	r3, r8, #4294967295
 800f408:	9304      	str	r3, [sp, #16]
 800f40a:	9901      	ldr	r1, [sp, #4]
 800f40c:	2300      	movs	r3, #0
 800f40e:	220a      	movs	r2, #10
 800f410:	4648      	mov	r0, r9
 800f412:	f000 faf1 	bl	800f9f8 <__multadd>
 800f416:	9b08      	ldr	r3, [sp, #32]
 800f418:	9001      	str	r0, [sp, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f000 816e 	beq.w	800f6fc <_dtoa_r+0xa74>
 800f420:	4629      	mov	r1, r5
 800f422:	2300      	movs	r3, #0
 800f424:	220a      	movs	r2, #10
 800f426:	4648      	mov	r0, r9
 800f428:	f000 fae6 	bl	800f9f8 <__multadd>
 800f42c:	f1bb 0f00 	cmp.w	fp, #0
 800f430:	4605      	mov	r5, r0
 800f432:	dc64      	bgt.n	800f4fe <_dtoa_r+0x876>
 800f434:	9b07      	ldr	r3, [sp, #28]
 800f436:	2b02      	cmp	r3, #2
 800f438:	dc3e      	bgt.n	800f4b8 <_dtoa_r+0x830>
 800f43a:	e060      	b.n	800f4fe <_dtoa_r+0x876>
 800f43c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f43e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f442:	e73c      	b.n	800f2be <_dtoa_r+0x636>
 800f444:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f448:	42a3      	cmp	r3, r4
 800f44a:	bfbf      	itttt	lt
 800f44c:	1ae2      	sublt	r2, r4, r3
 800f44e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f450:	189b      	addlt	r3, r3, r2
 800f452:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f454:	bfae      	itee	ge
 800f456:	1b1c      	subge	r4, r3, r4
 800f458:	4623      	movlt	r3, r4
 800f45a:	2400      	movlt	r4, #0
 800f45c:	f1ba 0f00 	cmp.w	sl, #0
 800f460:	bfb5      	itete	lt
 800f462:	9a05      	ldrlt	r2, [sp, #20]
 800f464:	9e05      	ldrge	r6, [sp, #20]
 800f466:	eba2 060a 	sublt.w	r6, r2, sl
 800f46a:	4652      	movge	r2, sl
 800f46c:	bfb8      	it	lt
 800f46e:	2200      	movlt	r2, #0
 800f470:	e727      	b.n	800f2c2 <_dtoa_r+0x63a>
 800f472:	9e05      	ldr	r6, [sp, #20]
 800f474:	9d08      	ldr	r5, [sp, #32]
 800f476:	461c      	mov	r4, r3
 800f478:	e730      	b.n	800f2dc <_dtoa_r+0x654>
 800f47a:	461a      	mov	r2, r3
 800f47c:	e758      	b.n	800f330 <_dtoa_r+0x6a8>
 800f47e:	2300      	movs	r3, #0
 800f480:	e786      	b.n	800f390 <_dtoa_r+0x708>
 800f482:	9b02      	ldr	r3, [sp, #8]
 800f484:	e784      	b.n	800f390 <_dtoa_r+0x708>
 800f486:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f488:	e783      	b.n	800f392 <_dtoa_r+0x70a>
 800f48a:	2300      	movs	r3, #0
 800f48c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f48e:	e784      	b.n	800f39a <_dtoa_r+0x712>
 800f490:	d09d      	beq.n	800f3ce <_dtoa_r+0x746>
 800f492:	9b05      	ldr	r3, [sp, #20]
 800f494:	321c      	adds	r2, #28
 800f496:	4413      	add	r3, r2
 800f498:	9305      	str	r3, [sp, #20]
 800f49a:	9b06      	ldr	r3, [sp, #24]
 800f49c:	4416      	add	r6, r2
 800f49e:	4413      	add	r3, r2
 800f4a0:	e794      	b.n	800f3cc <_dtoa_r+0x744>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	e7f5      	b.n	800f492 <_dtoa_r+0x80a>
 800f4a6:	f1ba 0f00 	cmp.w	sl, #0
 800f4aa:	f8cd 8010 	str.w	r8, [sp, #16]
 800f4ae:	46d3      	mov	fp, sl
 800f4b0:	dc21      	bgt.n	800f4f6 <_dtoa_r+0x86e>
 800f4b2:	9b07      	ldr	r3, [sp, #28]
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	dd1e      	ble.n	800f4f6 <_dtoa_r+0x86e>
 800f4b8:	f1bb 0f00 	cmp.w	fp, #0
 800f4bc:	f47f aeb7 	bne.w	800f22e <_dtoa_r+0x5a6>
 800f4c0:	4621      	mov	r1, r4
 800f4c2:	465b      	mov	r3, fp
 800f4c4:	2205      	movs	r2, #5
 800f4c6:	4648      	mov	r0, r9
 800f4c8:	f000 fa96 	bl	800f9f8 <__multadd>
 800f4cc:	4601      	mov	r1, r0
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	9801      	ldr	r0, [sp, #4]
 800f4d2:	f000 fcf3 	bl	800febc <__mcmp>
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	f77f aea9 	ble.w	800f22e <_dtoa_r+0x5a6>
 800f4dc:	463e      	mov	r6, r7
 800f4de:	2331      	movs	r3, #49	@ 0x31
 800f4e0:	f806 3b01 	strb.w	r3, [r6], #1
 800f4e4:	9b04      	ldr	r3, [sp, #16]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	9304      	str	r3, [sp, #16]
 800f4ea:	e6a4      	b.n	800f236 <_dtoa_r+0x5ae>
 800f4ec:	f8cd 8010 	str.w	r8, [sp, #16]
 800f4f0:	4654      	mov	r4, sl
 800f4f2:	4625      	mov	r5, r4
 800f4f4:	e7f2      	b.n	800f4dc <_dtoa_r+0x854>
 800f4f6:	9b08      	ldr	r3, [sp, #32]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f000 8103 	beq.w	800f704 <_dtoa_r+0xa7c>
 800f4fe:	2e00      	cmp	r6, #0
 800f500:	dd05      	ble.n	800f50e <_dtoa_r+0x886>
 800f502:	4629      	mov	r1, r5
 800f504:	4632      	mov	r2, r6
 800f506:	4648      	mov	r0, r9
 800f508:	f000 fc6c 	bl	800fde4 <__lshift>
 800f50c:	4605      	mov	r5, r0
 800f50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f510:	2b00      	cmp	r3, #0
 800f512:	d058      	beq.n	800f5c6 <_dtoa_r+0x93e>
 800f514:	6869      	ldr	r1, [r5, #4]
 800f516:	4648      	mov	r0, r9
 800f518:	f000 fa0c 	bl	800f934 <_Balloc>
 800f51c:	4606      	mov	r6, r0
 800f51e:	b928      	cbnz	r0, 800f52c <_dtoa_r+0x8a4>
 800f520:	4b82      	ldr	r3, [pc, #520]	@ (800f72c <_dtoa_r+0xaa4>)
 800f522:	4602      	mov	r2, r0
 800f524:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f528:	f7ff bbc7 	b.w	800ecba <_dtoa_r+0x32>
 800f52c:	692a      	ldr	r2, [r5, #16]
 800f52e:	3202      	adds	r2, #2
 800f530:	0092      	lsls	r2, r2, #2
 800f532:	f105 010c 	add.w	r1, r5, #12
 800f536:	300c      	adds	r0, #12
 800f538:	f7ff fb07 	bl	800eb4a <memcpy>
 800f53c:	2201      	movs	r2, #1
 800f53e:	4631      	mov	r1, r6
 800f540:	4648      	mov	r0, r9
 800f542:	f000 fc4f 	bl	800fde4 <__lshift>
 800f546:	1c7b      	adds	r3, r7, #1
 800f548:	9305      	str	r3, [sp, #20]
 800f54a:	eb07 030b 	add.w	r3, r7, fp
 800f54e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f550:	9b02      	ldr	r3, [sp, #8]
 800f552:	f003 0301 	and.w	r3, r3, #1
 800f556:	46a8      	mov	r8, r5
 800f558:	9308      	str	r3, [sp, #32]
 800f55a:	4605      	mov	r5, r0
 800f55c:	9b05      	ldr	r3, [sp, #20]
 800f55e:	9801      	ldr	r0, [sp, #4]
 800f560:	4621      	mov	r1, r4
 800f562:	f103 3bff 	add.w	fp, r3, #4294967295
 800f566:	f7ff fb05 	bl	800eb74 <quorem>
 800f56a:	4641      	mov	r1, r8
 800f56c:	9002      	str	r0, [sp, #8]
 800f56e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f572:	9801      	ldr	r0, [sp, #4]
 800f574:	f000 fca2 	bl	800febc <__mcmp>
 800f578:	462a      	mov	r2, r5
 800f57a:	9006      	str	r0, [sp, #24]
 800f57c:	4621      	mov	r1, r4
 800f57e:	4648      	mov	r0, r9
 800f580:	f000 fcb8 	bl	800fef4 <__mdiff>
 800f584:	68c2      	ldr	r2, [r0, #12]
 800f586:	4606      	mov	r6, r0
 800f588:	b9fa      	cbnz	r2, 800f5ca <_dtoa_r+0x942>
 800f58a:	4601      	mov	r1, r0
 800f58c:	9801      	ldr	r0, [sp, #4]
 800f58e:	f000 fc95 	bl	800febc <__mcmp>
 800f592:	4602      	mov	r2, r0
 800f594:	4631      	mov	r1, r6
 800f596:	4648      	mov	r0, r9
 800f598:	920a      	str	r2, [sp, #40]	@ 0x28
 800f59a:	f000 fa0b 	bl	800f9b4 <_Bfree>
 800f59e:	9b07      	ldr	r3, [sp, #28]
 800f5a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5a2:	9e05      	ldr	r6, [sp, #20]
 800f5a4:	ea43 0102 	orr.w	r1, r3, r2
 800f5a8:	9b08      	ldr	r3, [sp, #32]
 800f5aa:	4319      	orrs	r1, r3
 800f5ac:	d10f      	bne.n	800f5ce <_dtoa_r+0x946>
 800f5ae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f5b2:	d028      	beq.n	800f606 <_dtoa_r+0x97e>
 800f5b4:	9b06      	ldr	r3, [sp, #24]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	dd02      	ble.n	800f5c0 <_dtoa_r+0x938>
 800f5ba:	9b02      	ldr	r3, [sp, #8]
 800f5bc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f5c0:	f88b a000 	strb.w	sl, [fp]
 800f5c4:	e639      	b.n	800f23a <_dtoa_r+0x5b2>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	e7bd      	b.n	800f546 <_dtoa_r+0x8be>
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	e7e2      	b.n	800f594 <_dtoa_r+0x90c>
 800f5ce:	9b06      	ldr	r3, [sp, #24]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	db04      	blt.n	800f5de <_dtoa_r+0x956>
 800f5d4:	9907      	ldr	r1, [sp, #28]
 800f5d6:	430b      	orrs	r3, r1
 800f5d8:	9908      	ldr	r1, [sp, #32]
 800f5da:	430b      	orrs	r3, r1
 800f5dc:	d120      	bne.n	800f620 <_dtoa_r+0x998>
 800f5de:	2a00      	cmp	r2, #0
 800f5e0:	ddee      	ble.n	800f5c0 <_dtoa_r+0x938>
 800f5e2:	9901      	ldr	r1, [sp, #4]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	4648      	mov	r0, r9
 800f5e8:	f000 fbfc 	bl	800fde4 <__lshift>
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	9001      	str	r0, [sp, #4]
 800f5f0:	f000 fc64 	bl	800febc <__mcmp>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	dc03      	bgt.n	800f600 <_dtoa_r+0x978>
 800f5f8:	d1e2      	bne.n	800f5c0 <_dtoa_r+0x938>
 800f5fa:	f01a 0f01 	tst.w	sl, #1
 800f5fe:	d0df      	beq.n	800f5c0 <_dtoa_r+0x938>
 800f600:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f604:	d1d9      	bne.n	800f5ba <_dtoa_r+0x932>
 800f606:	2339      	movs	r3, #57	@ 0x39
 800f608:	f88b 3000 	strb.w	r3, [fp]
 800f60c:	4633      	mov	r3, r6
 800f60e:	461e      	mov	r6, r3
 800f610:	3b01      	subs	r3, #1
 800f612:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f616:	2a39      	cmp	r2, #57	@ 0x39
 800f618:	d053      	beq.n	800f6c2 <_dtoa_r+0xa3a>
 800f61a:	3201      	adds	r2, #1
 800f61c:	701a      	strb	r2, [r3, #0]
 800f61e:	e60c      	b.n	800f23a <_dtoa_r+0x5b2>
 800f620:	2a00      	cmp	r2, #0
 800f622:	dd07      	ble.n	800f634 <_dtoa_r+0x9ac>
 800f624:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f628:	d0ed      	beq.n	800f606 <_dtoa_r+0x97e>
 800f62a:	f10a 0301 	add.w	r3, sl, #1
 800f62e:	f88b 3000 	strb.w	r3, [fp]
 800f632:	e602      	b.n	800f23a <_dtoa_r+0x5b2>
 800f634:	9b05      	ldr	r3, [sp, #20]
 800f636:	9a05      	ldr	r2, [sp, #20]
 800f638:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f63e:	4293      	cmp	r3, r2
 800f640:	d029      	beq.n	800f696 <_dtoa_r+0xa0e>
 800f642:	9901      	ldr	r1, [sp, #4]
 800f644:	2300      	movs	r3, #0
 800f646:	220a      	movs	r2, #10
 800f648:	4648      	mov	r0, r9
 800f64a:	f000 f9d5 	bl	800f9f8 <__multadd>
 800f64e:	45a8      	cmp	r8, r5
 800f650:	9001      	str	r0, [sp, #4]
 800f652:	f04f 0300 	mov.w	r3, #0
 800f656:	f04f 020a 	mov.w	r2, #10
 800f65a:	4641      	mov	r1, r8
 800f65c:	4648      	mov	r0, r9
 800f65e:	d107      	bne.n	800f670 <_dtoa_r+0x9e8>
 800f660:	f000 f9ca 	bl	800f9f8 <__multadd>
 800f664:	4680      	mov	r8, r0
 800f666:	4605      	mov	r5, r0
 800f668:	9b05      	ldr	r3, [sp, #20]
 800f66a:	3301      	adds	r3, #1
 800f66c:	9305      	str	r3, [sp, #20]
 800f66e:	e775      	b.n	800f55c <_dtoa_r+0x8d4>
 800f670:	f000 f9c2 	bl	800f9f8 <__multadd>
 800f674:	4629      	mov	r1, r5
 800f676:	4680      	mov	r8, r0
 800f678:	2300      	movs	r3, #0
 800f67a:	220a      	movs	r2, #10
 800f67c:	4648      	mov	r0, r9
 800f67e:	f000 f9bb 	bl	800f9f8 <__multadd>
 800f682:	4605      	mov	r5, r0
 800f684:	e7f0      	b.n	800f668 <_dtoa_r+0x9e0>
 800f686:	f1bb 0f00 	cmp.w	fp, #0
 800f68a:	bfcc      	ite	gt
 800f68c:	465e      	movgt	r6, fp
 800f68e:	2601      	movle	r6, #1
 800f690:	443e      	add	r6, r7
 800f692:	f04f 0800 	mov.w	r8, #0
 800f696:	9901      	ldr	r1, [sp, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	4648      	mov	r0, r9
 800f69c:	f000 fba2 	bl	800fde4 <__lshift>
 800f6a0:	4621      	mov	r1, r4
 800f6a2:	9001      	str	r0, [sp, #4]
 800f6a4:	f000 fc0a 	bl	800febc <__mcmp>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	dcaf      	bgt.n	800f60c <_dtoa_r+0x984>
 800f6ac:	d102      	bne.n	800f6b4 <_dtoa_r+0xa2c>
 800f6ae:	f01a 0f01 	tst.w	sl, #1
 800f6b2:	d1ab      	bne.n	800f60c <_dtoa_r+0x984>
 800f6b4:	4633      	mov	r3, r6
 800f6b6:	461e      	mov	r6, r3
 800f6b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6bc:	2a30      	cmp	r2, #48	@ 0x30
 800f6be:	d0fa      	beq.n	800f6b6 <_dtoa_r+0xa2e>
 800f6c0:	e5bb      	b.n	800f23a <_dtoa_r+0x5b2>
 800f6c2:	429f      	cmp	r7, r3
 800f6c4:	d1a3      	bne.n	800f60e <_dtoa_r+0x986>
 800f6c6:	9b04      	ldr	r3, [sp, #16]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	9304      	str	r3, [sp, #16]
 800f6cc:	2331      	movs	r3, #49	@ 0x31
 800f6ce:	703b      	strb	r3, [r7, #0]
 800f6d0:	e5b3      	b.n	800f23a <_dtoa_r+0x5b2>
 800f6d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f6d4:	4f16      	ldr	r7, [pc, #88]	@ (800f730 <_dtoa_r+0xaa8>)
 800f6d6:	b11b      	cbz	r3, 800f6e0 <_dtoa_r+0xa58>
 800f6d8:	f107 0308 	add.w	r3, r7, #8
 800f6dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f6de:	6013      	str	r3, [r2, #0]
 800f6e0:	4638      	mov	r0, r7
 800f6e2:	b011      	add	sp, #68	@ 0x44
 800f6e4:	ecbd 8b02 	vpop	{d8}
 800f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ec:	9b07      	ldr	r3, [sp, #28]
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	f77f ae36 	ble.w	800f360 <_dtoa_r+0x6d8>
 800f6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6f8:	2001      	movs	r0, #1
 800f6fa:	e656      	b.n	800f3aa <_dtoa_r+0x722>
 800f6fc:	f1bb 0f00 	cmp.w	fp, #0
 800f700:	f77f aed7 	ble.w	800f4b2 <_dtoa_r+0x82a>
 800f704:	463e      	mov	r6, r7
 800f706:	9801      	ldr	r0, [sp, #4]
 800f708:	4621      	mov	r1, r4
 800f70a:	f7ff fa33 	bl	800eb74 <quorem>
 800f70e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f712:	f806 ab01 	strb.w	sl, [r6], #1
 800f716:	1bf2      	subs	r2, r6, r7
 800f718:	4593      	cmp	fp, r2
 800f71a:	ddb4      	ble.n	800f686 <_dtoa_r+0x9fe>
 800f71c:	9901      	ldr	r1, [sp, #4]
 800f71e:	2300      	movs	r3, #0
 800f720:	220a      	movs	r2, #10
 800f722:	4648      	mov	r0, r9
 800f724:	f000 f968 	bl	800f9f8 <__multadd>
 800f728:	9001      	str	r0, [sp, #4]
 800f72a:	e7ec      	b.n	800f706 <_dtoa_r+0xa7e>
 800f72c:	0801237d 	.word	0x0801237d
 800f730:	08012301 	.word	0x08012301

0800f734 <_free_r>:
 800f734:	b538      	push	{r3, r4, r5, lr}
 800f736:	4605      	mov	r5, r0
 800f738:	2900      	cmp	r1, #0
 800f73a:	d041      	beq.n	800f7c0 <_free_r+0x8c>
 800f73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f740:	1f0c      	subs	r4, r1, #4
 800f742:	2b00      	cmp	r3, #0
 800f744:	bfb8      	it	lt
 800f746:	18e4      	addlt	r4, r4, r3
 800f748:	f000 f8e8 	bl	800f91c <__malloc_lock>
 800f74c:	4a1d      	ldr	r2, [pc, #116]	@ (800f7c4 <_free_r+0x90>)
 800f74e:	6813      	ldr	r3, [r2, #0]
 800f750:	b933      	cbnz	r3, 800f760 <_free_r+0x2c>
 800f752:	6063      	str	r3, [r4, #4]
 800f754:	6014      	str	r4, [r2, #0]
 800f756:	4628      	mov	r0, r5
 800f758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f75c:	f000 b8e4 	b.w	800f928 <__malloc_unlock>
 800f760:	42a3      	cmp	r3, r4
 800f762:	d908      	bls.n	800f776 <_free_r+0x42>
 800f764:	6820      	ldr	r0, [r4, #0]
 800f766:	1821      	adds	r1, r4, r0
 800f768:	428b      	cmp	r3, r1
 800f76a:	bf01      	itttt	eq
 800f76c:	6819      	ldreq	r1, [r3, #0]
 800f76e:	685b      	ldreq	r3, [r3, #4]
 800f770:	1809      	addeq	r1, r1, r0
 800f772:	6021      	streq	r1, [r4, #0]
 800f774:	e7ed      	b.n	800f752 <_free_r+0x1e>
 800f776:	461a      	mov	r2, r3
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	b10b      	cbz	r3, 800f780 <_free_r+0x4c>
 800f77c:	42a3      	cmp	r3, r4
 800f77e:	d9fa      	bls.n	800f776 <_free_r+0x42>
 800f780:	6811      	ldr	r1, [r2, #0]
 800f782:	1850      	adds	r0, r2, r1
 800f784:	42a0      	cmp	r0, r4
 800f786:	d10b      	bne.n	800f7a0 <_free_r+0x6c>
 800f788:	6820      	ldr	r0, [r4, #0]
 800f78a:	4401      	add	r1, r0
 800f78c:	1850      	adds	r0, r2, r1
 800f78e:	4283      	cmp	r3, r0
 800f790:	6011      	str	r1, [r2, #0]
 800f792:	d1e0      	bne.n	800f756 <_free_r+0x22>
 800f794:	6818      	ldr	r0, [r3, #0]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	6053      	str	r3, [r2, #4]
 800f79a:	4408      	add	r0, r1
 800f79c:	6010      	str	r0, [r2, #0]
 800f79e:	e7da      	b.n	800f756 <_free_r+0x22>
 800f7a0:	d902      	bls.n	800f7a8 <_free_r+0x74>
 800f7a2:	230c      	movs	r3, #12
 800f7a4:	602b      	str	r3, [r5, #0]
 800f7a6:	e7d6      	b.n	800f756 <_free_r+0x22>
 800f7a8:	6820      	ldr	r0, [r4, #0]
 800f7aa:	1821      	adds	r1, r4, r0
 800f7ac:	428b      	cmp	r3, r1
 800f7ae:	bf04      	itt	eq
 800f7b0:	6819      	ldreq	r1, [r3, #0]
 800f7b2:	685b      	ldreq	r3, [r3, #4]
 800f7b4:	6063      	str	r3, [r4, #4]
 800f7b6:	bf04      	itt	eq
 800f7b8:	1809      	addeq	r1, r1, r0
 800f7ba:	6021      	streq	r1, [r4, #0]
 800f7bc:	6054      	str	r4, [r2, #4]
 800f7be:	e7ca      	b.n	800f756 <_free_r+0x22>
 800f7c0:	bd38      	pop	{r3, r4, r5, pc}
 800f7c2:	bf00      	nop
 800f7c4:	24000d30 	.word	0x24000d30

0800f7c8 <malloc>:
 800f7c8:	4b02      	ldr	r3, [pc, #8]	@ (800f7d4 <malloc+0xc>)
 800f7ca:	4601      	mov	r1, r0
 800f7cc:	6818      	ldr	r0, [r3, #0]
 800f7ce:	f000 b825 	b.w	800f81c <_malloc_r>
 800f7d2:	bf00      	nop
 800f7d4:	24000028 	.word	0x24000028

0800f7d8 <sbrk_aligned>:
 800f7d8:	b570      	push	{r4, r5, r6, lr}
 800f7da:	4e0f      	ldr	r6, [pc, #60]	@ (800f818 <sbrk_aligned+0x40>)
 800f7dc:	460c      	mov	r4, r1
 800f7de:	6831      	ldr	r1, [r6, #0]
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	b911      	cbnz	r1, 800f7ea <sbrk_aligned+0x12>
 800f7e4:	f001 ff7e 	bl	80116e4 <_sbrk_r>
 800f7e8:	6030      	str	r0, [r6, #0]
 800f7ea:	4621      	mov	r1, r4
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f001 ff79 	bl	80116e4 <_sbrk_r>
 800f7f2:	1c43      	adds	r3, r0, #1
 800f7f4:	d103      	bne.n	800f7fe <sbrk_aligned+0x26>
 800f7f6:	f04f 34ff 	mov.w	r4, #4294967295
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	bd70      	pop	{r4, r5, r6, pc}
 800f7fe:	1cc4      	adds	r4, r0, #3
 800f800:	f024 0403 	bic.w	r4, r4, #3
 800f804:	42a0      	cmp	r0, r4
 800f806:	d0f8      	beq.n	800f7fa <sbrk_aligned+0x22>
 800f808:	1a21      	subs	r1, r4, r0
 800f80a:	4628      	mov	r0, r5
 800f80c:	f001 ff6a 	bl	80116e4 <_sbrk_r>
 800f810:	3001      	adds	r0, #1
 800f812:	d1f2      	bne.n	800f7fa <sbrk_aligned+0x22>
 800f814:	e7ef      	b.n	800f7f6 <sbrk_aligned+0x1e>
 800f816:	bf00      	nop
 800f818:	24000d2c 	.word	0x24000d2c

0800f81c <_malloc_r>:
 800f81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f820:	1ccd      	adds	r5, r1, #3
 800f822:	f025 0503 	bic.w	r5, r5, #3
 800f826:	3508      	adds	r5, #8
 800f828:	2d0c      	cmp	r5, #12
 800f82a:	bf38      	it	cc
 800f82c:	250c      	movcc	r5, #12
 800f82e:	2d00      	cmp	r5, #0
 800f830:	4606      	mov	r6, r0
 800f832:	db01      	blt.n	800f838 <_malloc_r+0x1c>
 800f834:	42a9      	cmp	r1, r5
 800f836:	d904      	bls.n	800f842 <_malloc_r+0x26>
 800f838:	230c      	movs	r3, #12
 800f83a:	6033      	str	r3, [r6, #0]
 800f83c:	2000      	movs	r0, #0
 800f83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f918 <_malloc_r+0xfc>
 800f846:	f000 f869 	bl	800f91c <__malloc_lock>
 800f84a:	f8d8 3000 	ldr.w	r3, [r8]
 800f84e:	461c      	mov	r4, r3
 800f850:	bb44      	cbnz	r4, 800f8a4 <_malloc_r+0x88>
 800f852:	4629      	mov	r1, r5
 800f854:	4630      	mov	r0, r6
 800f856:	f7ff ffbf 	bl	800f7d8 <sbrk_aligned>
 800f85a:	1c43      	adds	r3, r0, #1
 800f85c:	4604      	mov	r4, r0
 800f85e:	d158      	bne.n	800f912 <_malloc_r+0xf6>
 800f860:	f8d8 4000 	ldr.w	r4, [r8]
 800f864:	4627      	mov	r7, r4
 800f866:	2f00      	cmp	r7, #0
 800f868:	d143      	bne.n	800f8f2 <_malloc_r+0xd6>
 800f86a:	2c00      	cmp	r4, #0
 800f86c:	d04b      	beq.n	800f906 <_malloc_r+0xea>
 800f86e:	6823      	ldr	r3, [r4, #0]
 800f870:	4639      	mov	r1, r7
 800f872:	4630      	mov	r0, r6
 800f874:	eb04 0903 	add.w	r9, r4, r3
 800f878:	f001 ff34 	bl	80116e4 <_sbrk_r>
 800f87c:	4581      	cmp	r9, r0
 800f87e:	d142      	bne.n	800f906 <_malloc_r+0xea>
 800f880:	6821      	ldr	r1, [r4, #0]
 800f882:	1a6d      	subs	r5, r5, r1
 800f884:	4629      	mov	r1, r5
 800f886:	4630      	mov	r0, r6
 800f888:	f7ff ffa6 	bl	800f7d8 <sbrk_aligned>
 800f88c:	3001      	adds	r0, #1
 800f88e:	d03a      	beq.n	800f906 <_malloc_r+0xea>
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	442b      	add	r3, r5
 800f894:	6023      	str	r3, [r4, #0]
 800f896:	f8d8 3000 	ldr.w	r3, [r8]
 800f89a:	685a      	ldr	r2, [r3, #4]
 800f89c:	bb62      	cbnz	r2, 800f8f8 <_malloc_r+0xdc>
 800f89e:	f8c8 7000 	str.w	r7, [r8]
 800f8a2:	e00f      	b.n	800f8c4 <_malloc_r+0xa8>
 800f8a4:	6822      	ldr	r2, [r4, #0]
 800f8a6:	1b52      	subs	r2, r2, r5
 800f8a8:	d420      	bmi.n	800f8ec <_malloc_r+0xd0>
 800f8aa:	2a0b      	cmp	r2, #11
 800f8ac:	d917      	bls.n	800f8de <_malloc_r+0xc2>
 800f8ae:	1961      	adds	r1, r4, r5
 800f8b0:	42a3      	cmp	r3, r4
 800f8b2:	6025      	str	r5, [r4, #0]
 800f8b4:	bf18      	it	ne
 800f8b6:	6059      	strne	r1, [r3, #4]
 800f8b8:	6863      	ldr	r3, [r4, #4]
 800f8ba:	bf08      	it	eq
 800f8bc:	f8c8 1000 	streq.w	r1, [r8]
 800f8c0:	5162      	str	r2, [r4, r5]
 800f8c2:	604b      	str	r3, [r1, #4]
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	f000 f82f 	bl	800f928 <__malloc_unlock>
 800f8ca:	f104 000b 	add.w	r0, r4, #11
 800f8ce:	1d23      	adds	r3, r4, #4
 800f8d0:	f020 0007 	bic.w	r0, r0, #7
 800f8d4:	1ac2      	subs	r2, r0, r3
 800f8d6:	bf1c      	itt	ne
 800f8d8:	1a1b      	subne	r3, r3, r0
 800f8da:	50a3      	strne	r3, [r4, r2]
 800f8dc:	e7af      	b.n	800f83e <_malloc_r+0x22>
 800f8de:	6862      	ldr	r2, [r4, #4]
 800f8e0:	42a3      	cmp	r3, r4
 800f8e2:	bf0c      	ite	eq
 800f8e4:	f8c8 2000 	streq.w	r2, [r8]
 800f8e8:	605a      	strne	r2, [r3, #4]
 800f8ea:	e7eb      	b.n	800f8c4 <_malloc_r+0xa8>
 800f8ec:	4623      	mov	r3, r4
 800f8ee:	6864      	ldr	r4, [r4, #4]
 800f8f0:	e7ae      	b.n	800f850 <_malloc_r+0x34>
 800f8f2:	463c      	mov	r4, r7
 800f8f4:	687f      	ldr	r7, [r7, #4]
 800f8f6:	e7b6      	b.n	800f866 <_malloc_r+0x4a>
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	42a3      	cmp	r3, r4
 800f8fe:	d1fb      	bne.n	800f8f8 <_malloc_r+0xdc>
 800f900:	2300      	movs	r3, #0
 800f902:	6053      	str	r3, [r2, #4]
 800f904:	e7de      	b.n	800f8c4 <_malloc_r+0xa8>
 800f906:	230c      	movs	r3, #12
 800f908:	6033      	str	r3, [r6, #0]
 800f90a:	4630      	mov	r0, r6
 800f90c:	f000 f80c 	bl	800f928 <__malloc_unlock>
 800f910:	e794      	b.n	800f83c <_malloc_r+0x20>
 800f912:	6005      	str	r5, [r0, #0]
 800f914:	e7d6      	b.n	800f8c4 <_malloc_r+0xa8>
 800f916:	bf00      	nop
 800f918:	24000d30 	.word	0x24000d30

0800f91c <__malloc_lock>:
 800f91c:	4801      	ldr	r0, [pc, #4]	@ (800f924 <__malloc_lock+0x8>)
 800f91e:	f7ff b912 	b.w	800eb46 <__retarget_lock_acquire_recursive>
 800f922:	bf00      	nop
 800f924:	24000d28 	.word	0x24000d28

0800f928 <__malloc_unlock>:
 800f928:	4801      	ldr	r0, [pc, #4]	@ (800f930 <__malloc_unlock+0x8>)
 800f92a:	f7ff b90d 	b.w	800eb48 <__retarget_lock_release_recursive>
 800f92e:	bf00      	nop
 800f930:	24000d28 	.word	0x24000d28

0800f934 <_Balloc>:
 800f934:	b570      	push	{r4, r5, r6, lr}
 800f936:	69c6      	ldr	r6, [r0, #28]
 800f938:	4604      	mov	r4, r0
 800f93a:	460d      	mov	r5, r1
 800f93c:	b976      	cbnz	r6, 800f95c <_Balloc+0x28>
 800f93e:	2010      	movs	r0, #16
 800f940:	f7ff ff42 	bl	800f7c8 <malloc>
 800f944:	4602      	mov	r2, r0
 800f946:	61e0      	str	r0, [r4, #28]
 800f948:	b920      	cbnz	r0, 800f954 <_Balloc+0x20>
 800f94a:	4b18      	ldr	r3, [pc, #96]	@ (800f9ac <_Balloc+0x78>)
 800f94c:	4818      	ldr	r0, [pc, #96]	@ (800f9b0 <_Balloc+0x7c>)
 800f94e:	216b      	movs	r1, #107	@ 0x6b
 800f950:	f001 fee2 	bl	8011718 <__assert_func>
 800f954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f958:	6006      	str	r6, [r0, #0]
 800f95a:	60c6      	str	r6, [r0, #12]
 800f95c:	69e6      	ldr	r6, [r4, #28]
 800f95e:	68f3      	ldr	r3, [r6, #12]
 800f960:	b183      	cbz	r3, 800f984 <_Balloc+0x50>
 800f962:	69e3      	ldr	r3, [r4, #28]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f96a:	b9b8      	cbnz	r0, 800f99c <_Balloc+0x68>
 800f96c:	2101      	movs	r1, #1
 800f96e:	fa01 f605 	lsl.w	r6, r1, r5
 800f972:	1d72      	adds	r2, r6, #5
 800f974:	0092      	lsls	r2, r2, #2
 800f976:	4620      	mov	r0, r4
 800f978:	f001 feec 	bl	8011754 <_calloc_r>
 800f97c:	b160      	cbz	r0, 800f998 <_Balloc+0x64>
 800f97e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f982:	e00e      	b.n	800f9a2 <_Balloc+0x6e>
 800f984:	2221      	movs	r2, #33	@ 0x21
 800f986:	2104      	movs	r1, #4
 800f988:	4620      	mov	r0, r4
 800f98a:	f001 fee3 	bl	8011754 <_calloc_r>
 800f98e:	69e3      	ldr	r3, [r4, #28]
 800f990:	60f0      	str	r0, [r6, #12]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d1e4      	bne.n	800f962 <_Balloc+0x2e>
 800f998:	2000      	movs	r0, #0
 800f99a:	bd70      	pop	{r4, r5, r6, pc}
 800f99c:	6802      	ldr	r2, [r0, #0]
 800f99e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f9a8:	e7f7      	b.n	800f99a <_Balloc+0x66>
 800f9aa:	bf00      	nop
 800f9ac:	0801230e 	.word	0x0801230e
 800f9b0:	0801238e 	.word	0x0801238e

0800f9b4 <_Bfree>:
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	69c6      	ldr	r6, [r0, #28]
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	b976      	cbnz	r6, 800f9dc <_Bfree+0x28>
 800f9be:	2010      	movs	r0, #16
 800f9c0:	f7ff ff02 	bl	800f7c8 <malloc>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	61e8      	str	r0, [r5, #28]
 800f9c8:	b920      	cbnz	r0, 800f9d4 <_Bfree+0x20>
 800f9ca:	4b09      	ldr	r3, [pc, #36]	@ (800f9f0 <_Bfree+0x3c>)
 800f9cc:	4809      	ldr	r0, [pc, #36]	@ (800f9f4 <_Bfree+0x40>)
 800f9ce:	218f      	movs	r1, #143	@ 0x8f
 800f9d0:	f001 fea2 	bl	8011718 <__assert_func>
 800f9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9d8:	6006      	str	r6, [r0, #0]
 800f9da:	60c6      	str	r6, [r0, #12]
 800f9dc:	b13c      	cbz	r4, 800f9ee <_Bfree+0x3a>
 800f9de:	69eb      	ldr	r3, [r5, #28]
 800f9e0:	6862      	ldr	r2, [r4, #4]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f9e8:	6021      	str	r1, [r4, #0]
 800f9ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f9ee:	bd70      	pop	{r4, r5, r6, pc}
 800f9f0:	0801230e 	.word	0x0801230e
 800f9f4:	0801238e 	.word	0x0801238e

0800f9f8 <__multadd>:
 800f9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fc:	690d      	ldr	r5, [r1, #16]
 800f9fe:	4607      	mov	r7, r0
 800fa00:	460c      	mov	r4, r1
 800fa02:	461e      	mov	r6, r3
 800fa04:	f101 0c14 	add.w	ip, r1, #20
 800fa08:	2000      	movs	r0, #0
 800fa0a:	f8dc 3000 	ldr.w	r3, [ip]
 800fa0e:	b299      	uxth	r1, r3
 800fa10:	fb02 6101 	mla	r1, r2, r1, r6
 800fa14:	0c1e      	lsrs	r6, r3, #16
 800fa16:	0c0b      	lsrs	r3, r1, #16
 800fa18:	fb02 3306 	mla	r3, r2, r6, r3
 800fa1c:	b289      	uxth	r1, r1
 800fa1e:	3001      	adds	r0, #1
 800fa20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fa24:	4285      	cmp	r5, r0
 800fa26:	f84c 1b04 	str.w	r1, [ip], #4
 800fa2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fa2e:	dcec      	bgt.n	800fa0a <__multadd+0x12>
 800fa30:	b30e      	cbz	r6, 800fa76 <__multadd+0x7e>
 800fa32:	68a3      	ldr	r3, [r4, #8]
 800fa34:	42ab      	cmp	r3, r5
 800fa36:	dc19      	bgt.n	800fa6c <__multadd+0x74>
 800fa38:	6861      	ldr	r1, [r4, #4]
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	3101      	adds	r1, #1
 800fa3e:	f7ff ff79 	bl	800f934 <_Balloc>
 800fa42:	4680      	mov	r8, r0
 800fa44:	b928      	cbnz	r0, 800fa52 <__multadd+0x5a>
 800fa46:	4602      	mov	r2, r0
 800fa48:	4b0c      	ldr	r3, [pc, #48]	@ (800fa7c <__multadd+0x84>)
 800fa4a:	480d      	ldr	r0, [pc, #52]	@ (800fa80 <__multadd+0x88>)
 800fa4c:	21ba      	movs	r1, #186	@ 0xba
 800fa4e:	f001 fe63 	bl	8011718 <__assert_func>
 800fa52:	6922      	ldr	r2, [r4, #16]
 800fa54:	3202      	adds	r2, #2
 800fa56:	f104 010c 	add.w	r1, r4, #12
 800fa5a:	0092      	lsls	r2, r2, #2
 800fa5c:	300c      	adds	r0, #12
 800fa5e:	f7ff f874 	bl	800eb4a <memcpy>
 800fa62:	4621      	mov	r1, r4
 800fa64:	4638      	mov	r0, r7
 800fa66:	f7ff ffa5 	bl	800f9b4 <_Bfree>
 800fa6a:	4644      	mov	r4, r8
 800fa6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa70:	3501      	adds	r5, #1
 800fa72:	615e      	str	r6, [r3, #20]
 800fa74:	6125      	str	r5, [r4, #16]
 800fa76:	4620      	mov	r0, r4
 800fa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa7c:	0801237d 	.word	0x0801237d
 800fa80:	0801238e 	.word	0x0801238e

0800fa84 <__s2b>:
 800fa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa88:	460c      	mov	r4, r1
 800fa8a:	4615      	mov	r5, r2
 800fa8c:	461f      	mov	r7, r3
 800fa8e:	2209      	movs	r2, #9
 800fa90:	3308      	adds	r3, #8
 800fa92:	4606      	mov	r6, r0
 800fa94:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa98:	2100      	movs	r1, #0
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	db09      	blt.n	800fab4 <__s2b+0x30>
 800faa0:	4630      	mov	r0, r6
 800faa2:	f7ff ff47 	bl	800f934 <_Balloc>
 800faa6:	b940      	cbnz	r0, 800faba <__s2b+0x36>
 800faa8:	4602      	mov	r2, r0
 800faaa:	4b19      	ldr	r3, [pc, #100]	@ (800fb10 <__s2b+0x8c>)
 800faac:	4819      	ldr	r0, [pc, #100]	@ (800fb14 <__s2b+0x90>)
 800faae:	21d3      	movs	r1, #211	@ 0xd3
 800fab0:	f001 fe32 	bl	8011718 <__assert_func>
 800fab4:	0052      	lsls	r2, r2, #1
 800fab6:	3101      	adds	r1, #1
 800fab8:	e7f0      	b.n	800fa9c <__s2b+0x18>
 800faba:	9b08      	ldr	r3, [sp, #32]
 800fabc:	6143      	str	r3, [r0, #20]
 800fabe:	2d09      	cmp	r5, #9
 800fac0:	f04f 0301 	mov.w	r3, #1
 800fac4:	6103      	str	r3, [r0, #16]
 800fac6:	dd16      	ble.n	800faf6 <__s2b+0x72>
 800fac8:	f104 0909 	add.w	r9, r4, #9
 800facc:	46c8      	mov	r8, r9
 800face:	442c      	add	r4, r5
 800fad0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fad4:	4601      	mov	r1, r0
 800fad6:	3b30      	subs	r3, #48	@ 0x30
 800fad8:	220a      	movs	r2, #10
 800fada:	4630      	mov	r0, r6
 800fadc:	f7ff ff8c 	bl	800f9f8 <__multadd>
 800fae0:	45a0      	cmp	r8, r4
 800fae2:	d1f5      	bne.n	800fad0 <__s2b+0x4c>
 800fae4:	f1a5 0408 	sub.w	r4, r5, #8
 800fae8:	444c      	add	r4, r9
 800faea:	1b2d      	subs	r5, r5, r4
 800faec:	1963      	adds	r3, r4, r5
 800faee:	42bb      	cmp	r3, r7
 800faf0:	db04      	blt.n	800fafc <__s2b+0x78>
 800faf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faf6:	340a      	adds	r4, #10
 800faf8:	2509      	movs	r5, #9
 800fafa:	e7f6      	b.n	800faea <__s2b+0x66>
 800fafc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb00:	4601      	mov	r1, r0
 800fb02:	3b30      	subs	r3, #48	@ 0x30
 800fb04:	220a      	movs	r2, #10
 800fb06:	4630      	mov	r0, r6
 800fb08:	f7ff ff76 	bl	800f9f8 <__multadd>
 800fb0c:	e7ee      	b.n	800faec <__s2b+0x68>
 800fb0e:	bf00      	nop
 800fb10:	0801237d 	.word	0x0801237d
 800fb14:	0801238e 	.word	0x0801238e

0800fb18 <__hi0bits>:
 800fb18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	bf36      	itet	cc
 800fb20:	0403      	lslcc	r3, r0, #16
 800fb22:	2000      	movcs	r0, #0
 800fb24:	2010      	movcc	r0, #16
 800fb26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fb2a:	bf3c      	itt	cc
 800fb2c:	021b      	lslcc	r3, r3, #8
 800fb2e:	3008      	addcc	r0, #8
 800fb30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb34:	bf3c      	itt	cc
 800fb36:	011b      	lslcc	r3, r3, #4
 800fb38:	3004      	addcc	r0, #4
 800fb3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb3e:	bf3c      	itt	cc
 800fb40:	009b      	lslcc	r3, r3, #2
 800fb42:	3002      	addcc	r0, #2
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	db05      	blt.n	800fb54 <__hi0bits+0x3c>
 800fb48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fb4c:	f100 0001 	add.w	r0, r0, #1
 800fb50:	bf08      	it	eq
 800fb52:	2020      	moveq	r0, #32
 800fb54:	4770      	bx	lr

0800fb56 <__lo0bits>:
 800fb56:	6803      	ldr	r3, [r0, #0]
 800fb58:	4602      	mov	r2, r0
 800fb5a:	f013 0007 	ands.w	r0, r3, #7
 800fb5e:	d00b      	beq.n	800fb78 <__lo0bits+0x22>
 800fb60:	07d9      	lsls	r1, r3, #31
 800fb62:	d421      	bmi.n	800fba8 <__lo0bits+0x52>
 800fb64:	0798      	lsls	r0, r3, #30
 800fb66:	bf49      	itett	mi
 800fb68:	085b      	lsrmi	r3, r3, #1
 800fb6a:	089b      	lsrpl	r3, r3, #2
 800fb6c:	2001      	movmi	r0, #1
 800fb6e:	6013      	strmi	r3, [r2, #0]
 800fb70:	bf5c      	itt	pl
 800fb72:	6013      	strpl	r3, [r2, #0]
 800fb74:	2002      	movpl	r0, #2
 800fb76:	4770      	bx	lr
 800fb78:	b299      	uxth	r1, r3
 800fb7a:	b909      	cbnz	r1, 800fb80 <__lo0bits+0x2a>
 800fb7c:	0c1b      	lsrs	r3, r3, #16
 800fb7e:	2010      	movs	r0, #16
 800fb80:	b2d9      	uxtb	r1, r3
 800fb82:	b909      	cbnz	r1, 800fb88 <__lo0bits+0x32>
 800fb84:	3008      	adds	r0, #8
 800fb86:	0a1b      	lsrs	r3, r3, #8
 800fb88:	0719      	lsls	r1, r3, #28
 800fb8a:	bf04      	itt	eq
 800fb8c:	091b      	lsreq	r3, r3, #4
 800fb8e:	3004      	addeq	r0, #4
 800fb90:	0799      	lsls	r1, r3, #30
 800fb92:	bf04      	itt	eq
 800fb94:	089b      	lsreq	r3, r3, #2
 800fb96:	3002      	addeq	r0, #2
 800fb98:	07d9      	lsls	r1, r3, #31
 800fb9a:	d403      	bmi.n	800fba4 <__lo0bits+0x4e>
 800fb9c:	085b      	lsrs	r3, r3, #1
 800fb9e:	f100 0001 	add.w	r0, r0, #1
 800fba2:	d003      	beq.n	800fbac <__lo0bits+0x56>
 800fba4:	6013      	str	r3, [r2, #0]
 800fba6:	4770      	bx	lr
 800fba8:	2000      	movs	r0, #0
 800fbaa:	4770      	bx	lr
 800fbac:	2020      	movs	r0, #32
 800fbae:	4770      	bx	lr

0800fbb0 <__i2b>:
 800fbb0:	b510      	push	{r4, lr}
 800fbb2:	460c      	mov	r4, r1
 800fbb4:	2101      	movs	r1, #1
 800fbb6:	f7ff febd 	bl	800f934 <_Balloc>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	b928      	cbnz	r0, 800fbca <__i2b+0x1a>
 800fbbe:	4b05      	ldr	r3, [pc, #20]	@ (800fbd4 <__i2b+0x24>)
 800fbc0:	4805      	ldr	r0, [pc, #20]	@ (800fbd8 <__i2b+0x28>)
 800fbc2:	f240 1145 	movw	r1, #325	@ 0x145
 800fbc6:	f001 fda7 	bl	8011718 <__assert_func>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	6144      	str	r4, [r0, #20]
 800fbce:	6103      	str	r3, [r0, #16]
 800fbd0:	bd10      	pop	{r4, pc}
 800fbd2:	bf00      	nop
 800fbd4:	0801237d 	.word	0x0801237d
 800fbd8:	0801238e 	.word	0x0801238e

0800fbdc <__multiply>:
 800fbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe0:	4614      	mov	r4, r2
 800fbe2:	690a      	ldr	r2, [r1, #16]
 800fbe4:	6923      	ldr	r3, [r4, #16]
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	bfa8      	it	ge
 800fbea:	4623      	movge	r3, r4
 800fbec:	460f      	mov	r7, r1
 800fbee:	bfa4      	itt	ge
 800fbf0:	460c      	movge	r4, r1
 800fbf2:	461f      	movge	r7, r3
 800fbf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fbf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fbfc:	68a3      	ldr	r3, [r4, #8]
 800fbfe:	6861      	ldr	r1, [r4, #4]
 800fc00:	eb0a 0609 	add.w	r6, sl, r9
 800fc04:	42b3      	cmp	r3, r6
 800fc06:	b085      	sub	sp, #20
 800fc08:	bfb8      	it	lt
 800fc0a:	3101      	addlt	r1, #1
 800fc0c:	f7ff fe92 	bl	800f934 <_Balloc>
 800fc10:	b930      	cbnz	r0, 800fc20 <__multiply+0x44>
 800fc12:	4602      	mov	r2, r0
 800fc14:	4b44      	ldr	r3, [pc, #272]	@ (800fd28 <__multiply+0x14c>)
 800fc16:	4845      	ldr	r0, [pc, #276]	@ (800fd2c <__multiply+0x150>)
 800fc18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fc1c:	f001 fd7c 	bl	8011718 <__assert_func>
 800fc20:	f100 0514 	add.w	r5, r0, #20
 800fc24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fc28:	462b      	mov	r3, r5
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	4543      	cmp	r3, r8
 800fc2e:	d321      	bcc.n	800fc74 <__multiply+0x98>
 800fc30:	f107 0114 	add.w	r1, r7, #20
 800fc34:	f104 0214 	add.w	r2, r4, #20
 800fc38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fc3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fc40:	9302      	str	r3, [sp, #8]
 800fc42:	1b13      	subs	r3, r2, r4
 800fc44:	3b15      	subs	r3, #21
 800fc46:	f023 0303 	bic.w	r3, r3, #3
 800fc4a:	3304      	adds	r3, #4
 800fc4c:	f104 0715 	add.w	r7, r4, #21
 800fc50:	42ba      	cmp	r2, r7
 800fc52:	bf38      	it	cc
 800fc54:	2304      	movcc	r3, #4
 800fc56:	9301      	str	r3, [sp, #4]
 800fc58:	9b02      	ldr	r3, [sp, #8]
 800fc5a:	9103      	str	r1, [sp, #12]
 800fc5c:	428b      	cmp	r3, r1
 800fc5e:	d80c      	bhi.n	800fc7a <__multiply+0x9e>
 800fc60:	2e00      	cmp	r6, #0
 800fc62:	dd03      	ble.n	800fc6c <__multiply+0x90>
 800fc64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d05b      	beq.n	800fd24 <__multiply+0x148>
 800fc6c:	6106      	str	r6, [r0, #16]
 800fc6e:	b005      	add	sp, #20
 800fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc74:	f843 2b04 	str.w	r2, [r3], #4
 800fc78:	e7d8      	b.n	800fc2c <__multiply+0x50>
 800fc7a:	f8b1 a000 	ldrh.w	sl, [r1]
 800fc7e:	f1ba 0f00 	cmp.w	sl, #0
 800fc82:	d024      	beq.n	800fcce <__multiply+0xf2>
 800fc84:	f104 0e14 	add.w	lr, r4, #20
 800fc88:	46a9      	mov	r9, r5
 800fc8a:	f04f 0c00 	mov.w	ip, #0
 800fc8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fc92:	f8d9 3000 	ldr.w	r3, [r9]
 800fc96:	fa1f fb87 	uxth.w	fp, r7
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800fca0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fca4:	f8d9 7000 	ldr.w	r7, [r9]
 800fca8:	4463      	add	r3, ip
 800fcaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fcae:	fb0a c70b 	mla	r7, sl, fp, ip
 800fcb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fcbc:	4572      	cmp	r2, lr
 800fcbe:	f849 3b04 	str.w	r3, [r9], #4
 800fcc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fcc6:	d8e2      	bhi.n	800fc8e <__multiply+0xb2>
 800fcc8:	9b01      	ldr	r3, [sp, #4]
 800fcca:	f845 c003 	str.w	ip, [r5, r3]
 800fcce:	9b03      	ldr	r3, [sp, #12]
 800fcd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fcd4:	3104      	adds	r1, #4
 800fcd6:	f1b9 0f00 	cmp.w	r9, #0
 800fcda:	d021      	beq.n	800fd20 <__multiply+0x144>
 800fcdc:	682b      	ldr	r3, [r5, #0]
 800fcde:	f104 0c14 	add.w	ip, r4, #20
 800fce2:	46ae      	mov	lr, r5
 800fce4:	f04f 0a00 	mov.w	sl, #0
 800fce8:	f8bc b000 	ldrh.w	fp, [ip]
 800fcec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fcf0:	fb09 770b 	mla	r7, r9, fp, r7
 800fcf4:	4457      	add	r7, sl
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fcfc:	f84e 3b04 	str.w	r3, [lr], #4
 800fd00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd08:	f8be 3000 	ldrh.w	r3, [lr]
 800fd0c:	fb09 330a 	mla	r3, r9, sl, r3
 800fd10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fd14:	4562      	cmp	r2, ip
 800fd16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd1a:	d8e5      	bhi.n	800fce8 <__multiply+0x10c>
 800fd1c:	9f01      	ldr	r7, [sp, #4]
 800fd1e:	51eb      	str	r3, [r5, r7]
 800fd20:	3504      	adds	r5, #4
 800fd22:	e799      	b.n	800fc58 <__multiply+0x7c>
 800fd24:	3e01      	subs	r6, #1
 800fd26:	e79b      	b.n	800fc60 <__multiply+0x84>
 800fd28:	0801237d 	.word	0x0801237d
 800fd2c:	0801238e 	.word	0x0801238e

0800fd30 <__pow5mult>:
 800fd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd34:	4615      	mov	r5, r2
 800fd36:	f012 0203 	ands.w	r2, r2, #3
 800fd3a:	4607      	mov	r7, r0
 800fd3c:	460e      	mov	r6, r1
 800fd3e:	d007      	beq.n	800fd50 <__pow5mult+0x20>
 800fd40:	4c25      	ldr	r4, [pc, #148]	@ (800fdd8 <__pow5mult+0xa8>)
 800fd42:	3a01      	subs	r2, #1
 800fd44:	2300      	movs	r3, #0
 800fd46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd4a:	f7ff fe55 	bl	800f9f8 <__multadd>
 800fd4e:	4606      	mov	r6, r0
 800fd50:	10ad      	asrs	r5, r5, #2
 800fd52:	d03d      	beq.n	800fdd0 <__pow5mult+0xa0>
 800fd54:	69fc      	ldr	r4, [r7, #28]
 800fd56:	b97c      	cbnz	r4, 800fd78 <__pow5mult+0x48>
 800fd58:	2010      	movs	r0, #16
 800fd5a:	f7ff fd35 	bl	800f7c8 <malloc>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	61f8      	str	r0, [r7, #28]
 800fd62:	b928      	cbnz	r0, 800fd70 <__pow5mult+0x40>
 800fd64:	4b1d      	ldr	r3, [pc, #116]	@ (800fddc <__pow5mult+0xac>)
 800fd66:	481e      	ldr	r0, [pc, #120]	@ (800fde0 <__pow5mult+0xb0>)
 800fd68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fd6c:	f001 fcd4 	bl	8011718 <__assert_func>
 800fd70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd74:	6004      	str	r4, [r0, #0]
 800fd76:	60c4      	str	r4, [r0, #12]
 800fd78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fd7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd80:	b94c      	cbnz	r4, 800fd96 <__pow5mult+0x66>
 800fd82:	f240 2171 	movw	r1, #625	@ 0x271
 800fd86:	4638      	mov	r0, r7
 800fd88:	f7ff ff12 	bl	800fbb0 <__i2b>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd92:	4604      	mov	r4, r0
 800fd94:	6003      	str	r3, [r0, #0]
 800fd96:	f04f 0900 	mov.w	r9, #0
 800fd9a:	07eb      	lsls	r3, r5, #31
 800fd9c:	d50a      	bpl.n	800fdb4 <__pow5mult+0x84>
 800fd9e:	4631      	mov	r1, r6
 800fda0:	4622      	mov	r2, r4
 800fda2:	4638      	mov	r0, r7
 800fda4:	f7ff ff1a 	bl	800fbdc <__multiply>
 800fda8:	4631      	mov	r1, r6
 800fdaa:	4680      	mov	r8, r0
 800fdac:	4638      	mov	r0, r7
 800fdae:	f7ff fe01 	bl	800f9b4 <_Bfree>
 800fdb2:	4646      	mov	r6, r8
 800fdb4:	106d      	asrs	r5, r5, #1
 800fdb6:	d00b      	beq.n	800fdd0 <__pow5mult+0xa0>
 800fdb8:	6820      	ldr	r0, [r4, #0]
 800fdba:	b938      	cbnz	r0, 800fdcc <__pow5mult+0x9c>
 800fdbc:	4622      	mov	r2, r4
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	4638      	mov	r0, r7
 800fdc2:	f7ff ff0b 	bl	800fbdc <__multiply>
 800fdc6:	6020      	str	r0, [r4, #0]
 800fdc8:	f8c0 9000 	str.w	r9, [r0]
 800fdcc:	4604      	mov	r4, r0
 800fdce:	e7e4      	b.n	800fd9a <__pow5mult+0x6a>
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdd6:	bf00      	nop
 800fdd8:	080123e8 	.word	0x080123e8
 800fddc:	0801230e 	.word	0x0801230e
 800fde0:	0801238e 	.word	0x0801238e

0800fde4 <__lshift>:
 800fde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fde8:	460c      	mov	r4, r1
 800fdea:	6849      	ldr	r1, [r1, #4]
 800fdec:	6923      	ldr	r3, [r4, #16]
 800fdee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fdf2:	68a3      	ldr	r3, [r4, #8]
 800fdf4:	4607      	mov	r7, r0
 800fdf6:	4691      	mov	r9, r2
 800fdf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fdfc:	f108 0601 	add.w	r6, r8, #1
 800fe00:	42b3      	cmp	r3, r6
 800fe02:	db0b      	blt.n	800fe1c <__lshift+0x38>
 800fe04:	4638      	mov	r0, r7
 800fe06:	f7ff fd95 	bl	800f934 <_Balloc>
 800fe0a:	4605      	mov	r5, r0
 800fe0c:	b948      	cbnz	r0, 800fe22 <__lshift+0x3e>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	4b28      	ldr	r3, [pc, #160]	@ (800feb4 <__lshift+0xd0>)
 800fe12:	4829      	ldr	r0, [pc, #164]	@ (800feb8 <__lshift+0xd4>)
 800fe14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fe18:	f001 fc7e 	bl	8011718 <__assert_func>
 800fe1c:	3101      	adds	r1, #1
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	e7ee      	b.n	800fe00 <__lshift+0x1c>
 800fe22:	2300      	movs	r3, #0
 800fe24:	f100 0114 	add.w	r1, r0, #20
 800fe28:	f100 0210 	add.w	r2, r0, #16
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	4553      	cmp	r3, sl
 800fe30:	db33      	blt.n	800fe9a <__lshift+0xb6>
 800fe32:	6920      	ldr	r0, [r4, #16]
 800fe34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fe38:	f104 0314 	add.w	r3, r4, #20
 800fe3c:	f019 091f 	ands.w	r9, r9, #31
 800fe40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fe44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fe48:	d02b      	beq.n	800fea2 <__lshift+0xbe>
 800fe4a:	f1c9 0e20 	rsb	lr, r9, #32
 800fe4e:	468a      	mov	sl, r1
 800fe50:	2200      	movs	r2, #0
 800fe52:	6818      	ldr	r0, [r3, #0]
 800fe54:	fa00 f009 	lsl.w	r0, r0, r9
 800fe58:	4310      	orrs	r0, r2
 800fe5a:	f84a 0b04 	str.w	r0, [sl], #4
 800fe5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe62:	459c      	cmp	ip, r3
 800fe64:	fa22 f20e 	lsr.w	r2, r2, lr
 800fe68:	d8f3      	bhi.n	800fe52 <__lshift+0x6e>
 800fe6a:	ebac 0304 	sub.w	r3, ip, r4
 800fe6e:	3b15      	subs	r3, #21
 800fe70:	f023 0303 	bic.w	r3, r3, #3
 800fe74:	3304      	adds	r3, #4
 800fe76:	f104 0015 	add.w	r0, r4, #21
 800fe7a:	4584      	cmp	ip, r0
 800fe7c:	bf38      	it	cc
 800fe7e:	2304      	movcc	r3, #4
 800fe80:	50ca      	str	r2, [r1, r3]
 800fe82:	b10a      	cbz	r2, 800fe88 <__lshift+0xa4>
 800fe84:	f108 0602 	add.w	r6, r8, #2
 800fe88:	3e01      	subs	r6, #1
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	612e      	str	r6, [r5, #16]
 800fe8e:	4621      	mov	r1, r4
 800fe90:	f7ff fd90 	bl	800f9b4 <_Bfree>
 800fe94:	4628      	mov	r0, r5
 800fe96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe9e:	3301      	adds	r3, #1
 800fea0:	e7c5      	b.n	800fe2e <__lshift+0x4a>
 800fea2:	3904      	subs	r1, #4
 800fea4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fea8:	f841 2f04 	str.w	r2, [r1, #4]!
 800feac:	459c      	cmp	ip, r3
 800feae:	d8f9      	bhi.n	800fea4 <__lshift+0xc0>
 800feb0:	e7ea      	b.n	800fe88 <__lshift+0xa4>
 800feb2:	bf00      	nop
 800feb4:	0801237d 	.word	0x0801237d
 800feb8:	0801238e 	.word	0x0801238e

0800febc <__mcmp>:
 800febc:	690a      	ldr	r2, [r1, #16]
 800febe:	4603      	mov	r3, r0
 800fec0:	6900      	ldr	r0, [r0, #16]
 800fec2:	1a80      	subs	r0, r0, r2
 800fec4:	b530      	push	{r4, r5, lr}
 800fec6:	d10e      	bne.n	800fee6 <__mcmp+0x2a>
 800fec8:	3314      	adds	r3, #20
 800feca:	3114      	adds	r1, #20
 800fecc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fedc:	4295      	cmp	r5, r2
 800fede:	d003      	beq.n	800fee8 <__mcmp+0x2c>
 800fee0:	d205      	bcs.n	800feee <__mcmp+0x32>
 800fee2:	f04f 30ff 	mov.w	r0, #4294967295
 800fee6:	bd30      	pop	{r4, r5, pc}
 800fee8:	42a3      	cmp	r3, r4
 800feea:	d3f3      	bcc.n	800fed4 <__mcmp+0x18>
 800feec:	e7fb      	b.n	800fee6 <__mcmp+0x2a>
 800feee:	2001      	movs	r0, #1
 800fef0:	e7f9      	b.n	800fee6 <__mcmp+0x2a>
	...

0800fef4 <__mdiff>:
 800fef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef8:	4689      	mov	r9, r1
 800fefa:	4606      	mov	r6, r0
 800fefc:	4611      	mov	r1, r2
 800fefe:	4648      	mov	r0, r9
 800ff00:	4614      	mov	r4, r2
 800ff02:	f7ff ffdb 	bl	800febc <__mcmp>
 800ff06:	1e05      	subs	r5, r0, #0
 800ff08:	d112      	bne.n	800ff30 <__mdiff+0x3c>
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f7ff fd11 	bl	800f934 <_Balloc>
 800ff12:	4602      	mov	r2, r0
 800ff14:	b928      	cbnz	r0, 800ff22 <__mdiff+0x2e>
 800ff16:	4b3f      	ldr	r3, [pc, #252]	@ (8010014 <__mdiff+0x120>)
 800ff18:	f240 2137 	movw	r1, #567	@ 0x237
 800ff1c:	483e      	ldr	r0, [pc, #248]	@ (8010018 <__mdiff+0x124>)
 800ff1e:	f001 fbfb 	bl	8011718 <__assert_func>
 800ff22:	2301      	movs	r3, #1
 800ff24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ff28:	4610      	mov	r0, r2
 800ff2a:	b003      	add	sp, #12
 800ff2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff30:	bfbc      	itt	lt
 800ff32:	464b      	movlt	r3, r9
 800ff34:	46a1      	movlt	r9, r4
 800ff36:	4630      	mov	r0, r6
 800ff38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ff3c:	bfba      	itte	lt
 800ff3e:	461c      	movlt	r4, r3
 800ff40:	2501      	movlt	r5, #1
 800ff42:	2500      	movge	r5, #0
 800ff44:	f7ff fcf6 	bl	800f934 <_Balloc>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	b918      	cbnz	r0, 800ff54 <__mdiff+0x60>
 800ff4c:	4b31      	ldr	r3, [pc, #196]	@ (8010014 <__mdiff+0x120>)
 800ff4e:	f240 2145 	movw	r1, #581	@ 0x245
 800ff52:	e7e3      	b.n	800ff1c <__mdiff+0x28>
 800ff54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ff58:	6926      	ldr	r6, [r4, #16]
 800ff5a:	60c5      	str	r5, [r0, #12]
 800ff5c:	f109 0310 	add.w	r3, r9, #16
 800ff60:	f109 0514 	add.w	r5, r9, #20
 800ff64:	f104 0e14 	add.w	lr, r4, #20
 800ff68:	f100 0b14 	add.w	fp, r0, #20
 800ff6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ff70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ff74:	9301      	str	r3, [sp, #4]
 800ff76:	46d9      	mov	r9, fp
 800ff78:	f04f 0c00 	mov.w	ip, #0
 800ff7c:	9b01      	ldr	r3, [sp, #4]
 800ff7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ff82:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	fa1f f38a 	uxth.w	r3, sl
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	b283      	uxth	r3, r0
 800ff90:	1acb      	subs	r3, r1, r3
 800ff92:	0c00      	lsrs	r0, r0, #16
 800ff94:	4463      	add	r3, ip
 800ff96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ff9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ffa4:	4576      	cmp	r6, lr
 800ffa6:	f849 3b04 	str.w	r3, [r9], #4
 800ffaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ffae:	d8e5      	bhi.n	800ff7c <__mdiff+0x88>
 800ffb0:	1b33      	subs	r3, r6, r4
 800ffb2:	3b15      	subs	r3, #21
 800ffb4:	f023 0303 	bic.w	r3, r3, #3
 800ffb8:	3415      	adds	r4, #21
 800ffba:	3304      	adds	r3, #4
 800ffbc:	42a6      	cmp	r6, r4
 800ffbe:	bf38      	it	cc
 800ffc0:	2304      	movcc	r3, #4
 800ffc2:	441d      	add	r5, r3
 800ffc4:	445b      	add	r3, fp
 800ffc6:	461e      	mov	r6, r3
 800ffc8:	462c      	mov	r4, r5
 800ffca:	4544      	cmp	r4, r8
 800ffcc:	d30e      	bcc.n	800ffec <__mdiff+0xf8>
 800ffce:	f108 0103 	add.w	r1, r8, #3
 800ffd2:	1b49      	subs	r1, r1, r5
 800ffd4:	f021 0103 	bic.w	r1, r1, #3
 800ffd8:	3d03      	subs	r5, #3
 800ffda:	45a8      	cmp	r8, r5
 800ffdc:	bf38      	it	cc
 800ffde:	2100      	movcc	r1, #0
 800ffe0:	440b      	add	r3, r1
 800ffe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ffe6:	b191      	cbz	r1, 801000e <__mdiff+0x11a>
 800ffe8:	6117      	str	r7, [r2, #16]
 800ffea:	e79d      	b.n	800ff28 <__mdiff+0x34>
 800ffec:	f854 1b04 	ldr.w	r1, [r4], #4
 800fff0:	46e6      	mov	lr, ip
 800fff2:	0c08      	lsrs	r0, r1, #16
 800fff4:	fa1c fc81 	uxtah	ip, ip, r1
 800fff8:	4471      	add	r1, lr
 800fffa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fffe:	b289      	uxth	r1, r1
 8010000:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010004:	f846 1b04 	str.w	r1, [r6], #4
 8010008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801000c:	e7dd      	b.n	800ffca <__mdiff+0xd6>
 801000e:	3f01      	subs	r7, #1
 8010010:	e7e7      	b.n	800ffe2 <__mdiff+0xee>
 8010012:	bf00      	nop
 8010014:	0801237d 	.word	0x0801237d
 8010018:	0801238e 	.word	0x0801238e

0801001c <__ulp>:
 801001c:	b082      	sub	sp, #8
 801001e:	ed8d 0b00 	vstr	d0, [sp]
 8010022:	9a01      	ldr	r2, [sp, #4]
 8010024:	4b0f      	ldr	r3, [pc, #60]	@ (8010064 <__ulp+0x48>)
 8010026:	4013      	ands	r3, r2
 8010028:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801002c:	2b00      	cmp	r3, #0
 801002e:	dc08      	bgt.n	8010042 <__ulp+0x26>
 8010030:	425b      	negs	r3, r3
 8010032:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010036:	ea4f 5223 	mov.w	r2, r3, asr #20
 801003a:	da04      	bge.n	8010046 <__ulp+0x2a>
 801003c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010040:	4113      	asrs	r3, r2
 8010042:	2200      	movs	r2, #0
 8010044:	e008      	b.n	8010058 <__ulp+0x3c>
 8010046:	f1a2 0314 	sub.w	r3, r2, #20
 801004a:	2b1e      	cmp	r3, #30
 801004c:	bfda      	itte	le
 801004e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010052:	40da      	lsrle	r2, r3
 8010054:	2201      	movgt	r2, #1
 8010056:	2300      	movs	r3, #0
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	ec41 0b10 	vmov	d0, r0, r1
 8010060:	b002      	add	sp, #8
 8010062:	4770      	bx	lr
 8010064:	7ff00000 	.word	0x7ff00000

08010068 <__b2d>:
 8010068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006c:	6906      	ldr	r6, [r0, #16]
 801006e:	f100 0814 	add.w	r8, r0, #20
 8010072:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010076:	1f37      	subs	r7, r6, #4
 8010078:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801007c:	4610      	mov	r0, r2
 801007e:	f7ff fd4b 	bl	800fb18 <__hi0bits>
 8010082:	f1c0 0320 	rsb	r3, r0, #32
 8010086:	280a      	cmp	r0, #10
 8010088:	600b      	str	r3, [r1, #0]
 801008a:	491b      	ldr	r1, [pc, #108]	@ (80100f8 <__b2d+0x90>)
 801008c:	dc15      	bgt.n	80100ba <__b2d+0x52>
 801008e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010092:	fa22 f30c 	lsr.w	r3, r2, ip
 8010096:	45b8      	cmp	r8, r7
 8010098:	ea43 0501 	orr.w	r5, r3, r1
 801009c:	bf34      	ite	cc
 801009e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80100a2:	2300      	movcs	r3, #0
 80100a4:	3015      	adds	r0, #21
 80100a6:	fa02 f000 	lsl.w	r0, r2, r0
 80100aa:	fa23 f30c 	lsr.w	r3, r3, ip
 80100ae:	4303      	orrs	r3, r0
 80100b0:	461c      	mov	r4, r3
 80100b2:	ec45 4b10 	vmov	d0, r4, r5
 80100b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ba:	45b8      	cmp	r8, r7
 80100bc:	bf3a      	itte	cc
 80100be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80100c2:	f1a6 0708 	subcc.w	r7, r6, #8
 80100c6:	2300      	movcs	r3, #0
 80100c8:	380b      	subs	r0, #11
 80100ca:	d012      	beq.n	80100f2 <__b2d+0x8a>
 80100cc:	f1c0 0120 	rsb	r1, r0, #32
 80100d0:	fa23 f401 	lsr.w	r4, r3, r1
 80100d4:	4082      	lsls	r2, r0
 80100d6:	4322      	orrs	r2, r4
 80100d8:	4547      	cmp	r7, r8
 80100da:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80100de:	bf8c      	ite	hi
 80100e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80100e4:	2200      	movls	r2, #0
 80100e6:	4083      	lsls	r3, r0
 80100e8:	40ca      	lsrs	r2, r1
 80100ea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80100ee:	4313      	orrs	r3, r2
 80100f0:	e7de      	b.n	80100b0 <__b2d+0x48>
 80100f2:	ea42 0501 	orr.w	r5, r2, r1
 80100f6:	e7db      	b.n	80100b0 <__b2d+0x48>
 80100f8:	3ff00000 	.word	0x3ff00000

080100fc <__d2b>:
 80100fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010100:	460f      	mov	r7, r1
 8010102:	2101      	movs	r1, #1
 8010104:	ec59 8b10 	vmov	r8, r9, d0
 8010108:	4616      	mov	r6, r2
 801010a:	f7ff fc13 	bl	800f934 <_Balloc>
 801010e:	4604      	mov	r4, r0
 8010110:	b930      	cbnz	r0, 8010120 <__d2b+0x24>
 8010112:	4602      	mov	r2, r0
 8010114:	4b23      	ldr	r3, [pc, #140]	@ (80101a4 <__d2b+0xa8>)
 8010116:	4824      	ldr	r0, [pc, #144]	@ (80101a8 <__d2b+0xac>)
 8010118:	f240 310f 	movw	r1, #783	@ 0x30f
 801011c:	f001 fafc 	bl	8011718 <__assert_func>
 8010120:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010124:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010128:	b10d      	cbz	r5, 801012e <__d2b+0x32>
 801012a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801012e:	9301      	str	r3, [sp, #4]
 8010130:	f1b8 0300 	subs.w	r3, r8, #0
 8010134:	d023      	beq.n	801017e <__d2b+0x82>
 8010136:	4668      	mov	r0, sp
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	f7ff fd0c 	bl	800fb56 <__lo0bits>
 801013e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010142:	b1d0      	cbz	r0, 801017a <__d2b+0x7e>
 8010144:	f1c0 0320 	rsb	r3, r0, #32
 8010148:	fa02 f303 	lsl.w	r3, r2, r3
 801014c:	430b      	orrs	r3, r1
 801014e:	40c2      	lsrs	r2, r0
 8010150:	6163      	str	r3, [r4, #20]
 8010152:	9201      	str	r2, [sp, #4]
 8010154:	9b01      	ldr	r3, [sp, #4]
 8010156:	61a3      	str	r3, [r4, #24]
 8010158:	2b00      	cmp	r3, #0
 801015a:	bf0c      	ite	eq
 801015c:	2201      	moveq	r2, #1
 801015e:	2202      	movne	r2, #2
 8010160:	6122      	str	r2, [r4, #16]
 8010162:	b1a5      	cbz	r5, 801018e <__d2b+0x92>
 8010164:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010168:	4405      	add	r5, r0
 801016a:	603d      	str	r5, [r7, #0]
 801016c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010170:	6030      	str	r0, [r6, #0]
 8010172:	4620      	mov	r0, r4
 8010174:	b003      	add	sp, #12
 8010176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801017a:	6161      	str	r1, [r4, #20]
 801017c:	e7ea      	b.n	8010154 <__d2b+0x58>
 801017e:	a801      	add	r0, sp, #4
 8010180:	f7ff fce9 	bl	800fb56 <__lo0bits>
 8010184:	9b01      	ldr	r3, [sp, #4]
 8010186:	6163      	str	r3, [r4, #20]
 8010188:	3020      	adds	r0, #32
 801018a:	2201      	movs	r2, #1
 801018c:	e7e8      	b.n	8010160 <__d2b+0x64>
 801018e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010192:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010196:	6038      	str	r0, [r7, #0]
 8010198:	6918      	ldr	r0, [r3, #16]
 801019a:	f7ff fcbd 	bl	800fb18 <__hi0bits>
 801019e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80101a2:	e7e5      	b.n	8010170 <__d2b+0x74>
 80101a4:	0801237d 	.word	0x0801237d
 80101a8:	0801238e 	.word	0x0801238e

080101ac <__ratio>:
 80101ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b0:	4688      	mov	r8, r1
 80101b2:	4669      	mov	r1, sp
 80101b4:	4681      	mov	r9, r0
 80101b6:	f7ff ff57 	bl	8010068 <__b2d>
 80101ba:	a901      	add	r1, sp, #4
 80101bc:	4640      	mov	r0, r8
 80101be:	ec55 4b10 	vmov	r4, r5, d0
 80101c2:	f7ff ff51 	bl	8010068 <__b2d>
 80101c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80101ca:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80101ce:	1ad2      	subs	r2, r2, r3
 80101d0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80101d4:	1a5b      	subs	r3, r3, r1
 80101d6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80101da:	ec57 6b10 	vmov	r6, r7, d0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	bfd6      	itet	le
 80101e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80101e6:	462a      	movgt	r2, r5
 80101e8:	463a      	movle	r2, r7
 80101ea:	46ab      	mov	fp, r5
 80101ec:	46a2      	mov	sl, r4
 80101ee:	bfce      	itee	gt
 80101f0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80101f4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80101f8:	ee00 3a90 	vmovle	s1, r3
 80101fc:	ec4b ab17 	vmov	d7, sl, fp
 8010200:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010204:	b003      	add	sp, #12
 8010206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801020a <__copybits>:
 801020a:	3901      	subs	r1, #1
 801020c:	b570      	push	{r4, r5, r6, lr}
 801020e:	1149      	asrs	r1, r1, #5
 8010210:	6914      	ldr	r4, [r2, #16]
 8010212:	3101      	adds	r1, #1
 8010214:	f102 0314 	add.w	r3, r2, #20
 8010218:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801021c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010220:	1f05      	subs	r5, r0, #4
 8010222:	42a3      	cmp	r3, r4
 8010224:	d30c      	bcc.n	8010240 <__copybits+0x36>
 8010226:	1aa3      	subs	r3, r4, r2
 8010228:	3b11      	subs	r3, #17
 801022a:	f023 0303 	bic.w	r3, r3, #3
 801022e:	3211      	adds	r2, #17
 8010230:	42a2      	cmp	r2, r4
 8010232:	bf88      	it	hi
 8010234:	2300      	movhi	r3, #0
 8010236:	4418      	add	r0, r3
 8010238:	2300      	movs	r3, #0
 801023a:	4288      	cmp	r0, r1
 801023c:	d305      	bcc.n	801024a <__copybits+0x40>
 801023e:	bd70      	pop	{r4, r5, r6, pc}
 8010240:	f853 6b04 	ldr.w	r6, [r3], #4
 8010244:	f845 6f04 	str.w	r6, [r5, #4]!
 8010248:	e7eb      	b.n	8010222 <__copybits+0x18>
 801024a:	f840 3b04 	str.w	r3, [r0], #4
 801024e:	e7f4      	b.n	801023a <__copybits+0x30>

08010250 <__any_on>:
 8010250:	f100 0214 	add.w	r2, r0, #20
 8010254:	6900      	ldr	r0, [r0, #16]
 8010256:	114b      	asrs	r3, r1, #5
 8010258:	4298      	cmp	r0, r3
 801025a:	b510      	push	{r4, lr}
 801025c:	db11      	blt.n	8010282 <__any_on+0x32>
 801025e:	dd0a      	ble.n	8010276 <__any_on+0x26>
 8010260:	f011 011f 	ands.w	r1, r1, #31
 8010264:	d007      	beq.n	8010276 <__any_on+0x26>
 8010266:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801026a:	fa24 f001 	lsr.w	r0, r4, r1
 801026e:	fa00 f101 	lsl.w	r1, r0, r1
 8010272:	428c      	cmp	r4, r1
 8010274:	d10b      	bne.n	801028e <__any_on+0x3e>
 8010276:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801027a:	4293      	cmp	r3, r2
 801027c:	d803      	bhi.n	8010286 <__any_on+0x36>
 801027e:	2000      	movs	r0, #0
 8010280:	bd10      	pop	{r4, pc}
 8010282:	4603      	mov	r3, r0
 8010284:	e7f7      	b.n	8010276 <__any_on+0x26>
 8010286:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801028a:	2900      	cmp	r1, #0
 801028c:	d0f5      	beq.n	801027a <__any_on+0x2a>
 801028e:	2001      	movs	r0, #1
 8010290:	e7f6      	b.n	8010280 <__any_on+0x30>

08010292 <sulp>:
 8010292:	b570      	push	{r4, r5, r6, lr}
 8010294:	4604      	mov	r4, r0
 8010296:	460d      	mov	r5, r1
 8010298:	4616      	mov	r6, r2
 801029a:	ec45 4b10 	vmov	d0, r4, r5
 801029e:	f7ff febd 	bl	801001c <__ulp>
 80102a2:	b17e      	cbz	r6, 80102c4 <sulp+0x32>
 80102a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80102a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	dd09      	ble.n	80102c4 <sulp+0x32>
 80102b0:	051b      	lsls	r3, r3, #20
 80102b2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80102b6:	2000      	movs	r0, #0
 80102b8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80102bc:	ec41 0b17 	vmov	d7, r0, r1
 80102c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80102c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080102c8 <_strtod_l>:
 80102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	ed2d 8b0a 	vpush	{d8-d12}
 80102d0:	b097      	sub	sp, #92	@ 0x5c
 80102d2:	4688      	mov	r8, r1
 80102d4:	920e      	str	r2, [sp, #56]	@ 0x38
 80102d6:	2200      	movs	r2, #0
 80102d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80102da:	9005      	str	r0, [sp, #20]
 80102dc:	f04f 0a00 	mov.w	sl, #0
 80102e0:	f04f 0b00 	mov.w	fp, #0
 80102e4:	460a      	mov	r2, r1
 80102e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80102e8:	7811      	ldrb	r1, [r2, #0]
 80102ea:	292b      	cmp	r1, #43	@ 0x2b
 80102ec:	d04c      	beq.n	8010388 <_strtod_l+0xc0>
 80102ee:	d839      	bhi.n	8010364 <_strtod_l+0x9c>
 80102f0:	290d      	cmp	r1, #13
 80102f2:	d833      	bhi.n	801035c <_strtod_l+0x94>
 80102f4:	2908      	cmp	r1, #8
 80102f6:	d833      	bhi.n	8010360 <_strtod_l+0x98>
 80102f8:	2900      	cmp	r1, #0
 80102fa:	d03c      	beq.n	8010376 <_strtod_l+0xae>
 80102fc:	2200      	movs	r2, #0
 80102fe:	9208      	str	r2, [sp, #32]
 8010300:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8010302:	782a      	ldrb	r2, [r5, #0]
 8010304:	2a30      	cmp	r2, #48	@ 0x30
 8010306:	f040 80b5 	bne.w	8010474 <_strtod_l+0x1ac>
 801030a:	786a      	ldrb	r2, [r5, #1]
 801030c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010310:	2a58      	cmp	r2, #88	@ 0x58
 8010312:	d170      	bne.n	80103f6 <_strtod_l+0x12e>
 8010314:	9302      	str	r3, [sp, #8]
 8010316:	9b08      	ldr	r3, [sp, #32]
 8010318:	9301      	str	r3, [sp, #4]
 801031a:	ab12      	add	r3, sp, #72	@ 0x48
 801031c:	9300      	str	r3, [sp, #0]
 801031e:	4a8b      	ldr	r2, [pc, #556]	@ (801054c <_strtod_l+0x284>)
 8010320:	9805      	ldr	r0, [sp, #20]
 8010322:	ab13      	add	r3, sp, #76	@ 0x4c
 8010324:	a911      	add	r1, sp, #68	@ 0x44
 8010326:	f001 fa91 	bl	801184c <__gethex>
 801032a:	f010 060f 	ands.w	r6, r0, #15
 801032e:	4604      	mov	r4, r0
 8010330:	d005      	beq.n	801033e <_strtod_l+0x76>
 8010332:	2e06      	cmp	r6, #6
 8010334:	d12a      	bne.n	801038c <_strtod_l+0xc4>
 8010336:	3501      	adds	r5, #1
 8010338:	2300      	movs	r3, #0
 801033a:	9511      	str	r5, [sp, #68]	@ 0x44
 801033c:	9308      	str	r3, [sp, #32]
 801033e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010340:	2b00      	cmp	r3, #0
 8010342:	f040 852f 	bne.w	8010da4 <_strtod_l+0xadc>
 8010346:	9b08      	ldr	r3, [sp, #32]
 8010348:	ec4b ab10 	vmov	d0, sl, fp
 801034c:	b1cb      	cbz	r3, 8010382 <_strtod_l+0xba>
 801034e:	eeb1 0b40 	vneg.f64	d0, d0
 8010352:	b017      	add	sp, #92	@ 0x5c
 8010354:	ecbd 8b0a 	vpop	{d8-d12}
 8010358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035c:	2920      	cmp	r1, #32
 801035e:	d1cd      	bne.n	80102fc <_strtod_l+0x34>
 8010360:	3201      	adds	r2, #1
 8010362:	e7c0      	b.n	80102e6 <_strtod_l+0x1e>
 8010364:	292d      	cmp	r1, #45	@ 0x2d
 8010366:	d1c9      	bne.n	80102fc <_strtod_l+0x34>
 8010368:	2101      	movs	r1, #1
 801036a:	9108      	str	r1, [sp, #32]
 801036c:	1c51      	adds	r1, r2, #1
 801036e:	9111      	str	r1, [sp, #68]	@ 0x44
 8010370:	7852      	ldrb	r2, [r2, #1]
 8010372:	2a00      	cmp	r2, #0
 8010374:	d1c4      	bne.n	8010300 <_strtod_l+0x38>
 8010376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010378:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801037c:	2b00      	cmp	r3, #0
 801037e:	f040 850f 	bne.w	8010da0 <_strtod_l+0xad8>
 8010382:	ec4b ab10 	vmov	d0, sl, fp
 8010386:	e7e4      	b.n	8010352 <_strtod_l+0x8a>
 8010388:	2100      	movs	r1, #0
 801038a:	e7ee      	b.n	801036a <_strtod_l+0xa2>
 801038c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801038e:	b13a      	cbz	r2, 80103a0 <_strtod_l+0xd8>
 8010390:	2135      	movs	r1, #53	@ 0x35
 8010392:	a814      	add	r0, sp, #80	@ 0x50
 8010394:	f7ff ff39 	bl	801020a <__copybits>
 8010398:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801039a:	9805      	ldr	r0, [sp, #20]
 801039c:	f7ff fb0a 	bl	800f9b4 <_Bfree>
 80103a0:	1e73      	subs	r3, r6, #1
 80103a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80103a4:	2b04      	cmp	r3, #4
 80103a6:	d806      	bhi.n	80103b6 <_strtod_l+0xee>
 80103a8:	e8df f003 	tbb	[pc, r3]
 80103ac:	201d0314 	.word	0x201d0314
 80103b0:	14          	.byte	0x14
 80103b1:	00          	.byte	0x00
 80103b2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80103b6:	05e3      	lsls	r3, r4, #23
 80103b8:	bf48      	it	mi
 80103ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80103be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80103c2:	0d1b      	lsrs	r3, r3, #20
 80103c4:	051b      	lsls	r3, r3, #20
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d1b9      	bne.n	801033e <_strtod_l+0x76>
 80103ca:	f7fe fb91 	bl	800eaf0 <__errno>
 80103ce:	2322      	movs	r3, #34	@ 0x22
 80103d0:	6003      	str	r3, [r0, #0]
 80103d2:	e7b4      	b.n	801033e <_strtod_l+0x76>
 80103d4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80103d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80103dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80103e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80103e4:	e7e7      	b.n	80103b6 <_strtod_l+0xee>
 80103e6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8010554 <_strtod_l+0x28c>
 80103ea:	e7e4      	b.n	80103b6 <_strtod_l+0xee>
 80103ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80103f0:	f04f 3aff 	mov.w	sl, #4294967295
 80103f4:	e7df      	b.n	80103b6 <_strtod_l+0xee>
 80103f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80103f8:	1c5a      	adds	r2, r3, #1
 80103fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80103fc:	785b      	ldrb	r3, [r3, #1]
 80103fe:	2b30      	cmp	r3, #48	@ 0x30
 8010400:	d0f9      	beq.n	80103f6 <_strtod_l+0x12e>
 8010402:	2b00      	cmp	r3, #0
 8010404:	d09b      	beq.n	801033e <_strtod_l+0x76>
 8010406:	2301      	movs	r3, #1
 8010408:	2600      	movs	r6, #0
 801040a:	9307      	str	r3, [sp, #28]
 801040c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801040e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010410:	46b1      	mov	r9, r6
 8010412:	4635      	mov	r5, r6
 8010414:	220a      	movs	r2, #10
 8010416:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010418:	7804      	ldrb	r4, [r0, #0]
 801041a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801041e:	b2d9      	uxtb	r1, r3
 8010420:	2909      	cmp	r1, #9
 8010422:	d929      	bls.n	8010478 <_strtod_l+0x1b0>
 8010424:	494a      	ldr	r1, [pc, #296]	@ (8010550 <_strtod_l+0x288>)
 8010426:	2201      	movs	r2, #1
 8010428:	f001 f928 	bl	801167c <strncmp>
 801042c:	b378      	cbz	r0, 801048e <_strtod_l+0x1c6>
 801042e:	2000      	movs	r0, #0
 8010430:	4622      	mov	r2, r4
 8010432:	462b      	mov	r3, r5
 8010434:	4607      	mov	r7, r0
 8010436:	9006      	str	r0, [sp, #24]
 8010438:	2a65      	cmp	r2, #101	@ 0x65
 801043a:	d001      	beq.n	8010440 <_strtod_l+0x178>
 801043c:	2a45      	cmp	r2, #69	@ 0x45
 801043e:	d117      	bne.n	8010470 <_strtod_l+0x1a8>
 8010440:	b91b      	cbnz	r3, 801044a <_strtod_l+0x182>
 8010442:	9b07      	ldr	r3, [sp, #28]
 8010444:	4303      	orrs	r3, r0
 8010446:	d096      	beq.n	8010376 <_strtod_l+0xae>
 8010448:	2300      	movs	r3, #0
 801044a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801044e:	f108 0201 	add.w	r2, r8, #1
 8010452:	9211      	str	r2, [sp, #68]	@ 0x44
 8010454:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010458:	2a2b      	cmp	r2, #43	@ 0x2b
 801045a:	d06b      	beq.n	8010534 <_strtod_l+0x26c>
 801045c:	2a2d      	cmp	r2, #45	@ 0x2d
 801045e:	d071      	beq.n	8010544 <_strtod_l+0x27c>
 8010460:	f04f 0e00 	mov.w	lr, #0
 8010464:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010468:	2c09      	cmp	r4, #9
 801046a:	d979      	bls.n	8010560 <_strtod_l+0x298>
 801046c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010470:	2400      	movs	r4, #0
 8010472:	e094      	b.n	801059e <_strtod_l+0x2d6>
 8010474:	2300      	movs	r3, #0
 8010476:	e7c7      	b.n	8010408 <_strtod_l+0x140>
 8010478:	2d08      	cmp	r5, #8
 801047a:	f100 0001 	add.w	r0, r0, #1
 801047e:	bfd4      	ite	le
 8010480:	fb02 3909 	mlale	r9, r2, r9, r3
 8010484:	fb02 3606 	mlagt	r6, r2, r6, r3
 8010488:	3501      	adds	r5, #1
 801048a:	9011      	str	r0, [sp, #68]	@ 0x44
 801048c:	e7c3      	b.n	8010416 <_strtod_l+0x14e>
 801048e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010490:	1c5a      	adds	r2, r3, #1
 8010492:	9211      	str	r2, [sp, #68]	@ 0x44
 8010494:	785a      	ldrb	r2, [r3, #1]
 8010496:	b375      	cbz	r5, 80104f6 <_strtod_l+0x22e>
 8010498:	4607      	mov	r7, r0
 801049a:	462b      	mov	r3, r5
 801049c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80104a0:	2909      	cmp	r1, #9
 80104a2:	d913      	bls.n	80104cc <_strtod_l+0x204>
 80104a4:	2101      	movs	r1, #1
 80104a6:	9106      	str	r1, [sp, #24]
 80104a8:	e7c6      	b.n	8010438 <_strtod_l+0x170>
 80104aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104ac:	1c5a      	adds	r2, r3, #1
 80104ae:	9211      	str	r2, [sp, #68]	@ 0x44
 80104b0:	785a      	ldrb	r2, [r3, #1]
 80104b2:	3001      	adds	r0, #1
 80104b4:	2a30      	cmp	r2, #48	@ 0x30
 80104b6:	d0f8      	beq.n	80104aa <_strtod_l+0x1e2>
 80104b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80104bc:	2b08      	cmp	r3, #8
 80104be:	f200 8476 	bhi.w	8010dae <_strtod_l+0xae6>
 80104c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80104c6:	4607      	mov	r7, r0
 80104c8:	2000      	movs	r0, #0
 80104ca:	4603      	mov	r3, r0
 80104cc:	3a30      	subs	r2, #48	@ 0x30
 80104ce:	f100 0101 	add.w	r1, r0, #1
 80104d2:	d023      	beq.n	801051c <_strtod_l+0x254>
 80104d4:	440f      	add	r7, r1
 80104d6:	eb00 0c03 	add.w	ip, r0, r3
 80104da:	4619      	mov	r1, r3
 80104dc:	240a      	movs	r4, #10
 80104de:	4561      	cmp	r1, ip
 80104e0:	d10b      	bne.n	80104fa <_strtod_l+0x232>
 80104e2:	1c5c      	adds	r4, r3, #1
 80104e4:	4403      	add	r3, r0
 80104e6:	2b08      	cmp	r3, #8
 80104e8:	4404      	add	r4, r0
 80104ea:	dc11      	bgt.n	8010510 <_strtod_l+0x248>
 80104ec:	230a      	movs	r3, #10
 80104ee:	fb03 2909 	mla	r9, r3, r9, r2
 80104f2:	2100      	movs	r1, #0
 80104f4:	e013      	b.n	801051e <_strtod_l+0x256>
 80104f6:	4628      	mov	r0, r5
 80104f8:	e7dc      	b.n	80104b4 <_strtod_l+0x1ec>
 80104fa:	2908      	cmp	r1, #8
 80104fc:	f101 0101 	add.w	r1, r1, #1
 8010500:	dc02      	bgt.n	8010508 <_strtod_l+0x240>
 8010502:	fb04 f909 	mul.w	r9, r4, r9
 8010506:	e7ea      	b.n	80104de <_strtod_l+0x216>
 8010508:	2910      	cmp	r1, #16
 801050a:	bfd8      	it	le
 801050c:	4366      	mulle	r6, r4
 801050e:	e7e6      	b.n	80104de <_strtod_l+0x216>
 8010510:	2b0f      	cmp	r3, #15
 8010512:	dcee      	bgt.n	80104f2 <_strtod_l+0x22a>
 8010514:	230a      	movs	r3, #10
 8010516:	fb03 2606 	mla	r6, r3, r6, r2
 801051a:	e7ea      	b.n	80104f2 <_strtod_l+0x22a>
 801051c:	461c      	mov	r4, r3
 801051e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010520:	1c5a      	adds	r2, r3, #1
 8010522:	9211      	str	r2, [sp, #68]	@ 0x44
 8010524:	785a      	ldrb	r2, [r3, #1]
 8010526:	4608      	mov	r0, r1
 8010528:	4623      	mov	r3, r4
 801052a:	e7b7      	b.n	801049c <_strtod_l+0x1d4>
 801052c:	2301      	movs	r3, #1
 801052e:	2700      	movs	r7, #0
 8010530:	9306      	str	r3, [sp, #24]
 8010532:	e786      	b.n	8010442 <_strtod_l+0x17a>
 8010534:	f04f 0e00 	mov.w	lr, #0
 8010538:	f108 0202 	add.w	r2, r8, #2
 801053c:	9211      	str	r2, [sp, #68]	@ 0x44
 801053e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010542:	e78f      	b.n	8010464 <_strtod_l+0x19c>
 8010544:	f04f 0e01 	mov.w	lr, #1
 8010548:	e7f6      	b.n	8010538 <_strtod_l+0x270>
 801054a:	bf00      	nop
 801054c:	08012500 	.word	0x08012500
 8010550:	080124e8 	.word	0x080124e8
 8010554:	7ff00000 	.word	0x7ff00000
 8010558:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801055a:	1c54      	adds	r4, r2, #1
 801055c:	9411      	str	r4, [sp, #68]	@ 0x44
 801055e:	7852      	ldrb	r2, [r2, #1]
 8010560:	2a30      	cmp	r2, #48	@ 0x30
 8010562:	d0f9      	beq.n	8010558 <_strtod_l+0x290>
 8010564:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8010568:	2c08      	cmp	r4, #8
 801056a:	d881      	bhi.n	8010470 <_strtod_l+0x1a8>
 801056c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010570:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010572:	9209      	str	r2, [sp, #36]	@ 0x24
 8010574:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010576:	1c51      	adds	r1, r2, #1
 8010578:	9111      	str	r1, [sp, #68]	@ 0x44
 801057a:	7852      	ldrb	r2, [r2, #1]
 801057c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010580:	2c09      	cmp	r4, #9
 8010582:	d938      	bls.n	80105f6 <_strtod_l+0x32e>
 8010584:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010586:	1b0c      	subs	r4, r1, r4
 8010588:	2c08      	cmp	r4, #8
 801058a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801058e:	dc02      	bgt.n	8010596 <_strtod_l+0x2ce>
 8010590:	4564      	cmp	r4, ip
 8010592:	bfa8      	it	ge
 8010594:	4664      	movge	r4, ip
 8010596:	f1be 0f00 	cmp.w	lr, #0
 801059a:	d000      	beq.n	801059e <_strtod_l+0x2d6>
 801059c:	4264      	negs	r4, r4
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d14e      	bne.n	8010640 <_strtod_l+0x378>
 80105a2:	9b07      	ldr	r3, [sp, #28]
 80105a4:	4318      	orrs	r0, r3
 80105a6:	f47f aeca 	bne.w	801033e <_strtod_l+0x76>
 80105aa:	9b06      	ldr	r3, [sp, #24]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f47f aee2 	bne.w	8010376 <_strtod_l+0xae>
 80105b2:	2a69      	cmp	r2, #105	@ 0x69
 80105b4:	d027      	beq.n	8010606 <_strtod_l+0x33e>
 80105b6:	dc24      	bgt.n	8010602 <_strtod_l+0x33a>
 80105b8:	2a49      	cmp	r2, #73	@ 0x49
 80105ba:	d024      	beq.n	8010606 <_strtod_l+0x33e>
 80105bc:	2a4e      	cmp	r2, #78	@ 0x4e
 80105be:	f47f aeda 	bne.w	8010376 <_strtod_l+0xae>
 80105c2:	4997      	ldr	r1, [pc, #604]	@ (8010820 <_strtod_l+0x558>)
 80105c4:	a811      	add	r0, sp, #68	@ 0x44
 80105c6:	f001 fb63 	bl	8011c90 <__match>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	f43f aed3 	beq.w	8010376 <_strtod_l+0xae>
 80105d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b28      	cmp	r3, #40	@ 0x28
 80105d6:	d12d      	bne.n	8010634 <_strtod_l+0x36c>
 80105d8:	4992      	ldr	r1, [pc, #584]	@ (8010824 <_strtod_l+0x55c>)
 80105da:	aa14      	add	r2, sp, #80	@ 0x50
 80105dc:	a811      	add	r0, sp, #68	@ 0x44
 80105de:	f001 fb6b 	bl	8011cb8 <__hexnan>
 80105e2:	2805      	cmp	r0, #5
 80105e4:	d126      	bne.n	8010634 <_strtod_l+0x36c>
 80105e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80105e8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80105ec:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80105f0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80105f4:	e6a3      	b.n	801033e <_strtod_l+0x76>
 80105f6:	240a      	movs	r4, #10
 80105f8:	fb04 2c0c 	mla	ip, r4, ip, r2
 80105fc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8010600:	e7b8      	b.n	8010574 <_strtod_l+0x2ac>
 8010602:	2a6e      	cmp	r2, #110	@ 0x6e
 8010604:	e7db      	b.n	80105be <_strtod_l+0x2f6>
 8010606:	4988      	ldr	r1, [pc, #544]	@ (8010828 <_strtod_l+0x560>)
 8010608:	a811      	add	r0, sp, #68	@ 0x44
 801060a:	f001 fb41 	bl	8011c90 <__match>
 801060e:	2800      	cmp	r0, #0
 8010610:	f43f aeb1 	beq.w	8010376 <_strtod_l+0xae>
 8010614:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010616:	4985      	ldr	r1, [pc, #532]	@ (801082c <_strtod_l+0x564>)
 8010618:	3b01      	subs	r3, #1
 801061a:	a811      	add	r0, sp, #68	@ 0x44
 801061c:	9311      	str	r3, [sp, #68]	@ 0x44
 801061e:	f001 fb37 	bl	8011c90 <__match>
 8010622:	b910      	cbnz	r0, 801062a <_strtod_l+0x362>
 8010624:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010626:	3301      	adds	r3, #1
 8010628:	9311      	str	r3, [sp, #68]	@ 0x44
 801062a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010840 <_strtod_l+0x578>
 801062e:	f04f 0a00 	mov.w	sl, #0
 8010632:	e684      	b.n	801033e <_strtod_l+0x76>
 8010634:	487e      	ldr	r0, [pc, #504]	@ (8010830 <_strtod_l+0x568>)
 8010636:	f001 f867 	bl	8011708 <nan>
 801063a:	ec5b ab10 	vmov	sl, fp, d0
 801063e:	e67e      	b.n	801033e <_strtod_l+0x76>
 8010640:	ee07 9a90 	vmov	s15, r9
 8010644:	1be2      	subs	r2, r4, r7
 8010646:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801064a:	2d00      	cmp	r5, #0
 801064c:	bf08      	it	eq
 801064e:	461d      	moveq	r5, r3
 8010650:	2b10      	cmp	r3, #16
 8010652:	9209      	str	r2, [sp, #36]	@ 0x24
 8010654:	461a      	mov	r2, r3
 8010656:	bfa8      	it	ge
 8010658:	2210      	movge	r2, #16
 801065a:	2b09      	cmp	r3, #9
 801065c:	ec5b ab17 	vmov	sl, fp, d7
 8010660:	dc15      	bgt.n	801068e <_strtod_l+0x3c6>
 8010662:	1be1      	subs	r1, r4, r7
 8010664:	2900      	cmp	r1, #0
 8010666:	f43f ae6a 	beq.w	801033e <_strtod_l+0x76>
 801066a:	eba4 0107 	sub.w	r1, r4, r7
 801066e:	dd72      	ble.n	8010756 <_strtod_l+0x48e>
 8010670:	2916      	cmp	r1, #22
 8010672:	dc59      	bgt.n	8010728 <_strtod_l+0x460>
 8010674:	4b6f      	ldr	r3, [pc, #444]	@ (8010834 <_strtod_l+0x56c>)
 8010676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801067c:	ed93 7b00 	vldr	d7, [r3]
 8010680:	ec4b ab16 	vmov	d6, sl, fp
 8010684:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010688:	ec5b ab17 	vmov	sl, fp, d7
 801068c:	e657      	b.n	801033e <_strtod_l+0x76>
 801068e:	4969      	ldr	r1, [pc, #420]	@ (8010834 <_strtod_l+0x56c>)
 8010690:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010694:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010698:	ee06 6a90 	vmov	s13, r6
 801069c:	2b0f      	cmp	r3, #15
 801069e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80106a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80106a6:	ec5b ab16 	vmov	sl, fp, d6
 80106aa:	ddda      	ble.n	8010662 <_strtod_l+0x39a>
 80106ac:	1a9a      	subs	r2, r3, r2
 80106ae:	1be1      	subs	r1, r4, r7
 80106b0:	440a      	add	r2, r1
 80106b2:	2a00      	cmp	r2, #0
 80106b4:	f340 8094 	ble.w	80107e0 <_strtod_l+0x518>
 80106b8:	f012 000f 	ands.w	r0, r2, #15
 80106bc:	d00a      	beq.n	80106d4 <_strtod_l+0x40c>
 80106be:	495d      	ldr	r1, [pc, #372]	@ (8010834 <_strtod_l+0x56c>)
 80106c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80106c4:	ed91 7b00 	vldr	d7, [r1]
 80106c8:	ec4b ab16 	vmov	d6, sl, fp
 80106cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80106d0:	ec5b ab17 	vmov	sl, fp, d7
 80106d4:	f032 020f 	bics.w	r2, r2, #15
 80106d8:	d073      	beq.n	80107c2 <_strtod_l+0x4fa>
 80106da:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80106de:	dd47      	ble.n	8010770 <_strtod_l+0x4a8>
 80106e0:	2400      	movs	r4, #0
 80106e2:	4625      	mov	r5, r4
 80106e4:	9407      	str	r4, [sp, #28]
 80106e6:	4626      	mov	r6, r4
 80106e8:	9a05      	ldr	r2, [sp, #20]
 80106ea:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010840 <_strtod_l+0x578>
 80106ee:	2322      	movs	r3, #34	@ 0x22
 80106f0:	6013      	str	r3, [r2, #0]
 80106f2:	f04f 0a00 	mov.w	sl, #0
 80106f6:	9b07      	ldr	r3, [sp, #28]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f43f ae20 	beq.w	801033e <_strtod_l+0x76>
 80106fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010700:	9805      	ldr	r0, [sp, #20]
 8010702:	f7ff f957 	bl	800f9b4 <_Bfree>
 8010706:	9805      	ldr	r0, [sp, #20]
 8010708:	4631      	mov	r1, r6
 801070a:	f7ff f953 	bl	800f9b4 <_Bfree>
 801070e:	9805      	ldr	r0, [sp, #20]
 8010710:	4629      	mov	r1, r5
 8010712:	f7ff f94f 	bl	800f9b4 <_Bfree>
 8010716:	9907      	ldr	r1, [sp, #28]
 8010718:	9805      	ldr	r0, [sp, #20]
 801071a:	f7ff f94b 	bl	800f9b4 <_Bfree>
 801071e:	9805      	ldr	r0, [sp, #20]
 8010720:	4621      	mov	r1, r4
 8010722:	f7ff f947 	bl	800f9b4 <_Bfree>
 8010726:	e60a      	b.n	801033e <_strtod_l+0x76>
 8010728:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801072c:	1be0      	subs	r0, r4, r7
 801072e:	4281      	cmp	r1, r0
 8010730:	dbbc      	blt.n	80106ac <_strtod_l+0x3e4>
 8010732:	4a40      	ldr	r2, [pc, #256]	@ (8010834 <_strtod_l+0x56c>)
 8010734:	f1c3 030f 	rsb	r3, r3, #15
 8010738:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801073c:	ed91 7b00 	vldr	d7, [r1]
 8010740:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010742:	ec4b ab16 	vmov	d6, sl, fp
 8010746:	1acb      	subs	r3, r1, r3
 8010748:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801074c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010750:	ed92 6b00 	vldr	d6, [r2]
 8010754:	e796      	b.n	8010684 <_strtod_l+0x3bc>
 8010756:	3116      	adds	r1, #22
 8010758:	dba8      	blt.n	80106ac <_strtod_l+0x3e4>
 801075a:	4b36      	ldr	r3, [pc, #216]	@ (8010834 <_strtod_l+0x56c>)
 801075c:	1b3c      	subs	r4, r7, r4
 801075e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010762:	ed94 7b00 	vldr	d7, [r4]
 8010766:	ec4b ab16 	vmov	d6, sl, fp
 801076a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801076e:	e78b      	b.n	8010688 <_strtod_l+0x3c0>
 8010770:	2000      	movs	r0, #0
 8010772:	ec4b ab17 	vmov	d7, sl, fp
 8010776:	4e30      	ldr	r6, [pc, #192]	@ (8010838 <_strtod_l+0x570>)
 8010778:	1112      	asrs	r2, r2, #4
 801077a:	4601      	mov	r1, r0
 801077c:	2a01      	cmp	r2, #1
 801077e:	dc23      	bgt.n	80107c8 <_strtod_l+0x500>
 8010780:	b108      	cbz	r0, 8010786 <_strtod_l+0x4be>
 8010782:	ec5b ab17 	vmov	sl, fp, d7
 8010786:	4a2c      	ldr	r2, [pc, #176]	@ (8010838 <_strtod_l+0x570>)
 8010788:	482c      	ldr	r0, [pc, #176]	@ (801083c <_strtod_l+0x574>)
 801078a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801078e:	ed92 7b00 	vldr	d7, [r2]
 8010792:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010796:	ec4b ab16 	vmov	d6, sl, fp
 801079a:	4a29      	ldr	r2, [pc, #164]	@ (8010840 <_strtod_l+0x578>)
 801079c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80107a0:	ee17 1a90 	vmov	r1, s15
 80107a4:	400a      	ands	r2, r1
 80107a6:	4282      	cmp	r2, r0
 80107a8:	ec5b ab17 	vmov	sl, fp, d7
 80107ac:	d898      	bhi.n	80106e0 <_strtod_l+0x418>
 80107ae:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80107b2:	4282      	cmp	r2, r0
 80107b4:	bf86      	itte	hi
 80107b6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8010844 <_strtod_l+0x57c>
 80107ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80107be:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80107c2:	2200      	movs	r2, #0
 80107c4:	9206      	str	r2, [sp, #24]
 80107c6:	e076      	b.n	80108b6 <_strtod_l+0x5ee>
 80107c8:	f012 0f01 	tst.w	r2, #1
 80107cc:	d004      	beq.n	80107d8 <_strtod_l+0x510>
 80107ce:	ed96 6b00 	vldr	d6, [r6]
 80107d2:	2001      	movs	r0, #1
 80107d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80107d8:	3101      	adds	r1, #1
 80107da:	1052      	asrs	r2, r2, #1
 80107dc:	3608      	adds	r6, #8
 80107de:	e7cd      	b.n	801077c <_strtod_l+0x4b4>
 80107e0:	d0ef      	beq.n	80107c2 <_strtod_l+0x4fa>
 80107e2:	4252      	negs	r2, r2
 80107e4:	f012 000f 	ands.w	r0, r2, #15
 80107e8:	d00a      	beq.n	8010800 <_strtod_l+0x538>
 80107ea:	4912      	ldr	r1, [pc, #72]	@ (8010834 <_strtod_l+0x56c>)
 80107ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80107f0:	ed91 7b00 	vldr	d7, [r1]
 80107f4:	ec4b ab16 	vmov	d6, sl, fp
 80107f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80107fc:	ec5b ab17 	vmov	sl, fp, d7
 8010800:	1112      	asrs	r2, r2, #4
 8010802:	d0de      	beq.n	80107c2 <_strtod_l+0x4fa>
 8010804:	2a1f      	cmp	r2, #31
 8010806:	dd1f      	ble.n	8010848 <_strtod_l+0x580>
 8010808:	2400      	movs	r4, #0
 801080a:	4625      	mov	r5, r4
 801080c:	9407      	str	r4, [sp, #28]
 801080e:	4626      	mov	r6, r4
 8010810:	9a05      	ldr	r2, [sp, #20]
 8010812:	2322      	movs	r3, #34	@ 0x22
 8010814:	f04f 0a00 	mov.w	sl, #0
 8010818:	f04f 0b00 	mov.w	fp, #0
 801081c:	6013      	str	r3, [r2, #0]
 801081e:	e76a      	b.n	80106f6 <_strtod_l+0x42e>
 8010820:	080122d5 	.word	0x080122d5
 8010824:	080124ec 	.word	0x080124ec
 8010828:	080122cd 	.word	0x080122cd
 801082c:	08012304 	.word	0x08012304
 8010830:	08012695 	.word	0x08012695
 8010834:	08012420 	.word	0x08012420
 8010838:	080123f8 	.word	0x080123f8
 801083c:	7ca00000 	.word	0x7ca00000
 8010840:	7ff00000 	.word	0x7ff00000
 8010844:	7fefffff 	.word	0x7fefffff
 8010848:	f012 0110 	ands.w	r1, r2, #16
 801084c:	bf18      	it	ne
 801084e:	216a      	movne	r1, #106	@ 0x6a
 8010850:	9106      	str	r1, [sp, #24]
 8010852:	ec4b ab17 	vmov	d7, sl, fp
 8010856:	49b0      	ldr	r1, [pc, #704]	@ (8010b18 <_strtod_l+0x850>)
 8010858:	2000      	movs	r0, #0
 801085a:	07d6      	lsls	r6, r2, #31
 801085c:	d504      	bpl.n	8010868 <_strtod_l+0x5a0>
 801085e:	ed91 6b00 	vldr	d6, [r1]
 8010862:	2001      	movs	r0, #1
 8010864:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010868:	1052      	asrs	r2, r2, #1
 801086a:	f101 0108 	add.w	r1, r1, #8
 801086e:	d1f4      	bne.n	801085a <_strtod_l+0x592>
 8010870:	b108      	cbz	r0, 8010876 <_strtod_l+0x5ae>
 8010872:	ec5b ab17 	vmov	sl, fp, d7
 8010876:	9a06      	ldr	r2, [sp, #24]
 8010878:	b1b2      	cbz	r2, 80108a8 <_strtod_l+0x5e0>
 801087a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801087e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8010882:	2a00      	cmp	r2, #0
 8010884:	4658      	mov	r0, fp
 8010886:	dd0f      	ble.n	80108a8 <_strtod_l+0x5e0>
 8010888:	2a1f      	cmp	r2, #31
 801088a:	dd55      	ble.n	8010938 <_strtod_l+0x670>
 801088c:	2a34      	cmp	r2, #52	@ 0x34
 801088e:	bfde      	ittt	le
 8010890:	f04f 32ff 	movle.w	r2, #4294967295
 8010894:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010898:	408a      	lslle	r2, r1
 801089a:	f04f 0a00 	mov.w	sl, #0
 801089e:	bfcc      	ite	gt
 80108a0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80108a4:	ea02 0b00 	andle.w	fp, r2, r0
 80108a8:	ec4b ab17 	vmov	d7, sl, fp
 80108ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b4:	d0a8      	beq.n	8010808 <_strtod_l+0x540>
 80108b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108b8:	9805      	ldr	r0, [sp, #20]
 80108ba:	f8cd 9000 	str.w	r9, [sp]
 80108be:	462a      	mov	r2, r5
 80108c0:	f7ff f8e0 	bl	800fa84 <__s2b>
 80108c4:	9007      	str	r0, [sp, #28]
 80108c6:	2800      	cmp	r0, #0
 80108c8:	f43f af0a 	beq.w	80106e0 <_strtod_l+0x418>
 80108cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108ce:	1b3f      	subs	r7, r7, r4
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	bfb4      	ite	lt
 80108d4:	463b      	movlt	r3, r7
 80108d6:	2300      	movge	r3, #0
 80108d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80108da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108dc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8010b08 <_strtod_l+0x840>
 80108e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80108e4:	2400      	movs	r4, #0
 80108e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80108e8:	4625      	mov	r5, r4
 80108ea:	9b07      	ldr	r3, [sp, #28]
 80108ec:	9805      	ldr	r0, [sp, #20]
 80108ee:	6859      	ldr	r1, [r3, #4]
 80108f0:	f7ff f820 	bl	800f934 <_Balloc>
 80108f4:	4606      	mov	r6, r0
 80108f6:	2800      	cmp	r0, #0
 80108f8:	f43f aef6 	beq.w	80106e8 <_strtod_l+0x420>
 80108fc:	9b07      	ldr	r3, [sp, #28]
 80108fe:	691a      	ldr	r2, [r3, #16]
 8010900:	ec4b ab19 	vmov	d9, sl, fp
 8010904:	3202      	adds	r2, #2
 8010906:	f103 010c 	add.w	r1, r3, #12
 801090a:	0092      	lsls	r2, r2, #2
 801090c:	300c      	adds	r0, #12
 801090e:	f7fe f91c 	bl	800eb4a <memcpy>
 8010912:	eeb0 0b49 	vmov.f64	d0, d9
 8010916:	9805      	ldr	r0, [sp, #20]
 8010918:	aa14      	add	r2, sp, #80	@ 0x50
 801091a:	a913      	add	r1, sp, #76	@ 0x4c
 801091c:	f7ff fbee 	bl	80100fc <__d2b>
 8010920:	9012      	str	r0, [sp, #72]	@ 0x48
 8010922:	2800      	cmp	r0, #0
 8010924:	f43f aee0 	beq.w	80106e8 <_strtod_l+0x420>
 8010928:	9805      	ldr	r0, [sp, #20]
 801092a:	2101      	movs	r1, #1
 801092c:	f7ff f940 	bl	800fbb0 <__i2b>
 8010930:	4605      	mov	r5, r0
 8010932:	b940      	cbnz	r0, 8010946 <_strtod_l+0x67e>
 8010934:	2500      	movs	r5, #0
 8010936:	e6d7      	b.n	80106e8 <_strtod_l+0x420>
 8010938:	f04f 31ff 	mov.w	r1, #4294967295
 801093c:	fa01 f202 	lsl.w	r2, r1, r2
 8010940:	ea02 0a0a 	and.w	sl, r2, sl
 8010944:	e7b0      	b.n	80108a8 <_strtod_l+0x5e0>
 8010946:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010948:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801094a:	2f00      	cmp	r7, #0
 801094c:	bfab      	itete	ge
 801094e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010950:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8010952:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8010956:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801095a:	bfac      	ite	ge
 801095c:	eb07 0903 	addge.w	r9, r7, r3
 8010960:	eba3 0807 	sublt.w	r8, r3, r7
 8010964:	9b06      	ldr	r3, [sp, #24]
 8010966:	1aff      	subs	r7, r7, r3
 8010968:	4417      	add	r7, r2
 801096a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801096e:	4a6b      	ldr	r2, [pc, #428]	@ (8010b1c <_strtod_l+0x854>)
 8010970:	3f01      	subs	r7, #1
 8010972:	4297      	cmp	r7, r2
 8010974:	da51      	bge.n	8010a1a <_strtod_l+0x752>
 8010976:	1bd1      	subs	r1, r2, r7
 8010978:	291f      	cmp	r1, #31
 801097a:	eba3 0301 	sub.w	r3, r3, r1
 801097e:	f04f 0201 	mov.w	r2, #1
 8010982:	dc3e      	bgt.n	8010a02 <_strtod_l+0x73a>
 8010984:	408a      	lsls	r2, r1
 8010986:	920c      	str	r2, [sp, #48]	@ 0x30
 8010988:	2200      	movs	r2, #0
 801098a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801098c:	eb09 0703 	add.w	r7, r9, r3
 8010990:	4498      	add	r8, r3
 8010992:	9b06      	ldr	r3, [sp, #24]
 8010994:	45b9      	cmp	r9, r7
 8010996:	4498      	add	r8, r3
 8010998:	464b      	mov	r3, r9
 801099a:	bfa8      	it	ge
 801099c:	463b      	movge	r3, r7
 801099e:	4543      	cmp	r3, r8
 80109a0:	bfa8      	it	ge
 80109a2:	4643      	movge	r3, r8
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	bfc2      	ittt	gt
 80109a8:	1aff      	subgt	r7, r7, r3
 80109aa:	eba8 0803 	subgt.w	r8, r8, r3
 80109ae:	eba9 0903 	subgt.w	r9, r9, r3
 80109b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	dd16      	ble.n	80109e6 <_strtod_l+0x71e>
 80109b8:	4629      	mov	r1, r5
 80109ba:	9805      	ldr	r0, [sp, #20]
 80109bc:	461a      	mov	r2, r3
 80109be:	f7ff f9b7 	bl	800fd30 <__pow5mult>
 80109c2:	4605      	mov	r5, r0
 80109c4:	2800      	cmp	r0, #0
 80109c6:	d0b5      	beq.n	8010934 <_strtod_l+0x66c>
 80109c8:	4601      	mov	r1, r0
 80109ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80109cc:	9805      	ldr	r0, [sp, #20]
 80109ce:	f7ff f905 	bl	800fbdc <__multiply>
 80109d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80109d4:	2800      	cmp	r0, #0
 80109d6:	f43f ae87 	beq.w	80106e8 <_strtod_l+0x420>
 80109da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80109dc:	9805      	ldr	r0, [sp, #20]
 80109de:	f7fe ffe9 	bl	800f9b4 <_Bfree>
 80109e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80109e6:	2f00      	cmp	r7, #0
 80109e8:	dc1b      	bgt.n	8010a22 <_strtod_l+0x75a>
 80109ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	dd21      	ble.n	8010a34 <_strtod_l+0x76c>
 80109f0:	4631      	mov	r1, r6
 80109f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80109f4:	9805      	ldr	r0, [sp, #20]
 80109f6:	f7ff f99b 	bl	800fd30 <__pow5mult>
 80109fa:	4606      	mov	r6, r0
 80109fc:	b9d0      	cbnz	r0, 8010a34 <_strtod_l+0x76c>
 80109fe:	2600      	movs	r6, #0
 8010a00:	e672      	b.n	80106e8 <_strtod_l+0x420>
 8010a02:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8010a06:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8010a0a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8010a0e:	37e2      	adds	r7, #226	@ 0xe2
 8010a10:	fa02 f107 	lsl.w	r1, r2, r7
 8010a14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010a16:	920c      	str	r2, [sp, #48]	@ 0x30
 8010a18:	e7b8      	b.n	801098c <_strtod_l+0x6c4>
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010a1e:	2201      	movs	r2, #1
 8010a20:	e7f9      	b.n	8010a16 <_strtod_l+0x74e>
 8010a22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010a24:	9805      	ldr	r0, [sp, #20]
 8010a26:	463a      	mov	r2, r7
 8010a28:	f7ff f9dc 	bl	800fde4 <__lshift>
 8010a2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d1db      	bne.n	80109ea <_strtod_l+0x722>
 8010a32:	e659      	b.n	80106e8 <_strtod_l+0x420>
 8010a34:	f1b8 0f00 	cmp.w	r8, #0
 8010a38:	dd07      	ble.n	8010a4a <_strtod_l+0x782>
 8010a3a:	4631      	mov	r1, r6
 8010a3c:	9805      	ldr	r0, [sp, #20]
 8010a3e:	4642      	mov	r2, r8
 8010a40:	f7ff f9d0 	bl	800fde4 <__lshift>
 8010a44:	4606      	mov	r6, r0
 8010a46:	2800      	cmp	r0, #0
 8010a48:	d0d9      	beq.n	80109fe <_strtod_l+0x736>
 8010a4a:	f1b9 0f00 	cmp.w	r9, #0
 8010a4e:	dd08      	ble.n	8010a62 <_strtod_l+0x79a>
 8010a50:	4629      	mov	r1, r5
 8010a52:	9805      	ldr	r0, [sp, #20]
 8010a54:	464a      	mov	r2, r9
 8010a56:	f7ff f9c5 	bl	800fde4 <__lshift>
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	f43f ae43 	beq.w	80106e8 <_strtod_l+0x420>
 8010a62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010a64:	9805      	ldr	r0, [sp, #20]
 8010a66:	4632      	mov	r2, r6
 8010a68:	f7ff fa44 	bl	800fef4 <__mdiff>
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	f43f ae3a 	beq.w	80106e8 <_strtod_l+0x420>
 8010a74:	2300      	movs	r3, #0
 8010a76:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010a7a:	60c3      	str	r3, [r0, #12]
 8010a7c:	4629      	mov	r1, r5
 8010a7e:	f7ff fa1d 	bl	800febc <__mcmp>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	da4e      	bge.n	8010b24 <_strtod_l+0x85c>
 8010a86:	ea58 080a 	orrs.w	r8, r8, sl
 8010a8a:	d174      	bne.n	8010b76 <_strtod_l+0x8ae>
 8010a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d170      	bne.n	8010b76 <_strtod_l+0x8ae>
 8010a94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010a98:	0d1b      	lsrs	r3, r3, #20
 8010a9a:	051b      	lsls	r3, r3, #20
 8010a9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010aa0:	d969      	bls.n	8010b76 <_strtod_l+0x8ae>
 8010aa2:	6963      	ldr	r3, [r4, #20]
 8010aa4:	b913      	cbnz	r3, 8010aac <_strtod_l+0x7e4>
 8010aa6:	6923      	ldr	r3, [r4, #16]
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	dd64      	ble.n	8010b76 <_strtod_l+0x8ae>
 8010aac:	4621      	mov	r1, r4
 8010aae:	2201      	movs	r2, #1
 8010ab0:	9805      	ldr	r0, [sp, #20]
 8010ab2:	f7ff f997 	bl	800fde4 <__lshift>
 8010ab6:	4629      	mov	r1, r5
 8010ab8:	4604      	mov	r4, r0
 8010aba:	f7ff f9ff 	bl	800febc <__mcmp>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	dd59      	ble.n	8010b76 <_strtod_l+0x8ae>
 8010ac2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010ac6:	9a06      	ldr	r2, [sp, #24]
 8010ac8:	0d1b      	lsrs	r3, r3, #20
 8010aca:	051b      	lsls	r3, r3, #20
 8010acc:	2a00      	cmp	r2, #0
 8010ace:	d070      	beq.n	8010bb2 <_strtod_l+0x8ea>
 8010ad0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010ad4:	d86d      	bhi.n	8010bb2 <_strtod_l+0x8ea>
 8010ad6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010ada:	f67f ae99 	bls.w	8010810 <_strtod_l+0x548>
 8010ade:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8010b10 <_strtod_l+0x848>
 8010ae2:	ec4b ab16 	vmov	d6, sl, fp
 8010ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8010b20 <_strtod_l+0x858>)
 8010ae8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010aec:	ee17 2a90 	vmov	r2, s15
 8010af0:	4013      	ands	r3, r2
 8010af2:	ec5b ab17 	vmov	sl, fp, d7
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f47f ae01 	bne.w	80106fe <_strtod_l+0x436>
 8010afc:	9a05      	ldr	r2, [sp, #20]
 8010afe:	2322      	movs	r3, #34	@ 0x22
 8010b00:	6013      	str	r3, [r2, #0]
 8010b02:	e5fc      	b.n	80106fe <_strtod_l+0x436>
 8010b04:	f3af 8000 	nop.w
 8010b08:	ffc00000 	.word	0xffc00000
 8010b0c:	41dfffff 	.word	0x41dfffff
 8010b10:	00000000 	.word	0x00000000
 8010b14:	39500000 	.word	0x39500000
 8010b18:	08012518 	.word	0x08012518
 8010b1c:	fffffc02 	.word	0xfffffc02
 8010b20:	7ff00000 	.word	0x7ff00000
 8010b24:	46d9      	mov	r9, fp
 8010b26:	d15d      	bne.n	8010be4 <_strtod_l+0x91c>
 8010b28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b2c:	f1b8 0f00 	cmp.w	r8, #0
 8010b30:	d02a      	beq.n	8010b88 <_strtod_l+0x8c0>
 8010b32:	4aab      	ldr	r2, [pc, #684]	@ (8010de0 <_strtod_l+0xb18>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d12a      	bne.n	8010b8e <_strtod_l+0x8c6>
 8010b38:	9b06      	ldr	r3, [sp, #24]
 8010b3a:	4652      	mov	r2, sl
 8010b3c:	b1fb      	cbz	r3, 8010b7e <_strtod_l+0x8b6>
 8010b3e:	4ba9      	ldr	r3, [pc, #676]	@ (8010de4 <_strtod_l+0xb1c>)
 8010b40:	ea0b 0303 	and.w	r3, fp, r3
 8010b44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010b48:	f04f 31ff 	mov.w	r1, #4294967295
 8010b4c:	d81a      	bhi.n	8010b84 <_strtod_l+0x8bc>
 8010b4e:	0d1b      	lsrs	r3, r3, #20
 8010b50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010b54:	fa01 f303 	lsl.w	r3, r1, r3
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d118      	bne.n	8010b8e <_strtod_l+0x8c6>
 8010b5c:	4ba2      	ldr	r3, [pc, #648]	@ (8010de8 <_strtod_l+0xb20>)
 8010b5e:	4599      	cmp	r9, r3
 8010b60:	d102      	bne.n	8010b68 <_strtod_l+0x8a0>
 8010b62:	3201      	adds	r2, #1
 8010b64:	f43f adc0 	beq.w	80106e8 <_strtod_l+0x420>
 8010b68:	4b9e      	ldr	r3, [pc, #632]	@ (8010de4 <_strtod_l+0xb1c>)
 8010b6a:	ea09 0303 	and.w	r3, r9, r3
 8010b6e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8010b72:	f04f 0a00 	mov.w	sl, #0
 8010b76:	9b06      	ldr	r3, [sp, #24]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d1b0      	bne.n	8010ade <_strtod_l+0x816>
 8010b7c:	e5bf      	b.n	80106fe <_strtod_l+0x436>
 8010b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b82:	e7e9      	b.n	8010b58 <_strtod_l+0x890>
 8010b84:	460b      	mov	r3, r1
 8010b86:	e7e7      	b.n	8010b58 <_strtod_l+0x890>
 8010b88:	ea53 030a 	orrs.w	r3, r3, sl
 8010b8c:	d099      	beq.n	8010ac2 <_strtod_l+0x7fa>
 8010b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b90:	b1c3      	cbz	r3, 8010bc4 <_strtod_l+0x8fc>
 8010b92:	ea13 0f09 	tst.w	r3, r9
 8010b96:	d0ee      	beq.n	8010b76 <_strtod_l+0x8ae>
 8010b98:	9a06      	ldr	r2, [sp, #24]
 8010b9a:	4650      	mov	r0, sl
 8010b9c:	4659      	mov	r1, fp
 8010b9e:	f1b8 0f00 	cmp.w	r8, #0
 8010ba2:	d013      	beq.n	8010bcc <_strtod_l+0x904>
 8010ba4:	f7ff fb75 	bl	8010292 <sulp>
 8010ba8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8010bac:	ec5b ab17 	vmov	sl, fp, d7
 8010bb0:	e7e1      	b.n	8010b76 <_strtod_l+0x8ae>
 8010bb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010bb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010bba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010bbe:	f04f 3aff 	mov.w	sl, #4294967295
 8010bc2:	e7d8      	b.n	8010b76 <_strtod_l+0x8ae>
 8010bc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bc6:	ea13 0f0a 	tst.w	r3, sl
 8010bca:	e7e4      	b.n	8010b96 <_strtod_l+0x8ce>
 8010bcc:	f7ff fb61 	bl	8010292 <sulp>
 8010bd0:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010bd4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bdc:	ec5b ab10 	vmov	sl, fp, d0
 8010be0:	d1c9      	bne.n	8010b76 <_strtod_l+0x8ae>
 8010be2:	e615      	b.n	8010810 <_strtod_l+0x548>
 8010be4:	4629      	mov	r1, r5
 8010be6:	4620      	mov	r0, r4
 8010be8:	f7ff fae0 	bl	80101ac <__ratio>
 8010bec:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8010bf0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf8:	d85d      	bhi.n	8010cb6 <_strtod_l+0x9ee>
 8010bfa:	f1b8 0f00 	cmp.w	r8, #0
 8010bfe:	d164      	bne.n	8010cca <_strtod_l+0xa02>
 8010c00:	f1ba 0f00 	cmp.w	sl, #0
 8010c04:	d14b      	bne.n	8010c9e <_strtod_l+0x9d6>
 8010c06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c0a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d160      	bne.n	8010cd4 <_strtod_l+0xa0c>
 8010c12:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8010c16:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1e:	d401      	bmi.n	8010c24 <_strtod_l+0x95c>
 8010c20:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010c24:	eeb1 ab48 	vneg.f64	d10, d8
 8010c28:	486e      	ldr	r0, [pc, #440]	@ (8010de4 <_strtod_l+0xb1c>)
 8010c2a:	4970      	ldr	r1, [pc, #448]	@ (8010dec <_strtod_l+0xb24>)
 8010c2c:	ea09 0700 	and.w	r7, r9, r0
 8010c30:	428f      	cmp	r7, r1
 8010c32:	ec53 2b1a 	vmov	r2, r3, d10
 8010c36:	d17d      	bne.n	8010d34 <_strtod_l+0xa6c>
 8010c38:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8010c3c:	ec4b ab1c 	vmov	d12, sl, fp
 8010c40:	eeb0 0b4c 	vmov.f64	d0, d12
 8010c44:	f7ff f9ea 	bl	801001c <__ulp>
 8010c48:	4866      	ldr	r0, [pc, #408]	@ (8010de4 <_strtod_l+0xb1c>)
 8010c4a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8010c4e:	ee1c 3a90 	vmov	r3, s25
 8010c52:	4a67      	ldr	r2, [pc, #412]	@ (8010df0 <_strtod_l+0xb28>)
 8010c54:	ea03 0100 	and.w	r1, r3, r0
 8010c58:	4291      	cmp	r1, r2
 8010c5a:	ec5b ab1c 	vmov	sl, fp, d12
 8010c5e:	d93c      	bls.n	8010cda <_strtod_l+0xa12>
 8010c60:	ee19 2a90 	vmov	r2, s19
 8010c64:	4b60      	ldr	r3, [pc, #384]	@ (8010de8 <_strtod_l+0xb20>)
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d104      	bne.n	8010c74 <_strtod_l+0x9ac>
 8010c6a:	ee19 3a10 	vmov	r3, s18
 8010c6e:	3301      	adds	r3, #1
 8010c70:	f43f ad3a 	beq.w	80106e8 <_strtod_l+0x420>
 8010c74:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8010de8 <_strtod_l+0xb20>
 8010c78:	f04f 3aff 	mov.w	sl, #4294967295
 8010c7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010c7e:	9805      	ldr	r0, [sp, #20]
 8010c80:	f7fe fe98 	bl	800f9b4 <_Bfree>
 8010c84:	9805      	ldr	r0, [sp, #20]
 8010c86:	4631      	mov	r1, r6
 8010c88:	f7fe fe94 	bl	800f9b4 <_Bfree>
 8010c8c:	9805      	ldr	r0, [sp, #20]
 8010c8e:	4629      	mov	r1, r5
 8010c90:	f7fe fe90 	bl	800f9b4 <_Bfree>
 8010c94:	9805      	ldr	r0, [sp, #20]
 8010c96:	4621      	mov	r1, r4
 8010c98:	f7fe fe8c 	bl	800f9b4 <_Bfree>
 8010c9c:	e625      	b.n	80108ea <_strtod_l+0x622>
 8010c9e:	f1ba 0f01 	cmp.w	sl, #1
 8010ca2:	d103      	bne.n	8010cac <_strtod_l+0x9e4>
 8010ca4:	f1bb 0f00 	cmp.w	fp, #0
 8010ca8:	f43f adb2 	beq.w	8010810 <_strtod_l+0x548>
 8010cac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010cb0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010cb4:	e7b8      	b.n	8010c28 <_strtod_l+0x960>
 8010cb6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010cba:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010cbe:	f1b8 0f00 	cmp.w	r8, #0
 8010cc2:	d0af      	beq.n	8010c24 <_strtod_l+0x95c>
 8010cc4:	eeb0 ab48 	vmov.f64	d10, d8
 8010cc8:	e7ae      	b.n	8010c28 <_strtod_l+0x960>
 8010cca:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8010cce:	eeb0 8b4a 	vmov.f64	d8, d10
 8010cd2:	e7a9      	b.n	8010c28 <_strtod_l+0x960>
 8010cd4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010cd8:	e7a6      	b.n	8010c28 <_strtod_l+0x960>
 8010cda:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010cde:	9b06      	ldr	r3, [sp, #24]
 8010ce0:	46d9      	mov	r9, fp
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d1ca      	bne.n	8010c7c <_strtod_l+0x9b4>
 8010ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010cea:	0d1b      	lsrs	r3, r3, #20
 8010cec:	051b      	lsls	r3, r3, #20
 8010cee:	429f      	cmp	r7, r3
 8010cf0:	d1c4      	bne.n	8010c7c <_strtod_l+0x9b4>
 8010cf2:	ec51 0b18 	vmov	r0, r1, d8
 8010cf6:	f7ef fd37 	bl	8000768 <__aeabi_d2lz>
 8010cfa:	f7ef fcef 	bl	80006dc <__aeabi_l2d>
 8010cfe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8010d02:	ec41 0b17 	vmov	d7, r0, r1
 8010d06:	ea49 090a 	orr.w	r9, r9, sl
 8010d0a:	ea59 0908 	orrs.w	r9, r9, r8
 8010d0e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010d12:	d03c      	beq.n	8010d8e <_strtod_l+0xac6>
 8010d14:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010dc8 <_strtod_l+0xb00>
 8010d18:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d20:	f53f aced 	bmi.w	80106fe <_strtod_l+0x436>
 8010d24:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010dd0 <_strtod_l+0xb08>
 8010d28:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d30:	dda4      	ble.n	8010c7c <_strtod_l+0x9b4>
 8010d32:	e4e4      	b.n	80106fe <_strtod_l+0x436>
 8010d34:	9906      	ldr	r1, [sp, #24]
 8010d36:	b1e1      	cbz	r1, 8010d72 <_strtod_l+0xaaa>
 8010d38:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8010d3c:	d819      	bhi.n	8010d72 <_strtod_l+0xaaa>
 8010d3e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d46:	d811      	bhi.n	8010d6c <_strtod_l+0xaa4>
 8010d48:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8010d4c:	ee18 3a10 	vmov	r3, s16
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	bf38      	it	cc
 8010d54:	2301      	movcc	r3, #1
 8010d56:	ee08 3a10 	vmov	s16, r3
 8010d5a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8010d5e:	f1b8 0f00 	cmp.w	r8, #0
 8010d62:	d111      	bne.n	8010d88 <_strtod_l+0xac0>
 8010d64:	eeb1 7b48 	vneg.f64	d7, d8
 8010d68:	ec53 2b17 	vmov	r2, r3, d7
 8010d6c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8010d70:	1bcb      	subs	r3, r1, r7
 8010d72:	eeb0 0b49 	vmov.f64	d0, d9
 8010d76:	ec43 2b1a 	vmov	d10, r2, r3
 8010d7a:	f7ff f94f 	bl	801001c <__ulp>
 8010d7e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8010d82:	ec5b ab19 	vmov	sl, fp, d9
 8010d86:	e7aa      	b.n	8010cde <_strtod_l+0xa16>
 8010d88:	eeb0 7b48 	vmov.f64	d7, d8
 8010d8c:	e7ec      	b.n	8010d68 <_strtod_l+0xaa0>
 8010d8e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8010dd8 <_strtod_l+0xb10>
 8010d92:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9a:	f57f af6f 	bpl.w	8010c7c <_strtod_l+0x9b4>
 8010d9e:	e4ae      	b.n	80106fe <_strtod_l+0x436>
 8010da0:	2300      	movs	r3, #0
 8010da2:	9308      	str	r3, [sp, #32]
 8010da4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010da6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010da8:	6013      	str	r3, [r2, #0]
 8010daa:	f7ff bacc 	b.w	8010346 <_strtod_l+0x7e>
 8010dae:	2a65      	cmp	r2, #101	@ 0x65
 8010db0:	f43f abbc 	beq.w	801052c <_strtod_l+0x264>
 8010db4:	2a45      	cmp	r2, #69	@ 0x45
 8010db6:	f43f abb9 	beq.w	801052c <_strtod_l+0x264>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	9306      	str	r3, [sp, #24]
 8010dbe:	f7ff bbf0 	b.w	80105a2 <_strtod_l+0x2da>
 8010dc2:	bf00      	nop
 8010dc4:	f3af 8000 	nop.w
 8010dc8:	94a03595 	.word	0x94a03595
 8010dcc:	3fdfffff 	.word	0x3fdfffff
 8010dd0:	35afe535 	.word	0x35afe535
 8010dd4:	3fe00000 	.word	0x3fe00000
 8010dd8:	94a03595 	.word	0x94a03595
 8010ddc:	3fcfffff 	.word	0x3fcfffff
 8010de0:	000fffff 	.word	0x000fffff
 8010de4:	7ff00000 	.word	0x7ff00000
 8010de8:	7fefffff 	.word	0x7fefffff
 8010dec:	7fe00000 	.word	0x7fe00000
 8010df0:	7c9fffff 	.word	0x7c9fffff

08010df4 <_strtod_r>:
 8010df4:	4b01      	ldr	r3, [pc, #4]	@ (8010dfc <_strtod_r+0x8>)
 8010df6:	f7ff ba67 	b.w	80102c8 <_strtod_l>
 8010dfa:	bf00      	nop
 8010dfc:	24000078 	.word	0x24000078

08010e00 <_strtol_l.constprop.0>:
 8010e00:	2b24      	cmp	r3, #36	@ 0x24
 8010e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e06:	4686      	mov	lr, r0
 8010e08:	4690      	mov	r8, r2
 8010e0a:	d801      	bhi.n	8010e10 <_strtol_l.constprop.0+0x10>
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d106      	bne.n	8010e1e <_strtol_l.constprop.0+0x1e>
 8010e10:	f7fd fe6e 	bl	800eaf0 <__errno>
 8010e14:	2316      	movs	r3, #22
 8010e16:	6003      	str	r3, [r0, #0]
 8010e18:	2000      	movs	r0, #0
 8010e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e1e:	4834      	ldr	r0, [pc, #208]	@ (8010ef0 <_strtol_l.constprop.0+0xf0>)
 8010e20:	460d      	mov	r5, r1
 8010e22:	462a      	mov	r2, r5
 8010e24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e28:	5d06      	ldrb	r6, [r0, r4]
 8010e2a:	f016 0608 	ands.w	r6, r6, #8
 8010e2e:	d1f8      	bne.n	8010e22 <_strtol_l.constprop.0+0x22>
 8010e30:	2c2d      	cmp	r4, #45	@ 0x2d
 8010e32:	d12d      	bne.n	8010e90 <_strtol_l.constprop.0+0x90>
 8010e34:	782c      	ldrb	r4, [r5, #0]
 8010e36:	2601      	movs	r6, #1
 8010e38:	1c95      	adds	r5, r2, #2
 8010e3a:	f033 0210 	bics.w	r2, r3, #16
 8010e3e:	d109      	bne.n	8010e54 <_strtol_l.constprop.0+0x54>
 8010e40:	2c30      	cmp	r4, #48	@ 0x30
 8010e42:	d12a      	bne.n	8010e9a <_strtol_l.constprop.0+0x9a>
 8010e44:	782a      	ldrb	r2, [r5, #0]
 8010e46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010e4a:	2a58      	cmp	r2, #88	@ 0x58
 8010e4c:	d125      	bne.n	8010e9a <_strtol_l.constprop.0+0x9a>
 8010e4e:	786c      	ldrb	r4, [r5, #1]
 8010e50:	2310      	movs	r3, #16
 8010e52:	3502      	adds	r5, #2
 8010e54:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010e58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	fbbc f9f3 	udiv	r9, ip, r3
 8010e62:	4610      	mov	r0, r2
 8010e64:	fb03 ca19 	mls	sl, r3, r9, ip
 8010e68:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010e6c:	2f09      	cmp	r7, #9
 8010e6e:	d81b      	bhi.n	8010ea8 <_strtol_l.constprop.0+0xa8>
 8010e70:	463c      	mov	r4, r7
 8010e72:	42a3      	cmp	r3, r4
 8010e74:	dd27      	ble.n	8010ec6 <_strtol_l.constprop.0+0xc6>
 8010e76:	1c57      	adds	r7, r2, #1
 8010e78:	d007      	beq.n	8010e8a <_strtol_l.constprop.0+0x8a>
 8010e7a:	4581      	cmp	r9, r0
 8010e7c:	d320      	bcc.n	8010ec0 <_strtol_l.constprop.0+0xc0>
 8010e7e:	d101      	bne.n	8010e84 <_strtol_l.constprop.0+0x84>
 8010e80:	45a2      	cmp	sl, r4
 8010e82:	db1d      	blt.n	8010ec0 <_strtol_l.constprop.0+0xc0>
 8010e84:	fb00 4003 	mla	r0, r0, r3, r4
 8010e88:	2201      	movs	r2, #1
 8010e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e8e:	e7eb      	b.n	8010e68 <_strtol_l.constprop.0+0x68>
 8010e90:	2c2b      	cmp	r4, #43	@ 0x2b
 8010e92:	bf04      	itt	eq
 8010e94:	782c      	ldrbeq	r4, [r5, #0]
 8010e96:	1c95      	addeq	r5, r2, #2
 8010e98:	e7cf      	b.n	8010e3a <_strtol_l.constprop.0+0x3a>
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d1da      	bne.n	8010e54 <_strtol_l.constprop.0+0x54>
 8010e9e:	2c30      	cmp	r4, #48	@ 0x30
 8010ea0:	bf0c      	ite	eq
 8010ea2:	2308      	moveq	r3, #8
 8010ea4:	230a      	movne	r3, #10
 8010ea6:	e7d5      	b.n	8010e54 <_strtol_l.constprop.0+0x54>
 8010ea8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010eac:	2f19      	cmp	r7, #25
 8010eae:	d801      	bhi.n	8010eb4 <_strtol_l.constprop.0+0xb4>
 8010eb0:	3c37      	subs	r4, #55	@ 0x37
 8010eb2:	e7de      	b.n	8010e72 <_strtol_l.constprop.0+0x72>
 8010eb4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010eb8:	2f19      	cmp	r7, #25
 8010eba:	d804      	bhi.n	8010ec6 <_strtol_l.constprop.0+0xc6>
 8010ebc:	3c57      	subs	r4, #87	@ 0x57
 8010ebe:	e7d8      	b.n	8010e72 <_strtol_l.constprop.0+0x72>
 8010ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ec4:	e7e1      	b.n	8010e8a <_strtol_l.constprop.0+0x8a>
 8010ec6:	1c53      	adds	r3, r2, #1
 8010ec8:	d108      	bne.n	8010edc <_strtol_l.constprop.0+0xdc>
 8010eca:	2322      	movs	r3, #34	@ 0x22
 8010ecc:	f8ce 3000 	str.w	r3, [lr]
 8010ed0:	4660      	mov	r0, ip
 8010ed2:	f1b8 0f00 	cmp.w	r8, #0
 8010ed6:	d0a0      	beq.n	8010e1a <_strtol_l.constprop.0+0x1a>
 8010ed8:	1e69      	subs	r1, r5, #1
 8010eda:	e006      	b.n	8010eea <_strtol_l.constprop.0+0xea>
 8010edc:	b106      	cbz	r6, 8010ee0 <_strtol_l.constprop.0+0xe0>
 8010ede:	4240      	negs	r0, r0
 8010ee0:	f1b8 0f00 	cmp.w	r8, #0
 8010ee4:	d099      	beq.n	8010e1a <_strtol_l.constprop.0+0x1a>
 8010ee6:	2a00      	cmp	r2, #0
 8010ee8:	d1f6      	bne.n	8010ed8 <_strtol_l.constprop.0+0xd8>
 8010eea:	f8c8 1000 	str.w	r1, [r8]
 8010eee:	e794      	b.n	8010e1a <_strtol_l.constprop.0+0x1a>
 8010ef0:	08012541 	.word	0x08012541

08010ef4 <_strtol_r>:
 8010ef4:	f7ff bf84 	b.w	8010e00 <_strtol_l.constprop.0>

08010ef8 <__ssputs_r>:
 8010ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010efc:	688e      	ldr	r6, [r1, #8]
 8010efe:	461f      	mov	r7, r3
 8010f00:	42be      	cmp	r6, r7
 8010f02:	680b      	ldr	r3, [r1, #0]
 8010f04:	4682      	mov	sl, r0
 8010f06:	460c      	mov	r4, r1
 8010f08:	4690      	mov	r8, r2
 8010f0a:	d82d      	bhi.n	8010f68 <__ssputs_r+0x70>
 8010f0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010f14:	d026      	beq.n	8010f64 <__ssputs_r+0x6c>
 8010f16:	6965      	ldr	r5, [r4, #20]
 8010f18:	6909      	ldr	r1, [r1, #16]
 8010f1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f1e:	eba3 0901 	sub.w	r9, r3, r1
 8010f22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f26:	1c7b      	adds	r3, r7, #1
 8010f28:	444b      	add	r3, r9
 8010f2a:	106d      	asrs	r5, r5, #1
 8010f2c:	429d      	cmp	r5, r3
 8010f2e:	bf38      	it	cc
 8010f30:	461d      	movcc	r5, r3
 8010f32:	0553      	lsls	r3, r2, #21
 8010f34:	d527      	bpl.n	8010f86 <__ssputs_r+0x8e>
 8010f36:	4629      	mov	r1, r5
 8010f38:	f7fe fc70 	bl	800f81c <_malloc_r>
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	b360      	cbz	r0, 8010f9a <__ssputs_r+0xa2>
 8010f40:	6921      	ldr	r1, [r4, #16]
 8010f42:	464a      	mov	r2, r9
 8010f44:	f7fd fe01 	bl	800eb4a <memcpy>
 8010f48:	89a3      	ldrh	r3, [r4, #12]
 8010f4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f52:	81a3      	strh	r3, [r4, #12]
 8010f54:	6126      	str	r6, [r4, #16]
 8010f56:	6165      	str	r5, [r4, #20]
 8010f58:	444e      	add	r6, r9
 8010f5a:	eba5 0509 	sub.w	r5, r5, r9
 8010f5e:	6026      	str	r6, [r4, #0]
 8010f60:	60a5      	str	r5, [r4, #8]
 8010f62:	463e      	mov	r6, r7
 8010f64:	42be      	cmp	r6, r7
 8010f66:	d900      	bls.n	8010f6a <__ssputs_r+0x72>
 8010f68:	463e      	mov	r6, r7
 8010f6a:	6820      	ldr	r0, [r4, #0]
 8010f6c:	4632      	mov	r2, r6
 8010f6e:	4641      	mov	r1, r8
 8010f70:	f000 fb6a 	bl	8011648 <memmove>
 8010f74:	68a3      	ldr	r3, [r4, #8]
 8010f76:	1b9b      	subs	r3, r3, r6
 8010f78:	60a3      	str	r3, [r4, #8]
 8010f7a:	6823      	ldr	r3, [r4, #0]
 8010f7c:	4433      	add	r3, r6
 8010f7e:	6023      	str	r3, [r4, #0]
 8010f80:	2000      	movs	r0, #0
 8010f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f86:	462a      	mov	r2, r5
 8010f88:	f000 ff43 	bl	8011e12 <_realloc_r>
 8010f8c:	4606      	mov	r6, r0
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d1e0      	bne.n	8010f54 <__ssputs_r+0x5c>
 8010f92:	6921      	ldr	r1, [r4, #16]
 8010f94:	4650      	mov	r0, sl
 8010f96:	f7fe fbcd 	bl	800f734 <_free_r>
 8010f9a:	230c      	movs	r3, #12
 8010f9c:	f8ca 3000 	str.w	r3, [sl]
 8010fa0:	89a3      	ldrh	r3, [r4, #12]
 8010fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fa6:	81a3      	strh	r3, [r4, #12]
 8010fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fac:	e7e9      	b.n	8010f82 <__ssputs_r+0x8a>
	...

08010fb0 <_svfiprintf_r>:
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	4698      	mov	r8, r3
 8010fb6:	898b      	ldrh	r3, [r1, #12]
 8010fb8:	061b      	lsls	r3, r3, #24
 8010fba:	b09d      	sub	sp, #116	@ 0x74
 8010fbc:	4607      	mov	r7, r0
 8010fbe:	460d      	mov	r5, r1
 8010fc0:	4614      	mov	r4, r2
 8010fc2:	d510      	bpl.n	8010fe6 <_svfiprintf_r+0x36>
 8010fc4:	690b      	ldr	r3, [r1, #16]
 8010fc6:	b973      	cbnz	r3, 8010fe6 <_svfiprintf_r+0x36>
 8010fc8:	2140      	movs	r1, #64	@ 0x40
 8010fca:	f7fe fc27 	bl	800f81c <_malloc_r>
 8010fce:	6028      	str	r0, [r5, #0]
 8010fd0:	6128      	str	r0, [r5, #16]
 8010fd2:	b930      	cbnz	r0, 8010fe2 <_svfiprintf_r+0x32>
 8010fd4:	230c      	movs	r3, #12
 8010fd6:	603b      	str	r3, [r7, #0]
 8010fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fdc:	b01d      	add	sp, #116	@ 0x74
 8010fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe2:	2340      	movs	r3, #64	@ 0x40
 8010fe4:	616b      	str	r3, [r5, #20]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fea:	2320      	movs	r3, #32
 8010fec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ff4:	2330      	movs	r3, #48	@ 0x30
 8010ff6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011194 <_svfiprintf_r+0x1e4>
 8010ffa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ffe:	f04f 0901 	mov.w	r9, #1
 8011002:	4623      	mov	r3, r4
 8011004:	469a      	mov	sl, r3
 8011006:	f813 2b01 	ldrb.w	r2, [r3], #1
 801100a:	b10a      	cbz	r2, 8011010 <_svfiprintf_r+0x60>
 801100c:	2a25      	cmp	r2, #37	@ 0x25
 801100e:	d1f9      	bne.n	8011004 <_svfiprintf_r+0x54>
 8011010:	ebba 0b04 	subs.w	fp, sl, r4
 8011014:	d00b      	beq.n	801102e <_svfiprintf_r+0x7e>
 8011016:	465b      	mov	r3, fp
 8011018:	4622      	mov	r2, r4
 801101a:	4629      	mov	r1, r5
 801101c:	4638      	mov	r0, r7
 801101e:	f7ff ff6b 	bl	8010ef8 <__ssputs_r>
 8011022:	3001      	adds	r0, #1
 8011024:	f000 80a7 	beq.w	8011176 <_svfiprintf_r+0x1c6>
 8011028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801102a:	445a      	add	r2, fp
 801102c:	9209      	str	r2, [sp, #36]	@ 0x24
 801102e:	f89a 3000 	ldrb.w	r3, [sl]
 8011032:	2b00      	cmp	r3, #0
 8011034:	f000 809f 	beq.w	8011176 <_svfiprintf_r+0x1c6>
 8011038:	2300      	movs	r3, #0
 801103a:	f04f 32ff 	mov.w	r2, #4294967295
 801103e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011042:	f10a 0a01 	add.w	sl, sl, #1
 8011046:	9304      	str	r3, [sp, #16]
 8011048:	9307      	str	r3, [sp, #28]
 801104a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801104e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011050:	4654      	mov	r4, sl
 8011052:	2205      	movs	r2, #5
 8011054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011058:	484e      	ldr	r0, [pc, #312]	@ (8011194 <_svfiprintf_r+0x1e4>)
 801105a:	f7ef f959 	bl	8000310 <memchr>
 801105e:	9a04      	ldr	r2, [sp, #16]
 8011060:	b9d8      	cbnz	r0, 801109a <_svfiprintf_r+0xea>
 8011062:	06d0      	lsls	r0, r2, #27
 8011064:	bf44      	itt	mi
 8011066:	2320      	movmi	r3, #32
 8011068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801106c:	0711      	lsls	r1, r2, #28
 801106e:	bf44      	itt	mi
 8011070:	232b      	movmi	r3, #43	@ 0x2b
 8011072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011076:	f89a 3000 	ldrb.w	r3, [sl]
 801107a:	2b2a      	cmp	r3, #42	@ 0x2a
 801107c:	d015      	beq.n	80110aa <_svfiprintf_r+0xfa>
 801107e:	9a07      	ldr	r2, [sp, #28]
 8011080:	4654      	mov	r4, sl
 8011082:	2000      	movs	r0, #0
 8011084:	f04f 0c0a 	mov.w	ip, #10
 8011088:	4621      	mov	r1, r4
 801108a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801108e:	3b30      	subs	r3, #48	@ 0x30
 8011090:	2b09      	cmp	r3, #9
 8011092:	d94b      	bls.n	801112c <_svfiprintf_r+0x17c>
 8011094:	b1b0      	cbz	r0, 80110c4 <_svfiprintf_r+0x114>
 8011096:	9207      	str	r2, [sp, #28]
 8011098:	e014      	b.n	80110c4 <_svfiprintf_r+0x114>
 801109a:	eba0 0308 	sub.w	r3, r0, r8
 801109e:	fa09 f303 	lsl.w	r3, r9, r3
 80110a2:	4313      	orrs	r3, r2
 80110a4:	9304      	str	r3, [sp, #16]
 80110a6:	46a2      	mov	sl, r4
 80110a8:	e7d2      	b.n	8011050 <_svfiprintf_r+0xa0>
 80110aa:	9b03      	ldr	r3, [sp, #12]
 80110ac:	1d19      	adds	r1, r3, #4
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	9103      	str	r1, [sp, #12]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	bfbb      	ittet	lt
 80110b6:	425b      	neglt	r3, r3
 80110b8:	f042 0202 	orrlt.w	r2, r2, #2
 80110bc:	9307      	strge	r3, [sp, #28]
 80110be:	9307      	strlt	r3, [sp, #28]
 80110c0:	bfb8      	it	lt
 80110c2:	9204      	strlt	r2, [sp, #16]
 80110c4:	7823      	ldrb	r3, [r4, #0]
 80110c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80110c8:	d10a      	bne.n	80110e0 <_svfiprintf_r+0x130>
 80110ca:	7863      	ldrb	r3, [r4, #1]
 80110cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80110ce:	d132      	bne.n	8011136 <_svfiprintf_r+0x186>
 80110d0:	9b03      	ldr	r3, [sp, #12]
 80110d2:	1d1a      	adds	r2, r3, #4
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	9203      	str	r2, [sp, #12]
 80110d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110dc:	3402      	adds	r4, #2
 80110de:	9305      	str	r3, [sp, #20]
 80110e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80111a4 <_svfiprintf_r+0x1f4>
 80110e4:	7821      	ldrb	r1, [r4, #0]
 80110e6:	2203      	movs	r2, #3
 80110e8:	4650      	mov	r0, sl
 80110ea:	f7ef f911 	bl	8000310 <memchr>
 80110ee:	b138      	cbz	r0, 8011100 <_svfiprintf_r+0x150>
 80110f0:	9b04      	ldr	r3, [sp, #16]
 80110f2:	eba0 000a 	sub.w	r0, r0, sl
 80110f6:	2240      	movs	r2, #64	@ 0x40
 80110f8:	4082      	lsls	r2, r0
 80110fa:	4313      	orrs	r3, r2
 80110fc:	3401      	adds	r4, #1
 80110fe:	9304      	str	r3, [sp, #16]
 8011100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011104:	4824      	ldr	r0, [pc, #144]	@ (8011198 <_svfiprintf_r+0x1e8>)
 8011106:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801110a:	2206      	movs	r2, #6
 801110c:	f7ef f900 	bl	8000310 <memchr>
 8011110:	2800      	cmp	r0, #0
 8011112:	d036      	beq.n	8011182 <_svfiprintf_r+0x1d2>
 8011114:	4b21      	ldr	r3, [pc, #132]	@ (801119c <_svfiprintf_r+0x1ec>)
 8011116:	bb1b      	cbnz	r3, 8011160 <_svfiprintf_r+0x1b0>
 8011118:	9b03      	ldr	r3, [sp, #12]
 801111a:	3307      	adds	r3, #7
 801111c:	f023 0307 	bic.w	r3, r3, #7
 8011120:	3308      	adds	r3, #8
 8011122:	9303      	str	r3, [sp, #12]
 8011124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011126:	4433      	add	r3, r6
 8011128:	9309      	str	r3, [sp, #36]	@ 0x24
 801112a:	e76a      	b.n	8011002 <_svfiprintf_r+0x52>
 801112c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011130:	460c      	mov	r4, r1
 8011132:	2001      	movs	r0, #1
 8011134:	e7a8      	b.n	8011088 <_svfiprintf_r+0xd8>
 8011136:	2300      	movs	r3, #0
 8011138:	3401      	adds	r4, #1
 801113a:	9305      	str	r3, [sp, #20]
 801113c:	4619      	mov	r1, r3
 801113e:	f04f 0c0a 	mov.w	ip, #10
 8011142:	4620      	mov	r0, r4
 8011144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011148:	3a30      	subs	r2, #48	@ 0x30
 801114a:	2a09      	cmp	r2, #9
 801114c:	d903      	bls.n	8011156 <_svfiprintf_r+0x1a6>
 801114e:	2b00      	cmp	r3, #0
 8011150:	d0c6      	beq.n	80110e0 <_svfiprintf_r+0x130>
 8011152:	9105      	str	r1, [sp, #20]
 8011154:	e7c4      	b.n	80110e0 <_svfiprintf_r+0x130>
 8011156:	fb0c 2101 	mla	r1, ip, r1, r2
 801115a:	4604      	mov	r4, r0
 801115c:	2301      	movs	r3, #1
 801115e:	e7f0      	b.n	8011142 <_svfiprintf_r+0x192>
 8011160:	ab03      	add	r3, sp, #12
 8011162:	9300      	str	r3, [sp, #0]
 8011164:	462a      	mov	r2, r5
 8011166:	4b0e      	ldr	r3, [pc, #56]	@ (80111a0 <_svfiprintf_r+0x1f0>)
 8011168:	a904      	add	r1, sp, #16
 801116a:	4638      	mov	r0, r7
 801116c:	f7fc fc90 	bl	800da90 <_printf_float>
 8011170:	1c42      	adds	r2, r0, #1
 8011172:	4606      	mov	r6, r0
 8011174:	d1d6      	bne.n	8011124 <_svfiprintf_r+0x174>
 8011176:	89ab      	ldrh	r3, [r5, #12]
 8011178:	065b      	lsls	r3, r3, #25
 801117a:	f53f af2d 	bmi.w	8010fd8 <_svfiprintf_r+0x28>
 801117e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011180:	e72c      	b.n	8010fdc <_svfiprintf_r+0x2c>
 8011182:	ab03      	add	r3, sp, #12
 8011184:	9300      	str	r3, [sp, #0]
 8011186:	462a      	mov	r2, r5
 8011188:	4b05      	ldr	r3, [pc, #20]	@ (80111a0 <_svfiprintf_r+0x1f0>)
 801118a:	a904      	add	r1, sp, #16
 801118c:	4638      	mov	r0, r7
 801118e:	f7fc ff07 	bl	800dfa0 <_printf_i>
 8011192:	e7ed      	b.n	8011170 <_svfiprintf_r+0x1c0>
 8011194:	08012641 	.word	0x08012641
 8011198:	0801264b 	.word	0x0801264b
 801119c:	0800da91 	.word	0x0800da91
 80111a0:	08010ef9 	.word	0x08010ef9
 80111a4:	08012647 	.word	0x08012647

080111a8 <__sfputc_r>:
 80111a8:	6893      	ldr	r3, [r2, #8]
 80111aa:	3b01      	subs	r3, #1
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	b410      	push	{r4}
 80111b0:	6093      	str	r3, [r2, #8]
 80111b2:	da08      	bge.n	80111c6 <__sfputc_r+0x1e>
 80111b4:	6994      	ldr	r4, [r2, #24]
 80111b6:	42a3      	cmp	r3, r4
 80111b8:	db01      	blt.n	80111be <__sfputc_r+0x16>
 80111ba:	290a      	cmp	r1, #10
 80111bc:	d103      	bne.n	80111c6 <__sfputc_r+0x1e>
 80111be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111c2:	f7fd bbae 	b.w	800e922 <__swbuf_r>
 80111c6:	6813      	ldr	r3, [r2, #0]
 80111c8:	1c58      	adds	r0, r3, #1
 80111ca:	6010      	str	r0, [r2, #0]
 80111cc:	7019      	strb	r1, [r3, #0]
 80111ce:	4608      	mov	r0, r1
 80111d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111d4:	4770      	bx	lr

080111d6 <__sfputs_r>:
 80111d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111d8:	4606      	mov	r6, r0
 80111da:	460f      	mov	r7, r1
 80111dc:	4614      	mov	r4, r2
 80111de:	18d5      	adds	r5, r2, r3
 80111e0:	42ac      	cmp	r4, r5
 80111e2:	d101      	bne.n	80111e8 <__sfputs_r+0x12>
 80111e4:	2000      	movs	r0, #0
 80111e6:	e007      	b.n	80111f8 <__sfputs_r+0x22>
 80111e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ec:	463a      	mov	r2, r7
 80111ee:	4630      	mov	r0, r6
 80111f0:	f7ff ffda 	bl	80111a8 <__sfputc_r>
 80111f4:	1c43      	adds	r3, r0, #1
 80111f6:	d1f3      	bne.n	80111e0 <__sfputs_r+0xa>
 80111f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111fc <_vfiprintf_r>:
 80111fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011200:	460d      	mov	r5, r1
 8011202:	b09d      	sub	sp, #116	@ 0x74
 8011204:	4614      	mov	r4, r2
 8011206:	4698      	mov	r8, r3
 8011208:	4606      	mov	r6, r0
 801120a:	b118      	cbz	r0, 8011214 <_vfiprintf_r+0x18>
 801120c:	6a03      	ldr	r3, [r0, #32]
 801120e:	b90b      	cbnz	r3, 8011214 <_vfiprintf_r+0x18>
 8011210:	f7fd fa7e 	bl	800e710 <__sinit>
 8011214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011216:	07d9      	lsls	r1, r3, #31
 8011218:	d405      	bmi.n	8011226 <_vfiprintf_r+0x2a>
 801121a:	89ab      	ldrh	r3, [r5, #12]
 801121c:	059a      	lsls	r2, r3, #22
 801121e:	d402      	bmi.n	8011226 <_vfiprintf_r+0x2a>
 8011220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011222:	f7fd fc90 	bl	800eb46 <__retarget_lock_acquire_recursive>
 8011226:	89ab      	ldrh	r3, [r5, #12]
 8011228:	071b      	lsls	r3, r3, #28
 801122a:	d501      	bpl.n	8011230 <_vfiprintf_r+0x34>
 801122c:	692b      	ldr	r3, [r5, #16]
 801122e:	b99b      	cbnz	r3, 8011258 <_vfiprintf_r+0x5c>
 8011230:	4629      	mov	r1, r5
 8011232:	4630      	mov	r0, r6
 8011234:	f7fd fbb4 	bl	800e9a0 <__swsetup_r>
 8011238:	b170      	cbz	r0, 8011258 <_vfiprintf_r+0x5c>
 801123a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801123c:	07dc      	lsls	r4, r3, #31
 801123e:	d504      	bpl.n	801124a <_vfiprintf_r+0x4e>
 8011240:	f04f 30ff 	mov.w	r0, #4294967295
 8011244:	b01d      	add	sp, #116	@ 0x74
 8011246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124a:	89ab      	ldrh	r3, [r5, #12]
 801124c:	0598      	lsls	r0, r3, #22
 801124e:	d4f7      	bmi.n	8011240 <_vfiprintf_r+0x44>
 8011250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011252:	f7fd fc79 	bl	800eb48 <__retarget_lock_release_recursive>
 8011256:	e7f3      	b.n	8011240 <_vfiprintf_r+0x44>
 8011258:	2300      	movs	r3, #0
 801125a:	9309      	str	r3, [sp, #36]	@ 0x24
 801125c:	2320      	movs	r3, #32
 801125e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011262:	f8cd 800c 	str.w	r8, [sp, #12]
 8011266:	2330      	movs	r3, #48	@ 0x30
 8011268:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011418 <_vfiprintf_r+0x21c>
 801126c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011270:	f04f 0901 	mov.w	r9, #1
 8011274:	4623      	mov	r3, r4
 8011276:	469a      	mov	sl, r3
 8011278:	f813 2b01 	ldrb.w	r2, [r3], #1
 801127c:	b10a      	cbz	r2, 8011282 <_vfiprintf_r+0x86>
 801127e:	2a25      	cmp	r2, #37	@ 0x25
 8011280:	d1f9      	bne.n	8011276 <_vfiprintf_r+0x7a>
 8011282:	ebba 0b04 	subs.w	fp, sl, r4
 8011286:	d00b      	beq.n	80112a0 <_vfiprintf_r+0xa4>
 8011288:	465b      	mov	r3, fp
 801128a:	4622      	mov	r2, r4
 801128c:	4629      	mov	r1, r5
 801128e:	4630      	mov	r0, r6
 8011290:	f7ff ffa1 	bl	80111d6 <__sfputs_r>
 8011294:	3001      	adds	r0, #1
 8011296:	f000 80a7 	beq.w	80113e8 <_vfiprintf_r+0x1ec>
 801129a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801129c:	445a      	add	r2, fp
 801129e:	9209      	str	r2, [sp, #36]	@ 0x24
 80112a0:	f89a 3000 	ldrb.w	r3, [sl]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	f000 809f 	beq.w	80113e8 <_vfiprintf_r+0x1ec>
 80112aa:	2300      	movs	r3, #0
 80112ac:	f04f 32ff 	mov.w	r2, #4294967295
 80112b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112b4:	f10a 0a01 	add.w	sl, sl, #1
 80112b8:	9304      	str	r3, [sp, #16]
 80112ba:	9307      	str	r3, [sp, #28]
 80112bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80112c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80112c2:	4654      	mov	r4, sl
 80112c4:	2205      	movs	r2, #5
 80112c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ca:	4853      	ldr	r0, [pc, #332]	@ (8011418 <_vfiprintf_r+0x21c>)
 80112cc:	f7ef f820 	bl	8000310 <memchr>
 80112d0:	9a04      	ldr	r2, [sp, #16]
 80112d2:	b9d8      	cbnz	r0, 801130c <_vfiprintf_r+0x110>
 80112d4:	06d1      	lsls	r1, r2, #27
 80112d6:	bf44      	itt	mi
 80112d8:	2320      	movmi	r3, #32
 80112da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112de:	0713      	lsls	r3, r2, #28
 80112e0:	bf44      	itt	mi
 80112e2:	232b      	movmi	r3, #43	@ 0x2b
 80112e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112e8:	f89a 3000 	ldrb.w	r3, [sl]
 80112ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80112ee:	d015      	beq.n	801131c <_vfiprintf_r+0x120>
 80112f0:	9a07      	ldr	r2, [sp, #28]
 80112f2:	4654      	mov	r4, sl
 80112f4:	2000      	movs	r0, #0
 80112f6:	f04f 0c0a 	mov.w	ip, #10
 80112fa:	4621      	mov	r1, r4
 80112fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011300:	3b30      	subs	r3, #48	@ 0x30
 8011302:	2b09      	cmp	r3, #9
 8011304:	d94b      	bls.n	801139e <_vfiprintf_r+0x1a2>
 8011306:	b1b0      	cbz	r0, 8011336 <_vfiprintf_r+0x13a>
 8011308:	9207      	str	r2, [sp, #28]
 801130a:	e014      	b.n	8011336 <_vfiprintf_r+0x13a>
 801130c:	eba0 0308 	sub.w	r3, r0, r8
 8011310:	fa09 f303 	lsl.w	r3, r9, r3
 8011314:	4313      	orrs	r3, r2
 8011316:	9304      	str	r3, [sp, #16]
 8011318:	46a2      	mov	sl, r4
 801131a:	e7d2      	b.n	80112c2 <_vfiprintf_r+0xc6>
 801131c:	9b03      	ldr	r3, [sp, #12]
 801131e:	1d19      	adds	r1, r3, #4
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	9103      	str	r1, [sp, #12]
 8011324:	2b00      	cmp	r3, #0
 8011326:	bfbb      	ittet	lt
 8011328:	425b      	neglt	r3, r3
 801132a:	f042 0202 	orrlt.w	r2, r2, #2
 801132e:	9307      	strge	r3, [sp, #28]
 8011330:	9307      	strlt	r3, [sp, #28]
 8011332:	bfb8      	it	lt
 8011334:	9204      	strlt	r2, [sp, #16]
 8011336:	7823      	ldrb	r3, [r4, #0]
 8011338:	2b2e      	cmp	r3, #46	@ 0x2e
 801133a:	d10a      	bne.n	8011352 <_vfiprintf_r+0x156>
 801133c:	7863      	ldrb	r3, [r4, #1]
 801133e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011340:	d132      	bne.n	80113a8 <_vfiprintf_r+0x1ac>
 8011342:	9b03      	ldr	r3, [sp, #12]
 8011344:	1d1a      	adds	r2, r3, #4
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	9203      	str	r2, [sp, #12]
 801134a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801134e:	3402      	adds	r4, #2
 8011350:	9305      	str	r3, [sp, #20]
 8011352:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011428 <_vfiprintf_r+0x22c>
 8011356:	7821      	ldrb	r1, [r4, #0]
 8011358:	2203      	movs	r2, #3
 801135a:	4650      	mov	r0, sl
 801135c:	f7ee ffd8 	bl	8000310 <memchr>
 8011360:	b138      	cbz	r0, 8011372 <_vfiprintf_r+0x176>
 8011362:	9b04      	ldr	r3, [sp, #16]
 8011364:	eba0 000a 	sub.w	r0, r0, sl
 8011368:	2240      	movs	r2, #64	@ 0x40
 801136a:	4082      	lsls	r2, r0
 801136c:	4313      	orrs	r3, r2
 801136e:	3401      	adds	r4, #1
 8011370:	9304      	str	r3, [sp, #16]
 8011372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011376:	4829      	ldr	r0, [pc, #164]	@ (801141c <_vfiprintf_r+0x220>)
 8011378:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801137c:	2206      	movs	r2, #6
 801137e:	f7ee ffc7 	bl	8000310 <memchr>
 8011382:	2800      	cmp	r0, #0
 8011384:	d03f      	beq.n	8011406 <_vfiprintf_r+0x20a>
 8011386:	4b26      	ldr	r3, [pc, #152]	@ (8011420 <_vfiprintf_r+0x224>)
 8011388:	bb1b      	cbnz	r3, 80113d2 <_vfiprintf_r+0x1d6>
 801138a:	9b03      	ldr	r3, [sp, #12]
 801138c:	3307      	adds	r3, #7
 801138e:	f023 0307 	bic.w	r3, r3, #7
 8011392:	3308      	adds	r3, #8
 8011394:	9303      	str	r3, [sp, #12]
 8011396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011398:	443b      	add	r3, r7
 801139a:	9309      	str	r3, [sp, #36]	@ 0x24
 801139c:	e76a      	b.n	8011274 <_vfiprintf_r+0x78>
 801139e:	fb0c 3202 	mla	r2, ip, r2, r3
 80113a2:	460c      	mov	r4, r1
 80113a4:	2001      	movs	r0, #1
 80113a6:	e7a8      	b.n	80112fa <_vfiprintf_r+0xfe>
 80113a8:	2300      	movs	r3, #0
 80113aa:	3401      	adds	r4, #1
 80113ac:	9305      	str	r3, [sp, #20]
 80113ae:	4619      	mov	r1, r3
 80113b0:	f04f 0c0a 	mov.w	ip, #10
 80113b4:	4620      	mov	r0, r4
 80113b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113ba:	3a30      	subs	r2, #48	@ 0x30
 80113bc:	2a09      	cmp	r2, #9
 80113be:	d903      	bls.n	80113c8 <_vfiprintf_r+0x1cc>
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d0c6      	beq.n	8011352 <_vfiprintf_r+0x156>
 80113c4:	9105      	str	r1, [sp, #20]
 80113c6:	e7c4      	b.n	8011352 <_vfiprintf_r+0x156>
 80113c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80113cc:	4604      	mov	r4, r0
 80113ce:	2301      	movs	r3, #1
 80113d0:	e7f0      	b.n	80113b4 <_vfiprintf_r+0x1b8>
 80113d2:	ab03      	add	r3, sp, #12
 80113d4:	9300      	str	r3, [sp, #0]
 80113d6:	462a      	mov	r2, r5
 80113d8:	4b12      	ldr	r3, [pc, #72]	@ (8011424 <_vfiprintf_r+0x228>)
 80113da:	a904      	add	r1, sp, #16
 80113dc:	4630      	mov	r0, r6
 80113de:	f7fc fb57 	bl	800da90 <_printf_float>
 80113e2:	4607      	mov	r7, r0
 80113e4:	1c78      	adds	r0, r7, #1
 80113e6:	d1d6      	bne.n	8011396 <_vfiprintf_r+0x19a>
 80113e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113ea:	07d9      	lsls	r1, r3, #31
 80113ec:	d405      	bmi.n	80113fa <_vfiprintf_r+0x1fe>
 80113ee:	89ab      	ldrh	r3, [r5, #12]
 80113f0:	059a      	lsls	r2, r3, #22
 80113f2:	d402      	bmi.n	80113fa <_vfiprintf_r+0x1fe>
 80113f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113f6:	f7fd fba7 	bl	800eb48 <__retarget_lock_release_recursive>
 80113fa:	89ab      	ldrh	r3, [r5, #12]
 80113fc:	065b      	lsls	r3, r3, #25
 80113fe:	f53f af1f 	bmi.w	8011240 <_vfiprintf_r+0x44>
 8011402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011404:	e71e      	b.n	8011244 <_vfiprintf_r+0x48>
 8011406:	ab03      	add	r3, sp, #12
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	462a      	mov	r2, r5
 801140c:	4b05      	ldr	r3, [pc, #20]	@ (8011424 <_vfiprintf_r+0x228>)
 801140e:	a904      	add	r1, sp, #16
 8011410:	4630      	mov	r0, r6
 8011412:	f7fc fdc5 	bl	800dfa0 <_printf_i>
 8011416:	e7e4      	b.n	80113e2 <_vfiprintf_r+0x1e6>
 8011418:	08012641 	.word	0x08012641
 801141c:	0801264b 	.word	0x0801264b
 8011420:	0800da91 	.word	0x0800da91
 8011424:	080111d7 	.word	0x080111d7
 8011428:	08012647 	.word	0x08012647

0801142c <__sflush_r>:
 801142c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011434:	0716      	lsls	r6, r2, #28
 8011436:	4605      	mov	r5, r0
 8011438:	460c      	mov	r4, r1
 801143a:	d454      	bmi.n	80114e6 <__sflush_r+0xba>
 801143c:	684b      	ldr	r3, [r1, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	dc02      	bgt.n	8011448 <__sflush_r+0x1c>
 8011442:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011444:	2b00      	cmp	r3, #0
 8011446:	dd48      	ble.n	80114da <__sflush_r+0xae>
 8011448:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801144a:	2e00      	cmp	r6, #0
 801144c:	d045      	beq.n	80114da <__sflush_r+0xae>
 801144e:	2300      	movs	r3, #0
 8011450:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011454:	682f      	ldr	r7, [r5, #0]
 8011456:	6a21      	ldr	r1, [r4, #32]
 8011458:	602b      	str	r3, [r5, #0]
 801145a:	d030      	beq.n	80114be <__sflush_r+0x92>
 801145c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801145e:	89a3      	ldrh	r3, [r4, #12]
 8011460:	0759      	lsls	r1, r3, #29
 8011462:	d505      	bpl.n	8011470 <__sflush_r+0x44>
 8011464:	6863      	ldr	r3, [r4, #4]
 8011466:	1ad2      	subs	r2, r2, r3
 8011468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801146a:	b10b      	cbz	r3, 8011470 <__sflush_r+0x44>
 801146c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801146e:	1ad2      	subs	r2, r2, r3
 8011470:	2300      	movs	r3, #0
 8011472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011474:	6a21      	ldr	r1, [r4, #32]
 8011476:	4628      	mov	r0, r5
 8011478:	47b0      	blx	r6
 801147a:	1c43      	adds	r3, r0, #1
 801147c:	89a3      	ldrh	r3, [r4, #12]
 801147e:	d106      	bne.n	801148e <__sflush_r+0x62>
 8011480:	6829      	ldr	r1, [r5, #0]
 8011482:	291d      	cmp	r1, #29
 8011484:	d82b      	bhi.n	80114de <__sflush_r+0xb2>
 8011486:	4a2a      	ldr	r2, [pc, #168]	@ (8011530 <__sflush_r+0x104>)
 8011488:	410a      	asrs	r2, r1
 801148a:	07d6      	lsls	r6, r2, #31
 801148c:	d427      	bmi.n	80114de <__sflush_r+0xb2>
 801148e:	2200      	movs	r2, #0
 8011490:	6062      	str	r2, [r4, #4]
 8011492:	04d9      	lsls	r1, r3, #19
 8011494:	6922      	ldr	r2, [r4, #16]
 8011496:	6022      	str	r2, [r4, #0]
 8011498:	d504      	bpl.n	80114a4 <__sflush_r+0x78>
 801149a:	1c42      	adds	r2, r0, #1
 801149c:	d101      	bne.n	80114a2 <__sflush_r+0x76>
 801149e:	682b      	ldr	r3, [r5, #0]
 80114a0:	b903      	cbnz	r3, 80114a4 <__sflush_r+0x78>
 80114a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80114a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80114a6:	602f      	str	r7, [r5, #0]
 80114a8:	b1b9      	cbz	r1, 80114da <__sflush_r+0xae>
 80114aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80114ae:	4299      	cmp	r1, r3
 80114b0:	d002      	beq.n	80114b8 <__sflush_r+0x8c>
 80114b2:	4628      	mov	r0, r5
 80114b4:	f7fe f93e 	bl	800f734 <_free_r>
 80114b8:	2300      	movs	r3, #0
 80114ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80114bc:	e00d      	b.n	80114da <__sflush_r+0xae>
 80114be:	2301      	movs	r3, #1
 80114c0:	4628      	mov	r0, r5
 80114c2:	47b0      	blx	r6
 80114c4:	4602      	mov	r2, r0
 80114c6:	1c50      	adds	r0, r2, #1
 80114c8:	d1c9      	bne.n	801145e <__sflush_r+0x32>
 80114ca:	682b      	ldr	r3, [r5, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d0c6      	beq.n	801145e <__sflush_r+0x32>
 80114d0:	2b1d      	cmp	r3, #29
 80114d2:	d001      	beq.n	80114d8 <__sflush_r+0xac>
 80114d4:	2b16      	cmp	r3, #22
 80114d6:	d11e      	bne.n	8011516 <__sflush_r+0xea>
 80114d8:	602f      	str	r7, [r5, #0]
 80114da:	2000      	movs	r0, #0
 80114dc:	e022      	b.n	8011524 <__sflush_r+0xf8>
 80114de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80114e2:	b21b      	sxth	r3, r3
 80114e4:	e01b      	b.n	801151e <__sflush_r+0xf2>
 80114e6:	690f      	ldr	r7, [r1, #16]
 80114e8:	2f00      	cmp	r7, #0
 80114ea:	d0f6      	beq.n	80114da <__sflush_r+0xae>
 80114ec:	0793      	lsls	r3, r2, #30
 80114ee:	680e      	ldr	r6, [r1, #0]
 80114f0:	bf08      	it	eq
 80114f2:	694b      	ldreq	r3, [r1, #20]
 80114f4:	600f      	str	r7, [r1, #0]
 80114f6:	bf18      	it	ne
 80114f8:	2300      	movne	r3, #0
 80114fa:	eba6 0807 	sub.w	r8, r6, r7
 80114fe:	608b      	str	r3, [r1, #8]
 8011500:	f1b8 0f00 	cmp.w	r8, #0
 8011504:	dde9      	ble.n	80114da <__sflush_r+0xae>
 8011506:	6a21      	ldr	r1, [r4, #32]
 8011508:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801150a:	4643      	mov	r3, r8
 801150c:	463a      	mov	r2, r7
 801150e:	4628      	mov	r0, r5
 8011510:	47b0      	blx	r6
 8011512:	2800      	cmp	r0, #0
 8011514:	dc08      	bgt.n	8011528 <__sflush_r+0xfc>
 8011516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801151a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801151e:	81a3      	strh	r3, [r4, #12]
 8011520:	f04f 30ff 	mov.w	r0, #4294967295
 8011524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011528:	4407      	add	r7, r0
 801152a:	eba8 0800 	sub.w	r8, r8, r0
 801152e:	e7e7      	b.n	8011500 <__sflush_r+0xd4>
 8011530:	dfbffffe 	.word	0xdfbffffe

08011534 <_fflush_r>:
 8011534:	b538      	push	{r3, r4, r5, lr}
 8011536:	690b      	ldr	r3, [r1, #16]
 8011538:	4605      	mov	r5, r0
 801153a:	460c      	mov	r4, r1
 801153c:	b913      	cbnz	r3, 8011544 <_fflush_r+0x10>
 801153e:	2500      	movs	r5, #0
 8011540:	4628      	mov	r0, r5
 8011542:	bd38      	pop	{r3, r4, r5, pc}
 8011544:	b118      	cbz	r0, 801154e <_fflush_r+0x1a>
 8011546:	6a03      	ldr	r3, [r0, #32]
 8011548:	b90b      	cbnz	r3, 801154e <_fflush_r+0x1a>
 801154a:	f7fd f8e1 	bl	800e710 <__sinit>
 801154e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d0f3      	beq.n	801153e <_fflush_r+0xa>
 8011556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011558:	07d0      	lsls	r0, r2, #31
 801155a:	d404      	bmi.n	8011566 <_fflush_r+0x32>
 801155c:	0599      	lsls	r1, r3, #22
 801155e:	d402      	bmi.n	8011566 <_fflush_r+0x32>
 8011560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011562:	f7fd faf0 	bl	800eb46 <__retarget_lock_acquire_recursive>
 8011566:	4628      	mov	r0, r5
 8011568:	4621      	mov	r1, r4
 801156a:	f7ff ff5f 	bl	801142c <__sflush_r>
 801156e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011570:	07da      	lsls	r2, r3, #31
 8011572:	4605      	mov	r5, r0
 8011574:	d4e4      	bmi.n	8011540 <_fflush_r+0xc>
 8011576:	89a3      	ldrh	r3, [r4, #12]
 8011578:	059b      	lsls	r3, r3, #22
 801157a:	d4e1      	bmi.n	8011540 <_fflush_r+0xc>
 801157c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801157e:	f7fd fae3 	bl	800eb48 <__retarget_lock_release_recursive>
 8011582:	e7dd      	b.n	8011540 <_fflush_r+0xc>

08011584 <__swhatbuf_r>:
 8011584:	b570      	push	{r4, r5, r6, lr}
 8011586:	460c      	mov	r4, r1
 8011588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801158c:	2900      	cmp	r1, #0
 801158e:	b096      	sub	sp, #88	@ 0x58
 8011590:	4615      	mov	r5, r2
 8011592:	461e      	mov	r6, r3
 8011594:	da0d      	bge.n	80115b2 <__swhatbuf_r+0x2e>
 8011596:	89a3      	ldrh	r3, [r4, #12]
 8011598:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801159c:	f04f 0100 	mov.w	r1, #0
 80115a0:	bf14      	ite	ne
 80115a2:	2340      	movne	r3, #64	@ 0x40
 80115a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80115a8:	2000      	movs	r0, #0
 80115aa:	6031      	str	r1, [r6, #0]
 80115ac:	602b      	str	r3, [r5, #0]
 80115ae:	b016      	add	sp, #88	@ 0x58
 80115b0:	bd70      	pop	{r4, r5, r6, pc}
 80115b2:	466a      	mov	r2, sp
 80115b4:	f000 f874 	bl	80116a0 <_fstat_r>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	dbec      	blt.n	8011596 <__swhatbuf_r+0x12>
 80115bc:	9901      	ldr	r1, [sp, #4]
 80115be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80115c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80115c6:	4259      	negs	r1, r3
 80115c8:	4159      	adcs	r1, r3
 80115ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80115ce:	e7eb      	b.n	80115a8 <__swhatbuf_r+0x24>

080115d0 <__smakebuf_r>:
 80115d0:	898b      	ldrh	r3, [r1, #12]
 80115d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115d4:	079d      	lsls	r5, r3, #30
 80115d6:	4606      	mov	r6, r0
 80115d8:	460c      	mov	r4, r1
 80115da:	d507      	bpl.n	80115ec <__smakebuf_r+0x1c>
 80115dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	6123      	str	r3, [r4, #16]
 80115e4:	2301      	movs	r3, #1
 80115e6:	6163      	str	r3, [r4, #20]
 80115e8:	b003      	add	sp, #12
 80115ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115ec:	ab01      	add	r3, sp, #4
 80115ee:	466a      	mov	r2, sp
 80115f0:	f7ff ffc8 	bl	8011584 <__swhatbuf_r>
 80115f4:	9f00      	ldr	r7, [sp, #0]
 80115f6:	4605      	mov	r5, r0
 80115f8:	4639      	mov	r1, r7
 80115fa:	4630      	mov	r0, r6
 80115fc:	f7fe f90e 	bl	800f81c <_malloc_r>
 8011600:	b948      	cbnz	r0, 8011616 <__smakebuf_r+0x46>
 8011602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011606:	059a      	lsls	r2, r3, #22
 8011608:	d4ee      	bmi.n	80115e8 <__smakebuf_r+0x18>
 801160a:	f023 0303 	bic.w	r3, r3, #3
 801160e:	f043 0302 	orr.w	r3, r3, #2
 8011612:	81a3      	strh	r3, [r4, #12]
 8011614:	e7e2      	b.n	80115dc <__smakebuf_r+0xc>
 8011616:	89a3      	ldrh	r3, [r4, #12]
 8011618:	6020      	str	r0, [r4, #0]
 801161a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801161e:	81a3      	strh	r3, [r4, #12]
 8011620:	9b01      	ldr	r3, [sp, #4]
 8011622:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011626:	b15b      	cbz	r3, 8011640 <__smakebuf_r+0x70>
 8011628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801162c:	4630      	mov	r0, r6
 801162e:	f000 f849 	bl	80116c4 <_isatty_r>
 8011632:	b128      	cbz	r0, 8011640 <__smakebuf_r+0x70>
 8011634:	89a3      	ldrh	r3, [r4, #12]
 8011636:	f023 0303 	bic.w	r3, r3, #3
 801163a:	f043 0301 	orr.w	r3, r3, #1
 801163e:	81a3      	strh	r3, [r4, #12]
 8011640:	89a3      	ldrh	r3, [r4, #12]
 8011642:	431d      	orrs	r5, r3
 8011644:	81a5      	strh	r5, [r4, #12]
 8011646:	e7cf      	b.n	80115e8 <__smakebuf_r+0x18>

08011648 <memmove>:
 8011648:	4288      	cmp	r0, r1
 801164a:	b510      	push	{r4, lr}
 801164c:	eb01 0402 	add.w	r4, r1, r2
 8011650:	d902      	bls.n	8011658 <memmove+0x10>
 8011652:	4284      	cmp	r4, r0
 8011654:	4623      	mov	r3, r4
 8011656:	d807      	bhi.n	8011668 <memmove+0x20>
 8011658:	1e43      	subs	r3, r0, #1
 801165a:	42a1      	cmp	r1, r4
 801165c:	d008      	beq.n	8011670 <memmove+0x28>
 801165e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011666:	e7f8      	b.n	801165a <memmove+0x12>
 8011668:	4402      	add	r2, r0
 801166a:	4601      	mov	r1, r0
 801166c:	428a      	cmp	r2, r1
 801166e:	d100      	bne.n	8011672 <memmove+0x2a>
 8011670:	bd10      	pop	{r4, pc}
 8011672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801167a:	e7f7      	b.n	801166c <memmove+0x24>

0801167c <strncmp>:
 801167c:	b510      	push	{r4, lr}
 801167e:	b16a      	cbz	r2, 801169c <strncmp+0x20>
 8011680:	3901      	subs	r1, #1
 8011682:	1884      	adds	r4, r0, r2
 8011684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011688:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801168c:	429a      	cmp	r2, r3
 801168e:	d103      	bne.n	8011698 <strncmp+0x1c>
 8011690:	42a0      	cmp	r0, r4
 8011692:	d001      	beq.n	8011698 <strncmp+0x1c>
 8011694:	2a00      	cmp	r2, #0
 8011696:	d1f5      	bne.n	8011684 <strncmp+0x8>
 8011698:	1ad0      	subs	r0, r2, r3
 801169a:	bd10      	pop	{r4, pc}
 801169c:	4610      	mov	r0, r2
 801169e:	e7fc      	b.n	801169a <strncmp+0x1e>

080116a0 <_fstat_r>:
 80116a0:	b538      	push	{r3, r4, r5, lr}
 80116a2:	4d07      	ldr	r5, [pc, #28]	@ (80116c0 <_fstat_r+0x20>)
 80116a4:	2300      	movs	r3, #0
 80116a6:	4604      	mov	r4, r0
 80116a8:	4608      	mov	r0, r1
 80116aa:	4611      	mov	r1, r2
 80116ac:	602b      	str	r3, [r5, #0]
 80116ae:	f7f2 f963 	bl	8003978 <_fstat>
 80116b2:	1c43      	adds	r3, r0, #1
 80116b4:	d102      	bne.n	80116bc <_fstat_r+0x1c>
 80116b6:	682b      	ldr	r3, [r5, #0]
 80116b8:	b103      	cbz	r3, 80116bc <_fstat_r+0x1c>
 80116ba:	6023      	str	r3, [r4, #0]
 80116bc:	bd38      	pop	{r3, r4, r5, pc}
 80116be:	bf00      	nop
 80116c0:	24000d24 	.word	0x24000d24

080116c4 <_isatty_r>:
 80116c4:	b538      	push	{r3, r4, r5, lr}
 80116c6:	4d06      	ldr	r5, [pc, #24]	@ (80116e0 <_isatty_r+0x1c>)
 80116c8:	2300      	movs	r3, #0
 80116ca:	4604      	mov	r4, r0
 80116cc:	4608      	mov	r0, r1
 80116ce:	602b      	str	r3, [r5, #0]
 80116d0:	f7f2 f962 	bl	8003998 <_isatty>
 80116d4:	1c43      	adds	r3, r0, #1
 80116d6:	d102      	bne.n	80116de <_isatty_r+0x1a>
 80116d8:	682b      	ldr	r3, [r5, #0]
 80116da:	b103      	cbz	r3, 80116de <_isatty_r+0x1a>
 80116dc:	6023      	str	r3, [r4, #0]
 80116de:	bd38      	pop	{r3, r4, r5, pc}
 80116e0:	24000d24 	.word	0x24000d24

080116e4 <_sbrk_r>:
 80116e4:	b538      	push	{r3, r4, r5, lr}
 80116e6:	4d06      	ldr	r5, [pc, #24]	@ (8011700 <_sbrk_r+0x1c>)
 80116e8:	2300      	movs	r3, #0
 80116ea:	4604      	mov	r4, r0
 80116ec:	4608      	mov	r0, r1
 80116ee:	602b      	str	r3, [r5, #0]
 80116f0:	f7f2 f96a 	bl	80039c8 <_sbrk>
 80116f4:	1c43      	adds	r3, r0, #1
 80116f6:	d102      	bne.n	80116fe <_sbrk_r+0x1a>
 80116f8:	682b      	ldr	r3, [r5, #0]
 80116fa:	b103      	cbz	r3, 80116fe <_sbrk_r+0x1a>
 80116fc:	6023      	str	r3, [r4, #0]
 80116fe:	bd38      	pop	{r3, r4, r5, pc}
 8011700:	24000d24 	.word	0x24000d24
 8011704:	00000000 	.word	0x00000000

08011708 <nan>:
 8011708:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011710 <nan+0x8>
 801170c:	4770      	bx	lr
 801170e:	bf00      	nop
 8011710:	00000000 	.word	0x00000000
 8011714:	7ff80000 	.word	0x7ff80000

08011718 <__assert_func>:
 8011718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801171a:	4614      	mov	r4, r2
 801171c:	461a      	mov	r2, r3
 801171e:	4b09      	ldr	r3, [pc, #36]	@ (8011744 <__assert_func+0x2c>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	4605      	mov	r5, r0
 8011724:	68d8      	ldr	r0, [r3, #12]
 8011726:	b954      	cbnz	r4, 801173e <__assert_func+0x26>
 8011728:	4b07      	ldr	r3, [pc, #28]	@ (8011748 <__assert_func+0x30>)
 801172a:	461c      	mov	r4, r3
 801172c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011730:	9100      	str	r1, [sp, #0]
 8011732:	462b      	mov	r3, r5
 8011734:	4905      	ldr	r1, [pc, #20]	@ (801174c <__assert_func+0x34>)
 8011736:	f000 fba7 	bl	8011e88 <fiprintf>
 801173a:	f000 fbb7 	bl	8011eac <abort>
 801173e:	4b04      	ldr	r3, [pc, #16]	@ (8011750 <__assert_func+0x38>)
 8011740:	e7f4      	b.n	801172c <__assert_func+0x14>
 8011742:	bf00      	nop
 8011744:	24000028 	.word	0x24000028
 8011748:	08012695 	.word	0x08012695
 801174c:	08012667 	.word	0x08012667
 8011750:	0801265a 	.word	0x0801265a

08011754 <_calloc_r>:
 8011754:	b570      	push	{r4, r5, r6, lr}
 8011756:	fba1 5402 	umull	r5, r4, r1, r2
 801175a:	b93c      	cbnz	r4, 801176c <_calloc_r+0x18>
 801175c:	4629      	mov	r1, r5
 801175e:	f7fe f85d 	bl	800f81c <_malloc_r>
 8011762:	4606      	mov	r6, r0
 8011764:	b928      	cbnz	r0, 8011772 <_calloc_r+0x1e>
 8011766:	2600      	movs	r6, #0
 8011768:	4630      	mov	r0, r6
 801176a:	bd70      	pop	{r4, r5, r6, pc}
 801176c:	220c      	movs	r2, #12
 801176e:	6002      	str	r2, [r0, #0]
 8011770:	e7f9      	b.n	8011766 <_calloc_r+0x12>
 8011772:	462a      	mov	r2, r5
 8011774:	4621      	mov	r1, r4
 8011776:	f7fd f969 	bl	800ea4c <memset>
 801177a:	e7f5      	b.n	8011768 <_calloc_r+0x14>

0801177c <rshift>:
 801177c:	6903      	ldr	r3, [r0, #16]
 801177e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011782:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011786:	ea4f 1261 	mov.w	r2, r1, asr #5
 801178a:	f100 0414 	add.w	r4, r0, #20
 801178e:	dd45      	ble.n	801181c <rshift+0xa0>
 8011790:	f011 011f 	ands.w	r1, r1, #31
 8011794:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011798:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801179c:	d10c      	bne.n	80117b8 <rshift+0x3c>
 801179e:	f100 0710 	add.w	r7, r0, #16
 80117a2:	4629      	mov	r1, r5
 80117a4:	42b1      	cmp	r1, r6
 80117a6:	d334      	bcc.n	8011812 <rshift+0x96>
 80117a8:	1a9b      	subs	r3, r3, r2
 80117aa:	009b      	lsls	r3, r3, #2
 80117ac:	1eea      	subs	r2, r5, #3
 80117ae:	4296      	cmp	r6, r2
 80117b0:	bf38      	it	cc
 80117b2:	2300      	movcc	r3, #0
 80117b4:	4423      	add	r3, r4
 80117b6:	e015      	b.n	80117e4 <rshift+0x68>
 80117b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80117bc:	f1c1 0820 	rsb	r8, r1, #32
 80117c0:	40cf      	lsrs	r7, r1
 80117c2:	f105 0e04 	add.w	lr, r5, #4
 80117c6:	46a1      	mov	r9, r4
 80117c8:	4576      	cmp	r6, lr
 80117ca:	46f4      	mov	ip, lr
 80117cc:	d815      	bhi.n	80117fa <rshift+0x7e>
 80117ce:	1a9a      	subs	r2, r3, r2
 80117d0:	0092      	lsls	r2, r2, #2
 80117d2:	3a04      	subs	r2, #4
 80117d4:	3501      	adds	r5, #1
 80117d6:	42ae      	cmp	r6, r5
 80117d8:	bf38      	it	cc
 80117da:	2200      	movcc	r2, #0
 80117dc:	18a3      	adds	r3, r4, r2
 80117de:	50a7      	str	r7, [r4, r2]
 80117e0:	b107      	cbz	r7, 80117e4 <rshift+0x68>
 80117e2:	3304      	adds	r3, #4
 80117e4:	1b1a      	subs	r2, r3, r4
 80117e6:	42a3      	cmp	r3, r4
 80117e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80117ec:	bf08      	it	eq
 80117ee:	2300      	moveq	r3, #0
 80117f0:	6102      	str	r2, [r0, #16]
 80117f2:	bf08      	it	eq
 80117f4:	6143      	streq	r3, [r0, #20]
 80117f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117fa:	f8dc c000 	ldr.w	ip, [ip]
 80117fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8011802:	ea4c 0707 	orr.w	r7, ip, r7
 8011806:	f849 7b04 	str.w	r7, [r9], #4
 801180a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801180e:	40cf      	lsrs	r7, r1
 8011810:	e7da      	b.n	80117c8 <rshift+0x4c>
 8011812:	f851 cb04 	ldr.w	ip, [r1], #4
 8011816:	f847 cf04 	str.w	ip, [r7, #4]!
 801181a:	e7c3      	b.n	80117a4 <rshift+0x28>
 801181c:	4623      	mov	r3, r4
 801181e:	e7e1      	b.n	80117e4 <rshift+0x68>

08011820 <__hexdig_fun>:
 8011820:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011824:	2b09      	cmp	r3, #9
 8011826:	d802      	bhi.n	801182e <__hexdig_fun+0xe>
 8011828:	3820      	subs	r0, #32
 801182a:	b2c0      	uxtb	r0, r0
 801182c:	4770      	bx	lr
 801182e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011832:	2b05      	cmp	r3, #5
 8011834:	d801      	bhi.n	801183a <__hexdig_fun+0x1a>
 8011836:	3847      	subs	r0, #71	@ 0x47
 8011838:	e7f7      	b.n	801182a <__hexdig_fun+0xa>
 801183a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801183e:	2b05      	cmp	r3, #5
 8011840:	d801      	bhi.n	8011846 <__hexdig_fun+0x26>
 8011842:	3827      	subs	r0, #39	@ 0x27
 8011844:	e7f1      	b.n	801182a <__hexdig_fun+0xa>
 8011846:	2000      	movs	r0, #0
 8011848:	4770      	bx	lr
	...

0801184c <__gethex>:
 801184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011850:	b085      	sub	sp, #20
 8011852:	468a      	mov	sl, r1
 8011854:	9302      	str	r3, [sp, #8]
 8011856:	680b      	ldr	r3, [r1, #0]
 8011858:	9001      	str	r0, [sp, #4]
 801185a:	4690      	mov	r8, r2
 801185c:	1c9c      	adds	r4, r3, #2
 801185e:	46a1      	mov	r9, r4
 8011860:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011864:	2830      	cmp	r0, #48	@ 0x30
 8011866:	d0fa      	beq.n	801185e <__gethex+0x12>
 8011868:	eba9 0303 	sub.w	r3, r9, r3
 801186c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011870:	f7ff ffd6 	bl	8011820 <__hexdig_fun>
 8011874:	4605      	mov	r5, r0
 8011876:	2800      	cmp	r0, #0
 8011878:	d168      	bne.n	801194c <__gethex+0x100>
 801187a:	49a0      	ldr	r1, [pc, #640]	@ (8011afc <__gethex+0x2b0>)
 801187c:	2201      	movs	r2, #1
 801187e:	4648      	mov	r0, r9
 8011880:	f7ff fefc 	bl	801167c <strncmp>
 8011884:	4607      	mov	r7, r0
 8011886:	2800      	cmp	r0, #0
 8011888:	d167      	bne.n	801195a <__gethex+0x10e>
 801188a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801188e:	4626      	mov	r6, r4
 8011890:	f7ff ffc6 	bl	8011820 <__hexdig_fun>
 8011894:	2800      	cmp	r0, #0
 8011896:	d062      	beq.n	801195e <__gethex+0x112>
 8011898:	4623      	mov	r3, r4
 801189a:	7818      	ldrb	r0, [r3, #0]
 801189c:	2830      	cmp	r0, #48	@ 0x30
 801189e:	4699      	mov	r9, r3
 80118a0:	f103 0301 	add.w	r3, r3, #1
 80118a4:	d0f9      	beq.n	801189a <__gethex+0x4e>
 80118a6:	f7ff ffbb 	bl	8011820 <__hexdig_fun>
 80118aa:	fab0 f580 	clz	r5, r0
 80118ae:	096d      	lsrs	r5, r5, #5
 80118b0:	f04f 0b01 	mov.w	fp, #1
 80118b4:	464a      	mov	r2, r9
 80118b6:	4616      	mov	r6, r2
 80118b8:	3201      	adds	r2, #1
 80118ba:	7830      	ldrb	r0, [r6, #0]
 80118bc:	f7ff ffb0 	bl	8011820 <__hexdig_fun>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d1f8      	bne.n	80118b6 <__gethex+0x6a>
 80118c4:	498d      	ldr	r1, [pc, #564]	@ (8011afc <__gethex+0x2b0>)
 80118c6:	2201      	movs	r2, #1
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7ff fed7 	bl	801167c <strncmp>
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d13f      	bne.n	8011952 <__gethex+0x106>
 80118d2:	b944      	cbnz	r4, 80118e6 <__gethex+0x9a>
 80118d4:	1c74      	adds	r4, r6, #1
 80118d6:	4622      	mov	r2, r4
 80118d8:	4616      	mov	r6, r2
 80118da:	3201      	adds	r2, #1
 80118dc:	7830      	ldrb	r0, [r6, #0]
 80118de:	f7ff ff9f 	bl	8011820 <__hexdig_fun>
 80118e2:	2800      	cmp	r0, #0
 80118e4:	d1f8      	bne.n	80118d8 <__gethex+0x8c>
 80118e6:	1ba4      	subs	r4, r4, r6
 80118e8:	00a7      	lsls	r7, r4, #2
 80118ea:	7833      	ldrb	r3, [r6, #0]
 80118ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80118f0:	2b50      	cmp	r3, #80	@ 0x50
 80118f2:	d13e      	bne.n	8011972 <__gethex+0x126>
 80118f4:	7873      	ldrb	r3, [r6, #1]
 80118f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80118f8:	d033      	beq.n	8011962 <__gethex+0x116>
 80118fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80118fc:	d034      	beq.n	8011968 <__gethex+0x11c>
 80118fe:	1c71      	adds	r1, r6, #1
 8011900:	2400      	movs	r4, #0
 8011902:	7808      	ldrb	r0, [r1, #0]
 8011904:	f7ff ff8c 	bl	8011820 <__hexdig_fun>
 8011908:	1e43      	subs	r3, r0, #1
 801190a:	b2db      	uxtb	r3, r3
 801190c:	2b18      	cmp	r3, #24
 801190e:	d830      	bhi.n	8011972 <__gethex+0x126>
 8011910:	f1a0 0210 	sub.w	r2, r0, #16
 8011914:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011918:	f7ff ff82 	bl	8011820 <__hexdig_fun>
 801191c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011920:	fa5f fc8c 	uxtb.w	ip, ip
 8011924:	f1bc 0f18 	cmp.w	ip, #24
 8011928:	f04f 030a 	mov.w	r3, #10
 801192c:	d91e      	bls.n	801196c <__gethex+0x120>
 801192e:	b104      	cbz	r4, 8011932 <__gethex+0xe6>
 8011930:	4252      	negs	r2, r2
 8011932:	4417      	add	r7, r2
 8011934:	f8ca 1000 	str.w	r1, [sl]
 8011938:	b1ed      	cbz	r5, 8011976 <__gethex+0x12a>
 801193a:	f1bb 0f00 	cmp.w	fp, #0
 801193e:	bf0c      	ite	eq
 8011940:	2506      	moveq	r5, #6
 8011942:	2500      	movne	r5, #0
 8011944:	4628      	mov	r0, r5
 8011946:	b005      	add	sp, #20
 8011948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801194c:	2500      	movs	r5, #0
 801194e:	462c      	mov	r4, r5
 8011950:	e7b0      	b.n	80118b4 <__gethex+0x68>
 8011952:	2c00      	cmp	r4, #0
 8011954:	d1c7      	bne.n	80118e6 <__gethex+0x9a>
 8011956:	4627      	mov	r7, r4
 8011958:	e7c7      	b.n	80118ea <__gethex+0x9e>
 801195a:	464e      	mov	r6, r9
 801195c:	462f      	mov	r7, r5
 801195e:	2501      	movs	r5, #1
 8011960:	e7c3      	b.n	80118ea <__gethex+0x9e>
 8011962:	2400      	movs	r4, #0
 8011964:	1cb1      	adds	r1, r6, #2
 8011966:	e7cc      	b.n	8011902 <__gethex+0xb6>
 8011968:	2401      	movs	r4, #1
 801196a:	e7fb      	b.n	8011964 <__gethex+0x118>
 801196c:	fb03 0002 	mla	r0, r3, r2, r0
 8011970:	e7ce      	b.n	8011910 <__gethex+0xc4>
 8011972:	4631      	mov	r1, r6
 8011974:	e7de      	b.n	8011934 <__gethex+0xe8>
 8011976:	eba6 0309 	sub.w	r3, r6, r9
 801197a:	3b01      	subs	r3, #1
 801197c:	4629      	mov	r1, r5
 801197e:	2b07      	cmp	r3, #7
 8011980:	dc0a      	bgt.n	8011998 <__gethex+0x14c>
 8011982:	9801      	ldr	r0, [sp, #4]
 8011984:	f7fd ffd6 	bl	800f934 <_Balloc>
 8011988:	4604      	mov	r4, r0
 801198a:	b940      	cbnz	r0, 801199e <__gethex+0x152>
 801198c:	4b5c      	ldr	r3, [pc, #368]	@ (8011b00 <__gethex+0x2b4>)
 801198e:	4602      	mov	r2, r0
 8011990:	21e4      	movs	r1, #228	@ 0xe4
 8011992:	485c      	ldr	r0, [pc, #368]	@ (8011b04 <__gethex+0x2b8>)
 8011994:	f7ff fec0 	bl	8011718 <__assert_func>
 8011998:	3101      	adds	r1, #1
 801199a:	105b      	asrs	r3, r3, #1
 801199c:	e7ef      	b.n	801197e <__gethex+0x132>
 801199e:	f100 0a14 	add.w	sl, r0, #20
 80119a2:	2300      	movs	r3, #0
 80119a4:	4655      	mov	r5, sl
 80119a6:	469b      	mov	fp, r3
 80119a8:	45b1      	cmp	r9, r6
 80119aa:	d337      	bcc.n	8011a1c <__gethex+0x1d0>
 80119ac:	f845 bb04 	str.w	fp, [r5], #4
 80119b0:	eba5 050a 	sub.w	r5, r5, sl
 80119b4:	10ad      	asrs	r5, r5, #2
 80119b6:	6125      	str	r5, [r4, #16]
 80119b8:	4658      	mov	r0, fp
 80119ba:	f7fe f8ad 	bl	800fb18 <__hi0bits>
 80119be:	016d      	lsls	r5, r5, #5
 80119c0:	f8d8 6000 	ldr.w	r6, [r8]
 80119c4:	1a2d      	subs	r5, r5, r0
 80119c6:	42b5      	cmp	r5, r6
 80119c8:	dd54      	ble.n	8011a74 <__gethex+0x228>
 80119ca:	1bad      	subs	r5, r5, r6
 80119cc:	4629      	mov	r1, r5
 80119ce:	4620      	mov	r0, r4
 80119d0:	f7fe fc3e 	bl	8010250 <__any_on>
 80119d4:	4681      	mov	r9, r0
 80119d6:	b178      	cbz	r0, 80119f8 <__gethex+0x1ac>
 80119d8:	1e6b      	subs	r3, r5, #1
 80119da:	1159      	asrs	r1, r3, #5
 80119dc:	f003 021f 	and.w	r2, r3, #31
 80119e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80119e4:	f04f 0901 	mov.w	r9, #1
 80119e8:	fa09 f202 	lsl.w	r2, r9, r2
 80119ec:	420a      	tst	r2, r1
 80119ee:	d003      	beq.n	80119f8 <__gethex+0x1ac>
 80119f0:	454b      	cmp	r3, r9
 80119f2:	dc36      	bgt.n	8011a62 <__gethex+0x216>
 80119f4:	f04f 0902 	mov.w	r9, #2
 80119f8:	4629      	mov	r1, r5
 80119fa:	4620      	mov	r0, r4
 80119fc:	f7ff febe 	bl	801177c <rshift>
 8011a00:	442f      	add	r7, r5
 8011a02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a06:	42bb      	cmp	r3, r7
 8011a08:	da42      	bge.n	8011a90 <__gethex+0x244>
 8011a0a:	9801      	ldr	r0, [sp, #4]
 8011a0c:	4621      	mov	r1, r4
 8011a0e:	f7fd ffd1 	bl	800f9b4 <_Bfree>
 8011a12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a14:	2300      	movs	r3, #0
 8011a16:	6013      	str	r3, [r2, #0]
 8011a18:	25a3      	movs	r5, #163	@ 0xa3
 8011a1a:	e793      	b.n	8011944 <__gethex+0xf8>
 8011a1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011a20:	2a2e      	cmp	r2, #46	@ 0x2e
 8011a22:	d012      	beq.n	8011a4a <__gethex+0x1fe>
 8011a24:	2b20      	cmp	r3, #32
 8011a26:	d104      	bne.n	8011a32 <__gethex+0x1e6>
 8011a28:	f845 bb04 	str.w	fp, [r5], #4
 8011a2c:	f04f 0b00 	mov.w	fp, #0
 8011a30:	465b      	mov	r3, fp
 8011a32:	7830      	ldrb	r0, [r6, #0]
 8011a34:	9303      	str	r3, [sp, #12]
 8011a36:	f7ff fef3 	bl	8011820 <__hexdig_fun>
 8011a3a:	9b03      	ldr	r3, [sp, #12]
 8011a3c:	f000 000f 	and.w	r0, r0, #15
 8011a40:	4098      	lsls	r0, r3
 8011a42:	ea4b 0b00 	orr.w	fp, fp, r0
 8011a46:	3304      	adds	r3, #4
 8011a48:	e7ae      	b.n	80119a8 <__gethex+0x15c>
 8011a4a:	45b1      	cmp	r9, r6
 8011a4c:	d8ea      	bhi.n	8011a24 <__gethex+0x1d8>
 8011a4e:	492b      	ldr	r1, [pc, #172]	@ (8011afc <__gethex+0x2b0>)
 8011a50:	9303      	str	r3, [sp, #12]
 8011a52:	2201      	movs	r2, #1
 8011a54:	4630      	mov	r0, r6
 8011a56:	f7ff fe11 	bl	801167c <strncmp>
 8011a5a:	9b03      	ldr	r3, [sp, #12]
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d1e1      	bne.n	8011a24 <__gethex+0x1d8>
 8011a60:	e7a2      	b.n	80119a8 <__gethex+0x15c>
 8011a62:	1ea9      	subs	r1, r5, #2
 8011a64:	4620      	mov	r0, r4
 8011a66:	f7fe fbf3 	bl	8010250 <__any_on>
 8011a6a:	2800      	cmp	r0, #0
 8011a6c:	d0c2      	beq.n	80119f4 <__gethex+0x1a8>
 8011a6e:	f04f 0903 	mov.w	r9, #3
 8011a72:	e7c1      	b.n	80119f8 <__gethex+0x1ac>
 8011a74:	da09      	bge.n	8011a8a <__gethex+0x23e>
 8011a76:	1b75      	subs	r5, r6, r5
 8011a78:	4621      	mov	r1, r4
 8011a7a:	9801      	ldr	r0, [sp, #4]
 8011a7c:	462a      	mov	r2, r5
 8011a7e:	f7fe f9b1 	bl	800fde4 <__lshift>
 8011a82:	1b7f      	subs	r7, r7, r5
 8011a84:	4604      	mov	r4, r0
 8011a86:	f100 0a14 	add.w	sl, r0, #20
 8011a8a:	f04f 0900 	mov.w	r9, #0
 8011a8e:	e7b8      	b.n	8011a02 <__gethex+0x1b6>
 8011a90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011a94:	42bd      	cmp	r5, r7
 8011a96:	dd6f      	ble.n	8011b78 <__gethex+0x32c>
 8011a98:	1bed      	subs	r5, r5, r7
 8011a9a:	42ae      	cmp	r6, r5
 8011a9c:	dc34      	bgt.n	8011b08 <__gethex+0x2bc>
 8011a9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011aa2:	2b02      	cmp	r3, #2
 8011aa4:	d022      	beq.n	8011aec <__gethex+0x2a0>
 8011aa6:	2b03      	cmp	r3, #3
 8011aa8:	d024      	beq.n	8011af4 <__gethex+0x2a8>
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	d115      	bne.n	8011ada <__gethex+0x28e>
 8011aae:	42ae      	cmp	r6, r5
 8011ab0:	d113      	bne.n	8011ada <__gethex+0x28e>
 8011ab2:	2e01      	cmp	r6, #1
 8011ab4:	d10b      	bne.n	8011ace <__gethex+0x282>
 8011ab6:	9a02      	ldr	r2, [sp, #8]
 8011ab8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011abc:	6013      	str	r3, [r2, #0]
 8011abe:	2301      	movs	r3, #1
 8011ac0:	6123      	str	r3, [r4, #16]
 8011ac2:	f8ca 3000 	str.w	r3, [sl]
 8011ac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ac8:	2562      	movs	r5, #98	@ 0x62
 8011aca:	601c      	str	r4, [r3, #0]
 8011acc:	e73a      	b.n	8011944 <__gethex+0xf8>
 8011ace:	1e71      	subs	r1, r6, #1
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f7fe fbbd 	bl	8010250 <__any_on>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d1ed      	bne.n	8011ab6 <__gethex+0x26a>
 8011ada:	9801      	ldr	r0, [sp, #4]
 8011adc:	4621      	mov	r1, r4
 8011ade:	f7fd ff69 	bl	800f9b4 <_Bfree>
 8011ae2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	6013      	str	r3, [r2, #0]
 8011ae8:	2550      	movs	r5, #80	@ 0x50
 8011aea:	e72b      	b.n	8011944 <__gethex+0xf8>
 8011aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d1f3      	bne.n	8011ada <__gethex+0x28e>
 8011af2:	e7e0      	b.n	8011ab6 <__gethex+0x26a>
 8011af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d1dd      	bne.n	8011ab6 <__gethex+0x26a>
 8011afa:	e7ee      	b.n	8011ada <__gethex+0x28e>
 8011afc:	080124e8 	.word	0x080124e8
 8011b00:	0801237d 	.word	0x0801237d
 8011b04:	08012696 	.word	0x08012696
 8011b08:	1e6f      	subs	r7, r5, #1
 8011b0a:	f1b9 0f00 	cmp.w	r9, #0
 8011b0e:	d130      	bne.n	8011b72 <__gethex+0x326>
 8011b10:	b127      	cbz	r7, 8011b1c <__gethex+0x2d0>
 8011b12:	4639      	mov	r1, r7
 8011b14:	4620      	mov	r0, r4
 8011b16:	f7fe fb9b 	bl	8010250 <__any_on>
 8011b1a:	4681      	mov	r9, r0
 8011b1c:	117a      	asrs	r2, r7, #5
 8011b1e:	2301      	movs	r3, #1
 8011b20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011b24:	f007 071f 	and.w	r7, r7, #31
 8011b28:	40bb      	lsls	r3, r7
 8011b2a:	4213      	tst	r3, r2
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	4620      	mov	r0, r4
 8011b30:	bf18      	it	ne
 8011b32:	f049 0902 	orrne.w	r9, r9, #2
 8011b36:	f7ff fe21 	bl	801177c <rshift>
 8011b3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011b3e:	1b76      	subs	r6, r6, r5
 8011b40:	2502      	movs	r5, #2
 8011b42:	f1b9 0f00 	cmp.w	r9, #0
 8011b46:	d047      	beq.n	8011bd8 <__gethex+0x38c>
 8011b48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011b4c:	2b02      	cmp	r3, #2
 8011b4e:	d015      	beq.n	8011b7c <__gethex+0x330>
 8011b50:	2b03      	cmp	r3, #3
 8011b52:	d017      	beq.n	8011b84 <__gethex+0x338>
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d109      	bne.n	8011b6c <__gethex+0x320>
 8011b58:	f019 0f02 	tst.w	r9, #2
 8011b5c:	d006      	beq.n	8011b6c <__gethex+0x320>
 8011b5e:	f8da 3000 	ldr.w	r3, [sl]
 8011b62:	ea49 0903 	orr.w	r9, r9, r3
 8011b66:	f019 0f01 	tst.w	r9, #1
 8011b6a:	d10e      	bne.n	8011b8a <__gethex+0x33e>
 8011b6c:	f045 0510 	orr.w	r5, r5, #16
 8011b70:	e032      	b.n	8011bd8 <__gethex+0x38c>
 8011b72:	f04f 0901 	mov.w	r9, #1
 8011b76:	e7d1      	b.n	8011b1c <__gethex+0x2d0>
 8011b78:	2501      	movs	r5, #1
 8011b7a:	e7e2      	b.n	8011b42 <__gethex+0x2f6>
 8011b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b7e:	f1c3 0301 	rsb	r3, r3, #1
 8011b82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d0f0      	beq.n	8011b6c <__gethex+0x320>
 8011b8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011b8e:	f104 0314 	add.w	r3, r4, #20
 8011b92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011b96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011b9a:	f04f 0c00 	mov.w	ip, #0
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ba4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011ba8:	d01b      	beq.n	8011be2 <__gethex+0x396>
 8011baa:	3201      	adds	r2, #1
 8011bac:	6002      	str	r2, [r0, #0]
 8011bae:	2d02      	cmp	r5, #2
 8011bb0:	f104 0314 	add.w	r3, r4, #20
 8011bb4:	d13c      	bne.n	8011c30 <__gethex+0x3e4>
 8011bb6:	f8d8 2000 	ldr.w	r2, [r8]
 8011bba:	3a01      	subs	r2, #1
 8011bbc:	42b2      	cmp	r2, r6
 8011bbe:	d109      	bne.n	8011bd4 <__gethex+0x388>
 8011bc0:	1171      	asrs	r1, r6, #5
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011bc8:	f006 061f 	and.w	r6, r6, #31
 8011bcc:	fa02 f606 	lsl.w	r6, r2, r6
 8011bd0:	421e      	tst	r6, r3
 8011bd2:	d13a      	bne.n	8011c4a <__gethex+0x3fe>
 8011bd4:	f045 0520 	orr.w	r5, r5, #32
 8011bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bda:	601c      	str	r4, [r3, #0]
 8011bdc:	9b02      	ldr	r3, [sp, #8]
 8011bde:	601f      	str	r7, [r3, #0]
 8011be0:	e6b0      	b.n	8011944 <__gethex+0xf8>
 8011be2:	4299      	cmp	r1, r3
 8011be4:	f843 cc04 	str.w	ip, [r3, #-4]
 8011be8:	d8d9      	bhi.n	8011b9e <__gethex+0x352>
 8011bea:	68a3      	ldr	r3, [r4, #8]
 8011bec:	459b      	cmp	fp, r3
 8011bee:	db17      	blt.n	8011c20 <__gethex+0x3d4>
 8011bf0:	6861      	ldr	r1, [r4, #4]
 8011bf2:	9801      	ldr	r0, [sp, #4]
 8011bf4:	3101      	adds	r1, #1
 8011bf6:	f7fd fe9d 	bl	800f934 <_Balloc>
 8011bfa:	4681      	mov	r9, r0
 8011bfc:	b918      	cbnz	r0, 8011c06 <__gethex+0x3ba>
 8011bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8011c68 <__gethex+0x41c>)
 8011c00:	4602      	mov	r2, r0
 8011c02:	2184      	movs	r1, #132	@ 0x84
 8011c04:	e6c5      	b.n	8011992 <__gethex+0x146>
 8011c06:	6922      	ldr	r2, [r4, #16]
 8011c08:	3202      	adds	r2, #2
 8011c0a:	f104 010c 	add.w	r1, r4, #12
 8011c0e:	0092      	lsls	r2, r2, #2
 8011c10:	300c      	adds	r0, #12
 8011c12:	f7fc ff9a 	bl	800eb4a <memcpy>
 8011c16:	4621      	mov	r1, r4
 8011c18:	9801      	ldr	r0, [sp, #4]
 8011c1a:	f7fd fecb 	bl	800f9b4 <_Bfree>
 8011c1e:	464c      	mov	r4, r9
 8011c20:	6923      	ldr	r3, [r4, #16]
 8011c22:	1c5a      	adds	r2, r3, #1
 8011c24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011c28:	6122      	str	r2, [r4, #16]
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	615a      	str	r2, [r3, #20]
 8011c2e:	e7be      	b.n	8011bae <__gethex+0x362>
 8011c30:	6922      	ldr	r2, [r4, #16]
 8011c32:	455a      	cmp	r2, fp
 8011c34:	dd0b      	ble.n	8011c4e <__gethex+0x402>
 8011c36:	2101      	movs	r1, #1
 8011c38:	4620      	mov	r0, r4
 8011c3a:	f7ff fd9f 	bl	801177c <rshift>
 8011c3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011c42:	3701      	adds	r7, #1
 8011c44:	42bb      	cmp	r3, r7
 8011c46:	f6ff aee0 	blt.w	8011a0a <__gethex+0x1be>
 8011c4a:	2501      	movs	r5, #1
 8011c4c:	e7c2      	b.n	8011bd4 <__gethex+0x388>
 8011c4e:	f016 061f 	ands.w	r6, r6, #31
 8011c52:	d0fa      	beq.n	8011c4a <__gethex+0x3fe>
 8011c54:	4453      	add	r3, sl
 8011c56:	f1c6 0620 	rsb	r6, r6, #32
 8011c5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011c5e:	f7fd ff5b 	bl	800fb18 <__hi0bits>
 8011c62:	42b0      	cmp	r0, r6
 8011c64:	dbe7      	blt.n	8011c36 <__gethex+0x3ea>
 8011c66:	e7f0      	b.n	8011c4a <__gethex+0x3fe>
 8011c68:	0801237d 	.word	0x0801237d

08011c6c <L_shift>:
 8011c6c:	f1c2 0208 	rsb	r2, r2, #8
 8011c70:	0092      	lsls	r2, r2, #2
 8011c72:	b570      	push	{r4, r5, r6, lr}
 8011c74:	f1c2 0620 	rsb	r6, r2, #32
 8011c78:	6843      	ldr	r3, [r0, #4]
 8011c7a:	6804      	ldr	r4, [r0, #0]
 8011c7c:	fa03 f506 	lsl.w	r5, r3, r6
 8011c80:	432c      	orrs	r4, r5
 8011c82:	40d3      	lsrs	r3, r2
 8011c84:	6004      	str	r4, [r0, #0]
 8011c86:	f840 3f04 	str.w	r3, [r0, #4]!
 8011c8a:	4288      	cmp	r0, r1
 8011c8c:	d3f4      	bcc.n	8011c78 <L_shift+0xc>
 8011c8e:	bd70      	pop	{r4, r5, r6, pc}

08011c90 <__match>:
 8011c90:	b530      	push	{r4, r5, lr}
 8011c92:	6803      	ldr	r3, [r0, #0]
 8011c94:	3301      	adds	r3, #1
 8011c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c9a:	b914      	cbnz	r4, 8011ca2 <__match+0x12>
 8011c9c:	6003      	str	r3, [r0, #0]
 8011c9e:	2001      	movs	r0, #1
 8011ca0:	bd30      	pop	{r4, r5, pc}
 8011ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ca6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011caa:	2d19      	cmp	r5, #25
 8011cac:	bf98      	it	ls
 8011cae:	3220      	addls	r2, #32
 8011cb0:	42a2      	cmp	r2, r4
 8011cb2:	d0f0      	beq.n	8011c96 <__match+0x6>
 8011cb4:	2000      	movs	r0, #0
 8011cb6:	e7f3      	b.n	8011ca0 <__match+0x10>

08011cb8 <__hexnan>:
 8011cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cbc:	680b      	ldr	r3, [r1, #0]
 8011cbe:	6801      	ldr	r1, [r0, #0]
 8011cc0:	115e      	asrs	r6, r3, #5
 8011cc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011cc6:	f013 031f 	ands.w	r3, r3, #31
 8011cca:	b087      	sub	sp, #28
 8011ccc:	bf18      	it	ne
 8011cce:	3604      	addne	r6, #4
 8011cd0:	2500      	movs	r5, #0
 8011cd2:	1f37      	subs	r7, r6, #4
 8011cd4:	4682      	mov	sl, r0
 8011cd6:	4690      	mov	r8, r2
 8011cd8:	9301      	str	r3, [sp, #4]
 8011cda:	f846 5c04 	str.w	r5, [r6, #-4]
 8011cde:	46b9      	mov	r9, r7
 8011ce0:	463c      	mov	r4, r7
 8011ce2:	9502      	str	r5, [sp, #8]
 8011ce4:	46ab      	mov	fp, r5
 8011ce6:	784a      	ldrb	r2, [r1, #1]
 8011ce8:	1c4b      	adds	r3, r1, #1
 8011cea:	9303      	str	r3, [sp, #12]
 8011cec:	b342      	cbz	r2, 8011d40 <__hexnan+0x88>
 8011cee:	4610      	mov	r0, r2
 8011cf0:	9105      	str	r1, [sp, #20]
 8011cf2:	9204      	str	r2, [sp, #16]
 8011cf4:	f7ff fd94 	bl	8011820 <__hexdig_fun>
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	d151      	bne.n	8011da0 <__hexnan+0xe8>
 8011cfc:	9a04      	ldr	r2, [sp, #16]
 8011cfe:	9905      	ldr	r1, [sp, #20]
 8011d00:	2a20      	cmp	r2, #32
 8011d02:	d818      	bhi.n	8011d36 <__hexnan+0x7e>
 8011d04:	9b02      	ldr	r3, [sp, #8]
 8011d06:	459b      	cmp	fp, r3
 8011d08:	dd13      	ble.n	8011d32 <__hexnan+0x7a>
 8011d0a:	454c      	cmp	r4, r9
 8011d0c:	d206      	bcs.n	8011d1c <__hexnan+0x64>
 8011d0e:	2d07      	cmp	r5, #7
 8011d10:	dc04      	bgt.n	8011d1c <__hexnan+0x64>
 8011d12:	462a      	mov	r2, r5
 8011d14:	4649      	mov	r1, r9
 8011d16:	4620      	mov	r0, r4
 8011d18:	f7ff ffa8 	bl	8011c6c <L_shift>
 8011d1c:	4544      	cmp	r4, r8
 8011d1e:	d952      	bls.n	8011dc6 <__hexnan+0x10e>
 8011d20:	2300      	movs	r3, #0
 8011d22:	f1a4 0904 	sub.w	r9, r4, #4
 8011d26:	f844 3c04 	str.w	r3, [r4, #-4]
 8011d2a:	f8cd b008 	str.w	fp, [sp, #8]
 8011d2e:	464c      	mov	r4, r9
 8011d30:	461d      	mov	r5, r3
 8011d32:	9903      	ldr	r1, [sp, #12]
 8011d34:	e7d7      	b.n	8011ce6 <__hexnan+0x2e>
 8011d36:	2a29      	cmp	r2, #41	@ 0x29
 8011d38:	d157      	bne.n	8011dea <__hexnan+0x132>
 8011d3a:	3102      	adds	r1, #2
 8011d3c:	f8ca 1000 	str.w	r1, [sl]
 8011d40:	f1bb 0f00 	cmp.w	fp, #0
 8011d44:	d051      	beq.n	8011dea <__hexnan+0x132>
 8011d46:	454c      	cmp	r4, r9
 8011d48:	d206      	bcs.n	8011d58 <__hexnan+0xa0>
 8011d4a:	2d07      	cmp	r5, #7
 8011d4c:	dc04      	bgt.n	8011d58 <__hexnan+0xa0>
 8011d4e:	462a      	mov	r2, r5
 8011d50:	4649      	mov	r1, r9
 8011d52:	4620      	mov	r0, r4
 8011d54:	f7ff ff8a 	bl	8011c6c <L_shift>
 8011d58:	4544      	cmp	r4, r8
 8011d5a:	d936      	bls.n	8011dca <__hexnan+0x112>
 8011d5c:	f1a8 0204 	sub.w	r2, r8, #4
 8011d60:	4623      	mov	r3, r4
 8011d62:	f853 1b04 	ldr.w	r1, [r3], #4
 8011d66:	f842 1f04 	str.w	r1, [r2, #4]!
 8011d6a:	429f      	cmp	r7, r3
 8011d6c:	d2f9      	bcs.n	8011d62 <__hexnan+0xaa>
 8011d6e:	1b3b      	subs	r3, r7, r4
 8011d70:	f023 0303 	bic.w	r3, r3, #3
 8011d74:	3304      	adds	r3, #4
 8011d76:	3401      	adds	r4, #1
 8011d78:	3e03      	subs	r6, #3
 8011d7a:	42b4      	cmp	r4, r6
 8011d7c:	bf88      	it	hi
 8011d7e:	2304      	movhi	r3, #4
 8011d80:	4443      	add	r3, r8
 8011d82:	2200      	movs	r2, #0
 8011d84:	f843 2b04 	str.w	r2, [r3], #4
 8011d88:	429f      	cmp	r7, r3
 8011d8a:	d2fb      	bcs.n	8011d84 <__hexnan+0xcc>
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	b91b      	cbnz	r3, 8011d98 <__hexnan+0xe0>
 8011d90:	4547      	cmp	r7, r8
 8011d92:	d128      	bne.n	8011de6 <__hexnan+0x12e>
 8011d94:	2301      	movs	r3, #1
 8011d96:	603b      	str	r3, [r7, #0]
 8011d98:	2005      	movs	r0, #5
 8011d9a:	b007      	add	sp, #28
 8011d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da0:	3501      	adds	r5, #1
 8011da2:	2d08      	cmp	r5, #8
 8011da4:	f10b 0b01 	add.w	fp, fp, #1
 8011da8:	dd06      	ble.n	8011db8 <__hexnan+0x100>
 8011daa:	4544      	cmp	r4, r8
 8011dac:	d9c1      	bls.n	8011d32 <__hexnan+0x7a>
 8011dae:	2300      	movs	r3, #0
 8011db0:	f844 3c04 	str.w	r3, [r4, #-4]
 8011db4:	2501      	movs	r5, #1
 8011db6:	3c04      	subs	r4, #4
 8011db8:	6822      	ldr	r2, [r4, #0]
 8011dba:	f000 000f 	and.w	r0, r0, #15
 8011dbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011dc2:	6020      	str	r0, [r4, #0]
 8011dc4:	e7b5      	b.n	8011d32 <__hexnan+0x7a>
 8011dc6:	2508      	movs	r5, #8
 8011dc8:	e7b3      	b.n	8011d32 <__hexnan+0x7a>
 8011dca:	9b01      	ldr	r3, [sp, #4]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d0dd      	beq.n	8011d8c <__hexnan+0xd4>
 8011dd0:	f1c3 0320 	rsb	r3, r3, #32
 8011dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011dd8:	40da      	lsrs	r2, r3
 8011dda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011dde:	4013      	ands	r3, r2
 8011de0:	f846 3c04 	str.w	r3, [r6, #-4]
 8011de4:	e7d2      	b.n	8011d8c <__hexnan+0xd4>
 8011de6:	3f04      	subs	r7, #4
 8011de8:	e7d0      	b.n	8011d8c <__hexnan+0xd4>
 8011dea:	2004      	movs	r0, #4
 8011dec:	e7d5      	b.n	8011d9a <__hexnan+0xe2>

08011dee <__ascii_mbtowc>:
 8011dee:	b082      	sub	sp, #8
 8011df0:	b901      	cbnz	r1, 8011df4 <__ascii_mbtowc+0x6>
 8011df2:	a901      	add	r1, sp, #4
 8011df4:	b142      	cbz	r2, 8011e08 <__ascii_mbtowc+0x1a>
 8011df6:	b14b      	cbz	r3, 8011e0c <__ascii_mbtowc+0x1e>
 8011df8:	7813      	ldrb	r3, [r2, #0]
 8011dfa:	600b      	str	r3, [r1, #0]
 8011dfc:	7812      	ldrb	r2, [r2, #0]
 8011dfe:	1e10      	subs	r0, r2, #0
 8011e00:	bf18      	it	ne
 8011e02:	2001      	movne	r0, #1
 8011e04:	b002      	add	sp, #8
 8011e06:	4770      	bx	lr
 8011e08:	4610      	mov	r0, r2
 8011e0a:	e7fb      	b.n	8011e04 <__ascii_mbtowc+0x16>
 8011e0c:	f06f 0001 	mvn.w	r0, #1
 8011e10:	e7f8      	b.n	8011e04 <__ascii_mbtowc+0x16>

08011e12 <_realloc_r>:
 8011e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e16:	4680      	mov	r8, r0
 8011e18:	4615      	mov	r5, r2
 8011e1a:	460c      	mov	r4, r1
 8011e1c:	b921      	cbnz	r1, 8011e28 <_realloc_r+0x16>
 8011e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e22:	4611      	mov	r1, r2
 8011e24:	f7fd bcfa 	b.w	800f81c <_malloc_r>
 8011e28:	b92a      	cbnz	r2, 8011e36 <_realloc_r+0x24>
 8011e2a:	f7fd fc83 	bl	800f734 <_free_r>
 8011e2e:	2400      	movs	r4, #0
 8011e30:	4620      	mov	r0, r4
 8011e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e36:	f000 f840 	bl	8011eba <_malloc_usable_size_r>
 8011e3a:	4285      	cmp	r5, r0
 8011e3c:	4606      	mov	r6, r0
 8011e3e:	d802      	bhi.n	8011e46 <_realloc_r+0x34>
 8011e40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011e44:	d8f4      	bhi.n	8011e30 <_realloc_r+0x1e>
 8011e46:	4629      	mov	r1, r5
 8011e48:	4640      	mov	r0, r8
 8011e4a:	f7fd fce7 	bl	800f81c <_malloc_r>
 8011e4e:	4607      	mov	r7, r0
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d0ec      	beq.n	8011e2e <_realloc_r+0x1c>
 8011e54:	42b5      	cmp	r5, r6
 8011e56:	462a      	mov	r2, r5
 8011e58:	4621      	mov	r1, r4
 8011e5a:	bf28      	it	cs
 8011e5c:	4632      	movcs	r2, r6
 8011e5e:	f7fc fe74 	bl	800eb4a <memcpy>
 8011e62:	4621      	mov	r1, r4
 8011e64:	4640      	mov	r0, r8
 8011e66:	f7fd fc65 	bl	800f734 <_free_r>
 8011e6a:	463c      	mov	r4, r7
 8011e6c:	e7e0      	b.n	8011e30 <_realloc_r+0x1e>

08011e6e <__ascii_wctomb>:
 8011e6e:	4603      	mov	r3, r0
 8011e70:	4608      	mov	r0, r1
 8011e72:	b141      	cbz	r1, 8011e86 <__ascii_wctomb+0x18>
 8011e74:	2aff      	cmp	r2, #255	@ 0xff
 8011e76:	d904      	bls.n	8011e82 <__ascii_wctomb+0x14>
 8011e78:	228a      	movs	r2, #138	@ 0x8a
 8011e7a:	601a      	str	r2, [r3, #0]
 8011e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e80:	4770      	bx	lr
 8011e82:	700a      	strb	r2, [r1, #0]
 8011e84:	2001      	movs	r0, #1
 8011e86:	4770      	bx	lr

08011e88 <fiprintf>:
 8011e88:	b40e      	push	{r1, r2, r3}
 8011e8a:	b503      	push	{r0, r1, lr}
 8011e8c:	4601      	mov	r1, r0
 8011e8e:	ab03      	add	r3, sp, #12
 8011e90:	4805      	ldr	r0, [pc, #20]	@ (8011ea8 <fiprintf+0x20>)
 8011e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e96:	6800      	ldr	r0, [r0, #0]
 8011e98:	9301      	str	r3, [sp, #4]
 8011e9a:	f7ff f9af 	bl	80111fc <_vfiprintf_r>
 8011e9e:	b002      	add	sp, #8
 8011ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ea4:	b003      	add	sp, #12
 8011ea6:	4770      	bx	lr
 8011ea8:	24000028 	.word	0x24000028

08011eac <abort>:
 8011eac:	b508      	push	{r3, lr}
 8011eae:	2006      	movs	r0, #6
 8011eb0:	f000 f834 	bl	8011f1c <raise>
 8011eb4:	2001      	movs	r0, #1
 8011eb6:	f7f1 fd2b 	bl	8003910 <_exit>

08011eba <_malloc_usable_size_r>:
 8011eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ebe:	1f18      	subs	r0, r3, #4
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	bfbc      	itt	lt
 8011ec4:	580b      	ldrlt	r3, [r1, r0]
 8011ec6:	18c0      	addlt	r0, r0, r3
 8011ec8:	4770      	bx	lr

08011eca <_raise_r>:
 8011eca:	291f      	cmp	r1, #31
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	4605      	mov	r5, r0
 8011ed0:	460c      	mov	r4, r1
 8011ed2:	d904      	bls.n	8011ede <_raise_r+0x14>
 8011ed4:	2316      	movs	r3, #22
 8011ed6:	6003      	str	r3, [r0, #0]
 8011ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8011edc:	bd38      	pop	{r3, r4, r5, pc}
 8011ede:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011ee0:	b112      	cbz	r2, 8011ee8 <_raise_r+0x1e>
 8011ee2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ee6:	b94b      	cbnz	r3, 8011efc <_raise_r+0x32>
 8011ee8:	4628      	mov	r0, r5
 8011eea:	f000 f831 	bl	8011f50 <_getpid_r>
 8011eee:	4622      	mov	r2, r4
 8011ef0:	4601      	mov	r1, r0
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ef8:	f000 b818 	b.w	8011f2c <_kill_r>
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d00a      	beq.n	8011f16 <_raise_r+0x4c>
 8011f00:	1c59      	adds	r1, r3, #1
 8011f02:	d103      	bne.n	8011f0c <_raise_r+0x42>
 8011f04:	2316      	movs	r3, #22
 8011f06:	6003      	str	r3, [r0, #0]
 8011f08:	2001      	movs	r0, #1
 8011f0a:	e7e7      	b.n	8011edc <_raise_r+0x12>
 8011f0c:	2100      	movs	r1, #0
 8011f0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011f12:	4620      	mov	r0, r4
 8011f14:	4798      	blx	r3
 8011f16:	2000      	movs	r0, #0
 8011f18:	e7e0      	b.n	8011edc <_raise_r+0x12>
	...

08011f1c <raise>:
 8011f1c:	4b02      	ldr	r3, [pc, #8]	@ (8011f28 <raise+0xc>)
 8011f1e:	4601      	mov	r1, r0
 8011f20:	6818      	ldr	r0, [r3, #0]
 8011f22:	f7ff bfd2 	b.w	8011eca <_raise_r>
 8011f26:	bf00      	nop
 8011f28:	24000028 	.word	0x24000028

08011f2c <_kill_r>:
 8011f2c:	b538      	push	{r3, r4, r5, lr}
 8011f2e:	4d07      	ldr	r5, [pc, #28]	@ (8011f4c <_kill_r+0x20>)
 8011f30:	2300      	movs	r3, #0
 8011f32:	4604      	mov	r4, r0
 8011f34:	4608      	mov	r0, r1
 8011f36:	4611      	mov	r1, r2
 8011f38:	602b      	str	r3, [r5, #0]
 8011f3a:	f7f1 fcd9 	bl	80038f0 <_kill>
 8011f3e:	1c43      	adds	r3, r0, #1
 8011f40:	d102      	bne.n	8011f48 <_kill_r+0x1c>
 8011f42:	682b      	ldr	r3, [r5, #0]
 8011f44:	b103      	cbz	r3, 8011f48 <_kill_r+0x1c>
 8011f46:	6023      	str	r3, [r4, #0]
 8011f48:	bd38      	pop	{r3, r4, r5, pc}
 8011f4a:	bf00      	nop
 8011f4c:	24000d24 	.word	0x24000d24

08011f50 <_getpid_r>:
 8011f50:	f7f1 bcc6 	b.w	80038e0 <_getpid>

08011f54 <_init>:
 8011f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f56:	bf00      	nop
 8011f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f5a:	bc08      	pop	{r3}
 8011f5c:	469e      	mov	lr, r3
 8011f5e:	4770      	bx	lr

08011f60 <_fini>:
 8011f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f62:	bf00      	nop
 8011f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f66:	bc08      	pop	{r3}
 8011f68:	469e      	mov	lr, r3
 8011f6a:	4770      	bx	lr
