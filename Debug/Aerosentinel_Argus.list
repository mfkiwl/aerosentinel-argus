
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122d0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000948  080125a0  080125a0  000135a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012ee8  08012ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012ef0  08012ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012ef4  08012ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  08012ef8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c24  240001e0  080130d8  000141e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000e04  080130d8  00014e04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024266  00000000  00000000  0001420e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004578  00000000  00000000  00038474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ca0  00000000  00000000  0003c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000164a  00000000  00000000  0003e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000071e0  00000000  00000000  0003fcda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002973f  00000000  00000000  00046eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001759be  00000000  00000000  000705f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e5fb7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000909c  00000000  00000000  001e5ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  001ef098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012588 	.word	0x08012588

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	08012588 	.word	0x08012588

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000748:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <convertDegMinToDecDeg>:
GPS_t GPS;
GPGGA_Data gpgga_data;
GPRMC_Data gprmc_data;
//##################################################################################################################
double convertDegMinToDecDeg (float degMin)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 
  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8000aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac2:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8000b18 <convertDegMinToDecDeg+0x80>
 8000ac6:	eeb0 0b47 	vmov.f64	d0, d7
 8000aca:	f011 fc2d 	bl	8012328 <fmod>
 8000ace:	ed87 0b04 	vstr	d0, [r7, #16]
 
  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 8000ad2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ad6:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000b28 <convertDegMinToDecDeg+0x90>
 8000ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae6:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8000aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000af2:	ed97 5b04 	vldr	d5, [r7, #16]
 8000af6:	ed9f 4b0a 	vldr	d4, [pc, #40]	@ 8000b20 <convertDegMinToDecDeg+0x88>
 8000afa:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000afe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b02:	ed87 7b02 	vstr	d7, [r7, #8]
 
  return decDeg;
 8000b06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b0a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b0e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	40590000 	.word	0x40590000
 8000b20:	00000000 	.word	0x00000000
 8000b24:	404e0000 	.word	0x404e0000
 8000b28:	42c80000 	.word	0x42c80000

08000b2c <GPS_Init>:
//##################################################################################################################
int8_t GPS_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <GPS_Init+0x34>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
	HAL_StatusTypeDef status = HAL_UART_Receive_IT(&_GPS_UART,&GPS.rxTmp,1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4909      	ldr	r1, [pc, #36]	@ (8000b64 <GPS_Init+0x38>)
 8000b3e:	480a      	ldr	r0, [pc, #40]	@ (8000b68 <GPS_Init+0x3c>)
 8000b40:	f009 f8aa 	bl	8009c98 <HAL_UART_Receive_IT>
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]

	return (status == HAL_OK) ? 0 : 1;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf14      	ite	ne
 8000b4e:	2301      	movne	r3, #1
 8000b50:	2300      	moveq	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	b25b      	sxtb	r3, r3
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	24000200 	.word	0x24000200
 8000b64:	24000402 	.word	0x24000402
 8000b68:	240007d0 	.word	0x240007d0
 8000b6c:	00000000 	.word	0x00000000

08000b70 <parse_gpgga>:
//##################################################################################################################

int parse_gpgga(const char* nmea, GPGGA_Data* data) {
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	ed2d 8b02 	vpush	{d8}
 8000b76:	b091      	sub	sp, #68	@ 0x44
 8000b78:	af0a      	add	r7, sp, #40	@ 0x28
 8000b7a:	6178      	str	r0, [r7, #20]
 8000b7c:	6139      	str	r1, [r7, #16]
    if (strncmp(nmea, "$GNGGA", 6) != 0) {
 8000b7e:	2206      	movs	r2, #6
 8000b80:	494f      	ldr	r1, [pc, #316]	@ (8000cc0 <parse_gpgga+0x150>)
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f00e fb8e 	bl	800f2a4 <strncmp>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <parse_gpgga+0x22>
        return 0; // Not a GPGGA sentence
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e086      	b.n	8000ca0 <parse_gpgga+0x130>
    }

    // Parse the NMEA sentence
    sscanf(nmea,
           "$GNGGA,%10[^,],%lf,%c,%lf,%c,%d,%d,%lf,%lf,%c,%lf,%c",
           data->time,
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	60fb      	str	r3, [r7, #12]
    sscanf(nmea,
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	f103 0c10 	add.w	ip, r3, #16
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	3318      	adds	r3, #24
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	3220      	adds	r2, #32
 8000ba4:	6939      	ldr	r1, [r7, #16]
 8000ba6:	3128      	adds	r1, #40	@ 0x28
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	6938      	ldr	r0, [r7, #16]
 8000bac:	302c      	adds	r0, #44	@ 0x2c
 8000bae:	693c      	ldr	r4, [r7, #16]
 8000bb0:	3430      	adds	r4, #48	@ 0x30
 8000bb2:	693d      	ldr	r5, [r7, #16]
 8000bb4:	3538      	adds	r5, #56	@ 0x38
 8000bb6:	693e      	ldr	r6, [r7, #16]
 8000bb8:	3640      	adds	r6, #64	@ 0x40
 8000bba:	6939      	ldr	r1, [r7, #16]
 8000bbc:	3148      	adds	r1, #72	@ 0x48
 8000bbe:	6079      	str	r1, [r7, #4]
 8000bc0:	6939      	ldr	r1, [r7, #16]
 8000bc2:	3150      	adds	r1, #80	@ 0x50
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	6939      	ldr	r1, [r7, #16]
 8000bc8:	3158      	adds	r1, #88	@ 0x58
 8000bca:	9109      	str	r1, [sp, #36]	@ 0x24
 8000bcc:	6839      	ldr	r1, [r7, #0]
 8000bce:	9108      	str	r1, [sp, #32]
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	9107      	str	r1, [sp, #28]
 8000bd4:	9606      	str	r6, [sp, #24]
 8000bd6:	9505      	str	r5, [sp, #20]
 8000bd8:	9404      	str	r4, [sp, #16]
 8000bda:	9003      	str	r0, [sp, #12]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	9102      	str	r1, [sp, #8]
 8000be0:	9201      	str	r2, [sp, #4]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	4663      	mov	r3, ip
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	4936      	ldr	r1, [pc, #216]	@ (8000cc4 <parse_gpgga+0x154>)
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f00d fb86 	bl	800e2fc <siscanf>
           &data->alt_unit,
           &data->geoid_height,
           &data->geoid_unit);

    // Convert latitude and longitude from degrees, minutes to decimal degrees
    data->latitude = (int)(data->latitude / 100) + fmod(data->latitude, 100) / 60.0;
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	ed93 6b04 	vldr	d6, [r3, #16]
 8000bf6:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000cb0 <parse_gpgga+0x140>
 8000bfa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bfe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c02:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c0c:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 8000cb0 <parse_gpgga+0x140>
 8000c10:	eeb0 0b47 	vmov.f64	d0, d7
 8000c14:	f011 fb88 	bl	8012328 <fmod>
 8000c18:	eeb0 6b40 	vmov.f64	d6, d0
 8000c1c:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8000cb8 <parse_gpgga+0x148>
 8000c20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c24:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	ed83 7b04 	vstr	d7, [r3, #16]
    if (data->lat_dir == 'S') {
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	7e1b      	ldrb	r3, [r3, #24]
 8000c32:	2b53      	cmp	r3, #83	@ 0x53
 8000c34:	d107      	bne.n	8000c46 <parse_gpgga+0xd6>
        data->latitude = -data->latitude;
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c3c:	eeb1 7b47 	vneg.f64	d7, d7
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	ed83 7b04 	vstr	d7, [r3, #16]
    }

    data->longitude = (int)(data->longitude / 100) + fmod(data->longitude, 100) / 60.0;
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	ed93 6b08 	vldr	d6, [r3, #32]
 8000c4c:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8000cb0 <parse_gpgga+0x140>
 8000c50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c58:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	ed93 7b08 	vldr	d7, [r3, #32]
 8000c62:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8000cb0 <parse_gpgga+0x140>
 8000c66:	eeb0 0b47 	vmov.f64	d0, d7
 8000c6a:	f011 fb5d 	bl	8012328 <fmod>
 8000c6e:	eeb0 6b40 	vmov.f64	d6, d0
 8000c72:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8000cb8 <parse_gpgga+0x148>
 8000c76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c7a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	ed83 7b08 	vstr	d7, [r3, #32]
    if (data->lon_dir == 'W') {
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000c8a:	2b57      	cmp	r3, #87	@ 0x57
 8000c8c:	d107      	bne.n	8000c9e <parse_gpgga+0x12e>
        data->longitude = -data->longitude;
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	ed93 7b08 	vldr	d7, [r3, #32]
 8000c94:	eeb1 7b47 	vneg.f64	d7, d7
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	ed83 7b08 	vstr	d7, [r3, #32]
    }

    return 1;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	371c      	adds	r7, #28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	ecbd 8b02 	vpop	{d8}
 8000caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cac:	f3af 8000 	nop.w
 8000cb0:	00000000 	.word	0x00000000
 8000cb4:	40590000 	.word	0x40590000
 8000cb8:	00000000 	.word	0x00000000
 8000cbc:	404e0000 	.word	0x404e0000
 8000cc0:	080125a0 	.word	0x080125a0
 8000cc4:	080125a8 	.word	0x080125a8

08000cc8 <parse_gprmc>:

int parse_gprmc(const char* nmea, GPRMC_Data* data) {
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	ed2d 8b02 	vpush	{d8}
 8000cce:	b091      	sub	sp, #68	@ 0x44
 8000cd0:	af0a      	add	r7, sp, #40	@ 0x28
 8000cd2:	6178      	str	r0, [r7, #20]
 8000cd4:	6139      	str	r1, [r7, #16]
    if (strncmp(nmea, "$GNRMC", 6) != 0) {
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	494d      	ldr	r1, [pc, #308]	@ (8000e10 <parse_gprmc+0x148>)
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f00e fae2 	bl	800f2a4 <strncmp>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <parse_gprmc+0x22>
        return 0; // Not a GPRMC sentence
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e081      	b.n	8000dee <parse_gprmc+0x126>
    }

    // Parse the NMEA sentence
    sscanf(nmea,
           "$GNRMC,%10[^,],%c,%lf,%c,%lf,%c,%lf,%lf,%6[^,],%lf,%c",
           data->time,
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	60fb      	str	r3, [r7, #12]
    sscanf(nmea,
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	f103 0c0b 	add.w	ip, r3, #11
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	3310      	adds	r3, #16
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	3218      	adds	r2, #24
 8000cfc:	6939      	ldr	r1, [r7, #16]
 8000cfe:	3120      	adds	r1, #32
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	6938      	ldr	r0, [r7, #16]
 8000d04:	3028      	adds	r0, #40	@ 0x28
 8000d06:	693c      	ldr	r4, [r7, #16]
 8000d08:	3430      	adds	r4, #48	@ 0x30
 8000d0a:	693d      	ldr	r5, [r7, #16]
 8000d0c:	3538      	adds	r5, #56	@ 0x38
           &data->lat_dir,
           &data->longitude,
           &data->lon_dir,
           &data->speed,
           &data->course,
           data->date,
 8000d0e:	693e      	ldr	r6, [r7, #16]
 8000d10:	3640      	adds	r6, #64	@ 0x40
    sscanf(nmea,
 8000d12:	6939      	ldr	r1, [r7, #16]
 8000d14:	3148      	adds	r1, #72	@ 0x48
 8000d16:	6079      	str	r1, [r7, #4]
 8000d18:	6939      	ldr	r1, [r7, #16]
 8000d1a:	3150      	adds	r1, #80	@ 0x50
 8000d1c:	9108      	str	r1, [sp, #32]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	9107      	str	r1, [sp, #28]
 8000d22:	9606      	str	r6, [sp, #24]
 8000d24:	9505      	str	r5, [sp, #20]
 8000d26:	9404      	str	r4, [sp, #16]
 8000d28:	9003      	str	r0, [sp, #12]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	9102      	str	r1, [sp, #8]
 8000d2e:	9201      	str	r2, [sp, #4]
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	4663      	mov	r3, ip
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4937      	ldr	r1, [pc, #220]	@ (8000e14 <parse_gprmc+0x14c>)
 8000d38:	6978      	ldr	r0, [r7, #20]
 8000d3a:	f00d fadf 	bl	800e2fc <siscanf>
           &data->magnetic_var,
           &data->mag_var_dir);

    // Convert latitude and longitude from degrees, minutes to decimal degrees
    data->latitude = (int)(data->latitude / 100) + fmod(data->latitude, 100) / 60.0;
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	ed93 6b04 	vldr	d6, [r3, #16]
 8000d44:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000e00 <parse_gprmc+0x138>
 8000d48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d50:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	ed93 7b04 	vldr	d7, [r3, #16]
 8000d5a:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8000e00 <parse_gprmc+0x138>
 8000d5e:	eeb0 0b47 	vmov.f64	d0, d7
 8000d62:	f011 fae1 	bl	8012328 <fmod>
 8000d66:	eeb0 6b40 	vmov.f64	d6, d0
 8000d6a:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8000e08 <parse_gprmc+0x140>
 8000d6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d72:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	ed83 7b04 	vstr	d7, [r3, #16]
    if (data->lat_dir == 'S') {
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	7e1b      	ldrb	r3, [r3, #24]
 8000d80:	2b53      	cmp	r3, #83	@ 0x53
 8000d82:	d107      	bne.n	8000d94 <parse_gprmc+0xcc>
        data->latitude = -data->latitude;
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	ed93 7b04 	vldr	d7, [r3, #16]
 8000d8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	ed83 7b04 	vstr	d7, [r3, #16]
    }

    data->longitude = (int)(data->longitude / 100) + fmod(data->longitude, 100) / 60.0;
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	ed93 6b08 	vldr	d6, [r3, #32]
 8000d9a:	ed9f 5b19 	vldr	d5, [pc, #100]	@ 8000e00 <parse_gprmc+0x138>
 8000d9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000da2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000da6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	ed93 7b08 	vldr	d7, [r3, #32]
 8000db0:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8000e00 <parse_gprmc+0x138>
 8000db4:	eeb0 0b47 	vmov.f64	d0, d7
 8000db8:	f011 fab6 	bl	8012328 <fmod>
 8000dbc:	eeb0 6b40 	vmov.f64	d6, d0
 8000dc0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8000e08 <parse_gprmc+0x140>
 8000dc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dc8:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	ed83 7b08 	vstr	d7, [r3, #32]
    if (data->lon_dir == 'W') {
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000dd8:	2b57      	cmp	r3, #87	@ 0x57
 8000dda:	d107      	bne.n	8000dec <parse_gprmc+0x124>
        data->longitude = -data->longitude;
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	ed93 7b08 	vldr	d7, [r3, #32]
 8000de2:	eeb1 7b47 	vneg.f64	d7, d7
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	ed83 7b08 	vstr	d7, [r3, #32]
    }

    return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	ecbd 8b02 	vpop	{d8}
 8000df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	f3af 8000 	nop.w
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40590000 	.word	0x40590000
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	404e0000 	.word	0x404e0000
 8000e10:	080125e0 	.word	0x080125e0
 8000e14:	080125e8 	.word	0x080125e8

08000e18 <print_gpgga>:

void print_gpgga(const GPGGA_Data* data) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	6078      	str	r0, [r7, #4]
    printf("GNGGA Data:\n");
 8000e20:	4822      	ldr	r0, [pc, #136]	@ (8000eac <print_gpgga+0x94>)
 8000e22:	f00e fa37 	bl	800f294 <puts>
    printf("  Time: %s\n", data->time);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4821      	ldr	r0, [pc, #132]	@ (8000eb0 <print_gpgga+0x98>)
 8000e2c:	f00e f9ca 	bl	800f1c4 <iprintf>
    printf("  Latitude: %.6f %c\n", data->latitude, data->lat_dir);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	7e09      	ldrb	r1, [r1, #24]
 8000e3a:	9100      	str	r1, [sp, #0]
 8000e3c:	481d      	ldr	r0, [pc, #116]	@ (8000eb4 <print_gpgga+0x9c>)
 8000e3e:	f00e f9c1 	bl	800f1c4 <iprintf>
    printf("  Longitude: %.6f %c\n", data->longitude, data->lon_dir);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8000e4e:	9100      	str	r1, [sp, #0]
 8000e50:	4819      	ldr	r0, [pc, #100]	@ (8000eb8 <print_gpgga+0xa0>)
 8000e52:	f00e f9b7 	bl	800f1c4 <iprintf>
    printf("  Fix Quality: %d\n", data->fix_quality);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4817      	ldr	r0, [pc, #92]	@ (8000ebc <print_gpgga+0xa4>)
 8000e5e:	f00e f9b1 	bl	800f1c4 <iprintf>
    printf("  Number of Satellites: %d\n", data->num_satellites);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4619      	mov	r1, r3
 8000e68:	4815      	ldr	r0, [pc, #84]	@ (8000ec0 <print_gpgga+0xa8>)
 8000e6a:	f00e f9ab 	bl	800f1c4 <iprintf>
    printf("  HDOP: %.2f\n", data->hdop);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000e74:	4813      	ldr	r0, [pc, #76]	@ (8000ec4 <print_gpgga+0xac>)
 8000e76:	f00e f9a5 	bl	800f1c4 <iprintf>
    printf("  Altitude: %.2f %c\n", data->altitude, data->alt_unit);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	f891 1048 	ldrb.w	r1, [r1, #72]	@ 0x48
 8000e86:	9100      	str	r1, [sp, #0]
 8000e88:	480f      	ldr	r0, [pc, #60]	@ (8000ec8 <print_gpgga+0xb0>)
 8000e8a:	f00e f99b 	bl	800f1c4 <iprintf>
    printf("  Geoid Height: %.2f %c\n", data->geoid_height, data->geoid_unit);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	f891 1058 	ldrb.w	r1, [r1, #88]	@ 0x58
 8000e9a:	9100      	str	r1, [sp, #0]
 8000e9c:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <print_gpgga+0xb4>)
 8000e9e:	f00e f991 	bl	800f1c4 <iprintf>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	08012620 	.word	0x08012620
 8000eb0:	0801262c 	.word	0x0801262c
 8000eb4:	08012638 	.word	0x08012638
 8000eb8:	08012650 	.word	0x08012650
 8000ebc:	08012668 	.word	0x08012668
 8000ec0:	0801267c 	.word	0x0801267c
 8000ec4:	08012698 	.word	0x08012698
 8000ec8:	080126a8 	.word	0x080126a8
 8000ecc:	080126c0 	.word	0x080126c0

08000ed0 <print_gprmc>:


void print_gprmc(const GPRMC_Data* data) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]
    printf("GNRMC Data:\n");
 8000ed8:	4820      	ldr	r0, [pc, #128]	@ (8000f5c <print_gprmc+0x8c>)
 8000eda:	f00e f9db 	bl	800f294 <puts>
    printf("  Time: %s\n", data->time);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481f      	ldr	r0, [pc, #124]	@ (8000f60 <print_gprmc+0x90>)
 8000ee4:	f00e f96e 	bl	800f1c4 <iprintf>
    printf("  Status: %c\n", data->status);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7adb      	ldrb	r3, [r3, #11]
 8000eec:	4619      	mov	r1, r3
 8000eee:	481d      	ldr	r0, [pc, #116]	@ (8000f64 <print_gprmc+0x94>)
 8000ef0:	f00e f968 	bl	800f1c4 <iprintf>
    printf("  Latitude: %.6f %c\n", data->latitude, data->lat_dir);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	7e09      	ldrb	r1, [r1, #24]
 8000efe:	9100      	str	r1, [sp, #0]
 8000f00:	4819      	ldr	r0, [pc, #100]	@ (8000f68 <print_gprmc+0x98>)
 8000f02:	f00e f95f 	bl	800f1c4 <iprintf>
    printf("  Longitude: %.6f %c\n", data->longitude, data->lon_dir);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8000f12:	9100      	str	r1, [sp, #0]
 8000f14:	4815      	ldr	r0, [pc, #84]	@ (8000f6c <print_gprmc+0x9c>)
 8000f16:	f00e f955 	bl	800f1c4 <iprintf>
    printf("  Speed (knots): %.2f\n", data->speed);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8000f20:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <print_gprmc+0xa0>)
 8000f22:	f00e f94f 	bl	800f1c4 <iprintf>
    printf("  Course (degrees): %.2f\n", data->course);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000f2c:	4811      	ldr	r0, [pc, #68]	@ (8000f74 <print_gprmc+0xa4>)
 8000f2e:	f00e f949 	bl	800f1c4 <iprintf>
    printf("  Date: %s\n", data->date);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3340      	adds	r3, #64	@ 0x40
 8000f36:	4619      	mov	r1, r3
 8000f38:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <print_gprmc+0xa8>)
 8000f3a:	f00e f943 	bl	800f1c4 <iprintf>
    printf("  Magnetic Variation: %.2f %c\n", data->magnetic_var, data->mag_var_dir);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	f891 1050 	ldrb.w	r1, [r1, #80]	@ 0x50
 8000f4a:	9100      	str	r1, [sp, #0]
 8000f4c:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <print_gprmc+0xac>)
 8000f4e:	f00e f939 	bl	800f1c4 <iprintf>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	080126dc 	.word	0x080126dc
 8000f60:	0801262c 	.word	0x0801262c
 8000f64:	080126e8 	.word	0x080126e8
 8000f68:	08012638 	.word	0x08012638
 8000f6c:	08012650 	.word	0x08012650
 8000f70:	080126f8 	.word	0x080126f8
 8000f74:	08012710 	.word	0x08012710
 8000f78:	0801272c 	.word	0x0801272c
 8000f7c:	08012738 	.word	0x08012738

08000f80 <GPS_CallBack>:

void GPS_CallBack(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b098      	sub	sp, #96	@ 0x60
 8000f84:	af00      	add	r7, sp, #0
    GPS.LastTime = HAL_GetTick();
 8000f86:	f001 fdad 	bl	8002ae4 <HAL_GetTick>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a30      	ldr	r2, [pc, #192]	@ (8001050 <GPS_CallBack+0xd0>)
 8000f8e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204

    // Store the received byte into the buffer if there's space
    if(GPS.rxIndex < sizeof(GPS.rxBuffer) - 2)
 8000f92:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <GPS_CallBack+0xd0>)
 8000f94:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8000f98:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8000f9c:	d24f      	bcs.n	800103e <GPS_CallBack+0xbe>
    {
        GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fa0:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fa8:	f893 1202 	ldrb.w	r1, [r3, #514]	@ 0x202
 8000fac:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fae:	5499      	strb	r1, [r3, r2]
        GPS.rxIndex++;
 8000fb0:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fb2:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fbc:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200

        // Check if the received byte is a newline character
        if (GPS.rxTmp == '\n')
 8000fc0:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fc2:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	d139      	bne.n	800103e <GPS_CallBack+0xbe>
        {
            // Null-terminate the received string
            GPS.rxBuffer[GPS.rxIndex] = '\0';
 8000fca:	4b21      	ldr	r3, [pc, #132]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fcc:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	5499      	strb	r1, [r3, r2]

            // Print the received NMEA sentence
            //printf("Received GPS Data: %s\n", GPS.rxBuffer);

            // Determine the type of NMEA sentence and parse accordingly
            if (strncmp((const char*)GPS.rxBuffer, "$GNGGA", 6) == 0) {
 8000fd8:	2206      	movs	r2, #6
 8000fda:	491e      	ldr	r1, [pc, #120]	@ (8001054 <GPS_CallBack+0xd4>)
 8000fdc:	481c      	ldr	r0, [pc, #112]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fde:	f00e f961 	bl	800f2a4 <strncmp>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10f      	bne.n	8001008 <GPS_CallBack+0x88>
                GPGGA_Data gpgga_data;
                if (parse_gpgga((const char*)GPS.rxBuffer, &gpgga_data)) {
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4818      	ldr	r0, [pc, #96]	@ (8001050 <GPS_CallBack+0xd0>)
 8000fee:	f7ff fdbf 	bl	8000b70 <parse_gpgga>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d01e      	beq.n	8001036 <GPS_CallBack+0xb6>
//                	printf("GPGGA parsing success: \n");
                    print_gpgga(&gpgga_data);
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff0c 	bl	8000e18 <print_gpgga>
                    printf("// -------------------- // \n");
 8001000:	4815      	ldr	r0, [pc, #84]	@ (8001058 <GPS_CallBack+0xd8>)
 8001002:	f00e f947 	bl	800f294 <puts>
 8001006:	e016      	b.n	8001036 <GPS_CallBack+0xb6>
                }
            } else if (strncmp((const char*)GPS.rxBuffer, "$GNRMC", 6) == 0) {
 8001008:	2206      	movs	r2, #6
 800100a:	4914      	ldr	r1, [pc, #80]	@ (800105c <GPS_CallBack+0xdc>)
 800100c:	4810      	ldr	r0, [pc, #64]	@ (8001050 <GPS_CallBack+0xd0>)
 800100e:	f00e f949 	bl	800f2a4 <strncmp>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10e      	bne.n	8001036 <GPS_CallBack+0xb6>
                GPRMC_Data gprmc_data;
                if (parse_gprmc((const char*)GPS.rxBuffer, &gprmc_data)) {
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <GPS_CallBack+0xd0>)
 800101e:	f7ff fe53 	bl	8000cc8 <parse_gprmc>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <GPS_CallBack+0xb6>
//                	printf("GPRMC parsing success: \n");
                    print_gprmc(&gprmc_data);
 8001028:	463b      	mov	r3, r7
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff50 	bl	8000ed0 <print_gprmc>
                    printf("// -------------------- // \n");
 8001030:	4809      	ldr	r0, [pc, #36]	@ (8001058 <GPS_CallBack+0xd8>)
 8001032:	f00e f92f 	bl	800f294 <puts>
                }
            }

            // Reset the index for the next message
            GPS.rxIndex = 0;
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <GPS_CallBack+0xd0>)
 8001038:	2200      	movs	r2, #0
 800103a:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
        }
    }

    // Restart UART reception in interrupt mode
    HAL_UART_Receive_IT(&_GPS_UART, &GPS.rxTmp, 1);
 800103e:	2201      	movs	r2, #1
 8001040:	4907      	ldr	r1, [pc, #28]	@ (8001060 <GPS_CallBack+0xe0>)
 8001042:	4808      	ldr	r0, [pc, #32]	@ (8001064 <GPS_CallBack+0xe4>)
 8001044:	f008 fe28 	bl	8009c98 <HAL_UART_Receive_IT>
}
 8001048:	bf00      	nop
 800104a:	3760      	adds	r7, #96	@ 0x60
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	24000200 	.word	0x24000200
 8001054:	080125a0 	.word	0x080125a0
 8001058:	08012758 	.word	0x08012758
 800105c:	080125e0 	.word	0x080125e0
 8001060:	24000402 	.word	0x24000402
 8001064:	240007d0 	.word	0x240007d0

08001068 <HAL_UART_RxCpltCallback>:


// Override the weak implementation of the callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    // Check if the callback is for UART8
    if (huart->Instance == UART8)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_UART_RxCpltCallback+0x20>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_UART_RxCpltCallback+0x16>
    {
        // Call the GPS callback function
        GPS_CallBack();
 800107a:	f7ff ff81 	bl	8000f80 <GPS_CallBack>
    }
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40007c00 	.word	0x40007c00

0800108c <GPS_Data_Reception>:

//##################################################################################################################
GPS_t GPS_Data_Reception(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b092      	sub	sp, #72	@ 0x48
 8001090:	af0e      	add	r7, sp, #56	@ 0x38
 8001092:	6078      	str	r0, [r7, #4]
	if( (HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0))
 8001094:	f001 fd26 	bl	8002ae4 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	4b49      	ldr	r3, [pc, #292]	@ (80011c0 <GPS_Data_Reception+0x134>)
 800109c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b32      	cmp	r3, #50	@ 0x32
 80010a4:	d979      	bls.n	800119a <GPS_Data_Reception+0x10e>
 80010a6:	4b46      	ldr	r3, [pc, #280]	@ (80011c0 <GPS_Data_Reception+0x134>)
 80010a8:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d074      	beq.n	800119a <GPS_Data_Reception+0x10e>
	{
		char	*str;
		#if (_GPS_DEBUG==1)
		printf("%s",GPS.rxBuffer);
		#endif
		str=strstr((char*)GPS.rxBuffer,"$GNGGA,");
 80010b0:	4944      	ldr	r1, [pc, #272]	@ (80011c4 <GPS_Data_Reception+0x138>)
 80010b2:	4843      	ldr	r0, [pc, #268]	@ (80011c0 <GPS_Data_Reception+0x134>)
 80010b4:	f00e f908 	bl	800f2c8 <strstr>
 80010b8:	60f8      	str	r0, [r7, #12]
		if(str!=NULL)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d062      	beq.n	8001186 <GPS_Data_Reception+0xfa>
		{
			memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));
 80010c0:	2248      	movs	r2, #72	@ 0x48
 80010c2:	2100      	movs	r1, #0
 80010c4:	4840      	ldr	r0, [pc, #256]	@ (80011c8 <GPS_Data_Reception+0x13c>)
 80010c6:	f00e f915 	bl	800f2f4 <memset>
			sscanf(str,"$GNGGA,%2hhd%2hhd%2hhd.%3hd,%f,%c,%f,%c,%hhd,%hhd,%f,%f,%c,%hd,%s,*%2s\r\n",&GPS.GPGGA.UTC_Hour,&GPS.GPGGA.UTC_Min,&GPS.GPGGA.UTC_Sec,&GPS.GPGGA.UTC_MicroSec,&GPS.GPGGA.Latitude,&GPS.GPGGA.NS_Indicator,&GPS.GPGGA.Longitude,&GPS.GPGGA.EW_Indicator,&GPS.GPGGA.PositionFixIndicator,&GPS.GPGGA.SatellitesUsed,&GPS.GPGGA.HDOP,&GPS.GPGGA.MSL_Altitude,&GPS.GPGGA.MSL_Units,&GPS.GPGGA.AgeofDiffCorr,GPS.GPGGA.DiffRefStationID,GPS.GPGGA.CheckSum);
 80010ca:	4b40      	ldr	r3, [pc, #256]	@ (80011cc <GPS_Data_Reception+0x140>)
 80010cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80010ce:	4b40      	ldr	r3, [pc, #256]	@ (80011d0 <GPS_Data_Reception+0x144>)
 80010d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80010d2:	4b40      	ldr	r3, [pc, #256]	@ (80011d4 <GPS_Data_Reception+0x148>)
 80010d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80010d6:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <GPS_Data_Reception+0x14c>)
 80010d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80010da:	4b40      	ldr	r3, [pc, #256]	@ (80011dc <GPS_Data_Reception+0x150>)
 80010dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80010de:	4b40      	ldr	r3, [pc, #256]	@ (80011e0 <GPS_Data_Reception+0x154>)
 80010e0:	9308      	str	r3, [sp, #32]
 80010e2:	4b40      	ldr	r3, [pc, #256]	@ (80011e4 <GPS_Data_Reception+0x158>)
 80010e4:	9307      	str	r3, [sp, #28]
 80010e6:	4b40      	ldr	r3, [pc, #256]	@ (80011e8 <GPS_Data_Reception+0x15c>)
 80010e8:	9306      	str	r3, [sp, #24]
 80010ea:	4b40      	ldr	r3, [pc, #256]	@ (80011ec <GPS_Data_Reception+0x160>)
 80010ec:	9305      	str	r3, [sp, #20]
 80010ee:	4b40      	ldr	r3, [pc, #256]	@ (80011f0 <GPS_Data_Reception+0x164>)
 80010f0:	9304      	str	r3, [sp, #16]
 80010f2:	4b40      	ldr	r3, [pc, #256]	@ (80011f4 <GPS_Data_Reception+0x168>)
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	4b40      	ldr	r3, [pc, #256]	@ (80011f8 <GPS_Data_Reception+0x16c>)
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	4b40      	ldr	r3, [pc, #256]	@ (80011fc <GPS_Data_Reception+0x170>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <GPS_Data_Reception+0x174>)
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	4b40      	ldr	r3, [pc, #256]	@ (8001204 <GPS_Data_Reception+0x178>)
 8001104:	4a30      	ldr	r2, [pc, #192]	@ (80011c8 <GPS_Data_Reception+0x13c>)
 8001106:	4940      	ldr	r1, [pc, #256]	@ (8001208 <GPS_Data_Reception+0x17c>)
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f00d f8f7 	bl	800e2fc <siscanf>
			if(GPS.GPGGA.NS_Indicator==0)
 800110e:	4b2c      	ldr	r3, [pc, #176]	@ (80011c0 <GPS_Data_Reception+0x134>)
 8001110:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8001114:	2b00      	cmp	r3, #0
 8001116:	d103      	bne.n	8001120 <GPS_Data_Reception+0x94>
				GPS.GPGGA.NS_Indicator='-';
 8001118:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <GPS_Data_Reception+0x134>)
 800111a:	222d      	movs	r2, #45	@ 0x2d
 800111c:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
			if(GPS.GPGGA.EW_Indicator==0)
 8001120:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <GPS_Data_Reception+0x134>)
 8001122:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8001126:	2b00      	cmp	r3, #0
 8001128:	d103      	bne.n	8001132 <GPS_Data_Reception+0xa6>
				GPS.GPGGA.EW_Indicator='-';
 800112a:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <GPS_Data_Reception+0x134>)
 800112c:	222d      	movs	r2, #45	@ 0x2d
 800112e:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
			if(GPS.GPGGA.Geoid_Units==0)
 8001132:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <GPS_Data_Reception+0x134>)
 8001134:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <GPS_Data_Reception+0xb8>
				GPS.GPGGA.Geoid_Units='-';
 800113c:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <GPS_Data_Reception+0x134>)
 800113e:	222d      	movs	r2, #45	@ 0x2d
 8001140:	f883 2244 	strb.w	r2, [r3, #580]	@ 0x244
			if(GPS.GPGGA.MSL_Units==0)
 8001144:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <GPS_Data_Reception+0x134>)
 8001146:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 800114a:	2b00      	cmp	r3, #0
 800114c:	d103      	bne.n	8001156 <GPS_Data_Reception+0xca>
				GPS.GPGGA.MSL_Units='-';
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <GPS_Data_Reception+0x134>)
 8001150:	222d      	movs	r2, #45	@ 0x2d
 8001152:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
			GPS.GPGGA.LatitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Latitude);
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <GPS_Data_Reception+0x134>)
 8001158:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 800115c:	eeb0 0a67 	vmov.f32	s0, s15
 8001160:	f7ff fc9a 	bl	8000a98 <convertDegMinToDecDeg>
 8001164:	eeb0 7b40 	vmov.f64	d7, d0
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <GPS_Data_Reception+0x134>)
 800116a:	ed83 7b86 	vstr	d7, [r3, #536]	@ 0x218
			GPS.GPGGA.LongitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Longitude);
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <GPS_Data_Reception+0x134>)
 8001170:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	f7ff fc8e 	bl	8000a98 <convertDegMinToDecDeg>
 800117c:	eeb0 7b40 	vmov.f64	d7, d0
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <GPS_Data_Reception+0x134>)
 8001182:	ed83 7b8a 	vstr	d7, [r3, #552]	@ 0x228
		}
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 8001186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800118a:	2100      	movs	r1, #0
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <GPS_Data_Reception+0x134>)
 800118e:	f00e f8b1 	bl	800f2f4 <memset>
		GPS.rxIndex=0;
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <GPS_Data_Reception+0x134>)
 8001194:	2200      	movs	r2, #0
 8001196:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
	}
	HAL_UART_Receive_IT(&_GPS_UART,&GPS.rxTmp,1);
 800119a:	2201      	movs	r2, #1
 800119c:	491b      	ldr	r1, [pc, #108]	@ (800120c <GPS_Data_Reception+0x180>)
 800119e:	481c      	ldr	r0, [pc, #112]	@ (8001210 <GPS_Data_Reception+0x184>)
 80011a0:	f008 fd7a 	bl	8009c98 <HAL_UART_Receive_IT>

	return GPS;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <GPS_Data_Reception+0x134>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	4611      	mov	r1, r2
 80011ac:	f44f 7314 	mov.w	r3, #592	@ 0x250
 80011b0:	461a      	mov	r2, r3
 80011b2:	f00e f92e 	bl	800f412 <memcpy>
}
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	24000200 	.word	0x24000200
 80011c4:	08012774 	.word	0x08012774
 80011c8:	24000408 	.word	0x24000408
 80011cc:	2400044c 	.word	0x2400044c
 80011d0:	24000448 	.word	0x24000448
 80011d4:	24000446 	.word	0x24000446
 80011d8:	2400043c 	.word	0x2400043c
 80011dc:	24000438 	.word	0x24000438
 80011e0:	24000434 	.word	0x24000434
 80011e4:	24000432 	.word	0x24000432
 80011e8:	24000431 	.word	0x24000431
 80011ec:	24000430 	.word	0x24000430
 80011f0:	24000424 	.word	0x24000424
 80011f4:	24000420 	.word	0x24000420
 80011f8:	24000410 	.word	0x24000410
 80011fc:	2400040c 	.word	0x2400040c
 8001200:	2400040a 	.word	0x2400040a
 8001204:	24000409 	.word	0x24000409
 8001208:	0801277c 	.word	0x0801277c
 800120c:	24000402 	.word	0x24000402
 8001210:	240007d0 	.word	0x240007d0

08001214 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800121c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001220:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800122c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001230:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001234:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00b      	beq.n	8001254 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800123c:	e000      	b.n	8001240 <ITM_SendChar+0x2c>
    {
      __NOP();
 800123e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001240:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f9      	beq.n	800123e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800124a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
	int i=0;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e009      	b.n	800128c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ffc7 	bl	8001214 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf1      	blt.n	8001278 <_write+0x16>
	}
	return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80012a2:	f000 fcb1 	bl	8001c08 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a6:	f001 fbcd 	bl	8002a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012aa:	f000 f821 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ae:	f000 fb99 	bl	80019e4 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80012b2:	f000 f9a9 	bl	8001608 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 80012b6:	f000 f88b 	bl	80013d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012ba:	f000 f8c9 	bl	8001450 <MX_I2C2_Init>
  MX_I2C4_Init();
 80012be:	f000 f907 	bl	80014d0 <MX_I2C4_Init>
  MX_SPI1_Init();
 80012c2:	f000 f9bf 	bl	8001644 <MX_SPI1_Init>
  MX_SPI2_Init();
 80012c6:	f000 fa13 	bl	80016f0 <MX_SPI2_Init>
  MX_UART8_Init();
 80012ca:	f000 faf3 	bl	80018b4 <MX_UART8_Init>
  MX_USART1_UART_Init();
 80012ce:	f000 fb3d 	bl	800194c <MX_USART1_UART_Init>
  MX_SPI4_Init();
 80012d2:	f000 fa63 	bl	800179c <MX_SPI4_Init>
  MX_FATFS_Init();
 80012d6:	f00b fefd 	bl	800d0d4 <MX_FATFS_Init>
  MX_TIM6_Init();
 80012da:	f000 fab5 	bl	8001848 <MX_TIM6_Init>
  MX_RTC_Init();
 80012de:	f000 f937 	bl	8001550 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 80012e2:	f001 fad3 	bl	800288c <SensorManager_Init>
  TestTelemetry();
 80012e6:	f001 fb67 	bl	80029b8 <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ea:	bf00      	nop
 80012ec:	e7fd      	b.n	80012ea <main+0x4c>
	...

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b09c      	sub	sp, #112	@ 0x70
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fa:	224c      	movs	r2, #76	@ 0x4c
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f00d fff8 	bl	800f2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2220      	movs	r2, #32
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f00d fff2 	bl	800f2f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001310:	2002      	movs	r0, #2
 8001312:	f002 fde1 	bl	8003ed8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <SystemClock_Config+0xdc>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4a2b      	ldr	r2, [pc, #172]	@ (80013cc <SystemClock_Config+0xdc>)
 8001320:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001324:	6193      	str	r3, [r2, #24]
 8001326:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <SystemClock_Config+0xdc>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001332:	bf00      	nop
 8001334:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <SystemClock_Config+0xdc>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800133c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001340:	d1f8      	bne.n	8001334 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001342:	2309      	movs	r3, #9
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001346:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001354:	2302      	movs	r3, #2
 8001356:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001358:	2303      	movs	r3, #3
 800135a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 800135c:	231f      	movs	r3, #31
 800135e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001364:	2302      	movs	r3, #2
 8001366:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001368:	2302      	movs	r3, #2
 800136a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800136c:	230c      	movs	r3, #12
 800136e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001370:	2300      	movs	r3, #0
 8001372:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8001374:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001378:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fde4 	bl	8003f4c <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800138a:	f000 fc7b 	bl	8001c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	233f      	movs	r3, #63	@ 0x3f
 8001390:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2303      	movs	r3, #3
 8001394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800139a:	2308      	movs	r3, #8
 800139c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800139e:	2340      	movs	r3, #64	@ 0x40
 80013a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013a2:	2340      	movs	r3, #64	@ 0x40
 80013a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013ac:	2340      	movs	r3, #64	@ 0x40
 80013ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2103      	movs	r1, #3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 f9a3 	bl	8004700 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80013c0:	f000 fc60 	bl	8001c84 <Error_Handler>
  }
}
 80013c4:	bf00      	nop
 80013c6:	3770      	adds	r7, #112	@ 0x70
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	58024800 	.word	0x58024800

080013d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <MX_I2C1_Init+0x74>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <MX_I2C1_Init+0x78>)
 80013d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_I2C1_Init+0x74>)
 80013dc:	4a1b      	ldr	r2, [pc, #108]	@ (800144c <MX_I2C1_Init+0x7c>)
 80013de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <MX_I2C1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_I2C1_Init+0x74>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <MX_I2C1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_I2C1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <MX_I2C1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <MX_I2C1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <MX_I2C1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800140a:	480e      	ldr	r0, [pc, #56]	@ (8001444 <MX_I2C1_Init+0x74>)
 800140c:	f002 fc30 	bl	8003c70 <HAL_I2C_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001416:	f000 fc35 	bl	8001c84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800141a:	2100      	movs	r1, #0
 800141c:	4809      	ldr	r0, [pc, #36]	@ (8001444 <MX_I2C1_Init+0x74>)
 800141e:	f002 fcc3 	bl	8003da8 <HAL_I2CEx_ConfigAnalogFilter>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001428:	f000 fc2c 	bl	8001c84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_I2C1_Init+0x74>)
 8001430:	f002 fd05 	bl	8003e3e <HAL_I2CEx_ConfigDigitalFilter>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800143a:	f000 fc23 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	24000450 	.word	0x24000450
 8001448:	40005400 	.word	0x40005400
 800144c:	20a0a3f6 	.word	0x20a0a3f6

08001450 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <MX_I2C2_Init+0x74>)
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <MX_I2C2_Init+0x78>)
 8001458:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MX_I2C2_Init+0x74>)
 800145c:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <MX_I2C2_Init+0x7c>)
 800145e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <MX_I2C2_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <MX_I2C2_Init+0x74>)
 8001468:	2201      	movs	r2, #1
 800146a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <MX_I2C2_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_I2C2_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_I2C2_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_I2C2_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_I2C2_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800148a:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <MX_I2C2_Init+0x74>)
 800148c:	f002 fbf0 	bl	8003c70 <HAL_I2C_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001496:	f000 fbf5 	bl	8001c84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800149a:	2100      	movs	r1, #0
 800149c:	4809      	ldr	r0, [pc, #36]	@ (80014c4 <MX_I2C2_Init+0x74>)
 800149e:	f002 fc83 	bl	8003da8 <HAL_I2CEx_ConfigAnalogFilter>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014a8:	f000 fbec 	bl	8001c84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_I2C2_Init+0x74>)
 80014b0:	f002 fcc5 	bl	8003e3e <HAL_I2CEx_ConfigDigitalFilter>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014ba:	f000 fbe3 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	240004a4 	.word	0x240004a4
 80014c8:	40005800 	.word	0x40005800
 80014cc:	20a0a3f6 	.word	0x20a0a3f6

080014d0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <MX_I2C4_Init+0x74>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <MX_I2C4_Init+0x78>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_I2C4_Init+0x74>)
 80014dc:	4a1b      	ldr	r2, [pc, #108]	@ (800154c <MX_I2C4_Init+0x7c>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <MX_I2C4_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_I2C4_Init+0x74>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <MX_I2C4_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_I2C4_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MX_I2C4_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_I2C4_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_I2C4_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800150a:	480e      	ldr	r0, [pc, #56]	@ (8001544 <MX_I2C4_Init+0x74>)
 800150c:	f002 fbb0 	bl	8003c70 <HAL_I2C_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001516:	f000 fbb5 	bl	8001c84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800151a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800151e:	4809      	ldr	r0, [pc, #36]	@ (8001544 <MX_I2C4_Init+0x74>)
 8001520:	f002 fc42 	bl	8003da8 <HAL_I2CEx_ConfigAnalogFilter>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 800152a:	f000 fbab 	bl	8001c84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800152e:	2100      	movs	r1, #0
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <MX_I2C4_Init+0x74>)
 8001532:	f002 fc84 	bl	8003e3e <HAL_I2CEx_ConfigDigitalFilter>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 800153c:	f000 fba2 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	240004f8 	.word	0x240004f8
 8001548:	58001c00 	.word	0x58001c00
 800154c:	60405858 	.word	0x60405858

08001550 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001568:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <MX_RTC_Init+0xb0>)
 800156a:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <MX_RTC_Init+0xb4>)
 800156c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <MX_RTC_Init+0xb0>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001574:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <MX_RTC_Init+0xb0>)
 8001576:	227f      	movs	r2, #127	@ 0x7f
 8001578:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800157a:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <MX_RTC_Init+0xb0>)
 800157c:	22ff      	movs	r2, #255	@ 0xff
 800157e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001580:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <MX_RTC_Init+0xb0>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001586:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <MX_RTC_Init+0xb0>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800158c:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <MX_RTC_Init+0xb0>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001592:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <MX_RTC_Init+0xb0>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001598:	4819      	ldr	r0, [pc, #100]	@ (8001600 <MX_RTC_Init+0xb0>)
 800159a:	f006 f865 	bl	8007668 <HAL_RTC_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80015a4:	f000 fb6e 	bl	8001c84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2201      	movs	r2, #1
 80015c0:	4619      	mov	r1, r3
 80015c2:	480f      	ldr	r0, [pc, #60]	@ (8001600 <MX_RTC_Init+0xb0>)
 80015c4:	f006 f8d2 	bl	800776c <HAL_RTC_SetTime>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80015ce:	f000 fb59 	bl	8001c84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015d2:	2301      	movs	r3, #1
 80015d4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80015d6:	2301      	movs	r3, #1
 80015d8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80015da:	2301      	movs	r3, #1
 80015dc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80015de:	2300      	movs	r3, #0
 80015e0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2201      	movs	r2, #1
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_RTC_Init+0xb0>)
 80015ea:	f006 f95d 	bl	80078a8 <HAL_RTC_SetDate>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80015f4:	f000 fb46 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2400054c 	.word	0x2400054c
 8001604:	58004000 	.word	0x58004000

08001608 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <MX_SDMMC1_SD_Init+0x34>)
 800160e:	4a0c      	ldr	r2, [pc, #48]	@ (8001640 <MX_SDMMC1_SD_Init+0x38>)
 8001610:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <MX_SDMMC1_SD_Init+0x34>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <MX_SDMMC1_SD_Init+0x34>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <MX_SDMMC1_SD_Init+0x34>)
 8001620:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001624:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <MX_SDMMC1_SD_Init+0x34>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <MX_SDMMC1_SD_Init+0x34>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	24000570 	.word	0x24000570
 8001640:	52007000 	.word	0x52007000

08001644 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 800164a:	4a28      	ldr	r2, [pc, #160]	@ (80016ec <MX_SPI1_Init+0xa8>)
 800164c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800164e:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 8001650:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800165c:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 800165e:	2207      	movs	r2, #7
 8001660:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001662:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 8001670:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001674:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 8001678:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800167c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167e:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001684:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 800168c:	2200      	movs	r2, #0
 800168e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001690:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 8001692:	2200      	movs	r2, #0
 8001694:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 8001698:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800169c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016b6:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <MX_SPI1_Init+0xa4>)
 80016d6:	f007 fdd7 	bl	8009288 <HAL_SPI_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80016e0:	f000 fad0 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	240005ec 	.word	0x240005ec
 80016ec:	40013000 	.word	0x40013000

080016f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <MX_SPI2_Init+0xa4>)
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <MX_SPI2_Init+0xa8>)
 80016f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <MX_SPI2_Init+0xa4>)
 80016fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001700:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001702:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001708:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <MX_SPI2_Init+0xa4>)
 800170a:	2207      	movs	r2, #7
 800170c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001714:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <MX_SPI2_Init+0xa4>)
 800171c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001720:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001724:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001728:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <MX_SPI2_Init+0xa4>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001730:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001736:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800173c:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <MX_SPI2_Init+0xa4>)
 800173e:	2200      	movs	r2, #0
 8001740:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001744:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001748:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_SPI2_Init+0xa4>)
 800174c:	2200      	movs	r2, #0
 800174e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001750:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <MX_SPI2_Init+0xa4>)
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001764:	2200      	movs	r2, #0
 8001766:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <MX_SPI2_Init+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001776:	2200      	movs	r2, #0
 8001778:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_SPI2_Init+0xa4>)
 800177c:	2200      	movs	r2, #0
 800177e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <MX_SPI2_Init+0xa4>)
 8001782:	f007 fd81 	bl	8009288 <HAL_SPI_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800178c:	f000 fa7a 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	24000674 	.word	0x24000674
 8001798:	40003800 	.word	0x40003800

0800179c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80017a0:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017a2:	4a28      	ldr	r2, [pc, #160]	@ (8001844 <MX_SPI4_Init+0xa8>)
 80017a4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017ac:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80017ae:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b4:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017b6:	2207      	movs	r2, #7
 80017b8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ba:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80017c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017cc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017d0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80017d4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <MX_SPI4_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_SPI4_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <MX_SPI4_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800180e:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <MX_SPI4_Init+0xa4>)
 8001810:	2200      	movs	r2, #0
 8001812:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <MX_SPI4_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MX_SPI4_Init+0xa4>)
 800181c:	2200      	movs	r2, #0
 800181e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <MX_SPI4_Init+0xa4>)
 8001822:	2200      	movs	r2, #0
 8001824:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_SPI4_Init+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <MX_SPI4_Init+0xa4>)
 800182e:	f007 fd2b 	bl	8009288 <HAL_SPI_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001838:	f000 fa24 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	240006fc 	.word	0x240006fc
 8001844:	40013400 	.word	0x40013400

08001848 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_TIM6_Init+0x64>)
 800185a:	4a15      	ldr	r2, [pc, #84]	@ (80018b0 <MX_TIM6_Init+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 49999;
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <MX_TIM6_Init+0x64>)
 8001860:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001864:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_TIM6_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_TIM6_Init+0x64>)
 800186e:	2209      	movs	r2, #9
 8001870:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <MX_TIM6_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <MX_TIM6_Init+0x64>)
 800187a:	f007 fe44 	bl	8009506 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001884:	f000 f9fe 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001888:	2320      	movs	r3, #32
 800188a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_TIM6_Init+0x64>)
 8001896:	f008 f8f5 	bl	8009a84 <HAL_TIMEx_MasterConfigSynchronization>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018a0:	f000 f9f0 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	24000784 	.word	0x24000784
 80018b0:	40001000 	.word	0x40001000

080018b4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80018b8:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <MX_UART8_Init+0x90>)
 80018ba:	4a23      	ldr	r2, [pc, #140]	@ (8001948 <MX_UART8_Init+0x94>)
 80018bc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80018be:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <MX_UART8_Init+0x90>)
 80018c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018c4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001944 <MX_UART8_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <MX_UART8_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <MX_UART8_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <MX_UART8_Init+0x90>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <MX_UART8_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e4:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <MX_UART8_Init+0x90>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <MX_UART8_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <MX_UART8_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f6:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <MX_UART8_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80018fc:	4811      	ldr	r0, [pc, #68]	@ (8001944 <MX_UART8_Init+0x90>)
 80018fe:	f008 f97b 	bl	8009bf8 <HAL_UART_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001908:	f000 f9bc 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190c:	2100      	movs	r1, #0
 800190e:	480d      	ldr	r0, [pc, #52]	@ (8001944 <MX_UART8_Init+0x90>)
 8001910:	f00a fd4b 	bl	800c3aa <HAL_UARTEx_SetTxFifoThreshold>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800191a:	f000 f9b3 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191e:	2100      	movs	r1, #0
 8001920:	4808      	ldr	r0, [pc, #32]	@ (8001944 <MX_UART8_Init+0x90>)
 8001922:	f00a fd80 	bl	800c426 <HAL_UARTEx_SetRxFifoThreshold>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800192c:	f000 f9aa 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <MX_UART8_Init+0x90>)
 8001932:	f00a fd01 	bl	800c338 <HAL_UARTEx_DisableFifoMode>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800193c:	f000 f9a2 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	240007d0 	.word	0x240007d0
 8001948:	40007c00 	.word	0x40007c00

0800194c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001952:	4a23      	ldr	r2, [pc, #140]	@ (80019e0 <MX_USART1_UART_Init+0x94>)
 8001954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001956:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001994:	4811      	ldr	r0, [pc, #68]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001996:	f008 f92f 	bl	8009bf8 <HAL_UART_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019a0:	f000 f970 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a4:	2100      	movs	r1, #0
 80019a6:	480d      	ldr	r0, [pc, #52]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 80019a8:	f00a fcff 	bl	800c3aa <HAL_UARTEx_SetTxFifoThreshold>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019b2:	f000 f967 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 80019ba:	f00a fd34 	bl	800c426 <HAL_UARTEx_SetRxFifoThreshold>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019c4:	f000 f95e 	bl	8001c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 80019ca:	f00a fcb5 	bl	800c338 <HAL_UARTEx_DisableFifoMode>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019d4:	f000 f956 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	24000864 	.word	0x24000864
 80019e0:	40011000 	.word	0x40011000

080019e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	@ 0x30
 80019e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b7d      	ldr	r3, [pc, #500]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a00:	4a7b      	ldr	r2, [pc, #492]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a0a:	4b79      	ldr	r3, [pc, #484]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a18:	4b75      	ldr	r3, [pc, #468]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1e:	4a74      	ldr	r2, [pc, #464]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a20:	f043 0310 	orr.w	r3, r3, #16
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a28:	4b71      	ldr	r3, [pc, #452]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3c:	4a6c      	ldr	r2, [pc, #432]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a46:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b66      	ldr	r3, [pc, #408]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5a:	4a65      	ldr	r2, [pc, #404]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a64:	4b62      	ldr	r3, [pc, #392]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a78:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a82:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a90:	4b57      	ldr	r3, [pc, #348]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a96:	4a56      	ldr	r2, [pc, #344]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa0:	4b53      	ldr	r3, [pc, #332]	@ (8001bf0 <MX_GPIO_Init+0x20c>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	4850      	ldr	r0, [pc, #320]	@ (8001bf4 <MX_GPIO_Init+0x210>)
 8001ab4:	f002 f8c2 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2110      	movs	r1, #16
 8001abc:	484e      	ldr	r0, [pc, #312]	@ (8001bf8 <MX_GPIO_Init+0x214>)
 8001abe:	f002 f8bd 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001ac8:	484c      	ldr	r0, [pc, #304]	@ (8001bfc <MX_GPIO_Init+0x218>)
 8001aca:	f002 f8b7 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001ace:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4847      	ldr	r0, [pc, #284]	@ (8001c00 <MX_GPIO_Init+0x21c>)
 8001ae4:	f001 feea 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001ae8:	2310      	movs	r3, #16
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af4:	2302      	movs	r3, #2
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	483d      	ldr	r0, [pc, #244]	@ (8001bf4 <MX_GPIO_Init+0x210>)
 8001b00:	f001 fedc 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	483b      	ldr	r0, [pc, #236]	@ (8001c04 <MX_GPIO_Init+0x220>)
 8001b18:	f001 fed0 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b20:	2303      	movs	r3, #3
 8001b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4834      	ldr	r0, [pc, #208]	@ (8001c00 <MX_GPIO_Init+0x21c>)
 8001b30:	f001 fec4 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8001b34:	2310      	movs	r3, #16
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	482b      	ldr	r0, [pc, #172]	@ (8001bf8 <MX_GPIO_Init+0x214>)
 8001b4c:	f001 feb6 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b50:	2304      	movs	r3, #4
 8001b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b54:	2303      	movs	r3, #3
 8001b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	4826      	ldr	r0, [pc, #152]	@ (8001bfc <MX_GPIO_Init+0x218>)
 8001b64:	f001 feaa 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8001b68:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	481d      	ldr	r0, [pc, #116]	@ (8001bf4 <MX_GPIO_Init+0x210>)
 8001b7e:	f001 fe9d 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 8001b82:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4818      	ldr	r0, [pc, #96]	@ (8001bfc <MX_GPIO_Init+0x218>)
 8001b9c:	f001 fe8e 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ba0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480f      	ldr	r0, [pc, #60]	@ (8001bf4 <MX_GPIO_Init+0x210>)
 8001bb6:	f001 fe81 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bba:	2308      	movs	r3, #8
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480a      	ldr	r0, [pc, #40]	@ (8001bf8 <MX_GPIO_Init+0x214>)
 8001bce:	f001 fe75 	bl	80038bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bd8:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <MX_GPIO_Init+0x218>)
 8001bda:	f002 f82f 	bl	8003c3c <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2110      	movs	r1, #16
 8001be2:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_GPIO_Init+0x214>)
 8001be4:	f002 f82a 	bl	8003c3c <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001be8:	bf00      	nop
 8001bea:	3730      	adds	r7, #48	@ 0x30
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	58021000 	.word	0x58021000
 8001bf8:	58020000 	.word	0x58020000
 8001bfc:	58020400 	.word	0x58020400
 8001c00:	58020800 	.word	0x58020800
 8001c04:	58020c00 	.word	0x58020c00

08001c08 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c1a:	f001 f873 	bl	8002d04 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c2a:	231f      	movs	r3, #31
 8001c2c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001c2e:	2387      	movs	r3, #135	@ 0x87
 8001c30:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001c36:	2300      	movs	r3, #0
 8001c38:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f001 f891 	bl	8002d74 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001c52:	2004      	movs	r0, #4
 8001c54:	f001 f86e 	bl	8002d34 <HAL_MPU_Enable>

}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c72:	f000 ff23 	bl	8002abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40001400 	.word	0x40001400

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <Error_Handler+0x8>

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_MspInit+0x30>)
 8001c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c9c:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x30>)
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x30>)
 8001ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	58024400 	.word	0x58024400

08001cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0bc      	sub	sp, #240	@ 0xf0
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	22b8      	movs	r2, #184	@ 0xb8
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00d fb05 	bl	800f2f4 <memset>
  if(hi2c->Instance==I2C1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a74      	ldr	r2, [pc, #464]	@ (8001ec0 <HAL_I2C_MspInit+0x1fc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d147      	bne.n	8001d84 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cf4:	f04f 0208 	mov.w	r2, #8
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 f8c6 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001d16:	f7ff ffb5 	bl	8001c84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d20:	4a68      	ldr	r2, [pc, #416]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d2a:	4b66      	ldr	r3, [pc, #408]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d38:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001d3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d40:	2312      	movs	r3, #18
 8001d42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d52:	2304      	movs	r3, #4
 8001d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	485a      	ldr	r0, [pc, #360]	@ (8001ec8 <HAL_I2C_MspInit+0x204>)
 8001d60:	f001 fdac 	bl	80038bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d64:	4b57      	ldr	r3, [pc, #348]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6a:	4a56      	ldr	r2, [pc, #344]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001d6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d74:	4b53      	ldr	r3, [pc, #332]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d82:	e098      	b.n	8001eb6 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a50      	ldr	r2, [pc, #320]	@ (8001ecc <HAL_I2C_MspInit+0x208>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d147      	bne.n	8001e1e <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d8e:	f04f 0208 	mov.w	r2, #8
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da0:	f107 0320 	add.w	r3, r7, #32
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 f879 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001db0:	f7ff ff68 	bl	8001c84 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	4b43      	ldr	r3, [pc, #268]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dba:	4a42      	ldr	r2, [pc, #264]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dd2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dda:	2312      	movs	r3, #18
 8001ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dec:	2304      	movs	r3, #4
 8001dee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001df6:	4619      	mov	r1, r3
 8001df8:	4833      	ldr	r0, [pc, #204]	@ (8001ec8 <HAL_I2C_MspInit+0x204>)
 8001dfa:	f001 fd5f 	bl	80038bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dfe:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e04:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001e06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
}
 8001e1c:	e04b      	b.n	8001eb6 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a2b      	ldr	r2, [pc, #172]	@ (8001ed0 <HAL_I2C_MspInit+0x20c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d146      	bne.n	8001eb6 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001e28:	f04f 0210 	mov.w	r2, #16
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 f82c 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8001e4a:	f7ff ff1b 	bl	8001c84 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e54:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001e6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e86:	2304      	movs	r3, #4
 8001e88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e90:	4619      	mov	r1, r3
 8001e92:	4810      	ldr	r0, [pc, #64]	@ (8001ed4 <HAL_I2C_MspInit+0x210>)
 8001e94:	f001 fd12 	bl	80038bc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_I2C_MspInit+0x200>)
 8001eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
}
 8001eb6:	bf00      	nop
 8001eb8:	37f0      	adds	r7, #240	@ 0xf0
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58020400 	.word	0x58020400
 8001ecc:	40005800 	.word	0x40005800
 8001ed0:	58001c00 	.word	0x58001c00
 8001ed4:	58020c00 	.word	0x58020c00

08001ed8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0b0      	sub	sp, #192	@ 0xc0
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	22b8      	movs	r2, #184	@ 0xb8
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00d fa03 	bl	800f2f4 <memset>
  if(hrtc->Instance==RTC)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a10      	ldr	r2, [pc, #64]	@ (8001f34 <HAL_RTC_MspInit+0x5c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d119      	bne.n	8001f2c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ef8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0c:	f107 0308 	add.w	r3, r7, #8
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 ffc3 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001f1c:	f7ff feb2 	bl	8001c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <HAL_RTC_MspInit+0x60>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f24:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <HAL_RTC_MspInit+0x60>)
 8001f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f2a:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001f2c:	bf00      	nop
 8001f2e:	37c0      	adds	r7, #192	@ 0xc0
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	58004000 	.word	0x58004000
 8001f38:	58024400 	.word	0x58024400

08001f3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0ba      	sub	sp, #232	@ 0xe8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	22b8      	movs	r2, #184	@ 0xb8
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f00d f9c9 	bl	800f2f4 <memset>
  if(hsd->Instance==SDMMC1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a38      	ldr	r2, [pc, #224]	@ (8002048 <HAL_SD_MspInit+0x10c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d169      	bne.n	8002040 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001f6c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 ff8b 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001f8c:	f7ff fe7a 	bl	8001c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f90:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <HAL_SD_MspInit+0x110>)
 8001f92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f96:	4a2d      	ldr	r2, [pc, #180]	@ (800204c <HAL_SD_MspInit+0x110>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <HAL_SD_MspInit+0x110>)
 8001fa2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_SD_MspInit+0x110>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb4:	4a25      	ldr	r2, [pc, #148]	@ (800204c <HAL_SD_MspInit+0x110>)
 8001fb6:	f043 0308 	orr.w	r3, r3, #8
 8001fba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_SD_MspInit+0x110>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_SD_MspInit+0x110>)
 8001fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800204c <HAL_SD_MspInit+0x110>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_SD_MspInit+0x110>)
 8001fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fea:	2304      	movs	r3, #4
 8001fec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002002:	230c      	movs	r3, #12
 8002004:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002008:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800200c:	4619      	mov	r1, r3
 800200e:	4810      	ldr	r0, [pc, #64]	@ (8002050 <HAL_SD_MspInit+0x114>)
 8002010:	f001 fc54 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8002014:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002018:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800202e:	230c      	movs	r3, #12
 8002030:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002034:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002038:	4619      	mov	r1, r3
 800203a:	4806      	ldr	r0, [pc, #24]	@ (8002054 <HAL_SD_MspInit+0x118>)
 800203c:	f001 fc3e 	bl	80038bc <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002040:	bf00      	nop
 8002042:	37e8      	adds	r7, #232	@ 0xe8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	52007000 	.word	0x52007000
 800204c:	58024400 	.word	0x58024400
 8002050:	58020c00 	.word	0x58020c00
 8002054:	58020800 	.word	0x58020800

08002058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0be      	sub	sp, #248	@ 0xf8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002070:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002074:	22b8      	movs	r2, #184	@ 0xb8
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f00d f93b 	bl	800f2f4 <memset>
  if(hspi->Instance==SPI1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a97      	ldr	r2, [pc, #604]	@ (80022e0 <HAL_SPI_MspInit+0x288>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d16a      	bne.n	800215e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002088:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fefc 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80020aa:	f7ff fdeb 	bl	8001c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ae:	4b8d      	ldr	r3, [pc, #564]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80020b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020b4:	4a8b      	ldr	r2, [pc, #556]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80020b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020be:	4b89      	ldr	r3, [pc, #548]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80020c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4b85      	ldr	r3, [pc, #532]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d2:	4a84      	ldr	r2, [pc, #528]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020dc:	4b81      	ldr	r3, [pc, #516]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	4b7e      	ldr	r3, [pc, #504]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f0:	4a7c      	ldr	r2, [pc, #496]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020fa:	4b7a      	ldr	r3, [pc, #488]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002108:	2310      	movs	r3, #16
 800210a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002120:	2305      	movs	r3, #5
 8002122:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002126:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800212a:	4619      	mov	r1, r3
 800212c:	486e      	ldr	r0, [pc, #440]	@ (80022e8 <HAL_SPI_MspInit+0x290>)
 800212e:	f001 fbc5 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002132:	23a0      	movs	r3, #160	@ 0xa0
 8002134:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800214a:	2305      	movs	r3, #5
 800214c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002154:	4619      	mov	r1, r3
 8002156:	4865      	ldr	r0, [pc, #404]	@ (80022ec <HAL_SPI_MspInit+0x294>)
 8002158:	f001 fbb0 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800215c:	e0bb      	b.n	80022d6 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a63      	ldr	r2, [pc, #396]	@ (80022f0 <HAL_SPI_MspInit+0x298>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d16b      	bne.n	8002240 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002168:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fe8c 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_SPI_MspInit+0x136>
      Error_Handler();
 800218a:	f7ff fd7b 	bl	8001c84 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800218e:	4b55      	ldr	r3, [pc, #340]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 8002190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002194:	4a53      	ldr	r2, [pc, #332]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 8002196:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800219a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800219e:	4b51      	ldr	r3, [pc, #324]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80021a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	4b4d      	ldr	r3, [pc, #308]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b2:	4a4c      	ldr	r2, [pc, #304]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021bc:	4b49      	ldr	r3, [pc, #292]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ca:	4b46      	ldr	r3, [pc, #280]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d0:	4a44      	ldr	r2, [pc, #272]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021da:	4b42      	ldr	r3, [pc, #264]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002202:	2305      	movs	r3, #5
 8002204:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800220c:	4619      	mov	r1, r3
 800220e:	4837      	ldr	r0, [pc, #220]	@ (80022ec <HAL_SPI_MspInit+0x294>)
 8002210:	f001 fb54 	bl	80038bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8002214:	2306      	movs	r3, #6
 8002216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800222c:	2305      	movs	r3, #5
 800222e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002232:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002236:	4619      	mov	r1, r3
 8002238:	482e      	ldr	r0, [pc, #184]	@ (80022f4 <HAL_SPI_MspInit+0x29c>)
 800223a:	f001 fb3f 	bl	80038bc <HAL_GPIO_Init>
}
 800223e:	e04a      	b.n	80022d6 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2c      	ldr	r2, [pc, #176]	@ (80022f8 <HAL_SPI_MspInit+0x2a0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d145      	bne.n	80022d6 <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800224a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fe1b 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 800226c:	f7ff fd0a 	bl	8001c84 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002270:	4b1c      	ldr	r3, [pc, #112]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 8002272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002276:	4a1b      	ldr	r2, [pc, #108]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 8002278:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800227c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002280:	4b18      	ldr	r3, [pc, #96]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 8002282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 8002290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002294:	4a13      	ldr	r2, [pc, #76]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 8002296:	f043 0310 	orr.w	r3, r3, #16
 800229a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_SPI_MspInit+0x28c>)
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80022ac:	2364      	movs	r3, #100	@ 0x64
 80022ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80022c4:	2305      	movs	r3, #5
 80022c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80022ce:	4619      	mov	r1, r3
 80022d0:	480a      	ldr	r0, [pc, #40]	@ (80022fc <HAL_SPI_MspInit+0x2a4>)
 80022d2:	f001 faf3 	bl	80038bc <HAL_GPIO_Init>
}
 80022d6:	bf00      	nop
 80022d8:	37f8      	adds	r7, #248	@ 0xf8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40013000 	.word	0x40013000
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58020400 	.word	0x58020400
 80022ec:	58020000 	.word	0x58020000
 80022f0:	40003800 	.word	0x40003800
 80022f4:	58020800 	.word	0x58020800
 80022f8:	40013400 	.word	0x40013400
 80022fc:	58021000 	.word	0x58021000

08002300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0e      	ldr	r2, [pc, #56]	@ (8002348 <HAL_TIM_Base_MspInit+0x48>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d116      	bne.n	8002340 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_TIM_Base_MspInit+0x4c>)
 8002314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002318:	4a0c      	ldr	r2, [pc, #48]	@ (800234c <HAL_TIM_Base_MspInit+0x4c>)
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002322:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <HAL_TIM_Base_MspInit+0x4c>)
 8002324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2036      	movs	r0, #54	@ 0x36
 8002336:	f000 fcbd 	bl	8002cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800233a:	2036      	movs	r0, #54	@ 0x36
 800233c:	f000 fcd4 	bl	8002ce8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40001000 	.word	0x40001000
 800234c:	58024400 	.word	0x58024400

08002350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0ba      	sub	sp, #232	@ 0xe8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002368:	f107 0318 	add.w	r3, r7, #24
 800236c:	22b8      	movs	r2, #184	@ 0xb8
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f00c ffbf 	bl	800f2f4 <memset>
  if(huart->Instance==UART8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a51      	ldr	r2, [pc, #324]	@ (80024c0 <HAL_UART_MspInit+0x170>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d14e      	bne.n	800241e <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002380:	f04f 0202 	mov.w	r2, #2
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002392:	f107 0318 	add.w	r3, r7, #24
 8002396:	4618      	mov	r0, r3
 8002398:	f002 fd80 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023a2:	f7ff fc6f 	bl	8001c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80023a6:	4b47      	ldr	r3, [pc, #284]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 80023a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023ac:	4a45      	ldr	r2, [pc, #276]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 80023ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023b6:	4b43      	ldr	r3, [pc, #268]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 80023b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c4:	4b3f      	ldr	r3, [pc, #252]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 80023c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ca:	4a3e      	ldr	r2, [pc, #248]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 80023cc:	f043 0310 	orr.w	r3, r3, #16
 80023d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d4:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 80023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80023e2:	2303      	movs	r3, #3
 80023e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80023fa:	2308      	movs	r3, #8
 80023fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002400:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002404:	4619      	mov	r1, r3
 8002406:	4830      	ldr	r0, [pc, #192]	@ (80024c8 <HAL_UART_MspInit+0x178>)
 8002408:	f001 fa58 	bl	80038bc <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	2053      	movs	r0, #83	@ 0x53
 8002412:	f000 fc4f 	bl	8002cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002416:	2053      	movs	r0, #83	@ 0x53
 8002418:	f000 fc66 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800241c:	e04b      	b.n	80024b6 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2a      	ldr	r2, [pc, #168]	@ (80024cc <HAL_UART_MspInit+0x17c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d146      	bne.n	80024b6 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002428:	f04f 0201 	mov.w	r2, #1
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243a:	f107 0318 	add.w	r3, r7, #24
 800243e:	4618      	mov	r0, r3
 8002440:	f002 fd2c 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_UART_MspInit+0xfe>
      Error_Handler();
 800244a:	f7ff fc1b 	bl	8001c84 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 8002450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002454:	4a1b      	ldr	r2, [pc, #108]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 8002456:	f043 0310 	orr.w	r3, r3, #16
 800245a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800245e:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 8002460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246c:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002472:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <HAL_UART_MspInit+0x174>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800248a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800248e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024a4:	2307      	movs	r3, #7
 80024a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024ae:	4619      	mov	r1, r3
 80024b0:	4807      	ldr	r0, [pc, #28]	@ (80024d0 <HAL_UART_MspInit+0x180>)
 80024b2:	f001 fa03 	bl	80038bc <HAL_GPIO_Init>
}
 80024b6:	bf00      	nop
 80024b8:	37e8      	adds	r7, #232	@ 0xe8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40007c00 	.word	0x40007c00
 80024c4:	58024400 	.word	0x58024400
 80024c8:	58021000 	.word	0x58021000
 80024cc:	40011000 	.word	0x40011000
 80024d0:	58020000 	.word	0x58020000

080024d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b090      	sub	sp, #64	@ 0x40
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	d827      	bhi.n	8002532 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	2037      	movs	r0, #55	@ 0x37
 80024e8:	f000 fbe4 	bl	8002cb4 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80024ec:	2037      	movs	r0, #55	@ 0x37
 80024ee:	f000 fbfb 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80024f2:	4a29      	ldr	r2, [pc, #164]	@ (8002598 <HAL_InitTick+0xc4>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80024f8:	4b28      	ldr	r3, [pc, #160]	@ (800259c <HAL_InitTick+0xc8>)
 80024fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024fe:	4a27      	ldr	r2, [pc, #156]	@ (800259c <HAL_InitTick+0xc8>)
 8002500:	f043 0320 	orr.w	r3, r3, #32
 8002504:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002508:	4b24      	ldr	r3, [pc, #144]	@ (800259c <HAL_InitTick+0xc8>)
 800250a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002516:	f107 0210 	add.w	r2, r7, #16
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f002 fc79 	bl	8004e18 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002528:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <HAL_InitTick+0x6a>
 8002530:	e001      	b.n	8002536 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e02b      	b.n	800258e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002536:	f002 fc43 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 800253a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800253c:	e004      	b.n	8002548 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800253e:	f002 fc3f 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 8002542:	4603      	mov	r3, r0
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254a:	4a15      	ldr	r2, [pc, #84]	@ (80025a0 <HAL_InitTick+0xcc>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	0c9b      	lsrs	r3, r3, #18
 8002552:	3b01      	subs	r3, #1
 8002554:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002556:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <HAL_InitTick+0xd0>)
 8002558:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <HAL_InitTick+0xd4>)
 800255a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_InitTick+0xd0>)
 800255e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002562:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002564:	4a0f      	ldr	r2, [pc, #60]	@ (80025a4 <HAL_InitTick+0xd0>)
 8002566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002568:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <HAL_InitTick+0xd0>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <HAL_InitTick+0xd0>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002576:	480b      	ldr	r0, [pc, #44]	@ (80025a4 <HAL_InitTick+0xd0>)
 8002578:	f006 ffc5 	bl	8009506 <HAL_TIM_Base_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002582:	4808      	ldr	r0, [pc, #32]	@ (80025a4 <HAL_InitTick+0xd0>)
 8002584:	f007 f816 	bl	80095b4 <HAL_TIM_Base_Start_IT>
 8002588:	4603      	mov	r3, r0
 800258a:	e000      	b.n	800258e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	3740      	adds	r7, #64	@ 0x40
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	24000010 	.word	0x24000010
 800259c:	58024400 	.word	0x58024400
 80025a0:	431bde83 	.word	0x431bde83
 80025a4:	240008f8 	.word	0x240008f8
 80025a8:	40001400 	.word	0x40001400

080025ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <NMI_Handler+0x4>

080025b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <HardFault_Handler+0x4>

080025bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <MemManage_Handler+0x4>

080025c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <BusFault_Handler+0x4>

080025cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <UsageFault_Handler+0x4>

080025d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <TIM6_DAC_IRQHandler+0x10>)
 8002612:	f007 f855 	bl	80096c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	24000784 	.word	0x24000784

08002620 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <TIM7_IRQHandler+0x10>)
 8002626:	f007 f84b 	bl	80096c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	240008f8 	.word	0x240008f8

08002634 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <UART8_IRQHandler+0x10>)
 800263a:	f007 fb79 	bl	8009d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	240007d0 	.word	0x240007d0

08002648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_kill>:

int _kill(int pid, int sig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002662:	f00c fea9 	bl	800f3b8 <__errno>
 8002666:	4603      	mov	r3, r0
 8002668:	2216      	movs	r2, #22
 800266a:	601a      	str	r2, [r3, #0]
  return -1;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_exit>:

void _exit (int status)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002680:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffe7 	bl	8002658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <_exit+0x12>

0800268e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e00a      	b.n	80026b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a0:	f3af 8000 	nop.w
 80026a4:	4601      	mov	r1, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	60ba      	str	r2, [r7, #8]
 80026ac:	b2ca      	uxtb	r2, r1
 80026ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	dbf0      	blt.n	80026a0 <_read+0x12>
  }

  return len;
 80026be:	687b      	ldr	r3, [r7, #4]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f0:	605a      	str	r2, [r3, #4]
  return 0;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_isatty>:

int _isatty(int file)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002738:	4a14      	ldr	r2, [pc, #80]	@ (800278c <_sbrk+0x5c>)
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <_sbrk+0x60>)
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <_sbrk+0x64>)
 800274e:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <_sbrk+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d207      	bcs.n	8002770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002760:	f00c fe2a 	bl	800f3b8 <__errno>
 8002764:	4603      	mov	r3, r0
 8002766:	220c      	movs	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800276e:	e009      	b.n	8002784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002776:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	4a05      	ldr	r2, [pc, #20]	@ (8002794 <_sbrk+0x64>)
 8002780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	24050000 	.word	0x24050000
 8002790:	00000400 	.word	0x00000400
 8002794:	24000944 	.word	0x24000944
 8002798:	24000e08 	.word	0x24000e08

0800279c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027a0:	4b32      	ldr	r3, [pc, #200]	@ (800286c <SystemInit+0xd0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	4a31      	ldr	r2, [pc, #196]	@ (800286c <SystemInit+0xd0>)
 80027a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002870 <SystemInit+0xd4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d807      	bhi.n	80027cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002870 <SystemInit+0xd4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 030f 	bic.w	r3, r3, #15
 80027c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002870 <SystemInit+0xd4>)
 80027c6:	f043 0307 	orr.w	r3, r3, #7
 80027ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027cc:	4b29      	ldr	r3, [pc, #164]	@ (8002874 <SystemInit+0xd8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <SystemInit+0xd8>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027d8:	4b26      	ldr	r3, [pc, #152]	@ (8002874 <SystemInit+0xd8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027de:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <SystemInit+0xd8>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4924      	ldr	r1, [pc, #144]	@ (8002874 <SystemInit+0xd8>)
 80027e4:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <SystemInit+0xdc>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027ea:	4b21      	ldr	r3, [pc, #132]	@ (8002870 <SystemInit+0xd4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002870 <SystemInit+0xd4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 030f 	bic.w	r3, r3, #15
 80027fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002870 <SystemInit+0xd4>)
 8002800:	f043 0307 	orr.w	r3, r3, #7
 8002804:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002806:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <SystemInit+0xd8>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <SystemInit+0xd8>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <SystemInit+0xd8>)
 8002814:	2200      	movs	r2, #0
 8002816:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002818:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <SystemInit+0xd8>)
 800281a:	4a18      	ldr	r2, [pc, #96]	@ (800287c <SystemInit+0xe0>)
 800281c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <SystemInit+0xd8>)
 8002820:	4a17      	ldr	r2, [pc, #92]	@ (8002880 <SystemInit+0xe4>)
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002824:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <SystemInit+0xd8>)
 8002826:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <SystemInit+0xe8>)
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800282a:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <SystemInit+0xd8>)
 800282c:	2200      	movs	r2, #0
 800282e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002830:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <SystemInit+0xd8>)
 8002832:	4a14      	ldr	r2, [pc, #80]	@ (8002884 <SystemInit+0xe8>)
 8002834:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002836:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <SystemInit+0xd8>)
 8002838:	2200      	movs	r2, #0
 800283a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800283c:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <SystemInit+0xd8>)
 800283e:	4a11      	ldr	r2, [pc, #68]	@ (8002884 <SystemInit+0xe8>)
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002842:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <SystemInit+0xd8>)
 8002844:	2200      	movs	r2, #0
 8002846:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002848:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <SystemInit+0xd8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a09      	ldr	r2, [pc, #36]	@ (8002874 <SystemInit+0xd8>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002852:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002854:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <SystemInit+0xd8>)
 8002856:	2200      	movs	r2, #0
 8002858:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800285a:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <SystemInit+0xec>)
 800285c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002860:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00
 8002870:	52002000 	.word	0x52002000
 8002874:	58024400 	.word	0x58024400
 8002878:	eaf6ed7f 	.word	0xeaf6ed7f
 800287c:	02020200 	.word	0x02020200
 8002880:	01ff0000 	.word	0x01ff0000
 8002884:	01010280 	.word	0x01010280
 8002888:	52004000 	.word	0x52004000

0800288c <SensorManager_Init>:
//    {MS5607_Init, "MS5607"},
    {GPS_Init, "ATGM336H"}
};


telemetry_init_status SensorManager_Init(void) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
    printf("Sensors Initialization routine started.\n");
 8002892:	4826      	ldr	r0, [pc, #152]	@ (800292c <SensorManager_Init+0xa0>)
 8002894:	f00c fcfe 	bl	800f294 <puts>

    size_t num_sensors = sizeof(sensors) / sizeof(sensors[0]);
 8002898:	2301      	movs	r3, #1
 800289a:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 80028a0:	2300      	movs	r3, #0
 80028a2:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	e024      	b.n	80028f4 <SensorManager_Init+0x68>
        int8_t status = sensors[i].init_function();
 80028aa:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <SensorManager_Init+0xa4>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028b2:	4798      	blx	r3
 80028b4:	4603      	mov	r3, r0
 80028b6:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 80028b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <SensorManager_Init+0x4c>
            printf("%s initialization failed.\n", sensors[i].sensor_name);
 80028c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002930 <SensorManager_Init+0xa4>)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4819      	ldr	r0, [pc, #100]	@ (8002934 <SensorManager_Init+0xa8>)
 80028ce:	f00c fc79 	bl	800f1c4 <iprintf>
            all_success = false;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e00a      	b.n	80028ee <SensorManager_Init+0x62>
        } else {
            printf("[%s] device found! Initialization succeeded.\n", sensors[i].sensor_name);
 80028d8:	4a15      	ldr	r2, [pc, #84]	@ (8002930 <SensorManager_Init+0xa4>)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4814      	ldr	r0, [pc, #80]	@ (8002938 <SensorManager_Init+0xac>)
 80028e6:	f00c fc6d 	bl	800f1c4 <iprintf>
            any_success = true;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3301      	adds	r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d3d6      	bcc.n	80028aa <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <SensorManager_Init+0x80>
        printf("All sensors initialized successfully.\n");
 8002902:	480e      	ldr	r0, [pc, #56]	@ (800293c <SensorManager_Init+0xb0>)
 8002904:	f00c fcc6 	bl	800f294 <puts>
        return TELEMETRY_INIT_SUCCESS;
 8002908:	2300      	movs	r3, #0
 800290a:	e00b      	b.n	8002924 <SensorManager_Init+0x98>
    } else if (any_success) {
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <SensorManager_Init+0x90>
        printf("Partial initialization success.\n");
 8002912:	480b      	ldr	r0, [pc, #44]	@ (8002940 <SensorManager_Init+0xb4>)
 8002914:	f00c fcbe 	bl	800f294 <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 8002918:	2301      	movs	r3, #1
 800291a:	e003      	b.n	8002924 <SensorManager_Init+0x98>
    } else {
        printf("All sensors initialization failed.\n");
 800291c:	4809      	ldr	r0, [pc, #36]	@ (8002944 <SensorManager_Init+0xb8>)
 800291e:	f00c fcb9 	bl	800f294 <puts>
        return TELEMETRY_INIT_FAILURE;
 8002922:	2302      	movs	r3, #2
    }
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	0801293c 	.word	0x0801293c
 8002930:	24000008 	.word	0x24000008
 8002934:	08012964 	.word	0x08012964
 8002938:	08012980 	.word	0x08012980
 800293c:	080129b0 	.word	0x080129b0
 8002940:	080129d8 	.word	0x080129d8
 8002944:	080129f8 	.word	0x080129f8

08002948 <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800294e:	af00      	add	r7, sp, #0
 8002950:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
    // Update data from each sensor
//	telemetry.bmi323_data = bmi323_data_poll();
//	telemetry.bno055_data = bno_read_fusion_data();
//	telemetry.bme680_data = bme680_data_poll();
//    telemetry.ms5607_data = MS5607_ReadData();
    telemetry.gps_data = GPS_Data_Reception();
 8002954:	4c0a      	ldr	r4, [pc, #40]	@ (8002980 <SensorManager_UpdateData+0x38>)
 8002956:	463b      	mov	r3, r7
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe fb97 	bl	800108c <GPS_Data_Reception>
 800295e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002962:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 8002966:	f104 03d8 	add.w	r3, r4, #216	@ 0xd8
 800296a:	4611      	mov	r1, r2
 800296c:	f44f 7214 	mov.w	r2, #592	@ 0x250
 8002970:	4618      	mov	r0, r3
 8002972:	f00c fd4e 	bl	800f412 <memcpy>

    //FOR VERSION 2 OF ARGUS
//    ASM330LHH_ReadData(&data->asm330lhh_data);
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);

}
 8002976:	bf00      	nop
 8002978:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}
 8002980:	24000948 	.word	0x24000948

08002984 <delay_us_func>:

void delay_us_func(uint32_t period)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 800298c:	e008      	b.n	80029a0 <delay_us_func+0x1c>
	{
		for(i = 0; i < 96; i++)
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e002      	b.n	800299a <delay_us_func+0x16>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b5f      	cmp	r3, #95	@ 0x5f
 800299e:	d9f9      	bls.n	8002994 <delay_us_func+0x10>
	while(period--)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1e5a      	subs	r2, r3, #1
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f1      	bne.n	800298e <delay_us_func+0xa>
		{
			;
		}
	}
}
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <TestTelemetry>:
             sDate.Date, sDate.Month, 2000 + sDate.Year,
             sTime.Hours, sTime.Minutes, sTime.Seconds);
}


void TestTelemetry(){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
    //char timeBuffer[30];

	//HAL_TIM_Base_Start_IT(&htim6);
	for(int i = 0; i < 10000 ; i++){
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	e009      	b.n	80029d8 <TestTelemetry+0x20>
        //printf("Current Time: %s\n", timeBuffer);

        //printf("// --------------------------------------------- // \n");

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 80029c4:	4809      	ldr	r0, [pc, #36]	@ (80029ec <TestTelemetry+0x34>)
 80029c6:	f7ff ffbf 	bl	8002948 <SensorManager_UpdateData>

	//printf("// --------------------------------------------- // \n");

	//DELAY BETWEEN READINGS TO DESIGN CORRECTLY
//    HAL_Delay(150);
    delay_us_func(50000);  //50 ms
 80029ca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80029ce:	f7ff ffd9 	bl	8002984 <delay_us_func>
	for(int i = 0; i < 10000 ; i++){
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3301      	adds	r3, #1
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80029de:	4293      	cmp	r3, r2
 80029e0:	ddf0      	ble.n	80029c4 <TestTelemetry+0xc>
//    delay_us_func(100000); //100 ms
//    delay_us_func(200000); //200 ms
//      delay_us_func(1000000); //1 s
    	}
}
 80029e2:	bf00      	nop
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	24000948 	.word	0x24000948

080029f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029f4:	f7ff fed2 	bl	800279c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029f8:	480c      	ldr	r0, [pc, #48]	@ (8002a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029fa:	490d      	ldr	r1, [pc, #52]	@ (8002a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a00:	e002      	b.n	8002a08 <LoopCopyDataInit>

08002a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a06:	3304      	adds	r3, #4

08002a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a0c:	d3f9      	bcc.n	8002a02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a10:	4c0a      	ldr	r4, [pc, #40]	@ (8002a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a14:	e001      	b.n	8002a1a <LoopFillZerobss>

08002a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a18:	3204      	adds	r2, #4

08002a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a1c:	d3fb      	bcc.n	8002a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a1e:	f00c fcd1 	bl	800f3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a22:	f7fe fc3c 	bl	800129e <main>
  bx  lr
 8002a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a28:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a30:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002a34:	08012ef8 	.word	0x08012ef8
  ldr r2, =_sbss
 8002a38:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002a3c:	24000e04 	.word	0x24000e04

08002a40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a40:	e7fe      	b.n	8002a40 <ADC3_IRQHandler>
	...

08002a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a4a:	2003      	movs	r0, #3
 8002a4c:	f000 f927 	bl	8002c9e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a50:	f002 f80c 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_Init+0x68>)
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	4913      	ldr	r1, [pc, #76]	@ (8002ab0 <HAL_Init+0x6c>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <HAL_Init+0x68>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab0 <HAL_Init+0x6c>)
 8002a78:	5cd3      	ldrb	r3, [r2, r3]
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <HAL_Init+0x70>)
 8002a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a88:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab8 <HAL_Init+0x74>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7ff fd20 	bl	80024d4 <HAL_InitTick>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e002      	b.n	8002aa4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a9e:	f7ff f8f7 	bl	8001c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	08012a48 	.word	0x08012a48
 8002ab4:	24000004 	.word	0x24000004
 8002ab8:	24000000 	.word	0x24000000

08002abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_IncTick+0x20>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_IncTick+0x24>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <HAL_IncTick+0x24>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	24000014 	.word	0x24000014
 8002ae0:	24000ca0 	.word	0x24000ca0

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	24000ca0 	.word	0x24000ca0

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff ffee 	bl	8002ae4 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b14:	d005      	beq.n	8002b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_Delay+0x44>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b22:	bf00      	nop
 8002b24:	f7ff ffde 	bl	8002ae4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d8f7      	bhi.n	8002b24 <HAL_Delay+0x28>
  {
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	24000014 	.word	0x24000014

08002b44 <__NVIC_SetPriorityGrouping>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x40>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b72:	4a04      	ldr	r2, [pc, #16]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x40>)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60d3      	str	r3, [r2, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00
 8002b88:	05fa0000 	.word	0x05fa0000

08002b8c <__NVIC_GetPriorityGrouping>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	@ (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	@ (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	@ (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	@ (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	@ 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ff4c 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc2:	f7ff ff63 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002cc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	6978      	ldr	r0, [r7, #20]
 8002cce:	f7ff ffb3 	bl	8002c38 <NVIC_EncodePriority>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff82 	bl	8002be4 <__NVIC_SetPriority>
}
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff56 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002d08:	f3bf 8f5f 	dmb	sy
}
 8002d0c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <HAL_MPU_Disable+0x28>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	4a06      	ldr	r2, [pc, #24]	@ (8002d2c <HAL_MPU_Disable+0x28>)
 8002d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d18:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_MPU_Disable+0x2c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	605a      	str	r2, [r3, #4]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00
 8002d30:	e000ed90 	.word	0xe000ed90

08002d34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d6c <HAL_MPU_Enable+0x38>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d46:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_MPU_Enable+0x3c>)
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	4a09      	ldr	r2, [pc, #36]	@ (8002d70 <HAL_MPU_Enable+0x3c>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d52:	f3bf 8f4f 	dsb	sy
}
 8002d56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d58:	f3bf 8f6f 	isb	sy
}
 8002d5c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed90 	.word	0xe000ed90
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	785a      	ldrb	r2, [r3, #1]
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_MPU_ConfigRegion+0x7c>)
 8002d82:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d84:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <HAL_MPU_ConfigRegion+0x7c>)
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	4a19      	ldr	r2, [pc, #100]	@ (8002df0 <HAL_MPU_ConfigRegion+0x7c>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002d90:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <HAL_MPU_ConfigRegion+0x7c>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7b1b      	ldrb	r3, [r3, #12]
 8002d9c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7adb      	ldrb	r3, [r3, #11]
 8002da2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002da4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7a9b      	ldrb	r3, [r3, #10]
 8002daa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002dac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7b5b      	ldrb	r3, [r3, #13]
 8002db2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002db4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7b9b      	ldrb	r3, [r3, #14]
 8002dba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002dbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7bdb      	ldrb	r3, [r3, #15]
 8002dc2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7a5b      	ldrb	r3, [r3, #9]
 8002dca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7a1b      	ldrb	r3, [r3, #8]
 8002dd2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dd4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ddc:	4a04      	ldr	r2, [pc, #16]	@ (8002df0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dde:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002de0:	6113      	str	r3, [r2, #16]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000ed90 	.word	0xe000ed90

08002df4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff fe72 	bl	8002ae4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e2dc      	b.n	80033c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d008      	beq.n	8002e2a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2280      	movs	r2, #128	@ 0x80
 8002e1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e2cd      	b.n	80033c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a76      	ldr	r2, [pc, #472]	@ (8003008 <HAL_DMA_Abort+0x214>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d04a      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a74      	ldr	r2, [pc, #464]	@ (800300c <HAL_DMA_Abort+0x218>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d045      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a73      	ldr	r2, [pc, #460]	@ (8003010 <HAL_DMA_Abort+0x21c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d040      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a71      	ldr	r2, [pc, #452]	@ (8003014 <HAL_DMA_Abort+0x220>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d03b      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a70      	ldr	r2, [pc, #448]	@ (8003018 <HAL_DMA_Abort+0x224>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d036      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6e      	ldr	r2, [pc, #440]	@ (800301c <HAL_DMA_Abort+0x228>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d031      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6d      	ldr	r2, [pc, #436]	@ (8003020 <HAL_DMA_Abort+0x22c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d02c      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a6b      	ldr	r2, [pc, #428]	@ (8003024 <HAL_DMA_Abort+0x230>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d027      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a6a      	ldr	r2, [pc, #424]	@ (8003028 <HAL_DMA_Abort+0x234>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a68      	ldr	r2, [pc, #416]	@ (800302c <HAL_DMA_Abort+0x238>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01d      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a67      	ldr	r2, [pc, #412]	@ (8003030 <HAL_DMA_Abort+0x23c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d018      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a65      	ldr	r2, [pc, #404]	@ (8003034 <HAL_DMA_Abort+0x240>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a64      	ldr	r2, [pc, #400]	@ (8003038 <HAL_DMA_Abort+0x244>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00e      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a62      	ldr	r2, [pc, #392]	@ (800303c <HAL_DMA_Abort+0x248>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a61      	ldr	r2, [pc, #388]	@ (8003040 <HAL_DMA_Abort+0x24c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_DMA_Abort+0xd6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a5f      	ldr	r2, [pc, #380]	@ (8003044 <HAL_DMA_Abort+0x250>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <HAL_DMA_Abort+0xda>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_DMA_Abort+0xdc>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 021e 	bic.w	r2, r2, #30
 8002ee2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ef2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	e00a      	b.n	8002f12 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 020e 	bic.w	r2, r2, #14
 8002f0a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a3c      	ldr	r2, [pc, #240]	@ (8003008 <HAL_DMA_Abort+0x214>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d072      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a3a      	ldr	r2, [pc, #232]	@ (800300c <HAL_DMA_Abort+0x218>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d06d      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a39      	ldr	r2, [pc, #228]	@ (8003010 <HAL_DMA_Abort+0x21c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d068      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a37      	ldr	r2, [pc, #220]	@ (8003014 <HAL_DMA_Abort+0x220>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d063      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a36      	ldr	r2, [pc, #216]	@ (8003018 <HAL_DMA_Abort+0x224>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d05e      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a34      	ldr	r2, [pc, #208]	@ (800301c <HAL_DMA_Abort+0x228>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d059      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a33      	ldr	r2, [pc, #204]	@ (8003020 <HAL_DMA_Abort+0x22c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d054      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a31      	ldr	r2, [pc, #196]	@ (8003024 <HAL_DMA_Abort+0x230>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d04f      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a30      	ldr	r2, [pc, #192]	@ (8003028 <HAL_DMA_Abort+0x234>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d04a      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2e      	ldr	r2, [pc, #184]	@ (800302c <HAL_DMA_Abort+0x238>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d045      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003030 <HAL_DMA_Abort+0x23c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d040      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2b      	ldr	r2, [pc, #172]	@ (8003034 <HAL_DMA_Abort+0x240>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d03b      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003038 <HAL_DMA_Abort+0x244>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d036      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a28      	ldr	r2, [pc, #160]	@ (800303c <HAL_DMA_Abort+0x248>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d031      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a27      	ldr	r2, [pc, #156]	@ (8003040 <HAL_DMA_Abort+0x24c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d02c      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a25      	ldr	r2, [pc, #148]	@ (8003044 <HAL_DMA_Abort+0x250>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d027      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a24      	ldr	r2, [pc, #144]	@ (8003048 <HAL_DMA_Abort+0x254>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a22      	ldr	r2, [pc, #136]	@ (800304c <HAL_DMA_Abort+0x258>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a21      	ldr	r2, [pc, #132]	@ (8003050 <HAL_DMA_Abort+0x25c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003054 <HAL_DMA_Abort+0x260>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1e      	ldr	r2, [pc, #120]	@ (8003058 <HAL_DMA_Abort+0x264>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800305c <HAL_DMA_Abort+0x268>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8003060 <HAL_DMA_Abort+0x26c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_DMA_Abort+0x20e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	@ (8003064 <HAL_DMA_Abort+0x270>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d132      	bne.n	8003068 <HAL_DMA_Abort+0x274>
 8003002:	2301      	movs	r3, #1
 8003004:	e031      	b.n	800306a <HAL_DMA_Abort+0x276>
 8003006:	bf00      	nop
 8003008:	40020010 	.word	0x40020010
 800300c:	40020028 	.word	0x40020028
 8003010:	40020040 	.word	0x40020040
 8003014:	40020058 	.word	0x40020058
 8003018:	40020070 	.word	0x40020070
 800301c:	40020088 	.word	0x40020088
 8003020:	400200a0 	.word	0x400200a0
 8003024:	400200b8 	.word	0x400200b8
 8003028:	40020410 	.word	0x40020410
 800302c:	40020428 	.word	0x40020428
 8003030:	40020440 	.word	0x40020440
 8003034:	40020458 	.word	0x40020458
 8003038:	40020470 	.word	0x40020470
 800303c:	40020488 	.word	0x40020488
 8003040:	400204a0 	.word	0x400204a0
 8003044:	400204b8 	.word	0x400204b8
 8003048:	58025408 	.word	0x58025408
 800304c:	5802541c 	.word	0x5802541c
 8003050:	58025430 	.word	0x58025430
 8003054:	58025444 	.word	0x58025444
 8003058:	58025458 	.word	0x58025458
 800305c:	5802546c 	.word	0x5802546c
 8003060:	58025480 	.word	0x58025480
 8003064:	58025494 	.word	0x58025494
 8003068:	2300      	movs	r3, #0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800307c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a6d      	ldr	r2, [pc, #436]	@ (8003238 <HAL_DMA_Abort+0x444>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d04a      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6b      	ldr	r2, [pc, #428]	@ (800323c <HAL_DMA_Abort+0x448>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d045      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6a      	ldr	r2, [pc, #424]	@ (8003240 <HAL_DMA_Abort+0x44c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d040      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a68      	ldr	r2, [pc, #416]	@ (8003244 <HAL_DMA_Abort+0x450>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d03b      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a67      	ldr	r2, [pc, #412]	@ (8003248 <HAL_DMA_Abort+0x454>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d036      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a65      	ldr	r2, [pc, #404]	@ (800324c <HAL_DMA_Abort+0x458>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a64      	ldr	r2, [pc, #400]	@ (8003250 <HAL_DMA_Abort+0x45c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d02c      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a62      	ldr	r2, [pc, #392]	@ (8003254 <HAL_DMA_Abort+0x460>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d027      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a61      	ldr	r2, [pc, #388]	@ (8003258 <HAL_DMA_Abort+0x464>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a5f      	ldr	r2, [pc, #380]	@ (800325c <HAL_DMA_Abort+0x468>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003260 <HAL_DMA_Abort+0x46c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003264 <HAL_DMA_Abort+0x470>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003268 <HAL_DMA_Abort+0x474>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a59      	ldr	r2, [pc, #356]	@ (800326c <HAL_DMA_Abort+0x478>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a58      	ldr	r2, [pc, #352]	@ (8003270 <HAL_DMA_Abort+0x47c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_DMA_Abort+0x32a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a56      	ldr	r2, [pc, #344]	@ (8003274 <HAL_DMA_Abort+0x480>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <HAL_DMA_Abort+0x33c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e007      	b.n	8003140 <HAL_DMA_Abort+0x34c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003140:	e013      	b.n	800316a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003142:	f7ff fccf 	bl	8002ae4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b05      	cmp	r3, #5
 800314e:	d90c      	bls.n	800316a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2203      	movs	r2, #3
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e12d      	b.n	80033c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e5      	bne.n	8003142 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2f      	ldr	r2, [pc, #188]	@ (8003238 <HAL_DMA_Abort+0x444>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2d      	ldr	r2, [pc, #180]	@ (800323c <HAL_DMA_Abort+0x448>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d045      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2c      	ldr	r2, [pc, #176]	@ (8003240 <HAL_DMA_Abort+0x44c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d040      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2a      	ldr	r2, [pc, #168]	@ (8003244 <HAL_DMA_Abort+0x450>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d03b      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a29      	ldr	r2, [pc, #164]	@ (8003248 <HAL_DMA_Abort+0x454>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d036      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a27      	ldr	r2, [pc, #156]	@ (800324c <HAL_DMA_Abort+0x458>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a26      	ldr	r2, [pc, #152]	@ (8003250 <HAL_DMA_Abort+0x45c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a24      	ldr	r2, [pc, #144]	@ (8003254 <HAL_DMA_Abort+0x460>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a23      	ldr	r2, [pc, #140]	@ (8003258 <HAL_DMA_Abort+0x464>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a21      	ldr	r2, [pc, #132]	@ (800325c <HAL_DMA_Abort+0x468>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a20      	ldr	r2, [pc, #128]	@ (8003260 <HAL_DMA_Abort+0x46c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <HAL_DMA_Abort+0x470>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003268 <HAL_DMA_Abort+0x474>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	@ (800326c <HAL_DMA_Abort+0x478>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1a      	ldr	r2, [pc, #104]	@ (8003270 <HAL_DMA_Abort+0x47c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_DMA_Abort+0x422>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <HAL_DMA_Abort+0x480>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_DMA_Abort+0x426>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_DMA_Abort+0x428>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02b      	beq.n	8003278 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003224:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	223f      	movs	r2, #63	@ 0x3f
 8003230:	409a      	lsls	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	e02a      	b.n	800328e <HAL_DMA_Abort+0x49a>
 8003238:	40020010 	.word	0x40020010
 800323c:	40020028 	.word	0x40020028
 8003240:	40020040 	.word	0x40020040
 8003244:	40020058 	.word	0x40020058
 8003248:	40020070 	.word	0x40020070
 800324c:	40020088 	.word	0x40020088
 8003250:	400200a0 	.word	0x400200a0
 8003254:	400200b8 	.word	0x400200b8
 8003258:	40020410 	.word	0x40020410
 800325c:	40020428 	.word	0x40020428
 8003260:	40020440 	.word	0x40020440
 8003264:	40020458 	.word	0x40020458
 8003268:	40020470 	.word	0x40020470
 800326c:	40020488 	.word	0x40020488
 8003270:	400204a0 	.word	0x400204a0
 8003274:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2201      	movs	r2, #1
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a4f      	ldr	r2, [pc, #316]	@ (80033d0 <HAL_DMA_Abort+0x5dc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d072      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4d      	ldr	r2, [pc, #308]	@ (80033d4 <HAL_DMA_Abort+0x5e0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d06d      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4c      	ldr	r2, [pc, #304]	@ (80033d8 <HAL_DMA_Abort+0x5e4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d068      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a4a      	ldr	r2, [pc, #296]	@ (80033dc <HAL_DMA_Abort+0x5e8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d063      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a49      	ldr	r2, [pc, #292]	@ (80033e0 <HAL_DMA_Abort+0x5ec>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d05e      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a47      	ldr	r2, [pc, #284]	@ (80033e4 <HAL_DMA_Abort+0x5f0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d059      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a46      	ldr	r2, [pc, #280]	@ (80033e8 <HAL_DMA_Abort+0x5f4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d054      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a44      	ldr	r2, [pc, #272]	@ (80033ec <HAL_DMA_Abort+0x5f8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04f      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a43      	ldr	r2, [pc, #268]	@ (80033f0 <HAL_DMA_Abort+0x5fc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d04a      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a41      	ldr	r2, [pc, #260]	@ (80033f4 <HAL_DMA_Abort+0x600>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d045      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a40      	ldr	r2, [pc, #256]	@ (80033f8 <HAL_DMA_Abort+0x604>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d040      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3e      	ldr	r2, [pc, #248]	@ (80033fc <HAL_DMA_Abort+0x608>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03b      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a3d      	ldr	r2, [pc, #244]	@ (8003400 <HAL_DMA_Abort+0x60c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d036      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a3b      	ldr	r2, [pc, #236]	@ (8003404 <HAL_DMA_Abort+0x610>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d031      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a3a      	ldr	r2, [pc, #232]	@ (8003408 <HAL_DMA_Abort+0x614>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d02c      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a38      	ldr	r2, [pc, #224]	@ (800340c <HAL_DMA_Abort+0x618>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d027      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a37      	ldr	r2, [pc, #220]	@ (8003410 <HAL_DMA_Abort+0x61c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a35      	ldr	r2, [pc, #212]	@ (8003414 <HAL_DMA_Abort+0x620>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a34      	ldr	r2, [pc, #208]	@ (8003418 <HAL_DMA_Abort+0x624>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a32      	ldr	r2, [pc, #200]	@ (800341c <HAL_DMA_Abort+0x628>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a31      	ldr	r2, [pc, #196]	@ (8003420 <HAL_DMA_Abort+0x62c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a2f      	ldr	r2, [pc, #188]	@ (8003424 <HAL_DMA_Abort+0x630>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2e      	ldr	r2, [pc, #184]	@ (8003428 <HAL_DMA_Abort+0x634>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_DMA_Abort+0x58a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2c      	ldr	r2, [pc, #176]	@ (800342c <HAL_DMA_Abort+0x638>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_DMA_Abort+0x58e>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_DMA_Abort+0x590>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003390:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40020010 	.word	0x40020010
 80033d4:	40020028 	.word	0x40020028
 80033d8:	40020040 	.word	0x40020040
 80033dc:	40020058 	.word	0x40020058
 80033e0:	40020070 	.word	0x40020070
 80033e4:	40020088 	.word	0x40020088
 80033e8:	400200a0 	.word	0x400200a0
 80033ec:	400200b8 	.word	0x400200b8
 80033f0:	40020410 	.word	0x40020410
 80033f4:	40020428 	.word	0x40020428
 80033f8:	40020440 	.word	0x40020440
 80033fc:	40020458 	.word	0x40020458
 8003400:	40020470 	.word	0x40020470
 8003404:	40020488 	.word	0x40020488
 8003408:	400204a0 	.word	0x400204a0
 800340c:	400204b8 	.word	0x400204b8
 8003410:	58025408 	.word	0x58025408
 8003414:	5802541c 	.word	0x5802541c
 8003418:	58025430 	.word	0x58025430
 800341c:	58025444 	.word	0x58025444
 8003420:	58025458 	.word	0x58025458
 8003424:	5802546c 	.word	0x5802546c
 8003428:	58025480 	.word	0x58025480
 800342c:	58025494 	.word	0x58025494

08003430 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e237      	b.n	80038b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d004      	beq.n	8003458 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2280      	movs	r2, #128	@ 0x80
 8003452:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e22c      	b.n	80038b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a5c      	ldr	r2, [pc, #368]	@ (80035d0 <HAL_DMA_Abort_IT+0x1a0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d04a      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a5b      	ldr	r2, [pc, #364]	@ (80035d4 <HAL_DMA_Abort_IT+0x1a4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d045      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a59      	ldr	r2, [pc, #356]	@ (80035d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d040      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a58      	ldr	r2, [pc, #352]	@ (80035dc <HAL_DMA_Abort_IT+0x1ac>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d03b      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a56      	ldr	r2, [pc, #344]	@ (80035e0 <HAL_DMA_Abort_IT+0x1b0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d036      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a55      	ldr	r2, [pc, #340]	@ (80035e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d031      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a53      	ldr	r2, [pc, #332]	@ (80035e8 <HAL_DMA_Abort_IT+0x1b8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02c      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a52      	ldr	r2, [pc, #328]	@ (80035ec <HAL_DMA_Abort_IT+0x1bc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d027      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a50      	ldr	r2, [pc, #320]	@ (80035f0 <HAL_DMA_Abort_IT+0x1c0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d022      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a4f      	ldr	r2, [pc, #316]	@ (80035f4 <HAL_DMA_Abort_IT+0x1c4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01d      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a4d      	ldr	r2, [pc, #308]	@ (80035f8 <HAL_DMA_Abort_IT+0x1c8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d018      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a4c      	ldr	r2, [pc, #304]	@ (80035fc <HAL_DMA_Abort_IT+0x1cc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003600 <HAL_DMA_Abort_IT+0x1d0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a49      	ldr	r2, [pc, #292]	@ (8003604 <HAL_DMA_Abort_IT+0x1d4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d009      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a47      	ldr	r2, [pc, #284]	@ (8003608 <HAL_DMA_Abort_IT+0x1d8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xc8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a46      	ldr	r2, [pc, #280]	@ (800360c <HAL_DMA_Abort_IT+0x1dc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_DMA_Abort_IT+0xcc>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_DMA_Abort_IT+0xce>
 80034fc:	2300      	movs	r3, #0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8086 	beq.w	8003610 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2204      	movs	r2, #4
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2f      	ldr	r2, [pc, #188]	@ (80035d0 <HAL_DMA_Abort_IT+0x1a0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d04a      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2e      	ldr	r2, [pc, #184]	@ (80035d4 <HAL_DMA_Abort_IT+0x1a4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d045      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2c      	ldr	r2, [pc, #176]	@ (80035d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d040      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2b      	ldr	r2, [pc, #172]	@ (80035dc <HAL_DMA_Abort_IT+0x1ac>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d03b      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a29      	ldr	r2, [pc, #164]	@ (80035e0 <HAL_DMA_Abort_IT+0x1b0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d036      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a28      	ldr	r2, [pc, #160]	@ (80035e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d031      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a26      	ldr	r2, [pc, #152]	@ (80035e8 <HAL_DMA_Abort_IT+0x1b8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02c      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a25      	ldr	r2, [pc, #148]	@ (80035ec <HAL_DMA_Abort_IT+0x1bc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d027      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a23      	ldr	r2, [pc, #140]	@ (80035f0 <HAL_DMA_Abort_IT+0x1c0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d022      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a22      	ldr	r2, [pc, #136]	@ (80035f4 <HAL_DMA_Abort_IT+0x1c4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d01d      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a20      	ldr	r2, [pc, #128]	@ (80035f8 <HAL_DMA_Abort_IT+0x1c8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d018      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1f      	ldr	r2, [pc, #124]	@ (80035fc <HAL_DMA_Abort_IT+0x1cc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1d      	ldr	r2, [pc, #116]	@ (8003600 <HAL_DMA_Abort_IT+0x1d0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00e      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1c      	ldr	r2, [pc, #112]	@ (8003604 <HAL_DMA_Abort_IT+0x1d4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1a      	ldr	r2, [pc, #104]	@ (8003608 <HAL_DMA_Abort_IT+0x1d8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_DMA_Abort_IT+0x17c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a19      	ldr	r2, [pc, #100]	@ (800360c <HAL_DMA_Abort_IT+0x1dc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d108      	bne.n	80035be <HAL_DMA_Abort_IT+0x18e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e178      	b.n	80038b0 <HAL_DMA_Abort_IT+0x480>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e16f      	b.n	80038b0 <HAL_DMA_Abort_IT+0x480>
 80035d0:	40020010 	.word	0x40020010
 80035d4:	40020028 	.word	0x40020028
 80035d8:	40020040 	.word	0x40020040
 80035dc:	40020058 	.word	0x40020058
 80035e0:	40020070 	.word	0x40020070
 80035e4:	40020088 	.word	0x40020088
 80035e8:	400200a0 	.word	0x400200a0
 80035ec:	400200b8 	.word	0x400200b8
 80035f0:	40020410 	.word	0x40020410
 80035f4:	40020428 	.word	0x40020428
 80035f8:	40020440 	.word	0x40020440
 80035fc:	40020458 	.word	0x40020458
 8003600:	40020470 	.word	0x40020470
 8003604:	40020488 	.word	0x40020488
 8003608:	400204a0 	.word	0x400204a0
 800360c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 020e 	bic.w	r2, r2, #14
 800361e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6c      	ldr	r2, [pc, #432]	@ (80037d8 <HAL_DMA_Abort_IT+0x3a8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d04a      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6b      	ldr	r2, [pc, #428]	@ (80037dc <HAL_DMA_Abort_IT+0x3ac>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d045      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a69      	ldr	r2, [pc, #420]	@ (80037e0 <HAL_DMA_Abort_IT+0x3b0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d040      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a68      	ldr	r2, [pc, #416]	@ (80037e4 <HAL_DMA_Abort_IT+0x3b4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d03b      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a66      	ldr	r2, [pc, #408]	@ (80037e8 <HAL_DMA_Abort_IT+0x3b8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d036      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a65      	ldr	r2, [pc, #404]	@ (80037ec <HAL_DMA_Abort_IT+0x3bc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d031      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a63      	ldr	r2, [pc, #396]	@ (80037f0 <HAL_DMA_Abort_IT+0x3c0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02c      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a62      	ldr	r2, [pc, #392]	@ (80037f4 <HAL_DMA_Abort_IT+0x3c4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d027      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a60      	ldr	r2, [pc, #384]	@ (80037f8 <HAL_DMA_Abort_IT+0x3c8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a5f      	ldr	r2, [pc, #380]	@ (80037fc <HAL_DMA_Abort_IT+0x3cc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01d      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5d      	ldr	r2, [pc, #372]	@ (8003800 <HAL_DMA_Abort_IT+0x3d0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5c      	ldr	r2, [pc, #368]	@ (8003804 <HAL_DMA_Abort_IT+0x3d4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5a      	ldr	r2, [pc, #360]	@ (8003808 <HAL_DMA_Abort_IT+0x3d8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a59      	ldr	r2, [pc, #356]	@ (800380c <HAL_DMA_Abort_IT+0x3dc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a57      	ldr	r2, [pc, #348]	@ (8003810 <HAL_DMA_Abort_IT+0x3e0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x290>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a56      	ldr	r2, [pc, #344]	@ (8003814 <HAL_DMA_Abort_IT+0x3e4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <HAL_DMA_Abort_IT+0x2a2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e007      	b.n	80036e2 <HAL_DMA_Abort_IT+0x2b2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a3c      	ldr	r2, [pc, #240]	@ (80037d8 <HAL_DMA_Abort_IT+0x3a8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d072      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a3a      	ldr	r2, [pc, #232]	@ (80037dc <HAL_DMA_Abort_IT+0x3ac>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d06d      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a39      	ldr	r2, [pc, #228]	@ (80037e0 <HAL_DMA_Abort_IT+0x3b0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d068      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a37      	ldr	r2, [pc, #220]	@ (80037e4 <HAL_DMA_Abort_IT+0x3b4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d063      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a36      	ldr	r2, [pc, #216]	@ (80037e8 <HAL_DMA_Abort_IT+0x3b8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d05e      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a34      	ldr	r2, [pc, #208]	@ (80037ec <HAL_DMA_Abort_IT+0x3bc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d059      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a33      	ldr	r2, [pc, #204]	@ (80037f0 <HAL_DMA_Abort_IT+0x3c0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d054      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a31      	ldr	r2, [pc, #196]	@ (80037f4 <HAL_DMA_Abort_IT+0x3c4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04f      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a30      	ldr	r2, [pc, #192]	@ (80037f8 <HAL_DMA_Abort_IT+0x3c8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d04a      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2e      	ldr	r2, [pc, #184]	@ (80037fc <HAL_DMA_Abort_IT+0x3cc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d045      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2d      	ldr	r2, [pc, #180]	@ (8003800 <HAL_DMA_Abort_IT+0x3d0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d040      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2b      	ldr	r2, [pc, #172]	@ (8003804 <HAL_DMA_Abort_IT+0x3d4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d03b      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2a      	ldr	r2, [pc, #168]	@ (8003808 <HAL_DMA_Abort_IT+0x3d8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d036      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a28      	ldr	r2, [pc, #160]	@ (800380c <HAL_DMA_Abort_IT+0x3dc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d031      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a27      	ldr	r2, [pc, #156]	@ (8003810 <HAL_DMA_Abort_IT+0x3e0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d02c      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a25      	ldr	r2, [pc, #148]	@ (8003814 <HAL_DMA_Abort_IT+0x3e4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d027      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a24      	ldr	r2, [pc, #144]	@ (8003818 <HAL_DMA_Abort_IT+0x3e8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	@ (800381c <HAL_DMA_Abort_IT+0x3ec>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01d      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a21      	ldr	r2, [pc, #132]	@ (8003820 <HAL_DMA_Abort_IT+0x3f0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003824 <HAL_DMA_Abort_IT+0x3f4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003828 <HAL_DMA_Abort_IT+0x3f8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1c      	ldr	r2, [pc, #112]	@ (800382c <HAL_DMA_Abort_IT+0x3fc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003830 <HAL_DMA_Abort_IT+0x400>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x3a2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a19      	ldr	r2, [pc, #100]	@ (8003834 <HAL_DMA_Abort_IT+0x404>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d132      	bne.n	8003838 <HAL_DMA_Abort_IT+0x408>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e031      	b.n	800383a <HAL_DMA_Abort_IT+0x40a>
 80037d6:	bf00      	nop
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
 8003818:	58025408 	.word	0x58025408
 800381c:	5802541c 	.word	0x5802541c
 8003820:	58025430 	.word	0x58025430
 8003824:	58025444 	.word	0x58025444
 8003828:	58025458 	.word	0x58025458
 800382c:	5802546c 	.word	0x5802546c
 8003830:	58025480 	.word	0x58025480
 8003834:	58025494 	.word	0x58025494
 8003838:	2300      	movs	r3, #0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d028      	beq.n	8003890 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800384c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800386c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003884:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800388e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	@ 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038ca:	4b86      	ldr	r3, [pc, #536]	@ (8003ae4 <HAL_GPIO_Init+0x228>)
 80038cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038ce:	e18c      	b.n	8003bea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	2101      	movs	r1, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa01 f303 	lsl.w	r3, r1, r3
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 817e 	beq.w	8003be4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d005      	beq.n	8003900 <HAL_GPIO_Init+0x44>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d130      	bne.n	8003962 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003936:	2201      	movs	r2, #1
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 0201 	and.w	r2, r3, #1
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b03      	cmp	r3, #3
 800396c:	d017      	beq.n	800399e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d123      	bne.n	80039f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	220f      	movs	r2, #15
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	69b9      	ldr	r1, [r7, #24]
 80039ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	2203      	movs	r2, #3
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0203 	and.w	r2, r3, #3
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80d8 	beq.w	8003be4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a34:	4b2c      	ldr	r3, [pc, #176]	@ (8003ae8 <HAL_GPIO_Init+0x22c>)
 8003a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae8 <HAL_GPIO_Init+0x22c>)
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003a44:	4b28      	ldr	r3, [pc, #160]	@ (8003ae8 <HAL_GPIO_Init+0x22c>)
 8003a46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a52:	4a26      	ldr	r2, [pc, #152]	@ (8003aec <HAL_GPIO_Init+0x230>)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	3302      	adds	r3, #2
 8003a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	220f      	movs	r2, #15
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1d      	ldr	r2, [pc, #116]	@ (8003af0 <HAL_GPIO_Init+0x234>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04a      	beq.n	8003b14 <HAL_GPIO_Init+0x258>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1c      	ldr	r2, [pc, #112]	@ (8003af4 <HAL_GPIO_Init+0x238>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <HAL_GPIO_Init+0x222>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1b      	ldr	r2, [pc, #108]	@ (8003af8 <HAL_GPIO_Init+0x23c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d025      	beq.n	8003ada <HAL_GPIO_Init+0x21e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1a      	ldr	r2, [pc, #104]	@ (8003afc <HAL_GPIO_Init+0x240>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01f      	beq.n	8003ad6 <HAL_GPIO_Init+0x21a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a19      	ldr	r2, [pc, #100]	@ (8003b00 <HAL_GPIO_Init+0x244>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d019      	beq.n	8003ad2 <HAL_GPIO_Init+0x216>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	@ (8003b04 <HAL_GPIO_Init+0x248>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0x212>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a17      	ldr	r2, [pc, #92]	@ (8003b08 <HAL_GPIO_Init+0x24c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00d      	beq.n	8003aca <HAL_GPIO_Init+0x20e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a16      	ldr	r2, [pc, #88]	@ (8003b0c <HAL_GPIO_Init+0x250>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_Init+0x20a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a15      	ldr	r2, [pc, #84]	@ (8003b10 <HAL_GPIO_Init+0x254>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_GPIO_Init+0x206>
 8003abe:	2309      	movs	r3, #9
 8003ac0:	e029      	b.n	8003b16 <HAL_GPIO_Init+0x25a>
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	e027      	b.n	8003b16 <HAL_GPIO_Init+0x25a>
 8003ac6:	2307      	movs	r3, #7
 8003ac8:	e025      	b.n	8003b16 <HAL_GPIO_Init+0x25a>
 8003aca:	2306      	movs	r3, #6
 8003acc:	e023      	b.n	8003b16 <HAL_GPIO_Init+0x25a>
 8003ace:	2305      	movs	r3, #5
 8003ad0:	e021      	b.n	8003b16 <HAL_GPIO_Init+0x25a>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	e01f      	b.n	8003b16 <HAL_GPIO_Init+0x25a>
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e01d      	b.n	8003b16 <HAL_GPIO_Init+0x25a>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e01b      	b.n	8003b16 <HAL_GPIO_Init+0x25a>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e019      	b.n	8003b16 <HAL_GPIO_Init+0x25a>
 8003ae2:	bf00      	nop
 8003ae4:	58000080 	.word	0x58000080
 8003ae8:	58024400 	.word	0x58024400
 8003aec:	58000400 	.word	0x58000400
 8003af0:	58020000 	.word	0x58020000
 8003af4:	58020400 	.word	0x58020400
 8003af8:	58020800 	.word	0x58020800
 8003afc:	58020c00 	.word	0x58020c00
 8003b00:	58021000 	.word	0x58021000
 8003b04:	58021400 	.word	0x58021400
 8003b08:	58021800 	.word	0x58021800
 8003b0c:	58021c00 	.word	0x58021c00
 8003b10:	58022400 	.word	0x58022400
 8003b14:	2300      	movs	r3, #0
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	f002 0203 	and.w	r2, r2, #3
 8003b1c:	0092      	lsls	r2, r2, #2
 8003b1e:	4093      	lsls	r3, r2
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b26:	4938      	ldr	r1, [pc, #224]	@ (8003c08 <HAL_GPIO_Init+0x34c>)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f ae6b 	bne.w	80038d0 <HAL_GPIO_Init+0x14>
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	bf00      	nop
 8003bfe:	3724      	adds	r7, #36	@ 0x24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	58000400 	.word	0x58000400

08003c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	887b      	ldrh	r3, [r7, #2]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
 8003c28:	e001      	b.n	8003c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c4c:	787b      	ldrb	r3, [r7, #1]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c58:	e003      	b.n	8003c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c5a:	887b      	ldrh	r3, [r7, #2]
 8003c5c:	041a      	lsls	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	619a      	str	r2, [r3, #24]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e08b      	b.n	8003d9a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fe f814 	bl	8001cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2224      	movs	r2, #36	@ 0x24
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003cc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	e006      	b.n	8003cf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d108      	bne.n	8003d12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d0e:	605a      	str	r2, [r3, #4]
 8003d10:	e007      	b.n	8003d22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <HAL_I2C_Init+0x134>)
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69d9      	ldr	r1, [r3, #28]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1a      	ldr	r2, [r3, #32]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	02008000 	.word	0x02008000

08003da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d138      	bne.n	8003e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e032      	b.n	8003e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	@ 0x24
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6819      	ldr	r1, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e000      	b.n	8003e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
  }
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d139      	bne.n	8003ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e033      	b.n	8003eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2224      	movs	r2, #36	@ 0x24
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ee0:	4b19      	ldr	r3, [pc, #100]	@ (8003f48 <HAL_PWREx_ConfigSupply+0x70>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d00a      	beq.n	8003f02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003eec:	4b16      	ldr	r3, [pc, #88]	@ (8003f48 <HAL_PWREx_ConfigSupply+0x70>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e01f      	b.n	8003f3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e01d      	b.n	8003f3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f02:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <HAL_PWREx_ConfigSupply+0x70>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f023 0207 	bic.w	r2, r3, #7
 8003f0a:	490f      	ldr	r1, [pc, #60]	@ (8003f48 <HAL_PWREx_ConfigSupply+0x70>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f12:	f7fe fde7 	bl	8002ae4 <HAL_GetTick>
 8003f16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f18:	e009      	b.n	8003f2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f1a:	f7fe fde3 	bl	8002ae4 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f28:	d901      	bls.n	8003f2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e007      	b.n	8003f3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_PWREx_ConfigSupply+0x70>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3a:	d1ee      	bne.n	8003f1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	58024800 	.word	0x58024800

08003f4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	@ 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e3c8      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8087 	beq.w	800407a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6c:	4b88      	ldr	r3, [pc, #544]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f76:	4b86      	ldr	r3, [pc, #536]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d007      	beq.n	8003f92 <HAL_RCC_OscConfig+0x46>
 8003f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f84:	2b18      	cmp	r3, #24
 8003f86:	d110      	bne.n	8003faa <HAL_RCC_OscConfig+0x5e>
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d10b      	bne.n	8003faa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f92:	4b7f      	ldr	r3, [pc, #508]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d06c      	beq.n	8004078 <HAL_RCC_OscConfig+0x12c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d168      	bne.n	8004078 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e3a2      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x76>
 8003fb4:	4b76      	ldr	r3, [pc, #472]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a75      	ldr	r2, [pc, #468]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e02e      	b.n	8004020 <HAL_RCC_OscConfig+0xd4>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x98>
 8003fca:	4b71      	ldr	r3, [pc, #452]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a70      	ldr	r2, [pc, #448]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6d      	ldr	r2, [pc, #436]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003fdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e01d      	b.n	8004020 <HAL_RCC_OscConfig+0xd4>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0xbc>
 8003fee:	4b68      	ldr	r3, [pc, #416]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a67      	ldr	r2, [pc, #412]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b65      	ldr	r3, [pc, #404]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a64      	ldr	r2, [pc, #400]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0xd4>
 8004008:	4b61      	ldr	r3, [pc, #388]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a60      	ldr	r2, [pc, #384]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800400e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b5e      	ldr	r3, [pc, #376]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a5d      	ldr	r2, [pc, #372]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800401a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800401e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d013      	beq.n	8004050 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fd5c 	bl	8002ae4 <HAL_GetTick>
 800402c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fe fd58 	bl	8002ae4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	@ 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e356      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004042:	4b53      	ldr	r3, [pc, #332]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0xe4>
 800404e:	e014      	b.n	800407a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fd48 	bl	8002ae4 <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fe fd44 	bl	8002ae4 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	@ 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e342      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800406a:	4b49      	ldr	r3, [pc, #292]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x10c>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 808c 	beq.w	80041a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004088:	4b41      	ldr	r3, [pc, #260]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004090:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004092:	4b3f      	ldr	r3, [pc, #252]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <HAL_RCC_OscConfig+0x162>
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	2b18      	cmp	r3, #24
 80040a2:	d137      	bne.n	8004114 <HAL_RCC_OscConfig+0x1c8>
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d132      	bne.n	8004114 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ae:	4b38      	ldr	r3, [pc, #224]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_RCC_OscConfig+0x17a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e314      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040c6:	4b32      	ldr	r3, [pc, #200]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 0219 	bic.w	r2, r3, #25
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	492f      	ldr	r1, [pc, #188]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe fd04 	bl	8002ae4 <HAL_GetTick>
 80040dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e0:	f7fe fd00 	bl	8002ae4 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e2fe      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040f2:	4b27      	ldr	r3, [pc, #156]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fe:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	4920      	ldr	r1, [pc, #128]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004112:	e045      	b.n	80041a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d026      	beq.n	800416a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800411c:	4b1c      	ldr	r3, [pc, #112]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 0219 	bic.w	r2, r3, #25
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4919      	ldr	r1, [pc, #100]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fe fcd9 	bl	8002ae4 <HAL_GetTick>
 8004132:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004136:	f7fe fcd5 	bl	8002ae4 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e2d3      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004148:	4b11      	ldr	r3, [pc, #68]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004154:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	490b      	ldr	r1, [pc, #44]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
 8004168:	e01a      	b.n	80041a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416a:	4b09      	ldr	r3, [pc, #36]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a08      	ldr	r2, [pc, #32]	@ (8004190 <HAL_RCC_OscConfig+0x244>)
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fe fcb5 	bl	8002ae4 <HAL_GetTick>
 800417a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800417c:	e00a      	b.n	8004194 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417e:	f7fe fcb1 	bl	8002ae4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d903      	bls.n	8004194 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e2af      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
 8004190:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004194:	4b96      	ldr	r3, [pc, #600]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ee      	bne.n	800417e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d06a      	beq.n	8004282 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ac:	4b90      	ldr	r3, [pc, #576]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041b6:	4b8e      	ldr	r3, [pc, #568]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d007      	beq.n	80041d2 <HAL_RCC_OscConfig+0x286>
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b18      	cmp	r3, #24
 80041c6:	d11b      	bne.n	8004200 <HAL_RCC_OscConfig+0x2b4>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d116      	bne.n	8004200 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041d2:	4b87      	ldr	r3, [pc, #540]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_RCC_OscConfig+0x29e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	2b80      	cmp	r3, #128	@ 0x80
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e282      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041ea:	4b81      	ldr	r3, [pc, #516]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	497d      	ldr	r1, [pc, #500]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041fe:	e040      	b.n	8004282 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d023      	beq.n	8004250 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004208:	4b79      	ldr	r3, [pc, #484]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a78      	ldr	r2, [pc, #480]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 800420e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe fc66 	bl	8002ae4 <HAL_GetTick>
 8004218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800421c:	f7fe fc62 	bl	8002ae4 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e260      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800422e:	4b70      	ldr	r3, [pc, #448]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800423a:	4b6d      	ldr	r3, [pc, #436]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	4969      	ldr	r1, [pc, #420]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 800424a:	4313      	orrs	r3, r2
 800424c:	60cb      	str	r3, [r1, #12]
 800424e:	e018      	b.n	8004282 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004250:	4b67      	ldr	r3, [pc, #412]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a66      	ldr	r2, [pc, #408]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800425a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fe fc42 	bl	8002ae4 <HAL_GetTick>
 8004260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004264:	f7fe fc3e 	bl	8002ae4 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e23c      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004276:	4b5e      	ldr	r3, [pc, #376]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d036      	beq.n	80042fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d019      	beq.n	80042ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004296:	4b56      	ldr	r3, [pc, #344]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429a:	4a55      	ldr	r2, [pc, #340]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fe fc1f 	bl	8002ae4 <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042aa:	f7fe fc1b 	bl	8002ae4 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e219      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042bc:	4b4c      	ldr	r3, [pc, #304]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80042be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x35e>
 80042c8:	e018      	b.n	80042fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ca:	4b49      	ldr	r3, [pc, #292]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80042cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ce:	4a48      	ldr	r2, [pc, #288]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fe fc05 	bl	8002ae4 <HAL_GetTick>
 80042da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042de:	f7fe fc01 	bl	8002ae4 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e1ff      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042f0:	4b3f      	ldr	r3, [pc, #252]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80042f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d036      	beq.n	8004376 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d019      	beq.n	8004344 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004310:	4b37      	ldr	r3, [pc, #220]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a36      	ldr	r2, [pc, #216]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004316:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800431a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800431c:	f7fe fbe2 	bl	8002ae4 <HAL_GetTick>
 8004320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004324:	f7fe fbde 	bl	8002ae4 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e1dc      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004336:	4b2e      	ldr	r3, [pc, #184]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x3d8>
 8004342:	e018      	b.n	8004376 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004344:	4b2a      	ldr	r3, [pc, #168]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a29      	ldr	r2, [pc, #164]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 800434a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800434e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004350:	f7fe fbc8 	bl	8002ae4 <HAL_GetTick>
 8004354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004358:	f7fe fbc4 	bl	8002ae4 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e1c2      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800436a:	4b21      	ldr	r3, [pc, #132]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8086 	beq.w	8004490 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004384:	4b1b      	ldr	r3, [pc, #108]	@ (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1a      	ldr	r2, [pc, #104]	@ (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800438a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800438e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004390:	f7fe fba8 	bl	8002ae4 <HAL_GetTick>
 8004394:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004398:	f7fe fba4 	bl	8002ae4 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	@ 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1a2      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043aa:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x480>
 80043be:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	4a0b      	ldr	r2, [pc, #44]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ca:	e032      	b.n	8004432 <HAL_RCC_OscConfig+0x4e6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d111      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4ac>
 80043d4:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	4a05      	ldr	r2, [pc, #20]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e0:	4b03      	ldr	r3, [pc, #12]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e4:	4a02      	ldr	r2, [pc, #8]	@ (80043f0 <HAL_RCC_OscConfig+0x4a4>)
 80043e6:	f023 0304 	bic.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ec:	e021      	b.n	8004432 <HAL_RCC_OscConfig+0x4e6>
 80043ee:	bf00      	nop
 80043f0:	58024400 	.word	0x58024400
 80043f4:	58024800 	.word	0x58024800
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d10c      	bne.n	800441a <HAL_RCC_OscConfig+0x4ce>
 8004400:	4b83      	ldr	r3, [pc, #524]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004404:	4a82      	ldr	r2, [pc, #520]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004406:	f043 0304 	orr.w	r3, r3, #4
 800440a:	6713      	str	r3, [r2, #112]	@ 0x70
 800440c:	4b80      	ldr	r3, [pc, #512]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004410:	4a7f      	ldr	r2, [pc, #508]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	6713      	str	r3, [r2, #112]	@ 0x70
 8004418:	e00b      	b.n	8004432 <HAL_RCC_OscConfig+0x4e6>
 800441a:	4b7d      	ldr	r3, [pc, #500]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	4a7c      	ldr	r2, [pc, #496]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	6713      	str	r3, [r2, #112]	@ 0x70
 8004426:	4b7a      	ldr	r3, [pc, #488]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	4a79      	ldr	r2, [pc, #484]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800442c:	f023 0304 	bic.w	r3, r3, #4
 8004430:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d015      	beq.n	8004466 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fe fb53 	bl	8002ae4 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fe fb4f 	bl	8002ae4 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e14b      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004458:	4b6d      	ldr	r3, [pc, #436]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0ee      	beq.n	8004442 <HAL_RCC_OscConfig+0x4f6>
 8004464:	e014      	b.n	8004490 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fe fb3d 	bl	8002ae4 <HAL_GetTick>
 800446a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fe fb39 	bl	8002ae4 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e135      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004484:	4b62      	ldr	r3, [pc, #392]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ee      	bne.n	800446e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 812a 	beq.w	80046ee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800449a:	4b5d      	ldr	r3, [pc, #372]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044a2:	2b18      	cmp	r3, #24
 80044a4:	f000 80ba 	beq.w	800461c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	f040 8095 	bne.w	80045dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b57      	ldr	r3, [pc, #348]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a56      	ldr	r2, [pc, #344]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80044b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fe fb11 	bl	8002ae4 <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fe fb0d 	bl	8002ae4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e10b      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80044e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004614 <HAL_RCC_OscConfig+0x6c8>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044f4:	0112      	lsls	r2, r2, #4
 80044f6:	430a      	orrs	r2, r1
 80044f8:	4945      	ldr	r1, [pc, #276]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	3b01      	subs	r3, #1
 8004504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450c:	3b01      	subs	r3, #1
 800450e:	025b      	lsls	r3, r3, #9
 8004510:	b29b      	uxth	r3, r3
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	3b01      	subs	r3, #1
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004526:	3b01      	subs	r3, #1
 8004528:	061b      	lsls	r3, r3, #24
 800452a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800452e:	4938      	ldr	r1, [pc, #224]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004530:	4313      	orrs	r3, r2
 8004532:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004534:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	4a35      	ldr	r2, [pc, #212]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004540:	4b33      	ldr	r3, [pc, #204]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004544:	4b34      	ldr	r3, [pc, #208]	@ (8004618 <HAL_RCC_OscConfig+0x6cc>)
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800454c:	00d2      	lsls	r2, r2, #3
 800454e:	4930      	ldr	r1, [pc, #192]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004550:	4313      	orrs	r3, r2
 8004552:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004554:	4b2e      	ldr	r3, [pc, #184]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	f023 020c 	bic.w	r2, r3, #12
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	492b      	ldr	r1, [pc, #172]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004566:	4b2a      	ldr	r3, [pc, #168]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456a:	f023 0202 	bic.w	r2, r3, #2
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	4927      	ldr	r1, [pc, #156]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004574:	4313      	orrs	r3, r2
 8004576:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004578:	4b25      	ldr	r3, [pc, #148]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	4a24      	ldr	r2, [pc, #144]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800457e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004584:	4b22      	ldr	r3, [pc, #136]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	4a21      	ldr	r2, [pc, #132]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800458a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800458e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004590:	4b1f      	ldr	r3, [pc, #124]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	4a1e      	ldr	r2, [pc, #120]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004596:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800459a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800459c:	4b1c      	ldr	r3, [pc, #112]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a18      	ldr	r2, [pc, #96]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fe fa96 	bl	8002ae4 <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fe fa92 	bl	8002ae4 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e090      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ce:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x670>
 80045da:	e088      	b.n	80046ee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fe fa7c 	bl	8002ae4 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fe fa78 	bl	8002ae4 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e076      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004602:	4b03      	ldr	r3, [pc, #12]	@ (8004610 <HAL_RCC_OscConfig+0x6c4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x6a4>
 800460e:	e06e      	b.n	80046ee <HAL_RCC_OscConfig+0x7a2>
 8004610:	58024400 	.word	0x58024400
 8004614:	fffffc0c 	.word	0xfffffc0c
 8004618:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800461c:	4b36      	ldr	r3, [pc, #216]	@ (80046f8 <HAL_RCC_OscConfig+0x7ac>)
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004622:	4b35      	ldr	r3, [pc, #212]	@ (80046f8 <HAL_RCC_OscConfig+0x7ac>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	2b01      	cmp	r3, #1
 800462e:	d031      	beq.n	8004694 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f003 0203 	and.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d12a      	bne.n	8004694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d122      	bne.n	8004694 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004658:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d11a      	bne.n	8004694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	0a5b      	lsrs	r3, r3, #9
 8004662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800466a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d111      	bne.n	8004694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	0c1b      	lsrs	r3, r3, #16
 8004674:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d108      	bne.n	8004694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	0e1b      	lsrs	r3, r3, #24
 8004686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e02b      	b.n	80046f0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004698:	4b17      	ldr	r3, [pc, #92]	@ (80046f8 <HAL_RCC_OscConfig+0x7ac>)
 800469a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469c:	08db      	lsrs	r3, r3, #3
 800469e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d01f      	beq.n	80046ee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046ae:	4b12      	ldr	r3, [pc, #72]	@ (80046f8 <HAL_RCC_OscConfig+0x7ac>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	4a11      	ldr	r2, [pc, #68]	@ (80046f8 <HAL_RCC_OscConfig+0x7ac>)
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046ba:	f7fe fa13 	bl	8002ae4 <HAL_GetTick>
 80046be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80046c0:	bf00      	nop
 80046c2:	f7fe fa0f 	bl	8002ae4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d0f9      	beq.n	80046c2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046ce:	4b0a      	ldr	r3, [pc, #40]	@ (80046f8 <HAL_RCC_OscConfig+0x7ac>)
 80046d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046d2:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <HAL_RCC_OscConfig+0x7b0>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046da:	00d2      	lsls	r2, r2, #3
 80046dc:	4906      	ldr	r1, [pc, #24]	@ (80046f8 <HAL_RCC_OscConfig+0x7ac>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80046e2:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_RCC_OscConfig+0x7ac>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	4a04      	ldr	r2, [pc, #16]	@ (80046f8 <HAL_RCC_OscConfig+0x7ac>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3730      	adds	r7, #48	@ 0x30
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	58024400 	.word	0x58024400
 80046fc:	ffff0007 	.word	0xffff0007

08004700 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e19c      	b.n	8004a4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004714:	4b8a      	ldr	r3, [pc, #552]	@ (8004940 <HAL_RCC_ClockConfig+0x240>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d910      	bls.n	8004744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b87      	ldr	r3, [pc, #540]	@ (8004940 <HAL_RCC_ClockConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 020f 	bic.w	r2, r3, #15
 800472a:	4985      	ldr	r1, [pc, #532]	@ (8004940 <HAL_RCC_ClockConfig+0x240>)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b83      	ldr	r3, [pc, #524]	@ (8004940 <HAL_RCC_ClockConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e184      	b.n	8004a4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d010      	beq.n	8004772 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	4b7b      	ldr	r3, [pc, #492]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800475c:	429a      	cmp	r2, r3
 800475e:	d908      	bls.n	8004772 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004760:	4b78      	ldr	r3, [pc, #480]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	4975      	ldr	r1, [pc, #468]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 800476e:	4313      	orrs	r3, r2
 8004770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d010      	beq.n	80047a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	4b70      	ldr	r3, [pc, #448]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800478a:	429a      	cmp	r2, r3
 800478c:	d908      	bls.n	80047a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800478e:	4b6d      	ldr	r3, [pc, #436]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	496a      	ldr	r1, [pc, #424]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 800479c:	4313      	orrs	r3, r2
 800479e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d010      	beq.n	80047ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	4b64      	ldr	r3, [pc, #400]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d908      	bls.n	80047ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047bc:	4b61      	ldr	r3, [pc, #388]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	495e      	ldr	r1, [pc, #376]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d010      	beq.n	80047fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	4b59      	ldr	r3, [pc, #356]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d908      	bls.n	80047fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047ea:	4b56      	ldr	r3, [pc, #344]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	4953      	ldr	r1, [pc, #332]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	4b4d      	ldr	r3, [pc, #308]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	429a      	cmp	r2, r3
 8004816:	d908      	bls.n	800482a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b4a      	ldr	r3, [pc, #296]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f023 020f 	bic.w	r2, r3, #15
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4947      	ldr	r1, [pc, #284]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004826:	4313      	orrs	r3, r2
 8004828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d055      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004836:	4b43      	ldr	r3, [pc, #268]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	4940      	ldr	r1, [pc, #256]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004844:	4313      	orrs	r3, r2
 8004846:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d107      	bne.n	8004860 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004850:	4b3c      	ldr	r3, [pc, #240]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d121      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0f6      	b.n	8004a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d107      	bne.n	8004878 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004868:	4b36      	ldr	r3, [pc, #216]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d115      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0ea      	b.n	8004a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d107      	bne.n	8004890 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004880:	4b30      	ldr	r3, [pc, #192]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0de      	b.n	8004a4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004890:	4b2c      	ldr	r3, [pc, #176]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0d6      	b.n	8004a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048a0:	4b28      	ldr	r3, [pc, #160]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f023 0207 	bic.w	r2, r3, #7
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4925      	ldr	r1, [pc, #148]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b2:	f7fe f917 	bl	8002ae4 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b8:	e00a      	b.n	80048d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ba:	f7fe f913 	bl	8002ae4 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0be      	b.n	8004a4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	429a      	cmp	r2, r3
 80048e0:	d1eb      	bne.n	80048ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d010      	beq.n	8004910 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	4b14      	ldr	r3, [pc, #80]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d208      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048fe:	4b11      	ldr	r3, [pc, #68]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f023 020f 	bic.w	r2, r3, #15
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	490e      	ldr	r1, [pc, #56]	@ (8004944 <HAL_RCC_ClockConfig+0x244>)
 800490c:	4313      	orrs	r3, r2
 800490e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004910:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <HAL_RCC_ClockConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d214      	bcs.n	8004948 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <HAL_RCC_ClockConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 020f 	bic.w	r2, r3, #15
 8004926:	4906      	ldr	r1, [pc, #24]	@ (8004940 <HAL_RCC_ClockConfig+0x240>)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b04      	ldr	r3, [pc, #16]	@ (8004940 <HAL_RCC_ClockConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d005      	beq.n	8004948 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e086      	b.n	8004a4e <HAL_RCC_ClockConfig+0x34e>
 8004940:	52002000 	.word	0x52002000
 8004944:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d010      	beq.n	8004976 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	4b3f      	ldr	r3, [pc, #252]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004960:	429a      	cmp	r2, r3
 8004962:	d208      	bcs.n	8004976 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004964:	4b3c      	ldr	r3, [pc, #240]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	4939      	ldr	r1, [pc, #228]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 8004972:	4313      	orrs	r3, r2
 8004974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d010      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	4b34      	ldr	r3, [pc, #208]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800498e:	429a      	cmp	r2, r3
 8004990:	d208      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004992:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	492e      	ldr	r1, [pc, #184]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	4b28      	ldr	r3, [pc, #160]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049bc:	429a      	cmp	r2, r3
 80049be:	d208      	bcs.n	80049d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049c0:	4b25      	ldr	r3, [pc, #148]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4922      	ldr	r1, [pc, #136]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d010      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d208      	bcs.n	8004a00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	4917      	ldr	r1, [pc, #92]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a00:	f000 f834 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b14      	ldr	r3, [pc, #80]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	4912      	ldr	r1, [pc, #72]	@ (8004a5c <HAL_RCC_ClockConfig+0x35c>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <HAL_RCC_ClockConfig+0x358>)
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	4a0d      	ldr	r2, [pc, #52]	@ (8004a5c <HAL_RCC_ClockConfig+0x35c>)
 8004a28:	5cd3      	ldrb	r3, [r2, r3]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	4a0a      	ldr	r2, [pc, #40]	@ (8004a60 <HAL_RCC_ClockConfig+0x360>)
 8004a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a38:	4a0a      	ldr	r2, [pc, #40]	@ (8004a64 <HAL_RCC_ClockConfig+0x364>)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <HAL_RCC_ClockConfig+0x368>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fd46 	bl	80024d4 <HAL_InitTick>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	58024400 	.word	0x58024400
 8004a5c:	08012a48 	.word	0x08012a48
 8004a60:	24000004 	.word	0x24000004
 8004a64:	24000000 	.word	0x24000000
 8004a68:	24000010 	.word	0x24000010

08004a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b089      	sub	sp, #36	@ 0x24
 8004a70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a72:	4bb3      	ldr	r3, [pc, #716]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a7a:	2b18      	cmp	r3, #24
 8004a7c:	f200 8155 	bhi.w	8004d2a <HAL_RCC_GetSysClockFreq+0x2be>
 8004a80:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004aed 	.word	0x08004aed
 8004a8c:	08004d2b 	.word	0x08004d2b
 8004a90:	08004d2b 	.word	0x08004d2b
 8004a94:	08004d2b 	.word	0x08004d2b
 8004a98:	08004d2b 	.word	0x08004d2b
 8004a9c:	08004d2b 	.word	0x08004d2b
 8004aa0:	08004d2b 	.word	0x08004d2b
 8004aa4:	08004d2b 	.word	0x08004d2b
 8004aa8:	08004b13 	.word	0x08004b13
 8004aac:	08004d2b 	.word	0x08004d2b
 8004ab0:	08004d2b 	.word	0x08004d2b
 8004ab4:	08004d2b 	.word	0x08004d2b
 8004ab8:	08004d2b 	.word	0x08004d2b
 8004abc:	08004d2b 	.word	0x08004d2b
 8004ac0:	08004d2b 	.word	0x08004d2b
 8004ac4:	08004d2b 	.word	0x08004d2b
 8004ac8:	08004b19 	.word	0x08004b19
 8004acc:	08004d2b 	.word	0x08004d2b
 8004ad0:	08004d2b 	.word	0x08004d2b
 8004ad4:	08004d2b 	.word	0x08004d2b
 8004ad8:	08004d2b 	.word	0x08004d2b
 8004adc:	08004d2b 	.word	0x08004d2b
 8004ae0:	08004d2b 	.word	0x08004d2b
 8004ae4:	08004d2b 	.word	0x08004d2b
 8004ae8:	08004b1f 	.word	0x08004b1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aec:	4b94      	ldr	r3, [pc, #592]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004af8:	4b91      	ldr	r3, [pc, #580]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	08db      	lsrs	r3, r3, #3
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	4a90      	ldr	r2, [pc, #576]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b0a:	e111      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b0c:	4b8d      	ldr	r3, [pc, #564]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b0e:	61bb      	str	r3, [r7, #24]
      break;
 8004b10:	e10e      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b12:	4b8d      	ldr	r3, [pc, #564]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b14:	61bb      	str	r3, [r7, #24]
      break;
 8004b16:	e10b      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b18:	4b8c      	ldr	r3, [pc, #560]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b1a:	61bb      	str	r3, [r7, #24]
      break;
 8004b1c:	e108      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b1e:	4b88      	ldr	r3, [pc, #544]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b28:	4b85      	ldr	r3, [pc, #532]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b34:	4b82      	ldr	r3, [pc, #520]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b3e:	4b80      	ldr	r3, [pc, #512]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b42:	08db      	lsrs	r3, r3, #3
 8004b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80e1 	beq.w	8004d24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	f000 8083 	beq.w	8004c70 <HAL_RCC_GetSysClockFreq+0x204>
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	f200 80a1 	bhi.w	8004cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x114>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d056      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b7e:	e099      	b.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b80:	4b6f      	ldr	r3, [pc, #444]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d02d      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	08db      	lsrs	r3, r3, #3
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	4a6b      	ldr	r2, [pc, #428]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb6:	4b62      	ldr	r3, [pc, #392]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004be6:	e087      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfa:	4b51      	ldr	r3, [pc, #324]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c2a:	e065      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3e:	4b40      	ldr	r3, [pc, #256]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c6e:	e043      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c82:	4b2f      	ldr	r3, [pc, #188]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cb2:	e021      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cf6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004cf8:	4b11      	ldr	r3, [pc, #68]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfc:	0a5b      	lsrs	r3, r3, #9
 8004cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d02:	3301      	adds	r3, #1
 8004d04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1c:	ee17 3a90 	vmov	r3, s15
 8004d20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d22:	e005      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
      break;
 8004d28:	e002      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d2a:	4b07      	ldr	r3, [pc, #28]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d2c:	61bb      	str	r3, [r7, #24]
      break;
 8004d2e:	bf00      	nop
  }

  return sysclockfreq;
 8004d30:	69bb      	ldr	r3, [r7, #24]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3724      	adds	r7, #36	@ 0x24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	58024400 	.word	0x58024400
 8004d44:	03d09000 	.word	0x03d09000
 8004d48:	003d0900 	.word	0x003d0900
 8004d4c:	02dc6c00 	.word	0x02dc6c00
 8004d50:	46000000 	.word	0x46000000
 8004d54:	4c742400 	.word	0x4c742400
 8004d58:	4a742400 	.word	0x4a742400
 8004d5c:	4c371b00 	.word	0x4c371b00

08004d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d66:	f7ff fe81 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	4b10      	ldr	r3, [pc, #64]	@ (8004db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	0a1b      	lsrs	r3, r3, #8
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	490f      	ldr	r1, [pc, #60]	@ (8004db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d78:	5ccb      	ldrb	r3, [r1, r3]
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d84:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	4a09      	ldr	r2, [pc, #36]	@ (8004db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d8e:	5cd3      	ldrb	r3, [r2, r3]
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9a:	4a07      	ldr	r2, [pc, #28]	@ (8004db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d9e:	4a07      	ldr	r2, [pc, #28]	@ (8004dbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004da4:	4b04      	ldr	r3, [pc, #16]	@ (8004db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004da6:	681b      	ldr	r3, [r3, #0]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	58024400 	.word	0x58024400
 8004db4:	08012a48 	.word	0x08012a48
 8004db8:	24000004 	.word	0x24000004
 8004dbc:	24000000 	.word	0x24000000

08004dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004dc4:	f7ff ffcc 	bl	8004d60 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4904      	ldr	r1, [pc, #16]	@ (8004de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	58024400 	.word	0x58024400
 8004de8:	08012a48 	.word	0x08012a48

08004dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004df0:	f7ff ffb6 	bl	8004d60 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b06      	ldr	r3, [pc, #24]	@ (8004e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4904      	ldr	r1, [pc, #16]	@ (8004e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	58024400 	.word	0x58024400
 8004e14:	08012a48 	.word	0x08012a48

08004e18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	223f      	movs	r2, #63	@ 0x3f
 8004e26:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e28:	4b1a      	ldr	r3, [pc, #104]	@ (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0207 	and.w	r2, r3, #7
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004e34:	4b17      	ldr	r3, [pc, #92]	@ (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004e40:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f003 020f 	and.w	r2, r3, #15
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004e4c:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004e58:	4b0e      	ldr	r3, [pc, #56]	@ (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004e64:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004e70:	4b08      	ldr	r3, [pc, #32]	@ (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e7c:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_RCC_GetClockConfig+0x80>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	601a      	str	r2, [r3, #0]
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	58024400 	.word	0x58024400
 8004e98:	52002000 	.word	0x52002000

08004e9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b0c6      	sub	sp, #280	@ 0x118
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004ec0:	2500      	movs	r5, #0
 8004ec2:	ea54 0305 	orrs.w	r3, r4, r5
 8004ec6:	d049      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ece:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ed2:	d02f      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ed4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ed8:	d828      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ede:	d01a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ee0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ee4:	d822      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eee:	d007      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ef0:	e01c      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef2:	4bab      	ldr	r3, [pc, #684]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	4aaa      	ldr	r2, [pc, #680]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004efe:	e01a      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f04:	3308      	adds	r3, #8
 8004f06:	2102      	movs	r1, #2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f002 fa49 	bl	80073a0 <RCCEx_PLL2_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f14:	e00f      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1a:	3328      	adds	r3, #40	@ 0x28
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f002 faf0 	bl	8007504 <RCCEx_PLL3_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f2a:	e004      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f32:	e000      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f3e:	4b98      	ldr	r3, [pc, #608]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f4c:	4a94      	ldr	r2, [pc, #592]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f52:	e003      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004f68:	f04f 0900 	mov.w	r9, #0
 8004f6c:	ea58 0309 	orrs.w	r3, r8, r9
 8004f70:	d047      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d82a      	bhi.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f99 	.word	0x08004f99
 8004f88:	08004fa7 	.word	0x08004fa7
 8004f8c:	08004fbd 	.word	0x08004fbd
 8004f90:	08004fdb 	.word	0x08004fdb
 8004f94:	08004fdb 	.word	0x08004fdb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f98:	4b81      	ldr	r3, [pc, #516]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9c:	4a80      	ldr	r2, [pc, #512]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fa4:	e01a      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004faa:	3308      	adds	r3, #8
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f002 f9f6 	bl	80073a0 <RCCEx_PLL2_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fba:	e00f      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc0:	3328      	adds	r3, #40	@ 0x28
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f002 fa9d 	bl	8007504 <RCCEx_PLL3_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fd0:	e004      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fd8:	e000      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe4:	4b6e      	ldr	r3, [pc, #440]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe8:	f023 0107 	bic.w	r1, r3, #7
 8004fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff2:	4a6b      	ldr	r2, [pc, #428]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ff8:	e003      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ffe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800500e:	f04f 0b00 	mov.w	fp, #0
 8005012:	ea5a 030b 	orrs.w	r3, sl, fp
 8005016:	d05b      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005020:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005024:	d03b      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005026:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800502a:	d834      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800502c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005030:	d037      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005032:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005036:	d82e      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005038:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800503c:	d033      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800503e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005042:	d828      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005044:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005048:	d01a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800504a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800504e:	d822      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005058:	d007      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800505a:	e01c      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505c:	4b50      	ldr	r3, [pc, #320]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	4a4f      	ldr	r2, [pc, #316]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005068:	e01e      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506e:	3308      	adds	r3, #8
 8005070:	2100      	movs	r1, #0
 8005072:	4618      	mov	r0, r3
 8005074:	f002 f994 	bl	80073a0 <RCCEx_PLL2_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800507e:	e013      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005084:	3328      	adds	r3, #40	@ 0x28
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f002 fa3b 	bl	8007504 <RCCEx_PLL3_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005094:	e008      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800509c:	e004      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800509e:	bf00      	nop
 80050a0:	e002      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80050a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80050b0:	4b3b      	ldr	r3, [pc, #236]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80050b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050c0:	4a37      	ldr	r2, [pc, #220]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050c2:	430b      	orrs	r3, r1
 80050c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80050c6:	e003      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80050d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80050e0:	2300      	movs	r3, #0
 80050e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80050ea:	460b      	mov	r3, r1
 80050ec:	4313      	orrs	r3, r2
 80050ee:	d05d      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050fc:	d03b      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80050fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005102:	d834      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005104:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005108:	d037      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800510a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800510e:	d82e      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005110:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005114:	d033      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005116:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800511a:	d828      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800511c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005120:	d01a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005126:	d822      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800512c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005130:	d007      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005132:	e01c      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005134:	4b1a      	ldr	r3, [pc, #104]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	4a19      	ldr	r2, [pc, #100]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800513a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800513e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005140:	e01e      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005146:	3308      	adds	r3, #8
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f002 f928 	bl	80073a0 <RCCEx_PLL2_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005156:	e013      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515c:	3328      	adds	r3, #40	@ 0x28
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f002 f9cf 	bl	8007504 <RCCEx_PLL3_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800516c:	e008      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005174:	e004      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800517e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10d      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005188:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800518a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005194:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005198:	4a01      	ldr	r2, [pc, #4]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800519a:	430b      	orrs	r3, r1
 800519c:	6593      	str	r3, [r2, #88]	@ 0x58
 800519e:	e005      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80051a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80051b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	d03a      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d2:	2b30      	cmp	r3, #48	@ 0x30
 80051d4:	d01f      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80051d6:	2b30      	cmp	r3, #48	@ 0x30
 80051d8:	d819      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d00c      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d815      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d019      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d111      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ea:	4baa      	ldr	r3, [pc, #680]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	4aa9      	ldr	r2, [pc, #676]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80051f6:	e011      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fc:	3308      	adds	r3, #8
 80051fe:	2102      	movs	r1, #2
 8005200:	4618      	mov	r0, r3
 8005202:	f002 f8cd 	bl	80073a0 <RCCEx_PLL2_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800520c:	e006      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800521a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005224:	4b9b      	ldr	r3, [pc, #620]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005228:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005232:	4a98      	ldr	r2, [pc, #608]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005234:	430b      	orrs	r3, r1
 8005236:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005238:	e003      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800523e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800524e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005258:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800525c:	460b      	mov	r3, r1
 800525e:	4313      	orrs	r3, r2
 8005260:	d051      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800526c:	d035      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800526e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005272:	d82e      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005274:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005278:	d031      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800527a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800527e:	d828      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005284:	d01a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800528a:	d822      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005294:	d007      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005296:	e01c      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005298:	4b7e      	ldr	r3, [pc, #504]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	4a7d      	ldr	r2, [pc, #500]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800529e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052a4:	e01c      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052aa:	3308      	adds	r3, #8
 80052ac:	2100      	movs	r1, #0
 80052ae:	4618      	mov	r0, r3
 80052b0:	f002 f876 	bl	80073a0 <RCCEx_PLL2_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052ba:	e011      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	3328      	adds	r3, #40	@ 0x28
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f002 f91d 	bl	8007504 <RCCEx_PLL3_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052d0:	e006      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052d8:	e002      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80052de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f6:	4a67      	ldr	r2, [pc, #412]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80052fc:	e003      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005302:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005312:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005316:	2300      	movs	r3, #0
 8005318:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800531c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005320:	460b      	mov	r3, r1
 8005322:	4313      	orrs	r3, r2
 8005324:	d053      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800532c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005330:	d033      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005332:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005336:	d82c      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005338:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800533c:	d02f      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800533e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005342:	d826      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005344:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005348:	d02b      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800534a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800534e:	d820      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005354:	d012      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800535a:	d81a      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d022      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005364:	d115      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536a:	3308      	adds	r3, #8
 800536c:	2101      	movs	r1, #1
 800536e:	4618      	mov	r0, r3
 8005370:	f002 f816 	bl	80073a0 <RCCEx_PLL2_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800537a:	e015      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005380:	3328      	adds	r3, #40	@ 0x28
 8005382:	2101      	movs	r1, #1
 8005384:	4618      	mov	r0, r3
 8005386:	f002 f8bd 	bl	8007504 <RCCEx_PLL3_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005390:	e00a      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005398:	e006      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800539a:	bf00      	nop
 800539c:	e004      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80053a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053b0:	4b38      	ldr	r3, [pc, #224]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80053b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053be:	4a35      	ldr	r2, [pc, #212]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80053c4:	e003      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053de:	2300      	movs	r3, #0
 80053e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053e8:	460b      	mov	r3, r1
 80053ea:	4313      	orrs	r3, r2
 80053ec:	d058      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80053f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053fa:	d033      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80053fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005400:	d82c      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005406:	d02f      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540c:	d826      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800540e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005412:	d02b      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005414:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005418:	d820      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800541a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800541e:	d012      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005424:	d81a      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d022      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542e:	d115      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005434:	3308      	adds	r3, #8
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f001 ffb1 	bl	80073a0 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005444:	e015      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544a:	3328      	adds	r3, #40	@ 0x28
 800544c:	2101      	movs	r1, #1
 800544e:	4618      	mov	r0, r3
 8005450:	f002 f858 	bl	8007504 <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800545a:	e00a      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005462:	e006      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005464:	bf00      	nop
 8005466:	e004      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005468:	bf00      	nop
 800546a:	e002      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800546c:	bf00      	nop
 800546e:	e000      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10e      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005486:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800548a:	4a02      	ldr	r2, [pc, #8]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800548c:	430b      	orrs	r3, r1
 800548e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005490:	e006      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005492:	bf00      	nop
 8005494:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800549c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80054ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4313      	orrs	r3, r2
 80054be:	d037      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80054c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ca:	d00e      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80054cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054d0:	d816      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80054d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054da:	d111      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054dc:	4bc4      	ldr	r3, [pc, #784]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	4ac3      	ldr	r2, [pc, #780]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054e8:	e00f      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ee:	3308      	adds	r3, #8
 80054f0:	2101      	movs	r1, #1
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 ff54 	bl	80073a0 <RCCEx_PLL2_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054fe:	e004      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005506:	e000      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005512:	4bb7      	ldr	r3, [pc, #732]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005516:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005520:	4ab3      	ldr	r2, [pc, #716]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005522:	430b      	orrs	r3, r1
 8005524:	6513      	str	r3, [r2, #80]	@ 0x50
 8005526:	e003      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800552c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800553c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005540:	2300      	movs	r3, #0
 8005542:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005546:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800554a:	460b      	mov	r3, r1
 800554c:	4313      	orrs	r3, r2
 800554e:	d039      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005556:	2b03      	cmp	r3, #3
 8005558:	d81c      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800555a:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	0800559d 	.word	0x0800559d
 8005564:	08005571 	.word	0x08005571
 8005568:	0800557f 	.word	0x0800557f
 800556c:	0800559d 	.word	0x0800559d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005570:	4b9f      	ldr	r3, [pc, #636]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	4a9e      	ldr	r2, [pc, #632]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800557a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800557c:	e00f      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800557e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005582:	3308      	adds	r3, #8
 8005584:	2102      	movs	r1, #2
 8005586:	4618      	mov	r0, r3
 8005588:	f001 ff0a 	bl	80073a0 <RCCEx_PLL2_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005592:	e004      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800559a:	e000      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800559c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055a6:	4b92      	ldr	r3, [pc, #584]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055aa:	f023 0103 	bic.w	r1, r3, #3
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b4:	4a8e      	ldr	r2, [pc, #568]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055ba:	e003      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055de:	460b      	mov	r3, r1
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f000 8099 	beq.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055e6:	4b83      	ldr	r3, [pc, #524]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a82      	ldr	r2, [pc, #520]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f2:	f7fd fa77 	bl	8002ae4 <HAL_GetTick>
 80055f6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fa:	e00b      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fc:	f7fd fa72 	bl	8002ae4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b64      	cmp	r3, #100	@ 0x64
 800560a:	d903      	bls.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005612:	e005      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005614:	4b77      	ldr	r3, [pc, #476]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0ed      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005624:	2b00      	cmp	r3, #0
 8005626:	d173      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005628:	4b71      	ldr	r3, [pc, #452]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800562a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005630:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005634:	4053      	eors	r3, r2
 8005636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563a:	2b00      	cmp	r3, #0
 800563c:	d015      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800563e:	4b6c      	ldr	r3, [pc, #432]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005646:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800564a:	4b69      	ldr	r3, [pc, #420]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564e:	4a68      	ldr	r2, [pc, #416]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005654:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005656:	4b66      	ldr	r3, [pc, #408]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565a:	4a65      	ldr	r2, [pc, #404]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800565c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005660:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005662:	4a63      	ldr	r2, [pc, #396]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005668:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800566a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005676:	d118      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fd fa34 	bl	8002ae4 <HAL_GetTick>
 800567c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005680:	e00d      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fd fa2f 	bl	8002ae4 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800568c:	1ad2      	subs	r2, r2, r3
 800568e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005692:	429a      	cmp	r2, r3
 8005694:	d903      	bls.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800569c:	e005      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800569e:	4b54      	ldr	r3, [pc, #336]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0eb      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80056aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d129      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c2:	d10e      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80056c4:	4b4a      	ldr	r3, [pc, #296]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056d4:	091a      	lsrs	r2, r3, #4
 80056d6:	4b48      	ldr	r3, [pc, #288]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056d8:	4013      	ands	r3, r2
 80056da:	4a45      	ldr	r2, [pc, #276]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056dc:	430b      	orrs	r3, r1
 80056de:	6113      	str	r3, [r2, #16]
 80056e0:	e005      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 80056e2:	4b43      	ldr	r3, [pc, #268]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	4a42      	ldr	r2, [pc, #264]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056ec:	6113      	str	r3, [r2, #16]
 80056ee:	4b40      	ldr	r3, [pc, #256]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80056f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056fe:	4a3c      	ldr	r2, [pc, #240]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005700:	430b      	orrs	r3, r1
 8005702:	6713      	str	r3, [r2, #112]	@ 0x70
 8005704:	e008      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005706:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800570a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800570e:	e003      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005714:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f002 0301 	and.w	r3, r2, #1
 8005724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800572e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005732:	460b      	mov	r3, r1
 8005734:	4313      	orrs	r3, r2
 8005736:	f000 808f 	beq.w	8005858 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800573a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005740:	2b28      	cmp	r3, #40	@ 0x28
 8005742:	d871      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005744:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	08005831 	.word	0x08005831
 8005750:	08005829 	.word	0x08005829
 8005754:	08005829 	.word	0x08005829
 8005758:	08005829 	.word	0x08005829
 800575c:	08005829 	.word	0x08005829
 8005760:	08005829 	.word	0x08005829
 8005764:	08005829 	.word	0x08005829
 8005768:	08005829 	.word	0x08005829
 800576c:	080057fd 	.word	0x080057fd
 8005770:	08005829 	.word	0x08005829
 8005774:	08005829 	.word	0x08005829
 8005778:	08005829 	.word	0x08005829
 800577c:	08005829 	.word	0x08005829
 8005780:	08005829 	.word	0x08005829
 8005784:	08005829 	.word	0x08005829
 8005788:	08005829 	.word	0x08005829
 800578c:	08005813 	.word	0x08005813
 8005790:	08005829 	.word	0x08005829
 8005794:	08005829 	.word	0x08005829
 8005798:	08005829 	.word	0x08005829
 800579c:	08005829 	.word	0x08005829
 80057a0:	08005829 	.word	0x08005829
 80057a4:	08005829 	.word	0x08005829
 80057a8:	08005829 	.word	0x08005829
 80057ac:	08005831 	.word	0x08005831
 80057b0:	08005829 	.word	0x08005829
 80057b4:	08005829 	.word	0x08005829
 80057b8:	08005829 	.word	0x08005829
 80057bc:	08005829 	.word	0x08005829
 80057c0:	08005829 	.word	0x08005829
 80057c4:	08005829 	.word	0x08005829
 80057c8:	08005829 	.word	0x08005829
 80057cc:	08005831 	.word	0x08005831
 80057d0:	08005829 	.word	0x08005829
 80057d4:	08005829 	.word	0x08005829
 80057d8:	08005829 	.word	0x08005829
 80057dc:	08005829 	.word	0x08005829
 80057e0:	08005829 	.word	0x08005829
 80057e4:	08005829 	.word	0x08005829
 80057e8:	08005829 	.word	0x08005829
 80057ec:	08005831 	.word	0x08005831
 80057f0:	58024400 	.word	0x58024400
 80057f4:	58024800 	.word	0x58024800
 80057f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005800:	3308      	adds	r3, #8
 8005802:	2101      	movs	r1, #1
 8005804:	4618      	mov	r0, r3
 8005806:	f001 fdcb 	bl	80073a0 <RCCEx_PLL2_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005810:	e00f      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005816:	3328      	adds	r3, #40	@ 0x28
 8005818:	2101      	movs	r1, #1
 800581a:	4618      	mov	r0, r3
 800581c:	f001 fe72 	bl	8007504 <RCCEx_PLL3_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005826:	e004      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800582e:	e000      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005832:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800583a:	4bbf      	ldr	r3, [pc, #764]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005848:	4abb      	ldr	r2, [pc, #748]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800584a:	430b      	orrs	r3, r1
 800584c:	6553      	str	r3, [r2, #84]	@ 0x54
 800584e:	e003      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005854:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f002 0302 	and.w	r3, r2, #2
 8005864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800586e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005872:	460b      	mov	r3, r1
 8005874:	4313      	orrs	r3, r2
 8005876:	d041      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800587e:	2b05      	cmp	r3, #5
 8005880:	d824      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005882:	a201      	add	r2, pc, #4	@ (adr r2, 8005888 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058d5 	.word	0x080058d5
 800588c:	080058a1 	.word	0x080058a1
 8005890:	080058b7 	.word	0x080058b7
 8005894:	080058d5 	.word	0x080058d5
 8005898:	080058d5 	.word	0x080058d5
 800589c:	080058d5 	.word	0x080058d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a4:	3308      	adds	r3, #8
 80058a6:	2101      	movs	r1, #1
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 fd79 	bl	80073a0 <RCCEx_PLL2_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058b4:	e00f      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ba:	3328      	adds	r3, #40	@ 0x28
 80058bc:	2101      	movs	r1, #1
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 fe20 	bl	8007504 <RCCEx_PLL3_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058ca:	e004      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058d2:	e000      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80058d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058de:	4b96      	ldr	r3, [pc, #600]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80058e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e2:	f023 0107 	bic.w	r1, r3, #7
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ec:	4a92      	ldr	r2, [pc, #584]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80058ee:	430b      	orrs	r3, r1
 80058f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80058f2:	e003      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f002 0304 	and.w	r3, r2, #4
 8005908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800590c:	2300      	movs	r3, #0
 800590e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005912:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005916:	460b      	mov	r3, r1
 8005918:	4313      	orrs	r3, r2
 800591a:	d044      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005924:	2b05      	cmp	r3, #5
 8005926:	d825      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005928:	a201      	add	r2, pc, #4	@ (adr r2, 8005930 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	0800597d 	.word	0x0800597d
 8005934:	08005949 	.word	0x08005949
 8005938:	0800595f 	.word	0x0800595f
 800593c:	0800597d 	.word	0x0800597d
 8005940:	0800597d 	.word	0x0800597d
 8005944:	0800597d 	.word	0x0800597d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	3308      	adds	r3, #8
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f001 fd25 	bl	80073a0 <RCCEx_PLL2_Config>
 8005956:	4603      	mov	r3, r0
 8005958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800595c:	e00f      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005962:	3328      	adds	r3, #40	@ 0x28
 8005964:	2101      	movs	r1, #1
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fdcc 	bl	8007504 <RCCEx_PLL3_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005972:	e004      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800597a:	e000      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800597c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800597e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005986:	4b6c      	ldr	r3, [pc, #432]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598a:	f023 0107 	bic.w	r1, r3, #7
 800598e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005996:	4a68      	ldr	r2, [pc, #416]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005998:	430b      	orrs	r3, r1
 800599a:	6593      	str	r3, [r2, #88]	@ 0x58
 800599c:	e003      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f002 0320 	and.w	r3, r2, #32
 80059b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d055      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059d2:	d033      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80059d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059d8:	d82c      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059de:	d02f      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80059e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e4:	d826      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059ea:	d02b      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80059ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059f0:	d820      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f6:	d012      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80059f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059fc:	d81a      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d022      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005a02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a06:	d115      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 fcc5 	bl	80073a0 <RCCEx_PLL2_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a1c:	e015      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a22:	3328      	adds	r3, #40	@ 0x28
 8005a24:	2102      	movs	r1, #2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f001 fd6c 	bl	8007504 <RCCEx_PLL3_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a32:	e00a      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a3a:	e006      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a3c:	bf00      	nop
 8005a3e:	e004      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a40:	bf00      	nop
 8005a42:	e002      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a44:	bf00      	nop
 8005a46:	e000      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a52:	4b39      	ldr	r3, [pc, #228]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a56:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a62:	4a35      	ldr	r2, [pc, #212]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a68:	e003      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a82:	2300      	movs	r3, #0
 8005a84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a88:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	d058      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a9a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a9e:	d033      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005aa0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005aa4:	d82c      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aaa:	d02f      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab0:	d826      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005ab2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ab6:	d02b      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005ab8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005abc:	d820      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005abe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ac2:	d012      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ac8:	d81a      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d022      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad2:	d115      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad8:	3308      	adds	r3, #8
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f001 fc5f 	bl	80073a0 <RCCEx_PLL2_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ae8:	e015      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aee:	3328      	adds	r3, #40	@ 0x28
 8005af0:	2102      	movs	r1, #2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 fd06 	bl	8007504 <RCCEx_PLL3_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005afe:	e00a      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b06:	e006      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b08:	bf00      	nop
 8005b0a:	e004      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b0c:	bf00      	nop
 8005b0e:	e002      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b10:	bf00      	nop
 8005b12:	e000      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10e      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b1e:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b22:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b2e:	4a02      	ldr	r2, [pc, #8]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b34:	e006      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005b36:	bf00      	nop
 8005b38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	d055      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b6c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b70:	d033      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005b72:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b76:	d82c      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b7c:	d02f      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b82:	d826      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b84:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b88:	d02b      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005b8a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b8e:	d820      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b94:	d012      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b9a:	d81a      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d022      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba4:	d115      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005baa:	3308      	adds	r3, #8
 8005bac:	2100      	movs	r1, #0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 fbf6 	bl	80073a0 <RCCEx_PLL2_Config>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bba:	e015      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc0:	3328      	adds	r3, #40	@ 0x28
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 fc9d 	bl	8007504 <RCCEx_PLL3_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bd0:	e00a      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bd8:	e006      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e004      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005bde:	bf00      	nop
 8005be0:	e002      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005be2:	bf00      	nop
 8005be4:	e000      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005bf0:	4ba0      	ldr	r3, [pc, #640]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c00:	4a9c      	ldr	r2, [pc, #624]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c02:	430b      	orrs	r3, r1
 8005c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c06:	e003      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f002 0308 	and.w	r3, r2, #8
 8005c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c20:	2300      	movs	r3, #0
 8005c22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c26:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	d01e      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3c:	d10c      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c42:	3328      	adds	r3, #40	@ 0x28
 8005c44:	2102      	movs	r1, #2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 fc5c 	bl	8007504 <RCCEx_PLL3_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005c58:	4b86      	ldr	r3, [pc, #536]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c68:	4a82      	ldr	r2, [pc, #520]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f002 0310 	and.w	r3, r2, #16
 8005c7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c84:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	d01e      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c9a:	d10c      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca0:	3328      	adds	r3, #40	@ 0x28
 8005ca2:	2102      	movs	r1, #2
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fc2d 	bl	8007504 <RCCEx_PLL3_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc6:	4a6b      	ldr	r2, [pc, #428]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cda:	2300      	movs	r3, #0
 8005cdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cde:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	d03e      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cf4:	d022      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005cf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cfa:	d81b      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d04:	d00b      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005d06:	e015      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 fb45 	bl	80073a0 <RCCEx_PLL2_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d1c:	e00f      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d22:	3328      	adds	r3, #40	@ 0x28
 8005d24:	2102      	movs	r1, #2
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 fbec 	bl	8007504 <RCCEx_PLL3_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d32:	e004      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d46:	4b4b      	ldr	r3, [pc, #300]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d56:	4a47      	ldr	r2, [pc, #284]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d5c:	e003      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d72:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d74:	2300      	movs	r3, #0
 8005d76:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	d03b      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d8e:	d01f      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005d90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d94:	d818      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d9a:	d003      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005d9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005da0:	d007      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005da2:	e011      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da4:	4b33      	ldr	r3, [pc, #204]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	4a32      	ldr	r2, [pc, #200]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005db0:	e00f      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db6:	3328      	adds	r3, #40	@ 0x28
 8005db8:	2101      	movs	r1, #1
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 fba2 	bl	8007504 <RCCEx_PLL3_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dc6:	e004      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dce:	e000      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dda:	4b26      	ldr	r3, [pc, #152]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dea:	4a22      	ldr	r2, [pc, #136]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6553      	str	r3, [r2, #84]	@ 0x54
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005df6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e08:	2300      	movs	r3, #0
 8005e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e0c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e10:	460b      	mov	r3, r1
 8005e12:	4313      	orrs	r3, r2
 8005e14:	d034      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e24:	d007      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005e26:	e011      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e28:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	4a11      	ldr	r2, [pc, #68]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e34:	e00e      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 faae 	bl	80073a0 <RCCEx_PLL2_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e4a:	e003      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10d      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e60:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6a:	4a02      	ldr	r2, [pc, #8]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e70:	e006      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005e72:	bf00      	nop
 8005e74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e8e:	2300      	movs	r3, #0
 8005e90:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e92:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e96:	460b      	mov	r3, r1
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea0:	3328      	adds	r3, #40	@ 0x28
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fb2d 	bl	8007504 <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ec8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	d036      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005edc:	d018      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005ede:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee2:	d811      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee8:	d014      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eee:	d80b      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d011      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ef8:	d106      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005efa:	4bb7      	ldr	r3, [pc, #732]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efe:	4ab6      	ldr	r2, [pc, #728]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005f06:	e008      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f0e:	e004      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005f10:	bf00      	nop
 8005f12:	e002      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f22:	4bad      	ldr	r3, [pc, #692]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f30:	4aa9      	ldr	r2, [pc, #676]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f32:	430b      	orrs	r3, r1
 8005f34:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f36:	e003      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f4e:	2300      	movs	r3, #0
 8005f50:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f56:	460b      	mov	r3, r1
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	d009      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f5c:	4b9e      	ldr	r3, [pc, #632]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6a:	4a9b      	ldr	r2, [pc, #620]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f7e:	2300      	movs	r3, #0
 8005f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f86:	460b      	mov	r3, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f8c:	4b92      	ldr	r3, [pc, #584]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f90:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f9a:	4a8f      	ldr	r2, [pc, #572]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fae:	2300      	movs	r3, #0
 8005fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d00e      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fbc:	4b86      	ldr	r3, [pc, #536]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	4a85      	ldr	r2, [pc, #532]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fc6:	6113      	str	r3, [r2, #16]
 8005fc8:	4b83      	ldr	r3, [pc, #524]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fca:	6919      	ldr	r1, [r3, #16]
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fd4:	4a80      	ldr	r2, [pc, #512]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fe8:	2300      	movs	r3, #0
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	d009      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ff6:	4b78      	ldr	r3, [pc, #480]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ffa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006004:	4a74      	ldr	r2, [pc, #464]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006006:	430b      	orrs	r3, r1
 8006008:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800600a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006016:	633b      	str	r3, [r7, #48]	@ 0x30
 8006018:	2300      	movs	r3, #0
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
 800601c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006020:	460b      	mov	r3, r1
 8006022:	4313      	orrs	r3, r2
 8006024:	d00a      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006026:	4b6c      	ldr	r3, [pc, #432]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006036:	4a68      	ldr	r2, [pc, #416]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006038:	430b      	orrs	r3, r1
 800603a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	2100      	movs	r1, #0
 8006046:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800604e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006052:	460b      	mov	r3, r1
 8006054:	4313      	orrs	r3, r2
 8006056:	d011      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	3308      	adds	r3, #8
 800605e:	2100      	movs	r1, #0
 8006060:	4618      	mov	r0, r3
 8006062:	f001 f99d 	bl	80073a0 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800606c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	2100      	movs	r1, #0
 8006086:	6239      	str	r1, [r7, #32]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	627b      	str	r3, [r7, #36]	@ 0x24
 800608e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006092:	460b      	mov	r3, r1
 8006094:	4313      	orrs	r3, r2
 8006096:	d011      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	3308      	adds	r3, #8
 800609e:	2101      	movs	r1, #1
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 f97d 	bl	80073a0 <RCCEx_PLL2_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80060ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	2100      	movs	r1, #0
 80060c6:	61b9      	str	r1, [r7, #24]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060d2:	460b      	mov	r3, r1
 80060d4:	4313      	orrs	r3, r2
 80060d6:	d011      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060dc:	3308      	adds	r3, #8
 80060de:	2102      	movs	r1, #2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 f95d 	bl	80073a0 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80060ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80060fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	2100      	movs	r1, #0
 8006106:	6139      	str	r1, [r7, #16]
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006112:	460b      	mov	r3, r1
 8006114:	4313      	orrs	r3, r2
 8006116:	d011      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611c:	3328      	adds	r3, #40	@ 0x28
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f001 f9ef 	bl	8007504 <RCCEx_PLL3_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800612c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006138:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	2100      	movs	r1, #0
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006152:	460b      	mov	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	d011      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615c:	3328      	adds	r3, #40	@ 0x28
 800615e:	2101      	movs	r1, #1
 8006160:	4618      	mov	r0, r3
 8006162:	f001 f9cf 	bl	8007504 <RCCEx_PLL3_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800616c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	2100      	movs	r1, #0
 8006186:	6039      	str	r1, [r7, #0]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006192:	460b      	mov	r3, r1
 8006194:	4313      	orrs	r3, r2
 8006196:	d011      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619c:	3328      	adds	r3, #40	@ 0x28
 800619e:	2102      	movs	r1, #2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 f9af 	bl	8007504 <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80061ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80061bc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80061d0:	46bd      	mov	sp, r7
 80061d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d6:	bf00      	nop
 80061d8:	58024400 	.word	0x58024400

080061dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b090      	sub	sp, #64	@ 0x40
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80061ee:	430b      	orrs	r3, r1
 80061f0:	f040 8094 	bne.w	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80061f4:	4b9b      	ldr	r3, [pc, #620]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	2b04      	cmp	r3, #4
 8006202:	f200 8087 	bhi.w	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006206:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006221 	.word	0x08006221
 8006210:	08006249 	.word	0x08006249
 8006214:	08006271 	.word	0x08006271
 8006218:	0800630d 	.word	0x0800630d
 800621c:	08006299 	.word	0x08006299
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006220:	4b90      	ldr	r3, [pc, #576]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006228:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800622c:	d108      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800622e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006232:	4618      	mov	r0, r3
 8006234:	f000 ff62 	bl	80070fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800623c:	f000 bc93 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006244:	f000 bc8f 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006248:	4b86      	ldr	r3, [pc, #536]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006254:	d108      	bne.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006256:	f107 0318 	add.w	r3, r7, #24
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fca6 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006264:	f000 bc7f 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800626c:	f000 bc7b 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006270:	4b7c      	ldr	r3, [pc, #496]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800627c:	d108      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800627e:	f107 030c 	add.w	r3, r7, #12
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fde6 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800628c:	f000 bc6b 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006294:	f000 bc67 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006298:	4b72      	ldr	r3, [pc, #456]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800629a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062a2:	4b70      	ldr	r3, [pc, #448]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d10c      	bne.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80062ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d109      	bne.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	08db      	lsrs	r3, r3, #3
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	4a6a      	ldr	r2, [pc, #424]	@ (8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
 80062c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c6:	e01f      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062c8:	4b66      	ldr	r3, [pc, #408]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d4:	d106      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80062d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062dc:	d102      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062de:	4b63      	ldr	r3, [pc, #396]	@ (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80062e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e2:	e011      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062e4:	4b5f      	ldr	r3, [pc, #380]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062f0:	d106      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80062f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062f8:	d102      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062fe:	e003      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006304:	f000 bc2f 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006308:	f000 bc2d 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800630c:	4b59      	ldr	r3, [pc, #356]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006310:	f000 bc29 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006318:	f000 bc25 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800631c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006320:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006324:	430b      	orrs	r3, r1
 8006326:	f040 80a7 	bne.w	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800632a:	4b4e      	ldr	r3, [pc, #312]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006332:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006336:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800633a:	d054      	beq.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006342:	f200 808b 	bhi.w	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800634c:	f000 8083 	beq.w	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006352:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006356:	f200 8081 	bhi.w	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006360:	d02f      	beq.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006368:	d878      	bhi.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006376:	d012      	beq.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006378:	e070      	b.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800637a:	4b3a      	ldr	r3, [pc, #232]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006382:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006386:	d107      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800638c:	4618      	mov	r0, r3
 800638e:	f000 feb5 	bl	80070fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006396:	e3e6      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800639c:	e3e3      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800639e:	4b31      	ldr	r3, [pc, #196]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063aa:	d107      	bne.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ac:	f107 0318 	add.w	r3, r7, #24
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fbfb 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063ba:	e3d4      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c0:	e3d1      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063c2:	4b28      	ldr	r3, [pc, #160]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ce:	d107      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063d0:	f107 030c 	add.w	r3, r7, #12
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fd3d 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063de:	e3c2      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e4:	e3bf      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80063ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d10c      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80063fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d109      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006402:	4b18      	ldr	r3, [pc, #96]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	08db      	lsrs	r3, r3, #3
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800640e:	fa22 f303 	lsr.w	r3, r2, r3
 8006412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006414:	e01e      	b.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006416:	4b13      	ldr	r3, [pc, #76]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006422:	d106      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800642a:	d102      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800642c:	4b0f      	ldr	r3, [pc, #60]	@ (800646c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800642e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006430:	e010      	b.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006432:	4b0c      	ldr	r3, [pc, #48]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800643e:	d106      	bne.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006446:	d102      	bne.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006448:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800644a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800644c:	e002      	b.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006452:	e388      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006454:	e387      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006456:	4b07      	ldr	r3, [pc, #28]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800645a:	e384      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006460:	e381      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006462:	bf00      	nop
 8006464:	58024400 	.word	0x58024400
 8006468:	03d09000 	.word	0x03d09000
 800646c:	003d0900 	.word	0x003d0900
 8006470:	02dc6c00 	.word	0x02dc6c00
 8006474:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006480:	430b      	orrs	r3, r1
 8006482:	f040 809c 	bne.w	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006486:	4b9e      	ldr	r3, [pc, #632]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800648e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006492:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006496:	d054      	beq.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800649e:	f200 808b 	bhi.w	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064a8:	f000 8083 	beq.w	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064b2:	f200 8081 	bhi.w	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80064b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064bc:	d02f      	beq.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064c4:	d878      	bhi.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80064c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064d2:	d012      	beq.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80064d4:	e070      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064d6:	4b8a      	ldr	r3, [pc, #552]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064e2:	d107      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fe07 	bl	80070fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064f2:	e338      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f8:	e335      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064fa:	4b81      	ldr	r3, [pc, #516]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006506:	d107      	bne.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006508:	f107 0318 	add.w	r3, r7, #24
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fb4d 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006516:	e326      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800651c:	e323      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800651e:	4b78      	ldr	r3, [pc, #480]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800652a:	d107      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800652c:	f107 030c 	add.w	r3, r7, #12
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fc8f 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800653a:	e314      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006540:	e311      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006542:	4b6f      	ldr	r3, [pc, #444]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006546:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800654a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800654c:	4b6c      	ldr	r3, [pc, #432]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b04      	cmp	r3, #4
 8006556:	d10c      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800655e:	4b68      	ldr	r3, [pc, #416]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	08db      	lsrs	r3, r3, #3
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	4a66      	ldr	r2, [pc, #408]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800656a:	fa22 f303 	lsr.w	r3, r2, r3
 800656e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006570:	e01e      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006572:	4b63      	ldr	r3, [pc, #396]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800657e:	d106      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006586:	d102      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006588:	4b5f      	ldr	r3, [pc, #380]	@ (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800658a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800658c:	e010      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800658e:	4b5c      	ldr	r3, [pc, #368]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800659a:	d106      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800659c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800659e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065a2:	d102      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065a4:	4b59      	ldr	r3, [pc, #356]	@ (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065a8:	e002      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80065ae:	e2da      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80065b0:	e2d9      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065b2:	4b57      	ldr	r3, [pc, #348]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80065b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065b6:	e2d6      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065bc:	e2d3      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80065be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80065c6:	430b      	orrs	r3, r1
 80065c8:	f040 80a7 	bne.w	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80065cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80065d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80065d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065dc:	d055      	beq.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065e4:	f200 8096 	bhi.w	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065ee:	f000 8084 	beq.w	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80065f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065f8:	f200 808c 	bhi.w	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80065fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006602:	d030      	beq.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800660a:	f200 8083 	bhi.w	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661a:	d012      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800661c:	e07a      	b.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800661e:	4b38      	ldr	r3, [pc, #224]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006626:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800662a:	d107      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800662c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fd63 	bl	80070fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800663a:	e294      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006640:	e291      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006642:	4b2f      	ldr	r3, [pc, #188]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800664a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800664e:	d107      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006650:	f107 0318 	add.w	r3, r7, #24
 8006654:	4618      	mov	r0, r3
 8006656:	f000 faa9 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665e:	e282      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006664:	e27f      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006666:	4b26      	ldr	r3, [pc, #152]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800666e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006672:	d107      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006674:	f107 030c 	add.w	r3, r7, #12
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fbeb 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006682:	e270      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006688:	e26d      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800668a:	4b1d      	ldr	r3, [pc, #116]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800668c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800668e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006692:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006694:	4b1a      	ldr	r3, [pc, #104]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b04      	cmp	r3, #4
 800669e:	d10c      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80066a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066a6:	4b16      	ldr	r3, [pc, #88]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	08db      	lsrs	r3, r3, #3
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	4a14      	ldr	r2, [pc, #80]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80066b2:	fa22 f303 	lsr.w	r3, r2, r3
 80066b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b8:	e01e      	b.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066ba:	4b11      	ldr	r3, [pc, #68]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066c6:	d106      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80066c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ce:	d102      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80066d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066d4:	e010      	b.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066e2:	d106      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80066e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ea:	d102      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066ec:	4b07      	ldr	r3, [pc, #28]	@ (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066f0:	e002      	b.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80066f6:	e236      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80066f8:	e235      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066fa:	4b05      	ldr	r3, [pc, #20]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80066fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066fe:	e232      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006700:	58024400 	.word	0x58024400
 8006704:	03d09000 	.word	0x03d09000
 8006708:	003d0900 	.word	0x003d0900
 800670c:	02dc6c00 	.word	0x02dc6c00
 8006710:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006718:	e225      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800671a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800671e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006722:	430b      	orrs	r3, r1
 8006724:	f040 8085 	bne.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006728:	4b9c      	ldr	r3, [pc, #624]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800672a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800672c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006730:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006738:	d06b      	beq.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800673a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006740:	d874      	bhi.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006744:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006748:	d056      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800674a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006750:	d86c      	bhi.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006754:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006758:	d03b      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800675a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006760:	d864      	bhi.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006768:	d021      	beq.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006770:	d85c      	bhi.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800677e:	d004      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8006780:	e054      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006782:	f7fe fb1d 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 8006786:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006788:	e1ed      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800678a:	4b84      	ldr	r3, [pc, #528]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006796:	d107      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006798:	f107 0318 	add.w	r3, r7, #24
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fa05 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067a6:	e1de      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067ac:	e1db      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067ae:	4b7b      	ldr	r3, [pc, #492]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ba:	d107      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067bc:	f107 030c 	add.w	r3, r7, #12
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fb47 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ca:	e1cc      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067d0:	e1c9      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067d2:	4b72      	ldr	r3, [pc, #456]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d109      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067de:	4b6f      	ldr	r3, [pc, #444]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	08db      	lsrs	r3, r3, #3
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	4a6d      	ldr	r2, [pc, #436]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80067ea:	fa22 f303 	lsr.w	r3, r2, r3
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f0:	e1b9      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f6:	e1b6      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80067f8:	4b68      	ldr	r3, [pc, #416]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006804:	d102      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006806:	4b67      	ldr	r3, [pc, #412]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800680a:	e1ac      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006810:	e1a9      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006812:	4b62      	ldr	r3, [pc, #392]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800681e:	d102      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006820:	4b61      	ldr	r3, [pc, #388]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006824:	e19f      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800682a:	e19c      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006830:	e199      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006836:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800683a:	430b      	orrs	r3, r1
 800683c:	d173      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800683e:	4b57      	ldr	r3, [pc, #348]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006842:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006846:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800684e:	d02f      	beq.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006856:	d863      	bhi.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006864:	d012      	beq.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006866:	e05b      	b.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006868:	4b4c      	ldr	r3, [pc, #304]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006874:	d107      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006876:	f107 0318 	add.w	r3, r7, #24
 800687a:	4618      	mov	r0, r3
 800687c:	f000 f996 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006884:	e16f      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800688a:	e16c      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800688c:	4b43      	ldr	r3, [pc, #268]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006898:	d107      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800689a:	f107 030c 	add.w	r3, r7, #12
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fad8 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a8:	e15d      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ae:	e15a      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068b0:	4b3a      	ldr	r3, [pc, #232]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068ba:	4b38      	ldr	r3, [pc, #224]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80068c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d109      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068cc:	4b33      	ldr	r3, [pc, #204]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	08db      	lsrs	r3, r3, #3
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	4a32      	ldr	r2, [pc, #200]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
 80068dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068de:	e01e      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068e0:	4b2e      	ldr	r3, [pc, #184]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ec:	d106      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80068ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068f4:	d102      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068f6:	4b2b      	ldr	r3, [pc, #172]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80068f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068fa:	e010      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068fc:	4b27      	ldr	r3, [pc, #156]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006908:	d106      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800690a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006910:	d102      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006912:	4b25      	ldr	r3, [pc, #148]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006916:	e002      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800691c:	e123      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800691e:	e122      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006924:	e11f      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800692e:	430b      	orrs	r3, r1
 8006930:	d13c      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006932:	4b1a      	ldr	r3, [pc, #104]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800693a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006948:	d012      	beq.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800694a:	e023      	b.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800694c:	4b13      	ldr	r3, [pc, #76]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006954:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006958:	d107      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800695a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fbcc 	bl	80070fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006968:	e0fd      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800696e:	e0fa      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006970:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800697c:	d107      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800697e:	f107 0318 	add.w	r3, r7, #24
 8006982:	4618      	mov	r0, r3
 8006984:	f000 f912 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800698c:	e0eb      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006992:	e0e8      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006998:	e0e5      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800699a:	bf00      	nop
 800699c:	58024400 	.word	0x58024400
 80069a0:	03d09000 	.word	0x03d09000
 80069a4:	003d0900 	.word	0x003d0900
 80069a8:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80069b4:	430b      	orrs	r3, r1
 80069b6:	f040 8085 	bne.w	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80069ba:	4b6d      	ldr	r3, [pc, #436]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80069c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80069c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069ca:	d06b      	beq.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80069cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069d2:	d874      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069da:	d056      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80069dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e2:	d86c      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069ea:	d03b      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069f2:	d864      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069fa:	d021      	beq.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a02:	d85c      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a10:	d004      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006a12:	e054      	b.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a14:	f000 f8b4 	bl	8006b80 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a18:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a1a:	e0a4      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a1c:	4b54      	ldr	r3, [pc, #336]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a28:	d107      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a2a:	f107 0318 	add.w	r3, r7, #24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f8bc 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a38:	e095      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a3e:	e092      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a40:	4b4b      	ldr	r3, [pc, #300]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a4e:	f107 030c 	add.w	r3, r7, #12
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f9fe 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a5c:	e083      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a62:	e080      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a64:	4b42      	ldr	r3, [pc, #264]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d109      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a70:	4b3f      	ldr	r3, [pc, #252]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	08db      	lsrs	r3, r3, #3
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a82:	e070      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a88:	e06d      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a8a:	4b39      	ldr	r3, [pc, #228]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a96:	d102      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006a98:	4b37      	ldr	r3, [pc, #220]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a9c:	e063      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aa2:	e060      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006aa4:	4b32      	ldr	r3, [pc, #200]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ab0:	d102      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006ab2:	4b32      	ldr	r3, [pc, #200]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ab6:	e056      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006abc:	e053      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac2:	e050      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006acc:	430b      	orrs	r3, r1
 8006ace:	d148      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ad0:	4b27      	ldr	r3, [pc, #156]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ad8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ae0:	d02a      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ae8:	d838      	bhi.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006af6:	d00d      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006af8:	e030      	b.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006afa:	4b1d      	ldr	r3, [pc, #116]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b06:	d102      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006b08:	4b1c      	ldr	r3, [pc, #112]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b0c:	e02b      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b12:	e028      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b14:	4b16      	ldr	r3, [pc, #88]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b20:	d107      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fae8 	bl	80070fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b30:	e019      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b36:	e016      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b38:	4b0d      	ldr	r3, [pc, #52]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b44:	d107      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b46:	f107 0318 	add.w	r3, r7, #24
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 f82e 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b54:	e007      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b5a:	e004      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b60:	e001      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3740      	adds	r7, #64	@ 0x40
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	58024400 	.word	0x58024400
 8006b74:	03d09000 	.word	0x03d09000
 8006b78:	003d0900 	.word	0x003d0900
 8006b7c:	02dc6c00 	.word	0x02dc6c00

08006b80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b84:	f7fe f8ec 	bl	8004d60 <HAL_RCC_GetHCLKFreq>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	091b      	lsrs	r3, r3, #4
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	4904      	ldr	r1, [pc, #16]	@ (8006ba8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b96:	5ccb      	ldrb	r3, [r1, r3]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	58024400 	.word	0x58024400
 8006ba8:	08012a48 	.word	0x08012a48

08006bac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b089      	sub	sp, #36	@ 0x24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bb4:	4ba1      	ldr	r3, [pc, #644]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006bbe:	4b9f      	ldr	r3, [pc, #636]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc2:	0b1b      	lsrs	r3, r3, #12
 8006bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bca:	4b9c      	ldr	r3, [pc, #624]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006bd6:	4b99      	ldr	r3, [pc, #612]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bda:	08db      	lsrs	r3, r3, #3
 8006bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 8111 	beq.w	8006e1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	f000 8083 	beq.w	8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	f200 80a1 	bhi.w	8006d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d056      	beq.n	8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c16:	e099      	b.n	8006d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c18:	4b88      	ldr	r3, [pc, #544]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d02d      	beq.n	8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c24:	4b85      	ldr	r3, [pc, #532]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	08db      	lsrs	r3, r3, #3
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	4a84      	ldr	r2, [pc, #528]	@ (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
 8006c34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c7e:	e087      	b.n	8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c92:	4b6a      	ldr	r3, [pc, #424]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ca6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cc2:	e065      	b.n	8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	4b59      	ldr	r3, [pc, #356]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d06:	e043      	b.n	8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1a:	4b48      	ldr	r3, [pc, #288]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d4a:	e021      	b.n	8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5e:	4b37      	ldr	r3, [pc, #220]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d90:	4b2a      	ldr	r3, [pc, #168]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d94:	0a5b      	lsrs	r3, r3, #9
 8006d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006da6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db6:	ee17 2a90 	vmov	r2, s15
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	0c1b      	lsrs	r3, r3, #16
 8006dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dc8:	ee07 3a90 	vmov	s15, r3
 8006dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de4:	ee17 2a90 	vmov	r2, s15
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006dec:	4b13      	ldr	r3, [pc, #76]	@ (8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	0e1b      	lsrs	r3, r3, #24
 8006df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e12:	ee17 2a90 	vmov	r2, s15
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e1a:	e008      	b.n	8006e2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	609a      	str	r2, [r3, #8]
}
 8006e2e:	bf00      	nop
 8006e30:	3724      	adds	r7, #36	@ 0x24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	03d09000 	.word	0x03d09000
 8006e44:	46000000 	.word	0x46000000
 8006e48:	4c742400 	.word	0x4c742400
 8006e4c:	4a742400 	.word	0x4a742400
 8006e50:	4c371b00 	.word	0x4c371b00

08006e54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b089      	sub	sp, #36	@ 0x24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e66:	4b9f      	ldr	r3, [pc, #636]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6a:	0d1b      	lsrs	r3, r3, #20
 8006e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e72:	4b9c      	ldr	r3, [pc, #624]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	0a1b      	lsrs	r3, r3, #8
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e7e:	4b99      	ldr	r3, [pc, #612]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e82:	08db      	lsrs	r3, r3, #3
 8006e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	fb02 f303 	mul.w	r3, r2, r3
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8111 	beq.w	80070c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	f000 8083 	beq.w	8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	f200 80a1 	bhi.w	8006ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d056      	beq.n	8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ebe:	e099      	b.n	8006ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec0:	4b88      	ldr	r3, [pc, #544]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d02d      	beq.n	8006f28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ecc:	4b85      	ldr	r3, [pc, #532]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	08db      	lsrs	r3, r3, #3
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	4a84      	ldr	r2, [pc, #528]	@ (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8006edc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef6:	4b7b      	ldr	r3, [pc, #492]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f26:	e087      	b.n	8007038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f6a:	e065      	b.n	8007038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7e:	4b59      	ldr	r3, [pc, #356]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fae:	e043      	b.n	8007038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc2:	4b48      	ldr	r3, [pc, #288]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff2:	e021      	b.n	8007038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007006:	4b37      	ldr	r3, [pc, #220]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007016:	ed97 6a03 	vldr	s12, [r7, #12]
 800701a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800701e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800702a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007036:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007038:	4b2a      	ldr	r3, [pc, #168]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800703a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703c:	0a5b      	lsrs	r3, r3, #9
 800703e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800704e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007052:	edd7 6a07 	vldr	s13, [r7, #28]
 8007056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705e:	ee17 2a90 	vmov	r2, s15
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007066:	4b1f      	ldr	r3, [pc, #124]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007078:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800707c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007080:	edd7 6a07 	vldr	s13, [r7, #28]
 8007084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708c:	ee17 2a90 	vmov	r2, s15
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007094:	4b13      	ldr	r3, [pc, #76]	@ (80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007098:	0e1b      	lsrs	r3, r3, #24
 800709a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ba:	ee17 2a90 	vmov	r2, s15
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070c2:	e008      	b.n	80070d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	609a      	str	r2, [r3, #8]
}
 80070d6:	bf00      	nop
 80070d8:	3724      	adds	r7, #36	@ 0x24
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	46000000 	.word	0x46000000
 80070f0:	4c742400 	.word	0x4c742400
 80070f4:	4a742400 	.word	0x4a742400
 80070f8:	4c371b00 	.word	0x4c371b00

080070fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b089      	sub	sp, #36	@ 0x24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007104:	4ba0      	ldr	r3, [pc, #640]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800710e:	4b9e      	ldr	r3, [pc, #632]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	091b      	lsrs	r3, r3, #4
 8007114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007118:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800711a:	4b9b      	ldr	r3, [pc, #620]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007124:	4b98      	ldr	r3, [pc, #608]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007128:	08db      	lsrs	r3, r3, #3
 800712a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	fb02 f303 	mul.w	r3, r2, r3
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 8111 	beq.w	800736a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2b02      	cmp	r3, #2
 800714c:	f000 8083 	beq.w	8007256 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b02      	cmp	r3, #2
 8007154:	f200 80a1 	bhi.w	800729a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d056      	beq.n	8007212 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007164:	e099      	b.n	800729a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007166:	4b88      	ldr	r3, [pc, #544]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d02d      	beq.n	80071ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007172:	4b85      	ldr	r3, [pc, #532]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	08db      	lsrs	r3, r3, #3
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	4a83      	ldr	r2, [pc, #524]	@ (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800717e:	fa22 f303 	lsr.w	r3, r2, r3
 8007182:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719c:	4b7a      	ldr	r3, [pc, #488]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800719e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071cc:	e087      	b.n	80072de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007394 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80071dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e0:	4b69      	ldr	r3, [pc, #420]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	ee07 3a90 	vmov	s15, r3
 80071ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007200:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007210:	e065      	b.n	80072de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	ee07 3a90 	vmov	s15, r3
 8007218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007398 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007224:	4b58      	ldr	r3, [pc, #352]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007234:	ed97 6a03 	vldr	s12, [r7, #12]
 8007238:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800723c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007244:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007254:	e043      	b.n	80072de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007260:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800739c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007268:	4b47      	ldr	r3, [pc, #284]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007270:	ee07 3a90 	vmov	s15, r3
 8007274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007278:	ed97 6a03 	vldr	s12, [r7, #12]
 800727c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800728c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007298:	e021      	b.n	80072de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	ee07 3a90 	vmov	s15, r3
 80072a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007394 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ac:	4b36      	ldr	r3, [pc, #216]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80072de:	4b2a      	ldr	r3, [pc, #168]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e2:	0a5b      	lsrs	r3, r3, #9
 80072e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072e8:	ee07 3a90 	vmov	s15, r3
 80072ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007304:	ee17 2a90 	vmov	r2, s15
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800730c:	4b1e      	ldr	r3, [pc, #120]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007310:	0c1b      	lsrs	r3, r3, #16
 8007312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007326:	edd7 6a07 	vldr	s13, [r7, #28]
 800732a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007332:	ee17 2a90 	vmov	r2, s15
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800733a:	4b13      	ldr	r3, [pc, #76]	@ (8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733e:	0e1b      	lsrs	r3, r3, #24
 8007340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007344:	ee07 3a90 	vmov	s15, r3
 8007348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007350:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007354:	edd7 6a07 	vldr	s13, [r7, #28]
 8007358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007360:	ee17 2a90 	vmov	r2, s15
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007368:	e008      	b.n	800737c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	609a      	str	r2, [r3, #8]
}
 800737c:	bf00      	nop
 800737e:	3724      	adds	r7, #36	@ 0x24
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	58024400 	.word	0x58024400
 800738c:	03d09000 	.word	0x03d09000
 8007390:	46000000 	.word	0x46000000
 8007394:	4c742400 	.word	0x4c742400
 8007398:	4a742400 	.word	0x4a742400
 800739c:	4c371b00 	.word	0x4c371b00

080073a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073ae:	4b53      	ldr	r3, [pc, #332]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80073b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d101      	bne.n	80073be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e099      	b.n	80074f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073be:	4b4f      	ldr	r3, [pc, #316]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a4e      	ldr	r2, [pc, #312]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80073c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ca:	f7fb fb8b 	bl	8002ae4 <HAL_GetTick>
 80073ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073d0:	e008      	b.n	80073e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073d2:	f7fb fb87 	bl	8002ae4 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d901      	bls.n	80073e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e086      	b.n	80074f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073e4:	4b45      	ldr	r3, [pc, #276]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1f0      	bne.n	80073d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073f0:	4b42      	ldr	r3, [pc, #264]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80073f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	031b      	lsls	r3, r3, #12
 80073fe:	493f      	ldr	r1, [pc, #252]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 8007400:	4313      	orrs	r3, r2
 8007402:	628b      	str	r3, [r1, #40]	@ 0x28
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	3b01      	subs	r3, #1
 800740a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	3b01      	subs	r3, #1
 8007414:	025b      	lsls	r3, r3, #9
 8007416:	b29b      	uxth	r3, r3
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	3b01      	subs	r3, #1
 8007420:	041b      	lsls	r3, r3, #16
 8007422:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	3b01      	subs	r3, #1
 800742e:	061b      	lsls	r3, r3, #24
 8007430:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007434:	4931      	ldr	r1, [pc, #196]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 8007436:	4313      	orrs	r3, r2
 8007438:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800743a:	4b30      	ldr	r3, [pc, #192]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	492d      	ldr	r1, [pc, #180]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 8007448:	4313      	orrs	r3, r2
 800744a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800744c:	4b2b      	ldr	r3, [pc, #172]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 800744e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007450:	f023 0220 	bic.w	r2, r3, #32
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	4928      	ldr	r1, [pc, #160]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 800745a:	4313      	orrs	r3, r2
 800745c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800745e:	4b27      	ldr	r3, [pc, #156]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	4a26      	ldr	r2, [pc, #152]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 8007464:	f023 0310 	bic.w	r3, r3, #16
 8007468:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800746a:	4b24      	ldr	r3, [pc, #144]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 800746c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800746e:	4b24      	ldr	r3, [pc, #144]	@ (8007500 <RCCEx_PLL2_Config+0x160>)
 8007470:	4013      	ands	r3, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	69d2      	ldr	r2, [r2, #28]
 8007476:	00d2      	lsls	r2, r2, #3
 8007478:	4920      	ldr	r1, [pc, #128]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 800747a:	4313      	orrs	r3, r2
 800747c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800747e:	4b1f      	ldr	r3, [pc, #124]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 8007480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007482:	4a1e      	ldr	r2, [pc, #120]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 8007484:	f043 0310 	orr.w	r3, r3, #16
 8007488:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d106      	bne.n	800749e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007490:	4b1a      	ldr	r3, [pc, #104]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 8007492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007494:	4a19      	ldr	r2, [pc, #100]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 8007496:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800749a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800749c:	e00f      	b.n	80074be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d106      	bne.n	80074b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074a4:	4b15      	ldr	r3, [pc, #84]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	4a14      	ldr	r2, [pc, #80]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80074aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074b0:	e005      	b.n	80074be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074b2:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80074b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b6:	4a11      	ldr	r2, [pc, #68]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80074b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074be:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a0e      	ldr	r2, [pc, #56]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80074c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ca:	f7fb fb0b 	bl	8002ae4 <HAL_GetTick>
 80074ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074d0:	e008      	b.n	80074e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074d2:	f7fb fb07 	bl	8002ae4 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e006      	b.n	80074f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074e4:	4b05      	ldr	r3, [pc, #20]	@ (80074fc <RCCEx_PLL2_Config+0x15c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0f0      	beq.n	80074d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	58024400 	.word	0x58024400
 8007500:	ffff0007 	.word	0xffff0007

08007504 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007512:	4b53      	ldr	r3, [pc, #332]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 8007514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b03      	cmp	r3, #3
 800751c:	d101      	bne.n	8007522 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e099      	b.n	8007656 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007522:	4b4f      	ldr	r3, [pc, #316]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a4e      	ldr	r2, [pc, #312]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 8007528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800752c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800752e:	f7fb fad9 	bl	8002ae4 <HAL_GetTick>
 8007532:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007534:	e008      	b.n	8007548 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007536:	f7fb fad5 	bl	8002ae4 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d901      	bls.n	8007548 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e086      	b.n	8007656 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007548:	4b45      	ldr	r3, [pc, #276]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1f0      	bne.n	8007536 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007554:	4b42      	ldr	r3, [pc, #264]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 8007556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007558:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	051b      	lsls	r3, r3, #20
 8007562:	493f      	ldr	r1, [pc, #252]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 8007564:	4313      	orrs	r3, r2
 8007566:	628b      	str	r3, [r1, #40]	@ 0x28
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	3b01      	subs	r3, #1
 800756e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	3b01      	subs	r3, #1
 8007578:	025b      	lsls	r3, r3, #9
 800757a:	b29b      	uxth	r3, r3
 800757c:	431a      	orrs	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	3b01      	subs	r3, #1
 8007584:	041b      	lsls	r3, r3, #16
 8007586:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	3b01      	subs	r3, #1
 8007592:	061b      	lsls	r3, r3, #24
 8007594:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007598:	4931      	ldr	r1, [pc, #196]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 800759a:	4313      	orrs	r3, r2
 800759c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800759e:	4b30      	ldr	r3, [pc, #192]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	492d      	ldr	r1, [pc, #180]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	4928      	ldr	r1, [pc, #160]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075c2:	4b27      	ldr	r3, [pc, #156]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	4a26      	ldr	r2, [pc, #152]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075ce:	4b24      	ldr	r3, [pc, #144]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075d2:	4b24      	ldr	r3, [pc, #144]	@ (8007664 <RCCEx_PLL3_Config+0x160>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	69d2      	ldr	r2, [r2, #28]
 80075da:	00d2      	lsls	r2, r2, #3
 80075dc:	4920      	ldr	r1, [pc, #128]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f8:	4a19      	ldr	r2, [pc, #100]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 80075fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007600:	e00f      	b.n	8007622 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d106      	bne.n	8007616 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007608:	4b15      	ldr	r3, [pc, #84]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 800760a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760c:	4a14      	ldr	r2, [pc, #80]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 800760e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007612:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007614:	e005      	b.n	8007622 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007616:	4b12      	ldr	r3, [pc, #72]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 8007618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761a:	4a11      	ldr	r2, [pc, #68]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 800761c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007620:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007622:	4b0f      	ldr	r3, [pc, #60]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a0e      	ldr	r2, [pc, #56]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 8007628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800762c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762e:	f7fb fa59 	bl	8002ae4 <HAL_GetTick>
 8007632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007634:	e008      	b.n	8007648 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007636:	f7fb fa55 	bl	8002ae4 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e006      	b.n	8007656 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007648:	4b05      	ldr	r3, [pc, #20]	@ (8007660 <RCCEx_PLL3_Config+0x15c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0f0      	beq.n	8007636 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	58024400 	.word	0x58024400
 8007664:	ffff0007 	.word	0xffff0007

08007668 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d071      	beq.n	800775e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fa fc22 	bl	8001ed8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	2b10      	cmp	r3, #16
 80076a8:	d050      	beq.n	800774c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	22ca      	movs	r2, #202	@ 0xca
 80076b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2253      	movs	r2, #83	@ 0x53
 80076b8:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f9a0 	bl	8007a00 <RTC_EnterInitMode>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d124      	bne.n	8007714 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6899      	ldr	r1, [r3, #8]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	4b24      	ldr	r3, [pc, #144]	@ (8007768 <HAL_RTC_Init+0x100>)
 80076d6:	400b      	ands	r3, r1
 80076d8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6899      	ldr	r1, [r3, #8]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	0419      	lsls	r1, r3, #16
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f9ac 	bl	8007a68 <RTC_ExitInitMode>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d113      	bne.n	8007742 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0203 	bic.w	r2, r2, #3
 8007728:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	69da      	ldr	r2, [r3, #28]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	22ff      	movs	r2, #255	@ 0xff
 8007748:	625a      	str	r2, [r3, #36]	@ 0x24
 800774a:	e001      	b.n	8007750 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800775e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	ff8fffbf 	.word	0xff8fffbf

0800776c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_RTC_SetTime+0x1a>
 8007782:	2302      	movs	r3, #2
 8007784:	e089      	b.n	800789a <HAL_RTC_SetTime+0x12e>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2202      	movs	r2, #2
 8007792:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	22ca      	movs	r2, #202	@ 0xca
 800779c:	625a      	str	r2, [r3, #36]	@ 0x24
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2253      	movs	r2, #83	@ 0x53
 80077a4:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f92a 	bl	8007a00 <RTC_EnterInitMode>
 80077ac:	4603      	mov	r3, r0
 80077ae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80077b0:	7cfb      	ldrb	r3, [r7, #19]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d161      	bne.n	800787a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d126      	bne.n	800780a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2200      	movs	r2, #0
 80077ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f985 	bl	8007ae4 <RTC_ByteToBcd2>
 80077da:	4603      	mov	r3, r0
 80077dc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f97e 	bl	8007ae4 <RTC_ByteToBcd2>
 80077e8:	4603      	mov	r3, r0
 80077ea:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077ec:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	789b      	ldrb	r3, [r3, #2]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f976 	bl	8007ae4 <RTC_ByteToBcd2>
 80077f8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077fa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	78db      	ldrb	r3, [r3, #3]
 8007802:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	e018      	b.n	800783c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800782a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007830:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	78db      	ldrb	r3, [r3, #3]
 8007836:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007838:	4313      	orrs	r3, r2
 800783a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	6979      	ldr	r1, [r7, #20]
 8007842:	4b18      	ldr	r3, [pc, #96]	@ (80078a4 <HAL_RTC_SetTime+0x138>)
 8007844:	400b      	ands	r3, r1
 8007846:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007856:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6899      	ldr	r1, [r3, #8]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	431a      	orrs	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f8f9 	bl	8007a68 <RTC_ExitInitMode>
 8007876:	4603      	mov	r3, r0
 8007878:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	22ff      	movs	r2, #255	@ 0xff
 8007880:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007882:	7cfb      	ldrb	r3, [r7, #19]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d103      	bne.n	8007890 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007898:	7cfb      	ldrb	r3, [r7, #19]
}
 800789a:	4618      	mov	r0, r3
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd90      	pop	{r4, r7, pc}
 80078a2:	bf00      	nop
 80078a4:	007f7f7f 	.word	0x007f7f7f

080078a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078a8:	b590      	push	{r4, r7, lr}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_RTC_SetDate+0x1a>
 80078be:	2302      	movs	r3, #2
 80078c0:	e073      	b.n	80079aa <HAL_RTC_SetDate+0x102>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10e      	bne.n	80078f6 <HAL_RTC_SetDate+0x4e>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d008      	beq.n	80078f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	785b      	ldrb	r3, [r3, #1]
 80078e8:	f023 0310 	bic.w	r3, r3, #16
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	330a      	adds	r3, #10
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d11c      	bne.n	8007936 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	78db      	ldrb	r3, [r3, #3]
 8007900:	4618      	mov	r0, r3
 8007902:	f000 f8ef 	bl	8007ae4 <RTC_ByteToBcd2>
 8007906:	4603      	mov	r3, r0
 8007908:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f8e8 	bl	8007ae4 <RTC_ByteToBcd2>
 8007914:	4603      	mov	r3, r0
 8007916:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007918:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	789b      	ldrb	r3, [r3, #2]
 800791e:	4618      	mov	r0, r3
 8007920:	f000 f8e0 	bl	8007ae4 <RTC_ByteToBcd2>
 8007924:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007926:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e00e      	b.n	8007954 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	78db      	ldrb	r3, [r3, #3]
 800793a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007942:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007948:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	22ca      	movs	r2, #202	@ 0xca
 800795a:	625a      	str	r2, [r3, #36]	@ 0x24
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2253      	movs	r2, #83	@ 0x53
 8007962:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f84b 	bl	8007a00 <RTC_EnterInitMode>
 800796a:	4603      	mov	r3, r0
 800796c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800796e:	7cfb      	ldrb	r3, [r7, #19]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	6979      	ldr	r1, [r7, #20]
 800797a:	4b0e      	ldr	r3, [pc, #56]	@ (80079b4 <HAL_RTC_SetDate+0x10c>)
 800797c:	400b      	ands	r3, r1
 800797e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f871 	bl	8007a68 <RTC_ExitInitMode>
 8007986:	4603      	mov	r3, r0
 8007988:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	22ff      	movs	r2, #255	@ 0xff
 8007990:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007992:	7cfb      	ldrb	r3, [r7, #19]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d103      	bne.n	80079a0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80079a8:	7cfb      	ldrb	r3, [r7, #19]


}
 80079aa:	4618      	mov	r0, r3
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd90      	pop	{r4, r7, pc}
 80079b2:	bf00      	nop
 80079b4:	00ffff3f 	.word	0x00ffff3f

080079b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a0d      	ldr	r2, [pc, #52]	@ (80079fc <HAL_RTC_WaitForSynchro+0x44>)
 80079c6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80079c8:	f7fb f88c 	bl	8002ae4 <HAL_GetTick>
 80079cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079ce:	e009      	b.n	80079e4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079d0:	f7fb f888 	bl	8002ae4 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079de:	d901      	bls.n	80079e4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e007      	b.n	80079f4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f003 0320 	and.w	r3, r3, #32
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0ee      	beq.n	80079d0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	0003ff5f 	.word	0x0003ff5f

08007a00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d120      	bne.n	8007a5c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007a24:	f7fb f85e 	bl	8002ae4 <HAL_GetTick>
 8007a28:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a2a:	e00d      	b.n	8007a48 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007a2c:	f7fb f85a 	bl	8002ae4 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a3a:	d905      	bls.n	8007a48 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2203      	movs	r2, #3
 8007a44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <RTC_EnterInitMode+0x5c>
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d1e7      	bne.n	8007a2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007a74:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae0 <RTC_ExitInitMode+0x78>)
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	4a19      	ldr	r2, [pc, #100]	@ (8007ae0 <RTC_ExitInitMode+0x78>)
 8007a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a7e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007a80:	4b17      	ldr	r3, [pc, #92]	@ (8007ae0 <RTC_ExitInitMode+0x78>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10c      	bne.n	8007aa6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff ff93 	bl	80079b8 <HAL_RTC_WaitForSynchro>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01e      	beq.n	8007ad6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	e017      	b.n	8007ad6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae0 <RTC_ExitInitMode+0x78>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8007ae0 <RTC_ExitInitMode+0x78>)
 8007aac:	f023 0320 	bic.w	r3, r3, #32
 8007ab0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff ff80 	bl	80079b8 <HAL_RTC_WaitForSynchro>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2203      	movs	r2, #3
 8007ac2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007aca:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <RTC_ExitInitMode+0x78>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	4a04      	ldr	r2, [pc, #16]	@ (8007ae0 <RTC_ExitInitMode+0x78>)
 8007ad0:	f043 0320 	orr.w	r3, r3, #32
 8007ad4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	58004000 	.word	0x58004000

08007ae4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007af6:	e005      	b.n	8007b04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	3b0a      	subs	r3, #10
 8007b02:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007b04:	7afb      	ldrb	r3, [r7, #11]
 8007b06:	2b09      	cmp	r3, #9
 8007b08:	d8f6      	bhi.n	8007af8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	7afb      	ldrb	r3, [r7, #11]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	b2db      	uxtb	r3, r3
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08a      	sub	sp, #40	@ 0x28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e075      	b.n	8007c22 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fa f9f7 	bl	8001f3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2204      	movs	r2, #4
 8007b52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f868 	bl	8007c2c <HAL_SD_InitCard>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e05d      	b.n	8007c22 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007b66:	f107 0308 	add.w	r3, r7, #8
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fdb5 	bl	80086dc <HAL_SD_GetCardStatus>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e052      	b.n	8007c22 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007b7c:	7e3b      	ldrb	r3, [r7, #24]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007b82:	7e7b      	ldrb	r3, [r7, #25]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d10a      	bne.n	8007ba6 <HAL_SD_Init+0x82>
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d102      	bne.n	8007b9c <HAL_SD_Init+0x78>
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ba2:	659a      	str	r2, [r3, #88]	@ 0x58
 8007ba4:	e00b      	b.n	8007bbe <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d104      	bne.n	8007bb8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8007bb6:	e002      	b.n	8007bbe <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fe73 	bl	80088b0 <HAL_SD_ConfigWideBusOperation>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e026      	b.n	8007c22 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007bd4:	f7fa ff86 	bl	8002ae4 <HAL_GetTick>
 8007bd8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007bda:	e011      	b.n	8007c00 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007bdc:	f7fa ff82 	bl	8002ae4 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bea:	d109      	bne.n	8007c00 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007bf2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e010      	b.n	8007c22 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 ff67 	bl	8008ad4 <HAL_SD_GetCardState>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d1e7      	bne.n	8007bdc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3728      	adds	r7, #40	@ 0x28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c2c:	b590      	push	{r4, r7, lr}
 8007c2e:	b08d      	sub	sp, #52	@ 0x34
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007c44:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007c48:	f04f 0100 	mov.w	r1, #0
 8007c4c:	f7fe fac6 	bl	80061dc <HAL_RCCEx_GetPeriphCLKFreq>
 8007c50:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d109      	bne.n	8007c6c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007c66:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e070      	b.n	8007d4e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	4a39      	ldr	r2, [pc, #228]	@ (8007d58 <HAL_SD_InitCard+0x12c>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681c      	ldr	r4, [r3, #0]
 8007c7e:	466a      	mov	r2, sp
 8007c80:	f107 0318 	add.w	r3, r7, #24
 8007c84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007c88:	e882 0003 	stmia.w	r2, {r0, r1}
 8007c8c:	f107 030c 	add.w	r3, r7, #12
 8007c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c92:	4620      	mov	r0, r4
 8007c94:	f004 fc54 	bl	800c540 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f004 fc97 	bl	800c5d0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d007      	beq.n	8007cca <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007cba:	4a28      	ldr	r2, [pc, #160]	@ (8007d5c <HAL_SD_InitCard+0x130>)
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fa ff19 	bl	8002afc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fff0 	bl	8008cb0 <SD_PowerON>
 8007cd0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e02e      	b.n	8007d4e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 ff0f 	bl	8008b14 <SD_InitCard>
 8007cf6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00b      	beq.n	8007d16 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e01b      	b.n	8007d4e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f004 fcec 	bl	800c6fc <SDMMC_CmdBlockLength>
 8007d24:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00f      	beq.n	8007d4c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0b      	ldr	r2, [pc, #44]	@ (8007d60 <HAL_SD_InitCard+0x134>)
 8007d32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	372c      	adds	r7, #44	@ 0x2c
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd90      	pop	{r4, r7, pc}
 8007d56:	bf00      	nop
 8007d58:	014f8b59 	.word	0x014f8b59
 8007d5c:	00012110 	.word	0x00012110
 8007d60:	1fe00fff 	.word	0x1fe00fff

08007d64 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b092      	sub	sp, #72	@ 0x48
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d72:	f7fa feb7 	bl	8002ae4 <HAL_GetTick>
 8007d76:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d107      	bne.n	8007d96 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e167      	b.n	8008066 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	f040 815a 	bne.w	8008058 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007daa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	441a      	add	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d907      	bls.n	8007dc8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dbc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e14e      	b.n	8008066 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2203      	movs	r2, #3
 8007dcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d002      	beq.n	8007de6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de2:	025b      	lsls	r3, r3, #9
 8007de4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dea:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	025b      	lsls	r3, r3, #9
 8007df0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007df2:	2390      	movs	r3, #144	@ 0x90
 8007df4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007df6:	2302      	movs	r3, #2
 8007df8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f107 0214 	add.w	r2, r7, #20
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f004 fc49 	bl	800c6a4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e20:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d90a      	bls.n	8007e3e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e34:	4618      	mov	r0, r3
 8007e36:	f004 fca7 	bl	800c788 <SDMMC_CmdReadMultiBlock>
 8007e3a:	6478      	str	r0, [r7, #68]	@ 0x44
 8007e3c:	e009      	b.n	8007e52 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2201      	movs	r2, #1
 8007e42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f004 fc79 	bl	800c742 <SDMMC_CmdReadSingleBlock>
 8007e50:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d012      	beq.n	8007e7e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a84      	ldr	r2, [pc, #528]	@ (8008070 <HAL_SD_ReadBlocks+0x30c>)
 8007e5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e66:	431a      	orrs	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e0f3      	b.n	8008066 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e82:	e058      	b.n	8007f36 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d033      	beq.n	8007efa <HAL_SD_ReadBlocks+0x196>
 8007e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e94:	2b1f      	cmp	r3, #31
 8007e96:	d930      	bls.n	8007efa <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007e98:	2300      	movs	r3, #0
 8007e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e9c:	e027      	b.n	8007eee <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f004 fb76 	bl	800c594 <SDMMC_ReadFIFO>
 8007ea8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eca:	0c1b      	lsrs	r3, r3, #16
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eda:	0e1b      	lsrs	r3, r3, #24
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8007ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eea:	3301      	adds	r3, #1
 8007eec:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ef0:	2b07      	cmp	r3, #7
 8007ef2:	d9d4      	bls.n	8007e9e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef6:	3b20      	subs	r3, #32
 8007ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007efa:	f7fa fdf3 	bl	8002ae4 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d902      	bls.n	8007f10 <HAL_SD_ReadBlocks+0x1ac>
 8007f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d112      	bne.n	8007f36 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a56      	ldr	r2, [pc, #344]	@ (8008070 <HAL_SD_ReadBlocks+0x30c>)
 8007f16:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e097      	b.n	8008066 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f3c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d09f      	beq.n	8007e84 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f52:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d022      	beq.n	8007fa8 <HAL_SD_ReadBlocks+0x244>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d91f      	bls.n	8007fa8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d01b      	beq.n	8007fa8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f004 fc71 	bl	800c85c <SDMMC_CmdStopTransfer>
 8007f7a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d012      	beq.n	8007fa8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a3a      	ldr	r2, [pc, #232]	@ (8008070 <HAL_SD_ReadBlocks+0x30c>)
 8007f88:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f90:	431a      	orrs	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e05e      	b.n	8008066 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d012      	beq.n	8007fdc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a2d      	ldr	r2, [pc, #180]	@ (8008070 <HAL_SD_ReadBlocks+0x30c>)
 8007fbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc2:	f043 0208 	orr.w	r2, r3, #8
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e044      	b.n	8008066 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d012      	beq.n	8008010 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a20      	ldr	r2, [pc, #128]	@ (8008070 <HAL_SD_ReadBlocks+0x30c>)
 8007ff0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff6:	f043 0202 	orr.w	r2, r3, #2
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e02a      	b.n	8008066 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d012      	beq.n	8008044 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a13      	ldr	r2, [pc, #76]	@ (8008070 <HAL_SD_ReadBlocks+0x30c>)
 8008024:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800802a:	f043 0220 	orr.w	r2, r3, #32
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e010      	b.n	8008066 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a0a      	ldr	r2, [pc, #40]	@ (8008074 <HAL_SD_ReadBlocks+0x310>)
 800804a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	e006      	b.n	8008066 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
  }
}
 8008066:	4618      	mov	r0, r3
 8008068:	3748      	adds	r7, #72	@ 0x48
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	1fe00fff 	.word	0x1fe00fff
 8008074:	18000f3a 	.word	0x18000f3a

08008078 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b092      	sub	sp, #72	@ 0x48
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008086:	f7fa fd2d 	bl	8002ae4 <HAL_GetTick>
 800808a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d107      	bne.n	80080aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800809e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e16b      	b.n	8008382 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	f040 815e 	bne.w	8008374 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80080be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	441a      	add	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d907      	bls.n	80080dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e152      	b.n	8008382 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2203      	movs	r2, #3
 80080e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2200      	movs	r2, #0
 80080ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d002      	beq.n	80080fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80080f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f6:	025b      	lsls	r3, r3, #9
 80080f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080fe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	025b      	lsls	r3, r3, #9
 8008104:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008106:	2390      	movs	r3, #144	@ 0x90
 8008108:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800810a:	2300      	movs	r3, #0
 800810c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800810e:	2300      	movs	r3, #0
 8008110:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008112:	2300      	movs	r3, #0
 8008114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f107 0218 	add.w	r2, r7, #24
 800811e:	4611      	mov	r1, r2
 8008120:	4618      	mov	r0, r3
 8008122:	f004 fabf 	bl	800c6a4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008134:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d90a      	bls.n	8008152 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008148:	4618      	mov	r0, r3
 800814a:	f004 fb63 	bl	800c814 <SDMMC_CmdWriteMultiBlock>
 800814e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008150:	e009      	b.n	8008166 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2210      	movs	r2, #16
 8008156:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800815e:	4618      	mov	r0, r3
 8008160:	f004 fb35 	bl	800c7ce <SDMMC_CmdWriteSingleBlock>
 8008164:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008168:	2b00      	cmp	r3, #0
 800816a:	d012      	beq.n	8008192 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a86      	ldr	r2, [pc, #536]	@ (800838c <HAL_SD_WriteBlocks+0x314>)
 8008172:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800817a:	431a      	orrs	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e0f7      	b.n	8008382 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008196:	e05c      	b.n	8008252 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800819e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d037      	beq.n	8008216 <HAL_SD_WriteBlocks+0x19e>
 80081a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a8:	2b1f      	cmp	r3, #31
 80081aa:	d934      	bls.n	8008216 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80081ac:	2300      	movs	r3, #0
 80081ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80081b0:	e02b      	b.n	800820a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80081b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80081b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ba:	3301      	adds	r3, #1
 80081bc:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80081be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	021a      	lsls	r2, r3, #8
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80081ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081cc:	3301      	adds	r3, #1
 80081ce:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80081d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	041a      	lsls	r2, r3, #16
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80081dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081de:	3301      	adds	r3, #1
 80081e0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80081e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	061a      	lsls	r2, r3, #24
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	3301      	adds	r3, #1
 80081f2:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f107 0214 	add.w	r2, r7, #20
 80081fc:	4611      	mov	r1, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f004 f9d5 	bl	800c5ae <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008206:	3301      	adds	r3, #1
 8008208:	643b      	str	r3, [r7, #64]	@ 0x40
 800820a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800820c:	2b07      	cmp	r3, #7
 800820e:	d9d0      	bls.n	80081b2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008212:	3b20      	subs	r3, #32
 8008214:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008216:	f7fa fc65 	bl	8002ae4 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008222:	429a      	cmp	r2, r3
 8008224:	d902      	bls.n	800822c <HAL_SD_WriteBlocks+0x1b4>
 8008226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008228:	2b00      	cmp	r3, #0
 800822a:	d112      	bne.n	8008252 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a56      	ldr	r2, [pc, #344]	@ (800838c <HAL_SD_WriteBlocks+0x314>)
 8008232:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800823a:	431a      	orrs	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e097      	b.n	8008382 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008258:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800825c:	2b00      	cmp	r3, #0
 800825e:	d09b      	beq.n	8008198 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800826e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800827a:	2b00      	cmp	r3, #0
 800827c:	d022      	beq.n	80082c4 <HAL_SD_WriteBlocks+0x24c>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d91f      	bls.n	80082c4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008288:	2b03      	cmp	r3, #3
 800828a:	d01b      	beq.n	80082c4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4618      	mov	r0, r3
 8008292:	f004 fae3 	bl	800c85c <SDMMC_CmdStopTransfer>
 8008296:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800829a:	2b00      	cmp	r3, #0
 800829c:	d012      	beq.n	80082c4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a3a      	ldr	r2, [pc, #232]	@ (800838c <HAL_SD_WriteBlocks+0x314>)
 80082a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ac:	431a      	orrs	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e05e      	b.n	8008382 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d012      	beq.n	80082f8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a2d      	ldr	r2, [pc, #180]	@ (800838c <HAL_SD_WriteBlocks+0x314>)
 80082d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082de:	f043 0208 	orr.w	r2, r3, #8
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e044      	b.n	8008382 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d012      	beq.n	800832c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a20      	ldr	r2, [pc, #128]	@ (800838c <HAL_SD_WriteBlocks+0x314>)
 800830c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008312:	f043 0202 	orr.w	r2, r3, #2
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e02a      	b.n	8008382 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	2b00      	cmp	r3, #0
 8008338:	d012      	beq.n	8008360 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a13      	ldr	r2, [pc, #76]	@ (800838c <HAL_SD_WriteBlocks+0x314>)
 8008340:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008346:	f043 0210 	orr.w	r2, r3, #16
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e010      	b.n	8008382 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a0a      	ldr	r2, [pc, #40]	@ (8008390 <HAL_SD_WriteBlocks+0x318>)
 8008366:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	e006      	b.n	8008382 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008378:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
  }
}
 8008382:	4618      	mov	r0, r3
 8008384:	3748      	adds	r7, #72	@ 0x48
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	1fe00fff 	.word	0x1fe00fff
 8008390:	18000f3a 	.word	0x18000f3a

08008394 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a2:	0f9b      	lsrs	r3, r3, #30
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ae:	0e9b      	lsrs	r3, r3, #26
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083c0:	0e1b      	lsrs	r3, r3, #24
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d2:	0c1b      	lsrs	r3, r3, #16
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083f4:	0d1b      	lsrs	r3, r3, #20
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008400:	0c1b      	lsrs	r3, r3, #16
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f003 030f 	and.w	r3, r3, #15
 8008408:	b2da      	uxtb	r2, r3
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008412:	0bdb      	lsrs	r3, r3, #15
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	b2da      	uxtb	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008424:	0b9b      	lsrs	r3, r3, #14
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	b2da      	uxtb	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008436:	0b5b      	lsrs	r3, r3, #13
 8008438:	b2db      	uxtb	r3, r3
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	b2da      	uxtb	r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008448:	0b1b      	lsrs	r3, r3, #12
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	b2da      	uxtb	r2, r3
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2200      	movs	r2, #0
 800845a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008460:	2b00      	cmp	r3, #0
 8008462:	d163      	bne.n	800852c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008468:	009a      	lsls	r2, r3, #2
 800846a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800846e:	4013      	ands	r3, r2
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008474:	0f92      	lsrs	r2, r2, #30
 8008476:	431a      	orrs	r2, r3
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008480:	0edb      	lsrs	r3, r3, #27
 8008482:	b2db      	uxtb	r3, r3
 8008484:	f003 0307 	and.w	r3, r3, #7
 8008488:	b2da      	uxtb	r2, r3
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008492:	0e1b      	lsrs	r3, r3, #24
 8008494:	b2db      	uxtb	r3, r3
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	b2da      	uxtb	r2, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084a4:	0d5b      	lsrs	r3, r3, #21
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	f003 0307 	and.w	r3, r3, #7
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084b6:	0c9b      	lsrs	r3, r3, #18
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	f003 0307 	and.w	r3, r3, #7
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084c8:	0bdb      	lsrs	r3, r3, #15
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	7e1b      	ldrb	r3, [r3, #24]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	3302      	adds	r3, #2
 80084ec:	2201      	movs	r2, #1
 80084ee:	fa02 f303 	lsl.w	r3, r2, r3
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80084f6:	fb03 f202 	mul.w	r2, r3, r2
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	7a1b      	ldrb	r3, [r3, #8]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	2201      	movs	r2, #1
 800850a:	409a      	lsls	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008518:	0a52      	lsrs	r2, r2, #9
 800851a:	fb03 f202 	mul.w	r2, r3, r2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008528:	655a      	str	r2, [r3, #84]	@ 0x54
 800852a:	e031      	b.n	8008590 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008530:	2b01      	cmp	r3, #1
 8008532:	d11d      	bne.n	8008570 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008538:	041b      	lsls	r3, r3, #16
 800853a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008542:	0c1b      	lsrs	r3, r3, #16
 8008544:	431a      	orrs	r2, r3
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	3301      	adds	r3, #1
 8008550:	029a      	lsls	r2, r3, #10
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008564:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	655a      	str	r2, [r3, #84]	@ 0x54
 800856e:	e00f      	b.n	8008590 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a58      	ldr	r2, [pc, #352]	@ (80086d8 <HAL_SD_GetCardCSD+0x344>)
 8008576:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e09d      	b.n	80086cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008594:	0b9b      	lsrs	r3, r3, #14
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	b2da      	uxtb	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085a6:	09db      	lsrs	r3, r3, #7
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085c8:	0fdb      	lsrs	r3, r3, #31
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085d4:	0f5b      	lsrs	r3, r3, #29
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 0303 	and.w	r3, r3, #3
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085e6:	0e9b      	lsrs	r3, r3, #26
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085f8:	0d9b      	lsrs	r3, r3, #22
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	b2da      	uxtb	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800860a:	0d5b      	lsrs	r3, r3, #21
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008626:	0c1b      	lsrs	r3, r3, #16
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	b2da      	uxtb	r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800863a:	0bdb      	lsrs	r3, r3, #15
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	b2da      	uxtb	r2, r3
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800864e:	0b9b      	lsrs	r3, r3, #14
 8008650:	b2db      	uxtb	r3, r3
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	b2da      	uxtb	r2, r3
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008662:	0b5b      	lsrs	r3, r3, #13
 8008664:	b2db      	uxtb	r3, r3
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	b2da      	uxtb	r2, r3
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008676:	0b1b      	lsrs	r3, r3, #12
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	b2da      	uxtb	r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800868a:	0a9b      	lsrs	r3, r3, #10
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	b2da      	uxtb	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800869e:	0a1b      	lsrs	r3, r3, #8
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086b2:	085b      	lsrs	r3, r3, #1
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	1fe00fff 	.word	0x1fe00fff

080086dc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b094      	sub	sp, #80	@ 0x50
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d101      	bne.n	80086fc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e0a7      	b.n	800884c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80086fc:	f107 0308 	add.w	r3, r7, #8
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fb62 	bl	8008dcc <SD_SendSDStatus>
 8008708:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800870a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800870c:	2b00      	cmp	r3, #0
 800870e:	d011      	beq.n	8008734 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a4f      	ldr	r2, [pc, #316]	@ (8008854 <HAL_SD_GetCardStatus+0x178>)
 8008716:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800871c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008732:	e070      	b.n	8008816 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	099b      	lsrs	r3, r3, #6
 8008738:	b2db      	uxtb	r3, r3
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	b2da      	uxtb	r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	b2db      	uxtb	r3, r3
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	b2da      	uxtb	r2, r3
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	0a1b      	lsrs	r3, r3, #8
 8008758:	b29b      	uxth	r3, r3
 800875a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800875e:	b29a      	uxth	r2, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	0e1b      	lsrs	r3, r3, #24
 8008764:	b29b      	uxth	r3, r3
 8008766:	4313      	orrs	r3, r2
 8008768:	b29a      	uxth	r2, r3
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	061a      	lsls	r2, r3, #24
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800877a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	0a1b      	lsrs	r3, r3, #8
 8008780:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008784:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	0e1b      	lsrs	r3, r3, #24
 800878a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	b2da      	uxtb	r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	0a1b      	lsrs	r3, r3, #8
 800879c:	b2da      	uxtb	r2, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	0d1b      	lsrs	r3, r3, #20
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	f003 030f 	and.w	r3, r3, #15
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	0c1b      	lsrs	r3, r3, #16
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80087bc:	b29a      	uxth	r2, r3
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	4313      	orrs	r3, r2
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	0a9b      	lsrs	r3, r3, #10
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	0a1b      	lsrs	r3, r3, #8
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	091b      	lsrs	r3, r3, #4
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	b2da      	uxtb	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	0e1b      	lsrs	r3, r3, #24
 8008810:	b2da      	uxtb	r2, r3
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800881e:	4618      	mov	r0, r3
 8008820:	f003 ff6c 	bl	800c6fc <SDMMC_CmdBlockLength>
 8008824:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00d      	beq.n	8008848 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a08      	ldr	r2, [pc, #32]	@ (8008854 <HAL_SD_GetCardStatus+0x178>)
 8008832:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008838:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008848:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800884c:	4618      	mov	r0, r3
 800884e:	3750      	adds	r7, #80	@ 0x50
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	1fe00fff 	.word	0x1fe00fff

08008858 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80088b0:	b590      	push	{r4, r7, lr}
 80088b2:	b08d      	sub	sp, #52	@ 0x34
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2203      	movs	r2, #3
 80088c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d02e      	beq.n	800892e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088d6:	d106      	bne.n	80088e6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80088e4:	e029      	b.n	800893a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088ec:	d10a      	bne.n	8008904 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb64 	bl	8008fbc <SD_WideBus_Enable>
 80088f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	635a      	str	r2, [r3, #52]	@ 0x34
 8008902:	e01a      	b.n	800893a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10a      	bne.n	8008920 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fba1 	bl	8009052 <SD_WideBus_Disable>
 8008910:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	431a      	orrs	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	635a      	str	r2, [r3, #52]	@ 0x34
 800891e:	e00c      	b.n	800893a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008924:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	635a      	str	r2, [r3, #52]	@ 0x34
 800892c:	e005      	b.n	800893a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008932:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800893e:	2b00      	cmp	r3, #0
 8008940:	d007      	beq.n	8008952 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a5f      	ldr	r2, [pc, #380]	@ (8008ac4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008948:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008950:	e096      	b.n	8008a80 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008952:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008956:	f04f 0100 	mov.w	r1, #0
 800895a:	f7fd fc3f 	bl	80061dc <HAL_RCCEx_GetPeriphCLKFreq>
 800895e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 8083 	beq.w	8008a6e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695a      	ldr	r2, [r3, #20]
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	4950      	ldr	r1, [pc, #320]	@ (8008ac8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008986:	fba1 1303 	umull	r1, r3, r1, r3
 800898a:	0e1b      	lsrs	r3, r3, #24
 800898c:	429a      	cmp	r2, r3
 800898e:	d303      	bcc.n	8008998 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	61bb      	str	r3, [r7, #24]
 8008996:	e05a      	b.n	8008a4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800899c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a0:	d103      	bne.n	80089aa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	e051      	b.n	8008a4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b2:	d126      	bne.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10e      	bne.n	80089da <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4a43      	ldr	r2, [pc, #268]	@ (8008acc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d906      	bls.n	80089d2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	4a40      	ldr	r2, [pc, #256]	@ (8008ac8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80089c8:	fba2 2303 	umull	r2, r3, r2, r3
 80089cc:	0e5b      	lsrs	r3, r3, #25
 80089ce:	61bb      	str	r3, [r7, #24]
 80089d0:	e03d      	b.n	8008a4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	61bb      	str	r3, [r7, #24]
 80089d8:	e039      	b.n	8008a4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	69fa      	ldr	r2, [r7, #28]
 80089e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e6:	4a39      	ldr	r2, [pc, #228]	@ (8008acc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d906      	bls.n	80089fa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	4a36      	ldr	r2, [pc, #216]	@ (8008ac8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80089f0:	fba2 2303 	umull	r2, r3, r2, r3
 80089f4:	0e5b      	lsrs	r3, r3, #25
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	e029      	b.n	8008a4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	e025      	b.n	8008a4e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10e      	bne.n	8008a28 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	4a30      	ldr	r2, [pc, #192]	@ (8008ad0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d906      	bls.n	8008a20 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	4a2c      	ldr	r2, [pc, #176]	@ (8008ac8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008a16:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1a:	0e1b      	lsrs	r3, r3, #24
 8008a1c:	61bb      	str	r3, [r7, #24]
 8008a1e:	e016      	b.n	8008a4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	61bb      	str	r3, [r7, #24]
 8008a26:	e012      	b.n	8008a4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a34:	4a26      	ldr	r2, [pc, #152]	@ (8008ad0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d906      	bls.n	8008a48 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	4a22      	ldr	r2, [pc, #136]	@ (8008ac8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a42:	0e1b      	lsrs	r3, r3, #24
 8008a44:	61bb      	str	r3, [r7, #24]
 8008a46:	e002      	b.n	8008a4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681c      	ldr	r4, [r3, #0]
 8008a52:	466a      	mov	r2, sp
 8008a54:	f107 0314 	add.w	r3, r7, #20
 8008a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a5c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008a60:	f107 0308 	add.w	r3, r7, #8
 8008a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a66:	4620      	mov	r0, r4
 8008a68:	f003 fd6a 	bl	800c540 <SDMMC_Init>
 8008a6c:	e008      	b.n	8008a80 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a72:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f003 fe37 	bl	800c6fc <SDMMC_CmdBlockLength>
 8008a8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00c      	beq.n	8008ab0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8008ac4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008a9c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	372c      	adds	r7, #44	@ 0x2c
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd90      	pop	{r4, r7, pc}
 8008ac4:	1fe00fff 	.word	0x1fe00fff
 8008ac8:	55e63b89 	.word	0x55e63b89
 8008acc:	02faf080 	.word	0x02faf080
 8008ad0:	017d7840 	.word	0x017d7840

08008ad4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ae0:	f107 030c 	add.w	r3, r7, #12
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa40 	bl	8008f6c <SD_SendStatus>
 8008aec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d005      	beq.n	8008b00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	0a5b      	lsrs	r3, r3, #9
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008b0a:	693b      	ldr	r3, [r7, #16]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b090      	sub	sp, #64	@ 0x40
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008b20:	f7f9 ffe0 	bl	8002ae4 <HAL_GetTick>
 8008b24:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f003 fd61 	bl	800c5f2 <SDMMC_GetPowerState>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b36:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008b3a:	e0b5      	b.n	8008ca8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d02e      	beq.n	8008ba2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f003 ffac 	bl	800caa6 <SDMMC_CmdSendCID>
 8008b4e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <SD_InitCard+0x46>
    {
      return errorstate;
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	e0a6      	b.n	8008ca8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2100      	movs	r1, #0
 8008b60:	4618      	mov	r0, r3
 8008b62:	f003 fd8c 	bl	800c67e <SDMMC_GetResponse>
 8008b66:	4602      	mov	r2, r0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2104      	movs	r1, #4
 8008b72:	4618      	mov	r0, r3
 8008b74:	f003 fd83 	bl	800c67e <SDMMC_GetResponse>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2108      	movs	r1, #8
 8008b84:	4618      	mov	r0, r3
 8008b86:	f003 fd7a 	bl	800c67e <SDMMC_GetResponse>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	210c      	movs	r1, #12
 8008b96:	4618      	mov	r0, r3
 8008b98:	f003 fd71 	bl	800c67e <SDMMC_GetResponse>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d01d      	beq.n	8008be6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008baa:	e019      	b.n	8008be0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f107 020a 	add.w	r2, r7, #10
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f003 ffb4 	bl	800cb24 <SDMMC_CmdSetRelAdd>
 8008bbc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc6:	e06f      	b.n	8008ca8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008bc8:	f7f9 ff8c 	bl	8002ae4 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d902      	bls.n	8008be0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008bda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008bde:	e063      	b.n	8008ca8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008be0:	897b      	ldrh	r3, [r7, #10]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0e2      	beq.n	8008bac <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d036      	beq.n	8008c5c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008bee:	897b      	ldrh	r3, [r7, #10]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bfe:	041b      	lsls	r3, r3, #16
 8008c00:	4619      	mov	r1, r3
 8008c02:	4610      	mov	r0, r2
 8008c04:	f003 ff6e 	bl	800cae4 <SDMMC_CmdSendCSD>
 8008c08:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <SD_InitCard+0x100>
    {
      return errorstate;
 8008c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c12:	e049      	b.n	8008ca8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f003 fd2f 	bl	800c67e <SDMMC_GetResponse>
 8008c20:	4602      	mov	r2, r0
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2104      	movs	r1, #4
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f003 fd26 	bl	800c67e <SDMMC_GetResponse>
 8008c32:	4602      	mov	r2, r0
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2108      	movs	r1, #8
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f003 fd1d 	bl	800c67e <SDMMC_GetResponse>
 8008c44:	4602      	mov	r2, r0
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	210c      	movs	r1, #12
 8008c50:	4618      	mov	r0, r3
 8008c52:	f003 fd14 	bl	800c67e <SDMMC_GetResponse>
 8008c56:	4602      	mov	r2, r0
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2104      	movs	r1, #4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f003 fd0b 	bl	800c67e <SDMMC_GetResponse>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	0d1a      	lsrs	r2, r3, #20
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008c70:	f107 030c 	add.w	r3, r7, #12
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7ff fb8c 	bl	8008394 <HAL_SD_GetCardCSD>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c82:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008c86:	e00f      	b.n	8008ca8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c90:	041b      	lsls	r3, r3, #16
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f003 fe1d 	bl	800c8d4 <SDMMC_CmdSelDesel>
 8008c9a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <SD_InitCard+0x192>
  {
    return errorstate;
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	e000      	b.n	8008ca8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3740      	adds	r7, #64	@ 0x40
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f003 fe26 	bl	800c91a <SDMMC_CmdGoIdleState>
 8008cce:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <SD_PowerON+0x2a>
  {
    return errorstate;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	e072      	b.n	8008dc0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f003 fe39 	bl	800c956 <SDMMC_CmdOperCond>
 8008ce4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cec:	d10d      	bne.n	8008d0a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f003 fe0e 	bl	800c91a <SDMMC_CmdGoIdleState>
 8008cfe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d004      	beq.n	8008d10 <SD_PowerON+0x60>
    {
      return errorstate;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	e05a      	b.n	8008dc0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d137      	bne.n	8008d88 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f003 fe39 	bl	800c996 <SDMMC_CmdAppCommand>
 8008d24:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d02d      	beq.n	8008d88 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008d30:	e046      	b.n	8008dc0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f003 fe2c 	bl	800c996 <SDMMC_CmdAppCommand>
 8008d3e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <SD_PowerON+0x9a>
    {
      return errorstate;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	e03a      	b.n	8008dc0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	491e      	ldr	r1, [pc, #120]	@ (8008dc8 <SD_PowerON+0x118>)
 8008d50:	4618      	mov	r0, r3
 8008d52:	f003 fe43 	bl	800c9dc <SDMMC_CmdAppOperCommand>
 8008d56:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008d62:	e02d      	b.n	8008dc0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2100      	movs	r1, #0
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f003 fc87 	bl	800c67e <SDMMC_GetResponse>
 8008d70:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	0fdb      	lsrs	r3, r3, #31
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d101      	bne.n	8008d7e <SD_PowerON+0xce>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e000      	b.n	8008d80 <SD_PowerON+0xd0>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]

    count++;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	3301      	adds	r3, #1
 8008d86:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d802      	bhi.n	8008d98 <SD_PowerON+0xe8>
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0cc      	beq.n	8008d32 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d902      	bls.n	8008da8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008da2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008da6:	e00b      	b.n	8008dc0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	c1100000 	.word	0xc1100000

08008dcc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08c      	sub	sp, #48	@ 0x30
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008dd6:	f7f9 fe85 	bl	8002ae4 <HAL_GetTick>
 8008dda:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f003 fc49 	bl	800c67e <SDMMC_GetResponse>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008df2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008df6:	d102      	bne.n	8008dfe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008df8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008dfc:	e0b0      	b.n	8008f60 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2140      	movs	r1, #64	@ 0x40
 8008e04:	4618      	mov	r0, r3
 8008e06:	f003 fc79 	bl	800c6fc <SDMMC_CmdBlockLength>
 8008e0a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	e0a0      	b.n	8008f60 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e26:	041b      	lsls	r3, r3, #16
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	f003 fdb3 	bl	800c996 <SDMMC_CmdAppCommand>
 8008e30:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	e08d      	b.n	8008f60 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e48:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008e4a:	2340      	movs	r3, #64	@ 0x40
 8008e4c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008e4e:	2360      	movs	r3, #96	@ 0x60
 8008e50:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008e52:	2302      	movs	r3, #2
 8008e54:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f107 0208 	add.w	r2, r7, #8
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f003 fc1b 	bl	800c6a4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f003 fe9b 	bl	800cbae <SDMMC_CmdStatusRegister>
 8008e78:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d02b      	beq.n	8008ed8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	e069      	b.n	8008f60 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d013      	beq.n	8008ec2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e9e:	e00d      	b.n	8008ebc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f003 fb75 	bl	800c594 <SDMMC_ReadFIFO>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eae:	601a      	str	r2, [r3, #0]
        pData++;
 8008eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb8:	3301      	adds	r3, #1
 8008eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ebe:	2b07      	cmp	r3, #7
 8008ec0:	d9ee      	bls.n	8008ea0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ec2:	f7f9 fe0f 	bl	8002ae4 <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ed0:	d102      	bne.n	8008ed8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ed2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ed6:	e043      	b.n	8008f60 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ede:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0d2      	beq.n	8008e8c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eec:	f003 0308 	and.w	r3, r3, #8
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	e033      	b.n	8008f60 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f06:	2302      	movs	r3, #2
 8008f08:	e02a      	b.n	8008f60 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f10:	f003 0320 	and.w	r3, r3, #32
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d017      	beq.n	8008f48 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008f18:	2320      	movs	r3, #32
 8008f1a:	e021      	b.n	8008f60 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f003 fb37 	bl	800c594 <SDMMC_ReadFIFO>
 8008f26:	4602      	mov	r2, r0
 8008f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2a:	601a      	str	r2, [r3, #0]
    pData++;
 8008f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2e:	3304      	adds	r3, #4
 8008f30:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f32:	f7f9 fdd7 	bl	8002ae4 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f40:	d102      	bne.n	8008f48 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f42:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008f46:	e00b      	b.n	8008f60 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e2      	bne.n	8008f1c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a03      	ldr	r2, [pc, #12]	@ (8008f68 <SD_SendSDStatus+0x19c>)
 8008f5c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3730      	adds	r7, #48	@ 0x30
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	18000f3a 	.word	0x18000f3a

08008f6c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008f7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f80:	e018      	b.n	8008fb4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f8a:	041b      	lsls	r3, r3, #16
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	f003 fdea 	bl	800cb68 <SDMMC_CmdSendStatus>
 8008f94:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	e009      	b.n	8008fb4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f003 fb69 	bl	800c67e <SDMMC_GetResponse>
 8008fac:	4602      	mov	r2, r0
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f003 fb53 	bl	800c67e <SDMMC_GetResponse>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fe2:	d102      	bne.n	8008fea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008fe4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008fe8:	e02f      	b.n	800904a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f879 	bl	80090e8 <SD_FindSCR>
 8008ff6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	e023      	b.n	800904a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01c      	beq.n	8009046 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009014:	041b      	lsls	r3, r3, #16
 8009016:	4619      	mov	r1, r3
 8009018:	4610      	mov	r0, r2
 800901a:	f003 fcbc 	bl	800c996 <SDMMC_CmdAppCommand>
 800901e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	e00f      	b.n	800904a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2102      	movs	r1, #2
 8009030:	4618      	mov	r0, r3
 8009032:	f003 fcf3 	bl	800ca1c <SDMMC_CmdBusWidth>
 8009036:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	e003      	b.n	800904a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009042:	2300      	movs	r3, #0
 8009044:	e001      	b.n	800904a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009046:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800904a:	4618      	mov	r0, r3
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b086      	sub	sp, #24
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	2300      	movs	r3, #0
 8009060:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2100      	movs	r1, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f003 fb08 	bl	800c67e <SDMMC_GetResponse>
 800906e:	4603      	mov	r3, r0
 8009070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009074:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009078:	d102      	bne.n	8009080 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800907a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800907e:	e02f      	b.n	80090e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009080:	f107 030c 	add.w	r3, r7, #12
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f82e 	bl	80090e8 <SD_FindSCR>
 800908c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	e023      	b.n	80090e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01c      	beq.n	80090dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090aa:	041b      	lsls	r3, r3, #16
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f003 fc71 	bl	800c996 <SDMMC_CmdAppCommand>
 80090b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	e00f      	b.n	80090e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2100      	movs	r1, #0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f003 fca8 	bl	800ca1c <SDMMC_CmdBusWidth>
 80090cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	e003      	b.n	80090e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090d8:	2300      	movs	r3, #0
 80090da:	e001      	b.n	80090e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08e      	sub	sp, #56	@ 0x38
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090f2:	f7f9 fcf7 	bl	8002ae4 <HAL_GetTick>
 80090f6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80090fc:	2300      	movs	r3, #0
 80090fe:	60bb      	str	r3, [r7, #8]
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2108      	movs	r1, #8
 800910e:	4618      	mov	r0, r3
 8009110:	f003 faf4 	bl	800c6fc <SDMMC_CmdBlockLength>
 8009114:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <SD_FindSCR+0x38>
  {
    return errorstate;
 800911c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911e:	e0ad      	b.n	800927c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009128:	041b      	lsls	r3, r3, #16
 800912a:	4619      	mov	r1, r3
 800912c:	4610      	mov	r0, r2
 800912e:	f003 fc32 	bl	800c996 <SDMMC_CmdAppCommand>
 8009132:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <SD_FindSCR+0x56>
  {
    return errorstate;
 800913a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913c:	e09e      	b.n	800927c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800913e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009142:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009144:	2308      	movs	r3, #8
 8009146:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009148:	2330      	movs	r3, #48	@ 0x30
 800914a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800914c:	2302      	movs	r3, #2
 800914e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009150:	2300      	movs	r3, #0
 8009152:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009154:	2301      	movs	r3, #1
 8009156:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f107 0210 	add.w	r2, r7, #16
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f003 fa9e 	bl	800c6a4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	f003 fc78 	bl	800ca62 <SDMMC_CmdSendSCR>
 8009172:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009176:	2b00      	cmp	r3, #0
 8009178:	d027      	beq.n	80091ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	e07e      	b.n	800927c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009184:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d113      	bne.n	80091b4 <SD_FindSCR+0xcc>
 800918c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918e:	2b00      	cmp	r3, #0
 8009190:	d110      	bne.n	80091b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f003 f9fc 	bl	800c594 <SDMMC_ReadFIFO>
 800919c:	4603      	mov	r3, r0
 800919e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f003 f9f5 	bl	800c594 <SDMMC_ReadFIFO>
 80091aa:	4603      	mov	r3, r0
 80091ac:	60fb      	str	r3, [r7, #12]
      index++;
 80091ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b0:	3301      	adds	r3, #1
 80091b2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091b4:	f7f9 fc96 	bl	8002ae4 <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091c2:	d102      	bne.n	80091ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80091c8:	e058      	b.n	800927c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091d0:	f240 532a 	movw	r3, #1322	@ 0x52a
 80091d4:	4013      	ands	r3, r2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0d1      	beq.n	800917e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2208      	movs	r2, #8
 80091ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80091f0:	2308      	movs	r3, #8
 80091f2:	e043      	b.n	800927c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d005      	beq.n	800920e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2202      	movs	r2, #2
 8009208:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800920a:	2302      	movs	r3, #2
 800920c:	e036      	b.n	800927c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2220      	movs	r2, #32
 8009222:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009224:	2320      	movs	r3, #32
 8009226:	e029      	b.n	800927c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a15      	ldr	r2, [pc, #84]	@ (8009284 <SD_FindSCR+0x19c>)
 800922e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	061a      	lsls	r2, r3, #24
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	021b      	lsls	r3, r3, #8
 8009238:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800923c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	0a1b      	lsrs	r3, r3, #8
 8009242:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009246:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	0e1b      	lsrs	r3, r3, #24
 800924c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800924e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009250:	601a      	str	r2, [r3, #0]
    scr++;
 8009252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009254:	3304      	adds	r3, #4
 8009256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	061a      	lsls	r2, r3, #24
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009264:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	0a1b      	lsrs	r3, r3, #8
 800926a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800926e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	0e1b      	lsrs	r3, r3, #24
 8009274:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009278:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3738      	adds	r7, #56	@ 0x38
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	18000f3a 	.word	0x18000f3a

08009288 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e10f      	b.n	80094ba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a87      	ldr	r2, [pc, #540]	@ (80094c4 <HAL_SPI_Init+0x23c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d00f      	beq.n	80092ca <HAL_SPI_Init+0x42>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a86      	ldr	r2, [pc, #536]	@ (80094c8 <HAL_SPI_Init+0x240>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00a      	beq.n	80092ca <HAL_SPI_Init+0x42>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a84      	ldr	r2, [pc, #528]	@ (80094cc <HAL_SPI_Init+0x244>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d005      	beq.n	80092ca <HAL_SPI_Init+0x42>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	2b0f      	cmp	r3, #15
 80092c4:	d901      	bls.n	80092ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e0f7      	b.n	80094ba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f900 	bl	80094d0 <SPI_GetPacketSize>
 80092d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a7b      	ldr	r2, [pc, #492]	@ (80094c4 <HAL_SPI_Init+0x23c>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00c      	beq.n	80092f6 <HAL_SPI_Init+0x6e>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a79      	ldr	r2, [pc, #484]	@ (80094c8 <HAL_SPI_Init+0x240>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d007      	beq.n	80092f6 <HAL_SPI_Init+0x6e>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a78      	ldr	r2, [pc, #480]	@ (80094cc <HAL_SPI_Init+0x244>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d002      	beq.n	80092f6 <HAL_SPI_Init+0x6e>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b08      	cmp	r3, #8
 80092f4:	d811      	bhi.n	800931a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80092fa:	4a72      	ldr	r2, [pc, #456]	@ (80094c4 <HAL_SPI_Init+0x23c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d009      	beq.n	8009314 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a70      	ldr	r2, [pc, #448]	@ (80094c8 <HAL_SPI_Init+0x240>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d004      	beq.n	8009314 <HAL_SPI_Init+0x8c>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a6f      	ldr	r2, [pc, #444]	@ (80094cc <HAL_SPI_Init+0x244>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d104      	bne.n	800931e <HAL_SPI_Init+0x96>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b10      	cmp	r3, #16
 8009318:	d901      	bls.n	800931e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e0cd      	b.n	80094ba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d106      	bne.n	8009338 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7f8 fe90 	bl	8002058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0201 	bic.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800935a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009364:	d119      	bne.n	800939a <HAL_SPI_Init+0x112>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800936e:	d103      	bne.n	8009378 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009374:	2b00      	cmp	r3, #0
 8009376:	d008      	beq.n	800938a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10c      	bne.n	800939a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009388:	d107      	bne.n	800939a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009398:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00f      	beq.n	80093c6 <HAL_SPI_Init+0x13e>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	2b06      	cmp	r3, #6
 80093ac:	d90b      	bls.n	80093c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	430a      	orrs	r2, r1
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	e007      	b.n	80093d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80093d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	69da      	ldr	r2, [r3, #28]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093de:	431a      	orrs	r2, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	431a      	orrs	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e8:	ea42 0103 	orr.w	r1, r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68da      	ldr	r2, [r3, #12]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009400:	431a      	orrs	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009406:	431a      	orrs	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	431a      	orrs	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	431a      	orrs	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800942a:	431a      	orrs	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	431a      	orrs	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009436:	ea42 0103 	orr.w	r1, r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d113      	bne.n	8009476 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009460:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009474:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	40013000 	.word	0x40013000
 80094c8:	40003800 	.word	0x40003800
 80094cc:	40003c00 	.word	0x40003c00

080094d0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	3301      	adds	r3, #1
 80094e0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	3301      	adds	r3, #1
 80094e8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	3307      	adds	r3, #7
 80094ee:	08db      	lsrs	r3, r3, #3
 80094f0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	fb02 f303 	mul.w	r3, r2, r3
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e049      	b.n	80095ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d106      	bne.n	8009532 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7f8 fee7 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2202      	movs	r2, #2
 8009536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	3304      	adds	r3, #4
 8009542:	4619      	mov	r1, r3
 8009544:	4610      	mov	r0, r2
 8009546:	f000 f9eb 	bl	8009920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d001      	beq.n	80095cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e05e      	b.n	800968a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2202      	movs	r2, #2
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f042 0201 	orr.w	r2, r2, #1
 80095e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a2b      	ldr	r2, [pc, #172]	@ (8009698 <HAL_TIM_Base_Start_IT+0xe4>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d02c      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x94>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f6:	d027      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x94>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a27      	ldr	r2, [pc, #156]	@ (800969c <HAL_TIM_Base_Start_IT+0xe8>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d022      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x94>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a26      	ldr	r2, [pc, #152]	@ (80096a0 <HAL_TIM_Base_Start_IT+0xec>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d01d      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x94>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a24      	ldr	r2, [pc, #144]	@ (80096a4 <HAL_TIM_Base_Start_IT+0xf0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d018      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x94>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a23      	ldr	r2, [pc, #140]	@ (80096a8 <HAL_TIM_Base_Start_IT+0xf4>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d013      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x94>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a21      	ldr	r2, [pc, #132]	@ (80096ac <HAL_TIM_Base_Start_IT+0xf8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00e      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x94>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a20      	ldr	r2, [pc, #128]	@ (80096b0 <HAL_TIM_Base_Start_IT+0xfc>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d009      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x94>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1e      	ldr	r2, [pc, #120]	@ (80096b4 <HAL_TIM_Base_Start_IT+0x100>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d004      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x94>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a1d      	ldr	r2, [pc, #116]	@ (80096b8 <HAL_TIM_Base_Start_IT+0x104>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d115      	bne.n	8009674 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	4b1b      	ldr	r3, [pc, #108]	@ (80096bc <HAL_TIM_Base_Start_IT+0x108>)
 8009650:	4013      	ands	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b06      	cmp	r3, #6
 8009658:	d015      	beq.n	8009686 <HAL_TIM_Base_Start_IT+0xd2>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009660:	d011      	beq.n	8009686 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0201 	orr.w	r2, r2, #1
 8009670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009672:	e008      	b.n	8009686 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f042 0201 	orr.w	r2, r2, #1
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	e000      	b.n	8009688 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	40010000 	.word	0x40010000
 800969c:	40000400 	.word	0x40000400
 80096a0:	40000800 	.word	0x40000800
 80096a4:	40000c00 	.word	0x40000c00
 80096a8:	40010400 	.word	0x40010400
 80096ac:	40001800 	.word	0x40001800
 80096b0:	40014000 	.word	0x40014000
 80096b4:	4000e000 	.word	0x4000e000
 80096b8:	4000e400 	.word	0x4000e400
 80096bc:	00010007 	.word	0x00010007

080096c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d020      	beq.n	8009724 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01b      	beq.n	8009724 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f06f 0202 	mvn.w	r2, #2
 80096f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	f003 0303 	and.w	r3, r3, #3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f8e9 	bl	80098e2 <HAL_TIM_IC_CaptureCallback>
 8009710:	e005      	b.n	800971e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8db 	bl	80098ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f8ec 	bl	80098f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f003 0304 	and.w	r3, r3, #4
 800972a:	2b00      	cmp	r3, #0
 800972c:	d020      	beq.n	8009770 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01b      	beq.n	8009770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f06f 0204 	mvn.w	r2, #4
 8009740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2202      	movs	r2, #2
 8009746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f8c3 	bl	80098e2 <HAL_TIM_IC_CaptureCallback>
 800975c:	e005      	b.n	800976a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f8b5 	bl	80098ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f8c6 	bl	80098f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f003 0308 	and.w	r3, r3, #8
 8009776:	2b00      	cmp	r3, #0
 8009778:	d020      	beq.n	80097bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f003 0308 	and.w	r3, r3, #8
 8009780:	2b00      	cmp	r3, #0
 8009782:	d01b      	beq.n	80097bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f06f 0208 	mvn.w	r2, #8
 800978c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2204      	movs	r2, #4
 8009792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f003 0303 	and.w	r3, r3, #3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f89d 	bl	80098e2 <HAL_TIM_IC_CaptureCallback>
 80097a8:	e005      	b.n	80097b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f88f 	bl	80098ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f8a0 	bl	80098f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f003 0310 	and.w	r3, r3, #16
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d020      	beq.n	8009808 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f003 0310 	and.w	r3, r3, #16
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01b      	beq.n	8009808 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f06f 0210 	mvn.w	r2, #16
 80097d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2208      	movs	r2, #8
 80097de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f877 	bl	80098e2 <HAL_TIM_IC_CaptureCallback>
 80097f4:	e005      	b.n	8009802 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f869 	bl	80098ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f87a 	bl	80098f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00c      	beq.n	800982c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	2b00      	cmp	r3, #0
 800981a:	d007      	beq.n	800982c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f06f 0201 	mvn.w	r2, #1
 8009824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7f8 fa1a 	bl	8001c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009832:	2b00      	cmp	r3, #0
 8009834:	d104      	bne.n	8009840 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00c      	beq.n	800985a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009846:	2b00      	cmp	r3, #0
 8009848:	d007      	beq.n	800985a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f9bb 	bl	8009bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00c      	beq.n	800987e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800986a:	2b00      	cmp	r3, #0
 800986c:	d007      	beq.n	800987e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f9b3 	bl	8009be4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00c      	beq.n	80098a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988e:	2b00      	cmp	r3, #0
 8009890:	d007      	beq.n	80098a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800989a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f834 	bl	800990a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00c      	beq.n	80098c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d007      	beq.n	80098c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f06f 0220 	mvn.w	r2, #32
 80098be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f97b 	bl	8009bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098c6:	bf00      	nop
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b083      	sub	sp, #12
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098fe:	bf00      	nop
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800990a:	b480      	push	{r7}
 800990c:	b083      	sub	sp, #12
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009912:	bf00      	nop
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
	...

08009920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a4a      	ldr	r2, [pc, #296]	@ (8009a5c <TIM_Base_SetConfig+0x13c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d013      	beq.n	8009960 <TIM_Base_SetConfig+0x40>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800993e:	d00f      	beq.n	8009960 <TIM_Base_SetConfig+0x40>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a47      	ldr	r2, [pc, #284]	@ (8009a60 <TIM_Base_SetConfig+0x140>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d00b      	beq.n	8009960 <TIM_Base_SetConfig+0x40>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a46      	ldr	r2, [pc, #280]	@ (8009a64 <TIM_Base_SetConfig+0x144>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d007      	beq.n	8009960 <TIM_Base_SetConfig+0x40>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a45      	ldr	r2, [pc, #276]	@ (8009a68 <TIM_Base_SetConfig+0x148>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d003      	beq.n	8009960 <TIM_Base_SetConfig+0x40>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a44      	ldr	r2, [pc, #272]	@ (8009a6c <TIM_Base_SetConfig+0x14c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d108      	bne.n	8009972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a39      	ldr	r2, [pc, #228]	@ (8009a5c <TIM_Base_SetConfig+0x13c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d027      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009980:	d023      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a36      	ldr	r2, [pc, #216]	@ (8009a60 <TIM_Base_SetConfig+0x140>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d01f      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a35      	ldr	r2, [pc, #212]	@ (8009a64 <TIM_Base_SetConfig+0x144>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d01b      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a34      	ldr	r2, [pc, #208]	@ (8009a68 <TIM_Base_SetConfig+0x148>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d017      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a33      	ldr	r2, [pc, #204]	@ (8009a6c <TIM_Base_SetConfig+0x14c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d013      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a32      	ldr	r2, [pc, #200]	@ (8009a70 <TIM_Base_SetConfig+0x150>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d00f      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a31      	ldr	r2, [pc, #196]	@ (8009a74 <TIM_Base_SetConfig+0x154>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00b      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a30      	ldr	r2, [pc, #192]	@ (8009a78 <TIM_Base_SetConfig+0x158>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d007      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a2f      	ldr	r2, [pc, #188]	@ (8009a7c <TIM_Base_SetConfig+0x15c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d003      	beq.n	80099ca <TIM_Base_SetConfig+0xaa>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a2e      	ldr	r2, [pc, #184]	@ (8009a80 <TIM_Base_SetConfig+0x160>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d108      	bne.n	80099dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	4313      	orrs	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a16      	ldr	r2, [pc, #88]	@ (8009a5c <TIM_Base_SetConfig+0x13c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d00f      	beq.n	8009a28 <TIM_Base_SetConfig+0x108>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a18      	ldr	r2, [pc, #96]	@ (8009a6c <TIM_Base_SetConfig+0x14c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d00b      	beq.n	8009a28 <TIM_Base_SetConfig+0x108>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a17      	ldr	r2, [pc, #92]	@ (8009a70 <TIM_Base_SetConfig+0x150>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d007      	beq.n	8009a28 <TIM_Base_SetConfig+0x108>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a16      	ldr	r2, [pc, #88]	@ (8009a74 <TIM_Base_SetConfig+0x154>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d003      	beq.n	8009a28 <TIM_Base_SetConfig+0x108>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a15      	ldr	r2, [pc, #84]	@ (8009a78 <TIM_Base_SetConfig+0x158>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d103      	bne.n	8009a30 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	691a      	ldr	r2, [r3, #16]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d105      	bne.n	8009a4e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	f023 0201 	bic.w	r2, r3, #1
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	611a      	str	r2, [r3, #16]
  }
}
 8009a4e:	bf00      	nop
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	40010000 	.word	0x40010000
 8009a60:	40000400 	.word	0x40000400
 8009a64:	40000800 	.word	0x40000800
 8009a68:	40000c00 	.word	0x40000c00
 8009a6c:	40010400 	.word	0x40010400
 8009a70:	40014000 	.word	0x40014000
 8009a74:	40014400 	.word	0x40014400
 8009a78:	40014800 	.word	0x40014800
 8009a7c:	4000e000 	.word	0x4000e000
 8009a80:	4000e400 	.word	0x4000e400

08009a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e077      	b.n	8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a35      	ldr	r2, [pc, #212]	@ (8009b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d004      	beq.n	8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a34      	ldr	r2, [pc, #208]	@ (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d108      	bne.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ad6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a25      	ldr	r2, [pc, #148]	@ (8009b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d02c      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b0e:	d027      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a22      	ldr	r2, [pc, #136]	@ (8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d022      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a21      	ldr	r2, [pc, #132]	@ (8009ba4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d01d      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a1f      	ldr	r2, [pc, #124]	@ (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d018      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a1a      	ldr	r2, [pc, #104]	@ (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d013      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009bac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d00e      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a1a      	ldr	r2, [pc, #104]	@ (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d009      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a18      	ldr	r2, [pc, #96]	@ (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d004      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a17      	ldr	r2, [pc, #92]	@ (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d10c      	bne.n	8009b7a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	40010000 	.word	0x40010000
 8009b9c:	40010400 	.word	0x40010400
 8009ba0:	40000400 	.word	0x40000400
 8009ba4:	40000800 	.word	0x40000800
 8009ba8:	40000c00 	.word	0x40000c00
 8009bac:	40001800 	.word	0x40001800
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	4000e000 	.word	0x4000e000
 8009bb8:	4000e400 	.word	0x4000e400

08009bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e042      	b.n	8009c90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d106      	bne.n	8009c22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7f8 fb97 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2224      	movs	r2, #36	@ 0x24
 8009c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f022 0201 	bic.w	r2, r2, #1
 8009c38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f001 faba 	bl	800b1bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fc4b 	bl	800a4e4 <UART_SetConfig>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d101      	bne.n	8009c58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e01b      	b.n	8009c90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fb39 	bl	800b300 <UART_CheckIdleState>
 8009c8e:	4603      	mov	r3, r0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08a      	sub	sp, #40	@ 0x28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	d137      	bne.n	8009d20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <HAL_UART_Receive_IT+0x24>
 8009cb6:	88fb      	ldrh	r3, [r7, #6]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e030      	b.n	8009d22 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a18      	ldr	r2, [pc, #96]	@ (8009d2c <HAL_UART_Receive_IT+0x94>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d01f      	beq.n	8009d10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d018      	beq.n	8009d10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	613b      	str	r3, [r7, #16]
   return(result);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfc:	623b      	str	r3, [r7, #32]
 8009cfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d00:	69f9      	ldr	r1, [r7, #28]
 8009d02:	6a3a      	ldr	r2, [r7, #32]
 8009d04:	e841 2300 	strex	r3, r2, [r1]
 8009d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e6      	bne.n	8009cde <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d10:	88fb      	ldrh	r3, [r7, #6]
 8009d12:	461a      	mov	r2, r3
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f001 fc0a 	bl	800b530 <UART_Start_Receive_IT>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	e000      	b.n	8009d22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d20:	2302      	movs	r3, #2
  }
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3728      	adds	r7, #40	@ 0x28
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	58000c00 	.word	0x58000c00

08009d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b0ba      	sub	sp, #232	@ 0xe8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009d5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009d5e:	4013      	ands	r3, r2
 8009d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d11b      	bne.n	8009da4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d70:	f003 0320 	and.w	r3, r3, #32
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d015      	beq.n	8009da4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d7c:	f003 0320 	and.w	r3, r3, #32
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d105      	bne.n	8009d90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d009      	beq.n	8009da4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 8377 	beq.w	800a488 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	4798      	blx	r3
      }
      return;
 8009da2:	e371      	b.n	800a488 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8123 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009dae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009db2:	4b8d      	ldr	r3, [pc, #564]	@ (8009fe8 <HAL_UART_IRQHandler+0x2b8>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d106      	bne.n	8009dc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009dba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009dbe:	4b8b      	ldr	r3, [pc, #556]	@ (8009fec <HAL_UART_IRQHandler+0x2bc>)
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 8116 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d011      	beq.n	8009df8 <HAL_UART_IRQHandler+0xc8>
 8009dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00b      	beq.n	8009df8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2201      	movs	r2, #1
 8009de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dee:	f043 0201 	orr.w	r2, r3, #1
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dfc:	f003 0302 	and.w	r3, r3, #2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d011      	beq.n	8009e28 <HAL_UART_IRQHandler+0xf8>
 8009e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e08:	f003 0301 	and.w	r3, r3, #1
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2202      	movs	r2, #2
 8009e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e1e:	f043 0204 	orr.w	r2, r3, #4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e2c:	f003 0304 	and.w	r3, r3, #4
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d011      	beq.n	8009e58 <HAL_UART_IRQHandler+0x128>
 8009e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2204      	movs	r2, #4
 8009e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e4e:	f043 0202 	orr.w	r2, r3, #2
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d017      	beq.n	8009e94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e68:	f003 0320 	and.w	r3, r3, #32
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d105      	bne.n	8009e7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009e70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009e74:	4b5c      	ldr	r3, [pc, #368]	@ (8009fe8 <HAL_UART_IRQHandler+0x2b8>)
 8009e76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2208      	movs	r2, #8
 8009e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e8a:	f043 0208 	orr.w	r2, r3, #8
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d012      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x196>
 8009ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ea4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00c      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ebc:	f043 0220 	orr.w	r2, r3, #32
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 82dd 	beq.w	800a48c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d013      	beq.n	8009f06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ee2:	f003 0320 	and.w	r3, r3, #32
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d105      	bne.n	8009ef6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d007      	beq.n	8009f06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f1a:	2b40      	cmp	r3, #64	@ 0x40
 8009f1c:	d005      	beq.n	8009f2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d054      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 fc22 	bl	800b774 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f3a:	2b40      	cmp	r3, #64	@ 0x40
 8009f3c:	d146      	bne.n	8009fcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3308      	adds	r3, #8
 8009f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3308      	adds	r3, #8
 8009f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1d9      	bne.n	8009f3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d017      	beq.n	8009fc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f9a:	4a15      	ldr	r2, [pc, #84]	@ (8009ff0 <HAL_UART_IRQHandler+0x2c0>)
 8009f9c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7f9 fa43 	bl	8003430 <HAL_DMA_Abort_IT>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d019      	beq.n	8009fe4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc2:	e00f      	b.n	8009fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fa77 	bl	800a4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fca:	e00b      	b.n	8009fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fa73 	bl	800a4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd2:	e007      	b.n	8009fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fa6f 	bl	800a4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009fe2:	e253      	b.n	800a48c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe4:	bf00      	nop
    return;
 8009fe6:	e251      	b.n	800a48c <HAL_UART_IRQHandler+0x75c>
 8009fe8:	10000001 	.word	0x10000001
 8009fec:	04000120 	.word	0x04000120
 8009ff0:	0800b841 	.word	0x0800b841

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	f040 81e7 	bne.w	800a3cc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a002:	f003 0310 	and.w	r3, r3, #16
 800a006:	2b00      	cmp	r3, #0
 800a008:	f000 81e0 	beq.w	800a3cc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a00c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a010:	f003 0310 	and.w	r3, r3, #16
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 81d9 	beq.w	800a3cc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2210      	movs	r2, #16
 800a020:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02c:	2b40      	cmp	r3, #64	@ 0x40
 800a02e:	f040 8151 	bne.w	800a2d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a96      	ldr	r2, [pc, #600]	@ (800a294 <HAL_UART_IRQHandler+0x564>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d068      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a93      	ldr	r2, [pc, #588]	@ (800a298 <HAL_UART_IRQHandler+0x568>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d061      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a91      	ldr	r2, [pc, #580]	@ (800a29c <HAL_UART_IRQHandler+0x56c>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d05a      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a8e      	ldr	r2, [pc, #568]	@ (800a2a0 <HAL_UART_IRQHandler+0x570>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d053      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a8c      	ldr	r2, [pc, #560]	@ (800a2a4 <HAL_UART_IRQHandler+0x574>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d04c      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a89      	ldr	r2, [pc, #548]	@ (800a2a8 <HAL_UART_IRQHandler+0x578>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d045      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a87      	ldr	r2, [pc, #540]	@ (800a2ac <HAL_UART_IRQHandler+0x57c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d03e      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a84      	ldr	r2, [pc, #528]	@ (800a2b0 <HAL_UART_IRQHandler+0x580>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d037      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a82      	ldr	r2, [pc, #520]	@ (800a2b4 <HAL_UART_IRQHandler+0x584>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d030      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a7f      	ldr	r2, [pc, #508]	@ (800a2b8 <HAL_UART_IRQHandler+0x588>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d029      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a7d      	ldr	r2, [pc, #500]	@ (800a2bc <HAL_UART_IRQHandler+0x58c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d022      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a7a      	ldr	r2, [pc, #488]	@ (800a2c0 <HAL_UART_IRQHandler+0x590>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d01b      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a78      	ldr	r2, [pc, #480]	@ (800a2c4 <HAL_UART_IRQHandler+0x594>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d014      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a75      	ldr	r2, [pc, #468]	@ (800a2c8 <HAL_UART_IRQHandler+0x598>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d00d      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a73      	ldr	r2, [pc, #460]	@ (800a2cc <HAL_UART_IRQHandler+0x59c>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d006      	beq.n	800a112 <HAL_UART_IRQHandler+0x3e2>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a70      	ldr	r2, [pc, #448]	@ (800a2d0 <HAL_UART_IRQHandler+0x5a0>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d106      	bne.n	800a120 <HAL_UART_IRQHandler+0x3f0>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	e005      	b.n	800a12c <HAL_UART_IRQHandler+0x3fc>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 81ab 	beq.w	800a490 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a140:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a144:	429a      	cmp	r2, r3
 800a146:	f080 81a3 	bcs.w	800a490 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a150:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a160:	f000 8087 	beq.w	800a272 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a178:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a17c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a18e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a192:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a19a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a19e:	e841 2300 	strex	r3, r2, [r1]
 800a1a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a1a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1da      	bne.n	800a164 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a1be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1c0:	f023 0301 	bic.w	r3, r3, #1
 800a1c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a1d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1de:	e841 2300 	strex	r3, r2, [r1]
 800a1e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1e1      	bne.n	800a1ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1f4:	e853 3f00 	ldrex	r3, [r3]
 800a1f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a1fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3308      	adds	r3, #8
 800a20a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a20e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a210:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a212:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a214:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a216:	e841 2300 	strex	r3, r2, [r1]
 800a21a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a21c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1e3      	bne.n	800a1ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2220      	movs	r2, #32
 800a226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a23e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a240:	f023 0310 	bic.w	r3, r3, #16
 800a244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a252:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a254:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a258:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e4      	bne.n	800a230 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7f8 fdc1 	bl	8002df4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2202      	movs	r2, #2
 800a276:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a284:	b29b      	uxth	r3, r3
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	b29b      	uxth	r3, r3
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f91d 	bl	800a4cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a292:	e0fd      	b.n	800a490 <HAL_UART_IRQHandler+0x760>
 800a294:	40020010 	.word	0x40020010
 800a298:	40020028 	.word	0x40020028
 800a29c:	40020040 	.word	0x40020040
 800a2a0:	40020058 	.word	0x40020058
 800a2a4:	40020070 	.word	0x40020070
 800a2a8:	40020088 	.word	0x40020088
 800a2ac:	400200a0 	.word	0x400200a0
 800a2b0:	400200b8 	.word	0x400200b8
 800a2b4:	40020410 	.word	0x40020410
 800a2b8:	40020428 	.word	0x40020428
 800a2bc:	40020440 	.word	0x40020440
 800a2c0:	40020458 	.word	0x40020458
 800a2c4:	40020470 	.word	0x40020470
 800a2c8:	40020488 	.word	0x40020488
 800a2cc:	400204a0 	.word	0x400204a0
 800a2d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 80cf 	beq.w	800a494 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a2f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 80ca 	beq.w	800a494 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a314:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	461a      	mov	r2, r3
 800a31e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a322:	647b      	str	r3, [r7, #68]	@ 0x44
 800a324:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a326:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a328:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a32a:	e841 2300 	strex	r3, r2, [r1]
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1e4      	bne.n	800a300 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3308      	adds	r3, #8
 800a33c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	623b      	str	r3, [r7, #32]
   return(result);
 800a346:	6a3a      	ldr	r2, [r7, #32]
 800a348:	4b55      	ldr	r3, [pc, #340]	@ (800a4a0 <HAL_UART_IRQHandler+0x770>)
 800a34a:	4013      	ands	r3, r2
 800a34c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a35a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e3      	bne.n	800a336 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2220      	movs	r2, #32
 800a372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	e853 3f00 	ldrex	r3, [r3]
 800a38e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f023 0310 	bic.w	r3, r3, #16
 800a396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	69b9      	ldr	r1, [r7, #24]
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	e841 2300 	strex	r3, r2, [r1]
 800a3b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e4      	bne.n	800a382 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f881 	bl	800a4cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3ca:	e063      	b.n	800a494 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00e      	beq.n	800a3f6 <HAL_UART_IRQHandler+0x6c6>
 800a3d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d008      	beq.n	800a3f6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a3ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f001 ff84 	bl	800c2fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3f4:	e051      	b.n	800a49a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d014      	beq.n	800a42c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d105      	bne.n	800a41a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a40e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d008      	beq.n	800a42c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d03a      	beq.n	800a498 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
    }
    return;
 800a42a:	e035      	b.n	800a498 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a434:	2b00      	cmp	r3, #0
 800a436:	d009      	beq.n	800a44c <HAL_UART_IRQHandler+0x71c>
 800a438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 fa11 	bl	800b86c <UART_EndTransmit_IT>
    return;
 800a44a:	e026      	b.n	800a49a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d009      	beq.n	800a46c <HAL_UART_IRQHandler+0x73c>
 800a458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a45c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f001 ff5d 	bl	800c324 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a46a:	e016      	b.n	800a49a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d010      	beq.n	800a49a <HAL_UART_IRQHandler+0x76a>
 800a478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da0c      	bge.n	800a49a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 ff45 	bl	800c310 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a486:	e008      	b.n	800a49a <HAL_UART_IRQHandler+0x76a>
      return;
 800a488:	bf00      	nop
 800a48a:	e006      	b.n	800a49a <HAL_UART_IRQHandler+0x76a>
    return;
 800a48c:	bf00      	nop
 800a48e:	e004      	b.n	800a49a <HAL_UART_IRQHandler+0x76a>
      return;
 800a490:	bf00      	nop
 800a492:	e002      	b.n	800a49a <HAL_UART_IRQHandler+0x76a>
      return;
 800a494:	bf00      	nop
 800a496:	e000      	b.n	800a49a <HAL_UART_IRQHandler+0x76a>
    return;
 800a498:	bf00      	nop
  }
}
 800a49a:	37e8      	adds	r7, #232	@ 0xe8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	effffffe 	.word	0xeffffffe

0800a4a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4e8:	b092      	sub	sp, #72	@ 0x48
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	431a      	orrs	r2, r3
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	69db      	ldr	r3, [r3, #28]
 800a508:	4313      	orrs	r3, r2
 800a50a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	4bbe      	ldr	r3, [pc, #760]	@ (800a80c <UART_SetConfig+0x328>)
 800a514:	4013      	ands	r3, r2
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	6812      	ldr	r2, [r2, #0]
 800a51a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a51c:	430b      	orrs	r3, r1
 800a51e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4ab3      	ldr	r2, [pc, #716]	@ (800a810 <UART_SetConfig+0x32c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d004      	beq.n	800a550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a54c:	4313      	orrs	r3, r2
 800a54e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689a      	ldr	r2, [r3, #8]
 800a556:	4baf      	ldr	r3, [pc, #700]	@ (800a814 <UART_SetConfig+0x330>)
 800a558:	4013      	ands	r3, r2
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a560:	430b      	orrs	r3, r1
 800a562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56a:	f023 010f 	bic.w	r1, r3, #15
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4aa6      	ldr	r2, [pc, #664]	@ (800a818 <UART_SetConfig+0x334>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d177      	bne.n	800a674 <UART_SetConfig+0x190>
 800a584:	4ba5      	ldr	r3, [pc, #660]	@ (800a81c <UART_SetConfig+0x338>)
 800a586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a58c:	2b28      	cmp	r3, #40	@ 0x28
 800a58e:	d86d      	bhi.n	800a66c <UART_SetConfig+0x188>
 800a590:	a201      	add	r2, pc, #4	@ (adr r2, 800a598 <UART_SetConfig+0xb4>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a63d 	.word	0x0800a63d
 800a59c:	0800a66d 	.word	0x0800a66d
 800a5a0:	0800a66d 	.word	0x0800a66d
 800a5a4:	0800a66d 	.word	0x0800a66d
 800a5a8:	0800a66d 	.word	0x0800a66d
 800a5ac:	0800a66d 	.word	0x0800a66d
 800a5b0:	0800a66d 	.word	0x0800a66d
 800a5b4:	0800a66d 	.word	0x0800a66d
 800a5b8:	0800a645 	.word	0x0800a645
 800a5bc:	0800a66d 	.word	0x0800a66d
 800a5c0:	0800a66d 	.word	0x0800a66d
 800a5c4:	0800a66d 	.word	0x0800a66d
 800a5c8:	0800a66d 	.word	0x0800a66d
 800a5cc:	0800a66d 	.word	0x0800a66d
 800a5d0:	0800a66d 	.word	0x0800a66d
 800a5d4:	0800a66d 	.word	0x0800a66d
 800a5d8:	0800a64d 	.word	0x0800a64d
 800a5dc:	0800a66d 	.word	0x0800a66d
 800a5e0:	0800a66d 	.word	0x0800a66d
 800a5e4:	0800a66d 	.word	0x0800a66d
 800a5e8:	0800a66d 	.word	0x0800a66d
 800a5ec:	0800a66d 	.word	0x0800a66d
 800a5f0:	0800a66d 	.word	0x0800a66d
 800a5f4:	0800a66d 	.word	0x0800a66d
 800a5f8:	0800a655 	.word	0x0800a655
 800a5fc:	0800a66d 	.word	0x0800a66d
 800a600:	0800a66d 	.word	0x0800a66d
 800a604:	0800a66d 	.word	0x0800a66d
 800a608:	0800a66d 	.word	0x0800a66d
 800a60c:	0800a66d 	.word	0x0800a66d
 800a610:	0800a66d 	.word	0x0800a66d
 800a614:	0800a66d 	.word	0x0800a66d
 800a618:	0800a65d 	.word	0x0800a65d
 800a61c:	0800a66d 	.word	0x0800a66d
 800a620:	0800a66d 	.word	0x0800a66d
 800a624:	0800a66d 	.word	0x0800a66d
 800a628:	0800a66d 	.word	0x0800a66d
 800a62c:	0800a66d 	.word	0x0800a66d
 800a630:	0800a66d 	.word	0x0800a66d
 800a634:	0800a66d 	.word	0x0800a66d
 800a638:	0800a665 	.word	0x0800a665
 800a63c:	2301      	movs	r3, #1
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e326      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a644:	2304      	movs	r3, #4
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e322      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a64c:	2308      	movs	r3, #8
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e31e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a654:	2310      	movs	r3, #16
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e31a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a65c:	2320      	movs	r3, #32
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e316      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a664:	2340      	movs	r3, #64	@ 0x40
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e312      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a66c:	2380      	movs	r3, #128	@ 0x80
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e30e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a69      	ldr	r2, [pc, #420]	@ (800a820 <UART_SetConfig+0x33c>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d130      	bne.n	800a6e0 <UART_SetConfig+0x1fc>
 800a67e:	4b67      	ldr	r3, [pc, #412]	@ (800a81c <UART_SetConfig+0x338>)
 800a680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b05      	cmp	r3, #5
 800a688:	d826      	bhi.n	800a6d8 <UART_SetConfig+0x1f4>
 800a68a:	a201      	add	r2, pc, #4	@ (adr r2, 800a690 <UART_SetConfig+0x1ac>)
 800a68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a690:	0800a6a9 	.word	0x0800a6a9
 800a694:	0800a6b1 	.word	0x0800a6b1
 800a698:	0800a6b9 	.word	0x0800a6b9
 800a69c:	0800a6c1 	.word	0x0800a6c1
 800a6a0:	0800a6c9 	.word	0x0800a6c9
 800a6a4:	0800a6d1 	.word	0x0800a6d1
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ae:	e2f0      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6b0:	2304      	movs	r3, #4
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b6:	e2ec      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6b8:	2308      	movs	r3, #8
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6be:	e2e8      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c6:	e2e4      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e2e0      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6d0:	2340      	movs	r3, #64	@ 0x40
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e2dc      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6d8:	2380      	movs	r3, #128	@ 0x80
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e2d8      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a4f      	ldr	r2, [pc, #316]	@ (800a824 <UART_SetConfig+0x340>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d130      	bne.n	800a74c <UART_SetConfig+0x268>
 800a6ea:	4b4c      	ldr	r3, [pc, #304]	@ (800a81c <UART_SetConfig+0x338>)
 800a6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ee:	f003 0307 	and.w	r3, r3, #7
 800a6f2:	2b05      	cmp	r3, #5
 800a6f4:	d826      	bhi.n	800a744 <UART_SetConfig+0x260>
 800a6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6fc <UART_SetConfig+0x218>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a715 	.word	0x0800a715
 800a700:	0800a71d 	.word	0x0800a71d
 800a704:	0800a725 	.word	0x0800a725
 800a708:	0800a72d 	.word	0x0800a72d
 800a70c:	0800a735 	.word	0x0800a735
 800a710:	0800a73d 	.word	0x0800a73d
 800a714:	2300      	movs	r3, #0
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71a:	e2ba      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a71c:	2304      	movs	r3, #4
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a722:	e2b6      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a724:	2308      	movs	r3, #8
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72a:	e2b2      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a72c:	2310      	movs	r3, #16
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a732:	e2ae      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a734:	2320      	movs	r3, #32
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e2aa      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a73c:	2340      	movs	r3, #64	@ 0x40
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e2a6      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a744:	2380      	movs	r3, #128	@ 0x80
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e2a2      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a35      	ldr	r2, [pc, #212]	@ (800a828 <UART_SetConfig+0x344>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d130      	bne.n	800a7b8 <UART_SetConfig+0x2d4>
 800a756:	4b31      	ldr	r3, [pc, #196]	@ (800a81c <UART_SetConfig+0x338>)
 800a758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a75a:	f003 0307 	and.w	r3, r3, #7
 800a75e:	2b05      	cmp	r3, #5
 800a760:	d826      	bhi.n	800a7b0 <UART_SetConfig+0x2cc>
 800a762:	a201      	add	r2, pc, #4	@ (adr r2, 800a768 <UART_SetConfig+0x284>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a781 	.word	0x0800a781
 800a76c:	0800a789 	.word	0x0800a789
 800a770:	0800a791 	.word	0x0800a791
 800a774:	0800a799 	.word	0x0800a799
 800a778:	0800a7a1 	.word	0x0800a7a1
 800a77c:	0800a7a9 	.word	0x0800a7a9
 800a780:	2300      	movs	r3, #0
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a786:	e284      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a788:	2304      	movs	r3, #4
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78e:	e280      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a790:	2308      	movs	r3, #8
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a796:	e27c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a798:	2310      	movs	r3, #16
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79e:	e278      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7a0:	2320      	movs	r3, #32
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a6:	e274      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7a8:	2340      	movs	r3, #64	@ 0x40
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ae:	e270      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7b0:	2380      	movs	r3, #128	@ 0x80
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b6:	e26c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1b      	ldr	r2, [pc, #108]	@ (800a82c <UART_SetConfig+0x348>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d142      	bne.n	800a848 <UART_SetConfig+0x364>
 800a7c2:	4b16      	ldr	r3, [pc, #88]	@ (800a81c <UART_SetConfig+0x338>)
 800a7c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7c6:	f003 0307 	and.w	r3, r3, #7
 800a7ca:	2b05      	cmp	r3, #5
 800a7cc:	d838      	bhi.n	800a840 <UART_SetConfig+0x35c>
 800a7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d4 <UART_SetConfig+0x2f0>)
 800a7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d4:	0800a7ed 	.word	0x0800a7ed
 800a7d8:	0800a7f5 	.word	0x0800a7f5
 800a7dc:	0800a7fd 	.word	0x0800a7fd
 800a7e0:	0800a805 	.word	0x0800a805
 800a7e4:	0800a831 	.word	0x0800a831
 800a7e8:	0800a839 	.word	0x0800a839
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e24e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e24a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7fc:	2308      	movs	r3, #8
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a802:	e246      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a804:	2310      	movs	r3, #16
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80a:	e242      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a80c:	cfff69f3 	.word	0xcfff69f3
 800a810:	58000c00 	.word	0x58000c00
 800a814:	11fff4ff 	.word	0x11fff4ff
 800a818:	40011000 	.word	0x40011000
 800a81c:	58024400 	.word	0x58024400
 800a820:	40004400 	.word	0x40004400
 800a824:	40004800 	.word	0x40004800
 800a828:	40004c00 	.word	0x40004c00
 800a82c:	40005000 	.word	0x40005000
 800a830:	2320      	movs	r3, #32
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e22c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a838:	2340      	movs	r3, #64	@ 0x40
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e228      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a840:	2380      	movs	r3, #128	@ 0x80
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e224      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4ab1      	ldr	r2, [pc, #708]	@ (800ab14 <UART_SetConfig+0x630>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d176      	bne.n	800a940 <UART_SetConfig+0x45c>
 800a852:	4bb1      	ldr	r3, [pc, #708]	@ (800ab18 <UART_SetConfig+0x634>)
 800a854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a85a:	2b28      	cmp	r3, #40	@ 0x28
 800a85c:	d86c      	bhi.n	800a938 <UART_SetConfig+0x454>
 800a85e:	a201      	add	r2, pc, #4	@ (adr r2, 800a864 <UART_SetConfig+0x380>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a909 	.word	0x0800a909
 800a868:	0800a939 	.word	0x0800a939
 800a86c:	0800a939 	.word	0x0800a939
 800a870:	0800a939 	.word	0x0800a939
 800a874:	0800a939 	.word	0x0800a939
 800a878:	0800a939 	.word	0x0800a939
 800a87c:	0800a939 	.word	0x0800a939
 800a880:	0800a939 	.word	0x0800a939
 800a884:	0800a911 	.word	0x0800a911
 800a888:	0800a939 	.word	0x0800a939
 800a88c:	0800a939 	.word	0x0800a939
 800a890:	0800a939 	.word	0x0800a939
 800a894:	0800a939 	.word	0x0800a939
 800a898:	0800a939 	.word	0x0800a939
 800a89c:	0800a939 	.word	0x0800a939
 800a8a0:	0800a939 	.word	0x0800a939
 800a8a4:	0800a919 	.word	0x0800a919
 800a8a8:	0800a939 	.word	0x0800a939
 800a8ac:	0800a939 	.word	0x0800a939
 800a8b0:	0800a939 	.word	0x0800a939
 800a8b4:	0800a939 	.word	0x0800a939
 800a8b8:	0800a939 	.word	0x0800a939
 800a8bc:	0800a939 	.word	0x0800a939
 800a8c0:	0800a939 	.word	0x0800a939
 800a8c4:	0800a921 	.word	0x0800a921
 800a8c8:	0800a939 	.word	0x0800a939
 800a8cc:	0800a939 	.word	0x0800a939
 800a8d0:	0800a939 	.word	0x0800a939
 800a8d4:	0800a939 	.word	0x0800a939
 800a8d8:	0800a939 	.word	0x0800a939
 800a8dc:	0800a939 	.word	0x0800a939
 800a8e0:	0800a939 	.word	0x0800a939
 800a8e4:	0800a929 	.word	0x0800a929
 800a8e8:	0800a939 	.word	0x0800a939
 800a8ec:	0800a939 	.word	0x0800a939
 800a8f0:	0800a939 	.word	0x0800a939
 800a8f4:	0800a939 	.word	0x0800a939
 800a8f8:	0800a939 	.word	0x0800a939
 800a8fc:	0800a939 	.word	0x0800a939
 800a900:	0800a939 	.word	0x0800a939
 800a904:	0800a931 	.word	0x0800a931
 800a908:	2301      	movs	r3, #1
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e1c0      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a910:	2304      	movs	r3, #4
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a916:	e1bc      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a918:	2308      	movs	r3, #8
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91e:	e1b8      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a920:	2310      	movs	r3, #16
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a926:	e1b4      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a928:	2320      	movs	r3, #32
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92e:	e1b0      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a930:	2340      	movs	r3, #64	@ 0x40
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a936:	e1ac      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a938:	2380      	movs	r3, #128	@ 0x80
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93e:	e1a8      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a75      	ldr	r2, [pc, #468]	@ (800ab1c <UART_SetConfig+0x638>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d130      	bne.n	800a9ac <UART_SetConfig+0x4c8>
 800a94a:	4b73      	ldr	r3, [pc, #460]	@ (800ab18 <UART_SetConfig+0x634>)
 800a94c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a94e:	f003 0307 	and.w	r3, r3, #7
 800a952:	2b05      	cmp	r3, #5
 800a954:	d826      	bhi.n	800a9a4 <UART_SetConfig+0x4c0>
 800a956:	a201      	add	r2, pc, #4	@ (adr r2, 800a95c <UART_SetConfig+0x478>)
 800a958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95c:	0800a975 	.word	0x0800a975
 800a960:	0800a97d 	.word	0x0800a97d
 800a964:	0800a985 	.word	0x0800a985
 800a968:	0800a98d 	.word	0x0800a98d
 800a96c:	0800a995 	.word	0x0800a995
 800a970:	0800a99d 	.word	0x0800a99d
 800a974:	2300      	movs	r3, #0
 800a976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97a:	e18a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a97c:	2304      	movs	r3, #4
 800a97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a982:	e186      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a984:	2308      	movs	r3, #8
 800a986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a98a:	e182      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a98c:	2310      	movs	r3, #16
 800a98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a992:	e17e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a994:	2320      	movs	r3, #32
 800a996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99a:	e17a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a99c:	2340      	movs	r3, #64	@ 0x40
 800a99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a2:	e176      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9a4:	2380      	movs	r3, #128	@ 0x80
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9aa:	e172      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a5b      	ldr	r2, [pc, #364]	@ (800ab20 <UART_SetConfig+0x63c>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d130      	bne.n	800aa18 <UART_SetConfig+0x534>
 800a9b6:	4b58      	ldr	r3, [pc, #352]	@ (800ab18 <UART_SetConfig+0x634>)
 800a9b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ba:	f003 0307 	and.w	r3, r3, #7
 800a9be:	2b05      	cmp	r3, #5
 800a9c0:	d826      	bhi.n	800aa10 <UART_SetConfig+0x52c>
 800a9c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c8 <UART_SetConfig+0x4e4>)
 800a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c8:	0800a9e1 	.word	0x0800a9e1
 800a9cc:	0800a9e9 	.word	0x0800a9e9
 800a9d0:	0800a9f1 	.word	0x0800a9f1
 800a9d4:	0800a9f9 	.word	0x0800a9f9
 800a9d8:	0800aa01 	.word	0x0800aa01
 800a9dc:	0800aa09 	.word	0x0800aa09
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e6:	e154      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9e8:	2304      	movs	r3, #4
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ee:	e150      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9f0:	2308      	movs	r3, #8
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f6:	e14c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9f8:	2310      	movs	r3, #16
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fe:	e148      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aa00:	2320      	movs	r3, #32
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa06:	e144      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aa08:	2340      	movs	r3, #64	@ 0x40
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa0e:	e140      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aa10:	2380      	movs	r3, #128	@ 0x80
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa16:	e13c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a41      	ldr	r2, [pc, #260]	@ (800ab24 <UART_SetConfig+0x640>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	f040 8082 	bne.w	800ab28 <UART_SetConfig+0x644>
 800aa24:	4b3c      	ldr	r3, [pc, #240]	@ (800ab18 <UART_SetConfig+0x634>)
 800aa26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa2c:	2b28      	cmp	r3, #40	@ 0x28
 800aa2e:	d86d      	bhi.n	800ab0c <UART_SetConfig+0x628>
 800aa30:	a201      	add	r2, pc, #4	@ (adr r2, 800aa38 <UART_SetConfig+0x554>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aadd 	.word	0x0800aadd
 800aa3c:	0800ab0d 	.word	0x0800ab0d
 800aa40:	0800ab0d 	.word	0x0800ab0d
 800aa44:	0800ab0d 	.word	0x0800ab0d
 800aa48:	0800ab0d 	.word	0x0800ab0d
 800aa4c:	0800ab0d 	.word	0x0800ab0d
 800aa50:	0800ab0d 	.word	0x0800ab0d
 800aa54:	0800ab0d 	.word	0x0800ab0d
 800aa58:	0800aae5 	.word	0x0800aae5
 800aa5c:	0800ab0d 	.word	0x0800ab0d
 800aa60:	0800ab0d 	.word	0x0800ab0d
 800aa64:	0800ab0d 	.word	0x0800ab0d
 800aa68:	0800ab0d 	.word	0x0800ab0d
 800aa6c:	0800ab0d 	.word	0x0800ab0d
 800aa70:	0800ab0d 	.word	0x0800ab0d
 800aa74:	0800ab0d 	.word	0x0800ab0d
 800aa78:	0800aaed 	.word	0x0800aaed
 800aa7c:	0800ab0d 	.word	0x0800ab0d
 800aa80:	0800ab0d 	.word	0x0800ab0d
 800aa84:	0800ab0d 	.word	0x0800ab0d
 800aa88:	0800ab0d 	.word	0x0800ab0d
 800aa8c:	0800ab0d 	.word	0x0800ab0d
 800aa90:	0800ab0d 	.word	0x0800ab0d
 800aa94:	0800ab0d 	.word	0x0800ab0d
 800aa98:	0800aaf5 	.word	0x0800aaf5
 800aa9c:	0800ab0d 	.word	0x0800ab0d
 800aaa0:	0800ab0d 	.word	0x0800ab0d
 800aaa4:	0800ab0d 	.word	0x0800ab0d
 800aaa8:	0800ab0d 	.word	0x0800ab0d
 800aaac:	0800ab0d 	.word	0x0800ab0d
 800aab0:	0800ab0d 	.word	0x0800ab0d
 800aab4:	0800ab0d 	.word	0x0800ab0d
 800aab8:	0800aafd 	.word	0x0800aafd
 800aabc:	0800ab0d 	.word	0x0800ab0d
 800aac0:	0800ab0d 	.word	0x0800ab0d
 800aac4:	0800ab0d 	.word	0x0800ab0d
 800aac8:	0800ab0d 	.word	0x0800ab0d
 800aacc:	0800ab0d 	.word	0x0800ab0d
 800aad0:	0800ab0d 	.word	0x0800ab0d
 800aad4:	0800ab0d 	.word	0x0800ab0d
 800aad8:	0800ab05 	.word	0x0800ab05
 800aadc:	2301      	movs	r3, #1
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae2:	e0d6      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aae4:	2304      	movs	r3, #4
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaea:	e0d2      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aaec:	2308      	movs	r3, #8
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf2:	e0ce      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aaf4:	2310      	movs	r3, #16
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafa:	e0ca      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aafc:	2320      	movs	r3, #32
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab02:	e0c6      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ab04:	2340      	movs	r3, #64	@ 0x40
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab0a:	e0c2      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ab0c:	2380      	movs	r3, #128	@ 0x80
 800ab0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab12:	e0be      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ab14:	40011400 	.word	0x40011400
 800ab18:	58024400 	.word	0x58024400
 800ab1c:	40007800 	.word	0x40007800
 800ab20:	40007c00 	.word	0x40007c00
 800ab24:	40011800 	.word	0x40011800
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4aad      	ldr	r2, [pc, #692]	@ (800ade4 <UART_SetConfig+0x900>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d176      	bne.n	800ac20 <UART_SetConfig+0x73c>
 800ab32:	4bad      	ldr	r3, [pc, #692]	@ (800ade8 <UART_SetConfig+0x904>)
 800ab34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab3a:	2b28      	cmp	r3, #40	@ 0x28
 800ab3c:	d86c      	bhi.n	800ac18 <UART_SetConfig+0x734>
 800ab3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <UART_SetConfig+0x660>)
 800ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab44:	0800abe9 	.word	0x0800abe9
 800ab48:	0800ac19 	.word	0x0800ac19
 800ab4c:	0800ac19 	.word	0x0800ac19
 800ab50:	0800ac19 	.word	0x0800ac19
 800ab54:	0800ac19 	.word	0x0800ac19
 800ab58:	0800ac19 	.word	0x0800ac19
 800ab5c:	0800ac19 	.word	0x0800ac19
 800ab60:	0800ac19 	.word	0x0800ac19
 800ab64:	0800abf1 	.word	0x0800abf1
 800ab68:	0800ac19 	.word	0x0800ac19
 800ab6c:	0800ac19 	.word	0x0800ac19
 800ab70:	0800ac19 	.word	0x0800ac19
 800ab74:	0800ac19 	.word	0x0800ac19
 800ab78:	0800ac19 	.word	0x0800ac19
 800ab7c:	0800ac19 	.word	0x0800ac19
 800ab80:	0800ac19 	.word	0x0800ac19
 800ab84:	0800abf9 	.word	0x0800abf9
 800ab88:	0800ac19 	.word	0x0800ac19
 800ab8c:	0800ac19 	.word	0x0800ac19
 800ab90:	0800ac19 	.word	0x0800ac19
 800ab94:	0800ac19 	.word	0x0800ac19
 800ab98:	0800ac19 	.word	0x0800ac19
 800ab9c:	0800ac19 	.word	0x0800ac19
 800aba0:	0800ac19 	.word	0x0800ac19
 800aba4:	0800ac01 	.word	0x0800ac01
 800aba8:	0800ac19 	.word	0x0800ac19
 800abac:	0800ac19 	.word	0x0800ac19
 800abb0:	0800ac19 	.word	0x0800ac19
 800abb4:	0800ac19 	.word	0x0800ac19
 800abb8:	0800ac19 	.word	0x0800ac19
 800abbc:	0800ac19 	.word	0x0800ac19
 800abc0:	0800ac19 	.word	0x0800ac19
 800abc4:	0800ac09 	.word	0x0800ac09
 800abc8:	0800ac19 	.word	0x0800ac19
 800abcc:	0800ac19 	.word	0x0800ac19
 800abd0:	0800ac19 	.word	0x0800ac19
 800abd4:	0800ac19 	.word	0x0800ac19
 800abd8:	0800ac19 	.word	0x0800ac19
 800abdc:	0800ac19 	.word	0x0800ac19
 800abe0:	0800ac19 	.word	0x0800ac19
 800abe4:	0800ac11 	.word	0x0800ac11
 800abe8:	2301      	movs	r3, #1
 800abea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abee:	e050      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800abf0:	2304      	movs	r3, #4
 800abf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abf6:	e04c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800abf8:	2308      	movs	r3, #8
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfe:	e048      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac00:	2310      	movs	r3, #16
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac06:	e044      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac08:	2320      	movs	r3, #32
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0e:	e040      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac10:	2340      	movs	r3, #64	@ 0x40
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac16:	e03c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac18:	2380      	movs	r3, #128	@ 0x80
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e038      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a71      	ldr	r2, [pc, #452]	@ (800adec <UART_SetConfig+0x908>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d130      	bne.n	800ac8c <UART_SetConfig+0x7a8>
 800ac2a:	4b6f      	ldr	r3, [pc, #444]	@ (800ade8 <UART_SetConfig+0x904>)
 800ac2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac2e:	f003 0307 	and.w	r3, r3, #7
 800ac32:	2b05      	cmp	r3, #5
 800ac34:	d826      	bhi.n	800ac84 <UART_SetConfig+0x7a0>
 800ac36:	a201      	add	r2, pc, #4	@ (adr r2, 800ac3c <UART_SetConfig+0x758>)
 800ac38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3c:	0800ac55 	.word	0x0800ac55
 800ac40:	0800ac5d 	.word	0x0800ac5d
 800ac44:	0800ac65 	.word	0x0800ac65
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac75 	.word	0x0800ac75
 800ac50:	0800ac7d 	.word	0x0800ac7d
 800ac54:	2302      	movs	r3, #2
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5a:	e01a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac5c:	2304      	movs	r3, #4
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac62:	e016      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac64:	2308      	movs	r3, #8
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6a:	e012      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac6c:	2310      	movs	r3, #16
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac72:	e00e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac74:	2320      	movs	r3, #32
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7a:	e00a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac7c:	2340      	movs	r3, #64	@ 0x40
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac82:	e006      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac84:	2380      	movs	r3, #128	@ 0x80
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8a:	e002      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac8c:	2380      	movs	r3, #128	@ 0x80
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a55      	ldr	r2, [pc, #340]	@ (800adec <UART_SetConfig+0x908>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	f040 80f8 	bne.w	800ae8e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	dc46      	bgt.n	800ad34 <UART_SetConfig+0x850>
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	db75      	blt.n	800ad96 <UART_SetConfig+0x8b2>
 800acaa:	3b02      	subs	r3, #2
 800acac:	2b1e      	cmp	r3, #30
 800acae:	d872      	bhi.n	800ad96 <UART_SetConfig+0x8b2>
 800acb0:	a201      	add	r2, pc, #4	@ (adr r2, 800acb8 <UART_SetConfig+0x7d4>)
 800acb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb6:	bf00      	nop
 800acb8:	0800ad3b 	.word	0x0800ad3b
 800acbc:	0800ad97 	.word	0x0800ad97
 800acc0:	0800ad43 	.word	0x0800ad43
 800acc4:	0800ad97 	.word	0x0800ad97
 800acc8:	0800ad97 	.word	0x0800ad97
 800accc:	0800ad97 	.word	0x0800ad97
 800acd0:	0800ad53 	.word	0x0800ad53
 800acd4:	0800ad97 	.word	0x0800ad97
 800acd8:	0800ad97 	.word	0x0800ad97
 800acdc:	0800ad97 	.word	0x0800ad97
 800ace0:	0800ad97 	.word	0x0800ad97
 800ace4:	0800ad97 	.word	0x0800ad97
 800ace8:	0800ad97 	.word	0x0800ad97
 800acec:	0800ad97 	.word	0x0800ad97
 800acf0:	0800ad63 	.word	0x0800ad63
 800acf4:	0800ad97 	.word	0x0800ad97
 800acf8:	0800ad97 	.word	0x0800ad97
 800acfc:	0800ad97 	.word	0x0800ad97
 800ad00:	0800ad97 	.word	0x0800ad97
 800ad04:	0800ad97 	.word	0x0800ad97
 800ad08:	0800ad97 	.word	0x0800ad97
 800ad0c:	0800ad97 	.word	0x0800ad97
 800ad10:	0800ad97 	.word	0x0800ad97
 800ad14:	0800ad97 	.word	0x0800ad97
 800ad18:	0800ad97 	.word	0x0800ad97
 800ad1c:	0800ad97 	.word	0x0800ad97
 800ad20:	0800ad97 	.word	0x0800ad97
 800ad24:	0800ad97 	.word	0x0800ad97
 800ad28:	0800ad97 	.word	0x0800ad97
 800ad2c:	0800ad97 	.word	0x0800ad97
 800ad30:	0800ad89 	.word	0x0800ad89
 800ad34:	2b40      	cmp	r3, #64	@ 0x40
 800ad36:	d02a      	beq.n	800ad8e <UART_SetConfig+0x8aa>
 800ad38:	e02d      	b.n	800ad96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ad3a:	f7fb ff21 	bl	8006b80 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad40:	e02f      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fb ff30 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad50:	e027      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad52:	f107 0318 	add.w	r3, r7, #24
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fc f87c 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad60:	e01f      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad62:	4b21      	ldr	r3, [pc, #132]	@ (800ade8 <UART_SetConfig+0x904>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 0320 	and.w	r3, r3, #32
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d009      	beq.n	800ad82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ade8 <UART_SetConfig+0x904>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	08db      	lsrs	r3, r3, #3
 800ad74:	f003 0303 	and.w	r3, r3, #3
 800ad78:	4a1d      	ldr	r2, [pc, #116]	@ (800adf0 <UART_SetConfig+0x90c>)
 800ad7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad80:	e00f      	b.n	800ada2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ad82:	4b1b      	ldr	r3, [pc, #108]	@ (800adf0 <UART_SetConfig+0x90c>)
 800ad84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad86:	e00c      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad88:	4b1a      	ldr	r3, [pc, #104]	@ (800adf4 <UART_SetConfig+0x910>)
 800ad8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad8c:	e009      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad94:	e005      	b.n	800ada2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ada0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ada2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 81ee 	beq.w	800b186 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adae:	4a12      	ldr	r2, [pc, #72]	@ (800adf8 <UART_SetConfig+0x914>)
 800adb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adb4:	461a      	mov	r2, r3
 800adb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800adbc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	4613      	mov	r3, r2
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	4413      	add	r3, r2
 800adc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adca:	429a      	cmp	r2, r3
 800adcc:	d305      	bcc.n	800adda <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800add4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800add6:	429a      	cmp	r2, r3
 800add8:	d910      	bls.n	800adfc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ade0:	e1d1      	b.n	800b186 <UART_SetConfig+0xca2>
 800ade2:	bf00      	nop
 800ade4:	40011c00 	.word	0x40011c00
 800ade8:	58024400 	.word	0x58024400
 800adec:	58000c00 	.word	0x58000c00
 800adf0:	03d09000 	.word	0x03d09000
 800adf4:	003d0900 	.word	0x003d0900
 800adf8:	08012a58 	.word	0x08012a58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfe:	2200      	movs	r2, #0
 800ae00:	60bb      	str	r3, [r7, #8]
 800ae02:	60fa      	str	r2, [r7, #12]
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae08:	4ac0      	ldr	r2, [pc, #768]	@ (800b10c <UART_SetConfig+0xc28>)
 800ae0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	2200      	movs	r2, #0
 800ae12:	603b      	str	r3, [r7, #0]
 800ae14:	607a      	str	r2, [r7, #4]
 800ae16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae1e:	f7f5 fc8b 	bl	8000738 <__aeabi_uldivmod>
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	4610      	mov	r0, r2
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f04f 0200 	mov.w	r2, #0
 800ae2e:	f04f 0300 	mov.w	r3, #0
 800ae32:	020b      	lsls	r3, r1, #8
 800ae34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae38:	0202      	lsls	r2, r0, #8
 800ae3a:	6979      	ldr	r1, [r7, #20]
 800ae3c:	6849      	ldr	r1, [r1, #4]
 800ae3e:	0849      	lsrs	r1, r1, #1
 800ae40:	2000      	movs	r0, #0
 800ae42:	460c      	mov	r4, r1
 800ae44:	4605      	mov	r5, r0
 800ae46:	eb12 0804 	adds.w	r8, r2, r4
 800ae4a:	eb43 0905 	adc.w	r9, r3, r5
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	469a      	mov	sl, r3
 800ae56:	4693      	mov	fp, r2
 800ae58:	4652      	mov	r2, sl
 800ae5a:	465b      	mov	r3, fp
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	4649      	mov	r1, r9
 800ae60:	f7f5 fc6a 	bl	8000738 <__aeabi_uldivmod>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4613      	mov	r3, r2
 800ae6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae72:	d308      	bcc.n	800ae86 <UART_SetConfig+0x9a2>
 800ae74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae7a:	d204      	bcs.n	800ae86 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae82:	60da      	str	r2, [r3, #12]
 800ae84:	e17f      	b.n	800b186 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ae8c:	e17b      	b.n	800b186 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae96:	f040 80bd 	bne.w	800b014 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ae9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	dc48      	bgt.n	800af34 <UART_SetConfig+0xa50>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	db7b      	blt.n	800af9e <UART_SetConfig+0xaba>
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	d879      	bhi.n	800af9e <UART_SetConfig+0xaba>
 800aeaa:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb0 <UART_SetConfig+0x9cc>)
 800aeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb0:	0800af3b 	.word	0x0800af3b
 800aeb4:	0800af43 	.word	0x0800af43
 800aeb8:	0800af9f 	.word	0x0800af9f
 800aebc:	0800af9f 	.word	0x0800af9f
 800aec0:	0800af4b 	.word	0x0800af4b
 800aec4:	0800af9f 	.word	0x0800af9f
 800aec8:	0800af9f 	.word	0x0800af9f
 800aecc:	0800af9f 	.word	0x0800af9f
 800aed0:	0800af5b 	.word	0x0800af5b
 800aed4:	0800af9f 	.word	0x0800af9f
 800aed8:	0800af9f 	.word	0x0800af9f
 800aedc:	0800af9f 	.word	0x0800af9f
 800aee0:	0800af9f 	.word	0x0800af9f
 800aee4:	0800af9f 	.word	0x0800af9f
 800aee8:	0800af9f 	.word	0x0800af9f
 800aeec:	0800af9f 	.word	0x0800af9f
 800aef0:	0800af6b 	.word	0x0800af6b
 800aef4:	0800af9f 	.word	0x0800af9f
 800aef8:	0800af9f 	.word	0x0800af9f
 800aefc:	0800af9f 	.word	0x0800af9f
 800af00:	0800af9f 	.word	0x0800af9f
 800af04:	0800af9f 	.word	0x0800af9f
 800af08:	0800af9f 	.word	0x0800af9f
 800af0c:	0800af9f 	.word	0x0800af9f
 800af10:	0800af9f 	.word	0x0800af9f
 800af14:	0800af9f 	.word	0x0800af9f
 800af18:	0800af9f 	.word	0x0800af9f
 800af1c:	0800af9f 	.word	0x0800af9f
 800af20:	0800af9f 	.word	0x0800af9f
 800af24:	0800af9f 	.word	0x0800af9f
 800af28:	0800af9f 	.word	0x0800af9f
 800af2c:	0800af9f 	.word	0x0800af9f
 800af30:	0800af91 	.word	0x0800af91
 800af34:	2b40      	cmp	r3, #64	@ 0x40
 800af36:	d02e      	beq.n	800af96 <UART_SetConfig+0xab2>
 800af38:	e031      	b.n	800af9e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af3a:	f7f9 ff41 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 800af3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af40:	e033      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af42:	f7f9 ff53 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
 800af46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af48:	e02f      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fb fe2c 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af58:	e027      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af5a:	f107 0318 	add.w	r3, r7, #24
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fb ff78 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af68:	e01f      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af6a:	4b69      	ldr	r3, [pc, #420]	@ (800b110 <UART_SetConfig+0xc2c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0320 	and.w	r3, r3, #32
 800af72:	2b00      	cmp	r3, #0
 800af74:	d009      	beq.n	800af8a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af76:	4b66      	ldr	r3, [pc, #408]	@ (800b110 <UART_SetConfig+0xc2c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	08db      	lsrs	r3, r3, #3
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	4a64      	ldr	r2, [pc, #400]	@ (800b114 <UART_SetConfig+0xc30>)
 800af82:	fa22 f303 	lsr.w	r3, r2, r3
 800af86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af88:	e00f      	b.n	800afaa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800af8a:	4b62      	ldr	r3, [pc, #392]	@ (800b114 <UART_SetConfig+0xc30>)
 800af8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af8e:	e00c      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af90:	4b61      	ldr	r3, [pc, #388]	@ (800b118 <UART_SetConfig+0xc34>)
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af94:	e009      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af9c:	e005      	b.n	800afaa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800afa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800afaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 80ea 	beq.w	800b186 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb6:	4a55      	ldr	r2, [pc, #340]	@ (800b10c <UART_SetConfig+0xc28>)
 800afb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afbc:	461a      	mov	r2, r3
 800afbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800afc4:	005a      	lsls	r2, r3, #1
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	085b      	lsrs	r3, r3, #1
 800afcc:	441a      	add	r2, r3
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afda:	2b0f      	cmp	r3, #15
 800afdc:	d916      	bls.n	800b00c <UART_SetConfig+0xb28>
 800afde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afe4:	d212      	bcs.n	800b00c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe8:	b29b      	uxth	r3, r3
 800afea:	f023 030f 	bic.w	r3, r3, #15
 800afee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff2:	085b      	lsrs	r3, r3, #1
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f003 0307 	and.w	r3, r3, #7
 800affa:	b29a      	uxth	r2, r3
 800affc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800affe:	4313      	orrs	r3, r2
 800b000:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b008:	60da      	str	r2, [r3, #12]
 800b00a:	e0bc      	b.n	800b186 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b012:	e0b8      	b.n	800b186 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b014:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b018:	2b20      	cmp	r3, #32
 800b01a:	dc4b      	bgt.n	800b0b4 <UART_SetConfig+0xbd0>
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f2c0 8087 	blt.w	800b130 <UART_SetConfig+0xc4c>
 800b022:	2b20      	cmp	r3, #32
 800b024:	f200 8084 	bhi.w	800b130 <UART_SetConfig+0xc4c>
 800b028:	a201      	add	r2, pc, #4	@ (adr r2, 800b030 <UART_SetConfig+0xb4c>)
 800b02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02e:	bf00      	nop
 800b030:	0800b0bb 	.word	0x0800b0bb
 800b034:	0800b0c3 	.word	0x0800b0c3
 800b038:	0800b131 	.word	0x0800b131
 800b03c:	0800b131 	.word	0x0800b131
 800b040:	0800b0cb 	.word	0x0800b0cb
 800b044:	0800b131 	.word	0x0800b131
 800b048:	0800b131 	.word	0x0800b131
 800b04c:	0800b131 	.word	0x0800b131
 800b050:	0800b0db 	.word	0x0800b0db
 800b054:	0800b131 	.word	0x0800b131
 800b058:	0800b131 	.word	0x0800b131
 800b05c:	0800b131 	.word	0x0800b131
 800b060:	0800b131 	.word	0x0800b131
 800b064:	0800b131 	.word	0x0800b131
 800b068:	0800b131 	.word	0x0800b131
 800b06c:	0800b131 	.word	0x0800b131
 800b070:	0800b0eb 	.word	0x0800b0eb
 800b074:	0800b131 	.word	0x0800b131
 800b078:	0800b131 	.word	0x0800b131
 800b07c:	0800b131 	.word	0x0800b131
 800b080:	0800b131 	.word	0x0800b131
 800b084:	0800b131 	.word	0x0800b131
 800b088:	0800b131 	.word	0x0800b131
 800b08c:	0800b131 	.word	0x0800b131
 800b090:	0800b131 	.word	0x0800b131
 800b094:	0800b131 	.word	0x0800b131
 800b098:	0800b131 	.word	0x0800b131
 800b09c:	0800b131 	.word	0x0800b131
 800b0a0:	0800b131 	.word	0x0800b131
 800b0a4:	0800b131 	.word	0x0800b131
 800b0a8:	0800b131 	.word	0x0800b131
 800b0ac:	0800b131 	.word	0x0800b131
 800b0b0:	0800b123 	.word	0x0800b123
 800b0b4:	2b40      	cmp	r3, #64	@ 0x40
 800b0b6:	d037      	beq.n	800b128 <UART_SetConfig+0xc44>
 800b0b8:	e03a      	b.n	800b130 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0ba:	f7f9 fe81 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 800b0be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0c0:	e03c      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0c2:	f7f9 fe93 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
 800b0c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0c8:	e038      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fb fd6c 	bl	8006bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0d8:	e030      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0da:	f107 0318 	add.w	r3, r7, #24
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fb feb8 	bl	8006e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e8:	e028      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0ea:	4b09      	ldr	r3, [pc, #36]	@ (800b110 <UART_SetConfig+0xc2c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0320 	and.w	r3, r3, #32
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d012      	beq.n	800b11c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0f6:	4b06      	ldr	r3, [pc, #24]	@ (800b110 <UART_SetConfig+0xc2c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	08db      	lsrs	r3, r3, #3
 800b0fc:	f003 0303 	and.w	r3, r3, #3
 800b100:	4a04      	ldr	r2, [pc, #16]	@ (800b114 <UART_SetConfig+0xc30>)
 800b102:	fa22 f303 	lsr.w	r3, r2, r3
 800b106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b108:	e018      	b.n	800b13c <UART_SetConfig+0xc58>
 800b10a:	bf00      	nop
 800b10c:	08012a58 	.word	0x08012a58
 800b110:	58024400 	.word	0x58024400
 800b114:	03d09000 	.word	0x03d09000
 800b118:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b11c:	4b24      	ldr	r3, [pc, #144]	@ (800b1b0 <UART_SetConfig+0xccc>)
 800b11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b120:	e00c      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b122:	4b24      	ldr	r3, [pc, #144]	@ (800b1b4 <UART_SetConfig+0xcd0>)
 800b124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b126:	e009      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b12e:	e005      	b.n	800b13c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b130:	2300      	movs	r3, #0
 800b132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b13a:	bf00      	nop
    }

    if (pclk != 0U)
 800b13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d021      	beq.n	800b186 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b146:	4a1c      	ldr	r2, [pc, #112]	@ (800b1b8 <UART_SetConfig+0xcd4>)
 800b148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b14c:	461a      	mov	r2, r3
 800b14e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b150:	fbb3 f2f2 	udiv	r2, r3, r2
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	085b      	lsrs	r3, r3, #1
 800b15a:	441a      	add	r2, r3
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	fbb2 f3f3 	udiv	r3, r2, r3
 800b164:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b168:	2b0f      	cmp	r3, #15
 800b16a:	d909      	bls.n	800b180 <UART_SetConfig+0xc9c>
 800b16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b172:	d205      	bcs.n	800b180 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b176:	b29a      	uxth	r2, r3
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	60da      	str	r2, [r3, #12]
 800b17e:	e002      	b.n	800b186 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2201      	movs	r2, #1
 800b18a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2201      	movs	r2, #1
 800b192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2200      	movs	r2, #0
 800b19a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b1a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3748      	adds	r7, #72	@ 0x48
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1b0:	03d09000 	.word	0x03d09000
 800b1b4:	003d0900 	.word	0x003d0900
 800b1b8:	08012a58 	.word	0x08012a58

0800b1bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c8:	f003 0308 	and.w	r3, r3, #8
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00a      	beq.n	800b1e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	430a      	orrs	r2, r1
 800b1e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	430a      	orrs	r2, r1
 800b206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00a      	beq.n	800b22a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	430a      	orrs	r2, r1
 800b228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b22e:	f003 0304 	and.w	r3, r3, #4
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00a      	beq.n	800b24c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	430a      	orrs	r2, r1
 800b24a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b250:	f003 0310 	and.w	r3, r3, #16
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00a      	beq.n	800b26e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	430a      	orrs	r2, r1
 800b26c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b272:	f003 0320 	and.w	r3, r3, #32
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00a      	beq.n	800b290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	430a      	orrs	r2, r1
 800b28e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01a      	beq.n	800b2d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	430a      	orrs	r2, r1
 800b2b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2ba:	d10a      	bne.n	800b2d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	430a      	orrs	r2, r1
 800b2d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	430a      	orrs	r2, r1
 800b2f2:	605a      	str	r2, [r3, #4]
  }
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b098      	sub	sp, #96	@ 0x60
 800b304:	af02      	add	r7, sp, #8
 800b306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b310:	f7f7 fbe8 	bl	8002ae4 <HAL_GetTick>
 800b314:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0308 	and.w	r3, r3, #8
 800b320:	2b08      	cmp	r3, #8
 800b322:	d12f      	bne.n	800b384 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b324:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b32c:	2200      	movs	r2, #0
 800b32e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f88e 	bl	800b454 <UART_WaitOnFlagUntilTimeout>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d022      	beq.n	800b384 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	e853 3f00 	ldrex	r3, [r3]
 800b34a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b34e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b352:	653b      	str	r3, [r7, #80]	@ 0x50
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	461a      	mov	r2, r3
 800b35a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b35c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b35e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b364:	e841 2300 	strex	r3, r2, [r1]
 800b368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e6      	bne.n	800b33e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2220      	movs	r2, #32
 800b374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e063      	b.n	800b44c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0304 	and.w	r3, r3, #4
 800b38e:	2b04      	cmp	r3, #4
 800b390:	d149      	bne.n	800b426 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b392:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b39a:	2200      	movs	r2, #0
 800b39c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f857 	bl	800b454 <UART_WaitOnFlagUntilTimeout>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d03c      	beq.n	800b426 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e6      	bne.n	800b3ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f023 0301 	bic.w	r3, r3, #1
 800b3f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3fe:	61fa      	str	r2, [r7, #28]
 800b400:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b402:	69b9      	ldr	r1, [r7, #24]
 800b404:	69fa      	ldr	r2, [r7, #28]
 800b406:	e841 2300 	strex	r3, r2, [r1]
 800b40a:	617b      	str	r3, [r7, #20]
   return(result);
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e5      	bne.n	800b3de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2220      	movs	r2, #32
 800b416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	e012      	b.n	800b44c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2220      	movs	r2, #32
 800b42a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3758      	adds	r7, #88	@ 0x58
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	4613      	mov	r3, r2
 800b462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b464:	e04f      	b.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b46c:	d04b      	beq.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b46e:	f7f7 fb39 	bl	8002ae4 <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	69ba      	ldr	r2, [r7, #24]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d302      	bcc.n	800b484 <UART_WaitOnFlagUntilTimeout+0x30>
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e04e      	b.n	800b526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0304 	and.w	r3, r3, #4
 800b492:	2b00      	cmp	r3, #0
 800b494:	d037      	beq.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2b80      	cmp	r3, #128	@ 0x80
 800b49a:	d034      	beq.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b40      	cmp	r3, #64	@ 0x40
 800b4a0:	d031      	beq.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	f003 0308 	and.w	r3, r3, #8
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d110      	bne.n	800b4d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2208      	movs	r2, #8
 800b4b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f000 f95b 	bl	800b774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e029      	b.n	800b526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4e0:	d111      	bne.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f000 f941 	bl	800b774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e00f      	b.n	800b526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	69da      	ldr	r2, [r3, #28]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	4013      	ands	r3, r2
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	429a      	cmp	r2, r3
 800b514:	bf0c      	ite	eq
 800b516:	2301      	moveq	r3, #1
 800b518:	2300      	movne	r3, #0
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	461a      	mov	r2, r3
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	429a      	cmp	r2, r3
 800b522:	d0a0      	beq.n	800b466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
	...

0800b530 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b530:	b480      	push	{r7}
 800b532:	b0a3      	sub	sp, #140	@ 0x8c
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	4613      	mov	r3, r2
 800b53c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	88fa      	ldrh	r2, [r7, #6]
 800b548:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	88fa      	ldrh	r2, [r7, #6]
 800b550:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b562:	d10e      	bne.n	800b582 <UART_Start_Receive_IT+0x52>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d105      	bne.n	800b578 <UART_Start_Receive_IT+0x48>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b572:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b576:	e02d      	b.n	800b5d4 <UART_Start_Receive_IT+0xa4>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	22ff      	movs	r2, #255	@ 0xff
 800b57c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b580:	e028      	b.n	800b5d4 <UART_Start_Receive_IT+0xa4>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10d      	bne.n	800b5a6 <UART_Start_Receive_IT+0x76>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d104      	bne.n	800b59c <UART_Start_Receive_IT+0x6c>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	22ff      	movs	r2, #255	@ 0xff
 800b596:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b59a:	e01b      	b.n	800b5d4 <UART_Start_Receive_IT+0xa4>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	227f      	movs	r2, #127	@ 0x7f
 800b5a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b5a4:	e016      	b.n	800b5d4 <UART_Start_Receive_IT+0xa4>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5ae:	d10d      	bne.n	800b5cc <UART_Start_Receive_IT+0x9c>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d104      	bne.n	800b5c2 <UART_Start_Receive_IT+0x92>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	227f      	movs	r2, #127	@ 0x7f
 800b5bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b5c0:	e008      	b.n	800b5d4 <UART_Start_Receive_IT+0xa4>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	223f      	movs	r2, #63	@ 0x3f
 800b5c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b5ca:	e003      	b.n	800b5d4 <UART_Start_Receive_IT+0xa4>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2222      	movs	r2, #34	@ 0x22
 800b5e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5ee:	e853 3f00 	ldrex	r3, [r3]
 800b5f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b5f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5f6:	f043 0301 	orr.w	r3, r3, #1
 800b5fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3308      	adds	r3, #8
 800b604:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b608:	673a      	str	r2, [r7, #112]	@ 0x70
 800b60a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b60e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b616:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e3      	bne.n	800b5e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b624:	d14f      	bne.n	800b6c6 <UART_Start_Receive_IT+0x196>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b62c:	88fa      	ldrh	r2, [r7, #6]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d349      	bcc.n	800b6c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b63a:	d107      	bne.n	800b64c <UART_Start_Receive_IT+0x11c>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d103      	bne.n	800b64c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4a47      	ldr	r2, [pc, #284]	@ (800b764 <UART_Start_Receive_IT+0x234>)
 800b648:	675a      	str	r2, [r3, #116]	@ 0x74
 800b64a:	e002      	b.n	800b652 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	4a46      	ldr	r2, [pc, #280]	@ (800b768 <UART_Start_Receive_IT+0x238>)
 800b650:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d01a      	beq.n	800b690 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b662:	e853 3f00 	ldrex	r3, [r3]
 800b666:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b66a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b66e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b67c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b67e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b680:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b682:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b684:	e841 2300 	strex	r3, r2, [r1]
 800b688:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b68a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1e4      	bne.n	800b65a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3308      	adds	r3, #8
 800b696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b69a:	e853 3f00 	ldrex	r3, [r3]
 800b69e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b6b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b6b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b6b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6b8:	e841 2300 	strex	r3, r2, [r1]
 800b6bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b6be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1e5      	bne.n	800b690 <UART_Start_Receive_IT+0x160>
 800b6c4:	e046      	b.n	800b754 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6ce:	d107      	bne.n	800b6e0 <UART_Start_Receive_IT+0x1b0>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d103      	bne.n	800b6e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	4a24      	ldr	r2, [pc, #144]	@ (800b76c <UART_Start_Receive_IT+0x23c>)
 800b6dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800b6de:	e002      	b.n	800b6e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4a23      	ldr	r2, [pc, #140]	@ (800b770 <UART_Start_Receive_IT+0x240>)
 800b6e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d019      	beq.n	800b722 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f6:	e853 3f00 	ldrex	r3, [r3]
 800b6fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b702:	677b      	str	r3, [r7, #116]	@ 0x74
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	461a      	mov	r2, r3
 800b70a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b70c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b70e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b710:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b712:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b714:	e841 2300 	strex	r3, r2, [r1]
 800b718:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1e6      	bne.n	800b6ee <UART_Start_Receive_IT+0x1be>
 800b720:	e018      	b.n	800b754 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	e853 3f00 	ldrex	r3, [r3]
 800b72e:	613b      	str	r3, [r7, #16]
   return(result);
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	f043 0320 	orr.w	r3, r3, #32
 800b736:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b740:	623b      	str	r3, [r7, #32]
 800b742:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b744:	69f9      	ldr	r1, [r7, #28]
 800b746:	6a3a      	ldr	r2, [r7, #32]
 800b748:	e841 2300 	strex	r3, r2, [r1]
 800b74c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e6      	bne.n	800b722 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	378c      	adds	r7, #140	@ 0x8c
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	0800bf95 	.word	0x0800bf95
 800b768:	0800bc35 	.word	0x0800bc35
 800b76c:	0800ba7d 	.word	0x0800ba7d
 800b770:	0800b8c5 	.word	0x0800b8c5

0800b774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b774:	b480      	push	{r7}
 800b776:	b095      	sub	sp, #84	@ 0x54
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b784:	e853 3f00 	ldrex	r3, [r3]
 800b788:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b79a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b79c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b7a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b7a2:	e841 2300 	strex	r3, r2, [r1]
 800b7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1e6      	bne.n	800b77c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7be:	69fa      	ldr	r2, [r7, #28]
 800b7c0:	4b1e      	ldr	r3, [pc, #120]	@ (800b83c <UART_EndRxTransfer+0xc8>)
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b7d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e5      	bne.n	800b7ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d118      	bne.n	800b81c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	f023 0310 	bic.w	r3, r3, #16
 800b7fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b808:	61bb      	str	r3, [r7, #24]
 800b80a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	6979      	ldr	r1, [r7, #20]
 800b80e:	69ba      	ldr	r2, [r7, #24]
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	613b      	str	r3, [r7, #16]
   return(result);
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e6      	bne.n	800b7ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2220      	movs	r2, #32
 800b820:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b830:	bf00      	nop
 800b832:	3754      	adds	r7, #84	@ 0x54
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	effffffe 	.word	0xeffffffe

0800b840 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b84c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f7fe fe2a 	bl	800a4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b864:	bf00      	nop
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	e853 3f00 	ldrex	r3, [r3]
 800b880:	60bb      	str	r3, [r7, #8]
   return(result);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b888:	61fb      	str	r3, [r7, #28]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	61bb      	str	r3, [r7, #24]
 800b894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	6979      	ldr	r1, [r7, #20]
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e6      	bne.n	800b874 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2220      	movs	r2, #32
 800b8aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7fe fdf5 	bl	800a4a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ba:	bf00      	nop
 800b8bc:	3720      	adds	r7, #32
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
	...

0800b8c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b09c      	sub	sp, #112	@ 0x70
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b8d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8dc:	2b22      	cmp	r3, #34	@ 0x22
 800b8de:	f040 80be 	bne.w	800ba5e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b8ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b8f0:	b2d9      	uxtb	r1, r3
 800b8f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b8f6:	b2da      	uxtb	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8fc:	400a      	ands	r2, r1
 800b8fe:	b2d2      	uxtb	r2, r2
 800b900:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b912:	b29b      	uxth	r3, r3
 800b914:	3b01      	subs	r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b924:	b29b      	uxth	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	f040 80a1 	bne.w	800ba6e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b934:	e853 3f00 	ldrex	r3, [r3]
 800b938:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b93a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b93c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b940:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b94a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b94c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b950:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b952:	e841 2300 	strex	r3, r2, [r1]
 800b956:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1e6      	bne.n	800b92c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3308      	adds	r3, #8
 800b964:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b968:	e853 3f00 	ldrex	r3, [r3]
 800b96c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b970:	f023 0301 	bic.w	r3, r3, #1
 800b974:	667b      	str	r3, [r7, #100]	@ 0x64
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3308      	adds	r3, #8
 800b97c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b97e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b980:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b982:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b984:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b986:	e841 2300 	strex	r3, r2, [r1]
 800b98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1e5      	bne.n	800b95e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2220      	movs	r2, #32
 800b996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a33      	ldr	r2, [pc, #204]	@ (800ba78 <UART_RxISR_8BIT+0x1b4>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d01f      	beq.n	800b9f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d018      	beq.n	800b9f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c6:	e853 3f00 	ldrex	r3, [r3]
 800b9ca:	623b      	str	r3, [r7, #32]
   return(result);
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b9d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e4:	e841 2300 	strex	r3, r2, [r1]
 800b9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1e6      	bne.n	800b9be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d12e      	bne.n	800ba56 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	e853 3f00 	ldrex	r3, [r3]
 800ba0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 0310 	bic.w	r3, r3, #16
 800ba12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba1c:	61fb      	str	r3, [r7, #28]
 800ba1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	69b9      	ldr	r1, [r7, #24]
 800ba22:	69fa      	ldr	r2, [r7, #28]
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	617b      	str	r3, [r7, #20]
   return(result);
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e6      	bne.n	800b9fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	69db      	ldr	r3, [r3, #28]
 800ba36:	f003 0310 	and.w	r3, r3, #16
 800ba3a:	2b10      	cmp	r3, #16
 800ba3c:	d103      	bne.n	800ba46 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2210      	movs	r2, #16
 800ba44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7fe fd3c 	bl	800a4cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba54:	e00b      	b.n	800ba6e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7f5 fb06 	bl	8001068 <HAL_UART_RxCpltCallback>
}
 800ba5c:	e007      	b.n	800ba6e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	699a      	ldr	r2, [r3, #24]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f042 0208 	orr.w	r2, r2, #8
 800ba6c:	619a      	str	r2, [r3, #24]
}
 800ba6e:	bf00      	nop
 800ba70:	3770      	adds	r7, #112	@ 0x70
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	58000c00 	.word	0x58000c00

0800ba7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b09c      	sub	sp, #112	@ 0x70
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ba8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba94:	2b22      	cmp	r3, #34	@ 0x22
 800ba96:	f040 80be 	bne.w	800bc16 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800baaa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800baae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bab2:	4013      	ands	r3, r2
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bab8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800babe:	1c9a      	adds	r2, r3, #2
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800baca:	b29b      	uxth	r3, r3
 800bacc:	3b01      	subs	r3, #1
 800bace:	b29a      	uxth	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800badc:	b29b      	uxth	r3, r3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f040 80a1 	bne.w	800bc26 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baec:	e853 3f00 	ldrex	r3, [r3]
 800baf0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800baf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800baf8:	667b      	str	r3, [r7, #100]	@ 0x64
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb02:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bb08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bb0a:	e841 2300 	strex	r3, r2, [r1]
 800bb0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bb10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1e6      	bne.n	800bae4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb20:	e853 3f00 	ldrex	r3, [r3]
 800bb24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb28:	f023 0301 	bic.w	r3, r3, #1
 800bb2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3308      	adds	r3, #8
 800bb34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bb36:	643a      	str	r2, [r7, #64]	@ 0x40
 800bb38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb3e:	e841 2300 	strex	r3, r2, [r1]
 800bb42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1e5      	bne.n	800bb16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2220      	movs	r2, #32
 800bb4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a33      	ldr	r2, [pc, #204]	@ (800bc30 <UART_RxISR_16BIT+0x1b4>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d01f      	beq.n	800bba8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d018      	beq.n	800bba8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	e853 3f00 	ldrex	r3, [r3]
 800bb82:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	461a      	mov	r2, r3
 800bb92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb96:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb9c:	e841 2300 	strex	r3, r2, [r1]
 800bba0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1e6      	bne.n	800bb76 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d12e      	bne.n	800bc0e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	e853 3f00 	ldrex	r3, [r3]
 800bbc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	f023 0310 	bic.w	r3, r3, #16
 800bbca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbd4:	61bb      	str	r3, [r7, #24]
 800bbd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd8:	6979      	ldr	r1, [r7, #20]
 800bbda:	69ba      	ldr	r2, [r7, #24]
 800bbdc:	e841 2300 	strex	r3, r2, [r1]
 800bbe0:	613b      	str	r3, [r7, #16]
   return(result);
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1e6      	bne.n	800bbb6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	69db      	ldr	r3, [r3, #28]
 800bbee:	f003 0310 	and.w	r3, r3, #16
 800bbf2:	2b10      	cmp	r3, #16
 800bbf4:	d103      	bne.n	800bbfe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2210      	movs	r2, #16
 800bbfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bc04:	4619      	mov	r1, r3
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7fe fc60 	bl	800a4cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc0c:	e00b      	b.n	800bc26 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7f5 fa2a 	bl	8001068 <HAL_UART_RxCpltCallback>
}
 800bc14:	e007      	b.n	800bc26 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	699a      	ldr	r2, [r3, #24]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f042 0208 	orr.w	r2, r2, #8
 800bc24:	619a      	str	r2, [r3, #24]
}
 800bc26:	bf00      	nop
 800bc28:	3770      	adds	r7, #112	@ 0x70
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	58000c00 	.word	0x58000c00

0800bc34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b0ac      	sub	sp, #176	@ 0xb0
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc42:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	69db      	ldr	r3, [r3, #28]
 800bc4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc6a:	2b22      	cmp	r3, #34	@ 0x22
 800bc6c:	f040 8180 	bne.w	800bf70 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bc76:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bc7a:	e123      	b.n	800bec4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc82:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc86:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800bc8a:	b2d9      	uxtb	r1, r3
 800bc8c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc96:	400a      	ands	r2, r1
 800bc98:	b2d2      	uxtb	r2, r2
 800bc9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bca0:	1c5a      	adds	r2, r3, #1
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bcc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcc6:	f003 0307 	and.w	r3, r3, #7
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d053      	beq.n	800bd76 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bcce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d011      	beq.n	800bcfe <UART_RxISR_8BIT_FIFOEN+0xca>
 800bcda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00b      	beq.n	800bcfe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2201      	movs	r2, #1
 800bcec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf4:	f043 0201 	orr.w	r2, r3, #1
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd02:	f003 0302 	and.w	r3, r3, #2
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d011      	beq.n	800bd2e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bd0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00b      	beq.n	800bd2e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd24:	f043 0204 	orr.w	r2, r3, #4
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd32:	f003 0304 	and.w	r3, r3, #4
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d011      	beq.n	800bd5e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bd3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00b      	beq.n	800bd5e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2204      	movs	r2, #4
 800bd4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd54:	f043 0202 	orr.w	r2, r3, #2
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d006      	beq.n	800bd76 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7fe fba5 	bl	800a4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f040 80a0 	bne.w	800bec4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd8c:	e853 3f00 	ldrex	r3, [r3]
 800bd90:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800bd92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	461a      	mov	r2, r3
 800bda2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bda6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bda8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdaa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800bdac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bdae:	e841 2300 	strex	r3, r2, [r1]
 800bdb2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800bdb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1e4      	bne.n	800bd84 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3308      	adds	r3, #8
 800bdc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdc4:	e853 3f00 	ldrex	r3, [r3]
 800bdc8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800bdca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdcc:	4b6e      	ldr	r3, [pc, #440]	@ (800bf88 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800bdce:	4013      	ands	r3, r2
 800bdd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3308      	adds	r3, #8
 800bdda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bdde:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bde0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800bde4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bdec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e3      	bne.n	800bdba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a60      	ldr	r2, [pc, #384]	@ (800bf8c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d021      	beq.n	800be54 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d01a      	beq.n	800be54 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be26:	e853 3f00 	ldrex	r3, [r3]
 800be2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800be2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	461a      	mov	r2, r3
 800be3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800be40:	657b      	str	r3, [r7, #84]	@ 0x54
 800be42:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800be46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be48:	e841 2300 	strex	r3, r2, [r1]
 800be4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800be4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1e4      	bne.n	800be1e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d130      	bne.n	800bebe <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be6a:	e853 3f00 	ldrex	r3, [r3]
 800be6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be72:	f023 0310 	bic.w	r3, r3, #16
 800be76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be84:	643b      	str	r3, [r7, #64]	@ 0x40
 800be86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e4      	bne.n	800be62 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	f003 0310 	and.w	r3, r3, #16
 800bea2:	2b10      	cmp	r3, #16
 800bea4:	d103      	bne.n	800beae <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2210      	movs	r2, #16
 800beac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7fe fb08 	bl	800a4cc <HAL_UARTEx_RxEventCallback>
 800bebc:	e002      	b.n	800bec4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7f5 f8d2 	bl	8001068 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bec4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d006      	beq.n	800beda <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800becc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bed0:	f003 0320 	and.w	r3, r3, #32
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f47f aed1 	bne.w	800bc7c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bee0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bee4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d049      	beq.n	800bf80 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bef2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d242      	bcs.n	800bf80 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3308      	adds	r3, #8
 800bf00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	e853 3f00 	ldrex	r3, [r3]
 800bf08:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3308      	adds	r3, #8
 800bf1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bf1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf26:	e841 2300 	strex	r3, r2, [r1]
 800bf2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1e3      	bne.n	800befa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a16      	ldr	r2, [pc, #88]	@ (800bf90 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800bf36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	e853 3f00 	ldrex	r3, [r3]
 800bf44:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	f043 0320 	orr.w	r3, r3, #32
 800bf4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	461a      	mov	r2, r3
 800bf56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bf5a:	61bb      	str	r3, [r7, #24]
 800bf5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5e:	6979      	ldr	r1, [r7, #20]
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	e841 2300 	strex	r3, r2, [r1]
 800bf66:	613b      	str	r3, [r7, #16]
   return(result);
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1e4      	bne.n	800bf38 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf6e:	e007      	b.n	800bf80 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	699a      	ldr	r2, [r3, #24]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f042 0208 	orr.w	r2, r2, #8
 800bf7e:	619a      	str	r2, [r3, #24]
}
 800bf80:	bf00      	nop
 800bf82:	37b0      	adds	r7, #176	@ 0xb0
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	effffffe 	.word	0xeffffffe
 800bf8c:	58000c00 	.word	0x58000c00
 800bf90:	0800b8c5 	.word	0x0800b8c5

0800bf94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b0ae      	sub	sp, #184	@ 0xb8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bfa2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	69db      	ldr	r3, [r3, #28]
 800bfac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfca:	2b22      	cmp	r3, #34	@ 0x22
 800bfcc:	f040 8184 	bne.w	800c2d8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bfd6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bfda:	e127      	b.n	800c22c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bfee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800bff2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800bff6:	4013      	ands	r3, r2
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bffe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c004:	1c9a      	adds	r2, r3, #2
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c010:	b29b      	uxth	r3, r3
 800c012:	3b01      	subs	r3, #1
 800c014:	b29a      	uxth	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	69db      	ldr	r3, [r3, #28]
 800c022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c02a:	f003 0307 	and.w	r3, r3, #7
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d053      	beq.n	800c0da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d011      	beq.n	800c062 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c03e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00b      	beq.n	800c062 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2201      	movs	r2, #1
 800c050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c058:	f043 0201 	orr.w	r2, r3, #1
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c066:	f003 0302 	and.w	r3, r3, #2
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d011      	beq.n	800c092 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c06e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00b      	beq.n	800c092 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2202      	movs	r2, #2
 800c080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c088:	f043 0204 	orr.w	r2, r3, #4
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c096:	f003 0304 	and.w	r3, r3, #4
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d011      	beq.n	800c0c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c09e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00b      	beq.n	800c0c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2204      	movs	r2, #4
 800c0b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0b8:	f043 0202 	orr.w	r2, r3, #2
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d006      	beq.n	800c0da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f7fe f9f3 	bl	800a4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f040 80a2 	bne.w	800c22c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c0f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	461a      	mov	r2, r3
 800c106:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c10a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c10e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c110:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c112:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c116:	e841 2300 	strex	r3, r2, [r1]
 800c11a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c11c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1e2      	bne.n	800c0e8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3308      	adds	r3, #8
 800c128:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c132:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c134:	4b6e      	ldr	r3, [pc, #440]	@ (800c2f0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c136:	4013      	ands	r3, r2
 800c138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3308      	adds	r3, #8
 800c142:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c146:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c148:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c14c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c14e:	e841 2300 	strex	r3, r2, [r1]
 800c152:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1e3      	bne.n	800c122 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2220      	movs	r2, #32
 800c15e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a60      	ldr	r2, [pc, #384]	@ (800c2f4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d021      	beq.n	800c1bc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c182:	2b00      	cmp	r3, #0
 800c184:	d01a      	beq.n	800c1bc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c18e:	e853 3f00 	ldrex	r3, [r3]
 800c192:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c196:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c19a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c1a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c1ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c1b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e4      	bne.n	800c186 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d130      	bne.n	800c226 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d2:	e853 3f00 	ldrex	r3, [r3]
 800c1d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c1d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1da:	f023 0310 	bic.w	r3, r3, #16
 800c1de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c1f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1f4:	e841 2300 	strex	r3, r2, [r1]
 800c1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1e4      	bne.n	800c1ca <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	f003 0310 	and.w	r3, r3, #16
 800c20a:	2b10      	cmp	r3, #16
 800c20c:	d103      	bne.n	800c216 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2210      	movs	r2, #16
 800c214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c21c:	4619      	mov	r1, r3
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7fe f954 	bl	800a4cc <HAL_UARTEx_RxEventCallback>
 800c224:	e002      	b.n	800c22c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7f4 ff1e 	bl	8001068 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c22c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c230:	2b00      	cmp	r3, #0
 800c232:	d006      	beq.n	800c242 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c238:	f003 0320 	and.w	r3, r3, #32
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f47f aecd 	bne.w	800bfdc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c248:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c24c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c250:	2b00      	cmp	r3, #0
 800c252:	d049      	beq.n	800c2e8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c25a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c25e:	429a      	cmp	r2, r3
 800c260:	d242      	bcs.n	800c2e8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3308      	adds	r3, #8
 800c268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26c:	e853 3f00 	ldrex	r3, [r3]
 800c270:	623b      	str	r3, [r7, #32]
   return(result);
 800c272:	6a3b      	ldr	r3, [r7, #32]
 800c274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3308      	adds	r3, #8
 800c282:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c286:	633a      	str	r2, [r7, #48]	@ 0x30
 800c288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c28c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c28e:	e841 2300 	strex	r3, r2, [r1]
 800c292:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1e3      	bne.n	800c262 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a16      	ldr	r2, [pc, #88]	@ (800c2f8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c29e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	e853 3f00 	ldrex	r3, [r3]
 800c2ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f043 0320 	orr.w	r3, r3, #32
 800c2b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c2c2:	61fb      	str	r3, [r7, #28]
 800c2c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c6:	69b9      	ldr	r1, [r7, #24]
 800c2c8:	69fa      	ldr	r2, [r7, #28]
 800c2ca:	e841 2300 	strex	r3, r2, [r1]
 800c2ce:	617b      	str	r3, [r7, #20]
   return(result);
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1e4      	bne.n	800c2a0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2d6:	e007      	b.n	800c2e8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	699a      	ldr	r2, [r3, #24]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f042 0208 	orr.w	r2, r2, #8
 800c2e6:	619a      	str	r2, [r3, #24]
}
 800c2e8:	bf00      	nop
 800c2ea:	37b8      	adds	r7, #184	@ 0xb8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	effffffe 	.word	0xeffffffe
 800c2f4:	58000c00 	.word	0x58000c00
 800c2f8:	0800ba7d 	.word	0x0800ba7d

0800c2fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c304:	bf00      	nop
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c318:	bf00      	nop
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c346:	2b01      	cmp	r3, #1
 800c348:	d101      	bne.n	800c34e <HAL_UARTEx_DisableFifoMode+0x16>
 800c34a:	2302      	movs	r3, #2
 800c34c:	e027      	b.n	800c39e <HAL_UARTEx_DisableFifoMode+0x66>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2224      	movs	r2, #36	@ 0x24
 800c35a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f022 0201 	bic.w	r2, r2, #1
 800c374:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c37c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2220      	movs	r2, #32
 800c390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d101      	bne.n	800c3c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3be:	2302      	movs	r3, #2
 800c3c0:	e02d      	b.n	800c41e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2224      	movs	r2, #36	@ 0x24
 800c3ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f022 0201 	bic.w	r2, r2, #1
 800c3e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f850 	bl	800c4a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2220      	movs	r2, #32
 800c410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c436:	2b01      	cmp	r3, #1
 800c438:	d101      	bne.n	800c43e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c43a:	2302      	movs	r3, #2
 800c43c:	e02d      	b.n	800c49a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2224      	movs	r2, #36	@ 0x24
 800c44a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f022 0201 	bic.w	r2, r2, #1
 800c464:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	430a      	orrs	r2, r1
 800c478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f812 	bl	800c4a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2220      	movs	r2, #32
 800c48c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
	...

0800c4a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d108      	bne.n	800c4c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4c4:	e031      	b.n	800c52a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4c6:	2310      	movs	r3, #16
 800c4c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c4ca:	2310      	movs	r3, #16
 800c4cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	0e5b      	lsrs	r3, r3, #25
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	f003 0307 	and.w	r3, r3, #7
 800c4dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	0f5b      	lsrs	r3, r3, #29
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	f003 0307 	and.w	r3, r3, #7
 800c4ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	7b3a      	ldrb	r2, [r7, #12]
 800c4f2:	4911      	ldr	r1, [pc, #68]	@ (800c538 <UARTEx_SetNbDataToProcess+0x94>)
 800c4f4:	5c8a      	ldrb	r2, [r1, r2]
 800c4f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4fa:	7b3a      	ldrb	r2, [r7, #12]
 800c4fc:	490f      	ldr	r1, [pc, #60]	@ (800c53c <UARTEx_SetNbDataToProcess+0x98>)
 800c4fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c500:	fb93 f3f2 	sdiv	r3, r3, r2
 800c504:	b29a      	uxth	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c50c:	7bfb      	ldrb	r3, [r7, #15]
 800c50e:	7b7a      	ldrb	r2, [r7, #13]
 800c510:	4909      	ldr	r1, [pc, #36]	@ (800c538 <UARTEx_SetNbDataToProcess+0x94>)
 800c512:	5c8a      	ldrb	r2, [r1, r2]
 800c514:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c518:	7b7a      	ldrb	r2, [r7, #13]
 800c51a:	4908      	ldr	r1, [pc, #32]	@ (800c53c <UARTEx_SetNbDataToProcess+0x98>)
 800c51c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c51e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c522:	b29a      	uxth	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c52a:	bf00      	nop
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	08012a70 	.word	0x08012a70
 800c53c:	08012a78 	.word	0x08012a78

0800c540 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c540:	b084      	sub	sp, #16
 800c542:	b480      	push	{r7}
 800c544:	b085      	sub	sp, #20
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	f107 001c 	add.w	r0, r7, #28
 800c54e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c556:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c558:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c55a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800c55e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800c562:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800c566:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	4b07      	ldr	r3, [pc, #28]	@ (800c590 <SDMMC_Init+0x50>)
 800c574:	4013      	ands	r3, r2
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	431a      	orrs	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	b004      	add	sp, #16
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	ffc02c00 	.word	0xffc02c00

0800c594 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	370c      	adds	r7, #12
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr

0800c5ae <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c5ae:	b480      	push	{r7}
 800c5b0:	b083      	sub	sp, #12
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f043 0203 	orr.w	r2, r3, #3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b083      	sub	sp, #12
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 0303 	and.w	r3, r3, #3
}
 800c602:	4618      	mov	r0, r3
 800c604:	370c      	adds	r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
	...

0800c610 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c61a:	2300      	movs	r3, #0
 800c61c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c62e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c634:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c63a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4313      	orrs	r3, r2
 800c640:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68da      	ldr	r2, [r3, #12]
 800c646:	4b06      	ldr	r3, [pc, #24]	@ (800c660 <SDMMC_SendCommand+0x50>)
 800c648:	4013      	ands	r3, r2
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	431a      	orrs	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	fffee0c0 	.word	0xfffee0c0

0800c664 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	b2db      	uxtb	r3, r3
}
 800c672:	4618      	mov	r0, r3
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c67e:	b480      	push	{r7}
 800c680:	b085      	sub	sp, #20
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	3314      	adds	r3, #20
 800c68c:	461a      	mov	r2, r3
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	4413      	add	r3, r2
 800c692:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	685a      	ldr	r2, [r3, #4]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c6ca:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c6d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c6d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0

}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b088      	sub	sp, #32
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c70a:	2310      	movs	r3, #16
 800c70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c70e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c714:	2300      	movs	r3, #0
 800c716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c71c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c71e:	f107 0308 	add.w	r3, r7, #8
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff ff73 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c72a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c72e:	2110      	movs	r1, #16
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fa5f 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800c736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c738:	69fb      	ldr	r3, [r7, #28]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3720      	adds	r7, #32
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b088      	sub	sp, #32
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c750:	2311      	movs	r3, #17
 800c752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c75a:	2300      	movs	r3, #0
 800c75c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c75e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c764:	f107 0308 	add.w	r3, r7, #8
 800c768:	4619      	mov	r1, r3
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7ff ff50 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c770:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c774:	2111      	movs	r1, #17
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fa3c 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800c77c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c77e:	69fb      	ldr	r3, [r7, #28]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3720      	adds	r7, #32
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b088      	sub	sp, #32
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c796:	2312      	movs	r3, #18
 800c798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c79a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c79e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c7a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7aa:	f107 0308 	add.w	r3, r7, #8
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff ff2d 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c7b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7ba:	2112      	movs	r1, #18
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fa19 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800c7c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7c4:	69fb      	ldr	r3, [r7, #28]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3720      	adds	r7, #32
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b088      	sub	sp, #32
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c7dc:	2318      	movs	r3, #24
 800c7de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c7e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c7ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7f0:	f107 0308 	add.w	r3, r7, #8
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7ff ff0a 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c7fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c800:	2118      	movs	r1, #24
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f9f6 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800c808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c80a:	69fb      	ldr	r3, [r7, #28]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3720      	adds	r7, #32
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b088      	sub	sp, #32
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c822:	2319      	movs	r3, #25
 800c824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c826:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c82a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c82c:	2300      	movs	r3, #0
 800c82e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c834:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c836:	f107 0308 	add.w	r3, r7, #8
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff fee7 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c842:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c846:	2119      	movs	r1, #25
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 f9d3 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800c84e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c850:	69fb      	ldr	r3, [r7, #28]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3720      	adds	r7, #32
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
	...

0800c85c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c864:	2300      	movs	r3, #0
 800c866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c868:	230c      	movs	r3, #12
 800c86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c86c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c872:	2300      	movs	r3, #0
 800c874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c87a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c894:	f107 0308 	add.w	r3, r7, #8
 800c898:	4619      	mov	r1, r3
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7ff feb8 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c8a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c8d0 <SDMMC_CmdStopTransfer+0x74>)
 800c8a2:	210c      	movs	r1, #12
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f9a5 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800c8aa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8be:	d101      	bne.n	800c8c4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c8c4:	69fb      	ldr	r3, [r7, #28]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3720      	adds	r7, #32
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	05f5e100 	.word	0x05f5e100

0800c8d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c8e2:	2307      	movs	r3, #7
 800c8e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c8ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c8f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8f6:	f107 0308 	add.w	r3, r7, #8
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7ff fe87 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c902:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c906:	2107      	movs	r1, #7
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f973 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800c90e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c910:	69fb      	ldr	r3, [r7, #28]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3720      	adds	r7, #32
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b088      	sub	sp, #32
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c922:	2300      	movs	r3, #0
 800c924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c926:	2300      	movs	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c92a:	2300      	movs	r3, #0
 800c92c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c92e:	2300      	movs	r3, #0
 800c930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c938:	f107 0308 	add.w	r3, r7, #8
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7ff fe66 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fb97 	bl	800d078 <SDMMC_GetCmdError>
 800c94a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c94c:	69fb      	ldr	r3, [r7, #28]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3720      	adds	r7, #32
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b088      	sub	sp, #32
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c95e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c964:	2308      	movs	r3, #8
 800c966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c96c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c96e:	2300      	movs	r3, #0
 800c970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c978:	f107 0308 	add.w	r3, r7, #8
 800c97c:	4619      	mov	r1, r3
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff fe46 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fb29 	bl	800cfdc <SDMMC_GetCmdResp7>
 800c98a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c98c:	69fb      	ldr	r3, [r7, #28]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3720      	adds	r7, #32
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b088      	sub	sp, #32
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c9a4:	2337      	movs	r3, #55	@ 0x37
 800c9a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c9ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9b8:	f107 0308 	add.w	r3, r7, #8
 800c9bc:	4619      	mov	r1, r3
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7ff fe26 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c9c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9c8:	2137      	movs	r1, #55	@ 0x37
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f912 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800c9d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9d2:	69fb      	ldr	r3, [r7, #28]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3720      	adds	r7, #32
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b088      	sub	sp, #32
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c9ea:	2329      	movs	r3, #41	@ 0x29
 800c9ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c9f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9fe:	f107 0308 	add.w	r3, r7, #8
 800ca02:	4619      	mov	r1, r3
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f7ff fe03 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fa2e 	bl	800ce6c <SDMMC_GetCmdResp3>
 800ca10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca12:	69fb      	ldr	r3, [r7, #28]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3720      	adds	r7, #32
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ca2a:	2306      	movs	r3, #6
 800ca2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca34:	2300      	movs	r3, #0
 800ca36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca3e:	f107 0308 	add.w	r3, r7, #8
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7ff fde3 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ca4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca4e:	2106      	movs	r1, #6
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f8cf 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800ca56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca58:	69fb      	ldr	r3, [r7, #28]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3720      	adds	r7, #32
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b088      	sub	sp, #32
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ca6e:	2333      	movs	r3, #51	@ 0x33
 800ca70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca82:	f107 0308 	add.w	r3, r7, #8
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff fdc1 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ca8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca92:	2133      	movs	r1, #51	@ 0x33
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f8ad 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800ca9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca9c:	69fb      	ldr	r3, [r7, #28]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3720      	adds	r7, #32
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b088      	sub	sp, #32
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800caae:	2300      	movs	r3, #0
 800cab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cab2:	2302      	movs	r3, #2
 800cab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cab6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800caba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cabc:	2300      	movs	r3, #0
 800cabe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cac4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cac6:	f107 0308 	add.w	r3, r7, #8
 800caca:	4619      	mov	r1, r3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff fd9f 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 f980 	bl	800cdd8 <SDMMC_GetCmdResp2>
 800cad8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cada:	69fb      	ldr	r3, [r7, #28]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3720      	adds	r7, #32
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b088      	sub	sp, #32
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800caf2:	2309      	movs	r3, #9
 800caf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800caf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cafa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cafc:	2300      	movs	r3, #0
 800cafe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb06:	f107 0308 	add.w	r3, r7, #8
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff fd7f 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f960 	bl	800cdd8 <SDMMC_GetCmdResp2>
 800cb18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb1a:	69fb      	ldr	r3, [r7, #28]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3720      	adds	r7, #32
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b088      	sub	sp, #32
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cb32:	2303      	movs	r3, #3
 800cb34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb46:	f107 0308 	add.w	r3, r7, #8
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff fd5f 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	2103      	movs	r1, #3
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 f9c8 	bl	800ceec <SDMMC_GetCmdResp6>
 800cb5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb5e:	69fb      	ldr	r3, [r7, #28]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3720      	adds	r7, #32
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b088      	sub	sp, #32
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cb76:	230d      	movs	r3, #13
 800cb78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb80:	2300      	movs	r3, #0
 800cb82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb8a:	f107 0308 	add.w	r3, r7, #8
 800cb8e:	4619      	mov	r1, r3
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f7ff fd3d 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cb96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb9a:	210d      	movs	r1, #13
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f829 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800cba2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cba4:	69fb      	ldr	r3, [r7, #28]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3720      	adds	r7, #32
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b088      	sub	sp, #32
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cbba:	230d      	movs	r3, #13
 800cbbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbce:	f107 0308 	add.w	r3, r7, #8
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff fd1b 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cbda:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbde:	210d      	movs	r1, #13
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f807 	bl	800cbf4 <SDMMC_GetCmdResp1>
 800cbe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbe8:	69fb      	ldr	r3, [r7, #28]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3720      	adds	r7, #32
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
	...

0800cbf4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b088      	sub	sp, #32
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc02:	4b70      	ldr	r3, [pc, #448]	@ (800cdc4 <SDMMC_GetCmdResp1+0x1d0>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a70      	ldr	r2, [pc, #448]	@ (800cdc8 <SDMMC_GetCmdResp1+0x1d4>)
 800cc08:	fba2 2303 	umull	r2, r3, r2, r3
 800cc0c:	0a5a      	lsrs	r2, r3, #9
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	fb02 f303 	mul.w	r3, r2, r3
 800cc14:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	1e5a      	subs	r2, r3, #1
 800cc1a:	61fa      	str	r2, [r7, #28]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc24:	e0c9      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc2a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cc2c:	69ba      	ldr	r2, [r7, #24]
 800cc2e:	4b67      	ldr	r3, [pc, #412]	@ (800cdcc <SDMMC_GetCmdResp1+0x1d8>)
 800cc30:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d0ef      	beq.n	800cc16 <SDMMC_GetCmdResp1+0x22>
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1ea      	bne.n	800cc16 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc44:	f003 0304 	and.w	r3, r3, #4
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2204      	movs	r2, #4
 800cc50:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc52:	2304      	movs	r3, #4
 800cc54:	e0b1      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc5a:	f003 0301 	and.w	r3, r3, #1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d004      	beq.n	800cc6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2201      	movs	r2, #1
 800cc66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e0a6      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	4a58      	ldr	r2, [pc, #352]	@ (800cdd0 <SDMMC_GetCmdResp1+0x1dc>)
 800cc70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f7ff fcf6 	bl	800c664 <SDMMC_GetCommandResponse>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	7afb      	ldrb	r3, [r7, #11]
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d001      	beq.n	800cc86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e099      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cc86:	2100      	movs	r1, #0
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f7ff fcf8 	bl	800c67e <SDMMC_GetResponse>
 800cc8e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	4b50      	ldr	r3, [pc, #320]	@ (800cdd4 <SDMMC_GetCmdResp1+0x1e0>)
 800cc94:	4013      	ands	r3, r2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e08d      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	da02      	bge.n	800ccaa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cca8:	e087      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ccb4:	2340      	movs	r3, #64	@ 0x40
 800ccb6:	e080      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d001      	beq.n	800ccc6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ccc2:	2380      	movs	r3, #128	@ 0x80
 800ccc4:	e079      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ccd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ccd4:	e071      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cce4:	e069      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d002      	beq.n	800ccf6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ccf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccf4:	e061      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd04:	e059      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd14:	e051      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d002      	beq.n	800cd26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd24:	e049      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cd34:	e041      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd44:	e039      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cd50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cd54:	e031      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cd60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cd64:	e029      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cd70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cd74:	e021      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cd80:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cd84:	e019      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cd90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cd94:	e011      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cda0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cda4:	e009      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	f003 0308 	and.w	r3, r3, #8
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cdb0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cdb4:	e001      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3720      	adds	r7, #32
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	24000000 	.word	0x24000000
 800cdc8:	10624dd3 	.word	0x10624dd3
 800cdcc:	00200045 	.word	0x00200045
 800cdd0:	002000c5 	.word	0x002000c5
 800cdd4:	fdffe008 	.word	0xfdffe008

0800cdd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cde0:	4b1f      	ldr	r3, [pc, #124]	@ (800ce60 <SDMMC_GetCmdResp2+0x88>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a1f      	ldr	r2, [pc, #124]	@ (800ce64 <SDMMC_GetCmdResp2+0x8c>)
 800cde6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdea:	0a5b      	lsrs	r3, r3, #9
 800cdec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdf0:	fb02 f303 	mul.w	r3, r2, r3
 800cdf4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	1e5a      	subs	r2, r3, #1
 800cdfa:	60fa      	str	r2, [r7, #12]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d102      	bne.n	800ce06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce04:	e026      	b.n	800ce54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce0a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d0ef      	beq.n	800cdf6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1ea      	bne.n	800cdf6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce24:	f003 0304 	and.w	r3, r3, #4
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d004      	beq.n	800ce36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2204      	movs	r2, #4
 800ce30:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce32:	2304      	movs	r3, #4
 800ce34:	e00e      	b.n	800ce54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d004      	beq.n	800ce4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2201      	movs	r2, #1
 800ce46:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e003      	b.n	800ce54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a06      	ldr	r2, [pc, #24]	@ (800ce68 <SDMMC_GetCmdResp2+0x90>)
 800ce50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	24000000 	.word	0x24000000
 800ce64:	10624dd3 	.word	0x10624dd3
 800ce68:	002000c5 	.word	0x002000c5

0800ce6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ce74:	4b1a      	ldr	r3, [pc, #104]	@ (800cee0 <SDMMC_GetCmdResp3+0x74>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a1a      	ldr	r2, [pc, #104]	@ (800cee4 <SDMMC_GetCmdResp3+0x78>)
 800ce7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce7e:	0a5b      	lsrs	r3, r3, #9
 800ce80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce84:	fb02 f303 	mul.w	r3, r2, r3
 800ce88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	1e5a      	subs	r2, r3, #1
 800ce8e:	60fa      	str	r2, [r7, #12]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d102      	bne.n	800ce9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce98:	e01b      	b.n	800ced2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d0ef      	beq.n	800ce8a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1ea      	bne.n	800ce8a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceb8:	f003 0304 	and.w	r3, r3, #4
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d004      	beq.n	800ceca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2204      	movs	r2, #4
 800cec4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cec6:	2304      	movs	r3, #4
 800cec8:	e003      	b.n	800ced2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a06      	ldr	r2, [pc, #24]	@ (800cee8 <SDMMC_GetCmdResp3+0x7c>)
 800cece:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	24000000 	.word	0x24000000
 800cee4:	10624dd3 	.word	0x10624dd3
 800cee8:	002000c5 	.word	0x002000c5

0800ceec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b088      	sub	sp, #32
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	460b      	mov	r3, r1
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cefa:	4b35      	ldr	r3, [pc, #212]	@ (800cfd0 <SDMMC_GetCmdResp6+0xe4>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a35      	ldr	r2, [pc, #212]	@ (800cfd4 <SDMMC_GetCmdResp6+0xe8>)
 800cf00:	fba2 2303 	umull	r2, r3, r2, r3
 800cf04:	0a5b      	lsrs	r3, r3, #9
 800cf06:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf0a:	fb02 f303 	mul.w	r3, r2, r3
 800cf0e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	1e5a      	subs	r2, r3, #1
 800cf14:	61fa      	str	r2, [r7, #28]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d102      	bne.n	800cf20 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf1e:	e052      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf24:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d0ef      	beq.n	800cf10 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1ea      	bne.n	800cf10 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf3e:	f003 0304 	and.w	r3, r3, #4
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d004      	beq.n	800cf50 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2204      	movs	r2, #4
 800cf4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf4c:	2304      	movs	r3, #4
 800cf4e:	e03a      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf54:	f003 0301 	and.w	r3, r3, #1
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e02f      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff fb7c 	bl	800c664 <SDMMC_GetCommandResponse>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	461a      	mov	r2, r3
 800cf70:	7afb      	ldrb	r3, [r7, #11]
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d001      	beq.n	800cf7a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf76:	2301      	movs	r3, #1
 800cf78:	e025      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4a16      	ldr	r2, [pc, #88]	@ (800cfd8 <SDMMC_GetCmdResp6+0xec>)
 800cf7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf80:	2100      	movs	r1, #0
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f7ff fb7b 	bl	800c67e <SDMMC_GetResponse>
 800cf88:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d106      	bne.n	800cfa2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	0c1b      	lsrs	r3, r3, #16
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	e011      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cfb0:	e009      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfc0:	e001      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cfc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3720      	adds	r7, #32
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	24000000 	.word	0x24000000
 800cfd4:	10624dd3 	.word	0x10624dd3
 800cfd8:	002000c5 	.word	0x002000c5

0800cfdc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b085      	sub	sp, #20
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cfe4:	4b22      	ldr	r3, [pc, #136]	@ (800d070 <SDMMC_GetCmdResp7+0x94>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a22      	ldr	r2, [pc, #136]	@ (800d074 <SDMMC_GetCmdResp7+0x98>)
 800cfea:	fba2 2303 	umull	r2, r3, r2, r3
 800cfee:	0a5b      	lsrs	r3, r3, #9
 800cff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cff4:	fb02 f303 	mul.w	r3, r2, r3
 800cff8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	1e5a      	subs	r2, r3, #1
 800cffe:	60fa      	str	r2, [r7, #12]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d102      	bne.n	800d00a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d004:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d008:	e02c      	b.n	800d064 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d00e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d016:	2b00      	cmp	r3, #0
 800d018:	d0ef      	beq.n	800cffa <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1ea      	bne.n	800cffa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d028:	f003 0304 	and.w	r3, r3, #4
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d004      	beq.n	800d03a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2204      	movs	r2, #4
 800d034:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d036:	2304      	movs	r3, #4
 800d038:	e014      	b.n	800d064 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d03e:	f003 0301 	and.w	r3, r3, #1
 800d042:	2b00      	cmp	r3, #0
 800d044:	d004      	beq.n	800d050 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d04c:	2301      	movs	r3, #1
 800d04e:	e009      	b.n	800d064 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2240      	movs	r2, #64	@ 0x40
 800d060:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d062:	2300      	movs	r3, #0

}
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr
 800d070:	24000000 	.word	0x24000000
 800d074:	10624dd3 	.word	0x10624dd3

0800d078 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d078:	b480      	push	{r7}
 800d07a:	b085      	sub	sp, #20
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d080:	4b11      	ldr	r3, [pc, #68]	@ (800d0c8 <SDMMC_GetCmdError+0x50>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a11      	ldr	r2, [pc, #68]	@ (800d0cc <SDMMC_GetCmdError+0x54>)
 800d086:	fba2 2303 	umull	r2, r3, r2, r3
 800d08a:	0a5b      	lsrs	r3, r3, #9
 800d08c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d090:	fb02 f303 	mul.w	r3, r2, r3
 800d094:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	1e5a      	subs	r2, r3, #1
 800d09a:	60fa      	str	r2, [r7, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d102      	bne.n	800d0a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d0a4:	e009      	b.n	800d0ba <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d0f1      	beq.n	800d096 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a06      	ldr	r2, [pc, #24]	@ (800d0d0 <SDMMC_GetCmdError+0x58>)
 800d0b6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	24000000 	.word	0x24000000
 800d0cc:	10624dd3 	.word	0x10624dd3
 800d0d0:	002000c5 	.word	0x002000c5

0800d0d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d0d8:	4904      	ldr	r1, [pc, #16]	@ (800d0ec <MX_FATFS_Init+0x18>)
 800d0da:	4805      	ldr	r0, [pc, #20]	@ (800d0f0 <MX_FATFS_Init+0x1c>)
 800d0dc:	f000 f9e4 	bl	800d4a8 <FATFS_LinkDriver>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	4b03      	ldr	r3, [pc, #12]	@ (800d0f4 <MX_FATFS_Init+0x20>)
 800d0e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d0e8:	bf00      	nop
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	24000ca8 	.word	0x24000ca8
 800d0f0:	08012a80 	.word	0x08012a80
 800d0f4:	24000ca4 	.word	0x24000ca4

0800d0f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d102:	f000 f879 	bl	800d1f8 <BSP_SD_IsDetected>
 800d106:	4603      	mov	r3, r0
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d001      	beq.n	800d110 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d10c:	2302      	movs	r3, #2
 800d10e:	e012      	b.n	800d136 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d110:	480b      	ldr	r0, [pc, #44]	@ (800d140 <BSP_SD_Init+0x48>)
 800d112:	f7fa fd07 	bl	8007b24 <HAL_SD_Init>
 800d116:	4603      	mov	r3, r0
 800d118:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d11a:	79fb      	ldrb	r3, [r7, #7]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d109      	bne.n	800d134 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d120:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d124:	4806      	ldr	r0, [pc, #24]	@ (800d140 <BSP_SD_Init+0x48>)
 800d126:	f7fb fbc3 	bl	80088b0 <HAL_SD_ConfigWideBusOperation>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d134:	79fb      	ldrb	r3, [r7, #7]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	24000570 	.word	0x24000570

0800d144 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b088      	sub	sp, #32
 800d148:	af02      	add	r7, sp, #8
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	68f9      	ldr	r1, [r7, #12]
 800d160:	4806      	ldr	r0, [pc, #24]	@ (800d17c <BSP_SD_ReadBlocks+0x38>)
 800d162:	f7fa fdff 	bl	8007d64 <HAL_SD_ReadBlocks>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d001      	beq.n	800d170 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d170:	7dfb      	ldrb	r3, [r7, #23]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	24000570 	.word	0x24000570

0800d180 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b088      	sub	sp, #32
 800d184:	af02      	add	r7, sp, #8
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
 800d18c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	68f9      	ldr	r1, [r7, #12]
 800d19c:	4806      	ldr	r0, [pc, #24]	@ (800d1b8 <BSP_SD_WriteBlocks+0x38>)
 800d19e:	f7fa ff6b 	bl	8008078 <HAL_SD_WriteBlocks>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d1ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3718      	adds	r7, #24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	24000570 	.word	0x24000570

0800d1bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d1c0:	4805      	ldr	r0, [pc, #20]	@ (800d1d8 <BSP_SD_GetCardState+0x1c>)
 800d1c2:	f7fb fc87 	bl	8008ad4 <HAL_SD_GetCardState>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b04      	cmp	r3, #4
 800d1ca:	bf14      	ite	ne
 800d1cc:	2301      	movne	r3, #1
 800d1ce:	2300      	moveq	r3, #0
 800d1d0:	b2db      	uxtb	r3, r3
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	24000570 	.word	0x24000570

0800d1dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d1e4:	6879      	ldr	r1, [r7, #4]
 800d1e6:	4803      	ldr	r0, [pc, #12]	@ (800d1f4 <BSP_SD_GetCardInfo+0x18>)
 800d1e8:	f7fb fb36 	bl	8008858 <HAL_SD_GetCardInfo>
}
 800d1ec:	bf00      	nop
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	24000570 	.word	0x24000570

0800d1f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d1fe:	2301      	movs	r3, #1
 800d200:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d202:	f000 f80b 	bl	800d21c <BSP_PlatformIsDetected>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d101      	bne.n	800d210 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d20c:	2300      	movs	r3, #0
 800d20e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d210:	79fb      	ldrb	r3, [r7, #7]
 800d212:	b2db      	uxtb	r3, r3
}
 800d214:	4618      	mov	r0, r3
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d222:	2301      	movs	r3, #1
 800d224:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d226:	2180      	movs	r1, #128	@ 0x80
 800d228:	4806      	ldr	r0, [pc, #24]	@ (800d244 <BSP_PlatformIsDetected+0x28>)
 800d22a:	f7f6 fcef 	bl	8003c0c <HAL_GPIO_ReadPin>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d234:	2300      	movs	r3, #0
 800d236:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d238:	79fb      	ldrb	r3, [r7, #7]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	58020800 	.word	0x58020800

0800d248 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	4603      	mov	r3, r0
 800d250:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d252:	4b0b      	ldr	r3, [pc, #44]	@ (800d280 <SD_CheckStatus+0x38>)
 800d254:	2201      	movs	r2, #1
 800d256:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d258:	f7ff ffb0 	bl	800d1bc <BSP_SD_GetCardState>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d107      	bne.n	800d272 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d262:	4b07      	ldr	r3, [pc, #28]	@ (800d280 <SD_CheckStatus+0x38>)
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	b2db      	uxtb	r3, r3
 800d268:	f023 0301 	bic.w	r3, r3, #1
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	4b04      	ldr	r3, [pc, #16]	@ (800d280 <SD_CheckStatus+0x38>)
 800d270:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d272:	4b03      	ldr	r3, [pc, #12]	@ (800d280 <SD_CheckStatus+0x38>)
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	b2db      	uxtb	r3, r3
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	24000015 	.word	0x24000015

0800d284 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4603      	mov	r3, r0
 800d28c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d28e:	4b0b      	ldr	r3, [pc, #44]	@ (800d2bc <SD_initialize+0x38>)
 800d290:	2201      	movs	r2, #1
 800d292:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d294:	f7ff ff30 	bl	800d0f8 <BSP_SD_Init>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d107      	bne.n	800d2ae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d29e:	79fb      	ldrb	r3, [r7, #7]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff ffd1 	bl	800d248 <SD_CheckStatus>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	4b04      	ldr	r3, [pc, #16]	@ (800d2bc <SD_initialize+0x38>)
 800d2ac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d2ae:	4b03      	ldr	r3, [pc, #12]	@ (800d2bc <SD_initialize+0x38>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	b2db      	uxtb	r3, r3
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	24000015 	.word	0x24000015

0800d2c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d2ca:	79fb      	ldrb	r3, [r7, #7]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7ff ffbb 	bl	800d248 <SD_CheckStatus>
 800d2d2:	4603      	mov	r3, r0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60b9      	str	r1, [r7, #8]
 800d2e4:	607a      	str	r2, [r7, #4]
 800d2e6:	603b      	str	r3, [r7, #0]
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d2f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	6879      	ldr	r1, [r7, #4]
 800d2f8:	68b8      	ldr	r0, [r7, #8]
 800d2fa:	f7ff ff23 	bl	800d144 <BSP_SD_ReadBlocks>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d107      	bne.n	800d314 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d304:	bf00      	nop
 800d306:	f7ff ff59 	bl	800d1bc <BSP_SD_GetCardState>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1fa      	bne.n	800d306 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d314:	7dfb      	ldrb	r3, [r7, #23]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b086      	sub	sp, #24
 800d322:	af00      	add	r7, sp, #0
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
 800d328:	603b      	str	r3, [r7, #0]
 800d32a:	4603      	mov	r3, r0
 800d32c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	68b8      	ldr	r0, [r7, #8]
 800d33c:	f7ff ff20 	bl	800d180 <BSP_SD_WriteBlocks>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d107      	bne.n	800d356 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d346:	bf00      	nop
 800d348:	f7ff ff38 	bl	800d1bc <BSP_SD_GetCardState>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d1fa      	bne.n	800d348 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d356:	7dfb      	ldrb	r3, [r7, #23]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b08c      	sub	sp, #48	@ 0x30
 800d364:	af00      	add	r7, sp, #0
 800d366:	4603      	mov	r3, r0
 800d368:	603a      	str	r2, [r7, #0]
 800d36a:	71fb      	strb	r3, [r7, #7]
 800d36c:	460b      	mov	r3, r1
 800d36e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d376:	4b25      	ldr	r3, [pc, #148]	@ (800d40c <SD_ioctl+0xac>)
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	f003 0301 	and.w	r3, r3, #1
 800d380:	2b00      	cmp	r3, #0
 800d382:	d001      	beq.n	800d388 <SD_ioctl+0x28>
 800d384:	2303      	movs	r3, #3
 800d386:	e03c      	b.n	800d402 <SD_ioctl+0xa2>

  switch (cmd)
 800d388:	79bb      	ldrb	r3, [r7, #6]
 800d38a:	2b03      	cmp	r3, #3
 800d38c:	d834      	bhi.n	800d3f8 <SD_ioctl+0x98>
 800d38e:	a201      	add	r2, pc, #4	@ (adr r2, 800d394 <SD_ioctl+0x34>)
 800d390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d394:	0800d3a5 	.word	0x0800d3a5
 800d398:	0800d3ad 	.word	0x0800d3ad
 800d39c:	0800d3c5 	.word	0x0800d3c5
 800d3a0:	0800d3df 	.word	0x0800d3df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3aa:	e028      	b.n	800d3fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3ac:	f107 0308 	add.w	r3, r7, #8
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff ff13 	bl	800d1dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d3b6:	6a3a      	ldr	r2, [r7, #32]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3c2:	e01c      	b.n	800d3fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3c4:	f107 0308 	add.w	r3, r7, #8
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff ff07 	bl	800d1dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3dc:	e00f      	b.n	800d3fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3de:	f107 0308 	add.w	r3, r7, #8
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7ff fefa 	bl	800d1dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ea:	0a5a      	lsrs	r2, r3, #9
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3f6:	e002      	b.n	800d3fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d3f8:	2304      	movs	r3, #4
 800d3fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d3fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d402:	4618      	mov	r0, r3
 800d404:	3730      	adds	r7, #48	@ 0x30
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	24000015 	.word	0x24000015

0800d410 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d410:	b480      	push	{r7}
 800d412:	b087      	sub	sp, #28
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	4613      	mov	r3, r2
 800d41c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d41e:	2301      	movs	r3, #1
 800d420:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d422:	2300      	movs	r3, #0
 800d424:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d426:	4b1f      	ldr	r3, [pc, #124]	@ (800d4a4 <FATFS_LinkDriverEx+0x94>)
 800d428:	7a5b      	ldrb	r3, [r3, #9]
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d131      	bne.n	800d494 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d430:	4b1c      	ldr	r3, [pc, #112]	@ (800d4a4 <FATFS_LinkDriverEx+0x94>)
 800d432:	7a5b      	ldrb	r3, [r3, #9]
 800d434:	b2db      	uxtb	r3, r3
 800d436:	461a      	mov	r2, r3
 800d438:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a4 <FATFS_LinkDriverEx+0x94>)
 800d43a:	2100      	movs	r1, #0
 800d43c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d43e:	4b19      	ldr	r3, [pc, #100]	@ (800d4a4 <FATFS_LinkDriverEx+0x94>)
 800d440:	7a5b      	ldrb	r3, [r3, #9]
 800d442:	b2db      	uxtb	r3, r3
 800d444:	4a17      	ldr	r2, [pc, #92]	@ (800d4a4 <FATFS_LinkDriverEx+0x94>)
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4413      	add	r3, r2
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d44e:	4b15      	ldr	r3, [pc, #84]	@ (800d4a4 <FATFS_LinkDriverEx+0x94>)
 800d450:	7a5b      	ldrb	r3, [r3, #9]
 800d452:	b2db      	uxtb	r3, r3
 800d454:	461a      	mov	r2, r3
 800d456:	4b13      	ldr	r3, [pc, #76]	@ (800d4a4 <FATFS_LinkDriverEx+0x94>)
 800d458:	4413      	add	r3, r2
 800d45a:	79fa      	ldrb	r2, [r7, #7]
 800d45c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d45e:	4b11      	ldr	r3, [pc, #68]	@ (800d4a4 <FATFS_LinkDriverEx+0x94>)
 800d460:	7a5b      	ldrb	r3, [r3, #9]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	1c5a      	adds	r2, r3, #1
 800d466:	b2d1      	uxtb	r1, r2
 800d468:	4a0e      	ldr	r2, [pc, #56]	@ (800d4a4 <FATFS_LinkDriverEx+0x94>)
 800d46a:	7251      	strb	r1, [r2, #9]
 800d46c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d46e:	7dbb      	ldrb	r3, [r7, #22]
 800d470:	3330      	adds	r3, #48	@ 0x30
 800d472:	b2da      	uxtb	r2, r3
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	3301      	adds	r3, #1
 800d47c:	223a      	movs	r2, #58	@ 0x3a
 800d47e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	3302      	adds	r3, #2
 800d484:	222f      	movs	r2, #47	@ 0x2f
 800d486:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	3303      	adds	r3, #3
 800d48c:	2200      	movs	r2, #0
 800d48e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d490:	2300      	movs	r3, #0
 800d492:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d494:	7dfb      	ldrb	r3, [r7, #23]
}
 800d496:	4618      	mov	r0, r3
 800d498:	371c      	adds	r7, #28
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	24000cac 	.word	0x24000cac

0800d4a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7ff ffaa 	bl	800d410 <FATFS_LinkDriverEx>
 800d4bc:	4603      	mov	r3, r0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <__cvt>:
 800d4c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4c8:	ed2d 8b02 	vpush	{d8}
 800d4cc:	eeb0 8b40 	vmov.f64	d8, d0
 800d4d0:	b085      	sub	sp, #20
 800d4d2:	4617      	mov	r7, r2
 800d4d4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d4d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d4d8:	ee18 2a90 	vmov	r2, s17
 800d4dc:	f025 0520 	bic.w	r5, r5, #32
 800d4e0:	2a00      	cmp	r2, #0
 800d4e2:	bfb6      	itet	lt
 800d4e4:	222d      	movlt	r2, #45	@ 0x2d
 800d4e6:	2200      	movge	r2, #0
 800d4e8:	eeb1 8b40 	vneglt.f64	d8, d0
 800d4ec:	2d46      	cmp	r5, #70	@ 0x46
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	701a      	strb	r2, [r3, #0]
 800d4f2:	d004      	beq.n	800d4fe <__cvt+0x38>
 800d4f4:	2d45      	cmp	r5, #69	@ 0x45
 800d4f6:	d100      	bne.n	800d4fa <__cvt+0x34>
 800d4f8:	3401      	adds	r4, #1
 800d4fa:	2102      	movs	r1, #2
 800d4fc:	e000      	b.n	800d500 <__cvt+0x3a>
 800d4fe:	2103      	movs	r1, #3
 800d500:	ab03      	add	r3, sp, #12
 800d502:	9301      	str	r3, [sp, #4]
 800d504:	ab02      	add	r3, sp, #8
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	4622      	mov	r2, r4
 800d50a:	4633      	mov	r3, r6
 800d50c:	eeb0 0b48 	vmov.f64	d0, d8
 800d510:	f002 f826 	bl	800f560 <_dtoa_r>
 800d514:	2d47      	cmp	r5, #71	@ 0x47
 800d516:	d114      	bne.n	800d542 <__cvt+0x7c>
 800d518:	07fb      	lsls	r3, r7, #31
 800d51a:	d50a      	bpl.n	800d532 <__cvt+0x6c>
 800d51c:	1902      	adds	r2, r0, r4
 800d51e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d526:	bf08      	it	eq
 800d528:	9203      	streq	r2, [sp, #12]
 800d52a:	2130      	movs	r1, #48	@ 0x30
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	4293      	cmp	r3, r2
 800d530:	d319      	bcc.n	800d566 <__cvt+0xa0>
 800d532:	9b03      	ldr	r3, [sp, #12]
 800d534:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d536:	1a1b      	subs	r3, r3, r0
 800d538:	6013      	str	r3, [r2, #0]
 800d53a:	b005      	add	sp, #20
 800d53c:	ecbd 8b02 	vpop	{d8}
 800d540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d542:	2d46      	cmp	r5, #70	@ 0x46
 800d544:	eb00 0204 	add.w	r2, r0, r4
 800d548:	d1e9      	bne.n	800d51e <__cvt+0x58>
 800d54a:	7803      	ldrb	r3, [r0, #0]
 800d54c:	2b30      	cmp	r3, #48	@ 0x30
 800d54e:	d107      	bne.n	800d560 <__cvt+0x9a>
 800d550:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d558:	bf1c      	itt	ne
 800d55a:	f1c4 0401 	rsbne	r4, r4, #1
 800d55e:	6034      	strne	r4, [r6, #0]
 800d560:	6833      	ldr	r3, [r6, #0]
 800d562:	441a      	add	r2, r3
 800d564:	e7db      	b.n	800d51e <__cvt+0x58>
 800d566:	1c5c      	adds	r4, r3, #1
 800d568:	9403      	str	r4, [sp, #12]
 800d56a:	7019      	strb	r1, [r3, #0]
 800d56c:	e7de      	b.n	800d52c <__cvt+0x66>

0800d56e <__exponent>:
 800d56e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d570:	2900      	cmp	r1, #0
 800d572:	bfba      	itte	lt
 800d574:	4249      	neglt	r1, r1
 800d576:	232d      	movlt	r3, #45	@ 0x2d
 800d578:	232b      	movge	r3, #43	@ 0x2b
 800d57a:	2909      	cmp	r1, #9
 800d57c:	7002      	strb	r2, [r0, #0]
 800d57e:	7043      	strb	r3, [r0, #1]
 800d580:	dd29      	ble.n	800d5d6 <__exponent+0x68>
 800d582:	f10d 0307 	add.w	r3, sp, #7
 800d586:	461d      	mov	r5, r3
 800d588:	270a      	movs	r7, #10
 800d58a:	461a      	mov	r2, r3
 800d58c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d590:	fb07 1416 	mls	r4, r7, r6, r1
 800d594:	3430      	adds	r4, #48	@ 0x30
 800d596:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d59a:	460c      	mov	r4, r1
 800d59c:	2c63      	cmp	r4, #99	@ 0x63
 800d59e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d5a2:	4631      	mov	r1, r6
 800d5a4:	dcf1      	bgt.n	800d58a <__exponent+0x1c>
 800d5a6:	3130      	adds	r1, #48	@ 0x30
 800d5a8:	1e94      	subs	r4, r2, #2
 800d5aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d5ae:	1c41      	adds	r1, r0, #1
 800d5b0:	4623      	mov	r3, r4
 800d5b2:	42ab      	cmp	r3, r5
 800d5b4:	d30a      	bcc.n	800d5cc <__exponent+0x5e>
 800d5b6:	f10d 0309 	add.w	r3, sp, #9
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	42ac      	cmp	r4, r5
 800d5be:	bf88      	it	hi
 800d5c0:	2300      	movhi	r3, #0
 800d5c2:	3302      	adds	r3, #2
 800d5c4:	4403      	add	r3, r0
 800d5c6:	1a18      	subs	r0, r3, r0
 800d5c8:	b003      	add	sp, #12
 800d5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d5d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d5d4:	e7ed      	b.n	800d5b2 <__exponent+0x44>
 800d5d6:	2330      	movs	r3, #48	@ 0x30
 800d5d8:	3130      	adds	r1, #48	@ 0x30
 800d5da:	7083      	strb	r3, [r0, #2]
 800d5dc:	70c1      	strb	r1, [r0, #3]
 800d5de:	1d03      	adds	r3, r0, #4
 800d5e0:	e7f1      	b.n	800d5c6 <__exponent+0x58>
 800d5e2:	0000      	movs	r0, r0
 800d5e4:	0000      	movs	r0, r0
	...

0800d5e8 <_printf_float>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	b08d      	sub	sp, #52	@ 0x34
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d5f4:	4616      	mov	r6, r2
 800d5f6:	461f      	mov	r7, r3
 800d5f8:	4605      	mov	r5, r0
 800d5fa:	f001 fe83 	bl	800f304 <_localeconv_r>
 800d5fe:	f8d0 b000 	ldr.w	fp, [r0]
 800d602:	4658      	mov	r0, fp
 800d604:	f7f2 fed4 	bl	80003b0 <strlen>
 800d608:	2300      	movs	r3, #0
 800d60a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d60c:	f8d8 3000 	ldr.w	r3, [r8]
 800d610:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d614:	6822      	ldr	r2, [r4, #0]
 800d616:	9005      	str	r0, [sp, #20]
 800d618:	3307      	adds	r3, #7
 800d61a:	f023 0307 	bic.w	r3, r3, #7
 800d61e:	f103 0108 	add.w	r1, r3, #8
 800d622:	f8c8 1000 	str.w	r1, [r8]
 800d626:	ed93 0b00 	vldr	d0, [r3]
 800d62a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800d888 <_printf_float+0x2a0>
 800d62e:	eeb0 7bc0 	vabs.f64	d7, d0
 800d632:	eeb4 7b46 	vcmp.f64	d7, d6
 800d636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d63a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800d63e:	dd24      	ble.n	800d68a <_printf_float+0xa2>
 800d640:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d648:	d502      	bpl.n	800d650 <_printf_float+0x68>
 800d64a:	232d      	movs	r3, #45	@ 0x2d
 800d64c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d650:	498f      	ldr	r1, [pc, #572]	@ (800d890 <_printf_float+0x2a8>)
 800d652:	4b90      	ldr	r3, [pc, #576]	@ (800d894 <_printf_float+0x2ac>)
 800d654:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800d658:	bf94      	ite	ls
 800d65a:	4688      	movls	r8, r1
 800d65c:	4698      	movhi	r8, r3
 800d65e:	f022 0204 	bic.w	r2, r2, #4
 800d662:	2303      	movs	r3, #3
 800d664:	6123      	str	r3, [r4, #16]
 800d666:	6022      	str	r2, [r4, #0]
 800d668:	f04f 0a00 	mov.w	sl, #0
 800d66c:	9700      	str	r7, [sp, #0]
 800d66e:	4633      	mov	r3, r6
 800d670:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d672:	4621      	mov	r1, r4
 800d674:	4628      	mov	r0, r5
 800d676:	f000 fa7b 	bl	800db70 <_printf_common>
 800d67a:	3001      	adds	r0, #1
 800d67c:	f040 8089 	bne.w	800d792 <_printf_float+0x1aa>
 800d680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d684:	b00d      	add	sp, #52	@ 0x34
 800d686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68a:	eeb4 0b40 	vcmp.f64	d0, d0
 800d68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d692:	d709      	bvc.n	800d6a8 <_printf_float+0xc0>
 800d694:	ee10 3a90 	vmov	r3, s1
 800d698:	2b00      	cmp	r3, #0
 800d69a:	bfbc      	itt	lt
 800d69c:	232d      	movlt	r3, #45	@ 0x2d
 800d69e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d6a2:	497d      	ldr	r1, [pc, #500]	@ (800d898 <_printf_float+0x2b0>)
 800d6a4:	4b7d      	ldr	r3, [pc, #500]	@ (800d89c <_printf_float+0x2b4>)
 800d6a6:	e7d5      	b.n	800d654 <_printf_float+0x6c>
 800d6a8:	6863      	ldr	r3, [r4, #4]
 800d6aa:	1c59      	adds	r1, r3, #1
 800d6ac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800d6b0:	d139      	bne.n	800d726 <_printf_float+0x13e>
 800d6b2:	2306      	movs	r3, #6
 800d6b4:	6063      	str	r3, [r4, #4]
 800d6b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	6022      	str	r2, [r4, #0]
 800d6be:	9303      	str	r3, [sp, #12]
 800d6c0:	ab0a      	add	r3, sp, #40	@ 0x28
 800d6c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d6c6:	ab09      	add	r3, sp, #36	@ 0x24
 800d6c8:	9300      	str	r3, [sp, #0]
 800d6ca:	6861      	ldr	r1, [r4, #4]
 800d6cc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f7ff fef8 	bl	800d4c6 <__cvt>
 800d6d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d6da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6dc:	4680      	mov	r8, r0
 800d6de:	d129      	bne.n	800d734 <_printf_float+0x14c>
 800d6e0:	1cc8      	adds	r0, r1, #3
 800d6e2:	db02      	blt.n	800d6ea <_printf_float+0x102>
 800d6e4:	6863      	ldr	r3, [r4, #4]
 800d6e6:	4299      	cmp	r1, r3
 800d6e8:	dd41      	ble.n	800d76e <_printf_float+0x186>
 800d6ea:	f1a9 0902 	sub.w	r9, r9, #2
 800d6ee:	fa5f f989 	uxtb.w	r9, r9
 800d6f2:	3901      	subs	r1, #1
 800d6f4:	464a      	mov	r2, r9
 800d6f6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d6fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800d6fc:	f7ff ff37 	bl	800d56e <__exponent>
 800d700:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d702:	1813      	adds	r3, r2, r0
 800d704:	2a01      	cmp	r2, #1
 800d706:	4682      	mov	sl, r0
 800d708:	6123      	str	r3, [r4, #16]
 800d70a:	dc02      	bgt.n	800d712 <_printf_float+0x12a>
 800d70c:	6822      	ldr	r2, [r4, #0]
 800d70e:	07d2      	lsls	r2, r2, #31
 800d710:	d501      	bpl.n	800d716 <_printf_float+0x12e>
 800d712:	3301      	adds	r3, #1
 800d714:	6123      	str	r3, [r4, #16]
 800d716:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d0a6      	beq.n	800d66c <_printf_float+0x84>
 800d71e:	232d      	movs	r3, #45	@ 0x2d
 800d720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d724:	e7a2      	b.n	800d66c <_printf_float+0x84>
 800d726:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d72a:	d1c4      	bne.n	800d6b6 <_printf_float+0xce>
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1c2      	bne.n	800d6b6 <_printf_float+0xce>
 800d730:	2301      	movs	r3, #1
 800d732:	e7bf      	b.n	800d6b4 <_printf_float+0xcc>
 800d734:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d738:	d9db      	bls.n	800d6f2 <_printf_float+0x10a>
 800d73a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800d73e:	d118      	bne.n	800d772 <_printf_float+0x18a>
 800d740:	2900      	cmp	r1, #0
 800d742:	6863      	ldr	r3, [r4, #4]
 800d744:	dd0b      	ble.n	800d75e <_printf_float+0x176>
 800d746:	6121      	str	r1, [r4, #16]
 800d748:	b913      	cbnz	r3, 800d750 <_printf_float+0x168>
 800d74a:	6822      	ldr	r2, [r4, #0]
 800d74c:	07d0      	lsls	r0, r2, #31
 800d74e:	d502      	bpl.n	800d756 <_printf_float+0x16e>
 800d750:	3301      	adds	r3, #1
 800d752:	440b      	add	r3, r1
 800d754:	6123      	str	r3, [r4, #16]
 800d756:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d758:	f04f 0a00 	mov.w	sl, #0
 800d75c:	e7db      	b.n	800d716 <_printf_float+0x12e>
 800d75e:	b913      	cbnz	r3, 800d766 <_printf_float+0x17e>
 800d760:	6822      	ldr	r2, [r4, #0]
 800d762:	07d2      	lsls	r2, r2, #31
 800d764:	d501      	bpl.n	800d76a <_printf_float+0x182>
 800d766:	3302      	adds	r3, #2
 800d768:	e7f4      	b.n	800d754 <_printf_float+0x16c>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e7f2      	b.n	800d754 <_printf_float+0x16c>
 800d76e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800d772:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d774:	4299      	cmp	r1, r3
 800d776:	db05      	blt.n	800d784 <_printf_float+0x19c>
 800d778:	6823      	ldr	r3, [r4, #0]
 800d77a:	6121      	str	r1, [r4, #16]
 800d77c:	07d8      	lsls	r0, r3, #31
 800d77e:	d5ea      	bpl.n	800d756 <_printf_float+0x16e>
 800d780:	1c4b      	adds	r3, r1, #1
 800d782:	e7e7      	b.n	800d754 <_printf_float+0x16c>
 800d784:	2900      	cmp	r1, #0
 800d786:	bfd4      	ite	le
 800d788:	f1c1 0202 	rsble	r2, r1, #2
 800d78c:	2201      	movgt	r2, #1
 800d78e:	4413      	add	r3, r2
 800d790:	e7e0      	b.n	800d754 <_printf_float+0x16c>
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	055a      	lsls	r2, r3, #21
 800d796:	d407      	bmi.n	800d7a8 <_printf_float+0x1c0>
 800d798:	6923      	ldr	r3, [r4, #16]
 800d79a:	4642      	mov	r2, r8
 800d79c:	4631      	mov	r1, r6
 800d79e:	4628      	mov	r0, r5
 800d7a0:	47b8      	blx	r7
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	d12a      	bne.n	800d7fc <_printf_float+0x214>
 800d7a6:	e76b      	b.n	800d680 <_printf_float+0x98>
 800d7a8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d7ac:	f240 80e0 	bls.w	800d970 <_printf_float+0x388>
 800d7b0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d7b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7bc:	d133      	bne.n	800d826 <_printf_float+0x23e>
 800d7be:	4a38      	ldr	r2, [pc, #224]	@ (800d8a0 <_printf_float+0x2b8>)
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	4631      	mov	r1, r6
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	47b8      	blx	r7
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	f43f af59 	beq.w	800d680 <_printf_float+0x98>
 800d7ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d7d2:	4543      	cmp	r3, r8
 800d7d4:	db02      	blt.n	800d7dc <_printf_float+0x1f4>
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	07d8      	lsls	r0, r3, #31
 800d7da:	d50f      	bpl.n	800d7fc <_printf_float+0x214>
 800d7dc:	9b05      	ldr	r3, [sp, #20]
 800d7de:	465a      	mov	r2, fp
 800d7e0:	4631      	mov	r1, r6
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	47b8      	blx	r7
 800d7e6:	3001      	adds	r0, #1
 800d7e8:	f43f af4a 	beq.w	800d680 <_printf_float+0x98>
 800d7ec:	f04f 0900 	mov.w	r9, #0
 800d7f0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d7f4:	f104 0a1a 	add.w	sl, r4, #26
 800d7f8:	45c8      	cmp	r8, r9
 800d7fa:	dc09      	bgt.n	800d810 <_printf_float+0x228>
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	079b      	lsls	r3, r3, #30
 800d800:	f100 8107 	bmi.w	800da12 <_printf_float+0x42a>
 800d804:	68e0      	ldr	r0, [r4, #12]
 800d806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d808:	4298      	cmp	r0, r3
 800d80a:	bfb8      	it	lt
 800d80c:	4618      	movlt	r0, r3
 800d80e:	e739      	b.n	800d684 <_printf_float+0x9c>
 800d810:	2301      	movs	r3, #1
 800d812:	4652      	mov	r2, sl
 800d814:	4631      	mov	r1, r6
 800d816:	4628      	mov	r0, r5
 800d818:	47b8      	blx	r7
 800d81a:	3001      	adds	r0, #1
 800d81c:	f43f af30 	beq.w	800d680 <_printf_float+0x98>
 800d820:	f109 0901 	add.w	r9, r9, #1
 800d824:	e7e8      	b.n	800d7f8 <_printf_float+0x210>
 800d826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d828:	2b00      	cmp	r3, #0
 800d82a:	dc3b      	bgt.n	800d8a4 <_printf_float+0x2bc>
 800d82c:	4a1c      	ldr	r2, [pc, #112]	@ (800d8a0 <_printf_float+0x2b8>)
 800d82e:	2301      	movs	r3, #1
 800d830:	4631      	mov	r1, r6
 800d832:	4628      	mov	r0, r5
 800d834:	47b8      	blx	r7
 800d836:	3001      	adds	r0, #1
 800d838:	f43f af22 	beq.w	800d680 <_printf_float+0x98>
 800d83c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d840:	ea59 0303 	orrs.w	r3, r9, r3
 800d844:	d102      	bne.n	800d84c <_printf_float+0x264>
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	07d9      	lsls	r1, r3, #31
 800d84a:	d5d7      	bpl.n	800d7fc <_printf_float+0x214>
 800d84c:	9b05      	ldr	r3, [sp, #20]
 800d84e:	465a      	mov	r2, fp
 800d850:	4631      	mov	r1, r6
 800d852:	4628      	mov	r0, r5
 800d854:	47b8      	blx	r7
 800d856:	3001      	adds	r0, #1
 800d858:	f43f af12 	beq.w	800d680 <_printf_float+0x98>
 800d85c:	f04f 0a00 	mov.w	sl, #0
 800d860:	f104 0b1a 	add.w	fp, r4, #26
 800d864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d866:	425b      	negs	r3, r3
 800d868:	4553      	cmp	r3, sl
 800d86a:	dc01      	bgt.n	800d870 <_printf_float+0x288>
 800d86c:	464b      	mov	r3, r9
 800d86e:	e794      	b.n	800d79a <_printf_float+0x1b2>
 800d870:	2301      	movs	r3, #1
 800d872:	465a      	mov	r2, fp
 800d874:	4631      	mov	r1, r6
 800d876:	4628      	mov	r0, r5
 800d878:	47b8      	blx	r7
 800d87a:	3001      	adds	r0, #1
 800d87c:	f43f af00 	beq.w	800d680 <_printf_float+0x98>
 800d880:	f10a 0a01 	add.w	sl, sl, #1
 800d884:	e7ee      	b.n	800d864 <_printf_float+0x27c>
 800d886:	bf00      	nop
 800d888:	ffffffff 	.word	0xffffffff
 800d88c:	7fefffff 	.word	0x7fefffff
 800d890:	08012a94 	.word	0x08012a94
 800d894:	08012a98 	.word	0x08012a98
 800d898:	08012a9c 	.word	0x08012a9c
 800d89c:	08012aa0 	.word	0x08012aa0
 800d8a0:	08012d3d 	.word	0x08012d3d
 800d8a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8aa:	4553      	cmp	r3, sl
 800d8ac:	bfa8      	it	ge
 800d8ae:	4653      	movge	r3, sl
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	4699      	mov	r9, r3
 800d8b4:	dc37      	bgt.n	800d926 <_printf_float+0x33e>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	9307      	str	r3, [sp, #28]
 800d8ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8be:	f104 021a 	add.w	r2, r4, #26
 800d8c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8c4:	9907      	ldr	r1, [sp, #28]
 800d8c6:	9306      	str	r3, [sp, #24]
 800d8c8:	eba3 0309 	sub.w	r3, r3, r9
 800d8cc:	428b      	cmp	r3, r1
 800d8ce:	dc31      	bgt.n	800d934 <_printf_float+0x34c>
 800d8d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8d2:	459a      	cmp	sl, r3
 800d8d4:	dc3b      	bgt.n	800d94e <_printf_float+0x366>
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	07da      	lsls	r2, r3, #31
 800d8da:	d438      	bmi.n	800d94e <_printf_float+0x366>
 800d8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8de:	ebaa 0903 	sub.w	r9, sl, r3
 800d8e2:	9b06      	ldr	r3, [sp, #24]
 800d8e4:	ebaa 0303 	sub.w	r3, sl, r3
 800d8e8:	4599      	cmp	r9, r3
 800d8ea:	bfa8      	it	ge
 800d8ec:	4699      	movge	r9, r3
 800d8ee:	f1b9 0f00 	cmp.w	r9, #0
 800d8f2:	dc34      	bgt.n	800d95e <_printf_float+0x376>
 800d8f4:	f04f 0800 	mov.w	r8, #0
 800d8f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8fc:	f104 0b1a 	add.w	fp, r4, #26
 800d900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d902:	ebaa 0303 	sub.w	r3, sl, r3
 800d906:	eba3 0309 	sub.w	r3, r3, r9
 800d90a:	4543      	cmp	r3, r8
 800d90c:	f77f af76 	ble.w	800d7fc <_printf_float+0x214>
 800d910:	2301      	movs	r3, #1
 800d912:	465a      	mov	r2, fp
 800d914:	4631      	mov	r1, r6
 800d916:	4628      	mov	r0, r5
 800d918:	47b8      	blx	r7
 800d91a:	3001      	adds	r0, #1
 800d91c:	f43f aeb0 	beq.w	800d680 <_printf_float+0x98>
 800d920:	f108 0801 	add.w	r8, r8, #1
 800d924:	e7ec      	b.n	800d900 <_printf_float+0x318>
 800d926:	4642      	mov	r2, r8
 800d928:	4631      	mov	r1, r6
 800d92a:	4628      	mov	r0, r5
 800d92c:	47b8      	blx	r7
 800d92e:	3001      	adds	r0, #1
 800d930:	d1c1      	bne.n	800d8b6 <_printf_float+0x2ce>
 800d932:	e6a5      	b.n	800d680 <_printf_float+0x98>
 800d934:	2301      	movs	r3, #1
 800d936:	4631      	mov	r1, r6
 800d938:	4628      	mov	r0, r5
 800d93a:	9206      	str	r2, [sp, #24]
 800d93c:	47b8      	blx	r7
 800d93e:	3001      	adds	r0, #1
 800d940:	f43f ae9e 	beq.w	800d680 <_printf_float+0x98>
 800d944:	9b07      	ldr	r3, [sp, #28]
 800d946:	9a06      	ldr	r2, [sp, #24]
 800d948:	3301      	adds	r3, #1
 800d94a:	9307      	str	r3, [sp, #28]
 800d94c:	e7b9      	b.n	800d8c2 <_printf_float+0x2da>
 800d94e:	9b05      	ldr	r3, [sp, #20]
 800d950:	465a      	mov	r2, fp
 800d952:	4631      	mov	r1, r6
 800d954:	4628      	mov	r0, r5
 800d956:	47b8      	blx	r7
 800d958:	3001      	adds	r0, #1
 800d95a:	d1bf      	bne.n	800d8dc <_printf_float+0x2f4>
 800d95c:	e690      	b.n	800d680 <_printf_float+0x98>
 800d95e:	9a06      	ldr	r2, [sp, #24]
 800d960:	464b      	mov	r3, r9
 800d962:	4442      	add	r2, r8
 800d964:	4631      	mov	r1, r6
 800d966:	4628      	mov	r0, r5
 800d968:	47b8      	blx	r7
 800d96a:	3001      	adds	r0, #1
 800d96c:	d1c2      	bne.n	800d8f4 <_printf_float+0x30c>
 800d96e:	e687      	b.n	800d680 <_printf_float+0x98>
 800d970:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800d974:	f1b9 0f01 	cmp.w	r9, #1
 800d978:	dc01      	bgt.n	800d97e <_printf_float+0x396>
 800d97a:	07db      	lsls	r3, r3, #31
 800d97c:	d536      	bpl.n	800d9ec <_printf_float+0x404>
 800d97e:	2301      	movs	r3, #1
 800d980:	4642      	mov	r2, r8
 800d982:	4631      	mov	r1, r6
 800d984:	4628      	mov	r0, r5
 800d986:	47b8      	blx	r7
 800d988:	3001      	adds	r0, #1
 800d98a:	f43f ae79 	beq.w	800d680 <_printf_float+0x98>
 800d98e:	9b05      	ldr	r3, [sp, #20]
 800d990:	465a      	mov	r2, fp
 800d992:	4631      	mov	r1, r6
 800d994:	4628      	mov	r0, r5
 800d996:	47b8      	blx	r7
 800d998:	3001      	adds	r0, #1
 800d99a:	f43f ae71 	beq.w	800d680 <_printf_float+0x98>
 800d99e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d9a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9aa:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800d9ae:	d018      	beq.n	800d9e2 <_printf_float+0x3fa>
 800d9b0:	464b      	mov	r3, r9
 800d9b2:	f108 0201 	add.w	r2, r8, #1
 800d9b6:	4631      	mov	r1, r6
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	47b8      	blx	r7
 800d9bc:	3001      	adds	r0, #1
 800d9be:	d10c      	bne.n	800d9da <_printf_float+0x3f2>
 800d9c0:	e65e      	b.n	800d680 <_printf_float+0x98>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	465a      	mov	r2, fp
 800d9c6:	4631      	mov	r1, r6
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	47b8      	blx	r7
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	f43f ae57 	beq.w	800d680 <_printf_float+0x98>
 800d9d2:	f108 0801 	add.w	r8, r8, #1
 800d9d6:	45c8      	cmp	r8, r9
 800d9d8:	dbf3      	blt.n	800d9c2 <_printf_float+0x3da>
 800d9da:	4653      	mov	r3, sl
 800d9dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d9e0:	e6dc      	b.n	800d79c <_printf_float+0x1b4>
 800d9e2:	f04f 0800 	mov.w	r8, #0
 800d9e6:	f104 0b1a 	add.w	fp, r4, #26
 800d9ea:	e7f4      	b.n	800d9d6 <_printf_float+0x3ee>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	4642      	mov	r2, r8
 800d9f0:	e7e1      	b.n	800d9b6 <_printf_float+0x3ce>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	464a      	mov	r2, r9
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b8      	blx	r7
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	f43f ae3f 	beq.w	800d680 <_printf_float+0x98>
 800da02:	f108 0801 	add.w	r8, r8, #1
 800da06:	68e3      	ldr	r3, [r4, #12]
 800da08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da0a:	1a5b      	subs	r3, r3, r1
 800da0c:	4543      	cmp	r3, r8
 800da0e:	dcf0      	bgt.n	800d9f2 <_printf_float+0x40a>
 800da10:	e6f8      	b.n	800d804 <_printf_float+0x21c>
 800da12:	f04f 0800 	mov.w	r8, #0
 800da16:	f104 0919 	add.w	r9, r4, #25
 800da1a:	e7f4      	b.n	800da06 <_printf_float+0x41e>

0800da1c <malloc>:
 800da1c:	4b02      	ldr	r3, [pc, #8]	@ (800da28 <malloc+0xc>)
 800da1e:	4601      	mov	r1, r0
 800da20:	6818      	ldr	r0, [r3, #0]
 800da22:	f000 b825 	b.w	800da70 <_malloc_r>
 800da26:	bf00      	nop
 800da28:	24000190 	.word	0x24000190

0800da2c <sbrk_aligned>:
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	4e0f      	ldr	r6, [pc, #60]	@ (800da6c <sbrk_aligned+0x40>)
 800da30:	460c      	mov	r4, r1
 800da32:	6831      	ldr	r1, [r6, #0]
 800da34:	4605      	mov	r5, r0
 800da36:	b911      	cbnz	r1, 800da3e <sbrk_aligned+0x12>
 800da38:	f001 fc9c 	bl	800f374 <_sbrk_r>
 800da3c:	6030      	str	r0, [r6, #0]
 800da3e:	4621      	mov	r1, r4
 800da40:	4628      	mov	r0, r5
 800da42:	f001 fc97 	bl	800f374 <_sbrk_r>
 800da46:	1c43      	adds	r3, r0, #1
 800da48:	d103      	bne.n	800da52 <sbrk_aligned+0x26>
 800da4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800da4e:	4620      	mov	r0, r4
 800da50:	bd70      	pop	{r4, r5, r6, pc}
 800da52:	1cc4      	adds	r4, r0, #3
 800da54:	f024 0403 	bic.w	r4, r4, #3
 800da58:	42a0      	cmp	r0, r4
 800da5a:	d0f8      	beq.n	800da4e <sbrk_aligned+0x22>
 800da5c:	1a21      	subs	r1, r4, r0
 800da5e:	4628      	mov	r0, r5
 800da60:	f001 fc88 	bl	800f374 <_sbrk_r>
 800da64:	3001      	adds	r0, #1
 800da66:	d1f2      	bne.n	800da4e <sbrk_aligned+0x22>
 800da68:	e7ef      	b.n	800da4a <sbrk_aligned+0x1e>
 800da6a:	bf00      	nop
 800da6c:	24000cb8 	.word	0x24000cb8

0800da70 <_malloc_r>:
 800da70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da74:	1ccd      	adds	r5, r1, #3
 800da76:	f025 0503 	bic.w	r5, r5, #3
 800da7a:	3508      	adds	r5, #8
 800da7c:	2d0c      	cmp	r5, #12
 800da7e:	bf38      	it	cc
 800da80:	250c      	movcc	r5, #12
 800da82:	2d00      	cmp	r5, #0
 800da84:	4606      	mov	r6, r0
 800da86:	db01      	blt.n	800da8c <_malloc_r+0x1c>
 800da88:	42a9      	cmp	r1, r5
 800da8a:	d904      	bls.n	800da96 <_malloc_r+0x26>
 800da8c:	230c      	movs	r3, #12
 800da8e:	6033      	str	r3, [r6, #0]
 800da90:	2000      	movs	r0, #0
 800da92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db6c <_malloc_r+0xfc>
 800da9a:	f000 fc03 	bl	800e2a4 <__malloc_lock>
 800da9e:	f8d8 3000 	ldr.w	r3, [r8]
 800daa2:	461c      	mov	r4, r3
 800daa4:	bb44      	cbnz	r4, 800daf8 <_malloc_r+0x88>
 800daa6:	4629      	mov	r1, r5
 800daa8:	4630      	mov	r0, r6
 800daaa:	f7ff ffbf 	bl	800da2c <sbrk_aligned>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	4604      	mov	r4, r0
 800dab2:	d158      	bne.n	800db66 <_malloc_r+0xf6>
 800dab4:	f8d8 4000 	ldr.w	r4, [r8]
 800dab8:	4627      	mov	r7, r4
 800daba:	2f00      	cmp	r7, #0
 800dabc:	d143      	bne.n	800db46 <_malloc_r+0xd6>
 800dabe:	2c00      	cmp	r4, #0
 800dac0:	d04b      	beq.n	800db5a <_malloc_r+0xea>
 800dac2:	6823      	ldr	r3, [r4, #0]
 800dac4:	4639      	mov	r1, r7
 800dac6:	4630      	mov	r0, r6
 800dac8:	eb04 0903 	add.w	r9, r4, r3
 800dacc:	f001 fc52 	bl	800f374 <_sbrk_r>
 800dad0:	4581      	cmp	r9, r0
 800dad2:	d142      	bne.n	800db5a <_malloc_r+0xea>
 800dad4:	6821      	ldr	r1, [r4, #0]
 800dad6:	1a6d      	subs	r5, r5, r1
 800dad8:	4629      	mov	r1, r5
 800dada:	4630      	mov	r0, r6
 800dadc:	f7ff ffa6 	bl	800da2c <sbrk_aligned>
 800dae0:	3001      	adds	r0, #1
 800dae2:	d03a      	beq.n	800db5a <_malloc_r+0xea>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	442b      	add	r3, r5
 800dae8:	6023      	str	r3, [r4, #0]
 800daea:	f8d8 3000 	ldr.w	r3, [r8]
 800daee:	685a      	ldr	r2, [r3, #4]
 800daf0:	bb62      	cbnz	r2, 800db4c <_malloc_r+0xdc>
 800daf2:	f8c8 7000 	str.w	r7, [r8]
 800daf6:	e00f      	b.n	800db18 <_malloc_r+0xa8>
 800daf8:	6822      	ldr	r2, [r4, #0]
 800dafa:	1b52      	subs	r2, r2, r5
 800dafc:	d420      	bmi.n	800db40 <_malloc_r+0xd0>
 800dafe:	2a0b      	cmp	r2, #11
 800db00:	d917      	bls.n	800db32 <_malloc_r+0xc2>
 800db02:	1961      	adds	r1, r4, r5
 800db04:	42a3      	cmp	r3, r4
 800db06:	6025      	str	r5, [r4, #0]
 800db08:	bf18      	it	ne
 800db0a:	6059      	strne	r1, [r3, #4]
 800db0c:	6863      	ldr	r3, [r4, #4]
 800db0e:	bf08      	it	eq
 800db10:	f8c8 1000 	streq.w	r1, [r8]
 800db14:	5162      	str	r2, [r4, r5]
 800db16:	604b      	str	r3, [r1, #4]
 800db18:	4630      	mov	r0, r6
 800db1a:	f000 fbc9 	bl	800e2b0 <__malloc_unlock>
 800db1e:	f104 000b 	add.w	r0, r4, #11
 800db22:	1d23      	adds	r3, r4, #4
 800db24:	f020 0007 	bic.w	r0, r0, #7
 800db28:	1ac2      	subs	r2, r0, r3
 800db2a:	bf1c      	itt	ne
 800db2c:	1a1b      	subne	r3, r3, r0
 800db2e:	50a3      	strne	r3, [r4, r2]
 800db30:	e7af      	b.n	800da92 <_malloc_r+0x22>
 800db32:	6862      	ldr	r2, [r4, #4]
 800db34:	42a3      	cmp	r3, r4
 800db36:	bf0c      	ite	eq
 800db38:	f8c8 2000 	streq.w	r2, [r8]
 800db3c:	605a      	strne	r2, [r3, #4]
 800db3e:	e7eb      	b.n	800db18 <_malloc_r+0xa8>
 800db40:	4623      	mov	r3, r4
 800db42:	6864      	ldr	r4, [r4, #4]
 800db44:	e7ae      	b.n	800daa4 <_malloc_r+0x34>
 800db46:	463c      	mov	r4, r7
 800db48:	687f      	ldr	r7, [r7, #4]
 800db4a:	e7b6      	b.n	800daba <_malloc_r+0x4a>
 800db4c:	461a      	mov	r2, r3
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	42a3      	cmp	r3, r4
 800db52:	d1fb      	bne.n	800db4c <_malloc_r+0xdc>
 800db54:	2300      	movs	r3, #0
 800db56:	6053      	str	r3, [r2, #4]
 800db58:	e7de      	b.n	800db18 <_malloc_r+0xa8>
 800db5a:	230c      	movs	r3, #12
 800db5c:	6033      	str	r3, [r6, #0]
 800db5e:	4630      	mov	r0, r6
 800db60:	f000 fba6 	bl	800e2b0 <__malloc_unlock>
 800db64:	e794      	b.n	800da90 <_malloc_r+0x20>
 800db66:	6005      	str	r5, [r0, #0]
 800db68:	e7d6      	b.n	800db18 <_malloc_r+0xa8>
 800db6a:	bf00      	nop
 800db6c:	24000cbc 	.word	0x24000cbc

0800db70 <_printf_common>:
 800db70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db74:	4616      	mov	r6, r2
 800db76:	4698      	mov	r8, r3
 800db78:	688a      	ldr	r2, [r1, #8]
 800db7a:	690b      	ldr	r3, [r1, #16]
 800db7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db80:	4293      	cmp	r3, r2
 800db82:	bfb8      	it	lt
 800db84:	4613      	movlt	r3, r2
 800db86:	6033      	str	r3, [r6, #0]
 800db88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db8c:	4607      	mov	r7, r0
 800db8e:	460c      	mov	r4, r1
 800db90:	b10a      	cbz	r2, 800db96 <_printf_common+0x26>
 800db92:	3301      	adds	r3, #1
 800db94:	6033      	str	r3, [r6, #0]
 800db96:	6823      	ldr	r3, [r4, #0]
 800db98:	0699      	lsls	r1, r3, #26
 800db9a:	bf42      	ittt	mi
 800db9c:	6833      	ldrmi	r3, [r6, #0]
 800db9e:	3302      	addmi	r3, #2
 800dba0:	6033      	strmi	r3, [r6, #0]
 800dba2:	6825      	ldr	r5, [r4, #0]
 800dba4:	f015 0506 	ands.w	r5, r5, #6
 800dba8:	d106      	bne.n	800dbb8 <_printf_common+0x48>
 800dbaa:	f104 0a19 	add.w	sl, r4, #25
 800dbae:	68e3      	ldr	r3, [r4, #12]
 800dbb0:	6832      	ldr	r2, [r6, #0]
 800dbb2:	1a9b      	subs	r3, r3, r2
 800dbb4:	42ab      	cmp	r3, r5
 800dbb6:	dc26      	bgt.n	800dc06 <_printf_common+0x96>
 800dbb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dbbc:	6822      	ldr	r2, [r4, #0]
 800dbbe:	3b00      	subs	r3, #0
 800dbc0:	bf18      	it	ne
 800dbc2:	2301      	movne	r3, #1
 800dbc4:	0692      	lsls	r2, r2, #26
 800dbc6:	d42b      	bmi.n	800dc20 <_printf_common+0xb0>
 800dbc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dbcc:	4641      	mov	r1, r8
 800dbce:	4638      	mov	r0, r7
 800dbd0:	47c8      	blx	r9
 800dbd2:	3001      	adds	r0, #1
 800dbd4:	d01e      	beq.n	800dc14 <_printf_common+0xa4>
 800dbd6:	6823      	ldr	r3, [r4, #0]
 800dbd8:	6922      	ldr	r2, [r4, #16]
 800dbda:	f003 0306 	and.w	r3, r3, #6
 800dbde:	2b04      	cmp	r3, #4
 800dbe0:	bf02      	ittt	eq
 800dbe2:	68e5      	ldreq	r5, [r4, #12]
 800dbe4:	6833      	ldreq	r3, [r6, #0]
 800dbe6:	1aed      	subeq	r5, r5, r3
 800dbe8:	68a3      	ldr	r3, [r4, #8]
 800dbea:	bf0c      	ite	eq
 800dbec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbf0:	2500      	movne	r5, #0
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	bfc4      	itt	gt
 800dbf6:	1a9b      	subgt	r3, r3, r2
 800dbf8:	18ed      	addgt	r5, r5, r3
 800dbfa:	2600      	movs	r6, #0
 800dbfc:	341a      	adds	r4, #26
 800dbfe:	42b5      	cmp	r5, r6
 800dc00:	d11a      	bne.n	800dc38 <_printf_common+0xc8>
 800dc02:	2000      	movs	r0, #0
 800dc04:	e008      	b.n	800dc18 <_printf_common+0xa8>
 800dc06:	2301      	movs	r3, #1
 800dc08:	4652      	mov	r2, sl
 800dc0a:	4641      	mov	r1, r8
 800dc0c:	4638      	mov	r0, r7
 800dc0e:	47c8      	blx	r9
 800dc10:	3001      	adds	r0, #1
 800dc12:	d103      	bne.n	800dc1c <_printf_common+0xac>
 800dc14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc1c:	3501      	adds	r5, #1
 800dc1e:	e7c6      	b.n	800dbae <_printf_common+0x3e>
 800dc20:	18e1      	adds	r1, r4, r3
 800dc22:	1c5a      	adds	r2, r3, #1
 800dc24:	2030      	movs	r0, #48	@ 0x30
 800dc26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc2a:	4422      	add	r2, r4
 800dc2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc34:	3302      	adds	r3, #2
 800dc36:	e7c7      	b.n	800dbc8 <_printf_common+0x58>
 800dc38:	2301      	movs	r3, #1
 800dc3a:	4622      	mov	r2, r4
 800dc3c:	4641      	mov	r1, r8
 800dc3e:	4638      	mov	r0, r7
 800dc40:	47c8      	blx	r9
 800dc42:	3001      	adds	r0, #1
 800dc44:	d0e6      	beq.n	800dc14 <_printf_common+0xa4>
 800dc46:	3601      	adds	r6, #1
 800dc48:	e7d9      	b.n	800dbfe <_printf_common+0x8e>
	...

0800dc4c <_printf_i>:
 800dc4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc50:	7e0f      	ldrb	r7, [r1, #24]
 800dc52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc54:	2f78      	cmp	r7, #120	@ 0x78
 800dc56:	4691      	mov	r9, r2
 800dc58:	4680      	mov	r8, r0
 800dc5a:	460c      	mov	r4, r1
 800dc5c:	469a      	mov	sl, r3
 800dc5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc62:	d807      	bhi.n	800dc74 <_printf_i+0x28>
 800dc64:	2f62      	cmp	r7, #98	@ 0x62
 800dc66:	d80a      	bhi.n	800dc7e <_printf_i+0x32>
 800dc68:	2f00      	cmp	r7, #0
 800dc6a:	f000 80d2 	beq.w	800de12 <_printf_i+0x1c6>
 800dc6e:	2f58      	cmp	r7, #88	@ 0x58
 800dc70:	f000 80b9 	beq.w	800dde6 <_printf_i+0x19a>
 800dc74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc7c:	e03a      	b.n	800dcf4 <_printf_i+0xa8>
 800dc7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc82:	2b15      	cmp	r3, #21
 800dc84:	d8f6      	bhi.n	800dc74 <_printf_i+0x28>
 800dc86:	a101      	add	r1, pc, #4	@ (adr r1, 800dc8c <_printf_i+0x40>)
 800dc88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc8c:	0800dce5 	.word	0x0800dce5
 800dc90:	0800dcf9 	.word	0x0800dcf9
 800dc94:	0800dc75 	.word	0x0800dc75
 800dc98:	0800dc75 	.word	0x0800dc75
 800dc9c:	0800dc75 	.word	0x0800dc75
 800dca0:	0800dc75 	.word	0x0800dc75
 800dca4:	0800dcf9 	.word	0x0800dcf9
 800dca8:	0800dc75 	.word	0x0800dc75
 800dcac:	0800dc75 	.word	0x0800dc75
 800dcb0:	0800dc75 	.word	0x0800dc75
 800dcb4:	0800dc75 	.word	0x0800dc75
 800dcb8:	0800ddf9 	.word	0x0800ddf9
 800dcbc:	0800dd23 	.word	0x0800dd23
 800dcc0:	0800ddb3 	.word	0x0800ddb3
 800dcc4:	0800dc75 	.word	0x0800dc75
 800dcc8:	0800dc75 	.word	0x0800dc75
 800dccc:	0800de1b 	.word	0x0800de1b
 800dcd0:	0800dc75 	.word	0x0800dc75
 800dcd4:	0800dd23 	.word	0x0800dd23
 800dcd8:	0800dc75 	.word	0x0800dc75
 800dcdc:	0800dc75 	.word	0x0800dc75
 800dce0:	0800ddbb 	.word	0x0800ddbb
 800dce4:	6833      	ldr	r3, [r6, #0]
 800dce6:	1d1a      	adds	r2, r3, #4
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	6032      	str	r2, [r6, #0]
 800dcec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e09d      	b.n	800de34 <_printf_i+0x1e8>
 800dcf8:	6833      	ldr	r3, [r6, #0]
 800dcfa:	6820      	ldr	r0, [r4, #0]
 800dcfc:	1d19      	adds	r1, r3, #4
 800dcfe:	6031      	str	r1, [r6, #0]
 800dd00:	0606      	lsls	r6, r0, #24
 800dd02:	d501      	bpl.n	800dd08 <_printf_i+0xbc>
 800dd04:	681d      	ldr	r5, [r3, #0]
 800dd06:	e003      	b.n	800dd10 <_printf_i+0xc4>
 800dd08:	0645      	lsls	r5, r0, #25
 800dd0a:	d5fb      	bpl.n	800dd04 <_printf_i+0xb8>
 800dd0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd10:	2d00      	cmp	r5, #0
 800dd12:	da03      	bge.n	800dd1c <_printf_i+0xd0>
 800dd14:	232d      	movs	r3, #45	@ 0x2d
 800dd16:	426d      	negs	r5, r5
 800dd18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd1c:	4859      	ldr	r0, [pc, #356]	@ (800de84 <_printf_i+0x238>)
 800dd1e:	230a      	movs	r3, #10
 800dd20:	e011      	b.n	800dd46 <_printf_i+0xfa>
 800dd22:	6821      	ldr	r1, [r4, #0]
 800dd24:	6833      	ldr	r3, [r6, #0]
 800dd26:	0608      	lsls	r0, r1, #24
 800dd28:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd2c:	d402      	bmi.n	800dd34 <_printf_i+0xe8>
 800dd2e:	0649      	lsls	r1, r1, #25
 800dd30:	bf48      	it	mi
 800dd32:	b2ad      	uxthmi	r5, r5
 800dd34:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd36:	4853      	ldr	r0, [pc, #332]	@ (800de84 <_printf_i+0x238>)
 800dd38:	6033      	str	r3, [r6, #0]
 800dd3a:	bf14      	ite	ne
 800dd3c:	230a      	movne	r3, #10
 800dd3e:	2308      	moveq	r3, #8
 800dd40:	2100      	movs	r1, #0
 800dd42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd46:	6866      	ldr	r6, [r4, #4]
 800dd48:	60a6      	str	r6, [r4, #8]
 800dd4a:	2e00      	cmp	r6, #0
 800dd4c:	bfa2      	ittt	ge
 800dd4e:	6821      	ldrge	r1, [r4, #0]
 800dd50:	f021 0104 	bicge.w	r1, r1, #4
 800dd54:	6021      	strge	r1, [r4, #0]
 800dd56:	b90d      	cbnz	r5, 800dd5c <_printf_i+0x110>
 800dd58:	2e00      	cmp	r6, #0
 800dd5a:	d04b      	beq.n	800ddf4 <_printf_i+0x1a8>
 800dd5c:	4616      	mov	r6, r2
 800dd5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd62:	fb03 5711 	mls	r7, r3, r1, r5
 800dd66:	5dc7      	ldrb	r7, [r0, r7]
 800dd68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd6c:	462f      	mov	r7, r5
 800dd6e:	42bb      	cmp	r3, r7
 800dd70:	460d      	mov	r5, r1
 800dd72:	d9f4      	bls.n	800dd5e <_printf_i+0x112>
 800dd74:	2b08      	cmp	r3, #8
 800dd76:	d10b      	bne.n	800dd90 <_printf_i+0x144>
 800dd78:	6823      	ldr	r3, [r4, #0]
 800dd7a:	07df      	lsls	r7, r3, #31
 800dd7c:	d508      	bpl.n	800dd90 <_printf_i+0x144>
 800dd7e:	6923      	ldr	r3, [r4, #16]
 800dd80:	6861      	ldr	r1, [r4, #4]
 800dd82:	4299      	cmp	r1, r3
 800dd84:	bfde      	ittt	le
 800dd86:	2330      	movle	r3, #48	@ 0x30
 800dd88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd8c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800dd90:	1b92      	subs	r2, r2, r6
 800dd92:	6122      	str	r2, [r4, #16]
 800dd94:	f8cd a000 	str.w	sl, [sp]
 800dd98:	464b      	mov	r3, r9
 800dd9a:	aa03      	add	r2, sp, #12
 800dd9c:	4621      	mov	r1, r4
 800dd9e:	4640      	mov	r0, r8
 800dda0:	f7ff fee6 	bl	800db70 <_printf_common>
 800dda4:	3001      	adds	r0, #1
 800dda6:	d14a      	bne.n	800de3e <_printf_i+0x1f2>
 800dda8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddac:	b004      	add	sp, #16
 800ddae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	f043 0320 	orr.w	r3, r3, #32
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	4833      	ldr	r0, [pc, #204]	@ (800de88 <_printf_i+0x23c>)
 800ddbc:	2778      	movs	r7, #120	@ 0x78
 800ddbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	6831      	ldr	r1, [r6, #0]
 800ddc6:	061f      	lsls	r7, r3, #24
 800ddc8:	f851 5b04 	ldr.w	r5, [r1], #4
 800ddcc:	d402      	bmi.n	800ddd4 <_printf_i+0x188>
 800ddce:	065f      	lsls	r7, r3, #25
 800ddd0:	bf48      	it	mi
 800ddd2:	b2ad      	uxthmi	r5, r5
 800ddd4:	6031      	str	r1, [r6, #0]
 800ddd6:	07d9      	lsls	r1, r3, #31
 800ddd8:	bf44      	itt	mi
 800ddda:	f043 0320 	orrmi.w	r3, r3, #32
 800ddde:	6023      	strmi	r3, [r4, #0]
 800dde0:	b11d      	cbz	r5, 800ddea <_printf_i+0x19e>
 800dde2:	2310      	movs	r3, #16
 800dde4:	e7ac      	b.n	800dd40 <_printf_i+0xf4>
 800dde6:	4827      	ldr	r0, [pc, #156]	@ (800de84 <_printf_i+0x238>)
 800dde8:	e7e9      	b.n	800ddbe <_printf_i+0x172>
 800ddea:	6823      	ldr	r3, [r4, #0]
 800ddec:	f023 0320 	bic.w	r3, r3, #32
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	e7f6      	b.n	800dde2 <_printf_i+0x196>
 800ddf4:	4616      	mov	r6, r2
 800ddf6:	e7bd      	b.n	800dd74 <_printf_i+0x128>
 800ddf8:	6833      	ldr	r3, [r6, #0]
 800ddfa:	6825      	ldr	r5, [r4, #0]
 800ddfc:	6961      	ldr	r1, [r4, #20]
 800ddfe:	1d18      	adds	r0, r3, #4
 800de00:	6030      	str	r0, [r6, #0]
 800de02:	062e      	lsls	r6, r5, #24
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	d501      	bpl.n	800de0c <_printf_i+0x1c0>
 800de08:	6019      	str	r1, [r3, #0]
 800de0a:	e002      	b.n	800de12 <_printf_i+0x1c6>
 800de0c:	0668      	lsls	r0, r5, #25
 800de0e:	d5fb      	bpl.n	800de08 <_printf_i+0x1bc>
 800de10:	8019      	strh	r1, [r3, #0]
 800de12:	2300      	movs	r3, #0
 800de14:	6123      	str	r3, [r4, #16]
 800de16:	4616      	mov	r6, r2
 800de18:	e7bc      	b.n	800dd94 <_printf_i+0x148>
 800de1a:	6833      	ldr	r3, [r6, #0]
 800de1c:	1d1a      	adds	r2, r3, #4
 800de1e:	6032      	str	r2, [r6, #0]
 800de20:	681e      	ldr	r6, [r3, #0]
 800de22:	6862      	ldr	r2, [r4, #4]
 800de24:	2100      	movs	r1, #0
 800de26:	4630      	mov	r0, r6
 800de28:	f7f2 fa72 	bl	8000310 <memchr>
 800de2c:	b108      	cbz	r0, 800de32 <_printf_i+0x1e6>
 800de2e:	1b80      	subs	r0, r0, r6
 800de30:	6060      	str	r0, [r4, #4]
 800de32:	6863      	ldr	r3, [r4, #4]
 800de34:	6123      	str	r3, [r4, #16]
 800de36:	2300      	movs	r3, #0
 800de38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de3c:	e7aa      	b.n	800dd94 <_printf_i+0x148>
 800de3e:	6923      	ldr	r3, [r4, #16]
 800de40:	4632      	mov	r2, r6
 800de42:	4649      	mov	r1, r9
 800de44:	4640      	mov	r0, r8
 800de46:	47d0      	blx	sl
 800de48:	3001      	adds	r0, #1
 800de4a:	d0ad      	beq.n	800dda8 <_printf_i+0x15c>
 800de4c:	6823      	ldr	r3, [r4, #0]
 800de4e:	079b      	lsls	r3, r3, #30
 800de50:	d413      	bmi.n	800de7a <_printf_i+0x22e>
 800de52:	68e0      	ldr	r0, [r4, #12]
 800de54:	9b03      	ldr	r3, [sp, #12]
 800de56:	4298      	cmp	r0, r3
 800de58:	bfb8      	it	lt
 800de5a:	4618      	movlt	r0, r3
 800de5c:	e7a6      	b.n	800ddac <_printf_i+0x160>
 800de5e:	2301      	movs	r3, #1
 800de60:	4632      	mov	r2, r6
 800de62:	4649      	mov	r1, r9
 800de64:	4640      	mov	r0, r8
 800de66:	47d0      	blx	sl
 800de68:	3001      	adds	r0, #1
 800de6a:	d09d      	beq.n	800dda8 <_printf_i+0x15c>
 800de6c:	3501      	adds	r5, #1
 800de6e:	68e3      	ldr	r3, [r4, #12]
 800de70:	9903      	ldr	r1, [sp, #12]
 800de72:	1a5b      	subs	r3, r3, r1
 800de74:	42ab      	cmp	r3, r5
 800de76:	dcf2      	bgt.n	800de5e <_printf_i+0x212>
 800de78:	e7eb      	b.n	800de52 <_printf_i+0x206>
 800de7a:	2500      	movs	r5, #0
 800de7c:	f104 0619 	add.w	r6, r4, #25
 800de80:	e7f5      	b.n	800de6e <_printf_i+0x222>
 800de82:	bf00      	nop
 800de84:	08012aa4 	.word	0x08012aa4
 800de88:	08012ab5 	.word	0x08012ab5

0800de8c <_scanf_float>:
 800de8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de90:	b087      	sub	sp, #28
 800de92:	4617      	mov	r7, r2
 800de94:	9303      	str	r3, [sp, #12]
 800de96:	688b      	ldr	r3, [r1, #8]
 800de98:	1e5a      	subs	r2, r3, #1
 800de9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800de9e:	bf81      	itttt	hi
 800dea0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dea4:	eb03 0b05 	addhi.w	fp, r3, r5
 800dea8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800deac:	608b      	strhi	r3, [r1, #8]
 800deae:	680b      	ldr	r3, [r1, #0]
 800deb0:	460a      	mov	r2, r1
 800deb2:	f04f 0500 	mov.w	r5, #0
 800deb6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800deba:	f842 3b1c 	str.w	r3, [r2], #28
 800debe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dec2:	4680      	mov	r8, r0
 800dec4:	460c      	mov	r4, r1
 800dec6:	bf98      	it	ls
 800dec8:	f04f 0b00 	movls.w	fp, #0
 800decc:	9201      	str	r2, [sp, #4]
 800dece:	4616      	mov	r6, r2
 800ded0:	46aa      	mov	sl, r5
 800ded2:	46a9      	mov	r9, r5
 800ded4:	9502      	str	r5, [sp, #8]
 800ded6:	68a2      	ldr	r2, [r4, #8]
 800ded8:	b152      	cbz	r2, 800def0 <_scanf_float+0x64>
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	2b4e      	cmp	r3, #78	@ 0x4e
 800dee0:	d864      	bhi.n	800dfac <_scanf_float+0x120>
 800dee2:	2b40      	cmp	r3, #64	@ 0x40
 800dee4:	d83c      	bhi.n	800df60 <_scanf_float+0xd4>
 800dee6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800deea:	b2c8      	uxtb	r0, r1
 800deec:	280e      	cmp	r0, #14
 800deee:	d93a      	bls.n	800df66 <_scanf_float+0xda>
 800def0:	f1b9 0f00 	cmp.w	r9, #0
 800def4:	d003      	beq.n	800defe <_scanf_float+0x72>
 800def6:	6823      	ldr	r3, [r4, #0]
 800def8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800defc:	6023      	str	r3, [r4, #0]
 800defe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800df02:	f1ba 0f01 	cmp.w	sl, #1
 800df06:	f200 8117 	bhi.w	800e138 <_scanf_float+0x2ac>
 800df0a:	9b01      	ldr	r3, [sp, #4]
 800df0c:	429e      	cmp	r6, r3
 800df0e:	f200 8108 	bhi.w	800e122 <_scanf_float+0x296>
 800df12:	2001      	movs	r0, #1
 800df14:	b007      	add	sp, #28
 800df16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800df1e:	2a0d      	cmp	r2, #13
 800df20:	d8e6      	bhi.n	800def0 <_scanf_float+0x64>
 800df22:	a101      	add	r1, pc, #4	@ (adr r1, 800df28 <_scanf_float+0x9c>)
 800df24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df28:	0800e06f 	.word	0x0800e06f
 800df2c:	0800def1 	.word	0x0800def1
 800df30:	0800def1 	.word	0x0800def1
 800df34:	0800def1 	.word	0x0800def1
 800df38:	0800e0cf 	.word	0x0800e0cf
 800df3c:	0800e0a7 	.word	0x0800e0a7
 800df40:	0800def1 	.word	0x0800def1
 800df44:	0800def1 	.word	0x0800def1
 800df48:	0800e07d 	.word	0x0800e07d
 800df4c:	0800def1 	.word	0x0800def1
 800df50:	0800def1 	.word	0x0800def1
 800df54:	0800def1 	.word	0x0800def1
 800df58:	0800def1 	.word	0x0800def1
 800df5c:	0800e035 	.word	0x0800e035
 800df60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800df64:	e7db      	b.n	800df1e <_scanf_float+0x92>
 800df66:	290e      	cmp	r1, #14
 800df68:	d8c2      	bhi.n	800def0 <_scanf_float+0x64>
 800df6a:	a001      	add	r0, pc, #4	@ (adr r0, 800df70 <_scanf_float+0xe4>)
 800df6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800df70:	0800e025 	.word	0x0800e025
 800df74:	0800def1 	.word	0x0800def1
 800df78:	0800e025 	.word	0x0800e025
 800df7c:	0800e0bb 	.word	0x0800e0bb
 800df80:	0800def1 	.word	0x0800def1
 800df84:	0800dfcd 	.word	0x0800dfcd
 800df88:	0800e00b 	.word	0x0800e00b
 800df8c:	0800e00b 	.word	0x0800e00b
 800df90:	0800e00b 	.word	0x0800e00b
 800df94:	0800e00b 	.word	0x0800e00b
 800df98:	0800e00b 	.word	0x0800e00b
 800df9c:	0800e00b 	.word	0x0800e00b
 800dfa0:	0800e00b 	.word	0x0800e00b
 800dfa4:	0800e00b 	.word	0x0800e00b
 800dfa8:	0800e00b 	.word	0x0800e00b
 800dfac:	2b6e      	cmp	r3, #110	@ 0x6e
 800dfae:	d809      	bhi.n	800dfc4 <_scanf_float+0x138>
 800dfb0:	2b60      	cmp	r3, #96	@ 0x60
 800dfb2:	d8b2      	bhi.n	800df1a <_scanf_float+0x8e>
 800dfb4:	2b54      	cmp	r3, #84	@ 0x54
 800dfb6:	d07b      	beq.n	800e0b0 <_scanf_float+0x224>
 800dfb8:	2b59      	cmp	r3, #89	@ 0x59
 800dfba:	d199      	bne.n	800def0 <_scanf_float+0x64>
 800dfbc:	2d07      	cmp	r5, #7
 800dfbe:	d197      	bne.n	800def0 <_scanf_float+0x64>
 800dfc0:	2508      	movs	r5, #8
 800dfc2:	e02c      	b.n	800e01e <_scanf_float+0x192>
 800dfc4:	2b74      	cmp	r3, #116	@ 0x74
 800dfc6:	d073      	beq.n	800e0b0 <_scanf_float+0x224>
 800dfc8:	2b79      	cmp	r3, #121	@ 0x79
 800dfca:	e7f6      	b.n	800dfba <_scanf_float+0x12e>
 800dfcc:	6821      	ldr	r1, [r4, #0]
 800dfce:	05c8      	lsls	r0, r1, #23
 800dfd0:	d51b      	bpl.n	800e00a <_scanf_float+0x17e>
 800dfd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800dfd6:	6021      	str	r1, [r4, #0]
 800dfd8:	f109 0901 	add.w	r9, r9, #1
 800dfdc:	f1bb 0f00 	cmp.w	fp, #0
 800dfe0:	d003      	beq.n	800dfea <_scanf_float+0x15e>
 800dfe2:	3201      	adds	r2, #1
 800dfe4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800dfe8:	60a2      	str	r2, [r4, #8]
 800dfea:	68a3      	ldr	r3, [r4, #8]
 800dfec:	3b01      	subs	r3, #1
 800dfee:	60a3      	str	r3, [r4, #8]
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	3301      	adds	r3, #1
 800dff4:	6123      	str	r3, [r4, #16]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	3b01      	subs	r3, #1
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	607b      	str	r3, [r7, #4]
 800dffe:	f340 8087 	ble.w	800e110 <_scanf_float+0x284>
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	3301      	adds	r3, #1
 800e006:	603b      	str	r3, [r7, #0]
 800e008:	e765      	b.n	800ded6 <_scanf_float+0x4a>
 800e00a:	eb1a 0105 	adds.w	r1, sl, r5
 800e00e:	f47f af6f 	bne.w	800def0 <_scanf_float+0x64>
 800e012:	6822      	ldr	r2, [r4, #0]
 800e014:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e018:	6022      	str	r2, [r4, #0]
 800e01a:	460d      	mov	r5, r1
 800e01c:	468a      	mov	sl, r1
 800e01e:	f806 3b01 	strb.w	r3, [r6], #1
 800e022:	e7e2      	b.n	800dfea <_scanf_float+0x15e>
 800e024:	6822      	ldr	r2, [r4, #0]
 800e026:	0610      	lsls	r0, r2, #24
 800e028:	f57f af62 	bpl.w	800def0 <_scanf_float+0x64>
 800e02c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e030:	6022      	str	r2, [r4, #0]
 800e032:	e7f4      	b.n	800e01e <_scanf_float+0x192>
 800e034:	f1ba 0f00 	cmp.w	sl, #0
 800e038:	d10e      	bne.n	800e058 <_scanf_float+0x1cc>
 800e03a:	f1b9 0f00 	cmp.w	r9, #0
 800e03e:	d10e      	bne.n	800e05e <_scanf_float+0x1d2>
 800e040:	6822      	ldr	r2, [r4, #0]
 800e042:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e046:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e04a:	d108      	bne.n	800e05e <_scanf_float+0x1d2>
 800e04c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e050:	6022      	str	r2, [r4, #0]
 800e052:	f04f 0a01 	mov.w	sl, #1
 800e056:	e7e2      	b.n	800e01e <_scanf_float+0x192>
 800e058:	f1ba 0f02 	cmp.w	sl, #2
 800e05c:	d055      	beq.n	800e10a <_scanf_float+0x27e>
 800e05e:	2d01      	cmp	r5, #1
 800e060:	d002      	beq.n	800e068 <_scanf_float+0x1dc>
 800e062:	2d04      	cmp	r5, #4
 800e064:	f47f af44 	bne.w	800def0 <_scanf_float+0x64>
 800e068:	3501      	adds	r5, #1
 800e06a:	b2ed      	uxtb	r5, r5
 800e06c:	e7d7      	b.n	800e01e <_scanf_float+0x192>
 800e06e:	f1ba 0f01 	cmp.w	sl, #1
 800e072:	f47f af3d 	bne.w	800def0 <_scanf_float+0x64>
 800e076:	f04f 0a02 	mov.w	sl, #2
 800e07a:	e7d0      	b.n	800e01e <_scanf_float+0x192>
 800e07c:	b97d      	cbnz	r5, 800e09e <_scanf_float+0x212>
 800e07e:	f1b9 0f00 	cmp.w	r9, #0
 800e082:	f47f af38 	bne.w	800def6 <_scanf_float+0x6a>
 800e086:	6822      	ldr	r2, [r4, #0]
 800e088:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e08c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e090:	f040 8101 	bne.w	800e296 <_scanf_float+0x40a>
 800e094:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e098:	6022      	str	r2, [r4, #0]
 800e09a:	2501      	movs	r5, #1
 800e09c:	e7bf      	b.n	800e01e <_scanf_float+0x192>
 800e09e:	2d03      	cmp	r5, #3
 800e0a0:	d0e2      	beq.n	800e068 <_scanf_float+0x1dc>
 800e0a2:	2d05      	cmp	r5, #5
 800e0a4:	e7de      	b.n	800e064 <_scanf_float+0x1d8>
 800e0a6:	2d02      	cmp	r5, #2
 800e0a8:	f47f af22 	bne.w	800def0 <_scanf_float+0x64>
 800e0ac:	2503      	movs	r5, #3
 800e0ae:	e7b6      	b.n	800e01e <_scanf_float+0x192>
 800e0b0:	2d06      	cmp	r5, #6
 800e0b2:	f47f af1d 	bne.w	800def0 <_scanf_float+0x64>
 800e0b6:	2507      	movs	r5, #7
 800e0b8:	e7b1      	b.n	800e01e <_scanf_float+0x192>
 800e0ba:	6822      	ldr	r2, [r4, #0]
 800e0bc:	0591      	lsls	r1, r2, #22
 800e0be:	f57f af17 	bpl.w	800def0 <_scanf_float+0x64>
 800e0c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e0c6:	6022      	str	r2, [r4, #0]
 800e0c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800e0cc:	e7a7      	b.n	800e01e <_scanf_float+0x192>
 800e0ce:	6822      	ldr	r2, [r4, #0]
 800e0d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e0d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e0d8:	d006      	beq.n	800e0e8 <_scanf_float+0x25c>
 800e0da:	0550      	lsls	r0, r2, #21
 800e0dc:	f57f af08 	bpl.w	800def0 <_scanf_float+0x64>
 800e0e0:	f1b9 0f00 	cmp.w	r9, #0
 800e0e4:	f000 80d7 	beq.w	800e296 <_scanf_float+0x40a>
 800e0e8:	0591      	lsls	r1, r2, #22
 800e0ea:	bf58      	it	pl
 800e0ec:	9902      	ldrpl	r1, [sp, #8]
 800e0ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e0f2:	bf58      	it	pl
 800e0f4:	eba9 0101 	subpl.w	r1, r9, r1
 800e0f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e0fc:	bf58      	it	pl
 800e0fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e102:	6022      	str	r2, [r4, #0]
 800e104:	f04f 0900 	mov.w	r9, #0
 800e108:	e789      	b.n	800e01e <_scanf_float+0x192>
 800e10a:	f04f 0a03 	mov.w	sl, #3
 800e10e:	e786      	b.n	800e01e <_scanf_float+0x192>
 800e110:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e114:	4639      	mov	r1, r7
 800e116:	4640      	mov	r0, r8
 800e118:	4798      	blx	r3
 800e11a:	2800      	cmp	r0, #0
 800e11c:	f43f aedb 	beq.w	800ded6 <_scanf_float+0x4a>
 800e120:	e6e6      	b.n	800def0 <_scanf_float+0x64>
 800e122:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e12a:	463a      	mov	r2, r7
 800e12c:	4640      	mov	r0, r8
 800e12e:	4798      	blx	r3
 800e130:	6923      	ldr	r3, [r4, #16]
 800e132:	3b01      	subs	r3, #1
 800e134:	6123      	str	r3, [r4, #16]
 800e136:	e6e8      	b.n	800df0a <_scanf_float+0x7e>
 800e138:	1e6b      	subs	r3, r5, #1
 800e13a:	2b06      	cmp	r3, #6
 800e13c:	d824      	bhi.n	800e188 <_scanf_float+0x2fc>
 800e13e:	2d02      	cmp	r5, #2
 800e140:	d836      	bhi.n	800e1b0 <_scanf_float+0x324>
 800e142:	9b01      	ldr	r3, [sp, #4]
 800e144:	429e      	cmp	r6, r3
 800e146:	f67f aee4 	bls.w	800df12 <_scanf_float+0x86>
 800e14a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e14e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e152:	463a      	mov	r2, r7
 800e154:	4640      	mov	r0, r8
 800e156:	4798      	blx	r3
 800e158:	6923      	ldr	r3, [r4, #16]
 800e15a:	3b01      	subs	r3, #1
 800e15c:	6123      	str	r3, [r4, #16]
 800e15e:	e7f0      	b.n	800e142 <_scanf_float+0x2b6>
 800e160:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e164:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e168:	463a      	mov	r2, r7
 800e16a:	4640      	mov	r0, r8
 800e16c:	4798      	blx	r3
 800e16e:	6923      	ldr	r3, [r4, #16]
 800e170:	3b01      	subs	r3, #1
 800e172:	6123      	str	r3, [r4, #16]
 800e174:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e178:	fa5f fa8a 	uxtb.w	sl, sl
 800e17c:	f1ba 0f02 	cmp.w	sl, #2
 800e180:	d1ee      	bne.n	800e160 <_scanf_float+0x2d4>
 800e182:	3d03      	subs	r5, #3
 800e184:	b2ed      	uxtb	r5, r5
 800e186:	1b76      	subs	r6, r6, r5
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	05da      	lsls	r2, r3, #23
 800e18c:	d530      	bpl.n	800e1f0 <_scanf_float+0x364>
 800e18e:	055b      	lsls	r3, r3, #21
 800e190:	d511      	bpl.n	800e1b6 <_scanf_float+0x32a>
 800e192:	9b01      	ldr	r3, [sp, #4]
 800e194:	429e      	cmp	r6, r3
 800e196:	f67f aebc 	bls.w	800df12 <_scanf_float+0x86>
 800e19a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e19e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1a2:	463a      	mov	r2, r7
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	4798      	blx	r3
 800e1a8:	6923      	ldr	r3, [r4, #16]
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	6123      	str	r3, [r4, #16]
 800e1ae:	e7f0      	b.n	800e192 <_scanf_float+0x306>
 800e1b0:	46aa      	mov	sl, r5
 800e1b2:	46b3      	mov	fp, r6
 800e1b4:	e7de      	b.n	800e174 <_scanf_float+0x2e8>
 800e1b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e1ba:	6923      	ldr	r3, [r4, #16]
 800e1bc:	2965      	cmp	r1, #101	@ 0x65
 800e1be:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e1c2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800e1c6:	6123      	str	r3, [r4, #16]
 800e1c8:	d00c      	beq.n	800e1e4 <_scanf_float+0x358>
 800e1ca:	2945      	cmp	r1, #69	@ 0x45
 800e1cc:	d00a      	beq.n	800e1e4 <_scanf_float+0x358>
 800e1ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1d2:	463a      	mov	r2, r7
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	4798      	blx	r3
 800e1d8:	6923      	ldr	r3, [r4, #16]
 800e1da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	1eb5      	subs	r5, r6, #2
 800e1e2:	6123      	str	r3, [r4, #16]
 800e1e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1e8:	463a      	mov	r2, r7
 800e1ea:	4640      	mov	r0, r8
 800e1ec:	4798      	blx	r3
 800e1ee:	462e      	mov	r6, r5
 800e1f0:	6822      	ldr	r2, [r4, #0]
 800e1f2:	f012 0210 	ands.w	r2, r2, #16
 800e1f6:	d001      	beq.n	800e1fc <_scanf_float+0x370>
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	e68b      	b.n	800df14 <_scanf_float+0x88>
 800e1fc:	7032      	strb	r2, [r6, #0]
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e208:	d11a      	bne.n	800e240 <_scanf_float+0x3b4>
 800e20a:	9b02      	ldr	r3, [sp, #8]
 800e20c:	454b      	cmp	r3, r9
 800e20e:	eba3 0209 	sub.w	r2, r3, r9
 800e212:	d121      	bne.n	800e258 <_scanf_float+0x3cc>
 800e214:	9901      	ldr	r1, [sp, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	4640      	mov	r0, r8
 800e21a:	f000 ff33 	bl	800f084 <_strtod_r>
 800e21e:	9b03      	ldr	r3, [sp, #12]
 800e220:	6821      	ldr	r1, [r4, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f011 0f02 	tst.w	r1, #2
 800e228:	f103 0204 	add.w	r2, r3, #4
 800e22c:	d01f      	beq.n	800e26e <_scanf_float+0x3e2>
 800e22e:	9903      	ldr	r1, [sp, #12]
 800e230:	600a      	str	r2, [r1, #0]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	ed83 0b00 	vstr	d0, [r3]
 800e238:	68e3      	ldr	r3, [r4, #12]
 800e23a:	3301      	adds	r3, #1
 800e23c:	60e3      	str	r3, [r4, #12]
 800e23e:	e7db      	b.n	800e1f8 <_scanf_float+0x36c>
 800e240:	9b04      	ldr	r3, [sp, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d0e6      	beq.n	800e214 <_scanf_float+0x388>
 800e246:	9905      	ldr	r1, [sp, #20]
 800e248:	230a      	movs	r3, #10
 800e24a:	3101      	adds	r1, #1
 800e24c:	4640      	mov	r0, r8
 800e24e:	f000 ff99 	bl	800f184 <_strtol_r>
 800e252:	9b04      	ldr	r3, [sp, #16]
 800e254:	9e05      	ldr	r6, [sp, #20]
 800e256:	1ac2      	subs	r2, r0, r3
 800e258:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e25c:	429e      	cmp	r6, r3
 800e25e:	bf28      	it	cs
 800e260:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e264:	490d      	ldr	r1, [pc, #52]	@ (800e29c <_scanf_float+0x410>)
 800e266:	4630      	mov	r0, r6
 800e268:	f000 f828 	bl	800e2bc <siprintf>
 800e26c:	e7d2      	b.n	800e214 <_scanf_float+0x388>
 800e26e:	f011 0f04 	tst.w	r1, #4
 800e272:	9903      	ldr	r1, [sp, #12]
 800e274:	600a      	str	r2, [r1, #0]
 800e276:	d1dc      	bne.n	800e232 <_scanf_float+0x3a6>
 800e278:	eeb4 0b40 	vcmp.f64	d0, d0
 800e27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e280:	681d      	ldr	r5, [r3, #0]
 800e282:	d705      	bvc.n	800e290 <_scanf_float+0x404>
 800e284:	4806      	ldr	r0, [pc, #24]	@ (800e2a0 <_scanf_float+0x414>)
 800e286:	f001 f8db 	bl	800f440 <nanf>
 800e28a:	ed85 0a00 	vstr	s0, [r5]
 800e28e:	e7d3      	b.n	800e238 <_scanf_float+0x3ac>
 800e290:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e294:	e7f9      	b.n	800e28a <_scanf_float+0x3fe>
 800e296:	f04f 0900 	mov.w	r9, #0
 800e29a:	e630      	b.n	800defe <_scanf_float+0x72>
 800e29c:	08012ac6 	.word	0x08012ac6
 800e2a0:	08012ed3 	.word	0x08012ed3

0800e2a4 <__malloc_lock>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	@ (800e2ac <__malloc_lock+0x8>)
 800e2a6:	f001 b8b2 	b.w	800f40e <__retarget_lock_acquire_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	24000e00 	.word	0x24000e00

0800e2b0 <__malloc_unlock>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	@ (800e2b8 <__malloc_unlock+0x8>)
 800e2b2:	f001 b8ad 	b.w	800f410 <__retarget_lock_release_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	24000e00 	.word	0x24000e00

0800e2bc <siprintf>:
 800e2bc:	b40e      	push	{r1, r2, r3}
 800e2be:	b500      	push	{lr}
 800e2c0:	b09c      	sub	sp, #112	@ 0x70
 800e2c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800e2c4:	9002      	str	r0, [sp, #8]
 800e2c6:	9006      	str	r0, [sp, #24]
 800e2c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e2cc:	4809      	ldr	r0, [pc, #36]	@ (800e2f4 <siprintf+0x38>)
 800e2ce:	9107      	str	r1, [sp, #28]
 800e2d0:	9104      	str	r1, [sp, #16]
 800e2d2:	4909      	ldr	r1, [pc, #36]	@ (800e2f8 <siprintf+0x3c>)
 800e2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2d8:	9105      	str	r1, [sp, #20]
 800e2da:	6800      	ldr	r0, [r0, #0]
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	a902      	add	r1, sp, #8
 800e2e0:	f002 fa72 	bl	80107c8 <_svfiprintf_r>
 800e2e4:	9b02      	ldr	r3, [sp, #8]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	701a      	strb	r2, [r3, #0]
 800e2ea:	b01c      	add	sp, #112	@ 0x70
 800e2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2f0:	b003      	add	sp, #12
 800e2f2:	4770      	bx	lr
 800e2f4:	24000190 	.word	0x24000190
 800e2f8:	ffff0208 	.word	0xffff0208

0800e2fc <siscanf>:
 800e2fc:	b40e      	push	{r1, r2, r3}
 800e2fe:	b530      	push	{r4, r5, lr}
 800e300:	b09c      	sub	sp, #112	@ 0x70
 800e302:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e304:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e308:	f854 5b04 	ldr.w	r5, [r4], #4
 800e30c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e310:	9002      	str	r0, [sp, #8]
 800e312:	9006      	str	r0, [sp, #24]
 800e314:	f7f2 f84c 	bl	80003b0 <strlen>
 800e318:	4b0b      	ldr	r3, [pc, #44]	@ (800e348 <siscanf+0x4c>)
 800e31a:	9003      	str	r0, [sp, #12]
 800e31c:	9007      	str	r0, [sp, #28]
 800e31e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e320:	480a      	ldr	r0, [pc, #40]	@ (800e34c <siscanf+0x50>)
 800e322:	9401      	str	r4, [sp, #4]
 800e324:	2300      	movs	r3, #0
 800e326:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e328:	9314      	str	r3, [sp, #80]	@ 0x50
 800e32a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e32e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e332:	462a      	mov	r2, r5
 800e334:	4623      	mov	r3, r4
 800e336:	a902      	add	r1, sp, #8
 800e338:	6800      	ldr	r0, [r0, #0]
 800e33a:	f002 fb99 	bl	8010a70 <__ssvfiscanf_r>
 800e33e:	b01c      	add	sp, #112	@ 0x70
 800e340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e344:	b003      	add	sp, #12
 800e346:	4770      	bx	lr
 800e348:	0800e373 	.word	0x0800e373
 800e34c:	24000190 	.word	0x24000190

0800e350 <__sread>:
 800e350:	b510      	push	{r4, lr}
 800e352:	460c      	mov	r4, r1
 800e354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e358:	f000 fffa 	bl	800f350 <_read_r>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	bfab      	itete	ge
 800e360:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e362:	89a3      	ldrhlt	r3, [r4, #12]
 800e364:	181b      	addge	r3, r3, r0
 800e366:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e36a:	bfac      	ite	ge
 800e36c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e36e:	81a3      	strhlt	r3, [r4, #12]
 800e370:	bd10      	pop	{r4, pc}

0800e372 <__seofread>:
 800e372:	2000      	movs	r0, #0
 800e374:	4770      	bx	lr

0800e376 <__swrite>:
 800e376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e37a:	461f      	mov	r7, r3
 800e37c:	898b      	ldrh	r3, [r1, #12]
 800e37e:	05db      	lsls	r3, r3, #23
 800e380:	4605      	mov	r5, r0
 800e382:	460c      	mov	r4, r1
 800e384:	4616      	mov	r6, r2
 800e386:	d505      	bpl.n	800e394 <__swrite+0x1e>
 800e388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e38c:	2302      	movs	r3, #2
 800e38e:	2200      	movs	r2, #0
 800e390:	f000 ffcc 	bl	800f32c <_lseek_r>
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e39a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e39e:	81a3      	strh	r3, [r4, #12]
 800e3a0:	4632      	mov	r2, r6
 800e3a2:	463b      	mov	r3, r7
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3aa:	f000 bff3 	b.w	800f394 <_write_r>

0800e3ae <__sseek>:
 800e3ae:	b510      	push	{r4, lr}
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3b6:	f000 ffb9 	bl	800f32c <_lseek_r>
 800e3ba:	1c43      	adds	r3, r0, #1
 800e3bc:	89a3      	ldrh	r3, [r4, #12]
 800e3be:	bf15      	itete	ne
 800e3c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e3c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e3c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e3ca:	81a3      	strheq	r3, [r4, #12]
 800e3cc:	bf18      	it	ne
 800e3ce:	81a3      	strhne	r3, [r4, #12]
 800e3d0:	bd10      	pop	{r4, pc}

0800e3d2 <__sclose>:
 800e3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d6:	f000 bf99 	b.w	800f30c <_close_r>
	...

0800e3dc <std>:
 800e3dc:	2300      	movs	r3, #0
 800e3de:	b510      	push	{r4, lr}
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	e9c0 3300 	strd	r3, r3, [r0]
 800e3e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3ea:	6083      	str	r3, [r0, #8]
 800e3ec:	8181      	strh	r1, [r0, #12]
 800e3ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800e3f0:	81c2      	strh	r2, [r0, #14]
 800e3f2:	6183      	str	r3, [r0, #24]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	2208      	movs	r2, #8
 800e3f8:	305c      	adds	r0, #92	@ 0x5c
 800e3fa:	f000 ff7b 	bl	800f2f4 <memset>
 800e3fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e434 <std+0x58>)
 800e400:	6263      	str	r3, [r4, #36]	@ 0x24
 800e402:	4b0d      	ldr	r3, [pc, #52]	@ (800e438 <std+0x5c>)
 800e404:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e406:	4b0d      	ldr	r3, [pc, #52]	@ (800e43c <std+0x60>)
 800e408:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e40a:	4b0d      	ldr	r3, [pc, #52]	@ (800e440 <std+0x64>)
 800e40c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e40e:	4b0d      	ldr	r3, [pc, #52]	@ (800e444 <std+0x68>)
 800e410:	6224      	str	r4, [r4, #32]
 800e412:	429c      	cmp	r4, r3
 800e414:	d006      	beq.n	800e424 <std+0x48>
 800e416:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e41a:	4294      	cmp	r4, r2
 800e41c:	d002      	beq.n	800e424 <std+0x48>
 800e41e:	33d0      	adds	r3, #208	@ 0xd0
 800e420:	429c      	cmp	r4, r3
 800e422:	d105      	bne.n	800e430 <std+0x54>
 800e424:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e42c:	f000 bfee 	b.w	800f40c <__retarget_lock_init_recursive>
 800e430:	bd10      	pop	{r4, pc}
 800e432:	bf00      	nop
 800e434:	0800e351 	.word	0x0800e351
 800e438:	0800e377 	.word	0x0800e377
 800e43c:	0800e3af 	.word	0x0800e3af
 800e440:	0800e3d3 	.word	0x0800e3d3
 800e444:	24000cc0 	.word	0x24000cc0

0800e448 <stdio_exit_handler>:
 800e448:	4a02      	ldr	r2, [pc, #8]	@ (800e454 <stdio_exit_handler+0xc>)
 800e44a:	4903      	ldr	r1, [pc, #12]	@ (800e458 <stdio_exit_handler+0x10>)
 800e44c:	4803      	ldr	r0, [pc, #12]	@ (800e45c <stdio_exit_handler+0x14>)
 800e44e:	f000 be9b 	b.w	800f188 <_fwalk_sglue>
 800e452:	bf00      	nop
 800e454:	24000018 	.word	0x24000018
 800e458:	08011419 	.word	0x08011419
 800e45c:	24000194 	.word	0x24000194

0800e460 <cleanup_stdio>:
 800e460:	6841      	ldr	r1, [r0, #4]
 800e462:	4b0c      	ldr	r3, [pc, #48]	@ (800e494 <cleanup_stdio+0x34>)
 800e464:	4299      	cmp	r1, r3
 800e466:	b510      	push	{r4, lr}
 800e468:	4604      	mov	r4, r0
 800e46a:	d001      	beq.n	800e470 <cleanup_stdio+0x10>
 800e46c:	f002 ffd4 	bl	8011418 <_fflush_r>
 800e470:	68a1      	ldr	r1, [r4, #8]
 800e472:	4b09      	ldr	r3, [pc, #36]	@ (800e498 <cleanup_stdio+0x38>)
 800e474:	4299      	cmp	r1, r3
 800e476:	d002      	beq.n	800e47e <cleanup_stdio+0x1e>
 800e478:	4620      	mov	r0, r4
 800e47a:	f002 ffcd 	bl	8011418 <_fflush_r>
 800e47e:	68e1      	ldr	r1, [r4, #12]
 800e480:	4b06      	ldr	r3, [pc, #24]	@ (800e49c <cleanup_stdio+0x3c>)
 800e482:	4299      	cmp	r1, r3
 800e484:	d004      	beq.n	800e490 <cleanup_stdio+0x30>
 800e486:	4620      	mov	r0, r4
 800e488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e48c:	f002 bfc4 	b.w	8011418 <_fflush_r>
 800e490:	bd10      	pop	{r4, pc}
 800e492:	bf00      	nop
 800e494:	24000cc0 	.word	0x24000cc0
 800e498:	24000d28 	.word	0x24000d28
 800e49c:	24000d90 	.word	0x24000d90

0800e4a0 <global_stdio_init.part.0>:
 800e4a0:	b510      	push	{r4, lr}
 800e4a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d0 <global_stdio_init.part.0+0x30>)
 800e4a4:	4c0b      	ldr	r4, [pc, #44]	@ (800e4d4 <global_stdio_init.part.0+0x34>)
 800e4a6:	4a0c      	ldr	r2, [pc, #48]	@ (800e4d8 <global_stdio_init.part.0+0x38>)
 800e4a8:	601a      	str	r2, [r3, #0]
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	2104      	movs	r1, #4
 800e4b0:	f7ff ff94 	bl	800e3dc <std>
 800e4b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	2109      	movs	r1, #9
 800e4bc:	f7ff ff8e 	bl	800e3dc <std>
 800e4c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e4c4:	2202      	movs	r2, #2
 800e4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ca:	2112      	movs	r1, #18
 800e4cc:	f7ff bf86 	b.w	800e3dc <std>
 800e4d0:	24000df8 	.word	0x24000df8
 800e4d4:	24000cc0 	.word	0x24000cc0
 800e4d8:	0800e449 	.word	0x0800e449

0800e4dc <__sfp_lock_acquire>:
 800e4dc:	4801      	ldr	r0, [pc, #4]	@ (800e4e4 <__sfp_lock_acquire+0x8>)
 800e4de:	f000 bf96 	b.w	800f40e <__retarget_lock_acquire_recursive>
 800e4e2:	bf00      	nop
 800e4e4:	24000e01 	.word	0x24000e01

0800e4e8 <__sfp_lock_release>:
 800e4e8:	4801      	ldr	r0, [pc, #4]	@ (800e4f0 <__sfp_lock_release+0x8>)
 800e4ea:	f000 bf91 	b.w	800f410 <__retarget_lock_release_recursive>
 800e4ee:	bf00      	nop
 800e4f0:	24000e01 	.word	0x24000e01

0800e4f4 <__sinit>:
 800e4f4:	b510      	push	{r4, lr}
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	f7ff fff0 	bl	800e4dc <__sfp_lock_acquire>
 800e4fc:	6a23      	ldr	r3, [r4, #32]
 800e4fe:	b11b      	cbz	r3, 800e508 <__sinit+0x14>
 800e500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e504:	f7ff bff0 	b.w	800e4e8 <__sfp_lock_release>
 800e508:	4b04      	ldr	r3, [pc, #16]	@ (800e51c <__sinit+0x28>)
 800e50a:	6223      	str	r3, [r4, #32]
 800e50c:	4b04      	ldr	r3, [pc, #16]	@ (800e520 <__sinit+0x2c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1f5      	bne.n	800e500 <__sinit+0xc>
 800e514:	f7ff ffc4 	bl	800e4a0 <global_stdio_init.part.0>
 800e518:	e7f2      	b.n	800e500 <__sinit+0xc>
 800e51a:	bf00      	nop
 800e51c:	0800e461 	.word	0x0800e461
 800e520:	24000df8 	.word	0x24000df8

0800e524 <sulp>:
 800e524:	b570      	push	{r4, r5, r6, lr}
 800e526:	4604      	mov	r4, r0
 800e528:	460d      	mov	r5, r1
 800e52a:	4616      	mov	r6, r2
 800e52c:	ec45 4b10 	vmov	d0, r4, r5
 800e530:	f003 fb0e 	bl	8011b50 <__ulp>
 800e534:	b17e      	cbz	r6, 800e556 <sulp+0x32>
 800e536:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e53a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e53e:	2b00      	cmp	r3, #0
 800e540:	dd09      	ble.n	800e556 <sulp+0x32>
 800e542:	051b      	lsls	r3, r3, #20
 800e544:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e548:	2000      	movs	r0, #0
 800e54a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e54e:	ec41 0b17 	vmov	d7, r0, r1
 800e552:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e556:	bd70      	pop	{r4, r5, r6, pc}

0800e558 <_strtod_l>:
 800e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e55c:	ed2d 8b0a 	vpush	{d8-d12}
 800e560:	b097      	sub	sp, #92	@ 0x5c
 800e562:	4688      	mov	r8, r1
 800e564:	920e      	str	r2, [sp, #56]	@ 0x38
 800e566:	2200      	movs	r2, #0
 800e568:	9212      	str	r2, [sp, #72]	@ 0x48
 800e56a:	9005      	str	r0, [sp, #20]
 800e56c:	f04f 0a00 	mov.w	sl, #0
 800e570:	f04f 0b00 	mov.w	fp, #0
 800e574:	460a      	mov	r2, r1
 800e576:	9211      	str	r2, [sp, #68]	@ 0x44
 800e578:	7811      	ldrb	r1, [r2, #0]
 800e57a:	292b      	cmp	r1, #43	@ 0x2b
 800e57c:	d04c      	beq.n	800e618 <_strtod_l+0xc0>
 800e57e:	d839      	bhi.n	800e5f4 <_strtod_l+0x9c>
 800e580:	290d      	cmp	r1, #13
 800e582:	d833      	bhi.n	800e5ec <_strtod_l+0x94>
 800e584:	2908      	cmp	r1, #8
 800e586:	d833      	bhi.n	800e5f0 <_strtod_l+0x98>
 800e588:	2900      	cmp	r1, #0
 800e58a:	d03c      	beq.n	800e606 <_strtod_l+0xae>
 800e58c:	2200      	movs	r2, #0
 800e58e:	9208      	str	r2, [sp, #32]
 800e590:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e592:	782a      	ldrb	r2, [r5, #0]
 800e594:	2a30      	cmp	r2, #48	@ 0x30
 800e596:	f040 80b5 	bne.w	800e704 <_strtod_l+0x1ac>
 800e59a:	786a      	ldrb	r2, [r5, #1]
 800e59c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e5a0:	2a58      	cmp	r2, #88	@ 0x58
 800e5a2:	d170      	bne.n	800e686 <_strtod_l+0x12e>
 800e5a4:	9302      	str	r3, [sp, #8]
 800e5a6:	9b08      	ldr	r3, [sp, #32]
 800e5a8:	9301      	str	r3, [sp, #4]
 800e5aa:	ab12      	add	r3, sp, #72	@ 0x48
 800e5ac:	9300      	str	r3, [sp, #0]
 800e5ae:	4a8b      	ldr	r2, [pc, #556]	@ (800e7dc <_strtod_l+0x284>)
 800e5b0:	9805      	ldr	r0, [sp, #20]
 800e5b2:	ab13      	add	r3, sp, #76	@ 0x4c
 800e5b4:	a911      	add	r1, sp, #68	@ 0x44
 800e5b6:	f001 fddb 	bl	8010170 <__gethex>
 800e5ba:	f010 060f 	ands.w	r6, r0, #15
 800e5be:	4604      	mov	r4, r0
 800e5c0:	d005      	beq.n	800e5ce <_strtod_l+0x76>
 800e5c2:	2e06      	cmp	r6, #6
 800e5c4:	d12a      	bne.n	800e61c <_strtod_l+0xc4>
 800e5c6:	3501      	adds	r5, #1
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	9511      	str	r5, [sp, #68]	@ 0x44
 800e5cc:	9308      	str	r3, [sp, #32]
 800e5ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f040 852f 	bne.w	800f034 <_strtod_l+0xadc>
 800e5d6:	9b08      	ldr	r3, [sp, #32]
 800e5d8:	ec4b ab10 	vmov	d0, sl, fp
 800e5dc:	b1cb      	cbz	r3, 800e612 <_strtod_l+0xba>
 800e5de:	eeb1 0b40 	vneg.f64	d0, d0
 800e5e2:	b017      	add	sp, #92	@ 0x5c
 800e5e4:	ecbd 8b0a 	vpop	{d8-d12}
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ec:	2920      	cmp	r1, #32
 800e5ee:	d1cd      	bne.n	800e58c <_strtod_l+0x34>
 800e5f0:	3201      	adds	r2, #1
 800e5f2:	e7c0      	b.n	800e576 <_strtod_l+0x1e>
 800e5f4:	292d      	cmp	r1, #45	@ 0x2d
 800e5f6:	d1c9      	bne.n	800e58c <_strtod_l+0x34>
 800e5f8:	2101      	movs	r1, #1
 800e5fa:	9108      	str	r1, [sp, #32]
 800e5fc:	1c51      	adds	r1, r2, #1
 800e5fe:	9111      	str	r1, [sp, #68]	@ 0x44
 800e600:	7852      	ldrb	r2, [r2, #1]
 800e602:	2a00      	cmp	r2, #0
 800e604:	d1c4      	bne.n	800e590 <_strtod_l+0x38>
 800e606:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e608:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f040 850f 	bne.w	800f030 <_strtod_l+0xad8>
 800e612:	ec4b ab10 	vmov	d0, sl, fp
 800e616:	e7e4      	b.n	800e5e2 <_strtod_l+0x8a>
 800e618:	2100      	movs	r1, #0
 800e61a:	e7ee      	b.n	800e5fa <_strtod_l+0xa2>
 800e61c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e61e:	b13a      	cbz	r2, 800e630 <_strtod_l+0xd8>
 800e620:	2135      	movs	r1, #53	@ 0x35
 800e622:	a814      	add	r0, sp, #80	@ 0x50
 800e624:	f003 fb8b 	bl	8011d3e <__copybits>
 800e628:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e62a:	9805      	ldr	r0, [sp, #20]
 800e62c:	f002 ff5c 	bl	80114e8 <_Bfree>
 800e630:	1e73      	subs	r3, r6, #1
 800e632:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e634:	2b04      	cmp	r3, #4
 800e636:	d806      	bhi.n	800e646 <_strtod_l+0xee>
 800e638:	e8df f003 	tbb	[pc, r3]
 800e63c:	201d0314 	.word	0x201d0314
 800e640:	14          	.byte	0x14
 800e641:	00          	.byte	0x00
 800e642:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e646:	05e3      	lsls	r3, r4, #23
 800e648:	bf48      	it	mi
 800e64a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e64e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e652:	0d1b      	lsrs	r3, r3, #20
 800e654:	051b      	lsls	r3, r3, #20
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1b9      	bne.n	800e5ce <_strtod_l+0x76>
 800e65a:	f000 fead 	bl	800f3b8 <__errno>
 800e65e:	2322      	movs	r3, #34	@ 0x22
 800e660:	6003      	str	r3, [r0, #0]
 800e662:	e7b4      	b.n	800e5ce <_strtod_l+0x76>
 800e664:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e668:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e66c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e670:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e674:	e7e7      	b.n	800e646 <_strtod_l+0xee>
 800e676:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e7e4 <_strtod_l+0x28c>
 800e67a:	e7e4      	b.n	800e646 <_strtod_l+0xee>
 800e67c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e680:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e684:	e7df      	b.n	800e646 <_strtod_l+0xee>
 800e686:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e688:	1c5a      	adds	r2, r3, #1
 800e68a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e68c:	785b      	ldrb	r3, [r3, #1]
 800e68e:	2b30      	cmp	r3, #48	@ 0x30
 800e690:	d0f9      	beq.n	800e686 <_strtod_l+0x12e>
 800e692:	2b00      	cmp	r3, #0
 800e694:	d09b      	beq.n	800e5ce <_strtod_l+0x76>
 800e696:	2301      	movs	r3, #1
 800e698:	2600      	movs	r6, #0
 800e69a:	9307      	str	r3, [sp, #28]
 800e69c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e69e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6a0:	46b1      	mov	r9, r6
 800e6a2:	4635      	mov	r5, r6
 800e6a4:	220a      	movs	r2, #10
 800e6a6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e6a8:	7804      	ldrb	r4, [r0, #0]
 800e6aa:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e6ae:	b2d9      	uxtb	r1, r3
 800e6b0:	2909      	cmp	r1, #9
 800e6b2:	d929      	bls.n	800e708 <_strtod_l+0x1b0>
 800e6b4:	494a      	ldr	r1, [pc, #296]	@ (800e7e0 <_strtod_l+0x288>)
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f000 fdf4 	bl	800f2a4 <strncmp>
 800e6bc:	b378      	cbz	r0, 800e71e <_strtod_l+0x1c6>
 800e6be:	2000      	movs	r0, #0
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	462b      	mov	r3, r5
 800e6c4:	4607      	mov	r7, r0
 800e6c6:	9006      	str	r0, [sp, #24]
 800e6c8:	2a65      	cmp	r2, #101	@ 0x65
 800e6ca:	d001      	beq.n	800e6d0 <_strtod_l+0x178>
 800e6cc:	2a45      	cmp	r2, #69	@ 0x45
 800e6ce:	d117      	bne.n	800e700 <_strtod_l+0x1a8>
 800e6d0:	b91b      	cbnz	r3, 800e6da <_strtod_l+0x182>
 800e6d2:	9b07      	ldr	r3, [sp, #28]
 800e6d4:	4303      	orrs	r3, r0
 800e6d6:	d096      	beq.n	800e606 <_strtod_l+0xae>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e6de:	f108 0201 	add.w	r2, r8, #1
 800e6e2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e6e4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e6e8:	2a2b      	cmp	r2, #43	@ 0x2b
 800e6ea:	d06b      	beq.n	800e7c4 <_strtod_l+0x26c>
 800e6ec:	2a2d      	cmp	r2, #45	@ 0x2d
 800e6ee:	d071      	beq.n	800e7d4 <_strtod_l+0x27c>
 800e6f0:	f04f 0e00 	mov.w	lr, #0
 800e6f4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e6f8:	2c09      	cmp	r4, #9
 800e6fa:	d979      	bls.n	800e7f0 <_strtod_l+0x298>
 800e6fc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e700:	2400      	movs	r4, #0
 800e702:	e094      	b.n	800e82e <_strtod_l+0x2d6>
 800e704:	2300      	movs	r3, #0
 800e706:	e7c7      	b.n	800e698 <_strtod_l+0x140>
 800e708:	2d08      	cmp	r5, #8
 800e70a:	f100 0001 	add.w	r0, r0, #1
 800e70e:	bfd4      	ite	le
 800e710:	fb02 3909 	mlale	r9, r2, r9, r3
 800e714:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e718:	3501      	adds	r5, #1
 800e71a:	9011      	str	r0, [sp, #68]	@ 0x44
 800e71c:	e7c3      	b.n	800e6a6 <_strtod_l+0x14e>
 800e71e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e720:	1c5a      	adds	r2, r3, #1
 800e722:	9211      	str	r2, [sp, #68]	@ 0x44
 800e724:	785a      	ldrb	r2, [r3, #1]
 800e726:	b375      	cbz	r5, 800e786 <_strtod_l+0x22e>
 800e728:	4607      	mov	r7, r0
 800e72a:	462b      	mov	r3, r5
 800e72c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e730:	2909      	cmp	r1, #9
 800e732:	d913      	bls.n	800e75c <_strtod_l+0x204>
 800e734:	2101      	movs	r1, #1
 800e736:	9106      	str	r1, [sp, #24]
 800e738:	e7c6      	b.n	800e6c8 <_strtod_l+0x170>
 800e73a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e73c:	1c5a      	adds	r2, r3, #1
 800e73e:	9211      	str	r2, [sp, #68]	@ 0x44
 800e740:	785a      	ldrb	r2, [r3, #1]
 800e742:	3001      	adds	r0, #1
 800e744:	2a30      	cmp	r2, #48	@ 0x30
 800e746:	d0f8      	beq.n	800e73a <_strtod_l+0x1e2>
 800e748:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e74c:	2b08      	cmp	r3, #8
 800e74e:	f200 8476 	bhi.w	800f03e <_strtod_l+0xae6>
 800e752:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e754:	930a      	str	r3, [sp, #40]	@ 0x28
 800e756:	4607      	mov	r7, r0
 800e758:	2000      	movs	r0, #0
 800e75a:	4603      	mov	r3, r0
 800e75c:	3a30      	subs	r2, #48	@ 0x30
 800e75e:	f100 0101 	add.w	r1, r0, #1
 800e762:	d023      	beq.n	800e7ac <_strtod_l+0x254>
 800e764:	440f      	add	r7, r1
 800e766:	eb00 0c03 	add.w	ip, r0, r3
 800e76a:	4619      	mov	r1, r3
 800e76c:	240a      	movs	r4, #10
 800e76e:	4561      	cmp	r1, ip
 800e770:	d10b      	bne.n	800e78a <_strtod_l+0x232>
 800e772:	1c5c      	adds	r4, r3, #1
 800e774:	4403      	add	r3, r0
 800e776:	2b08      	cmp	r3, #8
 800e778:	4404      	add	r4, r0
 800e77a:	dc11      	bgt.n	800e7a0 <_strtod_l+0x248>
 800e77c:	230a      	movs	r3, #10
 800e77e:	fb03 2909 	mla	r9, r3, r9, r2
 800e782:	2100      	movs	r1, #0
 800e784:	e013      	b.n	800e7ae <_strtod_l+0x256>
 800e786:	4628      	mov	r0, r5
 800e788:	e7dc      	b.n	800e744 <_strtod_l+0x1ec>
 800e78a:	2908      	cmp	r1, #8
 800e78c:	f101 0101 	add.w	r1, r1, #1
 800e790:	dc02      	bgt.n	800e798 <_strtod_l+0x240>
 800e792:	fb04 f909 	mul.w	r9, r4, r9
 800e796:	e7ea      	b.n	800e76e <_strtod_l+0x216>
 800e798:	2910      	cmp	r1, #16
 800e79a:	bfd8      	it	le
 800e79c:	4366      	mulle	r6, r4
 800e79e:	e7e6      	b.n	800e76e <_strtod_l+0x216>
 800e7a0:	2b0f      	cmp	r3, #15
 800e7a2:	dcee      	bgt.n	800e782 <_strtod_l+0x22a>
 800e7a4:	230a      	movs	r3, #10
 800e7a6:	fb03 2606 	mla	r6, r3, r6, r2
 800e7aa:	e7ea      	b.n	800e782 <_strtod_l+0x22a>
 800e7ac:	461c      	mov	r4, r3
 800e7ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e7b4:	785a      	ldrb	r2, [r3, #1]
 800e7b6:	4608      	mov	r0, r1
 800e7b8:	4623      	mov	r3, r4
 800e7ba:	e7b7      	b.n	800e72c <_strtod_l+0x1d4>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	2700      	movs	r7, #0
 800e7c0:	9306      	str	r3, [sp, #24]
 800e7c2:	e786      	b.n	800e6d2 <_strtod_l+0x17a>
 800e7c4:	f04f 0e00 	mov.w	lr, #0
 800e7c8:	f108 0202 	add.w	r2, r8, #2
 800e7cc:	9211      	str	r2, [sp, #68]	@ 0x44
 800e7ce:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e7d2:	e78f      	b.n	800e6f4 <_strtod_l+0x19c>
 800e7d4:	f04f 0e01 	mov.w	lr, #1
 800e7d8:	e7f6      	b.n	800e7c8 <_strtod_l+0x270>
 800e7da:	bf00      	nop
 800e7dc:	08012ae4 	.word	0x08012ae4
 800e7e0:	08012acb 	.word	0x08012acb
 800e7e4:	7ff00000 	.word	0x7ff00000
 800e7e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e7ea:	1c54      	adds	r4, r2, #1
 800e7ec:	9411      	str	r4, [sp, #68]	@ 0x44
 800e7ee:	7852      	ldrb	r2, [r2, #1]
 800e7f0:	2a30      	cmp	r2, #48	@ 0x30
 800e7f2:	d0f9      	beq.n	800e7e8 <_strtod_l+0x290>
 800e7f4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e7f8:	2c08      	cmp	r4, #8
 800e7fa:	d881      	bhi.n	800e700 <_strtod_l+0x1a8>
 800e7fc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e800:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e802:	9209      	str	r2, [sp, #36]	@ 0x24
 800e804:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e806:	1c51      	adds	r1, r2, #1
 800e808:	9111      	str	r1, [sp, #68]	@ 0x44
 800e80a:	7852      	ldrb	r2, [r2, #1]
 800e80c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e810:	2c09      	cmp	r4, #9
 800e812:	d938      	bls.n	800e886 <_strtod_l+0x32e>
 800e814:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e816:	1b0c      	subs	r4, r1, r4
 800e818:	2c08      	cmp	r4, #8
 800e81a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e81e:	dc02      	bgt.n	800e826 <_strtod_l+0x2ce>
 800e820:	4564      	cmp	r4, ip
 800e822:	bfa8      	it	ge
 800e824:	4664      	movge	r4, ip
 800e826:	f1be 0f00 	cmp.w	lr, #0
 800e82a:	d000      	beq.n	800e82e <_strtod_l+0x2d6>
 800e82c:	4264      	negs	r4, r4
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d14e      	bne.n	800e8d0 <_strtod_l+0x378>
 800e832:	9b07      	ldr	r3, [sp, #28]
 800e834:	4318      	orrs	r0, r3
 800e836:	f47f aeca 	bne.w	800e5ce <_strtod_l+0x76>
 800e83a:	9b06      	ldr	r3, [sp, #24]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f47f aee2 	bne.w	800e606 <_strtod_l+0xae>
 800e842:	2a69      	cmp	r2, #105	@ 0x69
 800e844:	d027      	beq.n	800e896 <_strtod_l+0x33e>
 800e846:	dc24      	bgt.n	800e892 <_strtod_l+0x33a>
 800e848:	2a49      	cmp	r2, #73	@ 0x49
 800e84a:	d024      	beq.n	800e896 <_strtod_l+0x33e>
 800e84c:	2a4e      	cmp	r2, #78	@ 0x4e
 800e84e:	f47f aeda 	bne.w	800e606 <_strtod_l+0xae>
 800e852:	4997      	ldr	r1, [pc, #604]	@ (800eab0 <_strtod_l+0x558>)
 800e854:	a811      	add	r0, sp, #68	@ 0x44
 800e856:	f001 fead 	bl	80105b4 <__match>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	f43f aed3 	beq.w	800e606 <_strtod_l+0xae>
 800e860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	2b28      	cmp	r3, #40	@ 0x28
 800e866:	d12d      	bne.n	800e8c4 <_strtod_l+0x36c>
 800e868:	4992      	ldr	r1, [pc, #584]	@ (800eab4 <_strtod_l+0x55c>)
 800e86a:	aa14      	add	r2, sp, #80	@ 0x50
 800e86c:	a811      	add	r0, sp, #68	@ 0x44
 800e86e:	f001 feb5 	bl	80105dc <__hexnan>
 800e872:	2805      	cmp	r0, #5
 800e874:	d126      	bne.n	800e8c4 <_strtod_l+0x36c>
 800e876:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e878:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e87c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e880:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e884:	e6a3      	b.n	800e5ce <_strtod_l+0x76>
 800e886:	240a      	movs	r4, #10
 800e888:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e88c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e890:	e7b8      	b.n	800e804 <_strtod_l+0x2ac>
 800e892:	2a6e      	cmp	r2, #110	@ 0x6e
 800e894:	e7db      	b.n	800e84e <_strtod_l+0x2f6>
 800e896:	4988      	ldr	r1, [pc, #544]	@ (800eab8 <_strtod_l+0x560>)
 800e898:	a811      	add	r0, sp, #68	@ 0x44
 800e89a:	f001 fe8b 	bl	80105b4 <__match>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	f43f aeb1 	beq.w	800e606 <_strtod_l+0xae>
 800e8a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8a6:	4985      	ldr	r1, [pc, #532]	@ (800eabc <_strtod_l+0x564>)
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	a811      	add	r0, sp, #68	@ 0x44
 800e8ac:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8ae:	f001 fe81 	bl	80105b4 <__match>
 800e8b2:	b910      	cbnz	r0, 800e8ba <_strtod_l+0x362>
 800e8b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8ba:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800ead0 <_strtod_l+0x578>
 800e8be:	f04f 0a00 	mov.w	sl, #0
 800e8c2:	e684      	b.n	800e5ce <_strtod_l+0x76>
 800e8c4:	487e      	ldr	r0, [pc, #504]	@ (800eac0 <_strtod_l+0x568>)
 800e8c6:	f000 fdb3 	bl	800f430 <nan>
 800e8ca:	ec5b ab10 	vmov	sl, fp, d0
 800e8ce:	e67e      	b.n	800e5ce <_strtod_l+0x76>
 800e8d0:	ee07 9a90 	vmov	s15, r9
 800e8d4:	1be2      	subs	r2, r4, r7
 800e8d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e8da:	2d00      	cmp	r5, #0
 800e8dc:	bf08      	it	eq
 800e8de:	461d      	moveq	r5, r3
 800e8e0:	2b10      	cmp	r3, #16
 800e8e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	bfa8      	it	ge
 800e8e8:	2210      	movge	r2, #16
 800e8ea:	2b09      	cmp	r3, #9
 800e8ec:	ec5b ab17 	vmov	sl, fp, d7
 800e8f0:	dc15      	bgt.n	800e91e <_strtod_l+0x3c6>
 800e8f2:	1be1      	subs	r1, r4, r7
 800e8f4:	2900      	cmp	r1, #0
 800e8f6:	f43f ae6a 	beq.w	800e5ce <_strtod_l+0x76>
 800e8fa:	eba4 0107 	sub.w	r1, r4, r7
 800e8fe:	dd72      	ble.n	800e9e6 <_strtod_l+0x48e>
 800e900:	2916      	cmp	r1, #22
 800e902:	dc59      	bgt.n	800e9b8 <_strtod_l+0x460>
 800e904:	4b6f      	ldr	r3, [pc, #444]	@ (800eac4 <_strtod_l+0x56c>)
 800e906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e90c:	ed93 7b00 	vldr	d7, [r3]
 800e910:	ec4b ab16 	vmov	d6, sl, fp
 800e914:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e918:	ec5b ab17 	vmov	sl, fp, d7
 800e91c:	e657      	b.n	800e5ce <_strtod_l+0x76>
 800e91e:	4969      	ldr	r1, [pc, #420]	@ (800eac4 <_strtod_l+0x56c>)
 800e920:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e924:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e928:	ee06 6a90 	vmov	s13, r6
 800e92c:	2b0f      	cmp	r3, #15
 800e92e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e932:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e936:	ec5b ab16 	vmov	sl, fp, d6
 800e93a:	ddda      	ble.n	800e8f2 <_strtod_l+0x39a>
 800e93c:	1a9a      	subs	r2, r3, r2
 800e93e:	1be1      	subs	r1, r4, r7
 800e940:	440a      	add	r2, r1
 800e942:	2a00      	cmp	r2, #0
 800e944:	f340 8094 	ble.w	800ea70 <_strtod_l+0x518>
 800e948:	f012 000f 	ands.w	r0, r2, #15
 800e94c:	d00a      	beq.n	800e964 <_strtod_l+0x40c>
 800e94e:	495d      	ldr	r1, [pc, #372]	@ (800eac4 <_strtod_l+0x56c>)
 800e950:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e954:	ed91 7b00 	vldr	d7, [r1]
 800e958:	ec4b ab16 	vmov	d6, sl, fp
 800e95c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e960:	ec5b ab17 	vmov	sl, fp, d7
 800e964:	f032 020f 	bics.w	r2, r2, #15
 800e968:	d073      	beq.n	800ea52 <_strtod_l+0x4fa>
 800e96a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e96e:	dd47      	ble.n	800ea00 <_strtod_l+0x4a8>
 800e970:	2400      	movs	r4, #0
 800e972:	4625      	mov	r5, r4
 800e974:	9407      	str	r4, [sp, #28]
 800e976:	4626      	mov	r6, r4
 800e978:	9a05      	ldr	r2, [sp, #20]
 800e97a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ead0 <_strtod_l+0x578>
 800e97e:	2322      	movs	r3, #34	@ 0x22
 800e980:	6013      	str	r3, [r2, #0]
 800e982:	f04f 0a00 	mov.w	sl, #0
 800e986:	9b07      	ldr	r3, [sp, #28]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f43f ae20 	beq.w	800e5ce <_strtod_l+0x76>
 800e98e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e990:	9805      	ldr	r0, [sp, #20]
 800e992:	f002 fda9 	bl	80114e8 <_Bfree>
 800e996:	9805      	ldr	r0, [sp, #20]
 800e998:	4631      	mov	r1, r6
 800e99a:	f002 fda5 	bl	80114e8 <_Bfree>
 800e99e:	9805      	ldr	r0, [sp, #20]
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	f002 fda1 	bl	80114e8 <_Bfree>
 800e9a6:	9907      	ldr	r1, [sp, #28]
 800e9a8:	9805      	ldr	r0, [sp, #20]
 800e9aa:	f002 fd9d 	bl	80114e8 <_Bfree>
 800e9ae:	9805      	ldr	r0, [sp, #20]
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	f002 fd99 	bl	80114e8 <_Bfree>
 800e9b6:	e60a      	b.n	800e5ce <_strtod_l+0x76>
 800e9b8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e9bc:	1be0      	subs	r0, r4, r7
 800e9be:	4281      	cmp	r1, r0
 800e9c0:	dbbc      	blt.n	800e93c <_strtod_l+0x3e4>
 800e9c2:	4a40      	ldr	r2, [pc, #256]	@ (800eac4 <_strtod_l+0x56c>)
 800e9c4:	f1c3 030f 	rsb	r3, r3, #15
 800e9c8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e9cc:	ed91 7b00 	vldr	d7, [r1]
 800e9d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9d2:	ec4b ab16 	vmov	d6, sl, fp
 800e9d6:	1acb      	subs	r3, r1, r3
 800e9d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e9dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9e0:	ed92 6b00 	vldr	d6, [r2]
 800e9e4:	e796      	b.n	800e914 <_strtod_l+0x3bc>
 800e9e6:	3116      	adds	r1, #22
 800e9e8:	dba8      	blt.n	800e93c <_strtod_l+0x3e4>
 800e9ea:	4b36      	ldr	r3, [pc, #216]	@ (800eac4 <_strtod_l+0x56c>)
 800e9ec:	1b3c      	subs	r4, r7, r4
 800e9ee:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e9f2:	ed94 7b00 	vldr	d7, [r4]
 800e9f6:	ec4b ab16 	vmov	d6, sl, fp
 800e9fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e9fe:	e78b      	b.n	800e918 <_strtod_l+0x3c0>
 800ea00:	2000      	movs	r0, #0
 800ea02:	ec4b ab17 	vmov	d7, sl, fp
 800ea06:	4e30      	ldr	r6, [pc, #192]	@ (800eac8 <_strtod_l+0x570>)
 800ea08:	1112      	asrs	r2, r2, #4
 800ea0a:	4601      	mov	r1, r0
 800ea0c:	2a01      	cmp	r2, #1
 800ea0e:	dc23      	bgt.n	800ea58 <_strtod_l+0x500>
 800ea10:	b108      	cbz	r0, 800ea16 <_strtod_l+0x4be>
 800ea12:	ec5b ab17 	vmov	sl, fp, d7
 800ea16:	4a2c      	ldr	r2, [pc, #176]	@ (800eac8 <_strtod_l+0x570>)
 800ea18:	482c      	ldr	r0, [pc, #176]	@ (800eacc <_strtod_l+0x574>)
 800ea1a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ea1e:	ed92 7b00 	vldr	d7, [r2]
 800ea22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ea26:	ec4b ab16 	vmov	d6, sl, fp
 800ea2a:	4a29      	ldr	r2, [pc, #164]	@ (800ead0 <_strtod_l+0x578>)
 800ea2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea30:	ee17 1a90 	vmov	r1, s15
 800ea34:	400a      	ands	r2, r1
 800ea36:	4282      	cmp	r2, r0
 800ea38:	ec5b ab17 	vmov	sl, fp, d7
 800ea3c:	d898      	bhi.n	800e970 <_strtod_l+0x418>
 800ea3e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ea42:	4282      	cmp	r2, r0
 800ea44:	bf86      	itte	hi
 800ea46:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ead4 <_strtod_l+0x57c>
 800ea4a:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ea4e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800ea52:	2200      	movs	r2, #0
 800ea54:	9206      	str	r2, [sp, #24]
 800ea56:	e076      	b.n	800eb46 <_strtod_l+0x5ee>
 800ea58:	f012 0f01 	tst.w	r2, #1
 800ea5c:	d004      	beq.n	800ea68 <_strtod_l+0x510>
 800ea5e:	ed96 6b00 	vldr	d6, [r6]
 800ea62:	2001      	movs	r0, #1
 800ea64:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea68:	3101      	adds	r1, #1
 800ea6a:	1052      	asrs	r2, r2, #1
 800ea6c:	3608      	adds	r6, #8
 800ea6e:	e7cd      	b.n	800ea0c <_strtod_l+0x4b4>
 800ea70:	d0ef      	beq.n	800ea52 <_strtod_l+0x4fa>
 800ea72:	4252      	negs	r2, r2
 800ea74:	f012 000f 	ands.w	r0, r2, #15
 800ea78:	d00a      	beq.n	800ea90 <_strtod_l+0x538>
 800ea7a:	4912      	ldr	r1, [pc, #72]	@ (800eac4 <_strtod_l+0x56c>)
 800ea7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ea80:	ed91 7b00 	vldr	d7, [r1]
 800ea84:	ec4b ab16 	vmov	d6, sl, fp
 800ea88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ea8c:	ec5b ab17 	vmov	sl, fp, d7
 800ea90:	1112      	asrs	r2, r2, #4
 800ea92:	d0de      	beq.n	800ea52 <_strtod_l+0x4fa>
 800ea94:	2a1f      	cmp	r2, #31
 800ea96:	dd1f      	ble.n	800ead8 <_strtod_l+0x580>
 800ea98:	2400      	movs	r4, #0
 800ea9a:	4625      	mov	r5, r4
 800ea9c:	9407      	str	r4, [sp, #28]
 800ea9e:	4626      	mov	r6, r4
 800eaa0:	9a05      	ldr	r2, [sp, #20]
 800eaa2:	2322      	movs	r3, #34	@ 0x22
 800eaa4:	f04f 0a00 	mov.w	sl, #0
 800eaa8:	f04f 0b00 	mov.w	fp, #0
 800eaac:	6013      	str	r3, [r2, #0]
 800eaae:	e76a      	b.n	800e986 <_strtod_l+0x42e>
 800eab0:	08012aa1 	.word	0x08012aa1
 800eab4:	08012ad0 	.word	0x08012ad0
 800eab8:	08012a99 	.word	0x08012a99
 800eabc:	08012c2c 	.word	0x08012c2c
 800eac0:	08012ed3 	.word	0x08012ed3
 800eac4:	08012dd0 	.word	0x08012dd0
 800eac8:	08012da8 	.word	0x08012da8
 800eacc:	7ca00000 	.word	0x7ca00000
 800ead0:	7ff00000 	.word	0x7ff00000
 800ead4:	7fefffff 	.word	0x7fefffff
 800ead8:	f012 0110 	ands.w	r1, r2, #16
 800eadc:	bf18      	it	ne
 800eade:	216a      	movne	r1, #106	@ 0x6a
 800eae0:	9106      	str	r1, [sp, #24]
 800eae2:	ec4b ab17 	vmov	d7, sl, fp
 800eae6:	49b0      	ldr	r1, [pc, #704]	@ (800eda8 <_strtod_l+0x850>)
 800eae8:	2000      	movs	r0, #0
 800eaea:	07d6      	lsls	r6, r2, #31
 800eaec:	d504      	bpl.n	800eaf8 <_strtod_l+0x5a0>
 800eaee:	ed91 6b00 	vldr	d6, [r1]
 800eaf2:	2001      	movs	r0, #1
 800eaf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eaf8:	1052      	asrs	r2, r2, #1
 800eafa:	f101 0108 	add.w	r1, r1, #8
 800eafe:	d1f4      	bne.n	800eaea <_strtod_l+0x592>
 800eb00:	b108      	cbz	r0, 800eb06 <_strtod_l+0x5ae>
 800eb02:	ec5b ab17 	vmov	sl, fp, d7
 800eb06:	9a06      	ldr	r2, [sp, #24]
 800eb08:	b1b2      	cbz	r2, 800eb38 <_strtod_l+0x5e0>
 800eb0a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800eb0e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800eb12:	2a00      	cmp	r2, #0
 800eb14:	4658      	mov	r0, fp
 800eb16:	dd0f      	ble.n	800eb38 <_strtod_l+0x5e0>
 800eb18:	2a1f      	cmp	r2, #31
 800eb1a:	dd55      	ble.n	800ebc8 <_strtod_l+0x670>
 800eb1c:	2a34      	cmp	r2, #52	@ 0x34
 800eb1e:	bfde      	ittt	le
 800eb20:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800eb24:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800eb28:	408a      	lslle	r2, r1
 800eb2a:	f04f 0a00 	mov.w	sl, #0
 800eb2e:	bfcc      	ite	gt
 800eb30:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eb34:	ea02 0b00 	andle.w	fp, r2, r0
 800eb38:	ec4b ab17 	vmov	d7, sl, fp
 800eb3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb44:	d0a8      	beq.n	800ea98 <_strtod_l+0x540>
 800eb46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eb48:	9805      	ldr	r0, [sp, #20]
 800eb4a:	f8cd 9000 	str.w	r9, [sp]
 800eb4e:	462a      	mov	r2, r5
 800eb50:	f002 fd32 	bl	80115b8 <__s2b>
 800eb54:	9007      	str	r0, [sp, #28]
 800eb56:	2800      	cmp	r0, #0
 800eb58:	f43f af0a 	beq.w	800e970 <_strtod_l+0x418>
 800eb5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb5e:	1b3f      	subs	r7, r7, r4
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	bfb4      	ite	lt
 800eb64:	463b      	movlt	r3, r7
 800eb66:	2300      	movge	r3, #0
 800eb68:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb6c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800ed98 <_strtod_l+0x840>
 800eb70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eb74:	2400      	movs	r4, #0
 800eb76:	930d      	str	r3, [sp, #52]	@ 0x34
 800eb78:	4625      	mov	r5, r4
 800eb7a:	9b07      	ldr	r3, [sp, #28]
 800eb7c:	9805      	ldr	r0, [sp, #20]
 800eb7e:	6859      	ldr	r1, [r3, #4]
 800eb80:	f002 fc72 	bl	8011468 <_Balloc>
 800eb84:	4606      	mov	r6, r0
 800eb86:	2800      	cmp	r0, #0
 800eb88:	f43f aef6 	beq.w	800e978 <_strtod_l+0x420>
 800eb8c:	9b07      	ldr	r3, [sp, #28]
 800eb8e:	691a      	ldr	r2, [r3, #16]
 800eb90:	ec4b ab19 	vmov	d9, sl, fp
 800eb94:	3202      	adds	r2, #2
 800eb96:	f103 010c 	add.w	r1, r3, #12
 800eb9a:	0092      	lsls	r2, r2, #2
 800eb9c:	300c      	adds	r0, #12
 800eb9e:	f000 fc38 	bl	800f412 <memcpy>
 800eba2:	eeb0 0b49 	vmov.f64	d0, d9
 800eba6:	9805      	ldr	r0, [sp, #20]
 800eba8:	aa14      	add	r2, sp, #80	@ 0x50
 800ebaa:	a913      	add	r1, sp, #76	@ 0x4c
 800ebac:	f003 f840 	bl	8011c30 <__d2b>
 800ebb0:	9012      	str	r0, [sp, #72]	@ 0x48
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f43f aee0 	beq.w	800e978 <_strtod_l+0x420>
 800ebb8:	9805      	ldr	r0, [sp, #20]
 800ebba:	2101      	movs	r1, #1
 800ebbc:	f002 fd92 	bl	80116e4 <__i2b>
 800ebc0:	4605      	mov	r5, r0
 800ebc2:	b940      	cbnz	r0, 800ebd6 <_strtod_l+0x67e>
 800ebc4:	2500      	movs	r5, #0
 800ebc6:	e6d7      	b.n	800e978 <_strtod_l+0x420>
 800ebc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ebcc:	fa01 f202 	lsl.w	r2, r1, r2
 800ebd0:	ea02 0a0a 	and.w	sl, r2, sl
 800ebd4:	e7b0      	b.n	800eb38 <_strtod_l+0x5e0>
 800ebd6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ebd8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ebda:	2f00      	cmp	r7, #0
 800ebdc:	bfab      	itete	ge
 800ebde:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ebe0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ebe2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800ebe6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800ebea:	bfac      	ite	ge
 800ebec:	eb07 0903 	addge.w	r9, r7, r3
 800ebf0:	eba3 0807 	sublt.w	r8, r3, r7
 800ebf4:	9b06      	ldr	r3, [sp, #24]
 800ebf6:	1aff      	subs	r7, r7, r3
 800ebf8:	4417      	add	r7, r2
 800ebfa:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ebfe:	4a6b      	ldr	r2, [pc, #428]	@ (800edac <_strtod_l+0x854>)
 800ec00:	3f01      	subs	r7, #1
 800ec02:	4297      	cmp	r7, r2
 800ec04:	da51      	bge.n	800ecaa <_strtod_l+0x752>
 800ec06:	1bd1      	subs	r1, r2, r7
 800ec08:	291f      	cmp	r1, #31
 800ec0a:	eba3 0301 	sub.w	r3, r3, r1
 800ec0e:	f04f 0201 	mov.w	r2, #1
 800ec12:	dc3e      	bgt.n	800ec92 <_strtod_l+0x73a>
 800ec14:	408a      	lsls	r2, r1
 800ec16:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec18:	2200      	movs	r2, #0
 800ec1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ec1c:	eb09 0703 	add.w	r7, r9, r3
 800ec20:	4498      	add	r8, r3
 800ec22:	9b06      	ldr	r3, [sp, #24]
 800ec24:	45b9      	cmp	r9, r7
 800ec26:	4498      	add	r8, r3
 800ec28:	464b      	mov	r3, r9
 800ec2a:	bfa8      	it	ge
 800ec2c:	463b      	movge	r3, r7
 800ec2e:	4543      	cmp	r3, r8
 800ec30:	bfa8      	it	ge
 800ec32:	4643      	movge	r3, r8
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	bfc2      	ittt	gt
 800ec38:	1aff      	subgt	r7, r7, r3
 800ec3a:	eba8 0803 	subgt.w	r8, r8, r3
 800ec3e:	eba9 0903 	subgt.w	r9, r9, r3
 800ec42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	dd16      	ble.n	800ec76 <_strtod_l+0x71e>
 800ec48:	4629      	mov	r1, r5
 800ec4a:	9805      	ldr	r0, [sp, #20]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	f002 fe09 	bl	8011864 <__pow5mult>
 800ec52:	4605      	mov	r5, r0
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d0b5      	beq.n	800ebc4 <_strtod_l+0x66c>
 800ec58:	4601      	mov	r1, r0
 800ec5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ec5c:	9805      	ldr	r0, [sp, #20]
 800ec5e:	f002 fd57 	bl	8011710 <__multiply>
 800ec62:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ec64:	2800      	cmp	r0, #0
 800ec66:	f43f ae87 	beq.w	800e978 <_strtod_l+0x420>
 800ec6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ec6c:	9805      	ldr	r0, [sp, #20]
 800ec6e:	f002 fc3b 	bl	80114e8 <_Bfree>
 800ec72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec74:	9312      	str	r3, [sp, #72]	@ 0x48
 800ec76:	2f00      	cmp	r7, #0
 800ec78:	dc1b      	bgt.n	800ecb2 <_strtod_l+0x75a>
 800ec7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	dd21      	ble.n	800ecc4 <_strtod_l+0x76c>
 800ec80:	4631      	mov	r1, r6
 800ec82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec84:	9805      	ldr	r0, [sp, #20]
 800ec86:	f002 fded 	bl	8011864 <__pow5mult>
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	b9d0      	cbnz	r0, 800ecc4 <_strtod_l+0x76c>
 800ec8e:	2600      	movs	r6, #0
 800ec90:	e672      	b.n	800e978 <_strtod_l+0x420>
 800ec92:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ec96:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ec9a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ec9e:	37e2      	adds	r7, #226	@ 0xe2
 800eca0:	fa02 f107 	lsl.w	r1, r2, r7
 800eca4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eca6:	920c      	str	r2, [sp, #48]	@ 0x30
 800eca8:	e7b8      	b.n	800ec1c <_strtod_l+0x6c4>
 800ecaa:	2200      	movs	r2, #0
 800ecac:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ecae:	2201      	movs	r2, #1
 800ecb0:	e7f9      	b.n	800eca6 <_strtod_l+0x74e>
 800ecb2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ecb4:	9805      	ldr	r0, [sp, #20]
 800ecb6:	463a      	mov	r2, r7
 800ecb8:	f002 fe2e 	bl	8011918 <__lshift>
 800ecbc:	9012      	str	r0, [sp, #72]	@ 0x48
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d1db      	bne.n	800ec7a <_strtod_l+0x722>
 800ecc2:	e659      	b.n	800e978 <_strtod_l+0x420>
 800ecc4:	f1b8 0f00 	cmp.w	r8, #0
 800ecc8:	dd07      	ble.n	800ecda <_strtod_l+0x782>
 800ecca:	4631      	mov	r1, r6
 800eccc:	9805      	ldr	r0, [sp, #20]
 800ecce:	4642      	mov	r2, r8
 800ecd0:	f002 fe22 	bl	8011918 <__lshift>
 800ecd4:	4606      	mov	r6, r0
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d0d9      	beq.n	800ec8e <_strtod_l+0x736>
 800ecda:	f1b9 0f00 	cmp.w	r9, #0
 800ecde:	dd08      	ble.n	800ecf2 <_strtod_l+0x79a>
 800ece0:	4629      	mov	r1, r5
 800ece2:	9805      	ldr	r0, [sp, #20]
 800ece4:	464a      	mov	r2, r9
 800ece6:	f002 fe17 	bl	8011918 <__lshift>
 800ecea:	4605      	mov	r5, r0
 800ecec:	2800      	cmp	r0, #0
 800ecee:	f43f ae43 	beq.w	800e978 <_strtod_l+0x420>
 800ecf2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ecf4:	9805      	ldr	r0, [sp, #20]
 800ecf6:	4632      	mov	r2, r6
 800ecf8:	f002 fe96 	bl	8011a28 <__mdiff>
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	f43f ae3a 	beq.w	800e978 <_strtod_l+0x420>
 800ed04:	2300      	movs	r3, #0
 800ed06:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ed0a:	60c3      	str	r3, [r0, #12]
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	f002 fe6f 	bl	80119f0 <__mcmp>
 800ed12:	2800      	cmp	r0, #0
 800ed14:	da4e      	bge.n	800edb4 <_strtod_l+0x85c>
 800ed16:	ea58 080a 	orrs.w	r8, r8, sl
 800ed1a:	d174      	bne.n	800ee06 <_strtod_l+0x8ae>
 800ed1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d170      	bne.n	800ee06 <_strtod_l+0x8ae>
 800ed24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed28:	0d1b      	lsrs	r3, r3, #20
 800ed2a:	051b      	lsls	r3, r3, #20
 800ed2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed30:	d969      	bls.n	800ee06 <_strtod_l+0x8ae>
 800ed32:	6963      	ldr	r3, [r4, #20]
 800ed34:	b913      	cbnz	r3, 800ed3c <_strtod_l+0x7e4>
 800ed36:	6923      	ldr	r3, [r4, #16]
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	dd64      	ble.n	800ee06 <_strtod_l+0x8ae>
 800ed3c:	4621      	mov	r1, r4
 800ed3e:	2201      	movs	r2, #1
 800ed40:	9805      	ldr	r0, [sp, #20]
 800ed42:	f002 fde9 	bl	8011918 <__lshift>
 800ed46:	4629      	mov	r1, r5
 800ed48:	4604      	mov	r4, r0
 800ed4a:	f002 fe51 	bl	80119f0 <__mcmp>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	dd59      	ble.n	800ee06 <_strtod_l+0x8ae>
 800ed52:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed56:	9a06      	ldr	r2, [sp, #24]
 800ed58:	0d1b      	lsrs	r3, r3, #20
 800ed5a:	051b      	lsls	r3, r3, #20
 800ed5c:	2a00      	cmp	r2, #0
 800ed5e:	d070      	beq.n	800ee42 <_strtod_l+0x8ea>
 800ed60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed64:	d86d      	bhi.n	800ee42 <_strtod_l+0x8ea>
 800ed66:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ed6a:	f67f ae99 	bls.w	800eaa0 <_strtod_l+0x548>
 800ed6e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800eda0 <_strtod_l+0x848>
 800ed72:	ec4b ab16 	vmov	d6, sl, fp
 800ed76:	4b0e      	ldr	r3, [pc, #56]	@ (800edb0 <_strtod_l+0x858>)
 800ed78:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ed7c:	ee17 2a90 	vmov	r2, s15
 800ed80:	4013      	ands	r3, r2
 800ed82:	ec5b ab17 	vmov	sl, fp, d7
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f47f ae01 	bne.w	800e98e <_strtod_l+0x436>
 800ed8c:	9a05      	ldr	r2, [sp, #20]
 800ed8e:	2322      	movs	r3, #34	@ 0x22
 800ed90:	6013      	str	r3, [r2, #0]
 800ed92:	e5fc      	b.n	800e98e <_strtod_l+0x436>
 800ed94:	f3af 8000 	nop.w
 800ed98:	ffc00000 	.word	0xffc00000
 800ed9c:	41dfffff 	.word	0x41dfffff
 800eda0:	00000000 	.word	0x00000000
 800eda4:	39500000 	.word	0x39500000
 800eda8:	08012af8 	.word	0x08012af8
 800edac:	fffffc02 	.word	0xfffffc02
 800edb0:	7ff00000 	.word	0x7ff00000
 800edb4:	46d9      	mov	r9, fp
 800edb6:	d15d      	bne.n	800ee74 <_strtod_l+0x91c>
 800edb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edbc:	f1b8 0f00 	cmp.w	r8, #0
 800edc0:	d02a      	beq.n	800ee18 <_strtod_l+0x8c0>
 800edc2:	4aab      	ldr	r2, [pc, #684]	@ (800f070 <_strtod_l+0xb18>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d12a      	bne.n	800ee1e <_strtod_l+0x8c6>
 800edc8:	9b06      	ldr	r3, [sp, #24]
 800edca:	4652      	mov	r2, sl
 800edcc:	b1fb      	cbz	r3, 800ee0e <_strtod_l+0x8b6>
 800edce:	4ba9      	ldr	r3, [pc, #676]	@ (800f074 <_strtod_l+0xb1c>)
 800edd0:	ea0b 0303 	and.w	r3, fp, r3
 800edd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800edd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800eddc:	d81a      	bhi.n	800ee14 <_strtod_l+0x8bc>
 800edde:	0d1b      	lsrs	r3, r3, #20
 800ede0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ede4:	fa01 f303 	lsl.w	r3, r1, r3
 800ede8:	429a      	cmp	r2, r3
 800edea:	d118      	bne.n	800ee1e <_strtod_l+0x8c6>
 800edec:	4ba2      	ldr	r3, [pc, #648]	@ (800f078 <_strtod_l+0xb20>)
 800edee:	4599      	cmp	r9, r3
 800edf0:	d102      	bne.n	800edf8 <_strtod_l+0x8a0>
 800edf2:	3201      	adds	r2, #1
 800edf4:	f43f adc0 	beq.w	800e978 <_strtod_l+0x420>
 800edf8:	4b9e      	ldr	r3, [pc, #632]	@ (800f074 <_strtod_l+0xb1c>)
 800edfa:	ea09 0303 	and.w	r3, r9, r3
 800edfe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ee02:	f04f 0a00 	mov.w	sl, #0
 800ee06:	9b06      	ldr	r3, [sp, #24]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d1b0      	bne.n	800ed6e <_strtod_l+0x816>
 800ee0c:	e5bf      	b.n	800e98e <_strtod_l+0x436>
 800ee0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee12:	e7e9      	b.n	800ede8 <_strtod_l+0x890>
 800ee14:	460b      	mov	r3, r1
 800ee16:	e7e7      	b.n	800ede8 <_strtod_l+0x890>
 800ee18:	ea53 030a 	orrs.w	r3, r3, sl
 800ee1c:	d099      	beq.n	800ed52 <_strtod_l+0x7fa>
 800ee1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee20:	b1c3      	cbz	r3, 800ee54 <_strtod_l+0x8fc>
 800ee22:	ea13 0f09 	tst.w	r3, r9
 800ee26:	d0ee      	beq.n	800ee06 <_strtod_l+0x8ae>
 800ee28:	9a06      	ldr	r2, [sp, #24]
 800ee2a:	4650      	mov	r0, sl
 800ee2c:	4659      	mov	r1, fp
 800ee2e:	f1b8 0f00 	cmp.w	r8, #0
 800ee32:	d013      	beq.n	800ee5c <_strtod_l+0x904>
 800ee34:	f7ff fb76 	bl	800e524 <sulp>
 800ee38:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ee3c:	ec5b ab17 	vmov	sl, fp, d7
 800ee40:	e7e1      	b.n	800ee06 <_strtod_l+0x8ae>
 800ee42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ee46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ee4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ee4e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ee52:	e7d8      	b.n	800ee06 <_strtod_l+0x8ae>
 800ee54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee56:	ea13 0f0a 	tst.w	r3, sl
 800ee5a:	e7e4      	b.n	800ee26 <_strtod_l+0x8ce>
 800ee5c:	f7ff fb62 	bl	800e524 <sulp>
 800ee60:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ee64:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ee68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6c:	ec5b ab10 	vmov	sl, fp, d0
 800ee70:	d1c9      	bne.n	800ee06 <_strtod_l+0x8ae>
 800ee72:	e615      	b.n	800eaa0 <_strtod_l+0x548>
 800ee74:	4629      	mov	r1, r5
 800ee76:	4620      	mov	r0, r4
 800ee78:	f002 ff32 	bl	8011ce0 <__ratio>
 800ee7c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ee80:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ee84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee88:	d85d      	bhi.n	800ef46 <_strtod_l+0x9ee>
 800ee8a:	f1b8 0f00 	cmp.w	r8, #0
 800ee8e:	d164      	bne.n	800ef5a <_strtod_l+0xa02>
 800ee90:	f1ba 0f00 	cmp.w	sl, #0
 800ee94:	d14b      	bne.n	800ef2e <_strtod_l+0x9d6>
 800ee96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee9a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d160      	bne.n	800ef64 <_strtod_l+0xa0c>
 800eea2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800eea6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800eeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeae:	d401      	bmi.n	800eeb4 <_strtod_l+0x95c>
 800eeb0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800eeb4:	eeb1 ab48 	vneg.f64	d10, d8
 800eeb8:	486e      	ldr	r0, [pc, #440]	@ (800f074 <_strtod_l+0xb1c>)
 800eeba:	4970      	ldr	r1, [pc, #448]	@ (800f07c <_strtod_l+0xb24>)
 800eebc:	ea09 0700 	and.w	r7, r9, r0
 800eec0:	428f      	cmp	r7, r1
 800eec2:	ec53 2b1a 	vmov	r2, r3, d10
 800eec6:	d17d      	bne.n	800efc4 <_strtod_l+0xa6c>
 800eec8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800eecc:	ec4b ab1c 	vmov	d12, sl, fp
 800eed0:	eeb0 0b4c 	vmov.f64	d0, d12
 800eed4:	f002 fe3c 	bl	8011b50 <__ulp>
 800eed8:	4866      	ldr	r0, [pc, #408]	@ (800f074 <_strtod_l+0xb1c>)
 800eeda:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800eede:	ee1c 3a90 	vmov	r3, s25
 800eee2:	4a67      	ldr	r2, [pc, #412]	@ (800f080 <_strtod_l+0xb28>)
 800eee4:	ea03 0100 	and.w	r1, r3, r0
 800eee8:	4291      	cmp	r1, r2
 800eeea:	ec5b ab1c 	vmov	sl, fp, d12
 800eeee:	d93c      	bls.n	800ef6a <_strtod_l+0xa12>
 800eef0:	ee19 2a90 	vmov	r2, s19
 800eef4:	4b60      	ldr	r3, [pc, #384]	@ (800f078 <_strtod_l+0xb20>)
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d104      	bne.n	800ef04 <_strtod_l+0x9ac>
 800eefa:	ee19 3a10 	vmov	r3, s18
 800eefe:	3301      	adds	r3, #1
 800ef00:	f43f ad3a 	beq.w	800e978 <_strtod_l+0x420>
 800ef04:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800f078 <_strtod_l+0xb20>
 800ef08:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ef0c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ef0e:	9805      	ldr	r0, [sp, #20]
 800ef10:	f002 faea 	bl	80114e8 <_Bfree>
 800ef14:	9805      	ldr	r0, [sp, #20]
 800ef16:	4631      	mov	r1, r6
 800ef18:	f002 fae6 	bl	80114e8 <_Bfree>
 800ef1c:	9805      	ldr	r0, [sp, #20]
 800ef1e:	4629      	mov	r1, r5
 800ef20:	f002 fae2 	bl	80114e8 <_Bfree>
 800ef24:	9805      	ldr	r0, [sp, #20]
 800ef26:	4621      	mov	r1, r4
 800ef28:	f002 fade 	bl	80114e8 <_Bfree>
 800ef2c:	e625      	b.n	800eb7a <_strtod_l+0x622>
 800ef2e:	f1ba 0f01 	cmp.w	sl, #1
 800ef32:	d103      	bne.n	800ef3c <_strtod_l+0x9e4>
 800ef34:	f1bb 0f00 	cmp.w	fp, #0
 800ef38:	f43f adb2 	beq.w	800eaa0 <_strtod_l+0x548>
 800ef3c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ef40:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ef44:	e7b8      	b.n	800eeb8 <_strtod_l+0x960>
 800ef46:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ef4a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ef4e:	f1b8 0f00 	cmp.w	r8, #0
 800ef52:	d0af      	beq.n	800eeb4 <_strtod_l+0x95c>
 800ef54:	eeb0 ab48 	vmov.f64	d10, d8
 800ef58:	e7ae      	b.n	800eeb8 <_strtod_l+0x960>
 800ef5a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ef5e:	eeb0 8b4a 	vmov.f64	d8, d10
 800ef62:	e7a9      	b.n	800eeb8 <_strtod_l+0x960>
 800ef64:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ef68:	e7a6      	b.n	800eeb8 <_strtod_l+0x960>
 800ef6a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ef6e:	9b06      	ldr	r3, [sp, #24]
 800ef70:	46d9      	mov	r9, fp
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d1ca      	bne.n	800ef0c <_strtod_l+0x9b4>
 800ef76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef7a:	0d1b      	lsrs	r3, r3, #20
 800ef7c:	051b      	lsls	r3, r3, #20
 800ef7e:	429f      	cmp	r7, r3
 800ef80:	d1c4      	bne.n	800ef0c <_strtod_l+0x9b4>
 800ef82:	ec51 0b18 	vmov	r0, r1, d8
 800ef86:	f7f1 fbef 	bl	8000768 <__aeabi_d2lz>
 800ef8a:	f7f1 fba7 	bl	80006dc <__aeabi_l2d>
 800ef8e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ef92:	ec41 0b17 	vmov	d7, r0, r1
 800ef96:	ea49 090a 	orr.w	r9, r9, sl
 800ef9a:	ea59 0908 	orrs.w	r9, r9, r8
 800ef9e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800efa2:	d03c      	beq.n	800f01e <_strtod_l+0xac6>
 800efa4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f058 <_strtod_l+0xb00>
 800efa8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800efac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb0:	f53f aced 	bmi.w	800e98e <_strtod_l+0x436>
 800efb4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f060 <_strtod_l+0xb08>
 800efb8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800efbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc0:	dda4      	ble.n	800ef0c <_strtod_l+0x9b4>
 800efc2:	e4e4      	b.n	800e98e <_strtod_l+0x436>
 800efc4:	9906      	ldr	r1, [sp, #24]
 800efc6:	b1e1      	cbz	r1, 800f002 <_strtod_l+0xaaa>
 800efc8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800efcc:	d819      	bhi.n	800f002 <_strtod_l+0xaaa>
 800efce:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800efd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd6:	d811      	bhi.n	800effc <_strtod_l+0xaa4>
 800efd8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800efdc:	ee18 3a10 	vmov	r3, s16
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	bf38      	it	cc
 800efe4:	2301      	movcc	r3, #1
 800efe6:	ee08 3a10 	vmov	s16, r3
 800efea:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800efee:	f1b8 0f00 	cmp.w	r8, #0
 800eff2:	d111      	bne.n	800f018 <_strtod_l+0xac0>
 800eff4:	eeb1 7b48 	vneg.f64	d7, d8
 800eff8:	ec53 2b17 	vmov	r2, r3, d7
 800effc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800f000:	1bcb      	subs	r3, r1, r7
 800f002:	eeb0 0b49 	vmov.f64	d0, d9
 800f006:	ec43 2b1a 	vmov	d10, r2, r3
 800f00a:	f002 fda1 	bl	8011b50 <__ulp>
 800f00e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800f012:	ec5b ab19 	vmov	sl, fp, d9
 800f016:	e7aa      	b.n	800ef6e <_strtod_l+0xa16>
 800f018:	eeb0 7b48 	vmov.f64	d7, d8
 800f01c:	e7ec      	b.n	800eff8 <_strtod_l+0xaa0>
 800f01e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800f068 <_strtod_l+0xb10>
 800f022:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02a:	f57f af6f 	bpl.w	800ef0c <_strtod_l+0x9b4>
 800f02e:	e4ae      	b.n	800e98e <_strtod_l+0x436>
 800f030:	2300      	movs	r3, #0
 800f032:	9308      	str	r3, [sp, #32]
 800f034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f036:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f038:	6013      	str	r3, [r2, #0]
 800f03a:	f7ff bacc 	b.w	800e5d6 <_strtod_l+0x7e>
 800f03e:	2a65      	cmp	r2, #101	@ 0x65
 800f040:	f43f abbc 	beq.w	800e7bc <_strtod_l+0x264>
 800f044:	2a45      	cmp	r2, #69	@ 0x45
 800f046:	f43f abb9 	beq.w	800e7bc <_strtod_l+0x264>
 800f04a:	2301      	movs	r3, #1
 800f04c:	9306      	str	r3, [sp, #24]
 800f04e:	f7ff bbf0 	b.w	800e832 <_strtod_l+0x2da>
 800f052:	bf00      	nop
 800f054:	f3af 8000 	nop.w
 800f058:	94a03595 	.word	0x94a03595
 800f05c:	3fdfffff 	.word	0x3fdfffff
 800f060:	35afe535 	.word	0x35afe535
 800f064:	3fe00000 	.word	0x3fe00000
 800f068:	94a03595 	.word	0x94a03595
 800f06c:	3fcfffff 	.word	0x3fcfffff
 800f070:	000fffff 	.word	0x000fffff
 800f074:	7ff00000 	.word	0x7ff00000
 800f078:	7fefffff 	.word	0x7fefffff
 800f07c:	7fe00000 	.word	0x7fe00000
 800f080:	7c9fffff 	.word	0x7c9fffff

0800f084 <_strtod_r>:
 800f084:	4b01      	ldr	r3, [pc, #4]	@ (800f08c <_strtod_r+0x8>)
 800f086:	f7ff ba67 	b.w	800e558 <_strtod_l>
 800f08a:	bf00      	nop
 800f08c:	24000024 	.word	0x24000024

0800f090 <_strtol_l.constprop.0>:
 800f090:	2b24      	cmp	r3, #36	@ 0x24
 800f092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f096:	4686      	mov	lr, r0
 800f098:	4690      	mov	r8, r2
 800f09a:	d801      	bhi.n	800f0a0 <_strtol_l.constprop.0+0x10>
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d106      	bne.n	800f0ae <_strtol_l.constprop.0+0x1e>
 800f0a0:	f000 f98a 	bl	800f3b8 <__errno>
 800f0a4:	2316      	movs	r3, #22
 800f0a6:	6003      	str	r3, [r0, #0]
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ae:	4834      	ldr	r0, [pc, #208]	@ (800f180 <_strtol_l.constprop.0+0xf0>)
 800f0b0:	460d      	mov	r5, r1
 800f0b2:	462a      	mov	r2, r5
 800f0b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0b8:	5d06      	ldrb	r6, [r0, r4]
 800f0ba:	f016 0608 	ands.w	r6, r6, #8
 800f0be:	d1f8      	bne.n	800f0b2 <_strtol_l.constprop.0+0x22>
 800f0c0:	2c2d      	cmp	r4, #45	@ 0x2d
 800f0c2:	d12d      	bne.n	800f120 <_strtol_l.constprop.0+0x90>
 800f0c4:	782c      	ldrb	r4, [r5, #0]
 800f0c6:	2601      	movs	r6, #1
 800f0c8:	1c95      	adds	r5, r2, #2
 800f0ca:	f033 0210 	bics.w	r2, r3, #16
 800f0ce:	d109      	bne.n	800f0e4 <_strtol_l.constprop.0+0x54>
 800f0d0:	2c30      	cmp	r4, #48	@ 0x30
 800f0d2:	d12a      	bne.n	800f12a <_strtol_l.constprop.0+0x9a>
 800f0d4:	782a      	ldrb	r2, [r5, #0]
 800f0d6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f0da:	2a58      	cmp	r2, #88	@ 0x58
 800f0dc:	d125      	bne.n	800f12a <_strtol_l.constprop.0+0x9a>
 800f0de:	786c      	ldrb	r4, [r5, #1]
 800f0e0:	2310      	movs	r3, #16
 800f0e2:	3502      	adds	r5, #2
 800f0e4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f0e8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	fbbc f9f3 	udiv	r9, ip, r3
 800f0f2:	4610      	mov	r0, r2
 800f0f4:	fb03 ca19 	mls	sl, r3, r9, ip
 800f0f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f0fc:	2f09      	cmp	r7, #9
 800f0fe:	d81b      	bhi.n	800f138 <_strtol_l.constprop.0+0xa8>
 800f100:	463c      	mov	r4, r7
 800f102:	42a3      	cmp	r3, r4
 800f104:	dd27      	ble.n	800f156 <_strtol_l.constprop.0+0xc6>
 800f106:	1c57      	adds	r7, r2, #1
 800f108:	d007      	beq.n	800f11a <_strtol_l.constprop.0+0x8a>
 800f10a:	4581      	cmp	r9, r0
 800f10c:	d320      	bcc.n	800f150 <_strtol_l.constprop.0+0xc0>
 800f10e:	d101      	bne.n	800f114 <_strtol_l.constprop.0+0x84>
 800f110:	45a2      	cmp	sl, r4
 800f112:	db1d      	blt.n	800f150 <_strtol_l.constprop.0+0xc0>
 800f114:	fb00 4003 	mla	r0, r0, r3, r4
 800f118:	2201      	movs	r2, #1
 800f11a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f11e:	e7eb      	b.n	800f0f8 <_strtol_l.constprop.0+0x68>
 800f120:	2c2b      	cmp	r4, #43	@ 0x2b
 800f122:	bf04      	itt	eq
 800f124:	782c      	ldrbeq	r4, [r5, #0]
 800f126:	1c95      	addeq	r5, r2, #2
 800f128:	e7cf      	b.n	800f0ca <_strtol_l.constprop.0+0x3a>
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1da      	bne.n	800f0e4 <_strtol_l.constprop.0+0x54>
 800f12e:	2c30      	cmp	r4, #48	@ 0x30
 800f130:	bf0c      	ite	eq
 800f132:	2308      	moveq	r3, #8
 800f134:	230a      	movne	r3, #10
 800f136:	e7d5      	b.n	800f0e4 <_strtol_l.constprop.0+0x54>
 800f138:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f13c:	2f19      	cmp	r7, #25
 800f13e:	d801      	bhi.n	800f144 <_strtol_l.constprop.0+0xb4>
 800f140:	3c37      	subs	r4, #55	@ 0x37
 800f142:	e7de      	b.n	800f102 <_strtol_l.constprop.0+0x72>
 800f144:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f148:	2f19      	cmp	r7, #25
 800f14a:	d804      	bhi.n	800f156 <_strtol_l.constprop.0+0xc6>
 800f14c:	3c57      	subs	r4, #87	@ 0x57
 800f14e:	e7d8      	b.n	800f102 <_strtol_l.constprop.0+0x72>
 800f150:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f154:	e7e1      	b.n	800f11a <_strtol_l.constprop.0+0x8a>
 800f156:	1c53      	adds	r3, r2, #1
 800f158:	d108      	bne.n	800f16c <_strtol_l.constprop.0+0xdc>
 800f15a:	2322      	movs	r3, #34	@ 0x22
 800f15c:	f8ce 3000 	str.w	r3, [lr]
 800f160:	4660      	mov	r0, ip
 800f162:	f1b8 0f00 	cmp.w	r8, #0
 800f166:	d0a0      	beq.n	800f0aa <_strtol_l.constprop.0+0x1a>
 800f168:	1e69      	subs	r1, r5, #1
 800f16a:	e006      	b.n	800f17a <_strtol_l.constprop.0+0xea>
 800f16c:	b106      	cbz	r6, 800f170 <_strtol_l.constprop.0+0xe0>
 800f16e:	4240      	negs	r0, r0
 800f170:	f1b8 0f00 	cmp.w	r8, #0
 800f174:	d099      	beq.n	800f0aa <_strtol_l.constprop.0+0x1a>
 800f176:	2a00      	cmp	r2, #0
 800f178:	d1f6      	bne.n	800f168 <_strtol_l.constprop.0+0xd8>
 800f17a:	f8c8 1000 	str.w	r1, [r8]
 800f17e:	e794      	b.n	800f0aa <_strtol_l.constprop.0+0x1a>
 800f180:	08012b29 	.word	0x08012b29

0800f184 <_strtol_r>:
 800f184:	f7ff bf84 	b.w	800f090 <_strtol_l.constprop.0>

0800f188 <_fwalk_sglue>:
 800f188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f18c:	4607      	mov	r7, r0
 800f18e:	4688      	mov	r8, r1
 800f190:	4614      	mov	r4, r2
 800f192:	2600      	movs	r6, #0
 800f194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f198:	f1b9 0901 	subs.w	r9, r9, #1
 800f19c:	d505      	bpl.n	800f1aa <_fwalk_sglue+0x22>
 800f19e:	6824      	ldr	r4, [r4, #0]
 800f1a0:	2c00      	cmp	r4, #0
 800f1a2:	d1f7      	bne.n	800f194 <_fwalk_sglue+0xc>
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1aa:	89ab      	ldrh	r3, [r5, #12]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d907      	bls.n	800f1c0 <_fwalk_sglue+0x38>
 800f1b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	d003      	beq.n	800f1c0 <_fwalk_sglue+0x38>
 800f1b8:	4629      	mov	r1, r5
 800f1ba:	4638      	mov	r0, r7
 800f1bc:	47c0      	blx	r8
 800f1be:	4306      	orrs	r6, r0
 800f1c0:	3568      	adds	r5, #104	@ 0x68
 800f1c2:	e7e9      	b.n	800f198 <_fwalk_sglue+0x10>

0800f1c4 <iprintf>:
 800f1c4:	b40f      	push	{r0, r1, r2, r3}
 800f1c6:	b507      	push	{r0, r1, r2, lr}
 800f1c8:	4906      	ldr	r1, [pc, #24]	@ (800f1e4 <iprintf+0x20>)
 800f1ca:	ab04      	add	r3, sp, #16
 800f1cc:	6808      	ldr	r0, [r1, #0]
 800f1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1d2:	6881      	ldr	r1, [r0, #8]
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	f001 fde9 	bl	8010dac <_vfiprintf_r>
 800f1da:	b003      	add	sp, #12
 800f1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1e0:	b004      	add	sp, #16
 800f1e2:	4770      	bx	lr
 800f1e4:	24000190 	.word	0x24000190

0800f1e8 <_puts_r>:
 800f1e8:	6a03      	ldr	r3, [r0, #32]
 800f1ea:	b570      	push	{r4, r5, r6, lr}
 800f1ec:	6884      	ldr	r4, [r0, #8]
 800f1ee:	4605      	mov	r5, r0
 800f1f0:	460e      	mov	r6, r1
 800f1f2:	b90b      	cbnz	r3, 800f1f8 <_puts_r+0x10>
 800f1f4:	f7ff f97e 	bl	800e4f4 <__sinit>
 800f1f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1fa:	07db      	lsls	r3, r3, #31
 800f1fc:	d405      	bmi.n	800f20a <_puts_r+0x22>
 800f1fe:	89a3      	ldrh	r3, [r4, #12]
 800f200:	0598      	lsls	r0, r3, #22
 800f202:	d402      	bmi.n	800f20a <_puts_r+0x22>
 800f204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f206:	f000 f902 	bl	800f40e <__retarget_lock_acquire_recursive>
 800f20a:	89a3      	ldrh	r3, [r4, #12]
 800f20c:	0719      	lsls	r1, r3, #28
 800f20e:	d502      	bpl.n	800f216 <_puts_r+0x2e>
 800f210:	6923      	ldr	r3, [r4, #16]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d135      	bne.n	800f282 <_puts_r+0x9a>
 800f216:	4621      	mov	r1, r4
 800f218:	4628      	mov	r0, r5
 800f21a:	f002 feeb 	bl	8011ff4 <__swsetup_r>
 800f21e:	b380      	cbz	r0, 800f282 <_puts_r+0x9a>
 800f220:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800f224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f226:	07da      	lsls	r2, r3, #31
 800f228:	d405      	bmi.n	800f236 <_puts_r+0x4e>
 800f22a:	89a3      	ldrh	r3, [r4, #12]
 800f22c:	059b      	lsls	r3, r3, #22
 800f22e:	d402      	bmi.n	800f236 <_puts_r+0x4e>
 800f230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f232:	f000 f8ed 	bl	800f410 <__retarget_lock_release_recursive>
 800f236:	4628      	mov	r0, r5
 800f238:	bd70      	pop	{r4, r5, r6, pc}
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	da04      	bge.n	800f248 <_puts_r+0x60>
 800f23e:	69a2      	ldr	r2, [r4, #24]
 800f240:	429a      	cmp	r2, r3
 800f242:	dc17      	bgt.n	800f274 <_puts_r+0x8c>
 800f244:	290a      	cmp	r1, #10
 800f246:	d015      	beq.n	800f274 <_puts_r+0x8c>
 800f248:	6823      	ldr	r3, [r4, #0]
 800f24a:	1c5a      	adds	r2, r3, #1
 800f24c:	6022      	str	r2, [r4, #0]
 800f24e:	7019      	strb	r1, [r3, #0]
 800f250:	68a3      	ldr	r3, [r4, #8]
 800f252:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f256:	3b01      	subs	r3, #1
 800f258:	60a3      	str	r3, [r4, #8]
 800f25a:	2900      	cmp	r1, #0
 800f25c:	d1ed      	bne.n	800f23a <_puts_r+0x52>
 800f25e:	2b00      	cmp	r3, #0
 800f260:	da11      	bge.n	800f286 <_puts_r+0x9e>
 800f262:	4622      	mov	r2, r4
 800f264:	210a      	movs	r1, #10
 800f266:	4628      	mov	r0, r5
 800f268:	f002 fe86 	bl	8011f78 <__swbuf_r>
 800f26c:	3001      	adds	r0, #1
 800f26e:	d0d7      	beq.n	800f220 <_puts_r+0x38>
 800f270:	250a      	movs	r5, #10
 800f272:	e7d7      	b.n	800f224 <_puts_r+0x3c>
 800f274:	4622      	mov	r2, r4
 800f276:	4628      	mov	r0, r5
 800f278:	f002 fe7e 	bl	8011f78 <__swbuf_r>
 800f27c:	3001      	adds	r0, #1
 800f27e:	d1e7      	bne.n	800f250 <_puts_r+0x68>
 800f280:	e7ce      	b.n	800f220 <_puts_r+0x38>
 800f282:	3e01      	subs	r6, #1
 800f284:	e7e4      	b.n	800f250 <_puts_r+0x68>
 800f286:	6823      	ldr	r3, [r4, #0]
 800f288:	1c5a      	adds	r2, r3, #1
 800f28a:	6022      	str	r2, [r4, #0]
 800f28c:	220a      	movs	r2, #10
 800f28e:	701a      	strb	r2, [r3, #0]
 800f290:	e7ee      	b.n	800f270 <_puts_r+0x88>
	...

0800f294 <puts>:
 800f294:	4b02      	ldr	r3, [pc, #8]	@ (800f2a0 <puts+0xc>)
 800f296:	4601      	mov	r1, r0
 800f298:	6818      	ldr	r0, [r3, #0]
 800f29a:	f7ff bfa5 	b.w	800f1e8 <_puts_r>
 800f29e:	bf00      	nop
 800f2a0:	24000190 	.word	0x24000190

0800f2a4 <strncmp>:
 800f2a4:	b510      	push	{r4, lr}
 800f2a6:	b16a      	cbz	r2, 800f2c4 <strncmp+0x20>
 800f2a8:	3901      	subs	r1, #1
 800f2aa:	1884      	adds	r4, r0, r2
 800f2ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d103      	bne.n	800f2c0 <strncmp+0x1c>
 800f2b8:	42a0      	cmp	r0, r4
 800f2ba:	d001      	beq.n	800f2c0 <strncmp+0x1c>
 800f2bc:	2a00      	cmp	r2, #0
 800f2be:	d1f5      	bne.n	800f2ac <strncmp+0x8>
 800f2c0:	1ad0      	subs	r0, r2, r3
 800f2c2:	bd10      	pop	{r4, pc}
 800f2c4:	4610      	mov	r0, r2
 800f2c6:	e7fc      	b.n	800f2c2 <strncmp+0x1e>

0800f2c8 <strstr>:
 800f2c8:	780a      	ldrb	r2, [r1, #0]
 800f2ca:	b570      	push	{r4, r5, r6, lr}
 800f2cc:	b96a      	cbnz	r2, 800f2ea <strstr+0x22>
 800f2ce:	bd70      	pop	{r4, r5, r6, pc}
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d109      	bne.n	800f2e8 <strstr+0x20>
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d0f6      	beq.n	800f2ce <strstr+0x6>
 800f2e0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f2e4:	429e      	cmp	r6, r3
 800f2e6:	d0f7      	beq.n	800f2d8 <strstr+0x10>
 800f2e8:	3001      	adds	r0, #1
 800f2ea:	7803      	ldrb	r3, [r0, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1ef      	bne.n	800f2d0 <strstr+0x8>
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	e7ec      	b.n	800f2ce <strstr+0x6>

0800f2f4 <memset>:
 800f2f4:	4402      	add	r2, r0
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d100      	bne.n	800f2fe <memset+0xa>
 800f2fc:	4770      	bx	lr
 800f2fe:	f803 1b01 	strb.w	r1, [r3], #1
 800f302:	e7f9      	b.n	800f2f8 <memset+0x4>

0800f304 <_localeconv_r>:
 800f304:	4800      	ldr	r0, [pc, #0]	@ (800f308 <_localeconv_r+0x4>)
 800f306:	4770      	bx	lr
 800f308:	24000114 	.word	0x24000114

0800f30c <_close_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4d06      	ldr	r5, [pc, #24]	@ (800f328 <_close_r+0x1c>)
 800f310:	2300      	movs	r3, #0
 800f312:	4604      	mov	r4, r0
 800f314:	4608      	mov	r0, r1
 800f316:	602b      	str	r3, [r5, #0]
 800f318:	f7f3 f9d6 	bl	80026c8 <_close>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_close_r+0x1a>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_close_r+0x1a>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	24000dfc 	.word	0x24000dfc

0800f32c <_lseek_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	@ (800f34c <_lseek_r+0x20>)
 800f330:	4604      	mov	r4, r0
 800f332:	4608      	mov	r0, r1
 800f334:	4611      	mov	r1, r2
 800f336:	2200      	movs	r2, #0
 800f338:	602a      	str	r2, [r5, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	f7f3 f9eb 	bl	8002716 <_lseek>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	d102      	bne.n	800f34a <_lseek_r+0x1e>
 800f344:	682b      	ldr	r3, [r5, #0]
 800f346:	b103      	cbz	r3, 800f34a <_lseek_r+0x1e>
 800f348:	6023      	str	r3, [r4, #0]
 800f34a:	bd38      	pop	{r3, r4, r5, pc}
 800f34c:	24000dfc 	.word	0x24000dfc

0800f350 <_read_r>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4d07      	ldr	r5, [pc, #28]	@ (800f370 <_read_r+0x20>)
 800f354:	4604      	mov	r4, r0
 800f356:	4608      	mov	r0, r1
 800f358:	4611      	mov	r1, r2
 800f35a:	2200      	movs	r2, #0
 800f35c:	602a      	str	r2, [r5, #0]
 800f35e:	461a      	mov	r2, r3
 800f360:	f7f3 f995 	bl	800268e <_read>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d102      	bne.n	800f36e <_read_r+0x1e>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	b103      	cbz	r3, 800f36e <_read_r+0x1e>
 800f36c:	6023      	str	r3, [r4, #0]
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	24000dfc 	.word	0x24000dfc

0800f374 <_sbrk_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4d06      	ldr	r5, [pc, #24]	@ (800f390 <_sbrk_r+0x1c>)
 800f378:	2300      	movs	r3, #0
 800f37a:	4604      	mov	r4, r0
 800f37c:	4608      	mov	r0, r1
 800f37e:	602b      	str	r3, [r5, #0]
 800f380:	f7f3 f9d6 	bl	8002730 <_sbrk>
 800f384:	1c43      	adds	r3, r0, #1
 800f386:	d102      	bne.n	800f38e <_sbrk_r+0x1a>
 800f388:	682b      	ldr	r3, [r5, #0]
 800f38a:	b103      	cbz	r3, 800f38e <_sbrk_r+0x1a>
 800f38c:	6023      	str	r3, [r4, #0]
 800f38e:	bd38      	pop	{r3, r4, r5, pc}
 800f390:	24000dfc 	.word	0x24000dfc

0800f394 <_write_r>:
 800f394:	b538      	push	{r3, r4, r5, lr}
 800f396:	4d07      	ldr	r5, [pc, #28]	@ (800f3b4 <_write_r+0x20>)
 800f398:	4604      	mov	r4, r0
 800f39a:	4608      	mov	r0, r1
 800f39c:	4611      	mov	r1, r2
 800f39e:	2200      	movs	r2, #0
 800f3a0:	602a      	str	r2, [r5, #0]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	f7f1 ff5d 	bl	8001262 <_write>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d102      	bne.n	800f3b2 <_write_r+0x1e>
 800f3ac:	682b      	ldr	r3, [r5, #0]
 800f3ae:	b103      	cbz	r3, 800f3b2 <_write_r+0x1e>
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	bd38      	pop	{r3, r4, r5, pc}
 800f3b4:	24000dfc 	.word	0x24000dfc

0800f3b8 <__errno>:
 800f3b8:	4b01      	ldr	r3, [pc, #4]	@ (800f3c0 <__errno+0x8>)
 800f3ba:	6818      	ldr	r0, [r3, #0]
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	24000190 	.word	0x24000190

0800f3c4 <__libc_init_array>:
 800f3c4:	b570      	push	{r4, r5, r6, lr}
 800f3c6:	4d0d      	ldr	r5, [pc, #52]	@ (800f3fc <__libc_init_array+0x38>)
 800f3c8:	4c0d      	ldr	r4, [pc, #52]	@ (800f400 <__libc_init_array+0x3c>)
 800f3ca:	1b64      	subs	r4, r4, r5
 800f3cc:	10a4      	asrs	r4, r4, #2
 800f3ce:	2600      	movs	r6, #0
 800f3d0:	42a6      	cmp	r6, r4
 800f3d2:	d109      	bne.n	800f3e8 <__libc_init_array+0x24>
 800f3d4:	4d0b      	ldr	r5, [pc, #44]	@ (800f404 <__libc_init_array+0x40>)
 800f3d6:	4c0c      	ldr	r4, [pc, #48]	@ (800f408 <__libc_init_array+0x44>)
 800f3d8:	f003 f8d6 	bl	8012588 <_init>
 800f3dc:	1b64      	subs	r4, r4, r5
 800f3de:	10a4      	asrs	r4, r4, #2
 800f3e0:	2600      	movs	r6, #0
 800f3e2:	42a6      	cmp	r6, r4
 800f3e4:	d105      	bne.n	800f3f2 <__libc_init_array+0x2e>
 800f3e6:	bd70      	pop	{r4, r5, r6, pc}
 800f3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ec:	4798      	blx	r3
 800f3ee:	3601      	adds	r6, #1
 800f3f0:	e7ee      	b.n	800f3d0 <__libc_init_array+0xc>
 800f3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3f6:	4798      	blx	r3
 800f3f8:	3601      	adds	r6, #1
 800f3fa:	e7f2      	b.n	800f3e2 <__libc_init_array+0x1e>
 800f3fc:	08012ef0 	.word	0x08012ef0
 800f400:	08012ef0 	.word	0x08012ef0
 800f404:	08012ef0 	.word	0x08012ef0
 800f408:	08012ef4 	.word	0x08012ef4

0800f40c <__retarget_lock_init_recursive>:
 800f40c:	4770      	bx	lr

0800f40e <__retarget_lock_acquire_recursive>:
 800f40e:	4770      	bx	lr

0800f410 <__retarget_lock_release_recursive>:
 800f410:	4770      	bx	lr

0800f412 <memcpy>:
 800f412:	440a      	add	r2, r1
 800f414:	4291      	cmp	r1, r2
 800f416:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f41a:	d100      	bne.n	800f41e <memcpy+0xc>
 800f41c:	4770      	bx	lr
 800f41e:	b510      	push	{r4, lr}
 800f420:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f428:	4291      	cmp	r1, r2
 800f42a:	d1f9      	bne.n	800f420 <memcpy+0xe>
 800f42c:	bd10      	pop	{r4, pc}
	...

0800f430 <nan>:
 800f430:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f438 <nan+0x8>
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	00000000 	.word	0x00000000
 800f43c:	7ff80000 	.word	0x7ff80000

0800f440 <nanf>:
 800f440:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f448 <nanf+0x8>
 800f444:	4770      	bx	lr
 800f446:	bf00      	nop
 800f448:	7fc00000 	.word	0x7fc00000

0800f44c <quorem>:
 800f44c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	6903      	ldr	r3, [r0, #16]
 800f452:	690c      	ldr	r4, [r1, #16]
 800f454:	42a3      	cmp	r3, r4
 800f456:	4607      	mov	r7, r0
 800f458:	db7e      	blt.n	800f558 <quorem+0x10c>
 800f45a:	3c01      	subs	r4, #1
 800f45c:	f101 0814 	add.w	r8, r1, #20
 800f460:	00a3      	lsls	r3, r4, #2
 800f462:	f100 0514 	add.w	r5, r0, #20
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f46c:	9301      	str	r3, [sp, #4]
 800f46e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f472:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f476:	3301      	adds	r3, #1
 800f478:	429a      	cmp	r2, r3
 800f47a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f47e:	fbb2 f6f3 	udiv	r6, r2, r3
 800f482:	d32e      	bcc.n	800f4e2 <quorem+0x96>
 800f484:	f04f 0a00 	mov.w	sl, #0
 800f488:	46c4      	mov	ip, r8
 800f48a:	46ae      	mov	lr, r5
 800f48c:	46d3      	mov	fp, sl
 800f48e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f492:	b298      	uxth	r0, r3
 800f494:	fb06 a000 	mla	r0, r6, r0, sl
 800f498:	0c02      	lsrs	r2, r0, #16
 800f49a:	0c1b      	lsrs	r3, r3, #16
 800f49c:	fb06 2303 	mla	r3, r6, r3, r2
 800f4a0:	f8de 2000 	ldr.w	r2, [lr]
 800f4a4:	b280      	uxth	r0, r0
 800f4a6:	b292      	uxth	r2, r2
 800f4a8:	1a12      	subs	r2, r2, r0
 800f4aa:	445a      	add	r2, fp
 800f4ac:	f8de 0000 	ldr.w	r0, [lr]
 800f4b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f4ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f4be:	b292      	uxth	r2, r2
 800f4c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f4c4:	45e1      	cmp	r9, ip
 800f4c6:	f84e 2b04 	str.w	r2, [lr], #4
 800f4ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f4ce:	d2de      	bcs.n	800f48e <quorem+0x42>
 800f4d0:	9b00      	ldr	r3, [sp, #0]
 800f4d2:	58eb      	ldr	r3, [r5, r3]
 800f4d4:	b92b      	cbnz	r3, 800f4e2 <quorem+0x96>
 800f4d6:	9b01      	ldr	r3, [sp, #4]
 800f4d8:	3b04      	subs	r3, #4
 800f4da:	429d      	cmp	r5, r3
 800f4dc:	461a      	mov	r2, r3
 800f4de:	d32f      	bcc.n	800f540 <quorem+0xf4>
 800f4e0:	613c      	str	r4, [r7, #16]
 800f4e2:	4638      	mov	r0, r7
 800f4e4:	f002 fa84 	bl	80119f0 <__mcmp>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	db25      	blt.n	800f538 <quorem+0xec>
 800f4ec:	4629      	mov	r1, r5
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f4f4:	f8d1 c000 	ldr.w	ip, [r1]
 800f4f8:	fa1f fe82 	uxth.w	lr, r2
 800f4fc:	fa1f f38c 	uxth.w	r3, ip
 800f500:	eba3 030e 	sub.w	r3, r3, lr
 800f504:	4403      	add	r3, r0
 800f506:	0c12      	lsrs	r2, r2, #16
 800f508:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f50c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f510:	b29b      	uxth	r3, r3
 800f512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f516:	45c1      	cmp	r9, r8
 800f518:	f841 3b04 	str.w	r3, [r1], #4
 800f51c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f520:	d2e6      	bcs.n	800f4f0 <quorem+0xa4>
 800f522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f52a:	b922      	cbnz	r2, 800f536 <quorem+0xea>
 800f52c:	3b04      	subs	r3, #4
 800f52e:	429d      	cmp	r5, r3
 800f530:	461a      	mov	r2, r3
 800f532:	d30b      	bcc.n	800f54c <quorem+0x100>
 800f534:	613c      	str	r4, [r7, #16]
 800f536:	3601      	adds	r6, #1
 800f538:	4630      	mov	r0, r6
 800f53a:	b003      	add	sp, #12
 800f53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f540:	6812      	ldr	r2, [r2, #0]
 800f542:	3b04      	subs	r3, #4
 800f544:	2a00      	cmp	r2, #0
 800f546:	d1cb      	bne.n	800f4e0 <quorem+0x94>
 800f548:	3c01      	subs	r4, #1
 800f54a:	e7c6      	b.n	800f4da <quorem+0x8e>
 800f54c:	6812      	ldr	r2, [r2, #0]
 800f54e:	3b04      	subs	r3, #4
 800f550:	2a00      	cmp	r2, #0
 800f552:	d1ef      	bne.n	800f534 <quorem+0xe8>
 800f554:	3c01      	subs	r4, #1
 800f556:	e7ea      	b.n	800f52e <quorem+0xe2>
 800f558:	2000      	movs	r0, #0
 800f55a:	e7ee      	b.n	800f53a <quorem+0xee>
 800f55c:	0000      	movs	r0, r0
	...

0800f560 <_dtoa_r>:
 800f560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f564:	ed2d 8b02 	vpush	{d8}
 800f568:	69c7      	ldr	r7, [r0, #28]
 800f56a:	b091      	sub	sp, #68	@ 0x44
 800f56c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f570:	ec55 4b10 	vmov	r4, r5, d0
 800f574:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f576:	9107      	str	r1, [sp, #28]
 800f578:	4681      	mov	r9, r0
 800f57a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f57c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f57e:	b97f      	cbnz	r7, 800f5a0 <_dtoa_r+0x40>
 800f580:	2010      	movs	r0, #16
 800f582:	f7fe fa4b 	bl	800da1c <malloc>
 800f586:	4602      	mov	r2, r0
 800f588:	f8c9 001c 	str.w	r0, [r9, #28]
 800f58c:	b920      	cbnz	r0, 800f598 <_dtoa_r+0x38>
 800f58e:	4ba0      	ldr	r3, [pc, #640]	@ (800f810 <_dtoa_r+0x2b0>)
 800f590:	21ef      	movs	r1, #239	@ 0xef
 800f592:	48a0      	ldr	r0, [pc, #640]	@ (800f814 <_dtoa_r+0x2b4>)
 800f594:	f002 fe30 	bl	80121f8 <__assert_func>
 800f598:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f59c:	6007      	str	r7, [r0, #0]
 800f59e:	60c7      	str	r7, [r0, #12]
 800f5a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f5a4:	6819      	ldr	r1, [r3, #0]
 800f5a6:	b159      	cbz	r1, 800f5c0 <_dtoa_r+0x60>
 800f5a8:	685a      	ldr	r2, [r3, #4]
 800f5aa:	604a      	str	r2, [r1, #4]
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	4093      	lsls	r3, r2
 800f5b0:	608b      	str	r3, [r1, #8]
 800f5b2:	4648      	mov	r0, r9
 800f5b4:	f001 ff98 	bl	80114e8 <_Bfree>
 800f5b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	601a      	str	r2, [r3, #0]
 800f5c0:	1e2b      	subs	r3, r5, #0
 800f5c2:	bfbb      	ittet	lt
 800f5c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f5c8:	9303      	strlt	r3, [sp, #12]
 800f5ca:	2300      	movge	r3, #0
 800f5cc:	2201      	movlt	r2, #1
 800f5ce:	bfac      	ite	ge
 800f5d0:	6033      	strge	r3, [r6, #0]
 800f5d2:	6032      	strlt	r2, [r6, #0]
 800f5d4:	4b90      	ldr	r3, [pc, #576]	@ (800f818 <_dtoa_r+0x2b8>)
 800f5d6:	9e03      	ldr	r6, [sp, #12]
 800f5d8:	43b3      	bics	r3, r6
 800f5da:	d110      	bne.n	800f5fe <_dtoa_r+0x9e>
 800f5dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5de:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f5e2:	6013      	str	r3, [r2, #0]
 800f5e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f5e8:	4323      	orrs	r3, r4
 800f5ea:	f000 84de 	beq.w	800ffaa <_dtoa_r+0xa4a>
 800f5ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f5f0:	4f8a      	ldr	r7, [pc, #552]	@ (800f81c <_dtoa_r+0x2bc>)
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	f000 84e0 	beq.w	800ffb8 <_dtoa_r+0xa58>
 800f5f8:	1cfb      	adds	r3, r7, #3
 800f5fa:	f000 bcdb 	b.w	800ffb4 <_dtoa_r+0xa54>
 800f5fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f602:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f60a:	d10a      	bne.n	800f622 <_dtoa_r+0xc2>
 800f60c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f60e:	2301      	movs	r3, #1
 800f610:	6013      	str	r3, [r2, #0]
 800f612:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f614:	b113      	cbz	r3, 800f61c <_dtoa_r+0xbc>
 800f616:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f618:	4b81      	ldr	r3, [pc, #516]	@ (800f820 <_dtoa_r+0x2c0>)
 800f61a:	6013      	str	r3, [r2, #0]
 800f61c:	4f81      	ldr	r7, [pc, #516]	@ (800f824 <_dtoa_r+0x2c4>)
 800f61e:	f000 bccb 	b.w	800ffb8 <_dtoa_r+0xa58>
 800f622:	aa0e      	add	r2, sp, #56	@ 0x38
 800f624:	a90f      	add	r1, sp, #60	@ 0x3c
 800f626:	4648      	mov	r0, r9
 800f628:	eeb0 0b48 	vmov.f64	d0, d8
 800f62c:	f002 fb00 	bl	8011c30 <__d2b>
 800f630:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f636:	9001      	str	r0, [sp, #4]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d045      	beq.n	800f6c8 <_dtoa_r+0x168>
 800f63c:	eeb0 7b48 	vmov.f64	d7, d8
 800f640:	ee18 1a90 	vmov	r1, s17
 800f644:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f648:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f64c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f650:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f654:	2500      	movs	r5, #0
 800f656:	ee07 1a90 	vmov	s15, r1
 800f65a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f65e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f7f8 <_dtoa_r+0x298>
 800f662:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f666:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f800 <_dtoa_r+0x2a0>
 800f66a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f66e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f808 <_dtoa_r+0x2a8>
 800f672:	ee07 3a90 	vmov	s15, r3
 800f676:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f67a:	eeb0 7b46 	vmov.f64	d7, d6
 800f67e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f682:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f686:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68e:	ee16 8a90 	vmov	r8, s13
 800f692:	d508      	bpl.n	800f6a6 <_dtoa_r+0x146>
 800f694:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f698:	eeb4 6b47 	vcmp.f64	d6, d7
 800f69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a0:	bf18      	it	ne
 800f6a2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800f6a6:	f1b8 0f16 	cmp.w	r8, #22
 800f6aa:	d82b      	bhi.n	800f704 <_dtoa_r+0x1a4>
 800f6ac:	495e      	ldr	r1, [pc, #376]	@ (800f828 <_dtoa_r+0x2c8>)
 800f6ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f6b2:	ed91 7b00 	vldr	d7, [r1]
 800f6b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6be:	d501      	bpl.n	800f6c4 <_dtoa_r+0x164>
 800f6c0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	e01e      	b.n	800f706 <_dtoa_r+0x1a6>
 800f6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6ca:	4413      	add	r3, r2
 800f6cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f6d0:	2920      	cmp	r1, #32
 800f6d2:	bfc1      	itttt	gt
 800f6d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f6d8:	408e      	lslgt	r6, r1
 800f6da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f6de:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f6e2:	bfd6      	itet	le
 800f6e4:	f1c1 0120 	rsble	r1, r1, #32
 800f6e8:	4331      	orrgt	r1, r6
 800f6ea:	fa04 f101 	lslle.w	r1, r4, r1
 800f6ee:	ee07 1a90 	vmov	s15, r1
 800f6f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f6f6:	3b01      	subs	r3, #1
 800f6f8:	ee17 1a90 	vmov	r1, s15
 800f6fc:	2501      	movs	r5, #1
 800f6fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f702:	e7a8      	b.n	800f656 <_dtoa_r+0xf6>
 800f704:	2101      	movs	r1, #1
 800f706:	1ad2      	subs	r2, r2, r3
 800f708:	1e53      	subs	r3, r2, #1
 800f70a:	9306      	str	r3, [sp, #24]
 800f70c:	bf45      	ittet	mi
 800f70e:	f1c2 0301 	rsbmi	r3, r2, #1
 800f712:	9305      	strmi	r3, [sp, #20]
 800f714:	2300      	movpl	r3, #0
 800f716:	2300      	movmi	r3, #0
 800f718:	bf4c      	ite	mi
 800f71a:	9306      	strmi	r3, [sp, #24]
 800f71c:	9305      	strpl	r3, [sp, #20]
 800f71e:	f1b8 0f00 	cmp.w	r8, #0
 800f722:	910c      	str	r1, [sp, #48]	@ 0x30
 800f724:	db18      	blt.n	800f758 <_dtoa_r+0x1f8>
 800f726:	9b06      	ldr	r3, [sp, #24]
 800f728:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f72c:	4443      	add	r3, r8
 800f72e:	9306      	str	r3, [sp, #24]
 800f730:	2300      	movs	r3, #0
 800f732:	9a07      	ldr	r2, [sp, #28]
 800f734:	2a09      	cmp	r2, #9
 800f736:	d849      	bhi.n	800f7cc <_dtoa_r+0x26c>
 800f738:	2a05      	cmp	r2, #5
 800f73a:	bfc4      	itt	gt
 800f73c:	3a04      	subgt	r2, #4
 800f73e:	9207      	strgt	r2, [sp, #28]
 800f740:	9a07      	ldr	r2, [sp, #28]
 800f742:	f1a2 0202 	sub.w	r2, r2, #2
 800f746:	bfcc      	ite	gt
 800f748:	2400      	movgt	r4, #0
 800f74a:	2401      	movle	r4, #1
 800f74c:	2a03      	cmp	r2, #3
 800f74e:	d848      	bhi.n	800f7e2 <_dtoa_r+0x282>
 800f750:	e8df f002 	tbb	[pc, r2]
 800f754:	3a2c2e0b 	.word	0x3a2c2e0b
 800f758:	9b05      	ldr	r3, [sp, #20]
 800f75a:	2200      	movs	r2, #0
 800f75c:	eba3 0308 	sub.w	r3, r3, r8
 800f760:	9305      	str	r3, [sp, #20]
 800f762:	920a      	str	r2, [sp, #40]	@ 0x28
 800f764:	f1c8 0300 	rsb	r3, r8, #0
 800f768:	e7e3      	b.n	800f732 <_dtoa_r+0x1d2>
 800f76a:	2200      	movs	r2, #0
 800f76c:	9208      	str	r2, [sp, #32]
 800f76e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f770:	2a00      	cmp	r2, #0
 800f772:	dc39      	bgt.n	800f7e8 <_dtoa_r+0x288>
 800f774:	f04f 0b01 	mov.w	fp, #1
 800f778:	46da      	mov	sl, fp
 800f77a:	465a      	mov	r2, fp
 800f77c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f780:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f784:	2100      	movs	r1, #0
 800f786:	2004      	movs	r0, #4
 800f788:	f100 0614 	add.w	r6, r0, #20
 800f78c:	4296      	cmp	r6, r2
 800f78e:	d930      	bls.n	800f7f2 <_dtoa_r+0x292>
 800f790:	6079      	str	r1, [r7, #4]
 800f792:	4648      	mov	r0, r9
 800f794:	9304      	str	r3, [sp, #16]
 800f796:	f001 fe67 	bl	8011468 <_Balloc>
 800f79a:	9b04      	ldr	r3, [sp, #16]
 800f79c:	4607      	mov	r7, r0
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d146      	bne.n	800f830 <_dtoa_r+0x2d0>
 800f7a2:	4b22      	ldr	r3, [pc, #136]	@ (800f82c <_dtoa_r+0x2cc>)
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f7aa:	e6f2      	b.n	800f592 <_dtoa_r+0x32>
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	e7dd      	b.n	800f76c <_dtoa_r+0x20c>
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	9208      	str	r2, [sp, #32]
 800f7b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7b6:	eb08 0b02 	add.w	fp, r8, r2
 800f7ba:	f10b 0a01 	add.w	sl, fp, #1
 800f7be:	4652      	mov	r2, sl
 800f7c0:	2a01      	cmp	r2, #1
 800f7c2:	bfb8      	it	lt
 800f7c4:	2201      	movlt	r2, #1
 800f7c6:	e7db      	b.n	800f780 <_dtoa_r+0x220>
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	e7f2      	b.n	800f7b2 <_dtoa_r+0x252>
 800f7cc:	2401      	movs	r4, #1
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f7d4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f7d8:	2100      	movs	r1, #0
 800f7da:	46da      	mov	sl, fp
 800f7dc:	2212      	movs	r2, #18
 800f7de:	9109      	str	r1, [sp, #36]	@ 0x24
 800f7e0:	e7ce      	b.n	800f780 <_dtoa_r+0x220>
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	9208      	str	r2, [sp, #32]
 800f7e6:	e7f5      	b.n	800f7d4 <_dtoa_r+0x274>
 800f7e8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f7ec:	46da      	mov	sl, fp
 800f7ee:	465a      	mov	r2, fp
 800f7f0:	e7c6      	b.n	800f780 <_dtoa_r+0x220>
 800f7f2:	3101      	adds	r1, #1
 800f7f4:	0040      	lsls	r0, r0, #1
 800f7f6:	e7c7      	b.n	800f788 <_dtoa_r+0x228>
 800f7f8:	636f4361 	.word	0x636f4361
 800f7fc:	3fd287a7 	.word	0x3fd287a7
 800f800:	8b60c8b3 	.word	0x8b60c8b3
 800f804:	3fc68a28 	.word	0x3fc68a28
 800f808:	509f79fb 	.word	0x509f79fb
 800f80c:	3fd34413 	.word	0x3fd34413
 800f810:	08012c36 	.word	0x08012c36
 800f814:	08012c4d 	.word	0x08012c4d
 800f818:	7ff00000 	.word	0x7ff00000
 800f81c:	08012c32 	.word	0x08012c32
 800f820:	08012d3e 	.word	0x08012d3e
 800f824:	08012d3d 	.word	0x08012d3d
 800f828:	08012dd0 	.word	0x08012dd0
 800f82c:	08012ca5 	.word	0x08012ca5
 800f830:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f834:	f1ba 0f0e 	cmp.w	sl, #14
 800f838:	6010      	str	r0, [r2, #0]
 800f83a:	d86f      	bhi.n	800f91c <_dtoa_r+0x3bc>
 800f83c:	2c00      	cmp	r4, #0
 800f83e:	d06d      	beq.n	800f91c <_dtoa_r+0x3bc>
 800f840:	f1b8 0f00 	cmp.w	r8, #0
 800f844:	f340 80c2 	ble.w	800f9cc <_dtoa_r+0x46c>
 800f848:	4aca      	ldr	r2, [pc, #808]	@ (800fb74 <_dtoa_r+0x614>)
 800f84a:	f008 010f 	and.w	r1, r8, #15
 800f84e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f852:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f856:	ed92 7b00 	vldr	d7, [r2]
 800f85a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f85e:	f000 80a9 	beq.w	800f9b4 <_dtoa_r+0x454>
 800f862:	4ac5      	ldr	r2, [pc, #788]	@ (800fb78 <_dtoa_r+0x618>)
 800f864:	ed92 6b08 	vldr	d6, [r2, #32]
 800f868:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f86c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f870:	f001 010f 	and.w	r1, r1, #15
 800f874:	2203      	movs	r2, #3
 800f876:	48c0      	ldr	r0, [pc, #768]	@ (800fb78 <_dtoa_r+0x618>)
 800f878:	2900      	cmp	r1, #0
 800f87a:	f040 809d 	bne.w	800f9b8 <_dtoa_r+0x458>
 800f87e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f882:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f886:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f88a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f88c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f890:	2900      	cmp	r1, #0
 800f892:	f000 80c1 	beq.w	800fa18 <_dtoa_r+0x4b8>
 800f896:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f89a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a2:	f140 80b9 	bpl.w	800fa18 <_dtoa_r+0x4b8>
 800f8a6:	f1ba 0f00 	cmp.w	sl, #0
 800f8aa:	f000 80b5 	beq.w	800fa18 <_dtoa_r+0x4b8>
 800f8ae:	f1bb 0f00 	cmp.w	fp, #0
 800f8b2:	dd31      	ble.n	800f918 <_dtoa_r+0x3b8>
 800f8b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f8b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f8bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f8c0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800f8c4:	9104      	str	r1, [sp, #16]
 800f8c6:	3201      	adds	r2, #1
 800f8c8:	465c      	mov	r4, fp
 800f8ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f8ce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f8d2:	ee07 2a90 	vmov	s15, r2
 800f8d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f8da:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f8de:	ee15 2a90 	vmov	r2, s11
 800f8e2:	ec51 0b15 	vmov	r0, r1, d5
 800f8e6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f8ea:	2c00      	cmp	r4, #0
 800f8ec:	f040 8098 	bne.w	800fa20 <_dtoa_r+0x4c0>
 800f8f0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f8f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f8f8:	ec41 0b17 	vmov	d7, r0, r1
 800f8fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f904:	f300 8261 	bgt.w	800fdca <_dtoa_r+0x86a>
 800f908:	eeb1 7b47 	vneg.f64	d7, d7
 800f90c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f914:	f100 80f5 	bmi.w	800fb02 <_dtoa_r+0x5a2>
 800f918:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f91c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f91e:	2a00      	cmp	r2, #0
 800f920:	f2c0 812c 	blt.w	800fb7c <_dtoa_r+0x61c>
 800f924:	f1b8 0f0e 	cmp.w	r8, #14
 800f928:	f300 8128 	bgt.w	800fb7c <_dtoa_r+0x61c>
 800f92c:	4b91      	ldr	r3, [pc, #580]	@ (800fb74 <_dtoa_r+0x614>)
 800f92e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f932:	ed93 6b00 	vldr	d6, [r3]
 800f936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f938:	2b00      	cmp	r3, #0
 800f93a:	da03      	bge.n	800f944 <_dtoa_r+0x3e4>
 800f93c:	f1ba 0f00 	cmp.w	sl, #0
 800f940:	f340 80d2 	ble.w	800fae8 <_dtoa_r+0x588>
 800f944:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f948:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f94c:	463e      	mov	r6, r7
 800f94e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f952:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f956:	ee15 3a10 	vmov	r3, s10
 800f95a:	3330      	adds	r3, #48	@ 0x30
 800f95c:	f806 3b01 	strb.w	r3, [r6], #1
 800f960:	1bf3      	subs	r3, r6, r7
 800f962:	459a      	cmp	sl, r3
 800f964:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f968:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f96c:	f040 80f8 	bne.w	800fb60 <_dtoa_r+0x600>
 800f970:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f974:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97c:	f300 80dd 	bgt.w	800fb3a <_dtoa_r+0x5da>
 800f980:	eeb4 7b46 	vcmp.f64	d7, d6
 800f984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f988:	d104      	bne.n	800f994 <_dtoa_r+0x434>
 800f98a:	ee15 3a10 	vmov	r3, s10
 800f98e:	07db      	lsls	r3, r3, #31
 800f990:	f100 80d3 	bmi.w	800fb3a <_dtoa_r+0x5da>
 800f994:	9901      	ldr	r1, [sp, #4]
 800f996:	4648      	mov	r0, r9
 800f998:	f001 fda6 	bl	80114e8 <_Bfree>
 800f99c:	2300      	movs	r3, #0
 800f99e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f9a0:	7033      	strb	r3, [r6, #0]
 800f9a2:	f108 0301 	add.w	r3, r8, #1
 800f9a6:	6013      	str	r3, [r2, #0]
 800f9a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f000 8304 	beq.w	800ffb8 <_dtoa_r+0xa58>
 800f9b0:	601e      	str	r6, [r3, #0]
 800f9b2:	e301      	b.n	800ffb8 <_dtoa_r+0xa58>
 800f9b4:	2202      	movs	r2, #2
 800f9b6:	e75e      	b.n	800f876 <_dtoa_r+0x316>
 800f9b8:	07cc      	lsls	r4, r1, #31
 800f9ba:	d504      	bpl.n	800f9c6 <_dtoa_r+0x466>
 800f9bc:	ed90 6b00 	vldr	d6, [r0]
 800f9c0:	3201      	adds	r2, #1
 800f9c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f9c6:	1049      	asrs	r1, r1, #1
 800f9c8:	3008      	adds	r0, #8
 800f9ca:	e755      	b.n	800f878 <_dtoa_r+0x318>
 800f9cc:	d022      	beq.n	800fa14 <_dtoa_r+0x4b4>
 800f9ce:	f1c8 0100 	rsb	r1, r8, #0
 800f9d2:	4a68      	ldr	r2, [pc, #416]	@ (800fb74 <_dtoa_r+0x614>)
 800f9d4:	f001 000f 	and.w	r0, r1, #15
 800f9d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f9dc:	ed92 7b00 	vldr	d7, [r2]
 800f9e0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f9e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9e8:	4863      	ldr	r0, [pc, #396]	@ (800fb78 <_dtoa_r+0x618>)
 800f9ea:	1109      	asrs	r1, r1, #4
 800f9ec:	2400      	movs	r4, #0
 800f9ee:	2202      	movs	r2, #2
 800f9f0:	b929      	cbnz	r1, 800f9fe <_dtoa_r+0x49e>
 800f9f2:	2c00      	cmp	r4, #0
 800f9f4:	f43f af49 	beq.w	800f88a <_dtoa_r+0x32a>
 800f9f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9fc:	e745      	b.n	800f88a <_dtoa_r+0x32a>
 800f9fe:	07ce      	lsls	r6, r1, #31
 800fa00:	d505      	bpl.n	800fa0e <_dtoa_r+0x4ae>
 800fa02:	ed90 6b00 	vldr	d6, [r0]
 800fa06:	3201      	adds	r2, #1
 800fa08:	2401      	movs	r4, #1
 800fa0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fa0e:	1049      	asrs	r1, r1, #1
 800fa10:	3008      	adds	r0, #8
 800fa12:	e7ed      	b.n	800f9f0 <_dtoa_r+0x490>
 800fa14:	2202      	movs	r2, #2
 800fa16:	e738      	b.n	800f88a <_dtoa_r+0x32a>
 800fa18:	f8cd 8010 	str.w	r8, [sp, #16]
 800fa1c:	4654      	mov	r4, sl
 800fa1e:	e754      	b.n	800f8ca <_dtoa_r+0x36a>
 800fa20:	4a54      	ldr	r2, [pc, #336]	@ (800fb74 <_dtoa_r+0x614>)
 800fa22:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800fa26:	ed12 4b02 	vldr	d4, [r2, #-8]
 800fa2a:	9a08      	ldr	r2, [sp, #32]
 800fa2c:	ec41 0b17 	vmov	d7, r0, r1
 800fa30:	443c      	add	r4, r7
 800fa32:	b34a      	cbz	r2, 800fa88 <_dtoa_r+0x528>
 800fa34:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800fa38:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800fa3c:	463e      	mov	r6, r7
 800fa3e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800fa42:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800fa46:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fa4a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fa4e:	ee14 2a90 	vmov	r2, s9
 800fa52:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fa56:	3230      	adds	r2, #48	@ 0x30
 800fa58:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fa5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fa60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa64:	f806 2b01 	strb.w	r2, [r6], #1
 800fa68:	d438      	bmi.n	800fadc <_dtoa_r+0x57c>
 800fa6a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fa6e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fa72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa76:	d462      	bmi.n	800fb3e <_dtoa_r+0x5de>
 800fa78:	42a6      	cmp	r6, r4
 800fa7a:	f43f af4d 	beq.w	800f918 <_dtoa_r+0x3b8>
 800fa7e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800fa82:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fa86:	e7e0      	b.n	800fa4a <_dtoa_r+0x4ea>
 800fa88:	4621      	mov	r1, r4
 800fa8a:	463e      	mov	r6, r7
 800fa8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fa90:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800fa94:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fa98:	ee14 2a90 	vmov	r2, s9
 800fa9c:	3230      	adds	r2, #48	@ 0x30
 800fa9e:	f806 2b01 	strb.w	r2, [r6], #1
 800faa2:	42a6      	cmp	r6, r4
 800faa4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800faa8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800faac:	d119      	bne.n	800fae2 <_dtoa_r+0x582>
 800faae:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800fab2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800fab6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800faba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fabe:	dc3e      	bgt.n	800fb3e <_dtoa_r+0x5de>
 800fac0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fac4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800fac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800facc:	f57f af24 	bpl.w	800f918 <_dtoa_r+0x3b8>
 800fad0:	460e      	mov	r6, r1
 800fad2:	3901      	subs	r1, #1
 800fad4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fad8:	2b30      	cmp	r3, #48	@ 0x30
 800fada:	d0f9      	beq.n	800fad0 <_dtoa_r+0x570>
 800fadc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fae0:	e758      	b.n	800f994 <_dtoa_r+0x434>
 800fae2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fae6:	e7d5      	b.n	800fa94 <_dtoa_r+0x534>
 800fae8:	d10b      	bne.n	800fb02 <_dtoa_r+0x5a2>
 800faea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800faee:	ee26 6b07 	vmul.f64	d6, d6, d7
 800faf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800faf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fafe:	f2c0 8161 	blt.w	800fdc4 <_dtoa_r+0x864>
 800fb02:	2400      	movs	r4, #0
 800fb04:	4625      	mov	r5, r4
 800fb06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb08:	43db      	mvns	r3, r3
 800fb0a:	9304      	str	r3, [sp, #16]
 800fb0c:	463e      	mov	r6, r7
 800fb0e:	f04f 0800 	mov.w	r8, #0
 800fb12:	4621      	mov	r1, r4
 800fb14:	4648      	mov	r0, r9
 800fb16:	f001 fce7 	bl	80114e8 <_Bfree>
 800fb1a:	2d00      	cmp	r5, #0
 800fb1c:	d0de      	beq.n	800fadc <_dtoa_r+0x57c>
 800fb1e:	f1b8 0f00 	cmp.w	r8, #0
 800fb22:	d005      	beq.n	800fb30 <_dtoa_r+0x5d0>
 800fb24:	45a8      	cmp	r8, r5
 800fb26:	d003      	beq.n	800fb30 <_dtoa_r+0x5d0>
 800fb28:	4641      	mov	r1, r8
 800fb2a:	4648      	mov	r0, r9
 800fb2c:	f001 fcdc 	bl	80114e8 <_Bfree>
 800fb30:	4629      	mov	r1, r5
 800fb32:	4648      	mov	r0, r9
 800fb34:	f001 fcd8 	bl	80114e8 <_Bfree>
 800fb38:	e7d0      	b.n	800fadc <_dtoa_r+0x57c>
 800fb3a:	f8cd 8010 	str.w	r8, [sp, #16]
 800fb3e:	4633      	mov	r3, r6
 800fb40:	461e      	mov	r6, r3
 800fb42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb46:	2a39      	cmp	r2, #57	@ 0x39
 800fb48:	d106      	bne.n	800fb58 <_dtoa_r+0x5f8>
 800fb4a:	429f      	cmp	r7, r3
 800fb4c:	d1f8      	bne.n	800fb40 <_dtoa_r+0x5e0>
 800fb4e:	9a04      	ldr	r2, [sp, #16]
 800fb50:	3201      	adds	r2, #1
 800fb52:	9204      	str	r2, [sp, #16]
 800fb54:	2230      	movs	r2, #48	@ 0x30
 800fb56:	703a      	strb	r2, [r7, #0]
 800fb58:	781a      	ldrb	r2, [r3, #0]
 800fb5a:	3201      	adds	r2, #1
 800fb5c:	701a      	strb	r2, [r3, #0]
 800fb5e:	e7bd      	b.n	800fadc <_dtoa_r+0x57c>
 800fb60:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fb64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb6c:	f47f aeef 	bne.w	800f94e <_dtoa_r+0x3ee>
 800fb70:	e710      	b.n	800f994 <_dtoa_r+0x434>
 800fb72:	bf00      	nop
 800fb74:	08012dd0 	.word	0x08012dd0
 800fb78:	08012da8 	.word	0x08012da8
 800fb7c:	9908      	ldr	r1, [sp, #32]
 800fb7e:	2900      	cmp	r1, #0
 800fb80:	f000 80e3 	beq.w	800fd4a <_dtoa_r+0x7ea>
 800fb84:	9907      	ldr	r1, [sp, #28]
 800fb86:	2901      	cmp	r1, #1
 800fb88:	f300 80c8 	bgt.w	800fd1c <_dtoa_r+0x7bc>
 800fb8c:	2d00      	cmp	r5, #0
 800fb8e:	f000 80c1 	beq.w	800fd14 <_dtoa_r+0x7b4>
 800fb92:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fb96:	9e05      	ldr	r6, [sp, #20]
 800fb98:	461c      	mov	r4, r3
 800fb9a:	9304      	str	r3, [sp, #16]
 800fb9c:	9b05      	ldr	r3, [sp, #20]
 800fb9e:	4413      	add	r3, r2
 800fba0:	9305      	str	r3, [sp, #20]
 800fba2:	9b06      	ldr	r3, [sp, #24]
 800fba4:	2101      	movs	r1, #1
 800fba6:	4413      	add	r3, r2
 800fba8:	4648      	mov	r0, r9
 800fbaa:	9306      	str	r3, [sp, #24]
 800fbac:	f001 fd9a 	bl	80116e4 <__i2b>
 800fbb0:	9b04      	ldr	r3, [sp, #16]
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	b166      	cbz	r6, 800fbd0 <_dtoa_r+0x670>
 800fbb6:	9a06      	ldr	r2, [sp, #24]
 800fbb8:	2a00      	cmp	r2, #0
 800fbba:	dd09      	ble.n	800fbd0 <_dtoa_r+0x670>
 800fbbc:	42b2      	cmp	r2, r6
 800fbbe:	9905      	ldr	r1, [sp, #20]
 800fbc0:	bfa8      	it	ge
 800fbc2:	4632      	movge	r2, r6
 800fbc4:	1a89      	subs	r1, r1, r2
 800fbc6:	9105      	str	r1, [sp, #20]
 800fbc8:	9906      	ldr	r1, [sp, #24]
 800fbca:	1ab6      	subs	r6, r6, r2
 800fbcc:	1a8a      	subs	r2, r1, r2
 800fbce:	9206      	str	r2, [sp, #24]
 800fbd0:	b1fb      	cbz	r3, 800fc12 <_dtoa_r+0x6b2>
 800fbd2:	9a08      	ldr	r2, [sp, #32]
 800fbd4:	2a00      	cmp	r2, #0
 800fbd6:	f000 80bc 	beq.w	800fd52 <_dtoa_r+0x7f2>
 800fbda:	b19c      	cbz	r4, 800fc04 <_dtoa_r+0x6a4>
 800fbdc:	4629      	mov	r1, r5
 800fbde:	4622      	mov	r2, r4
 800fbe0:	4648      	mov	r0, r9
 800fbe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbe4:	f001 fe3e 	bl	8011864 <__pow5mult>
 800fbe8:	9a01      	ldr	r2, [sp, #4]
 800fbea:	4601      	mov	r1, r0
 800fbec:	4605      	mov	r5, r0
 800fbee:	4648      	mov	r0, r9
 800fbf0:	f001 fd8e 	bl	8011710 <__multiply>
 800fbf4:	9901      	ldr	r1, [sp, #4]
 800fbf6:	9004      	str	r0, [sp, #16]
 800fbf8:	4648      	mov	r0, r9
 800fbfa:	f001 fc75 	bl	80114e8 <_Bfree>
 800fbfe:	9a04      	ldr	r2, [sp, #16]
 800fc00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc02:	9201      	str	r2, [sp, #4]
 800fc04:	1b1a      	subs	r2, r3, r4
 800fc06:	d004      	beq.n	800fc12 <_dtoa_r+0x6b2>
 800fc08:	9901      	ldr	r1, [sp, #4]
 800fc0a:	4648      	mov	r0, r9
 800fc0c:	f001 fe2a 	bl	8011864 <__pow5mult>
 800fc10:	9001      	str	r0, [sp, #4]
 800fc12:	2101      	movs	r1, #1
 800fc14:	4648      	mov	r0, r9
 800fc16:	f001 fd65 	bl	80116e4 <__i2b>
 800fc1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f000 81d0 	beq.w	800ffc4 <_dtoa_r+0xa64>
 800fc24:	461a      	mov	r2, r3
 800fc26:	4601      	mov	r1, r0
 800fc28:	4648      	mov	r0, r9
 800fc2a:	f001 fe1b 	bl	8011864 <__pow5mult>
 800fc2e:	9b07      	ldr	r3, [sp, #28]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	4604      	mov	r4, r0
 800fc34:	f300 8095 	bgt.w	800fd62 <_dtoa_r+0x802>
 800fc38:	9b02      	ldr	r3, [sp, #8]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	f040 808b 	bne.w	800fd56 <_dtoa_r+0x7f6>
 800fc40:	9b03      	ldr	r3, [sp, #12]
 800fc42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fc46:	2a00      	cmp	r2, #0
 800fc48:	f040 8087 	bne.w	800fd5a <_dtoa_r+0x7fa>
 800fc4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fc50:	0d12      	lsrs	r2, r2, #20
 800fc52:	0512      	lsls	r2, r2, #20
 800fc54:	2a00      	cmp	r2, #0
 800fc56:	f000 8082 	beq.w	800fd5e <_dtoa_r+0x7fe>
 800fc5a:	9b05      	ldr	r3, [sp, #20]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	9305      	str	r3, [sp, #20]
 800fc60:	9b06      	ldr	r3, [sp, #24]
 800fc62:	3301      	adds	r3, #1
 800fc64:	9306      	str	r3, [sp, #24]
 800fc66:	2301      	movs	r3, #1
 800fc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f000 81af 	beq.w	800ffd0 <_dtoa_r+0xa70>
 800fc72:	6922      	ldr	r2, [r4, #16]
 800fc74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fc78:	6910      	ldr	r0, [r2, #16]
 800fc7a:	f001 fce7 	bl	801164c <__hi0bits>
 800fc7e:	f1c0 0020 	rsb	r0, r0, #32
 800fc82:	9b06      	ldr	r3, [sp, #24]
 800fc84:	4418      	add	r0, r3
 800fc86:	f010 001f 	ands.w	r0, r0, #31
 800fc8a:	d076      	beq.n	800fd7a <_dtoa_r+0x81a>
 800fc8c:	f1c0 0220 	rsb	r2, r0, #32
 800fc90:	2a04      	cmp	r2, #4
 800fc92:	dd69      	ble.n	800fd68 <_dtoa_r+0x808>
 800fc94:	9b05      	ldr	r3, [sp, #20]
 800fc96:	f1c0 001c 	rsb	r0, r0, #28
 800fc9a:	4403      	add	r3, r0
 800fc9c:	9305      	str	r3, [sp, #20]
 800fc9e:	9b06      	ldr	r3, [sp, #24]
 800fca0:	4406      	add	r6, r0
 800fca2:	4403      	add	r3, r0
 800fca4:	9306      	str	r3, [sp, #24]
 800fca6:	9b05      	ldr	r3, [sp, #20]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	dd05      	ble.n	800fcb8 <_dtoa_r+0x758>
 800fcac:	9901      	ldr	r1, [sp, #4]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	4648      	mov	r0, r9
 800fcb2:	f001 fe31 	bl	8011918 <__lshift>
 800fcb6:	9001      	str	r0, [sp, #4]
 800fcb8:	9b06      	ldr	r3, [sp, #24]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	dd05      	ble.n	800fcca <_dtoa_r+0x76a>
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	4648      	mov	r0, r9
 800fcc4:	f001 fe28 	bl	8011918 <__lshift>
 800fcc8:	4604      	mov	r4, r0
 800fcca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d056      	beq.n	800fd7e <_dtoa_r+0x81e>
 800fcd0:	9801      	ldr	r0, [sp, #4]
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	f001 fe8c 	bl	80119f0 <__mcmp>
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	da50      	bge.n	800fd7e <_dtoa_r+0x81e>
 800fcdc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800fce0:	9304      	str	r3, [sp, #16]
 800fce2:	9901      	ldr	r1, [sp, #4]
 800fce4:	2300      	movs	r3, #0
 800fce6:	220a      	movs	r2, #10
 800fce8:	4648      	mov	r0, r9
 800fcea:	f001 fc1f 	bl	801152c <__multadd>
 800fcee:	9b08      	ldr	r3, [sp, #32]
 800fcf0:	9001      	str	r0, [sp, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	f000 816e 	beq.w	800ffd4 <_dtoa_r+0xa74>
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	220a      	movs	r2, #10
 800fcfe:	4648      	mov	r0, r9
 800fd00:	f001 fc14 	bl	801152c <__multadd>
 800fd04:	f1bb 0f00 	cmp.w	fp, #0
 800fd08:	4605      	mov	r5, r0
 800fd0a:	dc64      	bgt.n	800fdd6 <_dtoa_r+0x876>
 800fd0c:	9b07      	ldr	r3, [sp, #28]
 800fd0e:	2b02      	cmp	r3, #2
 800fd10:	dc3e      	bgt.n	800fd90 <_dtoa_r+0x830>
 800fd12:	e060      	b.n	800fdd6 <_dtoa_r+0x876>
 800fd14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fd1a:	e73c      	b.n	800fb96 <_dtoa_r+0x636>
 800fd1c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800fd20:	42a3      	cmp	r3, r4
 800fd22:	bfbf      	itttt	lt
 800fd24:	1ae2      	sublt	r2, r4, r3
 800fd26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fd28:	189b      	addlt	r3, r3, r2
 800fd2a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800fd2c:	bfae      	itee	ge
 800fd2e:	1b1c      	subge	r4, r3, r4
 800fd30:	4623      	movlt	r3, r4
 800fd32:	2400      	movlt	r4, #0
 800fd34:	f1ba 0f00 	cmp.w	sl, #0
 800fd38:	bfb5      	itete	lt
 800fd3a:	9a05      	ldrlt	r2, [sp, #20]
 800fd3c:	9e05      	ldrge	r6, [sp, #20]
 800fd3e:	eba2 060a 	sublt.w	r6, r2, sl
 800fd42:	4652      	movge	r2, sl
 800fd44:	bfb8      	it	lt
 800fd46:	2200      	movlt	r2, #0
 800fd48:	e727      	b.n	800fb9a <_dtoa_r+0x63a>
 800fd4a:	9e05      	ldr	r6, [sp, #20]
 800fd4c:	9d08      	ldr	r5, [sp, #32]
 800fd4e:	461c      	mov	r4, r3
 800fd50:	e730      	b.n	800fbb4 <_dtoa_r+0x654>
 800fd52:	461a      	mov	r2, r3
 800fd54:	e758      	b.n	800fc08 <_dtoa_r+0x6a8>
 800fd56:	2300      	movs	r3, #0
 800fd58:	e786      	b.n	800fc68 <_dtoa_r+0x708>
 800fd5a:	9b02      	ldr	r3, [sp, #8]
 800fd5c:	e784      	b.n	800fc68 <_dtoa_r+0x708>
 800fd5e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fd60:	e783      	b.n	800fc6a <_dtoa_r+0x70a>
 800fd62:	2300      	movs	r3, #0
 800fd64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd66:	e784      	b.n	800fc72 <_dtoa_r+0x712>
 800fd68:	d09d      	beq.n	800fca6 <_dtoa_r+0x746>
 800fd6a:	9b05      	ldr	r3, [sp, #20]
 800fd6c:	321c      	adds	r2, #28
 800fd6e:	4413      	add	r3, r2
 800fd70:	9305      	str	r3, [sp, #20]
 800fd72:	9b06      	ldr	r3, [sp, #24]
 800fd74:	4416      	add	r6, r2
 800fd76:	4413      	add	r3, r2
 800fd78:	e794      	b.n	800fca4 <_dtoa_r+0x744>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	e7f5      	b.n	800fd6a <_dtoa_r+0x80a>
 800fd7e:	f1ba 0f00 	cmp.w	sl, #0
 800fd82:	f8cd 8010 	str.w	r8, [sp, #16]
 800fd86:	46d3      	mov	fp, sl
 800fd88:	dc21      	bgt.n	800fdce <_dtoa_r+0x86e>
 800fd8a:	9b07      	ldr	r3, [sp, #28]
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	dd1e      	ble.n	800fdce <_dtoa_r+0x86e>
 800fd90:	f1bb 0f00 	cmp.w	fp, #0
 800fd94:	f47f aeb7 	bne.w	800fb06 <_dtoa_r+0x5a6>
 800fd98:	4621      	mov	r1, r4
 800fd9a:	465b      	mov	r3, fp
 800fd9c:	2205      	movs	r2, #5
 800fd9e:	4648      	mov	r0, r9
 800fda0:	f001 fbc4 	bl	801152c <__multadd>
 800fda4:	4601      	mov	r1, r0
 800fda6:	4604      	mov	r4, r0
 800fda8:	9801      	ldr	r0, [sp, #4]
 800fdaa:	f001 fe21 	bl	80119f0 <__mcmp>
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	f77f aea9 	ble.w	800fb06 <_dtoa_r+0x5a6>
 800fdb4:	463e      	mov	r6, r7
 800fdb6:	2331      	movs	r3, #49	@ 0x31
 800fdb8:	f806 3b01 	strb.w	r3, [r6], #1
 800fdbc:	9b04      	ldr	r3, [sp, #16]
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	9304      	str	r3, [sp, #16]
 800fdc2:	e6a4      	b.n	800fb0e <_dtoa_r+0x5ae>
 800fdc4:	f8cd 8010 	str.w	r8, [sp, #16]
 800fdc8:	4654      	mov	r4, sl
 800fdca:	4625      	mov	r5, r4
 800fdcc:	e7f2      	b.n	800fdb4 <_dtoa_r+0x854>
 800fdce:	9b08      	ldr	r3, [sp, #32]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f000 8103 	beq.w	800ffdc <_dtoa_r+0xa7c>
 800fdd6:	2e00      	cmp	r6, #0
 800fdd8:	dd05      	ble.n	800fde6 <_dtoa_r+0x886>
 800fdda:	4629      	mov	r1, r5
 800fddc:	4632      	mov	r2, r6
 800fdde:	4648      	mov	r0, r9
 800fde0:	f001 fd9a 	bl	8011918 <__lshift>
 800fde4:	4605      	mov	r5, r0
 800fde6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d058      	beq.n	800fe9e <_dtoa_r+0x93e>
 800fdec:	6869      	ldr	r1, [r5, #4]
 800fdee:	4648      	mov	r0, r9
 800fdf0:	f001 fb3a 	bl	8011468 <_Balloc>
 800fdf4:	4606      	mov	r6, r0
 800fdf6:	b928      	cbnz	r0, 800fe04 <_dtoa_r+0x8a4>
 800fdf8:	4b82      	ldr	r3, [pc, #520]	@ (8010004 <_dtoa_r+0xaa4>)
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fe00:	f7ff bbc7 	b.w	800f592 <_dtoa_r+0x32>
 800fe04:	692a      	ldr	r2, [r5, #16]
 800fe06:	3202      	adds	r2, #2
 800fe08:	0092      	lsls	r2, r2, #2
 800fe0a:	f105 010c 	add.w	r1, r5, #12
 800fe0e:	300c      	adds	r0, #12
 800fe10:	f7ff faff 	bl	800f412 <memcpy>
 800fe14:	2201      	movs	r2, #1
 800fe16:	4631      	mov	r1, r6
 800fe18:	4648      	mov	r0, r9
 800fe1a:	f001 fd7d 	bl	8011918 <__lshift>
 800fe1e:	1c7b      	adds	r3, r7, #1
 800fe20:	9305      	str	r3, [sp, #20]
 800fe22:	eb07 030b 	add.w	r3, r7, fp
 800fe26:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe28:	9b02      	ldr	r3, [sp, #8]
 800fe2a:	f003 0301 	and.w	r3, r3, #1
 800fe2e:	46a8      	mov	r8, r5
 800fe30:	9308      	str	r3, [sp, #32]
 800fe32:	4605      	mov	r5, r0
 800fe34:	9b05      	ldr	r3, [sp, #20]
 800fe36:	9801      	ldr	r0, [sp, #4]
 800fe38:	4621      	mov	r1, r4
 800fe3a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800fe3e:	f7ff fb05 	bl	800f44c <quorem>
 800fe42:	4641      	mov	r1, r8
 800fe44:	9002      	str	r0, [sp, #8]
 800fe46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fe4a:	9801      	ldr	r0, [sp, #4]
 800fe4c:	f001 fdd0 	bl	80119f0 <__mcmp>
 800fe50:	462a      	mov	r2, r5
 800fe52:	9006      	str	r0, [sp, #24]
 800fe54:	4621      	mov	r1, r4
 800fe56:	4648      	mov	r0, r9
 800fe58:	f001 fde6 	bl	8011a28 <__mdiff>
 800fe5c:	68c2      	ldr	r2, [r0, #12]
 800fe5e:	4606      	mov	r6, r0
 800fe60:	b9fa      	cbnz	r2, 800fea2 <_dtoa_r+0x942>
 800fe62:	4601      	mov	r1, r0
 800fe64:	9801      	ldr	r0, [sp, #4]
 800fe66:	f001 fdc3 	bl	80119f0 <__mcmp>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	4631      	mov	r1, r6
 800fe6e:	4648      	mov	r0, r9
 800fe70:	920a      	str	r2, [sp, #40]	@ 0x28
 800fe72:	f001 fb39 	bl	80114e8 <_Bfree>
 800fe76:	9b07      	ldr	r3, [sp, #28]
 800fe78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe7a:	9e05      	ldr	r6, [sp, #20]
 800fe7c:	ea43 0102 	orr.w	r1, r3, r2
 800fe80:	9b08      	ldr	r3, [sp, #32]
 800fe82:	4319      	orrs	r1, r3
 800fe84:	d10f      	bne.n	800fea6 <_dtoa_r+0x946>
 800fe86:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fe8a:	d028      	beq.n	800fede <_dtoa_r+0x97e>
 800fe8c:	9b06      	ldr	r3, [sp, #24]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	dd02      	ble.n	800fe98 <_dtoa_r+0x938>
 800fe92:	9b02      	ldr	r3, [sp, #8]
 800fe94:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fe98:	f88b a000 	strb.w	sl, [fp]
 800fe9c:	e639      	b.n	800fb12 <_dtoa_r+0x5b2>
 800fe9e:	4628      	mov	r0, r5
 800fea0:	e7bd      	b.n	800fe1e <_dtoa_r+0x8be>
 800fea2:	2201      	movs	r2, #1
 800fea4:	e7e2      	b.n	800fe6c <_dtoa_r+0x90c>
 800fea6:	9b06      	ldr	r3, [sp, #24]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	db04      	blt.n	800feb6 <_dtoa_r+0x956>
 800feac:	9907      	ldr	r1, [sp, #28]
 800feae:	430b      	orrs	r3, r1
 800feb0:	9908      	ldr	r1, [sp, #32]
 800feb2:	430b      	orrs	r3, r1
 800feb4:	d120      	bne.n	800fef8 <_dtoa_r+0x998>
 800feb6:	2a00      	cmp	r2, #0
 800feb8:	ddee      	ble.n	800fe98 <_dtoa_r+0x938>
 800feba:	9901      	ldr	r1, [sp, #4]
 800febc:	2201      	movs	r2, #1
 800febe:	4648      	mov	r0, r9
 800fec0:	f001 fd2a 	bl	8011918 <__lshift>
 800fec4:	4621      	mov	r1, r4
 800fec6:	9001      	str	r0, [sp, #4]
 800fec8:	f001 fd92 	bl	80119f0 <__mcmp>
 800fecc:	2800      	cmp	r0, #0
 800fece:	dc03      	bgt.n	800fed8 <_dtoa_r+0x978>
 800fed0:	d1e2      	bne.n	800fe98 <_dtoa_r+0x938>
 800fed2:	f01a 0f01 	tst.w	sl, #1
 800fed6:	d0df      	beq.n	800fe98 <_dtoa_r+0x938>
 800fed8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fedc:	d1d9      	bne.n	800fe92 <_dtoa_r+0x932>
 800fede:	2339      	movs	r3, #57	@ 0x39
 800fee0:	f88b 3000 	strb.w	r3, [fp]
 800fee4:	4633      	mov	r3, r6
 800fee6:	461e      	mov	r6, r3
 800fee8:	3b01      	subs	r3, #1
 800feea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800feee:	2a39      	cmp	r2, #57	@ 0x39
 800fef0:	d053      	beq.n	800ff9a <_dtoa_r+0xa3a>
 800fef2:	3201      	adds	r2, #1
 800fef4:	701a      	strb	r2, [r3, #0]
 800fef6:	e60c      	b.n	800fb12 <_dtoa_r+0x5b2>
 800fef8:	2a00      	cmp	r2, #0
 800fefa:	dd07      	ble.n	800ff0c <_dtoa_r+0x9ac>
 800fefc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ff00:	d0ed      	beq.n	800fede <_dtoa_r+0x97e>
 800ff02:	f10a 0301 	add.w	r3, sl, #1
 800ff06:	f88b 3000 	strb.w	r3, [fp]
 800ff0a:	e602      	b.n	800fb12 <_dtoa_r+0x5b2>
 800ff0c:	9b05      	ldr	r3, [sp, #20]
 800ff0e:	9a05      	ldr	r2, [sp, #20]
 800ff10:	f803 ac01 	strb.w	sl, [r3, #-1]
 800ff14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d029      	beq.n	800ff6e <_dtoa_r+0xa0e>
 800ff1a:	9901      	ldr	r1, [sp, #4]
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	220a      	movs	r2, #10
 800ff20:	4648      	mov	r0, r9
 800ff22:	f001 fb03 	bl	801152c <__multadd>
 800ff26:	45a8      	cmp	r8, r5
 800ff28:	9001      	str	r0, [sp, #4]
 800ff2a:	f04f 0300 	mov.w	r3, #0
 800ff2e:	f04f 020a 	mov.w	r2, #10
 800ff32:	4641      	mov	r1, r8
 800ff34:	4648      	mov	r0, r9
 800ff36:	d107      	bne.n	800ff48 <_dtoa_r+0x9e8>
 800ff38:	f001 faf8 	bl	801152c <__multadd>
 800ff3c:	4680      	mov	r8, r0
 800ff3e:	4605      	mov	r5, r0
 800ff40:	9b05      	ldr	r3, [sp, #20]
 800ff42:	3301      	adds	r3, #1
 800ff44:	9305      	str	r3, [sp, #20]
 800ff46:	e775      	b.n	800fe34 <_dtoa_r+0x8d4>
 800ff48:	f001 faf0 	bl	801152c <__multadd>
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	4680      	mov	r8, r0
 800ff50:	2300      	movs	r3, #0
 800ff52:	220a      	movs	r2, #10
 800ff54:	4648      	mov	r0, r9
 800ff56:	f001 fae9 	bl	801152c <__multadd>
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	e7f0      	b.n	800ff40 <_dtoa_r+0x9e0>
 800ff5e:	f1bb 0f00 	cmp.w	fp, #0
 800ff62:	bfcc      	ite	gt
 800ff64:	465e      	movgt	r6, fp
 800ff66:	2601      	movle	r6, #1
 800ff68:	443e      	add	r6, r7
 800ff6a:	f04f 0800 	mov.w	r8, #0
 800ff6e:	9901      	ldr	r1, [sp, #4]
 800ff70:	2201      	movs	r2, #1
 800ff72:	4648      	mov	r0, r9
 800ff74:	f001 fcd0 	bl	8011918 <__lshift>
 800ff78:	4621      	mov	r1, r4
 800ff7a:	9001      	str	r0, [sp, #4]
 800ff7c:	f001 fd38 	bl	80119f0 <__mcmp>
 800ff80:	2800      	cmp	r0, #0
 800ff82:	dcaf      	bgt.n	800fee4 <_dtoa_r+0x984>
 800ff84:	d102      	bne.n	800ff8c <_dtoa_r+0xa2c>
 800ff86:	f01a 0f01 	tst.w	sl, #1
 800ff8a:	d1ab      	bne.n	800fee4 <_dtoa_r+0x984>
 800ff8c:	4633      	mov	r3, r6
 800ff8e:	461e      	mov	r6, r3
 800ff90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff94:	2a30      	cmp	r2, #48	@ 0x30
 800ff96:	d0fa      	beq.n	800ff8e <_dtoa_r+0xa2e>
 800ff98:	e5bb      	b.n	800fb12 <_dtoa_r+0x5b2>
 800ff9a:	429f      	cmp	r7, r3
 800ff9c:	d1a3      	bne.n	800fee6 <_dtoa_r+0x986>
 800ff9e:	9b04      	ldr	r3, [sp, #16]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	9304      	str	r3, [sp, #16]
 800ffa4:	2331      	movs	r3, #49	@ 0x31
 800ffa6:	703b      	strb	r3, [r7, #0]
 800ffa8:	e5b3      	b.n	800fb12 <_dtoa_r+0x5b2>
 800ffaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffac:	4f16      	ldr	r7, [pc, #88]	@ (8010008 <_dtoa_r+0xaa8>)
 800ffae:	b11b      	cbz	r3, 800ffb8 <_dtoa_r+0xa58>
 800ffb0:	f107 0308 	add.w	r3, r7, #8
 800ffb4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ffb6:	6013      	str	r3, [r2, #0]
 800ffb8:	4638      	mov	r0, r7
 800ffba:	b011      	add	sp, #68	@ 0x44
 800ffbc:	ecbd 8b02 	vpop	{d8}
 800ffc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc4:	9b07      	ldr	r3, [sp, #28]
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	f77f ae36 	ble.w	800fc38 <_dtoa_r+0x6d8>
 800ffcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ffd0:	2001      	movs	r0, #1
 800ffd2:	e656      	b.n	800fc82 <_dtoa_r+0x722>
 800ffd4:	f1bb 0f00 	cmp.w	fp, #0
 800ffd8:	f77f aed7 	ble.w	800fd8a <_dtoa_r+0x82a>
 800ffdc:	463e      	mov	r6, r7
 800ffde:	9801      	ldr	r0, [sp, #4]
 800ffe0:	4621      	mov	r1, r4
 800ffe2:	f7ff fa33 	bl	800f44c <quorem>
 800ffe6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ffea:	f806 ab01 	strb.w	sl, [r6], #1
 800ffee:	1bf2      	subs	r2, r6, r7
 800fff0:	4593      	cmp	fp, r2
 800fff2:	ddb4      	ble.n	800ff5e <_dtoa_r+0x9fe>
 800fff4:	9901      	ldr	r1, [sp, #4]
 800fff6:	2300      	movs	r3, #0
 800fff8:	220a      	movs	r2, #10
 800fffa:	4648      	mov	r0, r9
 800fffc:	f001 fa96 	bl	801152c <__multadd>
 8010000:	9001      	str	r0, [sp, #4]
 8010002:	e7ec      	b.n	800ffde <_dtoa_r+0xa7e>
 8010004:	08012ca5 	.word	0x08012ca5
 8010008:	08012c29 	.word	0x08012c29

0801000c <_free_r>:
 801000c:	b538      	push	{r3, r4, r5, lr}
 801000e:	4605      	mov	r5, r0
 8010010:	2900      	cmp	r1, #0
 8010012:	d041      	beq.n	8010098 <_free_r+0x8c>
 8010014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010018:	1f0c      	subs	r4, r1, #4
 801001a:	2b00      	cmp	r3, #0
 801001c:	bfb8      	it	lt
 801001e:	18e4      	addlt	r4, r4, r3
 8010020:	f7fe f940 	bl	800e2a4 <__malloc_lock>
 8010024:	4a1d      	ldr	r2, [pc, #116]	@ (801009c <_free_r+0x90>)
 8010026:	6813      	ldr	r3, [r2, #0]
 8010028:	b933      	cbnz	r3, 8010038 <_free_r+0x2c>
 801002a:	6063      	str	r3, [r4, #4]
 801002c:	6014      	str	r4, [r2, #0]
 801002e:	4628      	mov	r0, r5
 8010030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010034:	f7fe b93c 	b.w	800e2b0 <__malloc_unlock>
 8010038:	42a3      	cmp	r3, r4
 801003a:	d908      	bls.n	801004e <_free_r+0x42>
 801003c:	6820      	ldr	r0, [r4, #0]
 801003e:	1821      	adds	r1, r4, r0
 8010040:	428b      	cmp	r3, r1
 8010042:	bf01      	itttt	eq
 8010044:	6819      	ldreq	r1, [r3, #0]
 8010046:	685b      	ldreq	r3, [r3, #4]
 8010048:	1809      	addeq	r1, r1, r0
 801004a:	6021      	streq	r1, [r4, #0]
 801004c:	e7ed      	b.n	801002a <_free_r+0x1e>
 801004e:	461a      	mov	r2, r3
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	b10b      	cbz	r3, 8010058 <_free_r+0x4c>
 8010054:	42a3      	cmp	r3, r4
 8010056:	d9fa      	bls.n	801004e <_free_r+0x42>
 8010058:	6811      	ldr	r1, [r2, #0]
 801005a:	1850      	adds	r0, r2, r1
 801005c:	42a0      	cmp	r0, r4
 801005e:	d10b      	bne.n	8010078 <_free_r+0x6c>
 8010060:	6820      	ldr	r0, [r4, #0]
 8010062:	4401      	add	r1, r0
 8010064:	1850      	adds	r0, r2, r1
 8010066:	4283      	cmp	r3, r0
 8010068:	6011      	str	r1, [r2, #0]
 801006a:	d1e0      	bne.n	801002e <_free_r+0x22>
 801006c:	6818      	ldr	r0, [r3, #0]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	6053      	str	r3, [r2, #4]
 8010072:	4408      	add	r0, r1
 8010074:	6010      	str	r0, [r2, #0]
 8010076:	e7da      	b.n	801002e <_free_r+0x22>
 8010078:	d902      	bls.n	8010080 <_free_r+0x74>
 801007a:	230c      	movs	r3, #12
 801007c:	602b      	str	r3, [r5, #0]
 801007e:	e7d6      	b.n	801002e <_free_r+0x22>
 8010080:	6820      	ldr	r0, [r4, #0]
 8010082:	1821      	adds	r1, r4, r0
 8010084:	428b      	cmp	r3, r1
 8010086:	bf04      	itt	eq
 8010088:	6819      	ldreq	r1, [r3, #0]
 801008a:	685b      	ldreq	r3, [r3, #4]
 801008c:	6063      	str	r3, [r4, #4]
 801008e:	bf04      	itt	eq
 8010090:	1809      	addeq	r1, r1, r0
 8010092:	6021      	streq	r1, [r4, #0]
 8010094:	6054      	str	r4, [r2, #4]
 8010096:	e7ca      	b.n	801002e <_free_r+0x22>
 8010098:	bd38      	pop	{r3, r4, r5, pc}
 801009a:	bf00      	nop
 801009c:	24000cbc 	.word	0x24000cbc

080100a0 <rshift>:
 80100a0:	6903      	ldr	r3, [r0, #16]
 80100a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80100a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80100ae:	f100 0414 	add.w	r4, r0, #20
 80100b2:	dd45      	ble.n	8010140 <rshift+0xa0>
 80100b4:	f011 011f 	ands.w	r1, r1, #31
 80100b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80100bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80100c0:	d10c      	bne.n	80100dc <rshift+0x3c>
 80100c2:	f100 0710 	add.w	r7, r0, #16
 80100c6:	4629      	mov	r1, r5
 80100c8:	42b1      	cmp	r1, r6
 80100ca:	d334      	bcc.n	8010136 <rshift+0x96>
 80100cc:	1a9b      	subs	r3, r3, r2
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	1eea      	subs	r2, r5, #3
 80100d2:	4296      	cmp	r6, r2
 80100d4:	bf38      	it	cc
 80100d6:	2300      	movcc	r3, #0
 80100d8:	4423      	add	r3, r4
 80100da:	e015      	b.n	8010108 <rshift+0x68>
 80100dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80100e0:	f1c1 0820 	rsb	r8, r1, #32
 80100e4:	40cf      	lsrs	r7, r1
 80100e6:	f105 0e04 	add.w	lr, r5, #4
 80100ea:	46a1      	mov	r9, r4
 80100ec:	4576      	cmp	r6, lr
 80100ee:	46f4      	mov	ip, lr
 80100f0:	d815      	bhi.n	801011e <rshift+0x7e>
 80100f2:	1a9a      	subs	r2, r3, r2
 80100f4:	0092      	lsls	r2, r2, #2
 80100f6:	3a04      	subs	r2, #4
 80100f8:	3501      	adds	r5, #1
 80100fa:	42ae      	cmp	r6, r5
 80100fc:	bf38      	it	cc
 80100fe:	2200      	movcc	r2, #0
 8010100:	18a3      	adds	r3, r4, r2
 8010102:	50a7      	str	r7, [r4, r2]
 8010104:	b107      	cbz	r7, 8010108 <rshift+0x68>
 8010106:	3304      	adds	r3, #4
 8010108:	1b1a      	subs	r2, r3, r4
 801010a:	42a3      	cmp	r3, r4
 801010c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010110:	bf08      	it	eq
 8010112:	2300      	moveq	r3, #0
 8010114:	6102      	str	r2, [r0, #16]
 8010116:	bf08      	it	eq
 8010118:	6143      	streq	r3, [r0, #20]
 801011a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801011e:	f8dc c000 	ldr.w	ip, [ip]
 8010122:	fa0c fc08 	lsl.w	ip, ip, r8
 8010126:	ea4c 0707 	orr.w	r7, ip, r7
 801012a:	f849 7b04 	str.w	r7, [r9], #4
 801012e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010132:	40cf      	lsrs	r7, r1
 8010134:	e7da      	b.n	80100ec <rshift+0x4c>
 8010136:	f851 cb04 	ldr.w	ip, [r1], #4
 801013a:	f847 cf04 	str.w	ip, [r7, #4]!
 801013e:	e7c3      	b.n	80100c8 <rshift+0x28>
 8010140:	4623      	mov	r3, r4
 8010142:	e7e1      	b.n	8010108 <rshift+0x68>

08010144 <__hexdig_fun>:
 8010144:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010148:	2b09      	cmp	r3, #9
 801014a:	d802      	bhi.n	8010152 <__hexdig_fun+0xe>
 801014c:	3820      	subs	r0, #32
 801014e:	b2c0      	uxtb	r0, r0
 8010150:	4770      	bx	lr
 8010152:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010156:	2b05      	cmp	r3, #5
 8010158:	d801      	bhi.n	801015e <__hexdig_fun+0x1a>
 801015a:	3847      	subs	r0, #71	@ 0x47
 801015c:	e7f7      	b.n	801014e <__hexdig_fun+0xa>
 801015e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010162:	2b05      	cmp	r3, #5
 8010164:	d801      	bhi.n	801016a <__hexdig_fun+0x26>
 8010166:	3827      	subs	r0, #39	@ 0x27
 8010168:	e7f1      	b.n	801014e <__hexdig_fun+0xa>
 801016a:	2000      	movs	r0, #0
 801016c:	4770      	bx	lr
	...

08010170 <__gethex>:
 8010170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010174:	b085      	sub	sp, #20
 8010176:	468a      	mov	sl, r1
 8010178:	9302      	str	r3, [sp, #8]
 801017a:	680b      	ldr	r3, [r1, #0]
 801017c:	9001      	str	r0, [sp, #4]
 801017e:	4690      	mov	r8, r2
 8010180:	1c9c      	adds	r4, r3, #2
 8010182:	46a1      	mov	r9, r4
 8010184:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010188:	2830      	cmp	r0, #48	@ 0x30
 801018a:	d0fa      	beq.n	8010182 <__gethex+0x12>
 801018c:	eba9 0303 	sub.w	r3, r9, r3
 8010190:	f1a3 0b02 	sub.w	fp, r3, #2
 8010194:	f7ff ffd6 	bl	8010144 <__hexdig_fun>
 8010198:	4605      	mov	r5, r0
 801019a:	2800      	cmp	r0, #0
 801019c:	d168      	bne.n	8010270 <__gethex+0x100>
 801019e:	49a0      	ldr	r1, [pc, #640]	@ (8010420 <__gethex+0x2b0>)
 80101a0:	2201      	movs	r2, #1
 80101a2:	4648      	mov	r0, r9
 80101a4:	f7ff f87e 	bl	800f2a4 <strncmp>
 80101a8:	4607      	mov	r7, r0
 80101aa:	2800      	cmp	r0, #0
 80101ac:	d167      	bne.n	801027e <__gethex+0x10e>
 80101ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 80101b2:	4626      	mov	r6, r4
 80101b4:	f7ff ffc6 	bl	8010144 <__hexdig_fun>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d062      	beq.n	8010282 <__gethex+0x112>
 80101bc:	4623      	mov	r3, r4
 80101be:	7818      	ldrb	r0, [r3, #0]
 80101c0:	2830      	cmp	r0, #48	@ 0x30
 80101c2:	4699      	mov	r9, r3
 80101c4:	f103 0301 	add.w	r3, r3, #1
 80101c8:	d0f9      	beq.n	80101be <__gethex+0x4e>
 80101ca:	f7ff ffbb 	bl	8010144 <__hexdig_fun>
 80101ce:	fab0 f580 	clz	r5, r0
 80101d2:	096d      	lsrs	r5, r5, #5
 80101d4:	f04f 0b01 	mov.w	fp, #1
 80101d8:	464a      	mov	r2, r9
 80101da:	4616      	mov	r6, r2
 80101dc:	3201      	adds	r2, #1
 80101de:	7830      	ldrb	r0, [r6, #0]
 80101e0:	f7ff ffb0 	bl	8010144 <__hexdig_fun>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	d1f8      	bne.n	80101da <__gethex+0x6a>
 80101e8:	498d      	ldr	r1, [pc, #564]	@ (8010420 <__gethex+0x2b0>)
 80101ea:	2201      	movs	r2, #1
 80101ec:	4630      	mov	r0, r6
 80101ee:	f7ff f859 	bl	800f2a4 <strncmp>
 80101f2:	2800      	cmp	r0, #0
 80101f4:	d13f      	bne.n	8010276 <__gethex+0x106>
 80101f6:	b944      	cbnz	r4, 801020a <__gethex+0x9a>
 80101f8:	1c74      	adds	r4, r6, #1
 80101fa:	4622      	mov	r2, r4
 80101fc:	4616      	mov	r6, r2
 80101fe:	3201      	adds	r2, #1
 8010200:	7830      	ldrb	r0, [r6, #0]
 8010202:	f7ff ff9f 	bl	8010144 <__hexdig_fun>
 8010206:	2800      	cmp	r0, #0
 8010208:	d1f8      	bne.n	80101fc <__gethex+0x8c>
 801020a:	1ba4      	subs	r4, r4, r6
 801020c:	00a7      	lsls	r7, r4, #2
 801020e:	7833      	ldrb	r3, [r6, #0]
 8010210:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010214:	2b50      	cmp	r3, #80	@ 0x50
 8010216:	d13e      	bne.n	8010296 <__gethex+0x126>
 8010218:	7873      	ldrb	r3, [r6, #1]
 801021a:	2b2b      	cmp	r3, #43	@ 0x2b
 801021c:	d033      	beq.n	8010286 <__gethex+0x116>
 801021e:	2b2d      	cmp	r3, #45	@ 0x2d
 8010220:	d034      	beq.n	801028c <__gethex+0x11c>
 8010222:	1c71      	adds	r1, r6, #1
 8010224:	2400      	movs	r4, #0
 8010226:	7808      	ldrb	r0, [r1, #0]
 8010228:	f7ff ff8c 	bl	8010144 <__hexdig_fun>
 801022c:	1e43      	subs	r3, r0, #1
 801022e:	b2db      	uxtb	r3, r3
 8010230:	2b18      	cmp	r3, #24
 8010232:	d830      	bhi.n	8010296 <__gethex+0x126>
 8010234:	f1a0 0210 	sub.w	r2, r0, #16
 8010238:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801023c:	f7ff ff82 	bl	8010144 <__hexdig_fun>
 8010240:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010244:	fa5f fc8c 	uxtb.w	ip, ip
 8010248:	f1bc 0f18 	cmp.w	ip, #24
 801024c:	f04f 030a 	mov.w	r3, #10
 8010250:	d91e      	bls.n	8010290 <__gethex+0x120>
 8010252:	b104      	cbz	r4, 8010256 <__gethex+0xe6>
 8010254:	4252      	negs	r2, r2
 8010256:	4417      	add	r7, r2
 8010258:	f8ca 1000 	str.w	r1, [sl]
 801025c:	b1ed      	cbz	r5, 801029a <__gethex+0x12a>
 801025e:	f1bb 0f00 	cmp.w	fp, #0
 8010262:	bf0c      	ite	eq
 8010264:	2506      	moveq	r5, #6
 8010266:	2500      	movne	r5, #0
 8010268:	4628      	mov	r0, r5
 801026a:	b005      	add	sp, #20
 801026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010270:	2500      	movs	r5, #0
 8010272:	462c      	mov	r4, r5
 8010274:	e7b0      	b.n	80101d8 <__gethex+0x68>
 8010276:	2c00      	cmp	r4, #0
 8010278:	d1c7      	bne.n	801020a <__gethex+0x9a>
 801027a:	4627      	mov	r7, r4
 801027c:	e7c7      	b.n	801020e <__gethex+0x9e>
 801027e:	464e      	mov	r6, r9
 8010280:	462f      	mov	r7, r5
 8010282:	2501      	movs	r5, #1
 8010284:	e7c3      	b.n	801020e <__gethex+0x9e>
 8010286:	2400      	movs	r4, #0
 8010288:	1cb1      	adds	r1, r6, #2
 801028a:	e7cc      	b.n	8010226 <__gethex+0xb6>
 801028c:	2401      	movs	r4, #1
 801028e:	e7fb      	b.n	8010288 <__gethex+0x118>
 8010290:	fb03 0002 	mla	r0, r3, r2, r0
 8010294:	e7ce      	b.n	8010234 <__gethex+0xc4>
 8010296:	4631      	mov	r1, r6
 8010298:	e7de      	b.n	8010258 <__gethex+0xe8>
 801029a:	eba6 0309 	sub.w	r3, r6, r9
 801029e:	3b01      	subs	r3, #1
 80102a0:	4629      	mov	r1, r5
 80102a2:	2b07      	cmp	r3, #7
 80102a4:	dc0a      	bgt.n	80102bc <__gethex+0x14c>
 80102a6:	9801      	ldr	r0, [sp, #4]
 80102a8:	f001 f8de 	bl	8011468 <_Balloc>
 80102ac:	4604      	mov	r4, r0
 80102ae:	b940      	cbnz	r0, 80102c2 <__gethex+0x152>
 80102b0:	4b5c      	ldr	r3, [pc, #368]	@ (8010424 <__gethex+0x2b4>)
 80102b2:	4602      	mov	r2, r0
 80102b4:	21e4      	movs	r1, #228	@ 0xe4
 80102b6:	485c      	ldr	r0, [pc, #368]	@ (8010428 <__gethex+0x2b8>)
 80102b8:	f001 ff9e 	bl	80121f8 <__assert_func>
 80102bc:	3101      	adds	r1, #1
 80102be:	105b      	asrs	r3, r3, #1
 80102c0:	e7ef      	b.n	80102a2 <__gethex+0x132>
 80102c2:	f100 0a14 	add.w	sl, r0, #20
 80102c6:	2300      	movs	r3, #0
 80102c8:	4655      	mov	r5, sl
 80102ca:	469b      	mov	fp, r3
 80102cc:	45b1      	cmp	r9, r6
 80102ce:	d337      	bcc.n	8010340 <__gethex+0x1d0>
 80102d0:	f845 bb04 	str.w	fp, [r5], #4
 80102d4:	eba5 050a 	sub.w	r5, r5, sl
 80102d8:	10ad      	asrs	r5, r5, #2
 80102da:	6125      	str	r5, [r4, #16]
 80102dc:	4658      	mov	r0, fp
 80102de:	f001 f9b5 	bl	801164c <__hi0bits>
 80102e2:	016d      	lsls	r5, r5, #5
 80102e4:	f8d8 6000 	ldr.w	r6, [r8]
 80102e8:	1a2d      	subs	r5, r5, r0
 80102ea:	42b5      	cmp	r5, r6
 80102ec:	dd54      	ble.n	8010398 <__gethex+0x228>
 80102ee:	1bad      	subs	r5, r5, r6
 80102f0:	4629      	mov	r1, r5
 80102f2:	4620      	mov	r0, r4
 80102f4:	f001 fd46 	bl	8011d84 <__any_on>
 80102f8:	4681      	mov	r9, r0
 80102fa:	b178      	cbz	r0, 801031c <__gethex+0x1ac>
 80102fc:	1e6b      	subs	r3, r5, #1
 80102fe:	1159      	asrs	r1, r3, #5
 8010300:	f003 021f 	and.w	r2, r3, #31
 8010304:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010308:	f04f 0901 	mov.w	r9, #1
 801030c:	fa09 f202 	lsl.w	r2, r9, r2
 8010310:	420a      	tst	r2, r1
 8010312:	d003      	beq.n	801031c <__gethex+0x1ac>
 8010314:	454b      	cmp	r3, r9
 8010316:	dc36      	bgt.n	8010386 <__gethex+0x216>
 8010318:	f04f 0902 	mov.w	r9, #2
 801031c:	4629      	mov	r1, r5
 801031e:	4620      	mov	r0, r4
 8010320:	f7ff febe 	bl	80100a0 <rshift>
 8010324:	442f      	add	r7, r5
 8010326:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801032a:	42bb      	cmp	r3, r7
 801032c:	da42      	bge.n	80103b4 <__gethex+0x244>
 801032e:	9801      	ldr	r0, [sp, #4]
 8010330:	4621      	mov	r1, r4
 8010332:	f001 f8d9 	bl	80114e8 <_Bfree>
 8010336:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010338:	2300      	movs	r3, #0
 801033a:	6013      	str	r3, [r2, #0]
 801033c:	25a3      	movs	r5, #163	@ 0xa3
 801033e:	e793      	b.n	8010268 <__gethex+0xf8>
 8010340:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010344:	2a2e      	cmp	r2, #46	@ 0x2e
 8010346:	d012      	beq.n	801036e <__gethex+0x1fe>
 8010348:	2b20      	cmp	r3, #32
 801034a:	d104      	bne.n	8010356 <__gethex+0x1e6>
 801034c:	f845 bb04 	str.w	fp, [r5], #4
 8010350:	f04f 0b00 	mov.w	fp, #0
 8010354:	465b      	mov	r3, fp
 8010356:	7830      	ldrb	r0, [r6, #0]
 8010358:	9303      	str	r3, [sp, #12]
 801035a:	f7ff fef3 	bl	8010144 <__hexdig_fun>
 801035e:	9b03      	ldr	r3, [sp, #12]
 8010360:	f000 000f 	and.w	r0, r0, #15
 8010364:	4098      	lsls	r0, r3
 8010366:	ea4b 0b00 	orr.w	fp, fp, r0
 801036a:	3304      	adds	r3, #4
 801036c:	e7ae      	b.n	80102cc <__gethex+0x15c>
 801036e:	45b1      	cmp	r9, r6
 8010370:	d8ea      	bhi.n	8010348 <__gethex+0x1d8>
 8010372:	492b      	ldr	r1, [pc, #172]	@ (8010420 <__gethex+0x2b0>)
 8010374:	9303      	str	r3, [sp, #12]
 8010376:	2201      	movs	r2, #1
 8010378:	4630      	mov	r0, r6
 801037a:	f7fe ff93 	bl	800f2a4 <strncmp>
 801037e:	9b03      	ldr	r3, [sp, #12]
 8010380:	2800      	cmp	r0, #0
 8010382:	d1e1      	bne.n	8010348 <__gethex+0x1d8>
 8010384:	e7a2      	b.n	80102cc <__gethex+0x15c>
 8010386:	1ea9      	subs	r1, r5, #2
 8010388:	4620      	mov	r0, r4
 801038a:	f001 fcfb 	bl	8011d84 <__any_on>
 801038e:	2800      	cmp	r0, #0
 8010390:	d0c2      	beq.n	8010318 <__gethex+0x1a8>
 8010392:	f04f 0903 	mov.w	r9, #3
 8010396:	e7c1      	b.n	801031c <__gethex+0x1ac>
 8010398:	da09      	bge.n	80103ae <__gethex+0x23e>
 801039a:	1b75      	subs	r5, r6, r5
 801039c:	4621      	mov	r1, r4
 801039e:	9801      	ldr	r0, [sp, #4]
 80103a0:	462a      	mov	r2, r5
 80103a2:	f001 fab9 	bl	8011918 <__lshift>
 80103a6:	1b7f      	subs	r7, r7, r5
 80103a8:	4604      	mov	r4, r0
 80103aa:	f100 0a14 	add.w	sl, r0, #20
 80103ae:	f04f 0900 	mov.w	r9, #0
 80103b2:	e7b8      	b.n	8010326 <__gethex+0x1b6>
 80103b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80103b8:	42bd      	cmp	r5, r7
 80103ba:	dd6f      	ble.n	801049c <__gethex+0x32c>
 80103bc:	1bed      	subs	r5, r5, r7
 80103be:	42ae      	cmp	r6, r5
 80103c0:	dc34      	bgt.n	801042c <__gethex+0x2bc>
 80103c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80103c6:	2b02      	cmp	r3, #2
 80103c8:	d022      	beq.n	8010410 <__gethex+0x2a0>
 80103ca:	2b03      	cmp	r3, #3
 80103cc:	d024      	beq.n	8010418 <__gethex+0x2a8>
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d115      	bne.n	80103fe <__gethex+0x28e>
 80103d2:	42ae      	cmp	r6, r5
 80103d4:	d113      	bne.n	80103fe <__gethex+0x28e>
 80103d6:	2e01      	cmp	r6, #1
 80103d8:	d10b      	bne.n	80103f2 <__gethex+0x282>
 80103da:	9a02      	ldr	r2, [sp, #8]
 80103dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80103e0:	6013      	str	r3, [r2, #0]
 80103e2:	2301      	movs	r3, #1
 80103e4:	6123      	str	r3, [r4, #16]
 80103e6:	f8ca 3000 	str.w	r3, [sl]
 80103ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103ec:	2562      	movs	r5, #98	@ 0x62
 80103ee:	601c      	str	r4, [r3, #0]
 80103f0:	e73a      	b.n	8010268 <__gethex+0xf8>
 80103f2:	1e71      	subs	r1, r6, #1
 80103f4:	4620      	mov	r0, r4
 80103f6:	f001 fcc5 	bl	8011d84 <__any_on>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	d1ed      	bne.n	80103da <__gethex+0x26a>
 80103fe:	9801      	ldr	r0, [sp, #4]
 8010400:	4621      	mov	r1, r4
 8010402:	f001 f871 	bl	80114e8 <_Bfree>
 8010406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010408:	2300      	movs	r3, #0
 801040a:	6013      	str	r3, [r2, #0]
 801040c:	2550      	movs	r5, #80	@ 0x50
 801040e:	e72b      	b.n	8010268 <__gethex+0xf8>
 8010410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010412:	2b00      	cmp	r3, #0
 8010414:	d1f3      	bne.n	80103fe <__gethex+0x28e>
 8010416:	e7e0      	b.n	80103da <__gethex+0x26a>
 8010418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1dd      	bne.n	80103da <__gethex+0x26a>
 801041e:	e7ee      	b.n	80103fe <__gethex+0x28e>
 8010420:	08012acb 	.word	0x08012acb
 8010424:	08012ca5 	.word	0x08012ca5
 8010428:	08012cb6 	.word	0x08012cb6
 801042c:	1e6f      	subs	r7, r5, #1
 801042e:	f1b9 0f00 	cmp.w	r9, #0
 8010432:	d130      	bne.n	8010496 <__gethex+0x326>
 8010434:	b127      	cbz	r7, 8010440 <__gethex+0x2d0>
 8010436:	4639      	mov	r1, r7
 8010438:	4620      	mov	r0, r4
 801043a:	f001 fca3 	bl	8011d84 <__any_on>
 801043e:	4681      	mov	r9, r0
 8010440:	117a      	asrs	r2, r7, #5
 8010442:	2301      	movs	r3, #1
 8010444:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010448:	f007 071f 	and.w	r7, r7, #31
 801044c:	40bb      	lsls	r3, r7
 801044e:	4213      	tst	r3, r2
 8010450:	4629      	mov	r1, r5
 8010452:	4620      	mov	r0, r4
 8010454:	bf18      	it	ne
 8010456:	f049 0902 	orrne.w	r9, r9, #2
 801045a:	f7ff fe21 	bl	80100a0 <rshift>
 801045e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010462:	1b76      	subs	r6, r6, r5
 8010464:	2502      	movs	r5, #2
 8010466:	f1b9 0f00 	cmp.w	r9, #0
 801046a:	d047      	beq.n	80104fc <__gethex+0x38c>
 801046c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010470:	2b02      	cmp	r3, #2
 8010472:	d015      	beq.n	80104a0 <__gethex+0x330>
 8010474:	2b03      	cmp	r3, #3
 8010476:	d017      	beq.n	80104a8 <__gethex+0x338>
 8010478:	2b01      	cmp	r3, #1
 801047a:	d109      	bne.n	8010490 <__gethex+0x320>
 801047c:	f019 0f02 	tst.w	r9, #2
 8010480:	d006      	beq.n	8010490 <__gethex+0x320>
 8010482:	f8da 3000 	ldr.w	r3, [sl]
 8010486:	ea49 0903 	orr.w	r9, r9, r3
 801048a:	f019 0f01 	tst.w	r9, #1
 801048e:	d10e      	bne.n	80104ae <__gethex+0x33e>
 8010490:	f045 0510 	orr.w	r5, r5, #16
 8010494:	e032      	b.n	80104fc <__gethex+0x38c>
 8010496:	f04f 0901 	mov.w	r9, #1
 801049a:	e7d1      	b.n	8010440 <__gethex+0x2d0>
 801049c:	2501      	movs	r5, #1
 801049e:	e7e2      	b.n	8010466 <__gethex+0x2f6>
 80104a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104a2:	f1c3 0301 	rsb	r3, r3, #1
 80104a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d0f0      	beq.n	8010490 <__gethex+0x320>
 80104ae:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80104b2:	f104 0314 	add.w	r3, r4, #20
 80104b6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80104ba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80104be:	f04f 0c00 	mov.w	ip, #0
 80104c2:	4618      	mov	r0, r3
 80104c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80104c8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80104cc:	d01b      	beq.n	8010506 <__gethex+0x396>
 80104ce:	3201      	adds	r2, #1
 80104d0:	6002      	str	r2, [r0, #0]
 80104d2:	2d02      	cmp	r5, #2
 80104d4:	f104 0314 	add.w	r3, r4, #20
 80104d8:	d13c      	bne.n	8010554 <__gethex+0x3e4>
 80104da:	f8d8 2000 	ldr.w	r2, [r8]
 80104de:	3a01      	subs	r2, #1
 80104e0:	42b2      	cmp	r2, r6
 80104e2:	d109      	bne.n	80104f8 <__gethex+0x388>
 80104e4:	1171      	asrs	r1, r6, #5
 80104e6:	2201      	movs	r2, #1
 80104e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80104ec:	f006 061f 	and.w	r6, r6, #31
 80104f0:	fa02 f606 	lsl.w	r6, r2, r6
 80104f4:	421e      	tst	r6, r3
 80104f6:	d13a      	bne.n	801056e <__gethex+0x3fe>
 80104f8:	f045 0520 	orr.w	r5, r5, #32
 80104fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104fe:	601c      	str	r4, [r3, #0]
 8010500:	9b02      	ldr	r3, [sp, #8]
 8010502:	601f      	str	r7, [r3, #0]
 8010504:	e6b0      	b.n	8010268 <__gethex+0xf8>
 8010506:	4299      	cmp	r1, r3
 8010508:	f843 cc04 	str.w	ip, [r3, #-4]
 801050c:	d8d9      	bhi.n	80104c2 <__gethex+0x352>
 801050e:	68a3      	ldr	r3, [r4, #8]
 8010510:	459b      	cmp	fp, r3
 8010512:	db17      	blt.n	8010544 <__gethex+0x3d4>
 8010514:	6861      	ldr	r1, [r4, #4]
 8010516:	9801      	ldr	r0, [sp, #4]
 8010518:	3101      	adds	r1, #1
 801051a:	f000 ffa5 	bl	8011468 <_Balloc>
 801051e:	4681      	mov	r9, r0
 8010520:	b918      	cbnz	r0, 801052a <__gethex+0x3ba>
 8010522:	4b1a      	ldr	r3, [pc, #104]	@ (801058c <__gethex+0x41c>)
 8010524:	4602      	mov	r2, r0
 8010526:	2184      	movs	r1, #132	@ 0x84
 8010528:	e6c5      	b.n	80102b6 <__gethex+0x146>
 801052a:	6922      	ldr	r2, [r4, #16]
 801052c:	3202      	adds	r2, #2
 801052e:	f104 010c 	add.w	r1, r4, #12
 8010532:	0092      	lsls	r2, r2, #2
 8010534:	300c      	adds	r0, #12
 8010536:	f7fe ff6c 	bl	800f412 <memcpy>
 801053a:	4621      	mov	r1, r4
 801053c:	9801      	ldr	r0, [sp, #4]
 801053e:	f000 ffd3 	bl	80114e8 <_Bfree>
 8010542:	464c      	mov	r4, r9
 8010544:	6923      	ldr	r3, [r4, #16]
 8010546:	1c5a      	adds	r2, r3, #1
 8010548:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801054c:	6122      	str	r2, [r4, #16]
 801054e:	2201      	movs	r2, #1
 8010550:	615a      	str	r2, [r3, #20]
 8010552:	e7be      	b.n	80104d2 <__gethex+0x362>
 8010554:	6922      	ldr	r2, [r4, #16]
 8010556:	455a      	cmp	r2, fp
 8010558:	dd0b      	ble.n	8010572 <__gethex+0x402>
 801055a:	2101      	movs	r1, #1
 801055c:	4620      	mov	r0, r4
 801055e:	f7ff fd9f 	bl	80100a0 <rshift>
 8010562:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010566:	3701      	adds	r7, #1
 8010568:	42bb      	cmp	r3, r7
 801056a:	f6ff aee0 	blt.w	801032e <__gethex+0x1be>
 801056e:	2501      	movs	r5, #1
 8010570:	e7c2      	b.n	80104f8 <__gethex+0x388>
 8010572:	f016 061f 	ands.w	r6, r6, #31
 8010576:	d0fa      	beq.n	801056e <__gethex+0x3fe>
 8010578:	4453      	add	r3, sl
 801057a:	f1c6 0620 	rsb	r6, r6, #32
 801057e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010582:	f001 f863 	bl	801164c <__hi0bits>
 8010586:	42b0      	cmp	r0, r6
 8010588:	dbe7      	blt.n	801055a <__gethex+0x3ea>
 801058a:	e7f0      	b.n	801056e <__gethex+0x3fe>
 801058c:	08012ca5 	.word	0x08012ca5

08010590 <L_shift>:
 8010590:	f1c2 0208 	rsb	r2, r2, #8
 8010594:	0092      	lsls	r2, r2, #2
 8010596:	b570      	push	{r4, r5, r6, lr}
 8010598:	f1c2 0620 	rsb	r6, r2, #32
 801059c:	6843      	ldr	r3, [r0, #4]
 801059e:	6804      	ldr	r4, [r0, #0]
 80105a0:	fa03 f506 	lsl.w	r5, r3, r6
 80105a4:	432c      	orrs	r4, r5
 80105a6:	40d3      	lsrs	r3, r2
 80105a8:	6004      	str	r4, [r0, #0]
 80105aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80105ae:	4288      	cmp	r0, r1
 80105b0:	d3f4      	bcc.n	801059c <L_shift+0xc>
 80105b2:	bd70      	pop	{r4, r5, r6, pc}

080105b4 <__match>:
 80105b4:	b530      	push	{r4, r5, lr}
 80105b6:	6803      	ldr	r3, [r0, #0]
 80105b8:	3301      	adds	r3, #1
 80105ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105be:	b914      	cbnz	r4, 80105c6 <__match+0x12>
 80105c0:	6003      	str	r3, [r0, #0]
 80105c2:	2001      	movs	r0, #1
 80105c4:	bd30      	pop	{r4, r5, pc}
 80105c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80105ce:	2d19      	cmp	r5, #25
 80105d0:	bf98      	it	ls
 80105d2:	3220      	addls	r2, #32
 80105d4:	42a2      	cmp	r2, r4
 80105d6:	d0f0      	beq.n	80105ba <__match+0x6>
 80105d8:	2000      	movs	r0, #0
 80105da:	e7f3      	b.n	80105c4 <__match+0x10>

080105dc <__hexnan>:
 80105dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e0:	680b      	ldr	r3, [r1, #0]
 80105e2:	6801      	ldr	r1, [r0, #0]
 80105e4:	115e      	asrs	r6, r3, #5
 80105e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80105ea:	f013 031f 	ands.w	r3, r3, #31
 80105ee:	b087      	sub	sp, #28
 80105f0:	bf18      	it	ne
 80105f2:	3604      	addne	r6, #4
 80105f4:	2500      	movs	r5, #0
 80105f6:	1f37      	subs	r7, r6, #4
 80105f8:	4682      	mov	sl, r0
 80105fa:	4690      	mov	r8, r2
 80105fc:	9301      	str	r3, [sp, #4]
 80105fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8010602:	46b9      	mov	r9, r7
 8010604:	463c      	mov	r4, r7
 8010606:	9502      	str	r5, [sp, #8]
 8010608:	46ab      	mov	fp, r5
 801060a:	784a      	ldrb	r2, [r1, #1]
 801060c:	1c4b      	adds	r3, r1, #1
 801060e:	9303      	str	r3, [sp, #12]
 8010610:	b342      	cbz	r2, 8010664 <__hexnan+0x88>
 8010612:	4610      	mov	r0, r2
 8010614:	9105      	str	r1, [sp, #20]
 8010616:	9204      	str	r2, [sp, #16]
 8010618:	f7ff fd94 	bl	8010144 <__hexdig_fun>
 801061c:	2800      	cmp	r0, #0
 801061e:	d151      	bne.n	80106c4 <__hexnan+0xe8>
 8010620:	9a04      	ldr	r2, [sp, #16]
 8010622:	9905      	ldr	r1, [sp, #20]
 8010624:	2a20      	cmp	r2, #32
 8010626:	d818      	bhi.n	801065a <__hexnan+0x7e>
 8010628:	9b02      	ldr	r3, [sp, #8]
 801062a:	459b      	cmp	fp, r3
 801062c:	dd13      	ble.n	8010656 <__hexnan+0x7a>
 801062e:	454c      	cmp	r4, r9
 8010630:	d206      	bcs.n	8010640 <__hexnan+0x64>
 8010632:	2d07      	cmp	r5, #7
 8010634:	dc04      	bgt.n	8010640 <__hexnan+0x64>
 8010636:	462a      	mov	r2, r5
 8010638:	4649      	mov	r1, r9
 801063a:	4620      	mov	r0, r4
 801063c:	f7ff ffa8 	bl	8010590 <L_shift>
 8010640:	4544      	cmp	r4, r8
 8010642:	d952      	bls.n	80106ea <__hexnan+0x10e>
 8010644:	2300      	movs	r3, #0
 8010646:	f1a4 0904 	sub.w	r9, r4, #4
 801064a:	f844 3c04 	str.w	r3, [r4, #-4]
 801064e:	f8cd b008 	str.w	fp, [sp, #8]
 8010652:	464c      	mov	r4, r9
 8010654:	461d      	mov	r5, r3
 8010656:	9903      	ldr	r1, [sp, #12]
 8010658:	e7d7      	b.n	801060a <__hexnan+0x2e>
 801065a:	2a29      	cmp	r2, #41	@ 0x29
 801065c:	d157      	bne.n	801070e <__hexnan+0x132>
 801065e:	3102      	adds	r1, #2
 8010660:	f8ca 1000 	str.w	r1, [sl]
 8010664:	f1bb 0f00 	cmp.w	fp, #0
 8010668:	d051      	beq.n	801070e <__hexnan+0x132>
 801066a:	454c      	cmp	r4, r9
 801066c:	d206      	bcs.n	801067c <__hexnan+0xa0>
 801066e:	2d07      	cmp	r5, #7
 8010670:	dc04      	bgt.n	801067c <__hexnan+0xa0>
 8010672:	462a      	mov	r2, r5
 8010674:	4649      	mov	r1, r9
 8010676:	4620      	mov	r0, r4
 8010678:	f7ff ff8a 	bl	8010590 <L_shift>
 801067c:	4544      	cmp	r4, r8
 801067e:	d936      	bls.n	80106ee <__hexnan+0x112>
 8010680:	f1a8 0204 	sub.w	r2, r8, #4
 8010684:	4623      	mov	r3, r4
 8010686:	f853 1b04 	ldr.w	r1, [r3], #4
 801068a:	f842 1f04 	str.w	r1, [r2, #4]!
 801068e:	429f      	cmp	r7, r3
 8010690:	d2f9      	bcs.n	8010686 <__hexnan+0xaa>
 8010692:	1b3b      	subs	r3, r7, r4
 8010694:	f023 0303 	bic.w	r3, r3, #3
 8010698:	3304      	adds	r3, #4
 801069a:	3401      	adds	r4, #1
 801069c:	3e03      	subs	r6, #3
 801069e:	42b4      	cmp	r4, r6
 80106a0:	bf88      	it	hi
 80106a2:	2304      	movhi	r3, #4
 80106a4:	4443      	add	r3, r8
 80106a6:	2200      	movs	r2, #0
 80106a8:	f843 2b04 	str.w	r2, [r3], #4
 80106ac:	429f      	cmp	r7, r3
 80106ae:	d2fb      	bcs.n	80106a8 <__hexnan+0xcc>
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	b91b      	cbnz	r3, 80106bc <__hexnan+0xe0>
 80106b4:	4547      	cmp	r7, r8
 80106b6:	d128      	bne.n	801070a <__hexnan+0x12e>
 80106b8:	2301      	movs	r3, #1
 80106ba:	603b      	str	r3, [r7, #0]
 80106bc:	2005      	movs	r0, #5
 80106be:	b007      	add	sp, #28
 80106c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c4:	3501      	adds	r5, #1
 80106c6:	2d08      	cmp	r5, #8
 80106c8:	f10b 0b01 	add.w	fp, fp, #1
 80106cc:	dd06      	ble.n	80106dc <__hexnan+0x100>
 80106ce:	4544      	cmp	r4, r8
 80106d0:	d9c1      	bls.n	8010656 <__hexnan+0x7a>
 80106d2:	2300      	movs	r3, #0
 80106d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80106d8:	2501      	movs	r5, #1
 80106da:	3c04      	subs	r4, #4
 80106dc:	6822      	ldr	r2, [r4, #0]
 80106de:	f000 000f 	and.w	r0, r0, #15
 80106e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80106e6:	6020      	str	r0, [r4, #0]
 80106e8:	e7b5      	b.n	8010656 <__hexnan+0x7a>
 80106ea:	2508      	movs	r5, #8
 80106ec:	e7b3      	b.n	8010656 <__hexnan+0x7a>
 80106ee:	9b01      	ldr	r3, [sp, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d0dd      	beq.n	80106b0 <__hexnan+0xd4>
 80106f4:	f1c3 0320 	rsb	r3, r3, #32
 80106f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80106fc:	40da      	lsrs	r2, r3
 80106fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010702:	4013      	ands	r3, r2
 8010704:	f846 3c04 	str.w	r3, [r6, #-4]
 8010708:	e7d2      	b.n	80106b0 <__hexnan+0xd4>
 801070a:	3f04      	subs	r7, #4
 801070c:	e7d0      	b.n	80106b0 <__hexnan+0xd4>
 801070e:	2004      	movs	r0, #4
 8010710:	e7d5      	b.n	80106be <__hexnan+0xe2>

08010712 <__ssputs_r>:
 8010712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010716:	688e      	ldr	r6, [r1, #8]
 8010718:	461f      	mov	r7, r3
 801071a:	42be      	cmp	r6, r7
 801071c:	680b      	ldr	r3, [r1, #0]
 801071e:	4682      	mov	sl, r0
 8010720:	460c      	mov	r4, r1
 8010722:	4690      	mov	r8, r2
 8010724:	d82d      	bhi.n	8010782 <__ssputs_r+0x70>
 8010726:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801072a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801072e:	d026      	beq.n	801077e <__ssputs_r+0x6c>
 8010730:	6965      	ldr	r5, [r4, #20]
 8010732:	6909      	ldr	r1, [r1, #16]
 8010734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010738:	eba3 0901 	sub.w	r9, r3, r1
 801073c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010740:	1c7b      	adds	r3, r7, #1
 8010742:	444b      	add	r3, r9
 8010744:	106d      	asrs	r5, r5, #1
 8010746:	429d      	cmp	r5, r3
 8010748:	bf38      	it	cc
 801074a:	461d      	movcc	r5, r3
 801074c:	0553      	lsls	r3, r2, #21
 801074e:	d527      	bpl.n	80107a0 <__ssputs_r+0x8e>
 8010750:	4629      	mov	r1, r5
 8010752:	f7fd f98d 	bl	800da70 <_malloc_r>
 8010756:	4606      	mov	r6, r0
 8010758:	b360      	cbz	r0, 80107b4 <__ssputs_r+0xa2>
 801075a:	6921      	ldr	r1, [r4, #16]
 801075c:	464a      	mov	r2, r9
 801075e:	f7fe fe58 	bl	800f412 <memcpy>
 8010762:	89a3      	ldrh	r3, [r4, #12]
 8010764:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801076c:	81a3      	strh	r3, [r4, #12]
 801076e:	6126      	str	r6, [r4, #16]
 8010770:	6165      	str	r5, [r4, #20]
 8010772:	444e      	add	r6, r9
 8010774:	eba5 0509 	sub.w	r5, r5, r9
 8010778:	6026      	str	r6, [r4, #0]
 801077a:	60a5      	str	r5, [r4, #8]
 801077c:	463e      	mov	r6, r7
 801077e:	42be      	cmp	r6, r7
 8010780:	d900      	bls.n	8010784 <__ssputs_r+0x72>
 8010782:	463e      	mov	r6, r7
 8010784:	6820      	ldr	r0, [r4, #0]
 8010786:	4632      	mov	r2, r6
 8010788:	4641      	mov	r1, r8
 801078a:	f001 fcf8 	bl	801217e <memmove>
 801078e:	68a3      	ldr	r3, [r4, #8]
 8010790:	1b9b      	subs	r3, r3, r6
 8010792:	60a3      	str	r3, [r4, #8]
 8010794:	6823      	ldr	r3, [r4, #0]
 8010796:	4433      	add	r3, r6
 8010798:	6023      	str	r3, [r4, #0]
 801079a:	2000      	movs	r0, #0
 801079c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a0:	462a      	mov	r2, r5
 80107a2:	f001 fb4a 	bl	8011e3a <_realloc_r>
 80107a6:	4606      	mov	r6, r0
 80107a8:	2800      	cmp	r0, #0
 80107aa:	d1e0      	bne.n	801076e <__ssputs_r+0x5c>
 80107ac:	6921      	ldr	r1, [r4, #16]
 80107ae:	4650      	mov	r0, sl
 80107b0:	f7ff fc2c 	bl	801000c <_free_r>
 80107b4:	230c      	movs	r3, #12
 80107b6:	f8ca 3000 	str.w	r3, [sl]
 80107ba:	89a3      	ldrh	r3, [r4, #12]
 80107bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107c0:	81a3      	strh	r3, [r4, #12]
 80107c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80107c6:	e7e9      	b.n	801079c <__ssputs_r+0x8a>

080107c8 <_svfiprintf_r>:
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	4698      	mov	r8, r3
 80107ce:	898b      	ldrh	r3, [r1, #12]
 80107d0:	061b      	lsls	r3, r3, #24
 80107d2:	b09d      	sub	sp, #116	@ 0x74
 80107d4:	4607      	mov	r7, r0
 80107d6:	460d      	mov	r5, r1
 80107d8:	4614      	mov	r4, r2
 80107da:	d510      	bpl.n	80107fe <_svfiprintf_r+0x36>
 80107dc:	690b      	ldr	r3, [r1, #16]
 80107de:	b973      	cbnz	r3, 80107fe <_svfiprintf_r+0x36>
 80107e0:	2140      	movs	r1, #64	@ 0x40
 80107e2:	f7fd f945 	bl	800da70 <_malloc_r>
 80107e6:	6028      	str	r0, [r5, #0]
 80107e8:	6128      	str	r0, [r5, #16]
 80107ea:	b930      	cbnz	r0, 80107fa <_svfiprintf_r+0x32>
 80107ec:	230c      	movs	r3, #12
 80107ee:	603b      	str	r3, [r7, #0]
 80107f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80107f4:	b01d      	add	sp, #116	@ 0x74
 80107f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107fa:	2340      	movs	r3, #64	@ 0x40
 80107fc:	616b      	str	r3, [r5, #20]
 80107fe:	2300      	movs	r3, #0
 8010800:	9309      	str	r3, [sp, #36]	@ 0x24
 8010802:	2320      	movs	r3, #32
 8010804:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010808:	f8cd 800c 	str.w	r8, [sp, #12]
 801080c:	2330      	movs	r3, #48	@ 0x30
 801080e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80109ac <_svfiprintf_r+0x1e4>
 8010812:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010816:	f04f 0901 	mov.w	r9, #1
 801081a:	4623      	mov	r3, r4
 801081c:	469a      	mov	sl, r3
 801081e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010822:	b10a      	cbz	r2, 8010828 <_svfiprintf_r+0x60>
 8010824:	2a25      	cmp	r2, #37	@ 0x25
 8010826:	d1f9      	bne.n	801081c <_svfiprintf_r+0x54>
 8010828:	ebba 0b04 	subs.w	fp, sl, r4
 801082c:	d00b      	beq.n	8010846 <_svfiprintf_r+0x7e>
 801082e:	465b      	mov	r3, fp
 8010830:	4622      	mov	r2, r4
 8010832:	4629      	mov	r1, r5
 8010834:	4638      	mov	r0, r7
 8010836:	f7ff ff6c 	bl	8010712 <__ssputs_r>
 801083a:	3001      	adds	r0, #1
 801083c:	f000 80a7 	beq.w	801098e <_svfiprintf_r+0x1c6>
 8010840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010842:	445a      	add	r2, fp
 8010844:	9209      	str	r2, [sp, #36]	@ 0x24
 8010846:	f89a 3000 	ldrb.w	r3, [sl]
 801084a:	2b00      	cmp	r3, #0
 801084c:	f000 809f 	beq.w	801098e <_svfiprintf_r+0x1c6>
 8010850:	2300      	movs	r3, #0
 8010852:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801085a:	f10a 0a01 	add.w	sl, sl, #1
 801085e:	9304      	str	r3, [sp, #16]
 8010860:	9307      	str	r3, [sp, #28]
 8010862:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010866:	931a      	str	r3, [sp, #104]	@ 0x68
 8010868:	4654      	mov	r4, sl
 801086a:	2205      	movs	r2, #5
 801086c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010870:	484e      	ldr	r0, [pc, #312]	@ (80109ac <_svfiprintf_r+0x1e4>)
 8010872:	f7ef fd4d 	bl	8000310 <memchr>
 8010876:	9a04      	ldr	r2, [sp, #16]
 8010878:	b9d8      	cbnz	r0, 80108b2 <_svfiprintf_r+0xea>
 801087a:	06d0      	lsls	r0, r2, #27
 801087c:	bf44      	itt	mi
 801087e:	2320      	movmi	r3, #32
 8010880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010884:	0711      	lsls	r1, r2, #28
 8010886:	bf44      	itt	mi
 8010888:	232b      	movmi	r3, #43	@ 0x2b
 801088a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801088e:	f89a 3000 	ldrb.w	r3, [sl]
 8010892:	2b2a      	cmp	r3, #42	@ 0x2a
 8010894:	d015      	beq.n	80108c2 <_svfiprintf_r+0xfa>
 8010896:	9a07      	ldr	r2, [sp, #28]
 8010898:	4654      	mov	r4, sl
 801089a:	2000      	movs	r0, #0
 801089c:	f04f 0c0a 	mov.w	ip, #10
 80108a0:	4621      	mov	r1, r4
 80108a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108a6:	3b30      	subs	r3, #48	@ 0x30
 80108a8:	2b09      	cmp	r3, #9
 80108aa:	d94b      	bls.n	8010944 <_svfiprintf_r+0x17c>
 80108ac:	b1b0      	cbz	r0, 80108dc <_svfiprintf_r+0x114>
 80108ae:	9207      	str	r2, [sp, #28]
 80108b0:	e014      	b.n	80108dc <_svfiprintf_r+0x114>
 80108b2:	eba0 0308 	sub.w	r3, r0, r8
 80108b6:	fa09 f303 	lsl.w	r3, r9, r3
 80108ba:	4313      	orrs	r3, r2
 80108bc:	9304      	str	r3, [sp, #16]
 80108be:	46a2      	mov	sl, r4
 80108c0:	e7d2      	b.n	8010868 <_svfiprintf_r+0xa0>
 80108c2:	9b03      	ldr	r3, [sp, #12]
 80108c4:	1d19      	adds	r1, r3, #4
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	9103      	str	r1, [sp, #12]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	bfbb      	ittet	lt
 80108ce:	425b      	neglt	r3, r3
 80108d0:	f042 0202 	orrlt.w	r2, r2, #2
 80108d4:	9307      	strge	r3, [sp, #28]
 80108d6:	9307      	strlt	r3, [sp, #28]
 80108d8:	bfb8      	it	lt
 80108da:	9204      	strlt	r2, [sp, #16]
 80108dc:	7823      	ldrb	r3, [r4, #0]
 80108de:	2b2e      	cmp	r3, #46	@ 0x2e
 80108e0:	d10a      	bne.n	80108f8 <_svfiprintf_r+0x130>
 80108e2:	7863      	ldrb	r3, [r4, #1]
 80108e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80108e6:	d132      	bne.n	801094e <_svfiprintf_r+0x186>
 80108e8:	9b03      	ldr	r3, [sp, #12]
 80108ea:	1d1a      	adds	r2, r3, #4
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	9203      	str	r2, [sp, #12]
 80108f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80108f4:	3402      	adds	r4, #2
 80108f6:	9305      	str	r3, [sp, #20]
 80108f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80109bc <_svfiprintf_r+0x1f4>
 80108fc:	7821      	ldrb	r1, [r4, #0]
 80108fe:	2203      	movs	r2, #3
 8010900:	4650      	mov	r0, sl
 8010902:	f7ef fd05 	bl	8000310 <memchr>
 8010906:	b138      	cbz	r0, 8010918 <_svfiprintf_r+0x150>
 8010908:	9b04      	ldr	r3, [sp, #16]
 801090a:	eba0 000a 	sub.w	r0, r0, sl
 801090e:	2240      	movs	r2, #64	@ 0x40
 8010910:	4082      	lsls	r2, r0
 8010912:	4313      	orrs	r3, r2
 8010914:	3401      	adds	r4, #1
 8010916:	9304      	str	r3, [sp, #16]
 8010918:	f814 1b01 	ldrb.w	r1, [r4], #1
 801091c:	4824      	ldr	r0, [pc, #144]	@ (80109b0 <_svfiprintf_r+0x1e8>)
 801091e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010922:	2206      	movs	r2, #6
 8010924:	f7ef fcf4 	bl	8000310 <memchr>
 8010928:	2800      	cmp	r0, #0
 801092a:	d036      	beq.n	801099a <_svfiprintf_r+0x1d2>
 801092c:	4b21      	ldr	r3, [pc, #132]	@ (80109b4 <_svfiprintf_r+0x1ec>)
 801092e:	bb1b      	cbnz	r3, 8010978 <_svfiprintf_r+0x1b0>
 8010930:	9b03      	ldr	r3, [sp, #12]
 8010932:	3307      	adds	r3, #7
 8010934:	f023 0307 	bic.w	r3, r3, #7
 8010938:	3308      	adds	r3, #8
 801093a:	9303      	str	r3, [sp, #12]
 801093c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801093e:	4433      	add	r3, r6
 8010940:	9309      	str	r3, [sp, #36]	@ 0x24
 8010942:	e76a      	b.n	801081a <_svfiprintf_r+0x52>
 8010944:	fb0c 3202 	mla	r2, ip, r2, r3
 8010948:	460c      	mov	r4, r1
 801094a:	2001      	movs	r0, #1
 801094c:	e7a8      	b.n	80108a0 <_svfiprintf_r+0xd8>
 801094e:	2300      	movs	r3, #0
 8010950:	3401      	adds	r4, #1
 8010952:	9305      	str	r3, [sp, #20]
 8010954:	4619      	mov	r1, r3
 8010956:	f04f 0c0a 	mov.w	ip, #10
 801095a:	4620      	mov	r0, r4
 801095c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010960:	3a30      	subs	r2, #48	@ 0x30
 8010962:	2a09      	cmp	r2, #9
 8010964:	d903      	bls.n	801096e <_svfiprintf_r+0x1a6>
 8010966:	2b00      	cmp	r3, #0
 8010968:	d0c6      	beq.n	80108f8 <_svfiprintf_r+0x130>
 801096a:	9105      	str	r1, [sp, #20]
 801096c:	e7c4      	b.n	80108f8 <_svfiprintf_r+0x130>
 801096e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010972:	4604      	mov	r4, r0
 8010974:	2301      	movs	r3, #1
 8010976:	e7f0      	b.n	801095a <_svfiprintf_r+0x192>
 8010978:	ab03      	add	r3, sp, #12
 801097a:	9300      	str	r3, [sp, #0]
 801097c:	462a      	mov	r2, r5
 801097e:	4b0e      	ldr	r3, [pc, #56]	@ (80109b8 <_svfiprintf_r+0x1f0>)
 8010980:	a904      	add	r1, sp, #16
 8010982:	4638      	mov	r0, r7
 8010984:	f7fc fe30 	bl	800d5e8 <_printf_float>
 8010988:	1c42      	adds	r2, r0, #1
 801098a:	4606      	mov	r6, r0
 801098c:	d1d6      	bne.n	801093c <_svfiprintf_r+0x174>
 801098e:	89ab      	ldrh	r3, [r5, #12]
 8010990:	065b      	lsls	r3, r3, #25
 8010992:	f53f af2d 	bmi.w	80107f0 <_svfiprintf_r+0x28>
 8010996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010998:	e72c      	b.n	80107f4 <_svfiprintf_r+0x2c>
 801099a:	ab03      	add	r3, sp, #12
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	462a      	mov	r2, r5
 80109a0:	4b05      	ldr	r3, [pc, #20]	@ (80109b8 <_svfiprintf_r+0x1f0>)
 80109a2:	a904      	add	r1, sp, #16
 80109a4:	4638      	mov	r0, r7
 80109a6:	f7fd f951 	bl	800dc4c <_printf_i>
 80109aa:	e7ed      	b.n	8010988 <_svfiprintf_r+0x1c0>
 80109ac:	08012d16 	.word	0x08012d16
 80109b0:	08012d20 	.word	0x08012d20
 80109b4:	0800d5e9 	.word	0x0800d5e9
 80109b8:	08010713 	.word	0x08010713
 80109bc:	08012d1c 	.word	0x08012d1c

080109c0 <_sungetc_r>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	1c4b      	adds	r3, r1, #1
 80109c4:	4614      	mov	r4, r2
 80109c6:	d103      	bne.n	80109d0 <_sungetc_r+0x10>
 80109c8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80109cc:	4628      	mov	r0, r5
 80109ce:	bd38      	pop	{r3, r4, r5, pc}
 80109d0:	8993      	ldrh	r3, [r2, #12]
 80109d2:	f023 0320 	bic.w	r3, r3, #32
 80109d6:	8193      	strh	r3, [r2, #12]
 80109d8:	6853      	ldr	r3, [r2, #4]
 80109da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80109dc:	b2cd      	uxtb	r5, r1
 80109de:	b18a      	cbz	r2, 8010a04 <_sungetc_r+0x44>
 80109e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80109e2:	429a      	cmp	r2, r3
 80109e4:	dd08      	ble.n	80109f8 <_sungetc_r+0x38>
 80109e6:	6823      	ldr	r3, [r4, #0]
 80109e8:	1e5a      	subs	r2, r3, #1
 80109ea:	6022      	str	r2, [r4, #0]
 80109ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80109f0:	6863      	ldr	r3, [r4, #4]
 80109f2:	3301      	adds	r3, #1
 80109f4:	6063      	str	r3, [r4, #4]
 80109f6:	e7e9      	b.n	80109cc <_sungetc_r+0xc>
 80109f8:	4621      	mov	r1, r4
 80109fa:	f001 f9e4 	bl	8011dc6 <__submore>
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d0f1      	beq.n	80109e6 <_sungetc_r+0x26>
 8010a02:	e7e1      	b.n	80109c8 <_sungetc_r+0x8>
 8010a04:	6921      	ldr	r1, [r4, #16]
 8010a06:	6822      	ldr	r2, [r4, #0]
 8010a08:	b141      	cbz	r1, 8010a1c <_sungetc_r+0x5c>
 8010a0a:	4291      	cmp	r1, r2
 8010a0c:	d206      	bcs.n	8010a1c <_sungetc_r+0x5c>
 8010a0e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8010a12:	42a9      	cmp	r1, r5
 8010a14:	d102      	bne.n	8010a1c <_sungetc_r+0x5c>
 8010a16:	3a01      	subs	r2, #1
 8010a18:	6022      	str	r2, [r4, #0]
 8010a1a:	e7ea      	b.n	80109f2 <_sungetc_r+0x32>
 8010a1c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8010a20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a24:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a26:	2303      	movs	r3, #3
 8010a28:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010a2a:	4623      	mov	r3, r4
 8010a2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010a30:	6023      	str	r3, [r4, #0]
 8010a32:	2301      	movs	r3, #1
 8010a34:	e7de      	b.n	80109f4 <_sungetc_r+0x34>

08010a36 <__ssrefill_r>:
 8010a36:	b510      	push	{r4, lr}
 8010a38:	460c      	mov	r4, r1
 8010a3a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010a3c:	b169      	cbz	r1, 8010a5a <__ssrefill_r+0x24>
 8010a3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a42:	4299      	cmp	r1, r3
 8010a44:	d001      	beq.n	8010a4a <__ssrefill_r+0x14>
 8010a46:	f7ff fae1 	bl	801000c <_free_r>
 8010a4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010a4c:	6063      	str	r3, [r4, #4]
 8010a4e:	2000      	movs	r0, #0
 8010a50:	6360      	str	r0, [r4, #52]	@ 0x34
 8010a52:	b113      	cbz	r3, 8010a5a <__ssrefill_r+0x24>
 8010a54:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010a56:	6023      	str	r3, [r4, #0]
 8010a58:	bd10      	pop	{r4, pc}
 8010a5a:	6923      	ldr	r3, [r4, #16]
 8010a5c:	6023      	str	r3, [r4, #0]
 8010a5e:	2300      	movs	r3, #0
 8010a60:	6063      	str	r3, [r4, #4]
 8010a62:	89a3      	ldrh	r3, [r4, #12]
 8010a64:	f043 0320 	orr.w	r3, r3, #32
 8010a68:	81a3      	strh	r3, [r4, #12]
 8010a6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a6e:	e7f3      	b.n	8010a58 <__ssrefill_r+0x22>

08010a70 <__ssvfiscanf_r>:
 8010a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a74:	460c      	mov	r4, r1
 8010a76:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8010a80:	49a5      	ldr	r1, [pc, #660]	@ (8010d18 <__ssvfiscanf_r+0x2a8>)
 8010a82:	91a0      	str	r1, [sp, #640]	@ 0x280
 8010a84:	f10d 0804 	add.w	r8, sp, #4
 8010a88:	49a4      	ldr	r1, [pc, #656]	@ (8010d1c <__ssvfiscanf_r+0x2ac>)
 8010a8a:	4fa5      	ldr	r7, [pc, #660]	@ (8010d20 <__ssvfiscanf_r+0x2b0>)
 8010a8c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010a90:	4606      	mov	r6, r0
 8010a92:	91a1      	str	r1, [sp, #644]	@ 0x284
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	7813      	ldrb	r3, [r2, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	f000 8158 	beq.w	8010d4e <__ssvfiscanf_r+0x2de>
 8010a9e:	5cf9      	ldrb	r1, [r7, r3]
 8010aa0:	f011 0108 	ands.w	r1, r1, #8
 8010aa4:	f102 0501 	add.w	r5, r2, #1
 8010aa8:	d019      	beq.n	8010ade <__ssvfiscanf_r+0x6e>
 8010aaa:	6863      	ldr	r3, [r4, #4]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	dd0f      	ble.n	8010ad0 <__ssvfiscanf_r+0x60>
 8010ab0:	6823      	ldr	r3, [r4, #0]
 8010ab2:	781a      	ldrb	r2, [r3, #0]
 8010ab4:	5cba      	ldrb	r2, [r7, r2]
 8010ab6:	0712      	lsls	r2, r2, #28
 8010ab8:	d401      	bmi.n	8010abe <__ssvfiscanf_r+0x4e>
 8010aba:	462a      	mov	r2, r5
 8010abc:	e7eb      	b.n	8010a96 <__ssvfiscanf_r+0x26>
 8010abe:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010ac0:	3201      	adds	r2, #1
 8010ac2:	9245      	str	r2, [sp, #276]	@ 0x114
 8010ac4:	6862      	ldr	r2, [r4, #4]
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	3a01      	subs	r2, #1
 8010aca:	6062      	str	r2, [r4, #4]
 8010acc:	6023      	str	r3, [r4, #0]
 8010ace:	e7ec      	b.n	8010aaa <__ssvfiscanf_r+0x3a>
 8010ad0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010ad2:	4621      	mov	r1, r4
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	4798      	blx	r3
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	d0e9      	beq.n	8010ab0 <__ssvfiscanf_r+0x40>
 8010adc:	e7ed      	b.n	8010aba <__ssvfiscanf_r+0x4a>
 8010ade:	2b25      	cmp	r3, #37	@ 0x25
 8010ae0:	d012      	beq.n	8010b08 <__ssvfiscanf_r+0x98>
 8010ae2:	4699      	mov	r9, r3
 8010ae4:	6863      	ldr	r3, [r4, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f340 8093 	ble.w	8010c12 <__ssvfiscanf_r+0x1a2>
 8010aec:	6822      	ldr	r2, [r4, #0]
 8010aee:	7813      	ldrb	r3, [r2, #0]
 8010af0:	454b      	cmp	r3, r9
 8010af2:	f040 812c 	bne.w	8010d4e <__ssvfiscanf_r+0x2de>
 8010af6:	6863      	ldr	r3, [r4, #4]
 8010af8:	3b01      	subs	r3, #1
 8010afa:	6063      	str	r3, [r4, #4]
 8010afc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010afe:	3201      	adds	r2, #1
 8010b00:	3301      	adds	r3, #1
 8010b02:	6022      	str	r2, [r4, #0]
 8010b04:	9345      	str	r3, [sp, #276]	@ 0x114
 8010b06:	e7d8      	b.n	8010aba <__ssvfiscanf_r+0x4a>
 8010b08:	9141      	str	r1, [sp, #260]	@ 0x104
 8010b0a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010b0c:	7853      	ldrb	r3, [r2, #1]
 8010b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b10:	bf02      	ittt	eq
 8010b12:	2310      	moveq	r3, #16
 8010b14:	1c95      	addeq	r5, r2, #2
 8010b16:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010b18:	220a      	movs	r2, #10
 8010b1a:	46a9      	mov	r9, r5
 8010b1c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8010b20:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010b24:	2b09      	cmp	r3, #9
 8010b26:	d91e      	bls.n	8010b66 <__ssvfiscanf_r+0xf6>
 8010b28:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8010d24 <__ssvfiscanf_r+0x2b4>
 8010b2c:	2203      	movs	r2, #3
 8010b2e:	4650      	mov	r0, sl
 8010b30:	f7ef fbee 	bl	8000310 <memchr>
 8010b34:	b138      	cbz	r0, 8010b46 <__ssvfiscanf_r+0xd6>
 8010b36:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010b38:	eba0 000a 	sub.w	r0, r0, sl
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	4083      	lsls	r3, r0
 8010b40:	4313      	orrs	r3, r2
 8010b42:	9341      	str	r3, [sp, #260]	@ 0x104
 8010b44:	464d      	mov	r5, r9
 8010b46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010b4a:	2b78      	cmp	r3, #120	@ 0x78
 8010b4c:	d806      	bhi.n	8010b5c <__ssvfiscanf_r+0xec>
 8010b4e:	2b57      	cmp	r3, #87	@ 0x57
 8010b50:	d810      	bhi.n	8010b74 <__ssvfiscanf_r+0x104>
 8010b52:	2b25      	cmp	r3, #37	@ 0x25
 8010b54:	d0c5      	beq.n	8010ae2 <__ssvfiscanf_r+0x72>
 8010b56:	d857      	bhi.n	8010c08 <__ssvfiscanf_r+0x198>
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d065      	beq.n	8010c28 <__ssvfiscanf_r+0x1b8>
 8010b5c:	2303      	movs	r3, #3
 8010b5e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010b60:	230a      	movs	r3, #10
 8010b62:	9342      	str	r3, [sp, #264]	@ 0x108
 8010b64:	e078      	b.n	8010c58 <__ssvfiscanf_r+0x1e8>
 8010b66:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010b68:	fb02 1103 	mla	r1, r2, r3, r1
 8010b6c:	3930      	subs	r1, #48	@ 0x30
 8010b6e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010b70:	464d      	mov	r5, r9
 8010b72:	e7d2      	b.n	8010b1a <__ssvfiscanf_r+0xaa>
 8010b74:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010b78:	2a20      	cmp	r2, #32
 8010b7a:	d8ef      	bhi.n	8010b5c <__ssvfiscanf_r+0xec>
 8010b7c:	a101      	add	r1, pc, #4	@ (adr r1, 8010b84 <__ssvfiscanf_r+0x114>)
 8010b7e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010b82:	bf00      	nop
 8010b84:	08010c37 	.word	0x08010c37
 8010b88:	08010b5d 	.word	0x08010b5d
 8010b8c:	08010b5d 	.word	0x08010b5d
 8010b90:	08010c91 	.word	0x08010c91
 8010b94:	08010b5d 	.word	0x08010b5d
 8010b98:	08010b5d 	.word	0x08010b5d
 8010b9c:	08010b5d 	.word	0x08010b5d
 8010ba0:	08010b5d 	.word	0x08010b5d
 8010ba4:	08010b5d 	.word	0x08010b5d
 8010ba8:	08010b5d 	.word	0x08010b5d
 8010bac:	08010b5d 	.word	0x08010b5d
 8010bb0:	08010ca7 	.word	0x08010ca7
 8010bb4:	08010c8d 	.word	0x08010c8d
 8010bb8:	08010c0f 	.word	0x08010c0f
 8010bbc:	08010c0f 	.word	0x08010c0f
 8010bc0:	08010c0f 	.word	0x08010c0f
 8010bc4:	08010b5d 	.word	0x08010b5d
 8010bc8:	08010c49 	.word	0x08010c49
 8010bcc:	08010b5d 	.word	0x08010b5d
 8010bd0:	08010b5d 	.word	0x08010b5d
 8010bd4:	08010b5d 	.word	0x08010b5d
 8010bd8:	08010b5d 	.word	0x08010b5d
 8010bdc:	08010cb7 	.word	0x08010cb7
 8010be0:	08010c51 	.word	0x08010c51
 8010be4:	08010c2f 	.word	0x08010c2f
 8010be8:	08010b5d 	.word	0x08010b5d
 8010bec:	08010b5d 	.word	0x08010b5d
 8010bf0:	08010cb3 	.word	0x08010cb3
 8010bf4:	08010b5d 	.word	0x08010b5d
 8010bf8:	08010c8d 	.word	0x08010c8d
 8010bfc:	08010b5d 	.word	0x08010b5d
 8010c00:	08010b5d 	.word	0x08010b5d
 8010c04:	08010c37 	.word	0x08010c37
 8010c08:	3b45      	subs	r3, #69	@ 0x45
 8010c0a:	2b02      	cmp	r3, #2
 8010c0c:	d8a6      	bhi.n	8010b5c <__ssvfiscanf_r+0xec>
 8010c0e:	2305      	movs	r3, #5
 8010c10:	e021      	b.n	8010c56 <__ssvfiscanf_r+0x1e6>
 8010c12:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010c14:	4621      	mov	r1, r4
 8010c16:	4630      	mov	r0, r6
 8010c18:	4798      	blx	r3
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	f43f af66 	beq.w	8010aec <__ssvfiscanf_r+0x7c>
 8010c20:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010c22:	2800      	cmp	r0, #0
 8010c24:	f040 808b 	bne.w	8010d3e <__ssvfiscanf_r+0x2ce>
 8010c28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c2c:	e08b      	b.n	8010d46 <__ssvfiscanf_r+0x2d6>
 8010c2e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010c30:	f042 0220 	orr.w	r2, r2, #32
 8010c34:	9241      	str	r2, [sp, #260]	@ 0x104
 8010c36:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010c3c:	9241      	str	r2, [sp, #260]	@ 0x104
 8010c3e:	2210      	movs	r2, #16
 8010c40:	2b6e      	cmp	r3, #110	@ 0x6e
 8010c42:	9242      	str	r2, [sp, #264]	@ 0x108
 8010c44:	d902      	bls.n	8010c4c <__ssvfiscanf_r+0x1dc>
 8010c46:	e005      	b.n	8010c54 <__ssvfiscanf_r+0x1e4>
 8010c48:	2300      	movs	r3, #0
 8010c4a:	9342      	str	r3, [sp, #264]	@ 0x108
 8010c4c:	2303      	movs	r3, #3
 8010c4e:	e002      	b.n	8010c56 <__ssvfiscanf_r+0x1e6>
 8010c50:	2308      	movs	r3, #8
 8010c52:	9342      	str	r3, [sp, #264]	@ 0x108
 8010c54:	2304      	movs	r3, #4
 8010c56:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010c58:	6863      	ldr	r3, [r4, #4]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	dd39      	ble.n	8010cd2 <__ssvfiscanf_r+0x262>
 8010c5e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010c60:	0659      	lsls	r1, r3, #25
 8010c62:	d404      	bmi.n	8010c6e <__ssvfiscanf_r+0x1fe>
 8010c64:	6823      	ldr	r3, [r4, #0]
 8010c66:	781a      	ldrb	r2, [r3, #0]
 8010c68:	5cba      	ldrb	r2, [r7, r2]
 8010c6a:	0712      	lsls	r2, r2, #28
 8010c6c:	d438      	bmi.n	8010ce0 <__ssvfiscanf_r+0x270>
 8010c6e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010c70:	2b02      	cmp	r3, #2
 8010c72:	dc47      	bgt.n	8010d04 <__ssvfiscanf_r+0x294>
 8010c74:	466b      	mov	r3, sp
 8010c76:	4622      	mov	r2, r4
 8010c78:	a941      	add	r1, sp, #260	@ 0x104
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	f000 f9c0 	bl	8011000 <_scanf_chars>
 8010c80:	2801      	cmp	r0, #1
 8010c82:	d064      	beq.n	8010d4e <__ssvfiscanf_r+0x2de>
 8010c84:	2802      	cmp	r0, #2
 8010c86:	f47f af18 	bne.w	8010aba <__ssvfiscanf_r+0x4a>
 8010c8a:	e7c9      	b.n	8010c20 <__ssvfiscanf_r+0x1b0>
 8010c8c:	220a      	movs	r2, #10
 8010c8e:	e7d7      	b.n	8010c40 <__ssvfiscanf_r+0x1d0>
 8010c90:	4629      	mov	r1, r5
 8010c92:	4640      	mov	r0, r8
 8010c94:	f000 fb02 	bl	801129c <__sccl>
 8010c98:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c9e:	9341      	str	r3, [sp, #260]	@ 0x104
 8010ca0:	4605      	mov	r5, r0
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	e7d7      	b.n	8010c56 <__ssvfiscanf_r+0x1e6>
 8010ca6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cac:	9341      	str	r3, [sp, #260]	@ 0x104
 8010cae:	2300      	movs	r3, #0
 8010cb0:	e7d1      	b.n	8010c56 <__ssvfiscanf_r+0x1e6>
 8010cb2:	2302      	movs	r3, #2
 8010cb4:	e7cf      	b.n	8010c56 <__ssvfiscanf_r+0x1e6>
 8010cb6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010cb8:	06c3      	lsls	r3, r0, #27
 8010cba:	f53f aefe 	bmi.w	8010aba <__ssvfiscanf_r+0x4a>
 8010cbe:	9b00      	ldr	r3, [sp, #0]
 8010cc0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010cc2:	1d19      	adds	r1, r3, #4
 8010cc4:	9100      	str	r1, [sp, #0]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	07c0      	lsls	r0, r0, #31
 8010cca:	bf4c      	ite	mi
 8010ccc:	801a      	strhmi	r2, [r3, #0]
 8010cce:	601a      	strpl	r2, [r3, #0]
 8010cd0:	e6f3      	b.n	8010aba <__ssvfiscanf_r+0x4a>
 8010cd2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010cd4:	4621      	mov	r1, r4
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	4798      	blx	r3
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	d0bf      	beq.n	8010c5e <__ssvfiscanf_r+0x1ee>
 8010cde:	e79f      	b.n	8010c20 <__ssvfiscanf_r+0x1b0>
 8010ce0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010ce2:	3201      	adds	r2, #1
 8010ce4:	9245      	str	r2, [sp, #276]	@ 0x114
 8010ce6:	6862      	ldr	r2, [r4, #4]
 8010ce8:	3a01      	subs	r2, #1
 8010cea:	2a00      	cmp	r2, #0
 8010cec:	6062      	str	r2, [r4, #4]
 8010cee:	dd02      	ble.n	8010cf6 <__ssvfiscanf_r+0x286>
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	6023      	str	r3, [r4, #0]
 8010cf4:	e7b6      	b.n	8010c64 <__ssvfiscanf_r+0x1f4>
 8010cf6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010cf8:	4621      	mov	r1, r4
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	4798      	blx	r3
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d0b0      	beq.n	8010c64 <__ssvfiscanf_r+0x1f4>
 8010d02:	e78d      	b.n	8010c20 <__ssvfiscanf_r+0x1b0>
 8010d04:	2b04      	cmp	r3, #4
 8010d06:	dc0f      	bgt.n	8010d28 <__ssvfiscanf_r+0x2b8>
 8010d08:	466b      	mov	r3, sp
 8010d0a:	4622      	mov	r2, r4
 8010d0c:	a941      	add	r1, sp, #260	@ 0x104
 8010d0e:	4630      	mov	r0, r6
 8010d10:	f000 f9d0 	bl	80110b4 <_scanf_i>
 8010d14:	e7b4      	b.n	8010c80 <__ssvfiscanf_r+0x210>
 8010d16:	bf00      	nop
 8010d18:	080109c1 	.word	0x080109c1
 8010d1c:	08010a37 	.word	0x08010a37
 8010d20:	08012b29 	.word	0x08012b29
 8010d24:	08012d1c 	.word	0x08012d1c
 8010d28:	4b0a      	ldr	r3, [pc, #40]	@ (8010d54 <__ssvfiscanf_r+0x2e4>)
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	f43f aec5 	beq.w	8010aba <__ssvfiscanf_r+0x4a>
 8010d30:	466b      	mov	r3, sp
 8010d32:	4622      	mov	r2, r4
 8010d34:	a941      	add	r1, sp, #260	@ 0x104
 8010d36:	4630      	mov	r0, r6
 8010d38:	f7fd f8a8 	bl	800de8c <_scanf_float>
 8010d3c:	e7a0      	b.n	8010c80 <__ssvfiscanf_r+0x210>
 8010d3e:	89a3      	ldrh	r3, [r4, #12]
 8010d40:	065b      	lsls	r3, r3, #25
 8010d42:	f53f af71 	bmi.w	8010c28 <__ssvfiscanf_r+0x1b8>
 8010d46:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d4e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010d50:	e7f9      	b.n	8010d46 <__ssvfiscanf_r+0x2d6>
 8010d52:	bf00      	nop
 8010d54:	0800de8d 	.word	0x0800de8d

08010d58 <__sfputc_r>:
 8010d58:	6893      	ldr	r3, [r2, #8]
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	b410      	push	{r4}
 8010d60:	6093      	str	r3, [r2, #8]
 8010d62:	da08      	bge.n	8010d76 <__sfputc_r+0x1e>
 8010d64:	6994      	ldr	r4, [r2, #24]
 8010d66:	42a3      	cmp	r3, r4
 8010d68:	db01      	blt.n	8010d6e <__sfputc_r+0x16>
 8010d6a:	290a      	cmp	r1, #10
 8010d6c:	d103      	bne.n	8010d76 <__sfputc_r+0x1e>
 8010d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d72:	f001 b901 	b.w	8011f78 <__swbuf_r>
 8010d76:	6813      	ldr	r3, [r2, #0]
 8010d78:	1c58      	adds	r0, r3, #1
 8010d7a:	6010      	str	r0, [r2, #0]
 8010d7c:	7019      	strb	r1, [r3, #0]
 8010d7e:	4608      	mov	r0, r1
 8010d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d84:	4770      	bx	lr

08010d86 <__sfputs_r>:
 8010d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d88:	4606      	mov	r6, r0
 8010d8a:	460f      	mov	r7, r1
 8010d8c:	4614      	mov	r4, r2
 8010d8e:	18d5      	adds	r5, r2, r3
 8010d90:	42ac      	cmp	r4, r5
 8010d92:	d101      	bne.n	8010d98 <__sfputs_r+0x12>
 8010d94:	2000      	movs	r0, #0
 8010d96:	e007      	b.n	8010da8 <__sfputs_r+0x22>
 8010d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d9c:	463a      	mov	r2, r7
 8010d9e:	4630      	mov	r0, r6
 8010da0:	f7ff ffda 	bl	8010d58 <__sfputc_r>
 8010da4:	1c43      	adds	r3, r0, #1
 8010da6:	d1f3      	bne.n	8010d90 <__sfputs_r+0xa>
 8010da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010dac <_vfiprintf_r>:
 8010dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db0:	460d      	mov	r5, r1
 8010db2:	b09d      	sub	sp, #116	@ 0x74
 8010db4:	4614      	mov	r4, r2
 8010db6:	4698      	mov	r8, r3
 8010db8:	4606      	mov	r6, r0
 8010dba:	b118      	cbz	r0, 8010dc4 <_vfiprintf_r+0x18>
 8010dbc:	6a03      	ldr	r3, [r0, #32]
 8010dbe:	b90b      	cbnz	r3, 8010dc4 <_vfiprintf_r+0x18>
 8010dc0:	f7fd fb98 	bl	800e4f4 <__sinit>
 8010dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dc6:	07d9      	lsls	r1, r3, #31
 8010dc8:	d405      	bmi.n	8010dd6 <_vfiprintf_r+0x2a>
 8010dca:	89ab      	ldrh	r3, [r5, #12]
 8010dcc:	059a      	lsls	r2, r3, #22
 8010dce:	d402      	bmi.n	8010dd6 <_vfiprintf_r+0x2a>
 8010dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010dd2:	f7fe fb1c 	bl	800f40e <__retarget_lock_acquire_recursive>
 8010dd6:	89ab      	ldrh	r3, [r5, #12]
 8010dd8:	071b      	lsls	r3, r3, #28
 8010dda:	d501      	bpl.n	8010de0 <_vfiprintf_r+0x34>
 8010ddc:	692b      	ldr	r3, [r5, #16]
 8010dde:	b99b      	cbnz	r3, 8010e08 <_vfiprintf_r+0x5c>
 8010de0:	4629      	mov	r1, r5
 8010de2:	4630      	mov	r0, r6
 8010de4:	f001 f906 	bl	8011ff4 <__swsetup_r>
 8010de8:	b170      	cbz	r0, 8010e08 <_vfiprintf_r+0x5c>
 8010dea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dec:	07dc      	lsls	r4, r3, #31
 8010dee:	d504      	bpl.n	8010dfa <_vfiprintf_r+0x4e>
 8010df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010df4:	b01d      	add	sp, #116	@ 0x74
 8010df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dfa:	89ab      	ldrh	r3, [r5, #12]
 8010dfc:	0598      	lsls	r0, r3, #22
 8010dfe:	d4f7      	bmi.n	8010df0 <_vfiprintf_r+0x44>
 8010e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e02:	f7fe fb05 	bl	800f410 <__retarget_lock_release_recursive>
 8010e06:	e7f3      	b.n	8010df0 <_vfiprintf_r+0x44>
 8010e08:	2300      	movs	r3, #0
 8010e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e0c:	2320      	movs	r3, #32
 8010e0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e16:	2330      	movs	r3, #48	@ 0x30
 8010e18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010fc8 <_vfiprintf_r+0x21c>
 8010e1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e20:	f04f 0901 	mov.w	r9, #1
 8010e24:	4623      	mov	r3, r4
 8010e26:	469a      	mov	sl, r3
 8010e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e2c:	b10a      	cbz	r2, 8010e32 <_vfiprintf_r+0x86>
 8010e2e:	2a25      	cmp	r2, #37	@ 0x25
 8010e30:	d1f9      	bne.n	8010e26 <_vfiprintf_r+0x7a>
 8010e32:	ebba 0b04 	subs.w	fp, sl, r4
 8010e36:	d00b      	beq.n	8010e50 <_vfiprintf_r+0xa4>
 8010e38:	465b      	mov	r3, fp
 8010e3a:	4622      	mov	r2, r4
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4630      	mov	r0, r6
 8010e40:	f7ff ffa1 	bl	8010d86 <__sfputs_r>
 8010e44:	3001      	adds	r0, #1
 8010e46:	f000 80a7 	beq.w	8010f98 <_vfiprintf_r+0x1ec>
 8010e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e4c:	445a      	add	r2, fp
 8010e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e50:	f89a 3000 	ldrb.w	r3, [sl]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	f000 809f 	beq.w	8010f98 <_vfiprintf_r+0x1ec>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e64:	f10a 0a01 	add.w	sl, sl, #1
 8010e68:	9304      	str	r3, [sp, #16]
 8010e6a:	9307      	str	r3, [sp, #28]
 8010e6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e70:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e72:	4654      	mov	r4, sl
 8010e74:	2205      	movs	r2, #5
 8010e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e7a:	4853      	ldr	r0, [pc, #332]	@ (8010fc8 <_vfiprintf_r+0x21c>)
 8010e7c:	f7ef fa48 	bl	8000310 <memchr>
 8010e80:	9a04      	ldr	r2, [sp, #16]
 8010e82:	b9d8      	cbnz	r0, 8010ebc <_vfiprintf_r+0x110>
 8010e84:	06d1      	lsls	r1, r2, #27
 8010e86:	bf44      	itt	mi
 8010e88:	2320      	movmi	r3, #32
 8010e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e8e:	0713      	lsls	r3, r2, #28
 8010e90:	bf44      	itt	mi
 8010e92:	232b      	movmi	r3, #43	@ 0x2b
 8010e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e98:	f89a 3000 	ldrb.w	r3, [sl]
 8010e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e9e:	d015      	beq.n	8010ecc <_vfiprintf_r+0x120>
 8010ea0:	9a07      	ldr	r2, [sp, #28]
 8010ea2:	4654      	mov	r4, sl
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	f04f 0c0a 	mov.w	ip, #10
 8010eaa:	4621      	mov	r1, r4
 8010eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010eb0:	3b30      	subs	r3, #48	@ 0x30
 8010eb2:	2b09      	cmp	r3, #9
 8010eb4:	d94b      	bls.n	8010f4e <_vfiprintf_r+0x1a2>
 8010eb6:	b1b0      	cbz	r0, 8010ee6 <_vfiprintf_r+0x13a>
 8010eb8:	9207      	str	r2, [sp, #28]
 8010eba:	e014      	b.n	8010ee6 <_vfiprintf_r+0x13a>
 8010ebc:	eba0 0308 	sub.w	r3, r0, r8
 8010ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8010ec4:	4313      	orrs	r3, r2
 8010ec6:	9304      	str	r3, [sp, #16]
 8010ec8:	46a2      	mov	sl, r4
 8010eca:	e7d2      	b.n	8010e72 <_vfiprintf_r+0xc6>
 8010ecc:	9b03      	ldr	r3, [sp, #12]
 8010ece:	1d19      	adds	r1, r3, #4
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	9103      	str	r1, [sp, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	bfbb      	ittet	lt
 8010ed8:	425b      	neglt	r3, r3
 8010eda:	f042 0202 	orrlt.w	r2, r2, #2
 8010ede:	9307      	strge	r3, [sp, #28]
 8010ee0:	9307      	strlt	r3, [sp, #28]
 8010ee2:	bfb8      	it	lt
 8010ee4:	9204      	strlt	r2, [sp, #16]
 8010ee6:	7823      	ldrb	r3, [r4, #0]
 8010ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8010eea:	d10a      	bne.n	8010f02 <_vfiprintf_r+0x156>
 8010eec:	7863      	ldrb	r3, [r4, #1]
 8010eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ef0:	d132      	bne.n	8010f58 <_vfiprintf_r+0x1ac>
 8010ef2:	9b03      	ldr	r3, [sp, #12]
 8010ef4:	1d1a      	adds	r2, r3, #4
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	9203      	str	r2, [sp, #12]
 8010efa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010efe:	3402      	adds	r4, #2
 8010f00:	9305      	str	r3, [sp, #20]
 8010f02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010fd8 <_vfiprintf_r+0x22c>
 8010f06:	7821      	ldrb	r1, [r4, #0]
 8010f08:	2203      	movs	r2, #3
 8010f0a:	4650      	mov	r0, sl
 8010f0c:	f7ef fa00 	bl	8000310 <memchr>
 8010f10:	b138      	cbz	r0, 8010f22 <_vfiprintf_r+0x176>
 8010f12:	9b04      	ldr	r3, [sp, #16]
 8010f14:	eba0 000a 	sub.w	r0, r0, sl
 8010f18:	2240      	movs	r2, #64	@ 0x40
 8010f1a:	4082      	lsls	r2, r0
 8010f1c:	4313      	orrs	r3, r2
 8010f1e:	3401      	adds	r4, #1
 8010f20:	9304      	str	r3, [sp, #16]
 8010f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f26:	4829      	ldr	r0, [pc, #164]	@ (8010fcc <_vfiprintf_r+0x220>)
 8010f28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f2c:	2206      	movs	r2, #6
 8010f2e:	f7ef f9ef 	bl	8000310 <memchr>
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d03f      	beq.n	8010fb6 <_vfiprintf_r+0x20a>
 8010f36:	4b26      	ldr	r3, [pc, #152]	@ (8010fd0 <_vfiprintf_r+0x224>)
 8010f38:	bb1b      	cbnz	r3, 8010f82 <_vfiprintf_r+0x1d6>
 8010f3a:	9b03      	ldr	r3, [sp, #12]
 8010f3c:	3307      	adds	r3, #7
 8010f3e:	f023 0307 	bic.w	r3, r3, #7
 8010f42:	3308      	adds	r3, #8
 8010f44:	9303      	str	r3, [sp, #12]
 8010f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f48:	443b      	add	r3, r7
 8010f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f4c:	e76a      	b.n	8010e24 <_vfiprintf_r+0x78>
 8010f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f52:	460c      	mov	r4, r1
 8010f54:	2001      	movs	r0, #1
 8010f56:	e7a8      	b.n	8010eaa <_vfiprintf_r+0xfe>
 8010f58:	2300      	movs	r3, #0
 8010f5a:	3401      	adds	r4, #1
 8010f5c:	9305      	str	r3, [sp, #20]
 8010f5e:	4619      	mov	r1, r3
 8010f60:	f04f 0c0a 	mov.w	ip, #10
 8010f64:	4620      	mov	r0, r4
 8010f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f6a:	3a30      	subs	r2, #48	@ 0x30
 8010f6c:	2a09      	cmp	r2, #9
 8010f6e:	d903      	bls.n	8010f78 <_vfiprintf_r+0x1cc>
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d0c6      	beq.n	8010f02 <_vfiprintf_r+0x156>
 8010f74:	9105      	str	r1, [sp, #20]
 8010f76:	e7c4      	b.n	8010f02 <_vfiprintf_r+0x156>
 8010f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	2301      	movs	r3, #1
 8010f80:	e7f0      	b.n	8010f64 <_vfiprintf_r+0x1b8>
 8010f82:	ab03      	add	r3, sp, #12
 8010f84:	9300      	str	r3, [sp, #0]
 8010f86:	462a      	mov	r2, r5
 8010f88:	4b12      	ldr	r3, [pc, #72]	@ (8010fd4 <_vfiprintf_r+0x228>)
 8010f8a:	a904      	add	r1, sp, #16
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f7fc fb2b 	bl	800d5e8 <_printf_float>
 8010f92:	4607      	mov	r7, r0
 8010f94:	1c78      	adds	r0, r7, #1
 8010f96:	d1d6      	bne.n	8010f46 <_vfiprintf_r+0x19a>
 8010f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f9a:	07d9      	lsls	r1, r3, #31
 8010f9c:	d405      	bmi.n	8010faa <_vfiprintf_r+0x1fe>
 8010f9e:	89ab      	ldrh	r3, [r5, #12]
 8010fa0:	059a      	lsls	r2, r3, #22
 8010fa2:	d402      	bmi.n	8010faa <_vfiprintf_r+0x1fe>
 8010fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fa6:	f7fe fa33 	bl	800f410 <__retarget_lock_release_recursive>
 8010faa:	89ab      	ldrh	r3, [r5, #12]
 8010fac:	065b      	lsls	r3, r3, #25
 8010fae:	f53f af1f 	bmi.w	8010df0 <_vfiprintf_r+0x44>
 8010fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fb4:	e71e      	b.n	8010df4 <_vfiprintf_r+0x48>
 8010fb6:	ab03      	add	r3, sp, #12
 8010fb8:	9300      	str	r3, [sp, #0]
 8010fba:	462a      	mov	r2, r5
 8010fbc:	4b05      	ldr	r3, [pc, #20]	@ (8010fd4 <_vfiprintf_r+0x228>)
 8010fbe:	a904      	add	r1, sp, #16
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f7fc fe43 	bl	800dc4c <_printf_i>
 8010fc6:	e7e4      	b.n	8010f92 <_vfiprintf_r+0x1e6>
 8010fc8:	08012d16 	.word	0x08012d16
 8010fcc:	08012d20 	.word	0x08012d20
 8010fd0:	0800d5e9 	.word	0x0800d5e9
 8010fd4:	08010d87 	.word	0x08010d87
 8010fd8:	08012d1c 	.word	0x08012d1c

08010fdc <__ascii_mbtowc>:
 8010fdc:	b082      	sub	sp, #8
 8010fde:	b901      	cbnz	r1, 8010fe2 <__ascii_mbtowc+0x6>
 8010fe0:	a901      	add	r1, sp, #4
 8010fe2:	b142      	cbz	r2, 8010ff6 <__ascii_mbtowc+0x1a>
 8010fe4:	b14b      	cbz	r3, 8010ffa <__ascii_mbtowc+0x1e>
 8010fe6:	7813      	ldrb	r3, [r2, #0]
 8010fe8:	600b      	str	r3, [r1, #0]
 8010fea:	7812      	ldrb	r2, [r2, #0]
 8010fec:	1e10      	subs	r0, r2, #0
 8010fee:	bf18      	it	ne
 8010ff0:	2001      	movne	r0, #1
 8010ff2:	b002      	add	sp, #8
 8010ff4:	4770      	bx	lr
 8010ff6:	4610      	mov	r0, r2
 8010ff8:	e7fb      	b.n	8010ff2 <__ascii_mbtowc+0x16>
 8010ffa:	f06f 0001 	mvn.w	r0, #1
 8010ffe:	e7f8      	b.n	8010ff2 <__ascii_mbtowc+0x16>

08011000 <_scanf_chars>:
 8011000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011004:	4615      	mov	r5, r2
 8011006:	688a      	ldr	r2, [r1, #8]
 8011008:	4680      	mov	r8, r0
 801100a:	460c      	mov	r4, r1
 801100c:	b932      	cbnz	r2, 801101c <_scanf_chars+0x1c>
 801100e:	698a      	ldr	r2, [r1, #24]
 8011010:	2a00      	cmp	r2, #0
 8011012:	bf14      	ite	ne
 8011014:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8011018:	2201      	moveq	r2, #1
 801101a:	608a      	str	r2, [r1, #8]
 801101c:	6822      	ldr	r2, [r4, #0]
 801101e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80110b0 <_scanf_chars+0xb0>
 8011022:	06d1      	lsls	r1, r2, #27
 8011024:	bf5f      	itttt	pl
 8011026:	681a      	ldrpl	r2, [r3, #0]
 8011028:	1d11      	addpl	r1, r2, #4
 801102a:	6019      	strpl	r1, [r3, #0]
 801102c:	6816      	ldrpl	r6, [r2, #0]
 801102e:	2700      	movs	r7, #0
 8011030:	69a0      	ldr	r0, [r4, #24]
 8011032:	b188      	cbz	r0, 8011058 <_scanf_chars+0x58>
 8011034:	2801      	cmp	r0, #1
 8011036:	d107      	bne.n	8011048 <_scanf_chars+0x48>
 8011038:	682b      	ldr	r3, [r5, #0]
 801103a:	781a      	ldrb	r2, [r3, #0]
 801103c:	6963      	ldr	r3, [r4, #20]
 801103e:	5c9b      	ldrb	r3, [r3, r2]
 8011040:	b953      	cbnz	r3, 8011058 <_scanf_chars+0x58>
 8011042:	2f00      	cmp	r7, #0
 8011044:	d031      	beq.n	80110aa <_scanf_chars+0xaa>
 8011046:	e022      	b.n	801108e <_scanf_chars+0x8e>
 8011048:	2802      	cmp	r0, #2
 801104a:	d120      	bne.n	801108e <_scanf_chars+0x8e>
 801104c:	682b      	ldr	r3, [r5, #0]
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011054:	071b      	lsls	r3, r3, #28
 8011056:	d41a      	bmi.n	801108e <_scanf_chars+0x8e>
 8011058:	6823      	ldr	r3, [r4, #0]
 801105a:	06da      	lsls	r2, r3, #27
 801105c:	bf5e      	ittt	pl
 801105e:	682b      	ldrpl	r3, [r5, #0]
 8011060:	781b      	ldrbpl	r3, [r3, #0]
 8011062:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011066:	682a      	ldr	r2, [r5, #0]
 8011068:	686b      	ldr	r3, [r5, #4]
 801106a:	3201      	adds	r2, #1
 801106c:	602a      	str	r2, [r5, #0]
 801106e:	68a2      	ldr	r2, [r4, #8]
 8011070:	3b01      	subs	r3, #1
 8011072:	3a01      	subs	r2, #1
 8011074:	606b      	str	r3, [r5, #4]
 8011076:	3701      	adds	r7, #1
 8011078:	60a2      	str	r2, [r4, #8]
 801107a:	b142      	cbz	r2, 801108e <_scanf_chars+0x8e>
 801107c:	2b00      	cmp	r3, #0
 801107e:	dcd7      	bgt.n	8011030 <_scanf_chars+0x30>
 8011080:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011084:	4629      	mov	r1, r5
 8011086:	4640      	mov	r0, r8
 8011088:	4798      	blx	r3
 801108a:	2800      	cmp	r0, #0
 801108c:	d0d0      	beq.n	8011030 <_scanf_chars+0x30>
 801108e:	6823      	ldr	r3, [r4, #0]
 8011090:	f013 0310 	ands.w	r3, r3, #16
 8011094:	d105      	bne.n	80110a2 <_scanf_chars+0xa2>
 8011096:	68e2      	ldr	r2, [r4, #12]
 8011098:	3201      	adds	r2, #1
 801109a:	60e2      	str	r2, [r4, #12]
 801109c:	69a2      	ldr	r2, [r4, #24]
 801109e:	b102      	cbz	r2, 80110a2 <_scanf_chars+0xa2>
 80110a0:	7033      	strb	r3, [r6, #0]
 80110a2:	6923      	ldr	r3, [r4, #16]
 80110a4:	443b      	add	r3, r7
 80110a6:	6123      	str	r3, [r4, #16]
 80110a8:	2000      	movs	r0, #0
 80110aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ae:	bf00      	nop
 80110b0:	08012b29 	.word	0x08012b29

080110b4 <_scanf_i>:
 80110b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b8:	4698      	mov	r8, r3
 80110ba:	4b74      	ldr	r3, [pc, #464]	@ (801128c <_scanf_i+0x1d8>)
 80110bc:	460c      	mov	r4, r1
 80110be:	4682      	mov	sl, r0
 80110c0:	4616      	mov	r6, r2
 80110c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80110c6:	b087      	sub	sp, #28
 80110c8:	ab03      	add	r3, sp, #12
 80110ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80110ce:	4b70      	ldr	r3, [pc, #448]	@ (8011290 <_scanf_i+0x1dc>)
 80110d0:	69a1      	ldr	r1, [r4, #24]
 80110d2:	4a70      	ldr	r2, [pc, #448]	@ (8011294 <_scanf_i+0x1e0>)
 80110d4:	2903      	cmp	r1, #3
 80110d6:	bf08      	it	eq
 80110d8:	461a      	moveq	r2, r3
 80110da:	68a3      	ldr	r3, [r4, #8]
 80110dc:	9201      	str	r2, [sp, #4]
 80110de:	1e5a      	subs	r2, r3, #1
 80110e0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80110e4:	bf88      	it	hi
 80110e6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80110ea:	4627      	mov	r7, r4
 80110ec:	bf82      	ittt	hi
 80110ee:	eb03 0905 	addhi.w	r9, r3, r5
 80110f2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80110f6:	60a3      	strhi	r3, [r4, #8]
 80110f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80110fc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011100:	bf98      	it	ls
 8011102:	f04f 0900 	movls.w	r9, #0
 8011106:	6023      	str	r3, [r4, #0]
 8011108:	463d      	mov	r5, r7
 801110a:	f04f 0b00 	mov.w	fp, #0
 801110e:	6831      	ldr	r1, [r6, #0]
 8011110:	ab03      	add	r3, sp, #12
 8011112:	7809      	ldrb	r1, [r1, #0]
 8011114:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011118:	2202      	movs	r2, #2
 801111a:	f7ef f8f9 	bl	8000310 <memchr>
 801111e:	b328      	cbz	r0, 801116c <_scanf_i+0xb8>
 8011120:	f1bb 0f01 	cmp.w	fp, #1
 8011124:	d159      	bne.n	80111da <_scanf_i+0x126>
 8011126:	6862      	ldr	r2, [r4, #4]
 8011128:	b92a      	cbnz	r2, 8011136 <_scanf_i+0x82>
 801112a:	6822      	ldr	r2, [r4, #0]
 801112c:	2108      	movs	r1, #8
 801112e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011132:	6061      	str	r1, [r4, #4]
 8011134:	6022      	str	r2, [r4, #0]
 8011136:	6822      	ldr	r2, [r4, #0]
 8011138:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801113c:	6022      	str	r2, [r4, #0]
 801113e:	68a2      	ldr	r2, [r4, #8]
 8011140:	1e51      	subs	r1, r2, #1
 8011142:	60a1      	str	r1, [r4, #8]
 8011144:	b192      	cbz	r2, 801116c <_scanf_i+0xb8>
 8011146:	6832      	ldr	r2, [r6, #0]
 8011148:	1c51      	adds	r1, r2, #1
 801114a:	6031      	str	r1, [r6, #0]
 801114c:	7812      	ldrb	r2, [r2, #0]
 801114e:	f805 2b01 	strb.w	r2, [r5], #1
 8011152:	6872      	ldr	r2, [r6, #4]
 8011154:	3a01      	subs	r2, #1
 8011156:	2a00      	cmp	r2, #0
 8011158:	6072      	str	r2, [r6, #4]
 801115a:	dc07      	bgt.n	801116c <_scanf_i+0xb8>
 801115c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011160:	4631      	mov	r1, r6
 8011162:	4650      	mov	r0, sl
 8011164:	4790      	blx	r2
 8011166:	2800      	cmp	r0, #0
 8011168:	f040 8085 	bne.w	8011276 <_scanf_i+0x1c2>
 801116c:	f10b 0b01 	add.w	fp, fp, #1
 8011170:	f1bb 0f03 	cmp.w	fp, #3
 8011174:	d1cb      	bne.n	801110e <_scanf_i+0x5a>
 8011176:	6863      	ldr	r3, [r4, #4]
 8011178:	b90b      	cbnz	r3, 801117e <_scanf_i+0xca>
 801117a:	230a      	movs	r3, #10
 801117c:	6063      	str	r3, [r4, #4]
 801117e:	6863      	ldr	r3, [r4, #4]
 8011180:	4945      	ldr	r1, [pc, #276]	@ (8011298 <_scanf_i+0x1e4>)
 8011182:	6960      	ldr	r0, [r4, #20]
 8011184:	1ac9      	subs	r1, r1, r3
 8011186:	f000 f889 	bl	801129c <__sccl>
 801118a:	f04f 0b00 	mov.w	fp, #0
 801118e:	68a3      	ldr	r3, [r4, #8]
 8011190:	6822      	ldr	r2, [r4, #0]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d03d      	beq.n	8011212 <_scanf_i+0x15e>
 8011196:	6831      	ldr	r1, [r6, #0]
 8011198:	6960      	ldr	r0, [r4, #20]
 801119a:	f891 c000 	ldrb.w	ip, [r1]
 801119e:	f810 000c 	ldrb.w	r0, [r0, ip]
 80111a2:	2800      	cmp	r0, #0
 80111a4:	d035      	beq.n	8011212 <_scanf_i+0x15e>
 80111a6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80111aa:	d124      	bne.n	80111f6 <_scanf_i+0x142>
 80111ac:	0510      	lsls	r0, r2, #20
 80111ae:	d522      	bpl.n	80111f6 <_scanf_i+0x142>
 80111b0:	f10b 0b01 	add.w	fp, fp, #1
 80111b4:	f1b9 0f00 	cmp.w	r9, #0
 80111b8:	d003      	beq.n	80111c2 <_scanf_i+0x10e>
 80111ba:	3301      	adds	r3, #1
 80111bc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80111c0:	60a3      	str	r3, [r4, #8]
 80111c2:	6873      	ldr	r3, [r6, #4]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	6073      	str	r3, [r6, #4]
 80111ca:	dd1b      	ble.n	8011204 <_scanf_i+0x150>
 80111cc:	6833      	ldr	r3, [r6, #0]
 80111ce:	3301      	adds	r3, #1
 80111d0:	6033      	str	r3, [r6, #0]
 80111d2:	68a3      	ldr	r3, [r4, #8]
 80111d4:	3b01      	subs	r3, #1
 80111d6:	60a3      	str	r3, [r4, #8]
 80111d8:	e7d9      	b.n	801118e <_scanf_i+0xda>
 80111da:	f1bb 0f02 	cmp.w	fp, #2
 80111de:	d1ae      	bne.n	801113e <_scanf_i+0x8a>
 80111e0:	6822      	ldr	r2, [r4, #0]
 80111e2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80111e6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80111ea:	d1bf      	bne.n	801116c <_scanf_i+0xb8>
 80111ec:	2110      	movs	r1, #16
 80111ee:	6061      	str	r1, [r4, #4]
 80111f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80111f4:	e7a2      	b.n	801113c <_scanf_i+0x88>
 80111f6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80111fa:	6022      	str	r2, [r4, #0]
 80111fc:	780b      	ldrb	r3, [r1, #0]
 80111fe:	f805 3b01 	strb.w	r3, [r5], #1
 8011202:	e7de      	b.n	80111c2 <_scanf_i+0x10e>
 8011204:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011208:	4631      	mov	r1, r6
 801120a:	4650      	mov	r0, sl
 801120c:	4798      	blx	r3
 801120e:	2800      	cmp	r0, #0
 8011210:	d0df      	beq.n	80111d2 <_scanf_i+0x11e>
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	05d9      	lsls	r1, r3, #23
 8011216:	d50d      	bpl.n	8011234 <_scanf_i+0x180>
 8011218:	42bd      	cmp	r5, r7
 801121a:	d909      	bls.n	8011230 <_scanf_i+0x17c>
 801121c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011220:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011224:	4632      	mov	r2, r6
 8011226:	4650      	mov	r0, sl
 8011228:	4798      	blx	r3
 801122a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 801122e:	464d      	mov	r5, r9
 8011230:	42bd      	cmp	r5, r7
 8011232:	d028      	beq.n	8011286 <_scanf_i+0x1d2>
 8011234:	6822      	ldr	r2, [r4, #0]
 8011236:	f012 0210 	ands.w	r2, r2, #16
 801123a:	d113      	bne.n	8011264 <_scanf_i+0x1b0>
 801123c:	702a      	strb	r2, [r5, #0]
 801123e:	6863      	ldr	r3, [r4, #4]
 8011240:	9e01      	ldr	r6, [sp, #4]
 8011242:	4639      	mov	r1, r7
 8011244:	4650      	mov	r0, sl
 8011246:	47b0      	blx	r6
 8011248:	f8d8 3000 	ldr.w	r3, [r8]
 801124c:	6821      	ldr	r1, [r4, #0]
 801124e:	1d1a      	adds	r2, r3, #4
 8011250:	f8c8 2000 	str.w	r2, [r8]
 8011254:	f011 0f20 	tst.w	r1, #32
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	d00f      	beq.n	801127c <_scanf_i+0x1c8>
 801125c:	6018      	str	r0, [r3, #0]
 801125e:	68e3      	ldr	r3, [r4, #12]
 8011260:	3301      	adds	r3, #1
 8011262:	60e3      	str	r3, [r4, #12]
 8011264:	6923      	ldr	r3, [r4, #16]
 8011266:	1bed      	subs	r5, r5, r7
 8011268:	445d      	add	r5, fp
 801126a:	442b      	add	r3, r5
 801126c:	6123      	str	r3, [r4, #16]
 801126e:	2000      	movs	r0, #0
 8011270:	b007      	add	sp, #28
 8011272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011276:	f04f 0b00 	mov.w	fp, #0
 801127a:	e7ca      	b.n	8011212 <_scanf_i+0x15e>
 801127c:	07ca      	lsls	r2, r1, #31
 801127e:	bf4c      	ite	mi
 8011280:	8018      	strhmi	r0, [r3, #0]
 8011282:	6018      	strpl	r0, [r3, #0]
 8011284:	e7eb      	b.n	801125e <_scanf_i+0x1aa>
 8011286:	2001      	movs	r0, #1
 8011288:	e7f2      	b.n	8011270 <_scanf_i+0x1bc>
 801128a:	bf00      	nop
 801128c:	08012a3c 	.word	0x08012a3c
 8011290:	0800f185 	.word	0x0800f185
 8011294:	08011f75 	.word	0x08011f75
 8011298:	08012d37 	.word	0x08012d37

0801129c <__sccl>:
 801129c:	b570      	push	{r4, r5, r6, lr}
 801129e:	780b      	ldrb	r3, [r1, #0]
 80112a0:	4604      	mov	r4, r0
 80112a2:	2b5e      	cmp	r3, #94	@ 0x5e
 80112a4:	bf0b      	itete	eq
 80112a6:	784b      	ldrbeq	r3, [r1, #1]
 80112a8:	1c4a      	addne	r2, r1, #1
 80112aa:	1c8a      	addeq	r2, r1, #2
 80112ac:	2100      	movne	r1, #0
 80112ae:	bf08      	it	eq
 80112b0:	2101      	moveq	r1, #1
 80112b2:	3801      	subs	r0, #1
 80112b4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80112b8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80112bc:	42a8      	cmp	r0, r5
 80112be:	d1fb      	bne.n	80112b8 <__sccl+0x1c>
 80112c0:	b90b      	cbnz	r3, 80112c6 <__sccl+0x2a>
 80112c2:	1e50      	subs	r0, r2, #1
 80112c4:	bd70      	pop	{r4, r5, r6, pc}
 80112c6:	f081 0101 	eor.w	r1, r1, #1
 80112ca:	54e1      	strb	r1, [r4, r3]
 80112cc:	4610      	mov	r0, r2
 80112ce:	4602      	mov	r2, r0
 80112d0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80112d4:	2d2d      	cmp	r5, #45	@ 0x2d
 80112d6:	d005      	beq.n	80112e4 <__sccl+0x48>
 80112d8:	2d5d      	cmp	r5, #93	@ 0x5d
 80112da:	d016      	beq.n	801130a <__sccl+0x6e>
 80112dc:	2d00      	cmp	r5, #0
 80112de:	d0f1      	beq.n	80112c4 <__sccl+0x28>
 80112e0:	462b      	mov	r3, r5
 80112e2:	e7f2      	b.n	80112ca <__sccl+0x2e>
 80112e4:	7846      	ldrb	r6, [r0, #1]
 80112e6:	2e5d      	cmp	r6, #93	@ 0x5d
 80112e8:	d0fa      	beq.n	80112e0 <__sccl+0x44>
 80112ea:	42b3      	cmp	r3, r6
 80112ec:	dcf8      	bgt.n	80112e0 <__sccl+0x44>
 80112ee:	3002      	adds	r0, #2
 80112f0:	461a      	mov	r2, r3
 80112f2:	3201      	adds	r2, #1
 80112f4:	4296      	cmp	r6, r2
 80112f6:	54a1      	strb	r1, [r4, r2]
 80112f8:	dcfb      	bgt.n	80112f2 <__sccl+0x56>
 80112fa:	1af2      	subs	r2, r6, r3
 80112fc:	3a01      	subs	r2, #1
 80112fe:	1c5d      	adds	r5, r3, #1
 8011300:	42b3      	cmp	r3, r6
 8011302:	bfa8      	it	ge
 8011304:	2200      	movge	r2, #0
 8011306:	18ab      	adds	r3, r5, r2
 8011308:	e7e1      	b.n	80112ce <__sccl+0x32>
 801130a:	4610      	mov	r0, r2
 801130c:	e7da      	b.n	80112c4 <__sccl+0x28>
	...

08011310 <__sflush_r>:
 8011310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011318:	0716      	lsls	r6, r2, #28
 801131a:	4605      	mov	r5, r0
 801131c:	460c      	mov	r4, r1
 801131e:	d454      	bmi.n	80113ca <__sflush_r+0xba>
 8011320:	684b      	ldr	r3, [r1, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	dc02      	bgt.n	801132c <__sflush_r+0x1c>
 8011326:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011328:	2b00      	cmp	r3, #0
 801132a:	dd48      	ble.n	80113be <__sflush_r+0xae>
 801132c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801132e:	2e00      	cmp	r6, #0
 8011330:	d045      	beq.n	80113be <__sflush_r+0xae>
 8011332:	2300      	movs	r3, #0
 8011334:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011338:	682f      	ldr	r7, [r5, #0]
 801133a:	6a21      	ldr	r1, [r4, #32]
 801133c:	602b      	str	r3, [r5, #0]
 801133e:	d030      	beq.n	80113a2 <__sflush_r+0x92>
 8011340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011342:	89a3      	ldrh	r3, [r4, #12]
 8011344:	0759      	lsls	r1, r3, #29
 8011346:	d505      	bpl.n	8011354 <__sflush_r+0x44>
 8011348:	6863      	ldr	r3, [r4, #4]
 801134a:	1ad2      	subs	r2, r2, r3
 801134c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801134e:	b10b      	cbz	r3, 8011354 <__sflush_r+0x44>
 8011350:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011352:	1ad2      	subs	r2, r2, r3
 8011354:	2300      	movs	r3, #0
 8011356:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011358:	6a21      	ldr	r1, [r4, #32]
 801135a:	4628      	mov	r0, r5
 801135c:	47b0      	blx	r6
 801135e:	1c43      	adds	r3, r0, #1
 8011360:	89a3      	ldrh	r3, [r4, #12]
 8011362:	d106      	bne.n	8011372 <__sflush_r+0x62>
 8011364:	6829      	ldr	r1, [r5, #0]
 8011366:	291d      	cmp	r1, #29
 8011368:	d82b      	bhi.n	80113c2 <__sflush_r+0xb2>
 801136a:	4a2a      	ldr	r2, [pc, #168]	@ (8011414 <__sflush_r+0x104>)
 801136c:	410a      	asrs	r2, r1
 801136e:	07d6      	lsls	r6, r2, #31
 8011370:	d427      	bmi.n	80113c2 <__sflush_r+0xb2>
 8011372:	2200      	movs	r2, #0
 8011374:	6062      	str	r2, [r4, #4]
 8011376:	04d9      	lsls	r1, r3, #19
 8011378:	6922      	ldr	r2, [r4, #16]
 801137a:	6022      	str	r2, [r4, #0]
 801137c:	d504      	bpl.n	8011388 <__sflush_r+0x78>
 801137e:	1c42      	adds	r2, r0, #1
 8011380:	d101      	bne.n	8011386 <__sflush_r+0x76>
 8011382:	682b      	ldr	r3, [r5, #0]
 8011384:	b903      	cbnz	r3, 8011388 <__sflush_r+0x78>
 8011386:	6560      	str	r0, [r4, #84]	@ 0x54
 8011388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801138a:	602f      	str	r7, [r5, #0]
 801138c:	b1b9      	cbz	r1, 80113be <__sflush_r+0xae>
 801138e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011392:	4299      	cmp	r1, r3
 8011394:	d002      	beq.n	801139c <__sflush_r+0x8c>
 8011396:	4628      	mov	r0, r5
 8011398:	f7fe fe38 	bl	801000c <_free_r>
 801139c:	2300      	movs	r3, #0
 801139e:	6363      	str	r3, [r4, #52]	@ 0x34
 80113a0:	e00d      	b.n	80113be <__sflush_r+0xae>
 80113a2:	2301      	movs	r3, #1
 80113a4:	4628      	mov	r0, r5
 80113a6:	47b0      	blx	r6
 80113a8:	4602      	mov	r2, r0
 80113aa:	1c50      	adds	r0, r2, #1
 80113ac:	d1c9      	bne.n	8011342 <__sflush_r+0x32>
 80113ae:	682b      	ldr	r3, [r5, #0]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d0c6      	beq.n	8011342 <__sflush_r+0x32>
 80113b4:	2b1d      	cmp	r3, #29
 80113b6:	d001      	beq.n	80113bc <__sflush_r+0xac>
 80113b8:	2b16      	cmp	r3, #22
 80113ba:	d11e      	bne.n	80113fa <__sflush_r+0xea>
 80113bc:	602f      	str	r7, [r5, #0]
 80113be:	2000      	movs	r0, #0
 80113c0:	e022      	b.n	8011408 <__sflush_r+0xf8>
 80113c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113c6:	b21b      	sxth	r3, r3
 80113c8:	e01b      	b.n	8011402 <__sflush_r+0xf2>
 80113ca:	690f      	ldr	r7, [r1, #16]
 80113cc:	2f00      	cmp	r7, #0
 80113ce:	d0f6      	beq.n	80113be <__sflush_r+0xae>
 80113d0:	0793      	lsls	r3, r2, #30
 80113d2:	680e      	ldr	r6, [r1, #0]
 80113d4:	bf08      	it	eq
 80113d6:	694b      	ldreq	r3, [r1, #20]
 80113d8:	600f      	str	r7, [r1, #0]
 80113da:	bf18      	it	ne
 80113dc:	2300      	movne	r3, #0
 80113de:	eba6 0807 	sub.w	r8, r6, r7
 80113e2:	608b      	str	r3, [r1, #8]
 80113e4:	f1b8 0f00 	cmp.w	r8, #0
 80113e8:	dde9      	ble.n	80113be <__sflush_r+0xae>
 80113ea:	6a21      	ldr	r1, [r4, #32]
 80113ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80113ee:	4643      	mov	r3, r8
 80113f0:	463a      	mov	r2, r7
 80113f2:	4628      	mov	r0, r5
 80113f4:	47b0      	blx	r6
 80113f6:	2800      	cmp	r0, #0
 80113f8:	dc08      	bgt.n	801140c <__sflush_r+0xfc>
 80113fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011402:	81a3      	strh	r3, [r4, #12]
 8011404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801140c:	4407      	add	r7, r0
 801140e:	eba8 0800 	sub.w	r8, r8, r0
 8011412:	e7e7      	b.n	80113e4 <__sflush_r+0xd4>
 8011414:	dfbffffe 	.word	0xdfbffffe

08011418 <_fflush_r>:
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	690b      	ldr	r3, [r1, #16]
 801141c:	4605      	mov	r5, r0
 801141e:	460c      	mov	r4, r1
 8011420:	b913      	cbnz	r3, 8011428 <_fflush_r+0x10>
 8011422:	2500      	movs	r5, #0
 8011424:	4628      	mov	r0, r5
 8011426:	bd38      	pop	{r3, r4, r5, pc}
 8011428:	b118      	cbz	r0, 8011432 <_fflush_r+0x1a>
 801142a:	6a03      	ldr	r3, [r0, #32]
 801142c:	b90b      	cbnz	r3, 8011432 <_fflush_r+0x1a>
 801142e:	f7fd f861 	bl	800e4f4 <__sinit>
 8011432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d0f3      	beq.n	8011422 <_fflush_r+0xa>
 801143a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801143c:	07d0      	lsls	r0, r2, #31
 801143e:	d404      	bmi.n	801144a <_fflush_r+0x32>
 8011440:	0599      	lsls	r1, r3, #22
 8011442:	d402      	bmi.n	801144a <_fflush_r+0x32>
 8011444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011446:	f7fd ffe2 	bl	800f40e <__retarget_lock_acquire_recursive>
 801144a:	4628      	mov	r0, r5
 801144c:	4621      	mov	r1, r4
 801144e:	f7ff ff5f 	bl	8011310 <__sflush_r>
 8011452:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011454:	07da      	lsls	r2, r3, #31
 8011456:	4605      	mov	r5, r0
 8011458:	d4e4      	bmi.n	8011424 <_fflush_r+0xc>
 801145a:	89a3      	ldrh	r3, [r4, #12]
 801145c:	059b      	lsls	r3, r3, #22
 801145e:	d4e1      	bmi.n	8011424 <_fflush_r+0xc>
 8011460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011462:	f7fd ffd5 	bl	800f410 <__retarget_lock_release_recursive>
 8011466:	e7dd      	b.n	8011424 <_fflush_r+0xc>

08011468 <_Balloc>:
 8011468:	b570      	push	{r4, r5, r6, lr}
 801146a:	69c6      	ldr	r6, [r0, #28]
 801146c:	4604      	mov	r4, r0
 801146e:	460d      	mov	r5, r1
 8011470:	b976      	cbnz	r6, 8011490 <_Balloc+0x28>
 8011472:	2010      	movs	r0, #16
 8011474:	f7fc fad2 	bl	800da1c <malloc>
 8011478:	4602      	mov	r2, r0
 801147a:	61e0      	str	r0, [r4, #28]
 801147c:	b920      	cbnz	r0, 8011488 <_Balloc+0x20>
 801147e:	4b18      	ldr	r3, [pc, #96]	@ (80114e0 <_Balloc+0x78>)
 8011480:	4818      	ldr	r0, [pc, #96]	@ (80114e4 <_Balloc+0x7c>)
 8011482:	216b      	movs	r1, #107	@ 0x6b
 8011484:	f000 feb8 	bl	80121f8 <__assert_func>
 8011488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801148c:	6006      	str	r6, [r0, #0]
 801148e:	60c6      	str	r6, [r0, #12]
 8011490:	69e6      	ldr	r6, [r4, #28]
 8011492:	68f3      	ldr	r3, [r6, #12]
 8011494:	b183      	cbz	r3, 80114b8 <_Balloc+0x50>
 8011496:	69e3      	ldr	r3, [r4, #28]
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801149e:	b9b8      	cbnz	r0, 80114d0 <_Balloc+0x68>
 80114a0:	2101      	movs	r1, #1
 80114a2:	fa01 f605 	lsl.w	r6, r1, r5
 80114a6:	1d72      	adds	r2, r6, #5
 80114a8:	0092      	lsls	r2, r2, #2
 80114aa:	4620      	mov	r0, r4
 80114ac:	f000 fec2 	bl	8012234 <_calloc_r>
 80114b0:	b160      	cbz	r0, 80114cc <_Balloc+0x64>
 80114b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114b6:	e00e      	b.n	80114d6 <_Balloc+0x6e>
 80114b8:	2221      	movs	r2, #33	@ 0x21
 80114ba:	2104      	movs	r1, #4
 80114bc:	4620      	mov	r0, r4
 80114be:	f000 feb9 	bl	8012234 <_calloc_r>
 80114c2:	69e3      	ldr	r3, [r4, #28]
 80114c4:	60f0      	str	r0, [r6, #12]
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d1e4      	bne.n	8011496 <_Balloc+0x2e>
 80114cc:	2000      	movs	r0, #0
 80114ce:	bd70      	pop	{r4, r5, r6, pc}
 80114d0:	6802      	ldr	r2, [r0, #0]
 80114d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114d6:	2300      	movs	r3, #0
 80114d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80114dc:	e7f7      	b.n	80114ce <_Balloc+0x66>
 80114de:	bf00      	nop
 80114e0:	08012c36 	.word	0x08012c36
 80114e4:	08012d42 	.word	0x08012d42

080114e8 <_Bfree>:
 80114e8:	b570      	push	{r4, r5, r6, lr}
 80114ea:	69c6      	ldr	r6, [r0, #28]
 80114ec:	4605      	mov	r5, r0
 80114ee:	460c      	mov	r4, r1
 80114f0:	b976      	cbnz	r6, 8011510 <_Bfree+0x28>
 80114f2:	2010      	movs	r0, #16
 80114f4:	f7fc fa92 	bl	800da1c <malloc>
 80114f8:	4602      	mov	r2, r0
 80114fa:	61e8      	str	r0, [r5, #28]
 80114fc:	b920      	cbnz	r0, 8011508 <_Bfree+0x20>
 80114fe:	4b09      	ldr	r3, [pc, #36]	@ (8011524 <_Bfree+0x3c>)
 8011500:	4809      	ldr	r0, [pc, #36]	@ (8011528 <_Bfree+0x40>)
 8011502:	218f      	movs	r1, #143	@ 0x8f
 8011504:	f000 fe78 	bl	80121f8 <__assert_func>
 8011508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801150c:	6006      	str	r6, [r0, #0]
 801150e:	60c6      	str	r6, [r0, #12]
 8011510:	b13c      	cbz	r4, 8011522 <_Bfree+0x3a>
 8011512:	69eb      	ldr	r3, [r5, #28]
 8011514:	6862      	ldr	r2, [r4, #4]
 8011516:	68db      	ldr	r3, [r3, #12]
 8011518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801151c:	6021      	str	r1, [r4, #0]
 801151e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011522:	bd70      	pop	{r4, r5, r6, pc}
 8011524:	08012c36 	.word	0x08012c36
 8011528:	08012d42 	.word	0x08012d42

0801152c <__multadd>:
 801152c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011530:	690d      	ldr	r5, [r1, #16]
 8011532:	4607      	mov	r7, r0
 8011534:	460c      	mov	r4, r1
 8011536:	461e      	mov	r6, r3
 8011538:	f101 0c14 	add.w	ip, r1, #20
 801153c:	2000      	movs	r0, #0
 801153e:	f8dc 3000 	ldr.w	r3, [ip]
 8011542:	b299      	uxth	r1, r3
 8011544:	fb02 6101 	mla	r1, r2, r1, r6
 8011548:	0c1e      	lsrs	r6, r3, #16
 801154a:	0c0b      	lsrs	r3, r1, #16
 801154c:	fb02 3306 	mla	r3, r2, r6, r3
 8011550:	b289      	uxth	r1, r1
 8011552:	3001      	adds	r0, #1
 8011554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011558:	4285      	cmp	r5, r0
 801155a:	f84c 1b04 	str.w	r1, [ip], #4
 801155e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011562:	dcec      	bgt.n	801153e <__multadd+0x12>
 8011564:	b30e      	cbz	r6, 80115aa <__multadd+0x7e>
 8011566:	68a3      	ldr	r3, [r4, #8]
 8011568:	42ab      	cmp	r3, r5
 801156a:	dc19      	bgt.n	80115a0 <__multadd+0x74>
 801156c:	6861      	ldr	r1, [r4, #4]
 801156e:	4638      	mov	r0, r7
 8011570:	3101      	adds	r1, #1
 8011572:	f7ff ff79 	bl	8011468 <_Balloc>
 8011576:	4680      	mov	r8, r0
 8011578:	b928      	cbnz	r0, 8011586 <__multadd+0x5a>
 801157a:	4602      	mov	r2, r0
 801157c:	4b0c      	ldr	r3, [pc, #48]	@ (80115b0 <__multadd+0x84>)
 801157e:	480d      	ldr	r0, [pc, #52]	@ (80115b4 <__multadd+0x88>)
 8011580:	21ba      	movs	r1, #186	@ 0xba
 8011582:	f000 fe39 	bl	80121f8 <__assert_func>
 8011586:	6922      	ldr	r2, [r4, #16]
 8011588:	3202      	adds	r2, #2
 801158a:	f104 010c 	add.w	r1, r4, #12
 801158e:	0092      	lsls	r2, r2, #2
 8011590:	300c      	adds	r0, #12
 8011592:	f7fd ff3e 	bl	800f412 <memcpy>
 8011596:	4621      	mov	r1, r4
 8011598:	4638      	mov	r0, r7
 801159a:	f7ff ffa5 	bl	80114e8 <_Bfree>
 801159e:	4644      	mov	r4, r8
 80115a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115a4:	3501      	adds	r5, #1
 80115a6:	615e      	str	r6, [r3, #20]
 80115a8:	6125      	str	r5, [r4, #16]
 80115aa:	4620      	mov	r0, r4
 80115ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b0:	08012ca5 	.word	0x08012ca5
 80115b4:	08012d42 	.word	0x08012d42

080115b8 <__s2b>:
 80115b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115bc:	460c      	mov	r4, r1
 80115be:	4615      	mov	r5, r2
 80115c0:	461f      	mov	r7, r3
 80115c2:	2209      	movs	r2, #9
 80115c4:	3308      	adds	r3, #8
 80115c6:	4606      	mov	r6, r0
 80115c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80115cc:	2100      	movs	r1, #0
 80115ce:	2201      	movs	r2, #1
 80115d0:	429a      	cmp	r2, r3
 80115d2:	db09      	blt.n	80115e8 <__s2b+0x30>
 80115d4:	4630      	mov	r0, r6
 80115d6:	f7ff ff47 	bl	8011468 <_Balloc>
 80115da:	b940      	cbnz	r0, 80115ee <__s2b+0x36>
 80115dc:	4602      	mov	r2, r0
 80115de:	4b19      	ldr	r3, [pc, #100]	@ (8011644 <__s2b+0x8c>)
 80115e0:	4819      	ldr	r0, [pc, #100]	@ (8011648 <__s2b+0x90>)
 80115e2:	21d3      	movs	r1, #211	@ 0xd3
 80115e4:	f000 fe08 	bl	80121f8 <__assert_func>
 80115e8:	0052      	lsls	r2, r2, #1
 80115ea:	3101      	adds	r1, #1
 80115ec:	e7f0      	b.n	80115d0 <__s2b+0x18>
 80115ee:	9b08      	ldr	r3, [sp, #32]
 80115f0:	6143      	str	r3, [r0, #20]
 80115f2:	2d09      	cmp	r5, #9
 80115f4:	f04f 0301 	mov.w	r3, #1
 80115f8:	6103      	str	r3, [r0, #16]
 80115fa:	dd16      	ble.n	801162a <__s2b+0x72>
 80115fc:	f104 0909 	add.w	r9, r4, #9
 8011600:	46c8      	mov	r8, r9
 8011602:	442c      	add	r4, r5
 8011604:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011608:	4601      	mov	r1, r0
 801160a:	3b30      	subs	r3, #48	@ 0x30
 801160c:	220a      	movs	r2, #10
 801160e:	4630      	mov	r0, r6
 8011610:	f7ff ff8c 	bl	801152c <__multadd>
 8011614:	45a0      	cmp	r8, r4
 8011616:	d1f5      	bne.n	8011604 <__s2b+0x4c>
 8011618:	f1a5 0408 	sub.w	r4, r5, #8
 801161c:	444c      	add	r4, r9
 801161e:	1b2d      	subs	r5, r5, r4
 8011620:	1963      	adds	r3, r4, r5
 8011622:	42bb      	cmp	r3, r7
 8011624:	db04      	blt.n	8011630 <__s2b+0x78>
 8011626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801162a:	340a      	adds	r4, #10
 801162c:	2509      	movs	r5, #9
 801162e:	e7f6      	b.n	801161e <__s2b+0x66>
 8011630:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011634:	4601      	mov	r1, r0
 8011636:	3b30      	subs	r3, #48	@ 0x30
 8011638:	220a      	movs	r2, #10
 801163a:	4630      	mov	r0, r6
 801163c:	f7ff ff76 	bl	801152c <__multadd>
 8011640:	e7ee      	b.n	8011620 <__s2b+0x68>
 8011642:	bf00      	nop
 8011644:	08012ca5 	.word	0x08012ca5
 8011648:	08012d42 	.word	0x08012d42

0801164c <__hi0bits>:
 801164c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011650:	4603      	mov	r3, r0
 8011652:	bf36      	itet	cc
 8011654:	0403      	lslcc	r3, r0, #16
 8011656:	2000      	movcs	r0, #0
 8011658:	2010      	movcc	r0, #16
 801165a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801165e:	bf3c      	itt	cc
 8011660:	021b      	lslcc	r3, r3, #8
 8011662:	3008      	addcc	r0, #8
 8011664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011668:	bf3c      	itt	cc
 801166a:	011b      	lslcc	r3, r3, #4
 801166c:	3004      	addcc	r0, #4
 801166e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011672:	bf3c      	itt	cc
 8011674:	009b      	lslcc	r3, r3, #2
 8011676:	3002      	addcc	r0, #2
 8011678:	2b00      	cmp	r3, #0
 801167a:	db05      	blt.n	8011688 <__hi0bits+0x3c>
 801167c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011680:	f100 0001 	add.w	r0, r0, #1
 8011684:	bf08      	it	eq
 8011686:	2020      	moveq	r0, #32
 8011688:	4770      	bx	lr

0801168a <__lo0bits>:
 801168a:	6803      	ldr	r3, [r0, #0]
 801168c:	4602      	mov	r2, r0
 801168e:	f013 0007 	ands.w	r0, r3, #7
 8011692:	d00b      	beq.n	80116ac <__lo0bits+0x22>
 8011694:	07d9      	lsls	r1, r3, #31
 8011696:	d421      	bmi.n	80116dc <__lo0bits+0x52>
 8011698:	0798      	lsls	r0, r3, #30
 801169a:	bf49      	itett	mi
 801169c:	085b      	lsrmi	r3, r3, #1
 801169e:	089b      	lsrpl	r3, r3, #2
 80116a0:	2001      	movmi	r0, #1
 80116a2:	6013      	strmi	r3, [r2, #0]
 80116a4:	bf5c      	itt	pl
 80116a6:	6013      	strpl	r3, [r2, #0]
 80116a8:	2002      	movpl	r0, #2
 80116aa:	4770      	bx	lr
 80116ac:	b299      	uxth	r1, r3
 80116ae:	b909      	cbnz	r1, 80116b4 <__lo0bits+0x2a>
 80116b0:	0c1b      	lsrs	r3, r3, #16
 80116b2:	2010      	movs	r0, #16
 80116b4:	b2d9      	uxtb	r1, r3
 80116b6:	b909      	cbnz	r1, 80116bc <__lo0bits+0x32>
 80116b8:	3008      	adds	r0, #8
 80116ba:	0a1b      	lsrs	r3, r3, #8
 80116bc:	0719      	lsls	r1, r3, #28
 80116be:	bf04      	itt	eq
 80116c0:	091b      	lsreq	r3, r3, #4
 80116c2:	3004      	addeq	r0, #4
 80116c4:	0799      	lsls	r1, r3, #30
 80116c6:	bf04      	itt	eq
 80116c8:	089b      	lsreq	r3, r3, #2
 80116ca:	3002      	addeq	r0, #2
 80116cc:	07d9      	lsls	r1, r3, #31
 80116ce:	d403      	bmi.n	80116d8 <__lo0bits+0x4e>
 80116d0:	085b      	lsrs	r3, r3, #1
 80116d2:	f100 0001 	add.w	r0, r0, #1
 80116d6:	d003      	beq.n	80116e0 <__lo0bits+0x56>
 80116d8:	6013      	str	r3, [r2, #0]
 80116da:	4770      	bx	lr
 80116dc:	2000      	movs	r0, #0
 80116de:	4770      	bx	lr
 80116e0:	2020      	movs	r0, #32
 80116e2:	4770      	bx	lr

080116e4 <__i2b>:
 80116e4:	b510      	push	{r4, lr}
 80116e6:	460c      	mov	r4, r1
 80116e8:	2101      	movs	r1, #1
 80116ea:	f7ff febd 	bl	8011468 <_Balloc>
 80116ee:	4602      	mov	r2, r0
 80116f0:	b928      	cbnz	r0, 80116fe <__i2b+0x1a>
 80116f2:	4b05      	ldr	r3, [pc, #20]	@ (8011708 <__i2b+0x24>)
 80116f4:	4805      	ldr	r0, [pc, #20]	@ (801170c <__i2b+0x28>)
 80116f6:	f240 1145 	movw	r1, #325	@ 0x145
 80116fa:	f000 fd7d 	bl	80121f8 <__assert_func>
 80116fe:	2301      	movs	r3, #1
 8011700:	6144      	str	r4, [r0, #20]
 8011702:	6103      	str	r3, [r0, #16]
 8011704:	bd10      	pop	{r4, pc}
 8011706:	bf00      	nop
 8011708:	08012ca5 	.word	0x08012ca5
 801170c:	08012d42 	.word	0x08012d42

08011710 <__multiply>:
 8011710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011714:	4614      	mov	r4, r2
 8011716:	690a      	ldr	r2, [r1, #16]
 8011718:	6923      	ldr	r3, [r4, #16]
 801171a:	429a      	cmp	r2, r3
 801171c:	bfa8      	it	ge
 801171e:	4623      	movge	r3, r4
 8011720:	460f      	mov	r7, r1
 8011722:	bfa4      	itt	ge
 8011724:	460c      	movge	r4, r1
 8011726:	461f      	movge	r7, r3
 8011728:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801172c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011730:	68a3      	ldr	r3, [r4, #8]
 8011732:	6861      	ldr	r1, [r4, #4]
 8011734:	eb0a 0609 	add.w	r6, sl, r9
 8011738:	42b3      	cmp	r3, r6
 801173a:	b085      	sub	sp, #20
 801173c:	bfb8      	it	lt
 801173e:	3101      	addlt	r1, #1
 8011740:	f7ff fe92 	bl	8011468 <_Balloc>
 8011744:	b930      	cbnz	r0, 8011754 <__multiply+0x44>
 8011746:	4602      	mov	r2, r0
 8011748:	4b44      	ldr	r3, [pc, #272]	@ (801185c <__multiply+0x14c>)
 801174a:	4845      	ldr	r0, [pc, #276]	@ (8011860 <__multiply+0x150>)
 801174c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011750:	f000 fd52 	bl	80121f8 <__assert_func>
 8011754:	f100 0514 	add.w	r5, r0, #20
 8011758:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801175c:	462b      	mov	r3, r5
 801175e:	2200      	movs	r2, #0
 8011760:	4543      	cmp	r3, r8
 8011762:	d321      	bcc.n	80117a8 <__multiply+0x98>
 8011764:	f107 0114 	add.w	r1, r7, #20
 8011768:	f104 0214 	add.w	r2, r4, #20
 801176c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011770:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011774:	9302      	str	r3, [sp, #8]
 8011776:	1b13      	subs	r3, r2, r4
 8011778:	3b15      	subs	r3, #21
 801177a:	f023 0303 	bic.w	r3, r3, #3
 801177e:	3304      	adds	r3, #4
 8011780:	f104 0715 	add.w	r7, r4, #21
 8011784:	42ba      	cmp	r2, r7
 8011786:	bf38      	it	cc
 8011788:	2304      	movcc	r3, #4
 801178a:	9301      	str	r3, [sp, #4]
 801178c:	9b02      	ldr	r3, [sp, #8]
 801178e:	9103      	str	r1, [sp, #12]
 8011790:	428b      	cmp	r3, r1
 8011792:	d80c      	bhi.n	80117ae <__multiply+0x9e>
 8011794:	2e00      	cmp	r6, #0
 8011796:	dd03      	ble.n	80117a0 <__multiply+0x90>
 8011798:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801179c:	2b00      	cmp	r3, #0
 801179e:	d05b      	beq.n	8011858 <__multiply+0x148>
 80117a0:	6106      	str	r6, [r0, #16]
 80117a2:	b005      	add	sp, #20
 80117a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a8:	f843 2b04 	str.w	r2, [r3], #4
 80117ac:	e7d8      	b.n	8011760 <__multiply+0x50>
 80117ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80117b2:	f1ba 0f00 	cmp.w	sl, #0
 80117b6:	d024      	beq.n	8011802 <__multiply+0xf2>
 80117b8:	f104 0e14 	add.w	lr, r4, #20
 80117bc:	46a9      	mov	r9, r5
 80117be:	f04f 0c00 	mov.w	ip, #0
 80117c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80117c6:	f8d9 3000 	ldr.w	r3, [r9]
 80117ca:	fa1f fb87 	uxth.w	fp, r7
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80117d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80117d8:	f8d9 7000 	ldr.w	r7, [r9]
 80117dc:	4463      	add	r3, ip
 80117de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80117e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80117e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80117f0:	4572      	cmp	r2, lr
 80117f2:	f849 3b04 	str.w	r3, [r9], #4
 80117f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80117fa:	d8e2      	bhi.n	80117c2 <__multiply+0xb2>
 80117fc:	9b01      	ldr	r3, [sp, #4]
 80117fe:	f845 c003 	str.w	ip, [r5, r3]
 8011802:	9b03      	ldr	r3, [sp, #12]
 8011804:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011808:	3104      	adds	r1, #4
 801180a:	f1b9 0f00 	cmp.w	r9, #0
 801180e:	d021      	beq.n	8011854 <__multiply+0x144>
 8011810:	682b      	ldr	r3, [r5, #0]
 8011812:	f104 0c14 	add.w	ip, r4, #20
 8011816:	46ae      	mov	lr, r5
 8011818:	f04f 0a00 	mov.w	sl, #0
 801181c:	f8bc b000 	ldrh.w	fp, [ip]
 8011820:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011824:	fb09 770b 	mla	r7, r9, fp, r7
 8011828:	4457      	add	r7, sl
 801182a:	b29b      	uxth	r3, r3
 801182c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011830:	f84e 3b04 	str.w	r3, [lr], #4
 8011834:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011838:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801183c:	f8be 3000 	ldrh.w	r3, [lr]
 8011840:	fb09 330a 	mla	r3, r9, sl, r3
 8011844:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011848:	4562      	cmp	r2, ip
 801184a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801184e:	d8e5      	bhi.n	801181c <__multiply+0x10c>
 8011850:	9f01      	ldr	r7, [sp, #4]
 8011852:	51eb      	str	r3, [r5, r7]
 8011854:	3504      	adds	r5, #4
 8011856:	e799      	b.n	801178c <__multiply+0x7c>
 8011858:	3e01      	subs	r6, #1
 801185a:	e79b      	b.n	8011794 <__multiply+0x84>
 801185c:	08012ca5 	.word	0x08012ca5
 8011860:	08012d42 	.word	0x08012d42

08011864 <__pow5mult>:
 8011864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011868:	4615      	mov	r5, r2
 801186a:	f012 0203 	ands.w	r2, r2, #3
 801186e:	4607      	mov	r7, r0
 8011870:	460e      	mov	r6, r1
 8011872:	d007      	beq.n	8011884 <__pow5mult+0x20>
 8011874:	4c25      	ldr	r4, [pc, #148]	@ (801190c <__pow5mult+0xa8>)
 8011876:	3a01      	subs	r2, #1
 8011878:	2300      	movs	r3, #0
 801187a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801187e:	f7ff fe55 	bl	801152c <__multadd>
 8011882:	4606      	mov	r6, r0
 8011884:	10ad      	asrs	r5, r5, #2
 8011886:	d03d      	beq.n	8011904 <__pow5mult+0xa0>
 8011888:	69fc      	ldr	r4, [r7, #28]
 801188a:	b97c      	cbnz	r4, 80118ac <__pow5mult+0x48>
 801188c:	2010      	movs	r0, #16
 801188e:	f7fc f8c5 	bl	800da1c <malloc>
 8011892:	4602      	mov	r2, r0
 8011894:	61f8      	str	r0, [r7, #28]
 8011896:	b928      	cbnz	r0, 80118a4 <__pow5mult+0x40>
 8011898:	4b1d      	ldr	r3, [pc, #116]	@ (8011910 <__pow5mult+0xac>)
 801189a:	481e      	ldr	r0, [pc, #120]	@ (8011914 <__pow5mult+0xb0>)
 801189c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80118a0:	f000 fcaa 	bl	80121f8 <__assert_func>
 80118a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118a8:	6004      	str	r4, [r0, #0]
 80118aa:	60c4      	str	r4, [r0, #12]
 80118ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80118b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118b4:	b94c      	cbnz	r4, 80118ca <__pow5mult+0x66>
 80118b6:	f240 2171 	movw	r1, #625	@ 0x271
 80118ba:	4638      	mov	r0, r7
 80118bc:	f7ff ff12 	bl	80116e4 <__i2b>
 80118c0:	2300      	movs	r3, #0
 80118c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80118c6:	4604      	mov	r4, r0
 80118c8:	6003      	str	r3, [r0, #0]
 80118ca:	f04f 0900 	mov.w	r9, #0
 80118ce:	07eb      	lsls	r3, r5, #31
 80118d0:	d50a      	bpl.n	80118e8 <__pow5mult+0x84>
 80118d2:	4631      	mov	r1, r6
 80118d4:	4622      	mov	r2, r4
 80118d6:	4638      	mov	r0, r7
 80118d8:	f7ff ff1a 	bl	8011710 <__multiply>
 80118dc:	4631      	mov	r1, r6
 80118de:	4680      	mov	r8, r0
 80118e0:	4638      	mov	r0, r7
 80118e2:	f7ff fe01 	bl	80114e8 <_Bfree>
 80118e6:	4646      	mov	r6, r8
 80118e8:	106d      	asrs	r5, r5, #1
 80118ea:	d00b      	beq.n	8011904 <__pow5mult+0xa0>
 80118ec:	6820      	ldr	r0, [r4, #0]
 80118ee:	b938      	cbnz	r0, 8011900 <__pow5mult+0x9c>
 80118f0:	4622      	mov	r2, r4
 80118f2:	4621      	mov	r1, r4
 80118f4:	4638      	mov	r0, r7
 80118f6:	f7ff ff0b 	bl	8011710 <__multiply>
 80118fa:	6020      	str	r0, [r4, #0]
 80118fc:	f8c0 9000 	str.w	r9, [r0]
 8011900:	4604      	mov	r4, r0
 8011902:	e7e4      	b.n	80118ce <__pow5mult+0x6a>
 8011904:	4630      	mov	r0, r6
 8011906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801190a:	bf00      	nop
 801190c:	08012d9c 	.word	0x08012d9c
 8011910:	08012c36 	.word	0x08012c36
 8011914:	08012d42 	.word	0x08012d42

08011918 <__lshift>:
 8011918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801191c:	460c      	mov	r4, r1
 801191e:	6849      	ldr	r1, [r1, #4]
 8011920:	6923      	ldr	r3, [r4, #16]
 8011922:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011926:	68a3      	ldr	r3, [r4, #8]
 8011928:	4607      	mov	r7, r0
 801192a:	4691      	mov	r9, r2
 801192c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011930:	f108 0601 	add.w	r6, r8, #1
 8011934:	42b3      	cmp	r3, r6
 8011936:	db0b      	blt.n	8011950 <__lshift+0x38>
 8011938:	4638      	mov	r0, r7
 801193a:	f7ff fd95 	bl	8011468 <_Balloc>
 801193e:	4605      	mov	r5, r0
 8011940:	b948      	cbnz	r0, 8011956 <__lshift+0x3e>
 8011942:	4602      	mov	r2, r0
 8011944:	4b28      	ldr	r3, [pc, #160]	@ (80119e8 <__lshift+0xd0>)
 8011946:	4829      	ldr	r0, [pc, #164]	@ (80119ec <__lshift+0xd4>)
 8011948:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801194c:	f000 fc54 	bl	80121f8 <__assert_func>
 8011950:	3101      	adds	r1, #1
 8011952:	005b      	lsls	r3, r3, #1
 8011954:	e7ee      	b.n	8011934 <__lshift+0x1c>
 8011956:	2300      	movs	r3, #0
 8011958:	f100 0114 	add.w	r1, r0, #20
 801195c:	f100 0210 	add.w	r2, r0, #16
 8011960:	4618      	mov	r0, r3
 8011962:	4553      	cmp	r3, sl
 8011964:	db33      	blt.n	80119ce <__lshift+0xb6>
 8011966:	6920      	ldr	r0, [r4, #16]
 8011968:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801196c:	f104 0314 	add.w	r3, r4, #20
 8011970:	f019 091f 	ands.w	r9, r9, #31
 8011974:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011978:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801197c:	d02b      	beq.n	80119d6 <__lshift+0xbe>
 801197e:	f1c9 0e20 	rsb	lr, r9, #32
 8011982:	468a      	mov	sl, r1
 8011984:	2200      	movs	r2, #0
 8011986:	6818      	ldr	r0, [r3, #0]
 8011988:	fa00 f009 	lsl.w	r0, r0, r9
 801198c:	4310      	orrs	r0, r2
 801198e:	f84a 0b04 	str.w	r0, [sl], #4
 8011992:	f853 2b04 	ldr.w	r2, [r3], #4
 8011996:	459c      	cmp	ip, r3
 8011998:	fa22 f20e 	lsr.w	r2, r2, lr
 801199c:	d8f3      	bhi.n	8011986 <__lshift+0x6e>
 801199e:	ebac 0304 	sub.w	r3, ip, r4
 80119a2:	3b15      	subs	r3, #21
 80119a4:	f023 0303 	bic.w	r3, r3, #3
 80119a8:	3304      	adds	r3, #4
 80119aa:	f104 0015 	add.w	r0, r4, #21
 80119ae:	4584      	cmp	ip, r0
 80119b0:	bf38      	it	cc
 80119b2:	2304      	movcc	r3, #4
 80119b4:	50ca      	str	r2, [r1, r3]
 80119b6:	b10a      	cbz	r2, 80119bc <__lshift+0xa4>
 80119b8:	f108 0602 	add.w	r6, r8, #2
 80119bc:	3e01      	subs	r6, #1
 80119be:	4638      	mov	r0, r7
 80119c0:	612e      	str	r6, [r5, #16]
 80119c2:	4621      	mov	r1, r4
 80119c4:	f7ff fd90 	bl	80114e8 <_Bfree>
 80119c8:	4628      	mov	r0, r5
 80119ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80119d2:	3301      	adds	r3, #1
 80119d4:	e7c5      	b.n	8011962 <__lshift+0x4a>
 80119d6:	3904      	subs	r1, #4
 80119d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80119dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80119e0:	459c      	cmp	ip, r3
 80119e2:	d8f9      	bhi.n	80119d8 <__lshift+0xc0>
 80119e4:	e7ea      	b.n	80119bc <__lshift+0xa4>
 80119e6:	bf00      	nop
 80119e8:	08012ca5 	.word	0x08012ca5
 80119ec:	08012d42 	.word	0x08012d42

080119f0 <__mcmp>:
 80119f0:	690a      	ldr	r2, [r1, #16]
 80119f2:	4603      	mov	r3, r0
 80119f4:	6900      	ldr	r0, [r0, #16]
 80119f6:	1a80      	subs	r0, r0, r2
 80119f8:	b530      	push	{r4, r5, lr}
 80119fa:	d10e      	bne.n	8011a1a <__mcmp+0x2a>
 80119fc:	3314      	adds	r3, #20
 80119fe:	3114      	adds	r1, #20
 8011a00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a10:	4295      	cmp	r5, r2
 8011a12:	d003      	beq.n	8011a1c <__mcmp+0x2c>
 8011a14:	d205      	bcs.n	8011a22 <__mcmp+0x32>
 8011a16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a1a:	bd30      	pop	{r4, r5, pc}
 8011a1c:	42a3      	cmp	r3, r4
 8011a1e:	d3f3      	bcc.n	8011a08 <__mcmp+0x18>
 8011a20:	e7fb      	b.n	8011a1a <__mcmp+0x2a>
 8011a22:	2001      	movs	r0, #1
 8011a24:	e7f9      	b.n	8011a1a <__mcmp+0x2a>
	...

08011a28 <__mdiff>:
 8011a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2c:	4689      	mov	r9, r1
 8011a2e:	4606      	mov	r6, r0
 8011a30:	4611      	mov	r1, r2
 8011a32:	4648      	mov	r0, r9
 8011a34:	4614      	mov	r4, r2
 8011a36:	f7ff ffdb 	bl	80119f0 <__mcmp>
 8011a3a:	1e05      	subs	r5, r0, #0
 8011a3c:	d112      	bne.n	8011a64 <__mdiff+0x3c>
 8011a3e:	4629      	mov	r1, r5
 8011a40:	4630      	mov	r0, r6
 8011a42:	f7ff fd11 	bl	8011468 <_Balloc>
 8011a46:	4602      	mov	r2, r0
 8011a48:	b928      	cbnz	r0, 8011a56 <__mdiff+0x2e>
 8011a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8011b48 <__mdiff+0x120>)
 8011a4c:	f240 2137 	movw	r1, #567	@ 0x237
 8011a50:	483e      	ldr	r0, [pc, #248]	@ (8011b4c <__mdiff+0x124>)
 8011a52:	f000 fbd1 	bl	80121f8 <__assert_func>
 8011a56:	2301      	movs	r3, #1
 8011a58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a5c:	4610      	mov	r0, r2
 8011a5e:	b003      	add	sp, #12
 8011a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a64:	bfbc      	itt	lt
 8011a66:	464b      	movlt	r3, r9
 8011a68:	46a1      	movlt	r9, r4
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011a70:	bfba      	itte	lt
 8011a72:	461c      	movlt	r4, r3
 8011a74:	2501      	movlt	r5, #1
 8011a76:	2500      	movge	r5, #0
 8011a78:	f7ff fcf6 	bl	8011468 <_Balloc>
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	b918      	cbnz	r0, 8011a88 <__mdiff+0x60>
 8011a80:	4b31      	ldr	r3, [pc, #196]	@ (8011b48 <__mdiff+0x120>)
 8011a82:	f240 2145 	movw	r1, #581	@ 0x245
 8011a86:	e7e3      	b.n	8011a50 <__mdiff+0x28>
 8011a88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011a8c:	6926      	ldr	r6, [r4, #16]
 8011a8e:	60c5      	str	r5, [r0, #12]
 8011a90:	f109 0310 	add.w	r3, r9, #16
 8011a94:	f109 0514 	add.w	r5, r9, #20
 8011a98:	f104 0e14 	add.w	lr, r4, #20
 8011a9c:	f100 0b14 	add.w	fp, r0, #20
 8011aa0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011aa4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011aa8:	9301      	str	r3, [sp, #4]
 8011aaa:	46d9      	mov	r9, fp
 8011aac:	f04f 0c00 	mov.w	ip, #0
 8011ab0:	9b01      	ldr	r3, [sp, #4]
 8011ab2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011ab6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011aba:	9301      	str	r3, [sp, #4]
 8011abc:	fa1f f38a 	uxth.w	r3, sl
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	b283      	uxth	r3, r0
 8011ac4:	1acb      	subs	r3, r1, r3
 8011ac6:	0c00      	lsrs	r0, r0, #16
 8011ac8:	4463      	add	r3, ip
 8011aca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011ace:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011ad8:	4576      	cmp	r6, lr
 8011ada:	f849 3b04 	str.w	r3, [r9], #4
 8011ade:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ae2:	d8e5      	bhi.n	8011ab0 <__mdiff+0x88>
 8011ae4:	1b33      	subs	r3, r6, r4
 8011ae6:	3b15      	subs	r3, #21
 8011ae8:	f023 0303 	bic.w	r3, r3, #3
 8011aec:	3415      	adds	r4, #21
 8011aee:	3304      	adds	r3, #4
 8011af0:	42a6      	cmp	r6, r4
 8011af2:	bf38      	it	cc
 8011af4:	2304      	movcc	r3, #4
 8011af6:	441d      	add	r5, r3
 8011af8:	445b      	add	r3, fp
 8011afa:	461e      	mov	r6, r3
 8011afc:	462c      	mov	r4, r5
 8011afe:	4544      	cmp	r4, r8
 8011b00:	d30e      	bcc.n	8011b20 <__mdiff+0xf8>
 8011b02:	f108 0103 	add.w	r1, r8, #3
 8011b06:	1b49      	subs	r1, r1, r5
 8011b08:	f021 0103 	bic.w	r1, r1, #3
 8011b0c:	3d03      	subs	r5, #3
 8011b0e:	45a8      	cmp	r8, r5
 8011b10:	bf38      	it	cc
 8011b12:	2100      	movcc	r1, #0
 8011b14:	440b      	add	r3, r1
 8011b16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b1a:	b191      	cbz	r1, 8011b42 <__mdiff+0x11a>
 8011b1c:	6117      	str	r7, [r2, #16]
 8011b1e:	e79d      	b.n	8011a5c <__mdiff+0x34>
 8011b20:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b24:	46e6      	mov	lr, ip
 8011b26:	0c08      	lsrs	r0, r1, #16
 8011b28:	fa1c fc81 	uxtah	ip, ip, r1
 8011b2c:	4471      	add	r1, lr
 8011b2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b32:	b289      	uxth	r1, r1
 8011b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b38:	f846 1b04 	str.w	r1, [r6], #4
 8011b3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b40:	e7dd      	b.n	8011afe <__mdiff+0xd6>
 8011b42:	3f01      	subs	r7, #1
 8011b44:	e7e7      	b.n	8011b16 <__mdiff+0xee>
 8011b46:	bf00      	nop
 8011b48:	08012ca5 	.word	0x08012ca5
 8011b4c:	08012d42 	.word	0x08012d42

08011b50 <__ulp>:
 8011b50:	b082      	sub	sp, #8
 8011b52:	ed8d 0b00 	vstr	d0, [sp]
 8011b56:	9a01      	ldr	r2, [sp, #4]
 8011b58:	4b0f      	ldr	r3, [pc, #60]	@ (8011b98 <__ulp+0x48>)
 8011b5a:	4013      	ands	r3, r2
 8011b5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	dc08      	bgt.n	8011b76 <__ulp+0x26>
 8011b64:	425b      	negs	r3, r3
 8011b66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011b6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011b6e:	da04      	bge.n	8011b7a <__ulp+0x2a>
 8011b70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011b74:	4113      	asrs	r3, r2
 8011b76:	2200      	movs	r2, #0
 8011b78:	e008      	b.n	8011b8c <__ulp+0x3c>
 8011b7a:	f1a2 0314 	sub.w	r3, r2, #20
 8011b7e:	2b1e      	cmp	r3, #30
 8011b80:	bfda      	itte	le
 8011b82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011b86:	40da      	lsrle	r2, r3
 8011b88:	2201      	movgt	r2, #1
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	4610      	mov	r0, r2
 8011b90:	ec41 0b10 	vmov	d0, r0, r1
 8011b94:	b002      	add	sp, #8
 8011b96:	4770      	bx	lr
 8011b98:	7ff00000 	.word	0x7ff00000

08011b9c <__b2d>:
 8011b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba0:	6906      	ldr	r6, [r0, #16]
 8011ba2:	f100 0814 	add.w	r8, r0, #20
 8011ba6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011baa:	1f37      	subs	r7, r6, #4
 8011bac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011bb0:	4610      	mov	r0, r2
 8011bb2:	f7ff fd4b 	bl	801164c <__hi0bits>
 8011bb6:	f1c0 0320 	rsb	r3, r0, #32
 8011bba:	280a      	cmp	r0, #10
 8011bbc:	600b      	str	r3, [r1, #0]
 8011bbe:	491b      	ldr	r1, [pc, #108]	@ (8011c2c <__b2d+0x90>)
 8011bc0:	dc15      	bgt.n	8011bee <__b2d+0x52>
 8011bc2:	f1c0 0c0b 	rsb	ip, r0, #11
 8011bc6:	fa22 f30c 	lsr.w	r3, r2, ip
 8011bca:	45b8      	cmp	r8, r7
 8011bcc:	ea43 0501 	orr.w	r5, r3, r1
 8011bd0:	bf34      	ite	cc
 8011bd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011bd6:	2300      	movcs	r3, #0
 8011bd8:	3015      	adds	r0, #21
 8011bda:	fa02 f000 	lsl.w	r0, r2, r0
 8011bde:	fa23 f30c 	lsr.w	r3, r3, ip
 8011be2:	4303      	orrs	r3, r0
 8011be4:	461c      	mov	r4, r3
 8011be6:	ec45 4b10 	vmov	d0, r4, r5
 8011bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bee:	45b8      	cmp	r8, r7
 8011bf0:	bf3a      	itte	cc
 8011bf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011bf6:	f1a6 0708 	subcc.w	r7, r6, #8
 8011bfa:	2300      	movcs	r3, #0
 8011bfc:	380b      	subs	r0, #11
 8011bfe:	d012      	beq.n	8011c26 <__b2d+0x8a>
 8011c00:	f1c0 0120 	rsb	r1, r0, #32
 8011c04:	fa23 f401 	lsr.w	r4, r3, r1
 8011c08:	4082      	lsls	r2, r0
 8011c0a:	4322      	orrs	r2, r4
 8011c0c:	4547      	cmp	r7, r8
 8011c0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c12:	bf8c      	ite	hi
 8011c14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c18:	2200      	movls	r2, #0
 8011c1a:	4083      	lsls	r3, r0
 8011c1c:	40ca      	lsrs	r2, r1
 8011c1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c22:	4313      	orrs	r3, r2
 8011c24:	e7de      	b.n	8011be4 <__b2d+0x48>
 8011c26:	ea42 0501 	orr.w	r5, r2, r1
 8011c2a:	e7db      	b.n	8011be4 <__b2d+0x48>
 8011c2c:	3ff00000 	.word	0x3ff00000

08011c30 <__d2b>:
 8011c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c34:	460f      	mov	r7, r1
 8011c36:	2101      	movs	r1, #1
 8011c38:	ec59 8b10 	vmov	r8, r9, d0
 8011c3c:	4616      	mov	r6, r2
 8011c3e:	f7ff fc13 	bl	8011468 <_Balloc>
 8011c42:	4604      	mov	r4, r0
 8011c44:	b930      	cbnz	r0, 8011c54 <__d2b+0x24>
 8011c46:	4602      	mov	r2, r0
 8011c48:	4b23      	ldr	r3, [pc, #140]	@ (8011cd8 <__d2b+0xa8>)
 8011c4a:	4824      	ldr	r0, [pc, #144]	@ (8011cdc <__d2b+0xac>)
 8011c4c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c50:	f000 fad2 	bl	80121f8 <__assert_func>
 8011c54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c5c:	b10d      	cbz	r5, 8011c62 <__d2b+0x32>
 8011c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c62:	9301      	str	r3, [sp, #4]
 8011c64:	f1b8 0300 	subs.w	r3, r8, #0
 8011c68:	d023      	beq.n	8011cb2 <__d2b+0x82>
 8011c6a:	4668      	mov	r0, sp
 8011c6c:	9300      	str	r3, [sp, #0]
 8011c6e:	f7ff fd0c 	bl	801168a <__lo0bits>
 8011c72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011c76:	b1d0      	cbz	r0, 8011cae <__d2b+0x7e>
 8011c78:	f1c0 0320 	rsb	r3, r0, #32
 8011c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8011c80:	430b      	orrs	r3, r1
 8011c82:	40c2      	lsrs	r2, r0
 8011c84:	6163      	str	r3, [r4, #20]
 8011c86:	9201      	str	r2, [sp, #4]
 8011c88:	9b01      	ldr	r3, [sp, #4]
 8011c8a:	61a3      	str	r3, [r4, #24]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	bf0c      	ite	eq
 8011c90:	2201      	moveq	r2, #1
 8011c92:	2202      	movne	r2, #2
 8011c94:	6122      	str	r2, [r4, #16]
 8011c96:	b1a5      	cbz	r5, 8011cc2 <__d2b+0x92>
 8011c98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011c9c:	4405      	add	r5, r0
 8011c9e:	603d      	str	r5, [r7, #0]
 8011ca0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011ca4:	6030      	str	r0, [r6, #0]
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	b003      	add	sp, #12
 8011caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cae:	6161      	str	r1, [r4, #20]
 8011cb0:	e7ea      	b.n	8011c88 <__d2b+0x58>
 8011cb2:	a801      	add	r0, sp, #4
 8011cb4:	f7ff fce9 	bl	801168a <__lo0bits>
 8011cb8:	9b01      	ldr	r3, [sp, #4]
 8011cba:	6163      	str	r3, [r4, #20]
 8011cbc:	3020      	adds	r0, #32
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	e7e8      	b.n	8011c94 <__d2b+0x64>
 8011cc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011cca:	6038      	str	r0, [r7, #0]
 8011ccc:	6918      	ldr	r0, [r3, #16]
 8011cce:	f7ff fcbd 	bl	801164c <__hi0bits>
 8011cd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011cd6:	e7e5      	b.n	8011ca4 <__d2b+0x74>
 8011cd8:	08012ca5 	.word	0x08012ca5
 8011cdc:	08012d42 	.word	0x08012d42

08011ce0 <__ratio>:
 8011ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce4:	4688      	mov	r8, r1
 8011ce6:	4669      	mov	r1, sp
 8011ce8:	4681      	mov	r9, r0
 8011cea:	f7ff ff57 	bl	8011b9c <__b2d>
 8011cee:	a901      	add	r1, sp, #4
 8011cf0:	4640      	mov	r0, r8
 8011cf2:	ec55 4b10 	vmov	r4, r5, d0
 8011cf6:	f7ff ff51 	bl	8011b9c <__b2d>
 8011cfa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011cfe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011d02:	1ad2      	subs	r2, r2, r3
 8011d04:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011d08:	1a5b      	subs	r3, r3, r1
 8011d0a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011d0e:	ec57 6b10 	vmov	r6, r7, d0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	bfd6      	itet	le
 8011d16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d1a:	462a      	movgt	r2, r5
 8011d1c:	463a      	movle	r2, r7
 8011d1e:	46ab      	mov	fp, r5
 8011d20:	46a2      	mov	sl, r4
 8011d22:	bfce      	itee	gt
 8011d24:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011d28:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011d2c:	ee00 3a90 	vmovle	s1, r3
 8011d30:	ec4b ab17 	vmov	d7, sl, fp
 8011d34:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011d38:	b003      	add	sp, #12
 8011d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d3e <__copybits>:
 8011d3e:	3901      	subs	r1, #1
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	1149      	asrs	r1, r1, #5
 8011d44:	6914      	ldr	r4, [r2, #16]
 8011d46:	3101      	adds	r1, #1
 8011d48:	f102 0314 	add.w	r3, r2, #20
 8011d4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d54:	1f05      	subs	r5, r0, #4
 8011d56:	42a3      	cmp	r3, r4
 8011d58:	d30c      	bcc.n	8011d74 <__copybits+0x36>
 8011d5a:	1aa3      	subs	r3, r4, r2
 8011d5c:	3b11      	subs	r3, #17
 8011d5e:	f023 0303 	bic.w	r3, r3, #3
 8011d62:	3211      	adds	r2, #17
 8011d64:	42a2      	cmp	r2, r4
 8011d66:	bf88      	it	hi
 8011d68:	2300      	movhi	r3, #0
 8011d6a:	4418      	add	r0, r3
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	4288      	cmp	r0, r1
 8011d70:	d305      	bcc.n	8011d7e <__copybits+0x40>
 8011d72:	bd70      	pop	{r4, r5, r6, pc}
 8011d74:	f853 6b04 	ldr.w	r6, [r3], #4
 8011d78:	f845 6f04 	str.w	r6, [r5, #4]!
 8011d7c:	e7eb      	b.n	8011d56 <__copybits+0x18>
 8011d7e:	f840 3b04 	str.w	r3, [r0], #4
 8011d82:	e7f4      	b.n	8011d6e <__copybits+0x30>

08011d84 <__any_on>:
 8011d84:	f100 0214 	add.w	r2, r0, #20
 8011d88:	6900      	ldr	r0, [r0, #16]
 8011d8a:	114b      	asrs	r3, r1, #5
 8011d8c:	4298      	cmp	r0, r3
 8011d8e:	b510      	push	{r4, lr}
 8011d90:	db11      	blt.n	8011db6 <__any_on+0x32>
 8011d92:	dd0a      	ble.n	8011daa <__any_on+0x26>
 8011d94:	f011 011f 	ands.w	r1, r1, #31
 8011d98:	d007      	beq.n	8011daa <__any_on+0x26>
 8011d9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011d9e:	fa24 f001 	lsr.w	r0, r4, r1
 8011da2:	fa00 f101 	lsl.w	r1, r0, r1
 8011da6:	428c      	cmp	r4, r1
 8011da8:	d10b      	bne.n	8011dc2 <__any_on+0x3e>
 8011daa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dae:	4293      	cmp	r3, r2
 8011db0:	d803      	bhi.n	8011dba <__any_on+0x36>
 8011db2:	2000      	movs	r0, #0
 8011db4:	bd10      	pop	{r4, pc}
 8011db6:	4603      	mov	r3, r0
 8011db8:	e7f7      	b.n	8011daa <__any_on+0x26>
 8011dba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011dbe:	2900      	cmp	r1, #0
 8011dc0:	d0f5      	beq.n	8011dae <__any_on+0x2a>
 8011dc2:	2001      	movs	r0, #1
 8011dc4:	e7f6      	b.n	8011db4 <__any_on+0x30>

08011dc6 <__submore>:
 8011dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dca:	460c      	mov	r4, r1
 8011dcc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011dce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011dd2:	4299      	cmp	r1, r3
 8011dd4:	d11d      	bne.n	8011e12 <__submore+0x4c>
 8011dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011dda:	f7fb fe49 	bl	800da70 <_malloc_r>
 8011dde:	b918      	cbnz	r0, 8011de8 <__submore+0x22>
 8011de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011dec:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011dee:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011df2:	6360      	str	r0, [r4, #52]	@ 0x34
 8011df4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011df8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011dfc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011e00:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e04:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011e08:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011e0c:	6020      	str	r0, [r4, #0]
 8011e0e:	2000      	movs	r0, #0
 8011e10:	e7e8      	b.n	8011de4 <__submore+0x1e>
 8011e12:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011e14:	0077      	lsls	r7, r6, #1
 8011e16:	463a      	mov	r2, r7
 8011e18:	f000 f80f 	bl	8011e3a <_realloc_r>
 8011e1c:	4605      	mov	r5, r0
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	d0de      	beq.n	8011de0 <__submore+0x1a>
 8011e22:	eb00 0806 	add.w	r8, r0, r6
 8011e26:	4601      	mov	r1, r0
 8011e28:	4632      	mov	r2, r6
 8011e2a:	4640      	mov	r0, r8
 8011e2c:	f7fd faf1 	bl	800f412 <memcpy>
 8011e30:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011e34:	f8c4 8000 	str.w	r8, [r4]
 8011e38:	e7e9      	b.n	8011e0e <__submore+0x48>

08011e3a <_realloc_r>:
 8011e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e3e:	4680      	mov	r8, r0
 8011e40:	4615      	mov	r5, r2
 8011e42:	460c      	mov	r4, r1
 8011e44:	b921      	cbnz	r1, 8011e50 <_realloc_r+0x16>
 8011e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	f7fb be10 	b.w	800da70 <_malloc_r>
 8011e50:	b92a      	cbnz	r2, 8011e5e <_realloc_r+0x24>
 8011e52:	f7fe f8db 	bl	801000c <_free_r>
 8011e56:	2400      	movs	r4, #0
 8011e58:	4620      	mov	r0, r4
 8011e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e5e:	f000 f9fd 	bl	801225c <_malloc_usable_size_r>
 8011e62:	4285      	cmp	r5, r0
 8011e64:	4606      	mov	r6, r0
 8011e66:	d802      	bhi.n	8011e6e <_realloc_r+0x34>
 8011e68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011e6c:	d8f4      	bhi.n	8011e58 <_realloc_r+0x1e>
 8011e6e:	4629      	mov	r1, r5
 8011e70:	4640      	mov	r0, r8
 8011e72:	f7fb fdfd 	bl	800da70 <_malloc_r>
 8011e76:	4607      	mov	r7, r0
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	d0ec      	beq.n	8011e56 <_realloc_r+0x1c>
 8011e7c:	42b5      	cmp	r5, r6
 8011e7e:	462a      	mov	r2, r5
 8011e80:	4621      	mov	r1, r4
 8011e82:	bf28      	it	cs
 8011e84:	4632      	movcs	r2, r6
 8011e86:	f7fd fac4 	bl	800f412 <memcpy>
 8011e8a:	4621      	mov	r1, r4
 8011e8c:	4640      	mov	r0, r8
 8011e8e:	f7fe f8bd 	bl	801000c <_free_r>
 8011e92:	463c      	mov	r4, r7
 8011e94:	e7e0      	b.n	8011e58 <_realloc_r+0x1e>
	...

08011e98 <_strtoul_l.constprop.0>:
 8011e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e9c:	4e34      	ldr	r6, [pc, #208]	@ (8011f70 <_strtoul_l.constprop.0+0xd8>)
 8011e9e:	4686      	mov	lr, r0
 8011ea0:	460d      	mov	r5, r1
 8011ea2:	4628      	mov	r0, r5
 8011ea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ea8:	5d37      	ldrb	r7, [r6, r4]
 8011eaa:	f017 0708 	ands.w	r7, r7, #8
 8011eae:	d1f8      	bne.n	8011ea2 <_strtoul_l.constprop.0+0xa>
 8011eb0:	2c2d      	cmp	r4, #45	@ 0x2d
 8011eb2:	d12f      	bne.n	8011f14 <_strtoul_l.constprop.0+0x7c>
 8011eb4:	782c      	ldrb	r4, [r5, #0]
 8011eb6:	2701      	movs	r7, #1
 8011eb8:	1c85      	adds	r5, r0, #2
 8011eba:	f033 0010 	bics.w	r0, r3, #16
 8011ebe:	d109      	bne.n	8011ed4 <_strtoul_l.constprop.0+0x3c>
 8011ec0:	2c30      	cmp	r4, #48	@ 0x30
 8011ec2:	d12c      	bne.n	8011f1e <_strtoul_l.constprop.0+0x86>
 8011ec4:	7828      	ldrb	r0, [r5, #0]
 8011ec6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011eca:	2858      	cmp	r0, #88	@ 0x58
 8011ecc:	d127      	bne.n	8011f1e <_strtoul_l.constprop.0+0x86>
 8011ece:	786c      	ldrb	r4, [r5, #1]
 8011ed0:	2310      	movs	r3, #16
 8011ed2:	3502      	adds	r5, #2
 8011ed4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011ed8:	2600      	movs	r6, #0
 8011eda:	fbb8 f8f3 	udiv	r8, r8, r3
 8011ede:	fb03 f908 	mul.w	r9, r3, r8
 8011ee2:	ea6f 0909 	mvn.w	r9, r9
 8011ee6:	4630      	mov	r0, r6
 8011ee8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011eec:	f1bc 0f09 	cmp.w	ip, #9
 8011ef0:	d81c      	bhi.n	8011f2c <_strtoul_l.constprop.0+0x94>
 8011ef2:	4664      	mov	r4, ip
 8011ef4:	42a3      	cmp	r3, r4
 8011ef6:	dd2a      	ble.n	8011f4e <_strtoul_l.constprop.0+0xb6>
 8011ef8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8011efc:	d007      	beq.n	8011f0e <_strtoul_l.constprop.0+0x76>
 8011efe:	4580      	cmp	r8, r0
 8011f00:	d322      	bcc.n	8011f48 <_strtoul_l.constprop.0+0xb0>
 8011f02:	d101      	bne.n	8011f08 <_strtoul_l.constprop.0+0x70>
 8011f04:	45a1      	cmp	r9, r4
 8011f06:	db1f      	blt.n	8011f48 <_strtoul_l.constprop.0+0xb0>
 8011f08:	fb00 4003 	mla	r0, r0, r3, r4
 8011f0c:	2601      	movs	r6, #1
 8011f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f12:	e7e9      	b.n	8011ee8 <_strtoul_l.constprop.0+0x50>
 8011f14:	2c2b      	cmp	r4, #43	@ 0x2b
 8011f16:	bf04      	itt	eq
 8011f18:	782c      	ldrbeq	r4, [r5, #0]
 8011f1a:	1c85      	addeq	r5, r0, #2
 8011f1c:	e7cd      	b.n	8011eba <_strtoul_l.constprop.0+0x22>
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d1d8      	bne.n	8011ed4 <_strtoul_l.constprop.0+0x3c>
 8011f22:	2c30      	cmp	r4, #48	@ 0x30
 8011f24:	bf0c      	ite	eq
 8011f26:	2308      	moveq	r3, #8
 8011f28:	230a      	movne	r3, #10
 8011f2a:	e7d3      	b.n	8011ed4 <_strtoul_l.constprop.0+0x3c>
 8011f2c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011f30:	f1bc 0f19 	cmp.w	ip, #25
 8011f34:	d801      	bhi.n	8011f3a <_strtoul_l.constprop.0+0xa2>
 8011f36:	3c37      	subs	r4, #55	@ 0x37
 8011f38:	e7dc      	b.n	8011ef4 <_strtoul_l.constprop.0+0x5c>
 8011f3a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011f3e:	f1bc 0f19 	cmp.w	ip, #25
 8011f42:	d804      	bhi.n	8011f4e <_strtoul_l.constprop.0+0xb6>
 8011f44:	3c57      	subs	r4, #87	@ 0x57
 8011f46:	e7d5      	b.n	8011ef4 <_strtoul_l.constprop.0+0x5c>
 8011f48:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8011f4c:	e7df      	b.n	8011f0e <_strtoul_l.constprop.0+0x76>
 8011f4e:	1c73      	adds	r3, r6, #1
 8011f50:	d106      	bne.n	8011f60 <_strtoul_l.constprop.0+0xc8>
 8011f52:	2322      	movs	r3, #34	@ 0x22
 8011f54:	f8ce 3000 	str.w	r3, [lr]
 8011f58:	4630      	mov	r0, r6
 8011f5a:	b932      	cbnz	r2, 8011f6a <_strtoul_l.constprop.0+0xd2>
 8011f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f60:	b107      	cbz	r7, 8011f64 <_strtoul_l.constprop.0+0xcc>
 8011f62:	4240      	negs	r0, r0
 8011f64:	2a00      	cmp	r2, #0
 8011f66:	d0f9      	beq.n	8011f5c <_strtoul_l.constprop.0+0xc4>
 8011f68:	b106      	cbz	r6, 8011f6c <_strtoul_l.constprop.0+0xd4>
 8011f6a:	1e69      	subs	r1, r5, #1
 8011f6c:	6011      	str	r1, [r2, #0]
 8011f6e:	e7f5      	b.n	8011f5c <_strtoul_l.constprop.0+0xc4>
 8011f70:	08012b29 	.word	0x08012b29

08011f74 <_strtoul_r>:
 8011f74:	f7ff bf90 	b.w	8011e98 <_strtoul_l.constprop.0>

08011f78 <__swbuf_r>:
 8011f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7a:	460e      	mov	r6, r1
 8011f7c:	4614      	mov	r4, r2
 8011f7e:	4605      	mov	r5, r0
 8011f80:	b118      	cbz	r0, 8011f8a <__swbuf_r+0x12>
 8011f82:	6a03      	ldr	r3, [r0, #32]
 8011f84:	b90b      	cbnz	r3, 8011f8a <__swbuf_r+0x12>
 8011f86:	f7fc fab5 	bl	800e4f4 <__sinit>
 8011f8a:	69a3      	ldr	r3, [r4, #24]
 8011f8c:	60a3      	str	r3, [r4, #8]
 8011f8e:	89a3      	ldrh	r3, [r4, #12]
 8011f90:	071a      	lsls	r2, r3, #28
 8011f92:	d501      	bpl.n	8011f98 <__swbuf_r+0x20>
 8011f94:	6923      	ldr	r3, [r4, #16]
 8011f96:	b943      	cbnz	r3, 8011faa <__swbuf_r+0x32>
 8011f98:	4621      	mov	r1, r4
 8011f9a:	4628      	mov	r0, r5
 8011f9c:	f000 f82a 	bl	8011ff4 <__swsetup_r>
 8011fa0:	b118      	cbz	r0, 8011faa <__swbuf_r+0x32>
 8011fa2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011fa6:	4638      	mov	r0, r7
 8011fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011faa:	6823      	ldr	r3, [r4, #0]
 8011fac:	6922      	ldr	r2, [r4, #16]
 8011fae:	1a98      	subs	r0, r3, r2
 8011fb0:	6963      	ldr	r3, [r4, #20]
 8011fb2:	b2f6      	uxtb	r6, r6
 8011fb4:	4283      	cmp	r3, r0
 8011fb6:	4637      	mov	r7, r6
 8011fb8:	dc05      	bgt.n	8011fc6 <__swbuf_r+0x4e>
 8011fba:	4621      	mov	r1, r4
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	f7ff fa2b 	bl	8011418 <_fflush_r>
 8011fc2:	2800      	cmp	r0, #0
 8011fc4:	d1ed      	bne.n	8011fa2 <__swbuf_r+0x2a>
 8011fc6:	68a3      	ldr	r3, [r4, #8]
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	60a3      	str	r3, [r4, #8]
 8011fcc:	6823      	ldr	r3, [r4, #0]
 8011fce:	1c5a      	adds	r2, r3, #1
 8011fd0:	6022      	str	r2, [r4, #0]
 8011fd2:	701e      	strb	r6, [r3, #0]
 8011fd4:	6962      	ldr	r2, [r4, #20]
 8011fd6:	1c43      	adds	r3, r0, #1
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d004      	beq.n	8011fe6 <__swbuf_r+0x6e>
 8011fdc:	89a3      	ldrh	r3, [r4, #12]
 8011fde:	07db      	lsls	r3, r3, #31
 8011fe0:	d5e1      	bpl.n	8011fa6 <__swbuf_r+0x2e>
 8011fe2:	2e0a      	cmp	r6, #10
 8011fe4:	d1df      	bne.n	8011fa6 <__swbuf_r+0x2e>
 8011fe6:	4621      	mov	r1, r4
 8011fe8:	4628      	mov	r0, r5
 8011fea:	f7ff fa15 	bl	8011418 <_fflush_r>
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	d0d9      	beq.n	8011fa6 <__swbuf_r+0x2e>
 8011ff2:	e7d6      	b.n	8011fa2 <__swbuf_r+0x2a>

08011ff4 <__swsetup_r>:
 8011ff4:	b538      	push	{r3, r4, r5, lr}
 8011ff6:	4b29      	ldr	r3, [pc, #164]	@ (801209c <__swsetup_r+0xa8>)
 8011ff8:	4605      	mov	r5, r0
 8011ffa:	6818      	ldr	r0, [r3, #0]
 8011ffc:	460c      	mov	r4, r1
 8011ffe:	b118      	cbz	r0, 8012008 <__swsetup_r+0x14>
 8012000:	6a03      	ldr	r3, [r0, #32]
 8012002:	b90b      	cbnz	r3, 8012008 <__swsetup_r+0x14>
 8012004:	f7fc fa76 	bl	800e4f4 <__sinit>
 8012008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801200c:	0719      	lsls	r1, r3, #28
 801200e:	d422      	bmi.n	8012056 <__swsetup_r+0x62>
 8012010:	06da      	lsls	r2, r3, #27
 8012012:	d407      	bmi.n	8012024 <__swsetup_r+0x30>
 8012014:	2209      	movs	r2, #9
 8012016:	602a      	str	r2, [r5, #0]
 8012018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801201c:	81a3      	strh	r3, [r4, #12]
 801201e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012022:	e033      	b.n	801208c <__swsetup_r+0x98>
 8012024:	0758      	lsls	r0, r3, #29
 8012026:	d512      	bpl.n	801204e <__swsetup_r+0x5a>
 8012028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801202a:	b141      	cbz	r1, 801203e <__swsetup_r+0x4a>
 801202c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012030:	4299      	cmp	r1, r3
 8012032:	d002      	beq.n	801203a <__swsetup_r+0x46>
 8012034:	4628      	mov	r0, r5
 8012036:	f7fd ffe9 	bl	801000c <_free_r>
 801203a:	2300      	movs	r3, #0
 801203c:	6363      	str	r3, [r4, #52]	@ 0x34
 801203e:	89a3      	ldrh	r3, [r4, #12]
 8012040:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012044:	81a3      	strh	r3, [r4, #12]
 8012046:	2300      	movs	r3, #0
 8012048:	6063      	str	r3, [r4, #4]
 801204a:	6923      	ldr	r3, [r4, #16]
 801204c:	6023      	str	r3, [r4, #0]
 801204e:	89a3      	ldrh	r3, [r4, #12]
 8012050:	f043 0308 	orr.w	r3, r3, #8
 8012054:	81a3      	strh	r3, [r4, #12]
 8012056:	6923      	ldr	r3, [r4, #16]
 8012058:	b94b      	cbnz	r3, 801206e <__swsetup_r+0x7a>
 801205a:	89a3      	ldrh	r3, [r4, #12]
 801205c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012064:	d003      	beq.n	801206e <__swsetup_r+0x7a>
 8012066:	4621      	mov	r1, r4
 8012068:	4628      	mov	r0, r5
 801206a:	f000 f84c 	bl	8012106 <__smakebuf_r>
 801206e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012072:	f013 0201 	ands.w	r2, r3, #1
 8012076:	d00a      	beq.n	801208e <__swsetup_r+0x9a>
 8012078:	2200      	movs	r2, #0
 801207a:	60a2      	str	r2, [r4, #8]
 801207c:	6962      	ldr	r2, [r4, #20]
 801207e:	4252      	negs	r2, r2
 8012080:	61a2      	str	r2, [r4, #24]
 8012082:	6922      	ldr	r2, [r4, #16]
 8012084:	b942      	cbnz	r2, 8012098 <__swsetup_r+0xa4>
 8012086:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801208a:	d1c5      	bne.n	8012018 <__swsetup_r+0x24>
 801208c:	bd38      	pop	{r3, r4, r5, pc}
 801208e:	0799      	lsls	r1, r3, #30
 8012090:	bf58      	it	pl
 8012092:	6962      	ldrpl	r2, [r4, #20]
 8012094:	60a2      	str	r2, [r4, #8]
 8012096:	e7f4      	b.n	8012082 <__swsetup_r+0x8e>
 8012098:	2000      	movs	r0, #0
 801209a:	e7f7      	b.n	801208c <__swsetup_r+0x98>
 801209c:	24000190 	.word	0x24000190

080120a0 <__ascii_wctomb>:
 80120a0:	4603      	mov	r3, r0
 80120a2:	4608      	mov	r0, r1
 80120a4:	b141      	cbz	r1, 80120b8 <__ascii_wctomb+0x18>
 80120a6:	2aff      	cmp	r2, #255	@ 0xff
 80120a8:	d904      	bls.n	80120b4 <__ascii_wctomb+0x14>
 80120aa:	228a      	movs	r2, #138	@ 0x8a
 80120ac:	601a      	str	r2, [r3, #0]
 80120ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120b2:	4770      	bx	lr
 80120b4:	700a      	strb	r2, [r1, #0]
 80120b6:	2001      	movs	r0, #1
 80120b8:	4770      	bx	lr

080120ba <__swhatbuf_r>:
 80120ba:	b570      	push	{r4, r5, r6, lr}
 80120bc:	460c      	mov	r4, r1
 80120be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120c2:	2900      	cmp	r1, #0
 80120c4:	b096      	sub	sp, #88	@ 0x58
 80120c6:	4615      	mov	r5, r2
 80120c8:	461e      	mov	r6, r3
 80120ca:	da0d      	bge.n	80120e8 <__swhatbuf_r+0x2e>
 80120cc:	89a3      	ldrh	r3, [r4, #12]
 80120ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80120d2:	f04f 0100 	mov.w	r1, #0
 80120d6:	bf14      	ite	ne
 80120d8:	2340      	movne	r3, #64	@ 0x40
 80120da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80120de:	2000      	movs	r0, #0
 80120e0:	6031      	str	r1, [r6, #0]
 80120e2:	602b      	str	r3, [r5, #0]
 80120e4:	b016      	add	sp, #88	@ 0x58
 80120e6:	bd70      	pop	{r4, r5, r6, pc}
 80120e8:	466a      	mov	r2, sp
 80120ea:	f000 f863 	bl	80121b4 <_fstat_r>
 80120ee:	2800      	cmp	r0, #0
 80120f0:	dbec      	blt.n	80120cc <__swhatbuf_r+0x12>
 80120f2:	9901      	ldr	r1, [sp, #4]
 80120f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80120f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80120fc:	4259      	negs	r1, r3
 80120fe:	4159      	adcs	r1, r3
 8012100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012104:	e7eb      	b.n	80120de <__swhatbuf_r+0x24>

08012106 <__smakebuf_r>:
 8012106:	898b      	ldrh	r3, [r1, #12]
 8012108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801210a:	079d      	lsls	r5, r3, #30
 801210c:	4606      	mov	r6, r0
 801210e:	460c      	mov	r4, r1
 8012110:	d507      	bpl.n	8012122 <__smakebuf_r+0x1c>
 8012112:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012116:	6023      	str	r3, [r4, #0]
 8012118:	6123      	str	r3, [r4, #16]
 801211a:	2301      	movs	r3, #1
 801211c:	6163      	str	r3, [r4, #20]
 801211e:	b003      	add	sp, #12
 8012120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012122:	ab01      	add	r3, sp, #4
 8012124:	466a      	mov	r2, sp
 8012126:	f7ff ffc8 	bl	80120ba <__swhatbuf_r>
 801212a:	9f00      	ldr	r7, [sp, #0]
 801212c:	4605      	mov	r5, r0
 801212e:	4639      	mov	r1, r7
 8012130:	4630      	mov	r0, r6
 8012132:	f7fb fc9d 	bl	800da70 <_malloc_r>
 8012136:	b948      	cbnz	r0, 801214c <__smakebuf_r+0x46>
 8012138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801213c:	059a      	lsls	r2, r3, #22
 801213e:	d4ee      	bmi.n	801211e <__smakebuf_r+0x18>
 8012140:	f023 0303 	bic.w	r3, r3, #3
 8012144:	f043 0302 	orr.w	r3, r3, #2
 8012148:	81a3      	strh	r3, [r4, #12]
 801214a:	e7e2      	b.n	8012112 <__smakebuf_r+0xc>
 801214c:	89a3      	ldrh	r3, [r4, #12]
 801214e:	6020      	str	r0, [r4, #0]
 8012150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012154:	81a3      	strh	r3, [r4, #12]
 8012156:	9b01      	ldr	r3, [sp, #4]
 8012158:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801215c:	b15b      	cbz	r3, 8012176 <__smakebuf_r+0x70>
 801215e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012162:	4630      	mov	r0, r6
 8012164:	f000 f838 	bl	80121d8 <_isatty_r>
 8012168:	b128      	cbz	r0, 8012176 <__smakebuf_r+0x70>
 801216a:	89a3      	ldrh	r3, [r4, #12]
 801216c:	f023 0303 	bic.w	r3, r3, #3
 8012170:	f043 0301 	orr.w	r3, r3, #1
 8012174:	81a3      	strh	r3, [r4, #12]
 8012176:	89a3      	ldrh	r3, [r4, #12]
 8012178:	431d      	orrs	r5, r3
 801217a:	81a5      	strh	r5, [r4, #12]
 801217c:	e7cf      	b.n	801211e <__smakebuf_r+0x18>

0801217e <memmove>:
 801217e:	4288      	cmp	r0, r1
 8012180:	b510      	push	{r4, lr}
 8012182:	eb01 0402 	add.w	r4, r1, r2
 8012186:	d902      	bls.n	801218e <memmove+0x10>
 8012188:	4284      	cmp	r4, r0
 801218a:	4623      	mov	r3, r4
 801218c:	d807      	bhi.n	801219e <memmove+0x20>
 801218e:	1e43      	subs	r3, r0, #1
 8012190:	42a1      	cmp	r1, r4
 8012192:	d008      	beq.n	80121a6 <memmove+0x28>
 8012194:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012198:	f803 2f01 	strb.w	r2, [r3, #1]!
 801219c:	e7f8      	b.n	8012190 <memmove+0x12>
 801219e:	4402      	add	r2, r0
 80121a0:	4601      	mov	r1, r0
 80121a2:	428a      	cmp	r2, r1
 80121a4:	d100      	bne.n	80121a8 <memmove+0x2a>
 80121a6:	bd10      	pop	{r4, pc}
 80121a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80121ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80121b0:	e7f7      	b.n	80121a2 <memmove+0x24>
	...

080121b4 <_fstat_r>:
 80121b4:	b538      	push	{r3, r4, r5, lr}
 80121b6:	4d07      	ldr	r5, [pc, #28]	@ (80121d4 <_fstat_r+0x20>)
 80121b8:	2300      	movs	r3, #0
 80121ba:	4604      	mov	r4, r0
 80121bc:	4608      	mov	r0, r1
 80121be:	4611      	mov	r1, r2
 80121c0:	602b      	str	r3, [r5, #0]
 80121c2:	f7f0 fa8d 	bl	80026e0 <_fstat>
 80121c6:	1c43      	adds	r3, r0, #1
 80121c8:	d102      	bne.n	80121d0 <_fstat_r+0x1c>
 80121ca:	682b      	ldr	r3, [r5, #0]
 80121cc:	b103      	cbz	r3, 80121d0 <_fstat_r+0x1c>
 80121ce:	6023      	str	r3, [r4, #0]
 80121d0:	bd38      	pop	{r3, r4, r5, pc}
 80121d2:	bf00      	nop
 80121d4:	24000dfc 	.word	0x24000dfc

080121d8 <_isatty_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	4d06      	ldr	r5, [pc, #24]	@ (80121f4 <_isatty_r+0x1c>)
 80121dc:	2300      	movs	r3, #0
 80121de:	4604      	mov	r4, r0
 80121e0:	4608      	mov	r0, r1
 80121e2:	602b      	str	r3, [r5, #0]
 80121e4:	f7f0 fa8c 	bl	8002700 <_isatty>
 80121e8:	1c43      	adds	r3, r0, #1
 80121ea:	d102      	bne.n	80121f2 <_isatty_r+0x1a>
 80121ec:	682b      	ldr	r3, [r5, #0]
 80121ee:	b103      	cbz	r3, 80121f2 <_isatty_r+0x1a>
 80121f0:	6023      	str	r3, [r4, #0]
 80121f2:	bd38      	pop	{r3, r4, r5, pc}
 80121f4:	24000dfc 	.word	0x24000dfc

080121f8 <__assert_func>:
 80121f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121fa:	4614      	mov	r4, r2
 80121fc:	461a      	mov	r2, r3
 80121fe:	4b09      	ldr	r3, [pc, #36]	@ (8012224 <__assert_func+0x2c>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	4605      	mov	r5, r0
 8012204:	68d8      	ldr	r0, [r3, #12]
 8012206:	b954      	cbnz	r4, 801221e <__assert_func+0x26>
 8012208:	4b07      	ldr	r3, [pc, #28]	@ (8012228 <__assert_func+0x30>)
 801220a:	461c      	mov	r4, r3
 801220c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012210:	9100      	str	r1, [sp, #0]
 8012212:	462b      	mov	r3, r5
 8012214:	4905      	ldr	r1, [pc, #20]	@ (801222c <__assert_func+0x34>)
 8012216:	f000 f829 	bl	801226c <fiprintf>
 801221a:	f000 f839 	bl	8012290 <abort>
 801221e:	4b04      	ldr	r3, [pc, #16]	@ (8012230 <__assert_func+0x38>)
 8012220:	e7f4      	b.n	801220c <__assert_func+0x14>
 8012222:	bf00      	nop
 8012224:	24000190 	.word	0x24000190
 8012228:	08012ed3 	.word	0x08012ed3
 801222c:	08012ea5 	.word	0x08012ea5
 8012230:	08012e98 	.word	0x08012e98

08012234 <_calloc_r>:
 8012234:	b570      	push	{r4, r5, r6, lr}
 8012236:	fba1 5402 	umull	r5, r4, r1, r2
 801223a:	b93c      	cbnz	r4, 801224c <_calloc_r+0x18>
 801223c:	4629      	mov	r1, r5
 801223e:	f7fb fc17 	bl	800da70 <_malloc_r>
 8012242:	4606      	mov	r6, r0
 8012244:	b928      	cbnz	r0, 8012252 <_calloc_r+0x1e>
 8012246:	2600      	movs	r6, #0
 8012248:	4630      	mov	r0, r6
 801224a:	bd70      	pop	{r4, r5, r6, pc}
 801224c:	220c      	movs	r2, #12
 801224e:	6002      	str	r2, [r0, #0]
 8012250:	e7f9      	b.n	8012246 <_calloc_r+0x12>
 8012252:	462a      	mov	r2, r5
 8012254:	4621      	mov	r1, r4
 8012256:	f7fd f84d 	bl	800f2f4 <memset>
 801225a:	e7f5      	b.n	8012248 <_calloc_r+0x14>

0801225c <_malloc_usable_size_r>:
 801225c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012260:	1f18      	subs	r0, r3, #4
 8012262:	2b00      	cmp	r3, #0
 8012264:	bfbc      	itt	lt
 8012266:	580b      	ldrlt	r3, [r1, r0]
 8012268:	18c0      	addlt	r0, r0, r3
 801226a:	4770      	bx	lr

0801226c <fiprintf>:
 801226c:	b40e      	push	{r1, r2, r3}
 801226e:	b503      	push	{r0, r1, lr}
 8012270:	4601      	mov	r1, r0
 8012272:	ab03      	add	r3, sp, #12
 8012274:	4805      	ldr	r0, [pc, #20]	@ (801228c <fiprintf+0x20>)
 8012276:	f853 2b04 	ldr.w	r2, [r3], #4
 801227a:	6800      	ldr	r0, [r0, #0]
 801227c:	9301      	str	r3, [sp, #4]
 801227e:	f7fe fd95 	bl	8010dac <_vfiprintf_r>
 8012282:	b002      	add	sp, #8
 8012284:	f85d eb04 	ldr.w	lr, [sp], #4
 8012288:	b003      	add	sp, #12
 801228a:	4770      	bx	lr
 801228c:	24000190 	.word	0x24000190

08012290 <abort>:
 8012290:	b508      	push	{r3, lr}
 8012292:	2006      	movs	r0, #6
 8012294:	f000 f82c 	bl	80122f0 <raise>
 8012298:	2001      	movs	r0, #1
 801229a:	f7f0 f9ed 	bl	8002678 <_exit>

0801229e <_raise_r>:
 801229e:	291f      	cmp	r1, #31
 80122a0:	b538      	push	{r3, r4, r5, lr}
 80122a2:	4605      	mov	r5, r0
 80122a4:	460c      	mov	r4, r1
 80122a6:	d904      	bls.n	80122b2 <_raise_r+0x14>
 80122a8:	2316      	movs	r3, #22
 80122aa:	6003      	str	r3, [r0, #0]
 80122ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122b0:	bd38      	pop	{r3, r4, r5, pc}
 80122b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80122b4:	b112      	cbz	r2, 80122bc <_raise_r+0x1e>
 80122b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80122ba:	b94b      	cbnz	r3, 80122d0 <_raise_r+0x32>
 80122bc:	4628      	mov	r0, r5
 80122be:	f000 f831 	bl	8012324 <_getpid_r>
 80122c2:	4622      	mov	r2, r4
 80122c4:	4601      	mov	r1, r0
 80122c6:	4628      	mov	r0, r5
 80122c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122cc:	f000 b818 	b.w	8012300 <_kill_r>
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d00a      	beq.n	80122ea <_raise_r+0x4c>
 80122d4:	1c59      	adds	r1, r3, #1
 80122d6:	d103      	bne.n	80122e0 <_raise_r+0x42>
 80122d8:	2316      	movs	r3, #22
 80122da:	6003      	str	r3, [r0, #0]
 80122dc:	2001      	movs	r0, #1
 80122de:	e7e7      	b.n	80122b0 <_raise_r+0x12>
 80122e0:	2100      	movs	r1, #0
 80122e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80122e6:	4620      	mov	r0, r4
 80122e8:	4798      	blx	r3
 80122ea:	2000      	movs	r0, #0
 80122ec:	e7e0      	b.n	80122b0 <_raise_r+0x12>
	...

080122f0 <raise>:
 80122f0:	4b02      	ldr	r3, [pc, #8]	@ (80122fc <raise+0xc>)
 80122f2:	4601      	mov	r1, r0
 80122f4:	6818      	ldr	r0, [r3, #0]
 80122f6:	f7ff bfd2 	b.w	801229e <_raise_r>
 80122fa:	bf00      	nop
 80122fc:	24000190 	.word	0x24000190

08012300 <_kill_r>:
 8012300:	b538      	push	{r3, r4, r5, lr}
 8012302:	4d07      	ldr	r5, [pc, #28]	@ (8012320 <_kill_r+0x20>)
 8012304:	2300      	movs	r3, #0
 8012306:	4604      	mov	r4, r0
 8012308:	4608      	mov	r0, r1
 801230a:	4611      	mov	r1, r2
 801230c:	602b      	str	r3, [r5, #0]
 801230e:	f7f0 f9a3 	bl	8002658 <_kill>
 8012312:	1c43      	adds	r3, r0, #1
 8012314:	d102      	bne.n	801231c <_kill_r+0x1c>
 8012316:	682b      	ldr	r3, [r5, #0]
 8012318:	b103      	cbz	r3, 801231c <_kill_r+0x1c>
 801231a:	6023      	str	r3, [r4, #0]
 801231c:	bd38      	pop	{r3, r4, r5, pc}
 801231e:	bf00      	nop
 8012320:	24000dfc 	.word	0x24000dfc

08012324 <_getpid_r>:
 8012324:	f7f0 b990 	b.w	8002648 <_getpid>

08012328 <fmod>:
 8012328:	b508      	push	{r3, lr}
 801232a:	ed2d 8b04 	vpush	{d8-d9}
 801232e:	eeb0 9b40 	vmov.f64	d9, d0
 8012332:	eeb0 8b41 	vmov.f64	d8, d1
 8012336:	f000 f81b 	bl	8012370 <__ieee754_fmod>
 801233a:	eeb4 9b48 	vcmp.f64	d9, d8
 801233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012342:	d60c      	bvs.n	801235e <fmod+0x36>
 8012344:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8012368 <fmod+0x40>
 8012348:	eeb4 8b49 	vcmp.f64	d8, d9
 801234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012350:	d105      	bne.n	801235e <fmod+0x36>
 8012352:	f7fd f831 	bl	800f3b8 <__errno>
 8012356:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801235a:	2321      	movs	r3, #33	@ 0x21
 801235c:	6003      	str	r3, [r0, #0]
 801235e:	ecbd 8b04 	vpop	{d8-d9}
 8012362:	bd08      	pop	{r3, pc}
 8012364:	f3af 8000 	nop.w
	...

08012370 <__ieee754_fmod>:
 8012370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012374:	ed8d 1b00 	vstr	d1, [sp]
 8012378:	e9dd 6500 	ldrd	r6, r5, [sp]
 801237c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8012380:	ea56 0307 	orrs.w	r3, r6, r7
 8012384:	46b6      	mov	lr, r6
 8012386:	d00d      	beq.n	80123a4 <__ieee754_fmod+0x34>
 8012388:	ee10 ca90 	vmov	ip, s1
 801238c:	4b78      	ldr	r3, [pc, #480]	@ (8012570 <__ieee754_fmod+0x200>)
 801238e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8012392:	4598      	cmp	r8, r3
 8012394:	d806      	bhi.n	80123a4 <__ieee754_fmod+0x34>
 8012396:	4273      	negs	r3, r6
 8012398:	4a76      	ldr	r2, [pc, #472]	@ (8012574 <__ieee754_fmod+0x204>)
 801239a:	4333      	orrs	r3, r6
 801239c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d908      	bls.n	80123b6 <__ieee754_fmod+0x46>
 80123a4:	ed9d 7b00 	vldr	d7, [sp]
 80123a8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80123ac:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80123b0:	b003      	add	sp, #12
 80123b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123b6:	ee10 9a10 	vmov	r9, s0
 80123ba:	45b8      	cmp	r8, r7
 80123bc:	4649      	mov	r1, r9
 80123be:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 80123c2:	dc09      	bgt.n	80123d8 <__ieee754_fmod+0x68>
 80123c4:	dbf4      	blt.n	80123b0 <__ieee754_fmod+0x40>
 80123c6:	454e      	cmp	r6, r9
 80123c8:	d8f2      	bhi.n	80123b0 <__ieee754_fmod+0x40>
 80123ca:	d105      	bne.n	80123d8 <__ieee754_fmod+0x68>
 80123cc:	4b6a      	ldr	r3, [pc, #424]	@ (8012578 <__ieee754_fmod+0x208>)
 80123ce:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 80123d2:	ed93 0b00 	vldr	d0, [r3]
 80123d6:	e7eb      	b.n	80123b0 <__ieee754_fmod+0x40>
 80123d8:	4a66      	ldr	r2, [pc, #408]	@ (8012574 <__ieee754_fmod+0x204>)
 80123da:	ea1c 0f02 	tst.w	ip, r2
 80123de:	d14a      	bne.n	8012476 <__ieee754_fmod+0x106>
 80123e0:	f1b8 0f00 	cmp.w	r8, #0
 80123e4:	d13f      	bne.n	8012466 <__ieee754_fmod+0xf6>
 80123e6:	4865      	ldr	r0, [pc, #404]	@ (801257c <__ieee754_fmod+0x20c>)
 80123e8:	464b      	mov	r3, r9
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	dc38      	bgt.n	8012460 <__ieee754_fmod+0xf0>
 80123ee:	4215      	tst	r5, r2
 80123f0:	d150      	bne.n	8012494 <__ieee754_fmod+0x124>
 80123f2:	2f00      	cmp	r7, #0
 80123f4:	d147      	bne.n	8012486 <__ieee754_fmod+0x116>
 80123f6:	4a61      	ldr	r2, [pc, #388]	@ (801257c <__ieee754_fmod+0x20c>)
 80123f8:	4633      	mov	r3, r6
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	dc40      	bgt.n	8012480 <__ieee754_fmod+0x110>
 80123fe:	4b60      	ldr	r3, [pc, #384]	@ (8012580 <__ieee754_fmod+0x210>)
 8012400:	4298      	cmp	r0, r3
 8012402:	db4b      	blt.n	801249c <__ieee754_fmod+0x12c>
 8012404:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8012408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801240c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8012580 <__ieee754_fmod+0x210>
 8012410:	4562      	cmp	r2, ip
 8012412:	db58      	blt.n	80124c6 <__ieee754_fmod+0x156>
 8012414:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012418:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 801241c:	1a80      	subs	r0, r0, r2
 801241e:	1b5e      	subs	r6, r3, r5
 8012420:	eba1 070e 	sub.w	r7, r1, lr
 8012424:	2800      	cmp	r0, #0
 8012426:	d164      	bne.n	80124f2 <__ieee754_fmod+0x182>
 8012428:	4571      	cmp	r1, lr
 801242a:	bf38      	it	cc
 801242c:	f106 36ff 	addcc.w	r6, r6, #4294967295	@ 0xffffffff
 8012430:	2e00      	cmp	r6, #0
 8012432:	bfa4      	itt	ge
 8012434:	4639      	movge	r1, r7
 8012436:	4633      	movge	r3, r6
 8012438:	ea53 0001 	orrs.w	r0, r3, r1
 801243c:	d0c6      	beq.n	80123cc <__ieee754_fmod+0x5c>
 801243e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012442:	db6b      	blt.n	801251c <__ieee754_fmod+0x1ac>
 8012444:	484e      	ldr	r0, [pc, #312]	@ (8012580 <__ieee754_fmod+0x210>)
 8012446:	4282      	cmp	r2, r0
 8012448:	db6e      	blt.n	8012528 <__ieee754_fmod+0x1b8>
 801244a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801244e:	4323      	orrs	r3, r4
 8012450:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8012454:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012458:	460c      	mov	r4, r1
 801245a:	ec45 4b10 	vmov	d0, r4, r5
 801245e:	e7a7      	b.n	80123b0 <__ieee754_fmod+0x40>
 8012460:	3801      	subs	r0, #1
 8012462:	005b      	lsls	r3, r3, #1
 8012464:	e7c1      	b.n	80123ea <__ieee754_fmod+0x7a>
 8012466:	4846      	ldr	r0, [pc, #280]	@ (8012580 <__ieee754_fmod+0x210>)
 8012468:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801246c:	2b00      	cmp	r3, #0
 801246e:	ddbe      	ble.n	80123ee <__ieee754_fmod+0x7e>
 8012470:	3801      	subs	r0, #1
 8012472:	005b      	lsls	r3, r3, #1
 8012474:	e7fa      	b.n	801246c <__ieee754_fmod+0xfc>
 8012476:	ea4f 5028 	mov.w	r0, r8, asr #20
 801247a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 801247e:	e7b6      	b.n	80123ee <__ieee754_fmod+0x7e>
 8012480:	3a01      	subs	r2, #1
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	e7b9      	b.n	80123fa <__ieee754_fmod+0x8a>
 8012486:	4a3e      	ldr	r2, [pc, #248]	@ (8012580 <__ieee754_fmod+0x210>)
 8012488:	02fb      	lsls	r3, r7, #11
 801248a:	2b00      	cmp	r3, #0
 801248c:	ddb7      	ble.n	80123fe <__ieee754_fmod+0x8e>
 801248e:	3a01      	subs	r2, #1
 8012490:	005b      	lsls	r3, r3, #1
 8012492:	e7fa      	b.n	801248a <__ieee754_fmod+0x11a>
 8012494:	153a      	asrs	r2, r7, #20
 8012496:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801249a:	e7b0      	b.n	80123fe <__ieee754_fmod+0x8e>
 801249c:	eba3 0c00 	sub.w	ip, r3, r0
 80124a0:	f1bc 0f1f 	cmp.w	ip, #31
 80124a4:	dc09      	bgt.n	80124ba <__ieee754_fmod+0x14a>
 80124a6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 80124aa:	fa08 f10c 	lsl.w	r1, r8, ip
 80124ae:	fa29 f303 	lsr.w	r3, r9, r3
 80124b2:	430b      	orrs	r3, r1
 80124b4:	fa09 f10c 	lsl.w	r1, r9, ip
 80124b8:	e7a8      	b.n	801240c <__ieee754_fmod+0x9c>
 80124ba:	4b32      	ldr	r3, [pc, #200]	@ (8012584 <__ieee754_fmod+0x214>)
 80124bc:	1a1b      	subs	r3, r3, r0
 80124be:	fa09 f303 	lsl.w	r3, r9, r3
 80124c2:	2100      	movs	r1, #0
 80124c4:	e7a2      	b.n	801240c <__ieee754_fmod+0x9c>
 80124c6:	ebac 0c02 	sub.w	ip, ip, r2
 80124ca:	f1bc 0f1f 	cmp.w	ip, #31
 80124ce:	dc09      	bgt.n	80124e4 <__ieee754_fmod+0x174>
 80124d0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 80124d4:	fa07 f70c 	lsl.w	r7, r7, ip
 80124d8:	fa26 f505 	lsr.w	r5, r6, r5
 80124dc:	433d      	orrs	r5, r7
 80124de:	fa06 fe0c 	lsl.w	lr, r6, ip
 80124e2:	e79b      	b.n	801241c <__ieee754_fmod+0xac>
 80124e4:	4d27      	ldr	r5, [pc, #156]	@ (8012584 <__ieee754_fmod+0x214>)
 80124e6:	1aad      	subs	r5, r5, r2
 80124e8:	fa06 f505 	lsl.w	r5, r6, r5
 80124ec:	f04f 0e00 	mov.w	lr, #0
 80124f0:	e794      	b.n	801241c <__ieee754_fmod+0xac>
 80124f2:	4571      	cmp	r1, lr
 80124f4:	bf38      	it	cc
 80124f6:	f106 36ff 	addcc.w	r6, r6, #4294967295	@ 0xffffffff
 80124fa:	2e00      	cmp	r6, #0
 80124fc:	da05      	bge.n	801250a <__ieee754_fmod+0x19a>
 80124fe:	0fce      	lsrs	r6, r1, #31
 8012500:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8012504:	0049      	lsls	r1, r1, #1
 8012506:	3801      	subs	r0, #1
 8012508:	e789      	b.n	801241e <__ieee754_fmod+0xae>
 801250a:	ea56 0307 	orrs.w	r3, r6, r7
 801250e:	f43f af5d 	beq.w	80123cc <__ieee754_fmod+0x5c>
 8012512:	0ffb      	lsrs	r3, r7, #31
 8012514:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8012518:	0079      	lsls	r1, r7, #1
 801251a:	e7f4      	b.n	8012506 <__ieee754_fmod+0x196>
 801251c:	0fc8      	lsrs	r0, r1, #31
 801251e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012522:	0049      	lsls	r1, r1, #1
 8012524:	3a01      	subs	r2, #1
 8012526:	e78a      	b.n	801243e <__ieee754_fmod+0xce>
 8012528:	1a80      	subs	r0, r0, r2
 801252a:	2814      	cmp	r0, #20
 801252c:	dc0c      	bgt.n	8012548 <__ieee754_fmod+0x1d8>
 801252e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8012532:	fa03 f202 	lsl.w	r2, r3, r2
 8012536:	40c1      	lsrs	r1, r0
 8012538:	430a      	orrs	r2, r1
 801253a:	4103      	asrs	r3, r0
 801253c:	ea43 0104 	orr.w	r1, r3, r4
 8012540:	4610      	mov	r0, r2
 8012542:	ec41 0b10 	vmov	d0, r0, r1
 8012546:	e733      	b.n	80123b0 <__ieee754_fmod+0x40>
 8012548:	281f      	cmp	r0, #31
 801254a:	dc07      	bgt.n	801255c <__ieee754_fmod+0x1ec>
 801254c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8012550:	40c1      	lsrs	r1, r0
 8012552:	fa03 f202 	lsl.w	r2, r3, r2
 8012556:	430a      	orrs	r2, r1
 8012558:	4623      	mov	r3, r4
 801255a:	e7ef      	b.n	801253c <__ieee754_fmod+0x1cc>
 801255c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8012560:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8012564:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8012568:	32e2      	adds	r2, #226	@ 0xe2
 801256a:	fa43 f202 	asr.w	r2, r3, r2
 801256e:	e7f3      	b.n	8012558 <__ieee754_fmod+0x1e8>
 8012570:	7fefffff 	.word	0x7fefffff
 8012574:	7ff00000 	.word	0x7ff00000
 8012578:	08012ed8 	.word	0x08012ed8
 801257c:	fffffbed 	.word	0xfffffbed
 8012580:	fffffc02 	.word	0xfffffc02
 8012584:	fffffbe2 	.word	0xfffffbe2

08012588 <_init>:
 8012588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801258a:	bf00      	nop
 801258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801258e:	bc08      	pop	{r3}
 8012590:	469e      	mov	lr, r3
 8012592:	4770      	bx	lr

08012594 <_fini>:
 8012594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012596:	bf00      	nop
 8012598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801259a:	bc08      	pop	{r3}
 801259c:	469e      	mov	lr, r3
 801259e:	4770      	bx	lr
